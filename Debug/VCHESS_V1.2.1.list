
VCHESS_V1.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013270  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08013410  08013410  00023410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a20  08013a20  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08013a20  08013a20  00023a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a28  08013a28  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a28  08013a28  00023a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a2c  08013a2c  00023a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08013a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b4e0  20000104  08013b34  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b5e4  08013b34  0003b5e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d5b6  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000706d  00000000  00000000  0005d6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002460  00000000  00000000  00064758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002170  00000000  00000000  00066bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c3c  00000000  00000000  00068d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033106  00000000  00000000  00089964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a67d1  00000000  00000000  000bca6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016323b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009448  00000000  00000000  0016328c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080133f8 	.word	0x080133f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	080133f8 	.word	0x080133f8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <MX_DMA_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a3e      	ldr	r2, [pc, #248]	; (80005ec <MX_DMA_Init+0x108>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_DMA_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <MX_DMA_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <MX_DMA_Init+0x108>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_DMA_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fe11 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f001 fe2a 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2105      	movs	r1, #5
 8000536:	200c      	movs	r0, #12
 8000538:	f001 fe09 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800053c:	200c      	movs	r0, #12
 800053e:	f001 fe22 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200d      	movs	r0, #13
 8000548:	f001 fe01 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f001 fe1a 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	200e      	movs	r0, #14
 8000558:	f001 fdf9 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800055c:	200e      	movs	r0, #14
 800055e:	f001 fe12 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	200f      	movs	r0, #15
 8000568:	f001 fdf1 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800056c:	200f      	movs	r0, #15
 800056e:	f001 fe0a 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2011      	movs	r0, #17
 8000578:	f001 fde9 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800057c:	2011      	movs	r0, #17
 800057e:	f001 fe02 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	202f      	movs	r0, #47	; 0x2f
 8000588:	f001 fde1 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800058c:	202f      	movs	r0, #47	; 0x2f
 800058e:	f001 fdfa 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2039      	movs	r0, #57	; 0x39
 8000598:	f001 fdd9 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f001 fdf2 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	203a      	movs	r0, #58	; 0x3a
 80005a8:	f001 fdd1 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f001 fdea 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2105      	movs	r1, #5
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f001 fdc9 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f001 fde2 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2105      	movs	r1, #5
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f001 fdc1 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	; 0x45
 80005ce:	f001 fdda 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 fdb9 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 fdd2 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20004188 	.word	0x20004188
 8000620:	200041dc 	.word	0x200041dc

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemGetFRAM */
  osSemaphoreDef(binarySemGetFRAM);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  binarySemGetFRAMHandle = osSemaphoreCreate(osSemaphore(binarySemGetFRAM), 1);
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f00e faa0 	bl	800eb7e <osSemaphoreCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemMasterGetData */
  osSemaphoreDef(binarySemMasterGetData);
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  binarySemMasterGetDataHandle = osSemaphoreCreate(osSemaphore(binarySemMasterGetData), 1);
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f00e fa93 	bl	800eb7e <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemI2C_Status */
  osSemaphoreDef(binarySemI2C_Status);
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  binarySemI2C_StatusHandle = osSemaphoreCreate(osSemaphore(binarySemI2C_Status), 1);
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f00e fa86 	bl	800eb7e <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 512);
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e fa13 	bl	800eabe <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskScanPiece */
  osThreadStaticDef(taskScanPiece, StartTaskScanPiece, osPriorityHigh, 0, 4096, taskScanPieceBuffer, &taskScanPieceControlBlock);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FREERTOS_Init+0xb8>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskScanPieceHandle = osThreadCreate(osThread(taskScanPiece), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00e fa02 	bl	800eabe <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_FREERTOS_Init+0xbc>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	2000417c 	.word	0x2000417c
 80006cc:	20004180 	.word	0x20004180
 80006d0:	20004184 	.word	0x20004184
 80006d4:	0801342c 	.word	0x0801342c
 80006d8:	20000120 	.word	0x20000120
 80006dc:	08013448 	.word	0x08013448
 80006e0:	20000124 	.word	0x20000124

080006e4 <StartDefaultTask>:
  */
extern uint8_t ping_chessclock;
extern uint8_t data_chessclock[15];
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f010 f906 	bl	80108fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  ChessClock_Init();
 80006f0:	f010 feba 	bl	8011468 <ChessClock_Init>

  /* Infinite loop */
  for(;;)
  {
	  // kiểm tra trạng thái kết nối với đồng hồ qua I2C
	  osDelay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f00e fa2d 	bl	800eb56 <osDelay>
	  if(ping_chessclock > 0) {
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <StartDefaultTask+0x40>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <StartDefaultTask+0x2c>
		  ping_chessclock--;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <StartDefaultTask+0x40>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <StartDefaultTask+0x40>)
 800070e:	701a      	strb	r2, [r3, #0]
	  }
	  /* ping_chessclock sẽ đếm ngược đến 0
	   * khi nó đếm đến 0 sẽ set chessclock status = disconnect */
	  if(ping_chessclock==0){
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <StartDefaultTask+0x40>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1ed      	bne.n	80006f4 <StartDefaultTask+0x10>
		  data_chessclock[9]=STATUS_DISCONNECT_CLOCK;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <StartDefaultTask+0x44>)
 800071a:	2237      	movs	r2, #55	; 0x37
 800071c:	725a      	strb	r2, [r3, #9]
		  HAL_NVIC_SystemReset();
 800071e:	f001 fd40 	bl	80021a2 <HAL_NVIC_SystemReset>
	  osDelay(1000);
 8000722:	e7e7      	b.n	80006f4 <StartDefaultTask+0x10>
 8000724:	200000fe 	.word	0x200000fe
 8000728:	20009c5c 	.word	0x20009c5c

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <MX_GPIO_Init+0x120>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a40      	ldr	r2, [pc, #256]	; (800084c <MX_GPIO_Init+0x120>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_GPIO_Init+0x120>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <MX_GPIO_Init+0x120>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <MX_GPIO_Init+0x120>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_GPIO_Init+0x120>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_GPIO_Init+0x120>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a32      	ldr	r2, [pc, #200]	; (800084c <MX_GPIO_Init+0x120>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x120>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_GPIO_Init+0x120>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2b      	ldr	r2, [pc, #172]	; (800084c <MX_GPIO_Init+0x120>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0x120>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_TX_EN_Pin|CD4051_A_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f248 0101 	movw	r1, #32769	; 0x8001
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <MX_GPIO_Init+0x124>)
 80007ba:	f002 fa97 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_PWRC_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2112      	movs	r1, #18
 80007c2:	4823      	ldr	r0, [pc, #140]	; (8000850 <MX_GPIO_Init+0x124>)
 80007c4:	f002 fa92 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <MX_GPIO_Init+0x128>)
 80007ce:	f002 fa8d 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TX_EN_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_TX_EN_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <MX_GPIO_Init+0x124>)
 80007ea:	f002 f8fb 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_PWRC_Pin|CD4051_A_Pin;
 80007ee:	f248 0302 	movw	r3, #32770	; 0x8002
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0x124>)
 8000808:	f002 f8ec 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0x124>)
 8000824:	f002 f8de 	bl	80029e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin;
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0x128>)
 8000840:	f002 f8d0 	bl	80029e4 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 160;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	22a0      	movs	r2, #160	; 0xa0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f002 fa43 	bl	8002d20 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f986 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200043dc 	.word	0x200043dc
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <HAL_I2C_MspInit+0x104>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d16b      	bne.n	80009ae <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	482c      	ldr	r0, [pc, #176]	; (80009c0 <HAL_I2C_MspInit+0x10c>)
 8000910:	f002 f868 	bl	80029e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_I2C_MspInit+0x108>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <HAL_I2C_MspInit+0x114>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000974:	f001 fc1a 	bl	80021ac <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800097e:	f000 f917 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201f      	movs	r0, #31
 8000994:	f001 fbdb 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000998:	201f      	movs	r0, #31
 800099a:	f001 fbf4 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2020      	movs	r0, #32
 80009a4:	f001 fbd3 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009a8:	2020      	movs	r0, #32
 80009aa:	f001 fbec 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	20004430 	.word	0x20004430
 80009c8:	40026010 	.word	0x40026010

080009cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <MX_IWDG_Init+0x30>)
 80009d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009d8:	2204      	movs	r2, #4
 80009da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009e6:	f004 fa10 	bl	8004e0a <HAL_IWDG_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009f0:	f000 f8de 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20004490 	.word	0x20004490
 80009fc:	40003000 	.word	0x40003000

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f001 fa6d 	bl	8001ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f839 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff fe8d 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f7ff fd67 	bl	80004e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a16:	f000 fbb1 	bl	800117c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a1a:	f000 fc69 	bl	80012f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fce7 	bl	80013f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a22:	f000 fd71 	bl	8001508 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000a26:	f7ff ff17 	bl	8000858 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a2a:	f000 f979 	bl	8000d20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000a2e:	f001 f93d 	bl	8001cac <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000a32:	f000 f8c5 	bl	8000bc0 <MX_RTC_Init>
  MX_IWDG_Init();
 8000a36:	f7ff ffc9 	bl	80009cc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  // led nhay bao hieu khoi dong
  for(int i=0;i<3;i++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e012      	b.n	8000a66 <main+0x66>
	LED_ON;
 8000a40:	2201      	movs	r2, #1
 8000a42:	2104      	movs	r1, #4
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <main+0x7c>)
 8000a46:	f002 f951 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f001 fa8c 	bl	8001f68 <HAL_Delay>
	LED_OFF;
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <main+0x7c>)
 8000a56:	f002 f949 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f001 fa84 	bl	8001f68 <HAL_Delay>
  for(int i=0;i<3;i++){
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	dde9      	ble.n	8000a40 <main+0x40>
  }
  initReceiverUart();
 8000a6c:	f011 ffb8 	bl	80129e0 <initReceiverUart>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a70:	f7ff fdd8 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a74:	f00e f81c 	bl	800eab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x78>
 8000a7a:	bf00      	nop
 8000a7c:	40020400 	.word	0x40020400

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f012 fcaa 	bl	80133e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <SystemClock_Config+0xd8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <SystemClock_Config+0xd8>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xd8>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <SystemClock_Config+0xdc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <SystemClock_Config+0xdc>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <SystemClock_Config+0xdc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000ae0:	230d      	movs	r3, #13
 8000ae2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000afc:	2319      	movs	r3, #25
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fc38 	bl	8006388 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b1e:	f000 f847 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f005 fe9a 	bl	8006878 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b4a:	f000 f831 	bl	8000bb0 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d102      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000b72:	f001 f9d9 	bl	8001f28 <HAL_IncTick>
		  is_start_measure = false;
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000b76:	e00f      	b.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>
  else if(htim->Instance == TIM4){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10a      	bne.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>
	  if(is_start_measure==true){
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x38>
		  is_start_measure = false;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8000b90:	2104      	movs	r1, #4
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b94:	f007 fee2 	bl	800895c <HAL_TIM_IC_Stop_DMA>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40014800 	.word	0x40014800
 8000ba4:	40000800 	.word	0x40000800
 8000ba8:	20009caa 	.word	0x20009caa
 8000bac:	20004634 	.word	0x20004634

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_NVIC_SystemReset();
 8000bb8:	f001 faf3 	bl	80021a2 <HAL_NVIC_SystemReset>
 8000bbc:	e7fc      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	if(RTC->BKP1R==1990){
 8000bc6:	4b3e      	ldr	r3, [pc, #248]	; (8000cc0 <MX_RTC_Init+0x100>)
 8000bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bca:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d11d      	bne.n	8000c0e <MX_RTC_Init+0x4e>
		 hrtc.Instance = RTC;
 8000bd2:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bd4:	4a3a      	ldr	r2, [pc, #232]	; (8000cc0 <MX_RTC_Init+0x100>)
 8000bd6:	601a      	str	r2, [r3, #0]
		  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
		  hrtc.Init.AsynchPrediv = 127;
 8000bde:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000be0:	227f      	movs	r2, #127	; 0x7f
 8000be2:	609a      	str	r2, [r3, #8]
		  hrtc.Init.SynchPrediv = 255;
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	60da      	str	r2, [r3, #12]
		  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
		  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bf0:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
		  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
		  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bfc:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000bfe:	f006 f93b 	bl	8006e78 <HAL_RTC_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d057      	beq.n	8000cb8 <MX_RTC_Init+0xf8>
		  {
		    Error_Handler();
 8000c08:	f7ff ffd2 	bl	8000bb0 <Error_Handler>
 8000c0c:	e055      	b.n	8000cba <MX_RTC_Init+0xfa>
		  }
		return;
	}
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <MX_RTC_Init+0x100>)
 8000c24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c2e:	227f      	movs	r2, #127	; 0x7f
 8000c30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c4a:	481e      	ldr	r0, [pc, #120]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c4c:	f006 f914 	bl	8006e78 <HAL_RTC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000c56:	f7ff ffab 	bl	8000bb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c76:	f006 f975 	bl	8006f64 <HAL_RTC_SetTime>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c80:	f7ff ff96 	bl	8000bb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c84:	2301      	movs	r3, #1
 8000c86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000c88:	2309      	movs	r3, #9
 8000c8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c90:	2316      	movs	r3, #22
 8000c92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000c9c:	f006 fa5a 	bl	8007154 <HAL_RTC_SetDate>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000ca6:	f7ff ff83 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1990);
 8000caa:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_RTC_Init+0x104>)
 8000cb2:	f006 fbdf 	bl	8007474 <HAL_RTCEx_BKUPWrite>
 8000cb6:	e000      	b.n	8000cba <MX_RTC_Init+0xfa>
		return;
 8000cb8:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40002800 	.word	0x40002800
 8000cc4:	2000449c 	.word	0x2000449c

08000cc8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_RTC_MspInit+0x50>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d111      	bne.n	8000d0e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cea:	2302      	movs	r3, #2
 8000cec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 ffcf 	bl	8006c9c <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d04:	f7ff ff54 	bl	8000bb0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_RTC_MspInit+0x54>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40002800 	.word	0x40002800
 8000d1c:	42470e3c 	.word	0x42470e3c

08000d20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d72:	f006 fb99 	bl	80074a8 <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f7ff ff18 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200044bc 	.word	0x200044bc
 8000d88:	40013000 	.word	0x40013000

08000d8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12b      	bne.n	8000e06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x8c>)
 8000e02:	f001 fdef 	bl	80029e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_MspInit+0x54>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_MspInit+0x54>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_MspInit+0x54>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_MspInit+0x54>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_MspInit+0x54>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x54>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	f06f 0001 	mvn.w	r0, #1
 8000e62:	f001 f974 	bl	800214e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_InitTick+0xd0>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <HAL_InitTick+0xd0>)
 8000e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e92:	6453      	str	r3, [r2, #68]	; 0x44
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <HAL_InitTick+0xd0>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 fec4 	bl	8006c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eb0:	f005 feae 	bl	8006c10 <HAL_RCC_GetPCLK2Freq>
 8000eb4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb8:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <HAL_InitTick+0xd4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <HAL_InitTick+0xd8>)
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_InitTick+0xdc>)
 8000ec8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_InitTick+0xd8>)
 8000ecc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <HAL_InitTick+0xd8>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_InitTick+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_InitTick+0xd8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_InitTick+0xd8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <HAL_InitTick+0xd8>)
 8000eec:	f007 f884 	bl	8007ff8 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d11b      	bne.n	8000f36 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <HAL_InitTick+0xd8>)
 8000f00:	f007 f8ca 	bl	8008098 <HAL_TIM_Base_Start_IT>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d111      	bne.n	8000f36 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f12:	201a      	movs	r0, #26
 8000f14:	f001 f937 	bl	8002186 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d808      	bhi.n	8000f30 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	201a      	movs	r0, #26
 8000f24:	f001 f913 	bl	800214e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0xe0>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e002      	b.n	8000f36 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	20004514 	.word	0x20004514
 8000f50:	40014800 	.word	0x40014800
 8000f54:	20000004 	.word	0x20000004

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <DMA1_Stream0_IRQHandler+0x10>)
 8000f8a:	f001 faa7 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20004430 	.word	0x20004430

08000f98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Stream1_IRQHandler+0x10>)
 8000f9e:	f001 fa9d 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000479c 	.word	0x2000479c

08000fac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Stream2_IRQHandler+0x10>)
 8000fb2:	f001 fa93 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000491c 	.word	0x2000491c

08000fc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Stream3_IRQHandler+0x10>)
 8000fc6:	f001 fa89 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000497c 	.word	0x2000497c

08000fd4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Stream4_IRQHandler+0x10>)
 8000fda:	f001 fa7f 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000485c 	.word	0x2000485c

08000fe8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA1_Stream6_IRQHandler+0x10>)
 8000fee:	f001 fa75 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200047fc 	.word	0x200047fc

08000ffc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001002:	f007 fd6d 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000455c 	.word	0x2000455c

08001010 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001016:	f007 fd63 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000455c 	.word	0x2000455c

08001024 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800102a:	f007 fd59 	bl	8008ae0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001030:	f007 fd56 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000455c 	.word	0x2000455c
 800103c:	20004514 	.word	0x20004514

08001040 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM1_CC_IRQHandler+0x10>)
 8001046:	f007 fd4b 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000455c 	.word	0x2000455c

08001054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <TIM2_IRQHandler+0x10>)
 800105a:	f007 fd41 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200045a4 	.word	0x200045a4

08001068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM3_IRQHandler+0x10>)
 800106e:	f007 fd37 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200045ec 	.word	0x200045ec

0800107c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM4_IRQHandler+0x10>)
 8001082:	f007 fd2d 	bl	8008ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20004634 	.word	0x20004634

08001090 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <I2C1_EV_IRQHandler+0x10>)
 8001096:	f002 f8f7 	bl	8003288 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200043dc 	.word	0x200043dc

080010a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <I2C1_ER_IRQHandler+0x10>)
 80010aa:	f002 fa5e 	bl	800356a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200043dc 	.word	0x200043dc

080010b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART1_IRQHandler+0x10>)
 80010be:	f008 ffe3 	bl	800a088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200049dc 	.word	0x200049dc

080010cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DMA1_Stream7_IRQHandler+0x10>)
 80010d2:	f001 fa03 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200048bc 	.word	0x200048bc

080010e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <DMA2_Stream1_IRQHandler+0x10>)
 80010e6:	f001 f9f9 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000467c 	.word	0x2000467c

080010f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <DMA2_Stream2_IRQHandler+0x10>)
 80010fa:	f001 f9ef 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200046dc 	.word	0x200046dc

08001108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <OTG_FS_IRQHandler+0x10>)
 800110e:	f004 f80e 	bl	800512e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000952c 	.word	0x2000952c

0800111c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DMA2_Stream5_IRQHandler+0x10>)
 8001122:	f001 f9db 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20004a20 	.word	0x20004a20

08001130 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <DMA2_Stream6_IRQHandler+0x10>)
 8001136:	f001 f9d1 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000473c 	.word	0x2000473c

08001144 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA2_Stream7_IRQHandler+0x10>)
 800114a:	f001 f9c7 	bl	80024dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20004a80 	.word	0x20004a80

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	; 0x58
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001182:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	615a      	str	r2, [r3, #20]
 80011ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2220      	movs	r2, #32
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f012 f917 	bl	80133e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <MX_TIM1_Init+0x170>)
 80011be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b44      	ldr	r3, [pc, #272]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011da:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e6:	4840      	ldr	r0, [pc, #256]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80011e8:	f006 ff06 	bl	8007ff8 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011f2:	f7ff fcdd 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001200:	4619      	mov	r1, r3
 8001202:	4839      	ldr	r0, [pc, #228]	; (80012e8 <MX_TIM1_Init+0x16c>)
 8001204:	f007 fed2 	bl	8008fac <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800120e:	f7ff fccf 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001212:	4835      	ldr	r0, [pc, #212]	; (80012e8 <MX_TIM1_Init+0x16c>)
 8001214:	f006 ffa2 	bl	800815c <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800121e:	f7ff fcc7 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800122e:	4619      	mov	r1, r3
 8001230:	482d      	ldr	r0, [pc, #180]	; (80012e8 <MX_TIM1_Init+0x16c>)
 8001232:	f008 fd11 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800123c:	f7ff fcb8 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <MX_TIM1_Init+0x16c>)
 8001266:	f007 fddf 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001270:	f7ff fc9e 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001274:	2370      	movs	r3, #112	; 0x70
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2204      	movs	r2, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <MX_TIM1_Init+0x16c>)
 8001282:	f007 fdd1 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800128c:	f7ff fc90 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	2208      	movs	r2, #8
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM1_Init+0x16c>)
 800129a:	f007 fdc5 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012a4:	f7ff fc84 	bl	8000bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80012cc:	f008 fd32 	bl	8009d34 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80012d6:	f7ff fc6b 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM1_Init+0x16c>)
 80012dc:	f000 fc40 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3758      	adds	r7, #88	; 0x58
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000455c 	.word	0x2000455c
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001328:	4b30      	ldr	r3, [pc, #192]	; (80013ec <MX_TIM2_Init+0xfc>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132e:	4b2f      	ldr	r3, [pc, #188]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133c:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <MX_TIM2_Init+0xfc>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001348:	4828      	ldr	r0, [pc, #160]	; (80013ec <MX_TIM2_Init+0xfc>)
 800134a:	f006 fe55 	bl	8007ff8 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001354:	f7ff fc2c 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	4619      	mov	r1, r3
 8001364:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001366:	f007 fe21 	bl	8008fac <HAL_TIM_ConfigClockSource>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001370:	f7ff fc1e 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001376:	f006 fef1 	bl	800815c <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001380:	f7ff fc16 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	4619      	mov	r1, r3
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <MX_TIM2_Init+0xfc>)
 8001394:	f008 fc60 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800139e:	f7ff fc07 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a2:	2360      	movs	r3, #96	; 0x60
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2204      	movs	r2, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM2_Init+0xfc>)
 80013ba:	f007 fd35 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013c4:	f7ff fbf4 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2208      	movs	r2, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM2_Init+0xfc>)
 80013d0:	f007 fd2a 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013da:	f7ff fbe9 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013de:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM2_Init+0xfc>)
 80013e0:	f000 fbbe 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 80013e4:	bf00      	nop
 80013e6:	3738      	adds	r7, #56	; 0x38
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200045a4 	.word	0x200045a4

080013f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <MX_TIM3_Init+0x110>)
 8001422:	4a38      	ldr	r2, [pc, #224]	; (8001504 <MX_TIM3_Init+0x114>)
 8001424:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <MX_TIM3_Init+0x110>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <MX_TIM3_Init+0x110>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <MX_TIM3_Init+0x110>)
 8001434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001438:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_TIM3_Init+0x110>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <MX_TIM3_Init+0x110>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001446:	482e      	ldr	r0, [pc, #184]	; (8001500 <MX_TIM3_Init+0x110>)
 8001448:	f006 fdd6 	bl	8007ff8 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001452:	f7ff fbad 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001460:	4619      	mov	r1, r3
 8001462:	4827      	ldr	r0, [pc, #156]	; (8001500 <MX_TIM3_Init+0x110>)
 8001464:	f007 fda2 	bl	8008fac <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800146e:	f7ff fb9f 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001472:	4823      	ldr	r0, [pc, #140]	; (8001500 <MX_TIM3_Init+0x110>)
 8001474:	f006 fe72 	bl	800815c <HAL_TIM_PWM_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800147e:	f7ff fb97 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	4619      	mov	r1, r3
 8001490:	481b      	ldr	r0, [pc, #108]	; (8001500 <MX_TIM3_Init+0x110>)
 8001492:	f008 fbe1 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800149c:	f7ff fb88 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	; 0x60
 80014a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_TIM3_Init+0x110>)
 80014b8:	f007 fcb6 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014c2:	f7ff fb75 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2208      	movs	r2, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM3_Init+0x110>)
 80014ce:	f007 fcab 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014d8:	f7ff fb6a 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	220c      	movs	r2, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_TIM3_Init+0x110>)
 80014e4:	f007 fca0 	bl	8008e28 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014ee:	f7ff fb5f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_TIM3_Init+0x110>)
 80014f4:	f000 fb34 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200045ec 	.word	0x200045ec
 8001504:	40000400 	.word	0x40000400

08001508 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001534:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <MX_TIM4_Init+0xdc>)
 8001536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_TIM4_Init+0xd8>)
 800153a:	2200      	movs	r2, #0
 800153c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001544:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_TIM4_Init+0xd8>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001558:	4821      	ldr	r0, [pc, #132]	; (80015e0 <MX_TIM4_Init+0xd8>)
 800155a:	f006 fd4d 	bl	8007ff8 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001564:	f7ff fb24 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	4619      	mov	r1, r3
 8001574:	481a      	ldr	r0, [pc, #104]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001576:	f007 fd19 	bl	8008fac <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001580:	f7ff fb16 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001584:	4816      	ldr	r0, [pc, #88]	; (80015e0 <MX_TIM4_Init+0xd8>)
 8001586:	f006 fff3 	bl	8008570 <HAL_TIM_IC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001590:	f7ff fb0e 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <MX_TIM4_Init+0xd8>)
 80015a4:	f008 fb58 	bl	8009c58 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80015ae:	f7ff faff 	bl	8000bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b6:	2301      	movs	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015c2:	463b      	mov	r3, r7
 80015c4:	2204      	movs	r2, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_TIM4_Init+0xd8>)
 80015ca:	f007 fb91 	bl	8008cf0 <HAL_TIM_IC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80015d4:	f7ff faec 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20004634 	.word	0x20004634
 80015e4:	40000800 	.word	0x40000800

080015e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	; 0x30
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a62      	ldr	r2, [pc, #392]	; (8001790 <HAL_TIM_Base_MspInit+0x1a8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	f040 80d2 	bne.w	80017b0 <HAL_TIM_Base_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_TIM_Base_MspInit+0x1ac>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <HAL_TIM_Base_MspInit+0x1ac>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_TIM_Base_MspInit+0x1ac>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 800162a:	4a5c      	ldr	r2, [pc, #368]	; (800179c <HAL_TIM_Base_MspInit+0x1b4>)
 800162c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800162e:	4b5a      	ldr	r3, [pc, #360]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001630:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001634:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b55      	ldr	r3, [pc, #340]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b51      	ldr	r3, [pc, #324]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001662:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001666:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800166e:	484a      	ldr	r0, [pc, #296]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001670:	f000 fd9c 	bl	80021ac <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 800167a:	f7ff fa99 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
 8001684:	4a44      	ldr	r2, [pc, #272]	; (8001798 <HAL_TIM_Base_MspInit+0x1b0>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_TIM_Base_MspInit+0x1bc>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 8001692:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 800169a:	2240      	movs	r2, #64	; 0x40
 800169c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b3e      	ldr	r3, [pc, #248]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016c8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80016d0:	4833      	ldr	r0, [pc, #204]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016d2:	f000 fd6b 	bl	80021ac <HAL_DMA_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 80016dc:	f7ff fa68 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
 80016e6:	4a2e      	ldr	r2, [pc, #184]	; (80017a0 <HAL_TIM_Base_MspInit+0x1b8>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80016ee:	4a2f      	ldr	r2, [pc, #188]	; (80017ac <HAL_TIM_Base_MspInit+0x1c4>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80016f4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001714:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001720:	2200      	movs	r2, #0
 8001722:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800172a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8001732:	481d      	ldr	r0, [pc, #116]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001734:	f000 fd3a 	bl	80021ac <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 800173e:	f7ff fa37 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2018      	movs	r0, #24
 8001754:	f000 fcfb 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001758:	2018      	movs	r0, #24
 800175a:	f000 fd14 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2105      	movs	r1, #5
 8001762:	2019      	movs	r0, #25
 8001764:	f000 fcf3 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001768:	2019      	movs	r0, #25
 800176a:	f000 fd0c 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	210f      	movs	r1, #15
 8001772:	201a      	movs	r0, #26
 8001774:	f000 fceb 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001778:	201a      	movs	r0, #26
 800177a:	f000 fd04 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2105      	movs	r1, #5
 8001782:	201b      	movs	r0, #27
 8001784:	f000 fce3 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001788:	201b      	movs	r0, #27
 800178a:	f000 fcfc 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800178e:	e1cb      	b.n	8001b28 <HAL_TIM_Base_MspInit+0x540>
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800
 8001798:	2000467c 	.word	0x2000467c
 800179c:	40026428 	.word	0x40026428
 80017a0:	200046dc 	.word	0x200046dc
 80017a4:	40026440 	.word	0x40026440
 80017a8:	2000473c 	.word	0x2000473c
 80017ac:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	f040 8090 	bne.w	80018dc <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_TIM_Base_MspInit+0x2e0>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <HAL_TIM_Base_MspInit+0x2e0>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_TIM_Base_MspInit+0x2e0>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017da:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <HAL_TIM_Base_MspInit+0x2e8>)
 80017dc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 80017fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001800:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001802:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001808:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001816:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 800181e:	482b      	ldr	r0, [pc, #172]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001820:	f000 fcc4 	bl	80021ac <HAL_DMA_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 800182a:	f7ff f9c1 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a23      	ldr	r2, [pc, #140]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 800183e:	621a      	str	r2, [r3, #32]
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <HAL_TIM_Base_MspInit+0x2e4>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_TIM_Base_MspInit+0x2f0>)
 800184a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 800184e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001852:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001856:	2240      	movs	r2, #64	; 0x40
 8001858:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 800186a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001876:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001884:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 8001888:	2200      	movs	r2, #0
 800188a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800188c:	4811      	ldr	r0, [pc, #68]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 800188e:	f000 fc8d 	bl	80021ac <HAL_DMA_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_TIM_Base_MspInit+0x2b4>
      Error_Handler();
 8001898:	f7ff f98a 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_TIM_Base_MspInit+0x2ec>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2105      	movs	r1, #5
 80018b8:	201c      	movs	r0, #28
 80018ba:	f000 fc48 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018be:	201c      	movs	r0, #28
 80018c0:	f000 fc61 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 80018c4:	e130      	b.n	8001b28 <HAL_TIM_Base_MspInit+0x540>
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	2000479c 	.word	0x2000479c
 80018d0:	40026028 	.word	0x40026028
 80018d4:	200047fc 	.word	0x200047fc
 80018d8:	400260a0 	.word	0x400260a0
  else if(tim_baseHandle->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a93      	ldr	r2, [pc, #588]	; (8001b30 <HAL_TIM_Base_MspInit+0x548>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	f040 80b6 	bne.w	8001a54 <HAL_TIM_Base_MspInit+0x46c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
 80018f8:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001906:	4a8d      	ldr	r2, [pc, #564]	; (8001b3c <HAL_TIM_Base_MspInit+0x554>)
 8001908:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800190c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001910:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001918:	4b87      	ldr	r3, [pc, #540]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001920:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001924:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001926:	4b84      	ldr	r3, [pc, #528]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001934:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001936:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800193e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001942:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001944:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800194a:	487b      	ldr	r0, [pc, #492]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800194c:	f000 fc2e 	bl	80021ac <HAL_DMA_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_TIM_Base_MspInit+0x372>
      Error_Handler();
 8001956:	f7ff f92b 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a76      	ldr	r2, [pc, #472]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
 8001960:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800196a:	639a      	str	r2, [r3, #56]	; 0x38
 800196c:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_TIM_Base_MspInit+0x550>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8001972:	4b73      	ldr	r3, [pc, #460]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 8001974:	4a73      	ldr	r2, [pc, #460]	; (8001b44 <HAL_TIM_Base_MspInit+0x55c>)
 8001976:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8001978:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 800197a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800197e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 8001982:	2240      	movs	r2, #64	; 0x40
 8001984:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001986:	4b6e      	ldr	r3, [pc, #440]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800198c:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 800198e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001992:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 8001996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800199a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 800199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80019a4:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80019b8:	4861      	ldr	r0, [pc, #388]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019ba:	f000 fbf7 	bl	80021ac <HAL_DMA_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_TIM_Base_MspInit+0x3e0>
      Error_Handler();
 80019c4:	f7ff f8f4 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a5d      	ldr	r2, [pc, #372]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ce:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_TIM_Base_MspInit+0x558>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80019d4:	4b5c      	ldr	r3, [pc, #368]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019d6:	4a5d      	ldr	r2, [pc, #372]	; (8001b4c <HAL_TIM_Base_MspInit+0x564>)
 80019d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019dc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019e0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019e2:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019e4:	2240      	movs	r2, #64	; 0x40
 80019e6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e8:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019f6:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 80019f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019fc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019fe:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a04:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a0c:	4b4e      	ldr	r3, [pc, #312]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a12:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a1c:	f000 fbc6 	bl	80021ac <HAL_DMA_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_TIM_Base_MspInit+0x442>
      Error_Handler();
 8001a26:	f7ff f8c3 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a30:	4a45      	ldr	r2, [pc, #276]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <HAL_TIM_Base_MspInit+0x560>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2105      	movs	r1, #5
 8001a46:	201d      	movs	r0, #29
 8001a48:	f000 fb81 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a4c:	201d      	movs	r0, #29
 8001a4e:	f000 fb9a 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001a52:	e069      	b.n	8001b28 <HAL_TIM_Base_MspInit+0x540>
  else if(tim_baseHandle->Instance==TIM4)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <HAL_TIM_Base_MspInit+0x568>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d164      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0x540>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b31      	ldr	r3, [pc, #196]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_TIM_Base_MspInit+0x54c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IC_IN_TIM4_CH2_Pin;
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_IN_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4828      	ldr	r0, [pc, #160]	; (8001b54 <HAL_TIM_Base_MspInit+0x56c>)
 8001ab2:	f000 ff97 	bl	80029e4 <HAL_GPIO_Init>
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <HAL_TIM_Base_MspInit+0x574>)
 8001aba:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001abe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001af0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001af4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001afc:	4816      	ldr	r0, [pc, #88]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001afe:	f000 fb55 	bl	80021ac <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_TIM_Base_MspInit+0x524>
      Error_Handler();
 8001b08:	f7ff f852 	bl	8000bb0 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_Base_MspInit+0x570>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	201e      	movs	r0, #30
 8001b1e:	f000 fb16 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b22:	201e      	movs	r0, #30
 8001b24:	f000 fb2f 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001b28:	bf00      	nop
 8001b2a:	3730      	adds	r7, #48	; 0x30
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40023800 	.word	0x40023800
 8001b38:	2000485c 	.word	0x2000485c
 8001b3c:	40026070 	.word	0x40026070
 8001b40:	200048bc 	.word	0x200048bc
 8001b44:	400260b8 	.word	0x400260b8
 8001b48:	2000491c 	.word	0x2000491c
 8001b4c:	40026040 	.word	0x40026040
 8001b50:	40000800 	.word	0x40000800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	2000497c 	.word	0x2000497c
 8001b5c:	40026058 	.word	0x40026058

08001b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a46      	ldr	r2, [pc, #280]	; (8001c98 <HAL_TIM_MspPostInit+0x138>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13e      	bne.n	8001c00 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4832      	ldr	r0, [pc, #200]	; (8001ca0 <HAL_TIM_MspPostInit+0x140>)
 8001bd8:	f000 ff04 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	482a      	ldr	r0, [pc, #168]	; (8001ca4 <HAL_TIM_MspPostInit+0x144>)
 8001bfa:	f000 fef3 	bl	80029e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bfe:	e047      	b.n	8001c90 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c08:	d11f      	bne.n	8001c4a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001c26:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4817      	ldr	r0, [pc, #92]	; (8001ca0 <HAL_TIM_MspPostInit+0x140>)
 8001c44:	f000 fece 	bl	80029e4 <HAL_GPIO_Init>
}
 8001c48:	e022      	b.n	8001c90 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM3)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <HAL_TIM_MspPostInit+0x148>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11d      	bne.n	8001c90 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_TIM_MspPostInit+0x13c>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001c70:	2313      	movs	r3, #19
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c80:	2302      	movs	r3, #2
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_TIM_MspPostInit+0x140>)
 8001c8c:	f000 feaa 	bl	80029e4 <HAL_GPIO_Init>
}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40000400 	.word	0x40000400

08001cac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART1_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f008 f88c 	bl	8009e00 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7fe ff5f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200049dc 	.word	0x200049dc
 8001cfc:	40011000 	.word	0x40011000

08001d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_UART_MspInit+0x174>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f040 80a4 	bne.w	8001e6c <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6453      	str	r3, [r2, #68]	; 0x44
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a4b      	ldr	r2, [pc, #300]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_UART_MspInit+0x178>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4840      	ldr	r0, [pc, #256]	; (8001e7c <HAL_UART_MspInit+0x17c>)
 8001d7a:	f000 fe33 	bl	80029e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d90:	2307      	movs	r3, #7
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4838      	ldr	r0, [pc, #224]	; (8001e7c <HAL_UART_MspInit+0x17c>)
 8001d9c:	f000 fe22 	bl	80029e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001da0:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001da2:	4a38      	ldr	r2, [pc, #224]	; (8001e84 <HAL_UART_MspInit+0x184>)
 8001da4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001de2:	4827      	ldr	r0, [pc, #156]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001de4:	f000 f9e2 	bl	80021ac <HAL_DMA_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001dee:	f7fe fedf 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
 8001df8:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_UART_MspInit+0x180>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e00:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_UART_MspInit+0x18c>)
 8001e02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e38:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e40:	4811      	ldr	r0, [pc, #68]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e42:	f000 f9b3 	bl	80021ac <HAL_DMA_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8001e4c:	f7fe feb0 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_UART_MspInit+0x188>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2105      	movs	r1, #5
 8001e60:	2025      	movs	r0, #37	; 0x25
 8001e62:	f000 f974 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e66:	2025      	movs	r0, #37	; 0x25
 8001e68:	f000 f98d 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40011000 	.word	0x40011000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	20004a20 	.word	0x20004a20
 8001e84:	40026488 	.word	0x40026488
 8001e88:	20004a80 	.word	0x20004a80
 8001e8c:	400264b8 	.word	0x400264b8

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e96:	490e      	ldr	r1, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eac:	4c0b      	ldr	r4, [pc, #44]	; (8001edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eba:	f7ff f94d 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f011 fa61 	bl	8013384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7fe fd9d 	bl	8000a00 <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001ed4:	08013a30 	.word	0x08013a30
  ldr r2, =_sbss
 8001ed8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001edc:	2000b5e4 	.word	0x2000b5e4

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_Init+0x40>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_Init+0x40>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x40>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f913 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f7fe ffae 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7fe ff80 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20004ae0 	.word	0x20004ae0

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20004ae0 	.word	0x20004ae0

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008

08001fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe2:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	60d3      	str	r3, [r2, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <__NVIC_GetPriorityGrouping+0x18>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0307 	and.w	r3, r3, #7
}
 8002006:	4618      	mov	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0b      	blt.n	800203e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	f003 021f 	and.w	r2, r3, #31
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <__NVIC_EnableIRQ+0x38>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	2001      	movs	r0, #1
 8002036:	fa00 f202 	lsl.w	r2, r0, r2
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000e100 	.word	0xe000e100

08002050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	2b00      	cmp	r3, #0
 8002062:	db0a      	blt.n	800207a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	490c      	ldr	r1, [pc, #48]	; (800209c <__NVIC_SetPriority+0x4c>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	440b      	add	r3, r1
 8002074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002078:	e00a      	b.n	8002090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4908      	ldr	r1, [pc, #32]	; (80020a0 <__NVIC_SetPriority+0x50>)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3b04      	subs	r3, #4
 8002088:	0112      	lsls	r2, r2, #4
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	440b      	add	r3, r1
 800208e:	761a      	strb	r2, [r3, #24]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	bf28      	it	cs
 80020c2:	2304      	movcs	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3304      	adds	r3, #4
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d902      	bls.n	80020d4 <NVIC_EncodePriority+0x30>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3b03      	subs	r3, #3
 80020d2:	e000      	b.n	80020d6 <NVIC_EncodePriority+0x32>
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	401a      	ands	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ec:	f04f 31ff 	mov.w	r1, #4294967295
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43d9      	mvns	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	4313      	orrs	r3, r2
         );
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3724      	adds	r7, #36	; 0x24
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002110:	f3bf 8f4f 	dsb	sy
}
 8002114:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <__NVIC_SystemReset+0x24>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800211e:	4904      	ldr	r1, [pc, #16]	; (8002130 <__NVIC_SystemReset+0x24>)
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_SystemReset+0x28>)
 8002122:	4313      	orrs	r3, r2
 8002124:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002126:	f3bf 8f4f 	dsb	sy
}
 800212a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <__NVIC_SystemReset+0x20>
 8002130:	e000ed00 	.word	0xe000ed00
 8002134:	05fa0004 	.word	0x05fa0004

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff35 	bl	8001fb0 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff4a 	bl	8001ff8 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff9a 	bl	80020a4 <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff69 	bl	8002050 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff3d 	bl	8002014 <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80021a6:	f7ff ffb1 	bl	800210c <__NVIC_SystemReset>
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feca 	bl	8001f50 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e099      	b.n	80022fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e8:	e00f      	b.n	800220a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ea:	f7ff feb1 	bl	8001f50 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d908      	bls.n	800220a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e078      	b.n	80022fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e8      	bne.n	80021ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_DMA_Init+0x158>)
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b04      	cmp	r3, #4
 8002262:	d107      	bne.n	8002274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0307 	bic.w	r3, r3, #7
 800228a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b04      	cmp	r3, #4
 800229c:	d117      	bne.n	80022ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fb1b 	bl	80028ec <DMA_CheckFifoParam>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ca:	2301      	movs	r3, #1
 80022cc:	e016      	b.n	80022fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fad2 	bl	8002880 <DMA_CalcBaseAndBitshift>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f010803f 	.word	0xf010803f

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_DMA_Start_IT+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e040      	b.n	80023b0 <HAL_DMA_Start_IT+0xa8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d12f      	bne.n	80023a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fa64 	bl	8002824 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0216 	orr.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e005      	b.n	80023ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c6:	f7ff fdc3 	bl	8001f50 <HAL_GetTick>
 80023ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e052      	b.n	8002490 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0216 	bic.w	r2, r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002408:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_DMA_Abort+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	e013      	b.n	8002464 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243c:	f7ff fd88 	bl	8001f50 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b05      	cmp	r3, #5
 8002448:	d90c      	bls.n	8002464 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e015      	b.n	8002490 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e4      	bne.n	800243c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	223f      	movs	r2, #63	; 0x3f
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d004      	beq.n	80024b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00c      	b.n	80024d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2205      	movs	r2, #5
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024e8:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <HAL_DMA_IRQHandler+0x248>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a8e      	ldr	r2, [pc, #568]	; (8002728 <HAL_DMA_IRQHandler+0x24c>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2208      	movs	r2, #8
 8002508:	409a      	lsls	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01a      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	2208      	movs	r2, #8
 8002536:	409a      	lsls	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2201      	movs	r2, #1
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d012      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	2201      	movs	r2, #1
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2204      	movs	r2, #4
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d012      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	2204      	movs	r2, #4
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2210      	movs	r2, #16
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d043      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03c      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2210      	movs	r2, #16
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d024      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e01f      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e016      	b.n	800264c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0208 	bic.w	r2, r2, #8
 800263a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2220      	movs	r2, #32
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 808f 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8087 	beq.w	800277c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2220      	movs	r2, #32
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b05      	cmp	r3, #5
 8002684:	d136      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0216 	bic.w	r2, r2, #22
 8002694:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_DMA_IRQHandler+0x1da>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	223f      	movs	r2, #63	; 0x3f
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07e      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
        }
        return;
 80026f2:	e079      	b.n	80027e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01d      	beq.n	800273e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10d      	bne.n	800272c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	2b00      	cmp	r3, #0
 8002716:	d031      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e02c      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
 8002722:	bf00      	nop
 8002724:	20000000 	.word	0x20000000
 8002728:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
 800273c:	e01e      	b.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10f      	bne.n	800276c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0210 	bic.w	r2, r2, #16
 800275a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	2b00      	cmp	r3, #0
 8002782:	d032      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2205      	movs	r2, #5
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d307      	bcc.n	80027c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x2cc>
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
 80027e6:	e000      	b.n	80027ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80027e8:	bf00      	nop
    }
  }
}
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fe:	b2db      	uxtb	r3, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002840:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d108      	bne.n	8002864 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002862:	e007      	b.n	8002874 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	60da      	str	r2, [r3, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3b10      	subs	r3, #16
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <DMA_CalcBaseAndBitshift+0x68>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d909      	bls.n	80028c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58
 80028c0:	e007      	b.n	80028d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	aaaaaaab 	.word	0xaaaaaaab
 80028e8:	080134c4 	.word	0x080134c4

080028ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d11f      	bne.n	8002946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d856      	bhi.n	80029ba <DMA_CheckFifoParam+0xce>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <DMA_CheckFifoParam+0x28>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002925 	.word	0x08002925
 8002918:	08002937 	.word	0x08002937
 800291c:	08002925 	.word	0x08002925
 8002920:	080029bb 	.word	0x080029bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d046      	beq.n	80029be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002934:	e043      	b.n	80029be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800293e:	d140      	bne.n	80029c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e03d      	b.n	80029c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294e:	d121      	bne.n	8002994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d837      	bhi.n	80029c6 <DMA_CheckFifoParam+0xda>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <DMA_CheckFifoParam+0x70>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	08002973 	.word	0x08002973
 8002964:	0800296d 	.word	0x0800296d
 8002968:	08002985 	.word	0x08002985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      break;
 8002970:	e030      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d025      	beq.n	80029ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002982:	e022      	b.n	80029ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800298c:	d11f      	bne.n	80029ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002992:	e01c      	b.n	80029ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d903      	bls.n	80029a2 <DMA_CheckFifoParam+0xb6>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d003      	beq.n	80029a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029a0:	e018      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      break;
 80029a6:	e015      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e00b      	b.n	80029d2 <DMA_CheckFifoParam+0xe6>
      break;
 80029ba:	bf00      	nop
 80029bc:	e00a      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;
 80029be:	bf00      	nop
 80029c0:	e008      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;
 80029c2:	bf00      	nop
 80029c4:	e006      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;
 80029c6:	bf00      	nop
 80029c8:	e004      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
    }
  } 
  
  return status; 
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e159      	b.n	8002cb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8148 	bne.w	8002cae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a2 	beq.w	8002cae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a56      	ldr	r2, [pc, #344]	; (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b54      	ldr	r3, [pc, #336]	; (8002ccc <HAL_GPIO_Init+0x2e8>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a52      	ldr	r2, [pc, #328]	; (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_GPIO_Init+0x2f0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x202>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <HAL_GPIO_Init+0x2f4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x1fe>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a47      	ldr	r2, [pc, #284]	; (8002cdc <HAL_GPIO_Init+0x2f8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x1fa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a46      	ldr	r2, [pc, #280]	; (8002ce0 <HAL_GPIO_Init+0x2fc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x1f6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <HAL_GPIO_Init+0x300>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x1f2>
 8002bd2:	2304      	movs	r3, #4
 8002bd4:	e008      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e004      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_Init+0x204>
 8002be6:	2300      	movs	r3, #0
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f002 0203 	and.w	r2, r2, #3
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	4093      	lsls	r3, r2
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf8:	4935      	ldr	r1, [pc, #212]	; (8002cd0 <HAL_GPIO_Init+0x2ec>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c5a:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_GPIO_Init+0x304>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	f67f aea2 	bls.w	8002a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40013c00 	.word	0x40013c00

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e12b      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd fdb4 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d84:	f003 ff30 	bl	8006be8 <HAL_RCC_GetPCLK1Freq>
 8002d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a81      	ldr	r2, [pc, #516]	; (8002f94 <HAL_I2C_Init+0x274>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d807      	bhi.n	8002da4 <HAL_I2C_Init+0x84>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a80      	ldr	r2, [pc, #512]	; (8002f98 <HAL_I2C_Init+0x278>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e006      	b.n	8002db2 <HAL_I2C_Init+0x92>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a7d      	ldr	r2, [pc, #500]	; (8002f9c <HAL_I2C_Init+0x27c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0e7      	b.n	8002f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	; (8002fa0 <HAL_I2C_Init+0x280>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9b      	lsrs	r3, r3, #18
 8002dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <HAL_I2C_Init+0x274>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <HAL_I2C_Init+0xd4>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3301      	adds	r3, #1
 8002df2:	e009      	b.n	8002e08 <HAL_I2C_Init+0xe8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <HAL_I2C_Init+0x284>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	495c      	ldr	r1, [pc, #368]	; (8002f94 <HAL_I2C_Init+0x274>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d819      	bhi.n	8002e5c <HAL_I2C_Init+0x13c>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_I2C_Init+0x138>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1e59      	subs	r1, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	e051      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e58:	2304      	movs	r3, #4
 8002e5a:	e04f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_I2C_Init+0x168>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e012      	b.n	8002eae <HAL_I2C_Init+0x18e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1e58      	subs	r0, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	0099      	lsls	r1, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x196>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10e      	bne.n	8002edc <HAL_I2C_Init+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1e58      	subs	r0, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	440b      	add	r3, r1
 8002ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eda:	e00f      	b.n	8002efc <HAL_I2C_Init+0x1dc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6809      	ldr	r1, [r1, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6911      	ldr	r1, [r2, #16]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68d2      	ldr	r2, [r2, #12]
 8002f36:	4311      	orrs	r1, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	000186a0 	.word	0x000186a0
 8002f98:	001e847f 	.word	0x001e847f
 8002f9c:	003d08ff 	.word	0x003d08ff
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	10624dd3 	.word	0x10624dd3

08002fa8 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fc4:	2b28      	cmp	r3, #40	; 0x28
 8002fc6:	f040 811e 	bne.w	8003206 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e116      	b.n	8003208 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e10f      	b.n	8003208 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ffe:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b2a      	cmp	r3, #42	; 0x2a
 800300a:	d127      	bne.n	800305c <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800301a:	d14c      	bne.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d048      	beq.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003032:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800303a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fa29 	bl	8002498 <HAL_DMA_Abort_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003056:	4610      	mov	r0, r2
 8003058:	4798      	blx	r3
 800305a:	e02c      	b.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b29      	cmp	r3, #41	; 0x29
 8003066:	d126      	bne.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	d11e      	bne.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	4a5e      	ldr	r2, [pc, #376]	; (8003210 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8003096:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f9fb 	bl	8002498 <HAL_DMA_Abort_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b2:	4610      	mov	r0, r2
 80030b4:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	222a      	movs	r2, #42	; 0x2a
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	2b00      	cmp	r3, #0
 800311c:	d022      	beq.n	8003164 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8003124:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 800312c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	2200      	movs	r2, #0
 800313c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3310      	adds	r3, #16
 8003148:	4619      	mov	r1, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	f7ff f8d8 	bl	8002308 <HAL_DMA_Start_IT>
 8003158:	4603      	mov	r3, r0
 800315a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d13d      	bne.n	80031de <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 8003162:	e013      	b.n	800318c <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2228      	movs	r2, #40	; 0x28
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e03d      	b.n	8003208 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800319a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c8:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031d8:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e014      	b.n	8003208 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	08004c21 	.word	0x08004c21
 8003214:	080049fd 	.word	0x080049fd
 8003218:	08004ba7 	.word	0x08004ba7

0800321c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b20      	cmp	r3, #32
 800322e:	d124      	bne.n	800327a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2228      	movs	r2, #40	; 0x28
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003274:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d003      	beq.n	80032c0 <HAL_I2C_EV_IRQHandler+0x38>
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	f040 80c1 	bne.w	8003442 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032e0:	d003      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x62>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_EV_IRQHandler+0x66>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_I2C_EV_IRQHandler+0x68>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f000 8132 	beq.w	800355a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x92>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f001 fd61 	bl	8004dd4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fd57 	bl	8003dc6 <I2C_Master_SB>
 8003318:	e092      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0xb2>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	0a5b      	lsrs	r3, r3, #9
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fdcd 	bl	8003ed2 <I2C_Master_ADD10>
 8003338:	e082      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_I2C_EV_IRQHandler+0xd2>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0a5b      	lsrs	r3, r3, #9
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fde7 	bl	8003f26 <I2C_Master_ADDR>
 8003358:	e072      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03b      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	f000 80f3 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	09db      	lsrs	r3, r3, #7
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9c7 	bl	8003730 <I2C_MasterTransmit_TXE>
 80033a2:	e04d      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80d6 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80cf 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	2b21      	cmp	r3, #33	; 0x21
 80033c4:	d103      	bne.n	80033ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa4e 	bl	8003868 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033cc:	e0c7      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	f040 80c4 	bne.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fabc 	bl	8003954 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033dc:	e0bf      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	f000 80b7 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00f      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb31 	bl	8003a7c <I2C_MasterReceive_RXNE>
 800341a:	e011      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 809a 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8093 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fbda 	bl	8003bf2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	e08e      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003440:	e08d      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	e007      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x20e>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 ff98 	bl	80043c4 <I2C_Slave_ADDR>
 8003494:	e066      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 ffd2 	bl	8004458 <I2C_Slave_STOPF>
 80034b4:	e056      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	2b21      	cmp	r3, #33	; 0x21
 80034ba:	d002      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b29      	cmp	r3, #41	; 0x29
 80034c0:	d125      	bne.n	800350e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	09db      	lsrs	r3, r3, #7
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00f      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	0a9b      	lsrs	r3, r3, #10
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 feae 	bl	8004248 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ec:	e039      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d033      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02d      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fedb 	bl	80042c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350c:	e029      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00f      	beq.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	0a9b      	lsrs	r3, r3, #10
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fee6 	bl	8004304 <I2C_SlaveReceive_RXNE>
 8003538:	e014      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 ff14 	bl	8004380 <I2C_SlaveReceive_BTF>
 8003558:	e004      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003562:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	0a5b      	lsrs	r3, r3, #9
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00e      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x78>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	f043 0302 	orr.w	r3, r3, #2
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80035e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	0a9b      	lsrs	r3, r3, #10
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03f      	beq.n	800366e <HAL_I2C_ER_IRQHandler+0x104>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d039      	beq.n	800366e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80035fa:	7efb      	ldrb	r3, [r7, #27]
 80035fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003614:	7ebb      	ldrb	r3, [r7, #26]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d112      	bne.n	8003640 <HAL_I2C_ER_IRQHandler+0xd6>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <HAL_I2C_ER_IRQHandler+0xd6>
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	2b21      	cmp	r3, #33	; 0x21
 8003624:	d008      	beq.n	8003638 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	2b29      	cmp	r3, #41	; 0x29
 800362a:	d005      	beq.n	8003638 <HAL_I2C_ER_IRQHandler+0xce>
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b28      	cmp	r3, #40	; 0x28
 8003630:	d106      	bne.n	8003640 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b21      	cmp	r3, #33	; 0x21
 8003636:	d103      	bne.n	8003640 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f001 f83d 	bl	80046b8 <I2C_Slave_AF>
 800363e:	e016      	b.n	800366e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003648:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003652:	7efb      	ldrb	r3, [r7, #27]
 8003654:	2b10      	cmp	r3, #16
 8003656:	d002      	beq.n	800365e <HAL_I2C_ER_IRQHandler+0xf4>
 8003658:	7efb      	ldrb	r3, [r7, #27]
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d107      	bne.n	800366e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	0adb      	lsrs	r3, r3, #11
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00e      	beq.n	8003698 <HAL_I2C_ER_IRQHandler+0x12e>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003696:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d008      	beq.n	80036b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f001 f874 	bl	8004798 <I2C_ITError>
  }
}
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003746:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d150      	bne.n	80037f8 <I2C_MasterTransmit_TXE+0xc8>
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b21      	cmp	r3, #33	; 0x21
 800375a:	d14d      	bne.n	80037f8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b08      	cmp	r3, #8
 8003760:	d01d      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b20      	cmp	r3, #32
 8003766:	d01a      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800376e:	d016      	beq.n	800379e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2211      	movs	r2, #17
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff8e 	bl	80036b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800379c:	e060      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d107      	bne.n	80037e8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff87 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e6:	e03b      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff61 	bl	80036b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f6:	e033      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b21      	cmp	r3, #33	; 0x21
 80037fc:	d005      	beq.n	800380a <I2C_MasterTransmit_TXE+0xda>
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d12d      	bne.n	8003860 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b22      	cmp	r3, #34	; 0x22
 8003808:	d12a      	bne.n	8003860 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003822:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003824:	e01c      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d103      	bne.n	800383a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f88e 	bl	8003954 <I2C_MemoryTransmit_TXE_BTF>
}
 8003838:	e012      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800385e:	e7ff      	b.n	8003860 <I2C_MasterTransmit_TXE+0x130>
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b21      	cmp	r3, #33	; 0x21
 8003880:	d164      	bne.n	800394c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038b0:	e04c      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d01d      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d01a      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c4:	d016      	beq.n	80038f4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2211      	movs	r2, #17
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fee3 	bl	80036b8 <HAL_I2C_MasterTxCpltCallback>
}
 80038f2:	e02b      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003902:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003912:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d107      	bne.n	800393e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fedc 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
}
 800393c:	e006      	b.n	800394c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff feb6 	bl	80036b8 <HAL_I2C_MasterTxCpltCallback>
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11d      	bne.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10b      	bne.n	800398c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	b2da      	uxtb	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800398a:	e073      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	b29b      	uxth	r3, r3
 8003992:	121b      	asrs	r3, r3, #8
 8003994:	b2da      	uxtb	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039a6:	e065      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10b      	bne.n	80039c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c6:	e055      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d151      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b22      	cmp	r3, #34	; 0x22
 80039d4:	d10d      	bne.n	80039f2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039f0:	e040      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b21      	cmp	r3, #33	; 0x21
 8003a00:	d112      	bne.n	8003a28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a26:	e025      	b.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d120      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	2b21      	cmp	r3, #33	; 0x21
 8003a36:	d11d      	bne.n	8003a74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe40 	bl	80036f4 <HAL_I2C_MemTxCpltCallback>
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b22      	cmp	r3, #34	; 0x22
 8003a8e:	f040 80ac 	bne.w	8003bea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d921      	bls.n	8003ae4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	f040 808c 	bne.w	8003bea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ae2:	e082      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d075      	beq.n	8003bd8 <I2C_MasterReceive_RXNE+0x15c>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d002      	beq.n	8003af8 <I2C_MasterReceive_RXNE+0x7c>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d16f      	bne.n	8003bd8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 f939 	bl	8004d70 <I2C_WaitOnSTOPRequestThroughIT>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d142      	bne.n	8003b8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d10a      	bne.n	8003b74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fdcb 	bl	8003708 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b72:	e03a      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2212      	movs	r2, #18
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fda2 	bl	80036cc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b88:	e02f      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f00d fc37 	bl	8011444 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bd6:	e008      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be6:	605a      	str	r2, [r3, #4]
}
 8003be8:	e7ff      	b.n	8003bea <I2C_MasterReceive_RXNE+0x16e>
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d11b      	bne.n	8003c42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c40:	e0bd      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d129      	bne.n	8003ca0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d00a      	beq.n	8003c78 <I2C_MasterReceive_BTF+0x86>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d007      	beq.n	8003c78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c9e:	e08e      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d176      	bne.n	8003d98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <I2C_MasterReceive_BTF+0xc4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d108      	bne.n	8003cc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e019      	b.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d002      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0xe2>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d108      	bne.n	8003ce6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e00a      	b.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d007      	beq.n	8003cfc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d10a      	bne.n	8003d82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fcc4 	bl	8003708 <HAL_I2C_MemRxCpltCallback>
}
 8003d80:	e01d      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2212      	movs	r2, #18
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fc9b 	bl	80036cc <HAL_I2C_MasterRxCpltCallback>
}
 8003d96:	e012      	b.n	8003dbe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d117      	bne.n	8003e0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003df4:	e067      	b.n	8003ec6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]
}
 8003e08:	e05d      	b.n	8003ec6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e12:	d133      	bne.n	8003e7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d109      	bne.n	8003e34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e30:	611a      	str	r2, [r3, #16]
 8003e32:	e008      	b.n	8003e46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <I2C_Master_SB+0x92>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d108      	bne.n	8003e6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d032      	beq.n	8003ec6 <I2C_Master_SB+0x100>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02d      	beq.n	8003ec6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e78:	605a      	str	r2, [r3, #4]
}
 8003e7a:	e024      	b.n	8003ec6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10e      	bne.n	8003ea2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	11db      	asrs	r3, r3, #7
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 0306 	and.w	r3, r3, #6
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f063 030f 	orn	r3, r3, #15
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	611a      	str	r2, [r3, #16]
}
 8003ea0:	e011      	b.n	8003ec6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10d      	bne.n	8003ec6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	11db      	asrs	r3, r3, #7
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 0306 	and.w	r3, r3, #6
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f063 030e 	orn	r3, r3, #14
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <I2C_Master_ADD10+0x26>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d108      	bne.n	8003f0a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <I2C_Master_ADD10+0x48>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	605a      	str	r2, [r3, #4]
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b091      	sub	sp, #68	; 0x44
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b22      	cmp	r3, #34	; 0x22
 8003f4e:	f040 8169 	bne.w	8004224 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <I2C_Master_ADDR+0x54>
 8003f5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d10b      	bne.n	8003f7a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	633b      	str	r3, [r7, #48]	; 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	633b      	str	r3, [r7, #48]	; 0x30
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	e160      	b.n	800423c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11d      	bne.n	8003fbe <I2C_Master_ADDR+0x98>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f8a:	d118      	bne.n	8003fbe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	651a      	str	r2, [r3, #80]	; 0x50
 8003fbc:	e13e      	b.n	800423c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e115      	b.n	800421c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f040 808a 	bne.w	8004110 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004002:	d137      	bne.n	8004074 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d113      	bne.n	800404c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004032:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	e0e7      	b.n	800421c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e0d3      	b.n	800421c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	2b08      	cmp	r3, #8
 8004078:	d02e      	beq.n	80040d8 <I2C_Master_ADDR+0x1b2>
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b20      	cmp	r3, #32
 800407e:	d02b      	beq.n	80040d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004082:	2b12      	cmp	r3, #18
 8004084:	d102      	bne.n	800408c <I2C_Master_ADDR+0x166>
 8004086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004088:	2b01      	cmp	r3, #1
 800408a:	d125      	bne.n	80040d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00e      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b02      	cmp	r3, #2
 8004096:	d00b      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	2b10      	cmp	r3, #16
 800409c:	d008      	beq.n	80040b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e007      	b.n	80040c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	e0a1      	b.n	800421c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e085      	b.n	800421c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d14d      	bne.n	80041b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b04      	cmp	r3, #4
 800411e:	d016      	beq.n	800414e <I2C_Master_ADDR+0x228>
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	2b02      	cmp	r3, #2
 8004124:	d013      	beq.n	800414e <I2C_Master_ADDR+0x228>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	2b10      	cmp	r3, #16
 800412a:	d010      	beq.n	800414e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e007      	b.n	800415e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d117      	bne.n	800419e <I2C_Master_ADDR+0x278>
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004174:	d00b      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d008      	beq.n	800418e <I2C_Master_ADDR+0x268>
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b08      	cmp	r3, #8
 8004180:	d005      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b10      	cmp	r3, #16
 8004186:	d002      	beq.n	800418e <I2C_Master_ADDR+0x268>
 8004188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418a:	2b20      	cmp	r3, #32
 800418c:	d107      	bne.n	800419e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800419c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	e032      	b.n	800421c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d4:	d117      	bne.n	8004206 <I2C_Master_ADDR+0x2e0>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041dc:	d00b      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d008      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d005      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d002      	beq.n	80041f6 <I2C_Master_ADDR+0x2d0>
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d107      	bne.n	8004206 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004204:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004222:	e00b      	b.n	800423c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
}
 800423a:	e7ff      	b.n	800423c <I2C_Master_ADDR+0x316>
 800423c:	bf00      	nop
 800423e:	3744      	adds	r7, #68	; 0x44
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02b      	beq.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d114      	bne.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b29      	cmp	r3, #41	; 0x29
 8004294:	d111      	bne.n	80042ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2228      	movs	r2, #40	; 0x28
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fa13 	bl	80036e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d011      	beq.n	80042f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	781a      	ldrb	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d02c      	beq.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d114      	bne.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d111      	bne.n	8004378 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2222      	movs	r2, #34	; 0x22
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2228      	movs	r2, #40	; 0x28
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f00d f83a 	bl	80113ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043de:	2b28      	cmp	r3, #40	; 0x28
 80043e0:	d127      	bne.n	8004432 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	81bb      	strh	r3, [r7, #12]
 8004414:	e002      	b.n	800441c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004424:	89ba      	ldrh	r2, [r7, #12]
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f00c ffb0 	bl	8011390 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004430:	e00e      	b.n	8004450 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b4:	d172      	bne.n	800459c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b22      	cmp	r3, #34	; 0x22
 80044ba:	d002      	beq.n	80044c2 <I2C_Slave_STOPF+0x6a>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b2a      	cmp	r3, #42	; 0x2a
 80044c0:	d135      	bne.n	800452e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe f978 	bl	80027f0 <HAL_DMA_GetState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d049      	beq.n	800459a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 800450c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd ffc0 	bl	8002498 <HAL_DMA_Abort_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03d      	beq.n	800459a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004528:	4610      	mov	r0, r2
 800452a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800452c:	e035      	b.n	800459a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe f942 	bl	80027f0 <HAL_DMA_GetState>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d014      	beq.n	800459c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	4a4e      	ldr	r2, [pc, #312]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd ff8a 	bl	8002498 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
 8004598:	e000      	b.n	800459c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800459a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03e      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d112      	bne.n	80045da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d112      	bne.n	800460e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8b3 	bl	8004798 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004632:	e039      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	d109      	bne.n	800464e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f00c fecf 	bl	80113ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b28      	cmp	r3, #40	; 0x28
 8004658:	d111      	bne.n	800467e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <I2C_Slave_STOPF+0x25c>)
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f00c feaa 	bl	80113d0 <HAL_I2C_ListenCpltCallback>
}
 800467c:	e014      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d002      	beq.n	800468c <I2C_Slave_STOPF+0x234>
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b22      	cmp	r3, #34	; 0x22
 800468a:	d10d      	bne.n	80046a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f00c fea2 	bl	80113ec <HAL_I2C_SlaveRxCpltCallback>
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08004c21 	.word	0x08004c21
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d002      	beq.n	80046da <I2C_Slave_AF+0x22>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d129      	bne.n	800472e <I2C_Slave_AF+0x76>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d126      	bne.n	800472e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <I2C_Slave_AF+0xdc>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f00c fe52 	bl	80113d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800472c:	e02e      	b.n	800478c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b21      	cmp	r3, #33	; 0x21
 8004732:	d126      	bne.n	8004782 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <I2C_Slave_AF+0xdc>)
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004768:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe ffb0 	bl	80036e0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004780:	e004      	b.n	800478c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047b0:	7bbb      	ldrb	r3, [r7, #14]
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d002      	beq.n	80047bc <I2C_ITError+0x24>
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d10a      	bne.n	80047d2 <I2C_ITError+0x3a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b22      	cmp	r3, #34	; 0x22
 80047c0:	d107      	bne.n	80047d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047d8:	2b28      	cmp	r3, #40	; 0x28
 80047da:	d107      	bne.n	80047ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2228      	movs	r2, #40	; 0x28
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ea:	e015      	b.n	8004818 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d00a      	beq.n	8004812 <I2C_ITError+0x7a>
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b60      	cmp	r3, #96	; 0x60
 8004800:	d007      	beq.n	8004812 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d162      	bne.n	80048ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d020      	beq.n	8004888 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	4a6a      	ldr	r2, [pc, #424]	; (80049f4 <I2C_ITError+0x25c>)
 800484c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fe20 	bl	8002498 <HAL_DMA_Abort_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8089 	beq.w	8004972 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004882:	4610      	mov	r0, r2
 8004884:	4798      	blx	r3
 8004886:	e074      	b.n	8004972 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <I2C_ITError+0x25c>)
 800488e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fdff 	bl	8002498 <HAL_DMA_Abort_IT>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d068      	beq.n	8004972 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d10b      	bne.n	80048c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	4610      	mov	r0, r2
 80048ea:	4798      	blx	r3
 80048ec:	e041      	b.n	8004972 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b60      	cmp	r3, #96	; 0x60
 80048f8:	d125      	bne.n	8004946 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10b      	bne.n	800492e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe feec 	bl	800371c <HAL_I2C_AbortCpltCallback>
 8004944:	e015      	b.n	8004972 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d10b      	bne.n	800496c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f00c fd69 	bl	8011444 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10e      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d113      	bne.n	80049ec <I2C_ITError+0x254>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b28      	cmp	r3, #40	; 0x28
 80049c8:	d110      	bne.n	80049ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <I2C_ITError+0x260>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f00c fcf2 	bl	80113d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	08004c21 	.word	0x08004c21
 80049f8:	ffff0000 	.word	0xffff0000

080049fc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a18:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d007      	beq.n	8004a6a <I2C_DMAXferCplt+0x6e>
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004a60:	2b22      	cmp	r3, #34	; 0x22
 8004a62:	d131      	bne.n	8004ac8 <I2C_DMAXferCplt+0xcc>
 8004a64:	7cbb      	ldrb	r3, [r7, #18]
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d12e      	bne.n	8004ac8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a78:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b29      	cmp	r3, #41	; 0x29
 8004a84:	d10a      	bne.n	8004a9c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2221      	movs	r2, #33	; 0x21
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2228      	movs	r2, #40	; 0x28
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a94:	6978      	ldr	r0, [r7, #20]
 8004a96:	f7fe fe23 	bl	80036e0 <HAL_I2C_SlaveTxCpltCallback>
 8004a9a:	e00c      	b.n	8004ab6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa0:	d109      	bne.n	8004ab6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2222      	movs	r2, #34	; 0x22
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2228      	movs	r2, #40	; 0x28
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f00c fc9b 	bl	80113ec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ac4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ac6:	e06a      	b.n	8004b9e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d064      	beq.n	8004b9e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aec:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004afc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b04:	d009      	beq.n	8004b1a <I2C_DMAXferCplt+0x11e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d006      	beq.n	8004b1a <I2C_DMAXferCplt+0x11e>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b12:	d002      	beq.n	8004b1a <I2C_DMAXferCplt+0x11e>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d107      	bne.n	8004b2a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b28:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b38:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b48:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004b58:	6978      	ldr	r0, [r7, #20]
 8004b5a:	f00c fc73 	bl	8011444 <HAL_I2C_ErrorCallback>
}
 8004b5e:	e01e      	b.n	8004b9e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d10a      	bne.n	8004b8a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7fe fdc0 	bl	8003708 <HAL_I2C_MemRxCpltCallback>
}
 8004b88:	e009      	b.n	8004b9e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2212      	movs	r2, #18
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	f7fe fd97 	bl	80036cc <HAL_I2C_MasterRxCpltCallback>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fd fe19 	bl	800280c <HAL_DMA_GetError>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d01b      	beq.n	8004c18 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f00c fc16 	bl	8011444 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c38:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c3a:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <I2C_DMAAbort+0x148>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	08db      	lsrs	r3, r3, #3
 8004c40:	4a4a      	ldr	r2, [pc, #296]	; (8004d6c <I2C_DMAAbort+0x14c>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0a1a      	lsrs	r2, r3, #8
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00da      	lsls	r2, r3, #3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c66:	e00a      	b.n	8004c7e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d0ea      	beq.n	8004c54 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b60      	cmp	r3, #96	; 0x60
 8004cee:	d10e      	bne.n	8004d0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d06:	6978      	ldr	r0, [r7, #20]
 8004d08:	f7fe fd08 	bl	800371c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d0c:	e027      	b.n	8004d5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d0e:	7cfb      	ldrb	r3, [r7, #19]
 8004d10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d14:	2b28      	cmp	r3, #40	; 0x28
 8004d16:	d117      	bne.n	8004d48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2228      	movs	r2, #40	; 0x28
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d46:	e007      	b.n	8004d58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f00c fb73 	bl	8011444 <HAL_I2C_ErrorCallback>
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	14f8b589 	.word	0x14f8b589

08004d70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d7c:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0a1a      	lsrs	r2, r3, #8
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d107      	bne.n	8004dae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e008      	b.n	8004dc0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbc:	d0e9      	beq.n	8004d92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000000 	.word	0x20000000
 8004dd0:	14f8b589 	.word	0x14f8b589

08004dd4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004de4:	d103      	bne.n	8004dee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dec:	e007      	b.n	8004dfe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004df6:	d102      	bne.n	8004dfe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2208      	movs	r2, #8
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e034      	b.n	8004e86 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004e24:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f245 5255 	movw	r2, #21845	; 0x5555
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6892      	ldr	r2, [r2, #8]
 8004e42:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004e44:	f7fd f884 	bl	8001f50 <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004e4a:	e00f      	b.n	8004e6c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004e4c:	f7fd f880 	bl	8001f50 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b31      	cmp	r3, #49	; 0x31
 8004e58:	d908      	bls.n	8004e6c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e00c      	b.n	8004e86 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e8      	bne.n	8004e4c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004e82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e90:	b08f      	sub	sp, #60	; 0x3c
 8004e92:	af0a      	add	r7, sp, #40	; 0x28
 8004e94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e10f      	b.n	80050c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f00b ff3a 	bl	8010d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f006 facd 	bl	800b47e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	687e      	ldr	r6, [r7, #4]
 8004eec:	466d      	mov	r5, sp
 8004eee:	f106 0410 	add.w	r4, r6, #16
 8004ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004efe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f02:	1d33      	adds	r3, r6, #4
 8004f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f006 f9a4 	bl	800b254 <USB_CoreInit>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e0d0      	b.n	80050c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f006 fabb 	bl	800b4a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e04a      	b.n	8004fc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	333d      	adds	r3, #61	; 0x3d
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	333c      	adds	r3, #60	; 0x3c
 8004f54:	7bfa      	ldrb	r2, [r7, #15]
 8004f56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	b298      	uxth	r0, r3
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3344      	adds	r3, #68	; 0x44
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3340      	adds	r3, #64	; 0x40
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3348      	adds	r3, #72	; 0x48
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	334c      	adds	r3, #76	; 0x4c
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3354      	adds	r3, #84	; 0x54
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3af      	bcc.n	8004f30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e044      	b.n	8005060 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005002:	7bfa      	ldrb	r2, [r7, #15]
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005018:	7bfa      	ldrb	r2, [r7, #15]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	3301      	adds	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3b5      	bcc.n	8004fd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	687e      	ldr	r6, [r7, #4]
 8005072:	466d      	mov	r5, sp
 8005074:	f106 0410 	add.w	r4, r6, #16
 8005078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800507a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800507c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800507e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005080:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005084:	e885 0003 	stmia.w	r5, {r0, r1}
 8005088:	1d33      	adds	r3, r6, #4
 800508a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800508c:	6838      	ldr	r0, [r7, #0]
 800508e:	f006 fa53 	bl	800b538 <USB_DevInit>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e00d      	b.n	80050c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f007 fba2 	bl	800c802 <USB_DevDisconnect>

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_PCD_Start+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e020      	b.n	8005126 <HAL_PCD_Start+0x5e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d109      	bne.n	8005108 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d005      	beq.n	8005108 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f006 f9a5 	bl	800b45c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f007 fb52 	bl	800c7c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800512e:	b590      	push	{r4, r7, lr}
 8005130:	b08d      	sub	sp, #52	; 0x34
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f007 fc10 	bl	800c96a <USB_GetMode>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 848a 	bne.w	8005a66 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f007 fb74 	bl	800c844 <USB_ReadInterrupts>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8480 	beq.w	8005a64 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f007 fb61 	bl	800c844 <USB_ReadInterrupts>
 8005182:	4603      	mov	r3, r0
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d107      	bne.n	800519c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f002 0202 	and.w	r2, r2, #2
 800519a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f007 fb4f 	bl	800c844 <USB_ReadInterrupts>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d161      	bne.n	8005274 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0210 	bic.w	r2, r2, #16
 80051be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 020f 	and.w	r2, r3, #15
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4413      	add	r3, r2
 80051dc:	3304      	adds	r3, #4
 80051de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	0c5b      	lsrs	r3, r3, #17
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d124      	bne.n	8005236 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d035      	beq.n	8005264 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	6a38      	ldr	r0, [r7, #32]
 800520c:	f007 f986 	bl	800c51c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800521c:	441a      	add	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800522e:	441a      	add	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
 8005234:	e016      	b.n	8005264 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	0c5b      	lsrs	r3, r3, #17
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	2b06      	cmp	r3, #6
 8005240:	d110      	bne.n	8005264 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005248:	2208      	movs	r2, #8
 800524a:	4619      	mov	r1, r3
 800524c:	6a38      	ldr	r0, [r7, #32]
 800524e:	f007 f965 	bl	800c51c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525e:	441a      	add	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0210 	orr.w	r2, r2, #16
 8005272:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f007 fae3 	bl	800c844 <USB_ReadInterrupts>
 800527e:	4603      	mov	r3, r0
 8005280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005284:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005288:	f040 80a7 	bne.w	80053da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f007 fae8 	bl	800c86a <USB_ReadDevAllOutEpInterrupt>
 800529a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800529c:	e099      	b.n	80053d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 808e 	beq.w	80053c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	4611      	mov	r1, r2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f007 fb0c 	bl	800c8d2 <USB_ReadDevOutEPInterrupt>
 80052ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00c      	beq.n	80052e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	2301      	movs	r3, #1
 80052d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80052d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fec2 	bl	8006064 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2308      	movs	r3, #8
 80052fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80052fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 ff98 	bl	8006234 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	2310      	movs	r3, #16
 800531e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d030      	beq.n	800538c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d109      	bne.n	800534a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005348:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	3304      	adds	r3, #4
 800535e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	78db      	ldrb	r3, [r3, #3]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2200      	movs	r2, #0
 800536c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	b2db      	uxtb	r3, r3
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f00b fdd9 	bl	8010f2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	461a      	mov	r2, r3
 8005388:	2302      	movs	r3, #2
 800538a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	461a      	mov	r2, r3
 80053a4:	2320      	movs	r3, #32
 80053a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	461a      	mov	r2, r3
 80053c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	3301      	adds	r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f47f af62 	bne.w	800529e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f007 fa30 	bl	800c844 <USB_ReadInterrupts>
 80053e4:	4603      	mov	r3, r0
 80053e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ee:	f040 80db 	bne.w	80055a8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f007 fa51 	bl	800c89e <USB_ReadDevAllInEpInterrupt>
 80053fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005402:	e0cd      	b.n	80055a0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80c2 	beq.w	8005594 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f007 fa77 	bl	800c90e <USB_ReadDevInEPInterrupt>
 8005420:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d057      	beq.n	80054dc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	2201      	movs	r2, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	43db      	mvns	r3, r3
 8005446:	69f9      	ldr	r1, [r7, #28]
 8005448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544c:	4013      	ands	r3, r2
 800544e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	2301      	movs	r3, #1
 8005460:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d132      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	334c      	adds	r3, #76	; 0x4c
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4403      	add	r3, r0
 800548a:	3348      	adds	r3, #72	; 0x48
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4419      	add	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	4613      	mov	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4403      	add	r3, r0
 800549e:	334c      	adds	r3, #76	; 0x4c
 80054a0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d113      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x3a2>
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	3354      	adds	r3, #84	; 0x54
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054c8:	461a      	mov	r2, r3
 80054ca:	2101      	movs	r1, #1
 80054cc:	f007 fa7e 	bl	800c9cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f00b fcad 	bl	8010e36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	461a      	mov	r2, r3
 80054f4:	2308      	movs	r3, #8
 80054f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	461a      	mov	r2, r3
 8005510:	2310      	movs	r3, #16
 8005512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	461a      	mov	r2, r3
 800552c:	2340      	movs	r3, #64	; 0x40
 800552e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d023      	beq.n	8005582 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800553a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800553c:	6a38      	ldr	r0, [r7, #32]
 800553e:	f006 f95f 	bl	800b800 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	3338      	adds	r3, #56	; 0x38
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	3304      	adds	r3, #4
 8005554:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	78db      	ldrb	r3, [r3, #3]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d108      	bne.n	8005570 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	b2db      	uxtb	r3, r3
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f00b fcf0 	bl	8010f50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	2302      	movs	r3, #2
 8005580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800558c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fcdb 	bl	8005f4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	3301      	adds	r3, #1
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f af2e 	bne.w	8005404 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f007 f949 	bl	800c844 <USB_ReadInterrupts>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055bc:	d122      	bne.n	8005604 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d108      	bne.n	80055ee <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80055e4:	2100      	movs	r1, #0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fec2 	bl	8006370 <HAL_PCDEx_LPM_Callback>
 80055ec:	e002      	b.n	80055f4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f00b fc8e 	bl	8010f10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f007 f91b 	bl	800c844 <USB_ReadInterrupts>
 800560e:	4603      	mov	r3, r0
 8005610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d112      	bne.n	8005640 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d102      	bne.n	8005630 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f00b fc4a 	bl	8010ec4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800563e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f007 f8fd 	bl	800c844 <USB_ReadInterrupts>
 800564a:	4603      	mov	r3, r0
 800564c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	f040 80b7 	bne.w	80057c6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2110      	movs	r1, #16
 8005672:	4618      	mov	r0, r3
 8005674:	f006 f8c4 	bl	800b800 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567c:	e046      	b.n	800570c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	461a      	mov	r2, r3
 800568c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005690:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056be:	461a      	mov	r2, r3
 80056c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005700:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005704:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	3301      	adds	r3, #1
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d3b3      	bcc.n	800567e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005724:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005728:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	2b00      	cmp	r3, #0
 8005730:	d016      	beq.n	8005760 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005742:	f043 030b 	orr.w	r3, r3, #11
 8005746:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005758:	f043 030b 	orr.w	r3, r3, #11
 800575c:	6453      	str	r3, [r2, #68]	; 0x44
 800575e:	e015      	b.n	800578c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800576e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005772:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005776:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f043 030b 	orr.w	r3, r3, #11
 800578a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800579a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800579e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057b0:	461a      	mov	r2, r3
 80057b2:	f007 f90b 	bl	800c9cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80057c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f007 f83a 	bl	800c844 <USB_ReadInterrupts>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d124      	bne.n	8005826 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f007 f8d0 	bl	800c986 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f006 f885 	bl	800b8fa <USB_GetDevSpeed>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681c      	ldr	r4, [r3, #0]
 80057fc:	f001 f9e8 	bl	8006bd0 <HAL_RCC_GetHCLKFreq>
 8005800:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	4620      	mov	r0, r4
 800580c:	f005 fd84 	bl	800b318 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f00b fb38 	bl	8010e86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005824:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f007 f80a 	bl	800c844 <USB_ReadInterrupts>
 8005830:	4603      	mov	r3, r0
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b08      	cmp	r3, #8
 8005838:	d10a      	bne.n	8005850 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f00b fb15 	bl	8010e6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f002 0208 	and.w	r2, r2, #8
 800584e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f006 fff5 	bl	800c844 <USB_ReadInterrupts>
 800585a:	4603      	mov	r3, r0
 800585c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	d122      	bne.n	80058aa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005870:	2301      	movs	r3, #1
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	e014      	b.n	80058a0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d105      	bne.n	800589a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb27 	bl	8005ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	3301      	adds	r3, #1
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3e5      	bcc.n	8005876 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f006 ffc8 	bl	800c844 <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058be:	d13b      	bne.n	8005938 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c0:	2301      	movs	r3, #1
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
 80058c4:	e02b      	b.n	800591e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3340      	adds	r3, #64	; 0x40
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d115      	bne.n	8005918 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80058ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da12      	bge.n	8005918 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	333f      	adds	r3, #63	; 0x3f
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800590e:	b2db      	uxtb	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fae8 	bl	8005ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	429a      	cmp	r2, r3
 8005926:	d3ce      	bcc.n	80058c6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f006 ff81 	bl	800c844 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800594c:	d155      	bne.n	80059fa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800594e:	2301      	movs	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
 8005952:	e045      	b.n	80059e0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	4613      	mov	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d12e      	bne.n	80059da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800597c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	da2b      	bge.n	80059da <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800598e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005992:	429a      	cmp	r2, r3
 8005994:	d121      	bne.n	80059da <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059d6:	6053      	str	r3, [r2, #4]
            break;
 80059d8:	e007      	b.n	80059ea <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	3301      	adds	r3, #1
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d3b4      	bcc.n	8005954 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80059f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f006 ff20 	bl	800c844 <USB_ReadInterrupts>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d10a      	bne.n	8005a26 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f00b faaf 	bl	8010f74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f006 ff0a 	bl	800c844 <USB_ReadInterrupts>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d115      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f00b fa9f 	bl	8010f90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6859      	ldr	r1, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	e000      	b.n	8005a66 <HAL_PCD_IRQHandler+0x938>
      return;
 8005a64:	bf00      	nop
    }
  }
}
 8005a66:	3734      	adds	r7, #52	; 0x34
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd90      	pop	{r4, r7, pc}

08005a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_SetAddress+0x1a>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e013      	b.n	8005aae <HAL_PCD_SetAddress+0x42>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f006 fe68 	bl	800c774 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	70fb      	strb	r3, [r7, #3]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	803b      	strh	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	da0f      	bge.n	8005afc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3338      	adds	r3, #56	; 0x38
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	3304      	adds	r3, #4
 8005af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	705a      	strb	r2, [r3, #1]
 8005afa:	e00f      	b.n	8005b1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	3304      	adds	r3, #4
 8005b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b28:	883a      	ldrh	r2, [r7, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	78ba      	ldrb	r2, [r7, #2]
 8005b32:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b46:	78bb      	ldrb	r3, [r7, #2]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d102      	bne.n	8005b52 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_PCD_EP_Open+0xaa>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e00e      	b.n	8005b7e <HAL_PCD_EP_Open+0xc8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f005 fee8 	bl	800b944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da0f      	bge.n	8005bba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	3338      	adds	r3, #56	; 0x38
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	3304      	adds	r3, #4
 8005bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	705a      	strb	r2, [r3, #1]
 8005bb8:	e00f      	b.n	8005bda <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_PCD_EP_Close+0x6e>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e00e      	b.n	8005c12 <HAL_PCD_EP_Close+0x8c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f005 ff26 	bl	800ba54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	460b      	mov	r3, r1
 8005c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	f003 020f 	and.w	r2, r3, #15
 8005c30:	4613      	mov	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	3304      	adds	r3, #4
 8005c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2200      	movs	r2, #0
 8005c54:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5c:	7afb      	ldrb	r3, [r7, #11]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d102      	bne.n	8005c76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6979      	ldr	r1, [r7, #20]
 8005c8e:	f006 fa05 	bl	800c09c <USB_EP0StartXfer>
 8005c92:	e008      	b.n	8005ca6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6979      	ldr	r1, [r7, #20]
 8005ca2:	f005 ffb3 	bl	800bc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005cd2:	681b      	ldr	r3, [r3, #0]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	460b      	mov	r3, r1
 8005cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
 8005cf2:	f003 020f 	and.w	r2, r3, #15
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	3338      	adds	r3, #56	; 0x38
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	3304      	adds	r3, #4
 8005d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d102      	bne.n	8005d3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d109      	bne.n	8005d58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	f006 f9a3 	bl	800c09c <USB_EP0StartXfer>
 8005d56:	e008      	b.n	8005d6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	6979      	ldr	r1, [r7, #20]
 8005d66:	f005 ff51 	bl	800bc0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	f003 020f 	and.w	r2, r3, #15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d901      	bls.n	8005d92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e050      	b.n	8005e34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da0f      	bge.n	8005dba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	3338      	adds	r3, #56	; 0x38
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	3304      	adds	r3, #4
 8005db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	705a      	strb	r2, [r3, #1]
 8005db8:	e00d      	b.n	8005dd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3304      	adds	r3, #4
 8005dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_PCD_EP_SetStall+0x82>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e01e      	b.n	8005e34 <HAL_PCD_EP_SetStall+0xc0>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f006 fbe1 	bl	800c5cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	b2d9      	uxtb	r1, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e24:	461a      	mov	r2, r3
 8005e26:	f006 fdd1 	bl	800c9cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d901      	bls.n	8005e5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e042      	b.n	8005ee0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da0f      	bge.n	8005e82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	3338      	adds	r3, #56	; 0x38
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	3304      	adds	r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	705a      	strb	r2, [r3, #1]
 8005e80:	e00f      	b.n	8005ea2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	3304      	adds	r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_PCD_EP_ClrStall+0x86>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e00e      	b.n	8005ee0 <HAL_PCD_EP_ClrStall+0xa4>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f006 fbe9 	bl	800c6a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	da0c      	bge.n	8005f16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	3338      	adds	r3, #56	; 0x38
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3304      	adds	r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e00c      	b.n	8005f30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f006 fa08 	bl	800c34c <USB_EPStopXfer>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f40:	7afb      	ldrb	r3, [r7, #11]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b08a      	sub	sp, #40	; 0x28
 8005f4e:	af02      	add	r7, sp, #8
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	3338      	adds	r3, #56	; 0x38
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3304      	adds	r3, #4
 8005f70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d901      	bls.n	8005f82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e06c      	b.n	800605c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d902      	bls.n	8005f9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3303      	adds	r3, #3
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fa6:	e02b      	b.n	8006000 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d902      	bls.n	8005fc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3303      	adds	r3, #3
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6919      	ldr	r1, [r3, #16]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f006 fa5c 	bl	800c4a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	441a      	add	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1a      	ldr	r2, [r3, #32]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	b29b      	uxth	r3, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	429a      	cmp	r2, r3
 8006014:	d809      	bhi.n	800602a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1a      	ldr	r2, [r3, #32]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800601e:	429a      	cmp	r2, r3
 8006020:	d203      	bcs.n	800602a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1be      	bne.n	8005fa8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	429a      	cmp	r2, r3
 8006034:	d811      	bhi.n	800605a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2201      	movs	r2, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	43db      	mvns	r3, r3
 8006050:	6939      	ldr	r1, [r7, #16]
 8006052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006056:	4013      	ands	r3, r2
 8006058:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3720      	adds	r7, #32
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	333c      	adds	r3, #60	; 0x3c
 800607c:	3304      	adds	r3, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d17b      	bne.n	8006192 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d015      	beq.n	80060d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4a61      	ldr	r2, [pc, #388]	; (800622c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	f240 80b9 	bls.w	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80b3 	beq.w	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	461a      	mov	r2, r3
 80060c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060cc:	6093      	str	r3, [r2, #8]
 80060ce:	e0a7      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	461a      	mov	r2, r3
 80060e8:	2320      	movs	r3, #32
 80060ea:	6093      	str	r3, [r2, #8]
 80060ec:	e098      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 8093 	bne.w	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4a4b      	ldr	r2, [pc, #300]	; (800622c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d90f      	bls.n	8006122 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	461a      	mov	r2, r3
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	6093      	str	r3, [r2, #8]
 8006120:	e07e      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	0159      	lsls	r1, r3, #5
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	440b      	add	r3, r1
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d114      	bne.n	8006184 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800616c:	461a      	mov	r2, r3
 800616e:	2101      	movs	r1, #1
 8006170:	f006 fc2c 	bl	800c9cc <USB_EP0_OutStart>
 8006174:	e006      	b.n	8006184 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	441a      	add	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f00a fe38 	bl	8010e00 <HAL_PCD_DataOutStageCallback>
 8006190:	e046      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4a26      	ldr	r2, [pc, #152]	; (8006230 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d124      	bne.n	80061e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b6:	6093      	str	r3, [r2, #8]
 80061b8:	e032      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	461a      	mov	r2, r3
 80061d2:	2320      	movs	r3, #32
 80061d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f00a fe0f 	bl	8010e00 <HAL_PCD_DataOutStageCallback>
 80061e2:	e01d      	b.n	8006220 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d114      	bne.n	8006214 <PCD_EP_OutXfrComplete_int+0x1b0>
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800620c:	461a      	mov	r2, r3
 800620e:	2100      	movs	r1, #0
 8006210:	f006 fbdc 	bl	800c9cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f00a fdf0 	bl	8010e00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	4f54300a 	.word	0x4f54300a
 8006230:	4f54310a 	.word	0x4f54310a

08006234 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	333c      	adds	r3, #60	; 0x3c
 800624c:	3304      	adds	r3, #4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a15      	ldr	r2, [pc, #84]	; (80062bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d90e      	bls.n	8006288 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	461a      	mov	r2, r3
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f00a fda7 	bl	8010ddc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d90c      	bls.n	80062b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d108      	bne.n	80062b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062a8:	461a      	mov	r2, r3
 80062aa:	2101      	movs	r1, #1
 80062ac:	f006 fb8e 	bl	800c9cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	4f54300a 	.word	0x4f54300a

080062c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	70fb      	strb	r3, [r7, #3]
 80062cc:	4613      	mov	r3, r2
 80062ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062de:	883b      	ldrh	r3, [r7, #0]
 80062e0:	0419      	lsls	r1, r3, #16
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	430a      	orrs	r2, r1
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
 80062ec:	e028      	b.n	8006340 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	0c1b      	lsrs	r3, r3, #16
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4413      	add	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
 8006300:	e00d      	b.n	800631e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	3340      	adds	r3, #64	; 0x40
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	0c1b      	lsrs	r3, r3, #16
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4413      	add	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	3301      	adds	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
 800631e:	7bfa      	ldrb	r2, [r7, #15]
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	3b01      	subs	r3, #1
 8006324:	429a      	cmp	r2, r3
 8006326:	d3ec      	bcc.n	8006302 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006328:	883b      	ldrh	r3, [r7, #0]
 800632a:	0418      	lsls	r0, r3, #16
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	3b01      	subs	r3, #1
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	4302      	orrs	r2, r0
 8006338:	3340      	adds	r3, #64	; 0x40
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	887a      	ldrh	r2, [r7, #2]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e267      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d075      	beq.n	8006492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 030c 	and.w	r3, r3, #12
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d00c      	beq.n	80063cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063b2:	4b85      	ldr	r3, [pc, #532]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d112      	bne.n	80063e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063be:	4b82      	ldr	r3, [pc, #520]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ca:	d10b      	bne.n	80063e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063cc:	4b7e      	ldr	r3, [pc, #504]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05b      	beq.n	8006490 <HAL_RCC_OscConfig+0x108>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d157      	bne.n	8006490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e242      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d106      	bne.n	80063fc <HAL_RCC_OscConfig+0x74>
 80063ee:	4b76      	ldr	r3, [pc, #472]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a75      	ldr	r2, [pc, #468]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e01d      	b.n	8006438 <HAL_RCC_OscConfig+0xb0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006404:	d10c      	bne.n	8006420 <HAL_RCC_OscConfig+0x98>
 8006406:	4b70      	ldr	r3, [pc, #448]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6f      	ldr	r2, [pc, #444]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4b6d      	ldr	r3, [pc, #436]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a6c      	ldr	r2, [pc, #432]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0xb0>
 8006420:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a68      	ldr	r2, [pc, #416]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	4b66      	ldr	r3, [pc, #408]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a65      	ldr	r2, [pc, #404]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006440:	f7fb fd86 	bl	8001f50 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006448:	f7fb fd82 	bl	8001f50 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e207      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0xc0>
 8006466:	e014      	b.n	8006492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fb fd72 	bl	8001f50 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006470:	f7fb fd6e 	bl	8001f50 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b64      	cmp	r3, #100	; 0x64
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1f3      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0xe8>
 800648e:	e000      	b.n	8006492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d063      	beq.n	8006566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 030c 	and.w	r3, r3, #12
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064aa:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d11c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d116      	bne.n	80064f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x152>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d001      	beq.n	80064da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e1c7      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064da:	4b3b      	ldr	r3, [pc, #236]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4937      	ldr	r1, [pc, #220]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	e03a      	b.n	8006566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d020      	beq.n	800653a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f8:	4b34      	ldr	r3, [pc, #208]	; (80065cc <HAL_RCC_OscConfig+0x244>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fb fd27 	bl	8001f50 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006506:	f7fb fd23 	bl	8001f50 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e1a8      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006518:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4925      	ldr	r1, [pc, #148]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]
 8006538:	e015      	b.n	8006566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <HAL_RCC_OscConfig+0x244>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fb fd06 	bl	8001f50 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006548:	f7fb fd02 	bl	8001f50 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e187      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d036      	beq.n	80065e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_RCC_OscConfig+0x248>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fb fce6 	bl	8001f50 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006588:	f7fb fce2 	bl	8001f50 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e167      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f0      	beq.n	8006588 <HAL_RCC_OscConfig+0x200>
 80065a6:	e01b      	b.n	80065e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x248>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ae:	f7fb fccf 	bl	8001f50 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	e00e      	b.n	80065d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fb fccb 	bl	8001f50 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d907      	bls.n	80065d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e150      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
 80065c8:	40023800 	.word	0x40023800
 80065cc:	42470000 	.word	0x42470000
 80065d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	4b88      	ldr	r3, [pc, #544]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ea      	bne.n	80065b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8097 	beq.w	800671c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b81      	ldr	r3, [pc, #516]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	4b7d      	ldr	r3, [pc, #500]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	4a7c      	ldr	r2, [pc, #496]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6413      	str	r3, [r2, #64]	; 0x40
 800660e:	4b7a      	ldr	r3, [pc, #488]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661e:	4b77      	ldr	r3, [pc, #476]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d118      	bne.n	800665c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662a:	4b74      	ldr	r3, [pc, #464]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006636:	f7fb fc8b 	bl	8001f50 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fb fc87 	bl	8001f50 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e10c      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	4b6a      	ldr	r3, [pc, #424]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HAL_RCC_OscConfig+0x2ea>
 8006664:	4b64      	ldr	r3, [pc, #400]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a63      	ldr	r2, [pc, #396]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	e01c      	b.n	80066ac <HAL_RCC_OscConfig+0x324>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x30c>
 800667a:	4b5f      	ldr	r3, [pc, #380]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	4a5e      	ldr	r2, [pc, #376]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6713      	str	r3, [r2, #112]	; 0x70
 8006686:	4b5c      	ldr	r3, [pc, #368]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6713      	str	r3, [r2, #112]	; 0x70
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x324>
 8006694:	4b58      	ldr	r3, [pc, #352]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a57      	ldr	r2, [pc, #348]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	4b55      	ldr	r3, [pc, #340]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a54      	ldr	r2, [pc, #336]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066a6:	f023 0304 	bic.w	r3, r3, #4
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fb fc4c 	bl	8001f50 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fb fc48 	bl	8001f50 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0cb      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	4b49      	ldr	r3, [pc, #292]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0ee      	beq.n	80066bc <HAL_RCC_OscConfig+0x334>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e0:	f7fb fc36 	bl	8001f50 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fb fc32 	bl	8001f50 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0b5      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fe:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ee      	bne.n	80066e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a1 	beq.w	8006868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006726:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b08      	cmp	r3, #8
 8006730:	d05c      	beq.n	80067ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d141      	bne.n	80067be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7fb fc06 	bl	8001f50 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006748:	f7fb fc02 	bl	8001f50 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e087      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	491b      	ldr	r1, [pc, #108]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 8006792:	2201      	movs	r2, #1
 8006794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fb fbdb 	bl	8001f50 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679e:	f7fb fbd7 	bl	8001f50 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e05c      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0f0      	beq.n	800679e <HAL_RCC_OscConfig+0x416>
 80067bc:	e054      	b.n	8006868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fb fbc4 	bl	8001f50 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067cc:	f7fb fbc0 	bl	8001f50 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e045      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x444>
 80067ea:	e03d      	b.n	8006868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d107      	bne.n	8006804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e038      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40007000 	.word	0x40007000
 8006800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4ec>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d028      	beq.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d121      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d11a      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800683a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800683c:	4293      	cmp	r3, r2
 800683e:	d111      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	3b01      	subs	r3, #1
 800684e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d107      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023800 	.word	0x40023800

08006878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0cc      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d90c      	bls.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d001      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0b8      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d020      	beq.n	8006902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068cc:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a58      	ldr	r2, [pc, #352]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e4:	4b53      	ldr	r3, [pc, #332]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a52      	ldr	r2, [pc, #328]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f0:	4b50      	ldr	r3, [pc, #320]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	494d      	ldr	r1, [pc, #308]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d044      	beq.n	8006998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d119      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e07f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d003      	beq.n	8006936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006932:	2b03      	cmp	r3, #3
 8006934:	d107      	bne.n	8006946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006936:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e06f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006946:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e067      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 0203 	bic.w	r2, r3, #3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4934      	ldr	r1, [pc, #208]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	4313      	orrs	r3, r2
 8006966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006968:	f7fb faf2 	bl	8001f50 <HAL_GetTick>
 800696c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	e00a      	b.n	8006986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006970:	f7fb faee 	bl	8001f50 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e04f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 020c 	and.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	429a      	cmp	r2, r3
 8006996:	d1eb      	bne.n	8006970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d20c      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e032      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4916      	ldr	r1, [pc, #88]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	490e      	ldr	r1, [pc, #56]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069fe:	f000 f821 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	490a      	ldr	r1, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 8006a10:	5ccb      	ldrb	r3, [r1, r3]
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa fa28 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023c00 	.word	0x40023c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	080134ac 	.word	0x080134ac
 8006a3c:	20000000 	.word	0x20000000
 8006a40:	20000004 	.word	0x20000004

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a48:	b090      	sub	sp, #64	; 0x40
 8006a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	2300      	movs	r3, #0
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 030c 	and.w	r3, r3, #12
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d00d      	beq.n	8006a84 <HAL_RCC_GetSysClockFreq+0x40>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	f200 80a1 	bhi.w	8006bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x34>
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d003      	beq.n	8006a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a76:	e09b      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b53      	ldr	r3, [pc, #332]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006a7c:	e09b      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a7e:	4b53      	ldr	r3, [pc, #332]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a82:	e098      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a84:	4b4f      	ldr	r3, [pc, #316]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a8e:	4b4d      	ldr	r3, [pc, #308]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d028      	beq.n	8006aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	099b      	lsrs	r3, r3, #6
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006aac:	2100      	movs	r1, #0
 8006aae:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006ab0:	fb03 f201 	mul.w	r2, r3, r1
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	fb00 f303 	mul.w	r3, r0, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	4a43      	ldr	r2, [pc, #268]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006abe:	fba0 1202 	umull	r1, r2, r0, r2
 8006ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ac4:	460a      	mov	r2, r1
 8006ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aca:	4413      	add	r3, r2
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	61fa      	str	r2, [r7, #28]
 8006ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ade:	f7f9 fb7f 	bl	80001e0 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aea:	e053      	b.n	8006b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aec:	4b35      	ldr	r3, [pc, #212]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	099b      	lsrs	r3, r3, #6
 8006af2:	2200      	movs	r2, #0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	617a      	str	r2, [r7, #20]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006afe:	f04f 0b00 	mov.w	fp, #0
 8006b02:	4652      	mov	r2, sl
 8006b04:	465b      	mov	r3, fp
 8006b06:	f04f 0000 	mov.w	r0, #0
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	0159      	lsls	r1, r3, #5
 8006b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b14:	0150      	lsls	r0, r2, #5
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8006b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8006b22:	f04f 0200 	mov.w	r2, #0
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b36:	ebb2 0408 	subs.w	r4, r2, r8
 8006b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	00eb      	lsls	r3, r5, #3
 8006b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4c:	00e2      	lsls	r2, r4, #3
 8006b4e:	4614      	mov	r4, r2
 8006b50:	461d      	mov	r5, r3
 8006b52:	eb14 030a 	adds.w	r3, r4, sl
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	eb45 030b 	adc.w	r3, r5, fp
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	f04f 0200 	mov.w	r2, #0
 8006b62:	f04f 0300 	mov.w	r3, #0
 8006b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	028b      	lsls	r3, r1, #10
 8006b6e:	4621      	mov	r1, r4
 8006b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b74:	4621      	mov	r1, r4
 8006b76:	028a      	lsls	r2, r1, #10
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	2200      	movs	r2, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	60fa      	str	r2, [r7, #12]
 8006b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b88:	f7f9 fb2a 	bl	80001e0 <__aeabi_uldivmod>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4613      	mov	r3, r2
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006bae:	e002      	b.n	8006bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3740      	adds	r7, #64	; 0x40
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	00f42400 	.word	0x00f42400
 8006bcc:	017d7840 	.word	0x017d7840

08006bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000000 	.word	0x20000000

08006be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bec:	f7ff fff0 	bl	8006bd0 <HAL_RCC_GetHCLKFreq>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	0a9b      	lsrs	r3, r3, #10
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	4903      	ldr	r1, [pc, #12]	; (8006c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bfe:	5ccb      	ldrb	r3, [r1, r3]
 8006c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	080134bc 	.word	0x080134bc

08006c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c14:	f7ff ffdc 	bl	8006bd0 <HAL_RCC_GetHCLKFreq>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	0b5b      	lsrs	r3, r3, #13
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	4903      	ldr	r1, [pc, #12]	; (8006c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c26:	5ccb      	ldrb	r3, [r1, r3]
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40023800 	.word	0x40023800
 8006c34:	080134bc 	.word	0x080134bc

08006c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	220f      	movs	r2, #15
 8006c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c48:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <HAL_RCC_GetClockConfig+0x5c>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0203 	and.w	r2, r3, #3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c54:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <HAL_RCC_GetClockConfig+0x5c>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_RCC_GetClockConfig+0x5c>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_RCC_GetClockConfig+0x5c>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	08db      	lsrs	r3, r3, #3
 8006c72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <HAL_RCC_GetClockConfig+0x60>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0207 	and.w	r2, r3, #7
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	601a      	str	r2, [r3, #0]
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40023800 	.word	0x40023800
 8006c98:	40023c00 	.word	0x40023c00

08006c9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d105      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d035      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cc4:	4b67      	ldr	r3, [pc, #412]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cca:	f7fb f941 	bl	8001f50 <HAL_GetTick>
 8006cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cd2:	f7fb f93d 	bl	8001f50 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e0ba      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ce4:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f0      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	019a      	lsls	r2, r3, #6
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	071b      	lsls	r3, r3, #28
 8006cfc:	495a      	ldr	r1, [pc, #360]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d04:	4b57      	ldr	r3, [pc, #348]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0a:	f7fb f921 	bl	8001f50 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d10:	e008      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d12:	f7fb f91d 	bl	8001f50 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e09a      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d24:	4b50      	ldr	r3, [pc, #320]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 8083 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	4b49      	ldr	r3, [pc, #292]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4a48      	ldr	r2, [pc, #288]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4e:	4b46      	ldr	r3, [pc, #280]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d5a:	4b44      	ldr	r3, [pc, #272]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a43      	ldr	r2, [pc, #268]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d66:	f7fb f8f3 	bl	8001f50 <HAL_GetTick>
 8006d6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d6e:	f7fb f8ef 	bl	8001f50 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e06c      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d80:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d8c:	4b36      	ldr	r3, [pc, #216]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d028      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006daa:	4b2f      	ldr	r3, [pc, #188]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db4:	4b2e      	ldr	r3, [pc, #184]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dba:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dc0:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d114      	bne.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dd2:	f7fb f8bd 	bl	8001f50 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fb f8b9 	bl	8001f50 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e034      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e08:	d10d      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1e:	4912      	ldr	r1, [pc, #72]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]
 8006e24:	e005      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e26:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	4a0f      	ldr	r2, [pc, #60]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e30:	6093      	str	r3, [r2, #8]
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e3e:	490a      	ldr	r1, [pc, #40]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7c1a      	ldrb	r2, [r3, #16]
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e56:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	42470068 	.word	0x42470068
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40007000 	.word	0x40007000
 8006e70:	42470e40 	.word	0x42470e40
 8006e74:	424711e0 	.word	0x424711e0

08006e78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e066      	b.n	8006f5c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7f5b      	ldrb	r3, [r3, #29]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7f9 ff12 	bl	8000cc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	22ca      	movs	r2, #202	; 0xca
 8006eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2253      	movs	r2, #83	; 0x53
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa45 	bl	800734a <RTC_EnterInitMode>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d12c      	bne.n	8006f24 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006edc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6899      	ldr	r1, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	68d2      	ldr	r2, [r2, #12]
 8006f04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6919      	ldr	r1, [r3, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	041a      	lsls	r2, r3, #16
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fa4c 	bl	80073b8 <RTC_ExitInitMode>
 8006f20:	4603      	mov	r3, r0
 8006f22:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d113      	bne.n	8006f52 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7f1b      	ldrb	r3, [r3, #28]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_RTC_SetTime+0x1c>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e087      	b.n	8007090 <HAL_RTC_SetTime+0x12c>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d126      	bne.n	8006fe0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fa29 	bl	8007402 <RTC_ByteToBcd2>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 fa22 	bl	8007402 <RTC_ByteToBcd2>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fc2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	789b      	ldrb	r3, [r3, #2]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fa1a 	bl	8007402 <RTC_ByteToBcd2>
 8006fce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fd0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	78db      	ldrb	r3, [r3, #3]
 8006fd8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	e018      	b.n	8007012 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	785b      	ldrb	r3, [r3, #1]
 8006ffe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007000:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007006:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	78db      	ldrb	r3, [r3, #3]
 800700c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	22ca      	movs	r2, #202	; 0xca
 8007018:	625a      	str	r2, [r3, #36]	; 0x24
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2253      	movs	r2, #83	; 0x53
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f000 f991 	bl	800734a <RTC_EnterInitMode>
 8007028:	4603      	mov	r3, r0
 800702a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800702c:	7cfb      	ldrb	r3, [r7, #19]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d120      	bne.n	8007074 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800703c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007040:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007050:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6899      	ldr	r1, [r3, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f9a4 	bl	80073b8 <RTC_ExitInitMode>
 8007070:	4603      	mov	r3, r0
 8007072:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007074:	7cfb      	ldrb	r3, [r7, #19]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	771a      	strb	r2, [r3, #28]

  return status;
 800708e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	bd90      	pop	{r4, r7, pc}

08007098 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80070ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	0d9b      	lsrs	r3, r3, #22
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11a      	bne.n	800714a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f98f 	bl	800743c <RTC_Bcd2ToByte>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f986 	bl	800743c <RTC_Bcd2ToByte>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f97d 	bl	800743c <RTC_Bcd2ToByte>
 8007142:	4603      	mov	r3, r0
 8007144:	461a      	mov	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7f1b      	ldrb	r3, [r3, #28]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_RTC_SetDate+0x1c>
 800716c:	2302      	movs	r3, #2
 800716e:	e071      	b.n	8007254 <HAL_RTC_SetDate+0x100>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2202      	movs	r2, #2
 800717a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10e      	bne.n	80071a0 <HAL_RTC_SetDate+0x4c>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	b2db      	uxtb	r3, r3
 8007198:	330a      	adds	r3, #10
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d11c      	bne.n	80071e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f929 	bl	8007402 <RTC_ByteToBcd2>
 80071b0:	4603      	mov	r3, r0
 80071b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	785b      	ldrb	r3, [r3, #1]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 f922 	bl	8007402 <RTC_ByteToBcd2>
 80071be:	4603      	mov	r3, r0
 80071c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	789b      	ldrb	r3, [r3, #2]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f91a 	bl	8007402 <RTC_ByteToBcd2>
 80071ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80071d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]
 80071de:	e00e      	b.n	80071fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	785b      	ldrb	r3, [r3, #1]
 80071ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071ec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80071f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	22ca      	movs	r2, #202	; 0xca
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2253      	movs	r2, #83	; 0x53
 800720c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f89b 	bl	800734a <RTC_EnterInitMode>
 8007214:	4603      	mov	r3, r0
 8007216:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007218:	7cfb      	ldrb	r3, [r7, #19]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10c      	bne.n	8007238 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007228:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800722c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f8c2 	bl	80073b8 <RTC_ExitInitMode>
 8007234:	4603      	mov	r3, r0
 8007236:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007238:	7cfb      	ldrb	r3, [r7, #19]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	771a      	strb	r2, [r3, #28]

  return status;
 8007252:	7cfb      	ldrb	r3, [r7, #19]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007276:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800727a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	0c1b      	lsrs	r3, r3, #16
 8007280:	b2da      	uxtb	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	0a1b      	lsrs	r3, r3, #8
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	0b5b      	lsrs	r3, r3, #13
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d11a      	bne.n	80072f0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f8bc 	bl	800743c <RTC_Bcd2ToByte>
 80072c4:	4603      	mov	r3, r0
 80072c6:	461a      	mov	r2, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 f8b3 	bl	800743c <RTC_Bcd2ToByte>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	789b      	ldrb	r3, [r3, #2]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f8aa 	bl	800743c <RTC_Bcd2ToByte>
 80072e8:	4603      	mov	r3, r0
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007314:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007316:	f7fa fe1b 	bl	8001f50 <HAL_GetTick>
 800731a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800731c:	e009      	b.n	8007332 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800731e:	f7fa fe17 	bl	8001f50 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732c:	d901      	bls.n	8007332 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e007      	b.n	8007342 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0ee      	beq.n	800731e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d122      	bne.n	80073ae <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007376:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007378:	f7fa fdea 	bl	8001f50 <HAL_GetTick>
 800737c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800737e:	e00c      	b.n	800739a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007380:	f7fa fde6 	bl	8001f50 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738e:	d904      	bls.n	800739a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2204      	movs	r2, #4
 8007394:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d102      	bne.n	80073ae <RTC_EnterInitMode+0x64>
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d1e8      	bne.n	8007380 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff ff89 	bl	80072fa <HAL_RTC_WaitForSynchro>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	4603      	mov	r3, r0
 800740a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007410:	e005      	b.n	800741e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	3301      	adds	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	3b0a      	subs	r3, #10
 800741c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	2b09      	cmp	r3, #9
 8007422:	d8f6      	bhi.n	8007412 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	b2da      	uxtb	r2, r3
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	4313      	orrs	r3, r2
 800742e:	b2db      	uxtb	r3, r3
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	091b      	lsrs	r3, r3, #4
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	0092      	lsls	r2, r2, #2
 8007454:	4413      	add	r3, r2
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	b2da      	uxtb	r2, r3
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	4413      	add	r3, r2
 8007466:	b2db      	uxtb	r3, r3
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3350      	adds	r3, #80	; 0x50
 800748a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4413      	add	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	601a      	str	r2, [r3, #0]
}
 800749c:	bf00      	nop
 800749e:	371c      	adds	r7, #28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e07b      	b.n	80075b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ca:	d009      	beq.n	80074e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	61da      	str	r2, [r3, #28]
 80074d2:	e005      	b.n	80074e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7f9 fc46 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	ea42 0103 	orr.w	r1, r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	f003 0104 	and.w	r1, r3, #4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f003 0210 	and.w	r2, r3, #16
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_SPI_Transmit+0x22>
 80075d8:	2302      	movs	r3, #2
 80075da:	e126      	b.n	800782a <HAL_SPI_Transmit+0x270>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e4:	f7fa fcb4 	bl	8001f50 <HAL_GetTick>
 80075e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d002      	beq.n	8007600 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
 80075fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075fe:	e10b      	b.n	8007818 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_Transmit+0x52>
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007610:	e102      	b.n	8007818 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2203      	movs	r2, #3
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	88fa      	ldrh	r2, [r7, #6]
 8007630:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007658:	d10f      	bne.n	800767a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007668:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007678:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007684:	2b40      	cmp	r3, #64	; 0x40
 8007686:	d007      	beq.n	8007698 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a0:	d14b      	bne.n	800773a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_SPI_Transmit+0xf6>
 80076aa:	8afb      	ldrh	r3, [r7, #22]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d13e      	bne.n	800772e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	1c9a      	adds	r2, r3, #2
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076d4:	e02b      	b.n	800772e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d112      	bne.n	800770a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	881a      	ldrh	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	86da      	strh	r2, [r3, #54]	; 0x36
 8007708:	e011      	b.n	800772e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770a:	f7fa fc21 	bl	8001f50 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d803      	bhi.n	8007722 <HAL_SPI_Transmit+0x168>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d102      	bne.n	8007728 <HAL_SPI_Transmit+0x16e>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800772c:	e074      	b.n	8007818 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ce      	bne.n	80076d6 <HAL_SPI_Transmit+0x11c>
 8007738:	e04c      	b.n	80077d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SPI_Transmit+0x18e>
 8007742:	8afb      	ldrh	r3, [r7, #22]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d140      	bne.n	80077ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	330c      	adds	r3, #12
 8007752:	7812      	ldrb	r2, [r2, #0]
 8007754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800776e:	e02c      	b.n	80077ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d113      	bne.n	80077a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80077a4:	e011      	b.n	80077ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a6:	f7fa fbd3 	bl	8001f50 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d803      	bhi.n	80077be <HAL_SPI_Transmit+0x204>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077bc:	d102      	bne.n	80077c4 <HAL_SPI_Transmit+0x20a>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077c8:	e026      	b.n	8007818 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1cd      	bne.n	8007770 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fbcb 	bl	8007f74 <SPI_EndRxTxTransaction>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e000      	b.n	8007818 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007816:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007828:	7ffb      	ldrb	r3, [r7, #31]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b088      	sub	sp, #32
 8007836:	af02      	add	r7, sp, #8
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800784e:	d112      	bne.n	8007876 <HAL_SPI_Receive+0x44>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10e      	bne.n	8007876 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2204      	movs	r2, #4
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 f8f1 	bl	8007a54 <HAL_SPI_TransmitReceive>
 8007872:	4603      	mov	r3, r0
 8007874:	e0ea      	b.n	8007a4c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_SPI_Receive+0x52>
 8007880:	2302      	movs	r3, #2
 8007882:	e0e3      	b.n	8007a4c <HAL_SPI_Receive+0x21a>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788c:	f7fa fb60 	bl	8001f50 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	d002      	beq.n	80078a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800789e:	2302      	movs	r3, #2
 80078a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078a2:	e0ca      	b.n	8007a3a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_Receive+0x7e>
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078b4:	e0c1      	b.n	8007a3a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2204      	movs	r2, #4
 80078ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fc:	d10f      	bne.n	800791e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800791c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d007      	beq.n	800793c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d162      	bne.n	8007a0a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007944:	e02e      	b.n	80079a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d115      	bne.n	8007980 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f103 020c 	add.w	r2, r3, #12
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	7812      	ldrb	r2, [r2, #0]
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800797e:	e011      	b.n	80079a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007980:	f7fa fae6 	bl	8001f50 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d803      	bhi.n	8007998 <HAL_SPI_Receive+0x166>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d102      	bne.n	800799e <HAL_SPI_Receive+0x16c>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079a2:	e04a      	b.n	8007a3a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1cb      	bne.n	8007946 <HAL_SPI_Receive+0x114>
 80079ae:	e031      	b.n	8007a14 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d113      	bne.n	80079e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	b292      	uxth	r2, r2
 80079ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	1c9a      	adds	r2, r3, #2
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079e4:	e011      	b.n	8007a0a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079e6:	f7fa fab3 	bl	8001f50 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d803      	bhi.n	80079fe <HAL_SPI_Receive+0x1cc>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fc:	d102      	bne.n	8007a04 <HAL_SPI_Receive+0x1d2>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a08:	e017      	b.n	8007a3a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1cd      	bne.n	80079b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fa45 	bl	8007ea8 <SPI_EndRxTransaction>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
 8007a36:	e000      	b.n	8007a3a <HAL_SPI_Receive+0x208>
  }

error :
 8007a38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08c      	sub	sp, #48	; 0x30
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a62:	2301      	movs	r3, #1
 8007a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x26>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e18a      	b.n	8007d90 <HAL_SPI_TransmitReceive+0x33c>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a82:	f7fa fa65 	bl	8001f50 <HAL_GetTick>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a98:	887b      	ldrh	r3, [r7, #2]
 8007a9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d00f      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x70>
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aaa:	d107      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x68>
 8007ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d003      	beq.n	8007ac4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ac2:	e15b      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x82>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x82>
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007adc:	e14e      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d003      	beq.n	8007af2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2205      	movs	r2, #5
 8007aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	887a      	ldrh	r2, [r7, #2]
 8007b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	887a      	ldrh	r2, [r7, #2]
 8007b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	887a      	ldrh	r2, [r7, #2]
 8007b14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	887a      	ldrh	r2, [r7, #2]
 8007b1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d007      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b4e:	d178      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_SPI_TransmitReceive+0x10a>
 8007b58:	8b7b      	ldrh	r3, [r7, #26]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d166      	bne.n	8007c2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	881a      	ldrh	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	1c9a      	adds	r2, r3, #2
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b82:	e053      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d11b      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x176>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d016      	beq.n	8007bca <HAL_SPI_TransmitReceive+0x176>
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d113      	bne.n	8007bca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	881a      	ldrh	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	1c9a      	adds	r2, r3, #2
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d119      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x1b8>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d014      	beq.n	8007c0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	b292      	uxth	r2, r2
 8007bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	1c9a      	adds	r2, r3, #2
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c0c:	f7fa f9a0 	bl	8001f50 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d807      	bhi.n	8007c2c <HAL_SPI_TransmitReceive+0x1d8>
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d003      	beq.n	8007c2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c2a:	e0a7      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1a6      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x130>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1a1      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x130>
 8007c40:	e07c      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x1fc>
 8007c4a:	8b7b      	ldrh	r3, [r7, #26]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d16b      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	7812      	ldrb	r2, [r2, #0]
 8007c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c76:	e057      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d11c      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x26c>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_SPI_TransmitReceive+0x26c>
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d114      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	7812      	ldrb	r2, [r2, #0]
 8007ca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d119      	bne.n	8007d02 <HAL_SPI_TransmitReceive+0x2ae>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d014      	beq.n	8007d02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d02:	f7fa f925 	bl	8001f50 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d803      	bhi.n	8007d1a <HAL_SPI_TransmitReceive+0x2c6>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d102      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x2cc>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d26:	e029      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1a2      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x224>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d19d      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f917 	bl	8007f74 <SPI_EndRxTxTransaction>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d006      	beq.n	8007d5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2220      	movs	r2, #32
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d58:	e010      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	e000      	b.n	8007d7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3730      	adds	r7, #48	; 0x30
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	4613      	mov	r3, r2
 8007da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007da8:	f7fa f8d2 	bl	8001f50 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007db8:	f7fa f8ca 	bl	8001f50 <HAL_GetTick>
 8007dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dbe:	4b39      	ldr	r3, [pc, #228]	; (8007ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	015b      	lsls	r3, r3, #5
 8007dc4:	0d1b      	lsrs	r3, r3, #20
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	fb02 f303 	mul.w	r3, r2, r3
 8007dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dce:	e054      	b.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d050      	beq.n	8007e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dd8:	f7fa f8ba 	bl	8001f50 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d902      	bls.n	8007dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d13d      	bne.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e06:	d111      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e10:	d004      	beq.n	8007e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1a:	d107      	bne.n	8007e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e34:	d10f      	bne.n	8007e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e017      	b.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4013      	ands	r3, r2
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	bf0c      	ite	eq
 8007e8a:	2301      	moveq	r3, #1
 8007e8c:	2300      	movne	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d19b      	bne.n	8007dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000000 	.word	0x20000000

08007ea8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ebc:	d111      	bne.n	8007ee2 <SPI_EndRxTransaction+0x3a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec6:	d004      	beq.n	8007ed2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed0:	d107      	bne.n	8007ee2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eea:	d12a      	bne.n	8007f42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef4:	d012      	beq.n	8007f1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2200      	movs	r2, #0
 8007efe:	2180      	movs	r1, #128	; 0x80
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff ff49 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d02d      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f10:	f043 0220 	orr.w	r2, r3, #32
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e026      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2101      	movs	r1, #1
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff ff36 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	f043 0220 	orr.w	r2, r3, #32
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e013      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff ff23 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	f043 0220 	orr.w	r2, r3, #32
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e000      	b.n	8007f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
	...

08007f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f80:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <SPI_EndRxTxTransaction+0x7c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <SPI_EndRxTxTransaction+0x80>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	0d5b      	lsrs	r3, r3, #21
 8007f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f90:	fb02 f303 	mul.w	r3, r2, r3
 8007f94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f9e:	d112      	bne.n	8007fc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2180      	movs	r1, #128	; 0x80
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff fef4 	bl	8007d98 <SPI_WaitFlagStateUntilTimeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d016      	beq.n	8007fe4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fba:	f043 0220 	orr.w	r2, r3, #32
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e00f      	b.n	8007fe6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fdc:	2b80      	cmp	r3, #128	; 0x80
 8007fde:	d0f2      	beq.n	8007fc6 <SPI_EndRxTxTransaction+0x52>
 8007fe0:	e000      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007fe2:	bf00      	nop
  }

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000000 	.word	0x20000000
 8007ff4:	165e9f81 	.word	0x165e9f81

08007ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e041      	b.n	800808e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7f9 fae2 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f001 fa24 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d001      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e044      	b.n	800813a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1e      	ldr	r2, [pc, #120]	; (8008148 <HAL_TIM_Base_Start_IT+0xb0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d018      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x6c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d013      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x6c>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1a      	ldr	r2, [pc, #104]	; (800814c <HAL_TIM_Base_Start_IT+0xb4>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00e      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x6c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_TIM_Base_Start_IT+0xb8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d009      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x6c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <HAL_TIM_Base_Start_IT+0xbc>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d004      	beq.n	8008104 <HAL_TIM_Base_Start_IT+0x6c>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a16      	ldr	r2, [pc, #88]	; (8008158 <HAL_TIM_Base_Start_IT+0xc0>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d111      	bne.n	8008128 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b06      	cmp	r3, #6
 8008114:	d010      	beq.n	8008138 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008126:	e007      	b.n	8008138 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40010000 	.word	0x40010000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40014000 	.word	0x40014000

0800815c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e041      	b.n	80081f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f839 	bl	80081fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4610      	mov	r0, r2
 800819c:	f001 f972 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b02      	cmp	r3, #2
 8008232:	bf0c      	ite	eq
 8008234:	2301      	moveq	r3, #1
 8008236:	2300      	movne	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	e022      	b.n	8008282 <HAL_TIM_PWM_Start_DMA+0x72>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d109      	bne.n	8008256 <HAL_TIM_PWM_Start_DMA+0x46>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	bf0c      	ite	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	2300      	movne	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e015      	b.n	8008282 <HAL_TIM_PWM_Start_DMA+0x72>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d109      	bne.n	8008270 <HAL_TIM_PWM_Start_DMA+0x60>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	e008      	b.n	8008282 <HAL_TIM_PWM_Start_DMA+0x72>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
 8008288:	e15d      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start_DMA+0x94>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e022      	b.n	80082ea <HAL_TIM_PWM_Start_DMA+0xda>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d109      	bne.n	80082be <HAL_TIM_PWM_Start_DMA+0xae>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	bf0c      	ite	eq
 80082b6:	2301      	moveq	r3, #1
 80082b8:	2300      	movne	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e015      	b.n	80082ea <HAL_TIM_PWM_Start_DMA+0xda>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e008      	b.n	80082ea <HAL_TIM_PWM_Start_DMA+0xda>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	bf0c      	ite	eq
 80082e4:	2301      	moveq	r3, #1
 80082e6:	2300      	movne	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d024      	beq.n	8008338 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_PWM_Start_DMA+0xee>
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e123      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800830c:	e016      	b.n	800833c <HAL_TIM_PWM_Start_DMA+0x12c>
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b04      	cmp	r3, #4
 8008312:	d104      	bne.n	800831e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800831c:	e00e      	b.n	800833c <HAL_TIM_PWM_Start_DMA+0x12c>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b08      	cmp	r3, #8
 8008322:	d104      	bne.n	800832e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800832c:	e006      	b.n	800833c <HAL_TIM_PWM_Start_DMA+0x12c>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2202      	movs	r2, #2
 8008332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008336:	e001      	b.n	800833c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	e104      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b0c      	cmp	r3, #12
 8008340:	f200 80ae 	bhi.w	80084a0 <HAL_TIM_PWM_Start_DMA+0x290>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008381 	.word	0x08008381
 8008350:	080084a1 	.word	0x080084a1
 8008354:	080084a1 	.word	0x080084a1
 8008358:	080084a1 	.word	0x080084a1
 800835c:	080083c9 	.word	0x080083c9
 8008360:	080084a1 	.word	0x080084a1
 8008364:	080084a1 	.word	0x080084a1
 8008368:	080084a1 	.word	0x080084a1
 800836c:	08008411 	.word	0x08008411
 8008370:	080084a1 	.word	0x080084a1
 8008374:	080084a1 	.word	0x080084a1
 8008378:	080084a1 	.word	0x080084a1
 800837c:	08008459 	.word	0x08008459
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	4a72      	ldr	r2, [pc, #456]	; (8008550 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008386:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a71      	ldr	r2, [pc, #452]	; (8008554 <HAL_TIM_PWM_Start_DMA+0x344>)
 800838e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	4a70      	ldr	r2, [pc, #448]	; (8008558 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008396:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3334      	adds	r3, #52	; 0x34
 80083a4:	461a      	mov	r2, r3
 80083a6:	887b      	ldrh	r3, [r7, #2]
 80083a8:	f7f9 ffae 	bl	8002308 <HAL_DMA_Start_IT>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e0c7      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c4:	60da      	str	r2, [r3, #12]
      break;
 80083c6:	e06e      	b.n	80084a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	4a60      	ldr	r2, [pc, #384]	; (8008550 <HAL_TIM_PWM_Start_DMA+0x340>)
 80083ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	4a5f      	ldr	r2, [pc, #380]	; (8008554 <HAL_TIM_PWM_Start_DMA+0x344>)
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	4a5e      	ldr	r2, [pc, #376]	; (8008558 <HAL_TIM_PWM_Start_DMA+0x348>)
 80083de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3338      	adds	r3, #56	; 0x38
 80083ec:	461a      	mov	r2, r3
 80083ee:	887b      	ldrh	r3, [r7, #2]
 80083f0:	f7f9 ff8a 	bl	8002308 <HAL_DMA_Start_IT>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e0a3      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68da      	ldr	r2, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800840c:	60da      	str	r2, [r3, #12]
      break;
 800840e:	e04a      	b.n	80084a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	4a4e      	ldr	r2, [pc, #312]	; (8008550 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008416:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4a4d      	ldr	r2, [pc, #308]	; (8008554 <HAL_TIM_PWM_Start_DMA+0x344>)
 800841e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4a4c      	ldr	r2, [pc, #304]	; (8008558 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008426:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	333c      	adds	r3, #60	; 0x3c
 8008434:	461a      	mov	r2, r3
 8008436:	887b      	ldrh	r3, [r7, #2]
 8008438:	f7f9 ff66 	bl	8002308 <HAL_DMA_Start_IT>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e07f      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008454:	60da      	str	r2, [r3, #12]
      break;
 8008456:	e026      	b.n	80084a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	4a3c      	ldr	r2, [pc, #240]	; (8008550 <HAL_TIM_PWM_Start_DMA+0x340>)
 800845e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	4a3b      	ldr	r2, [pc, #236]	; (8008554 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	4a3a      	ldr	r2, [pc, #232]	; (8008558 <HAL_TIM_PWM_Start_DMA+0x348>)
 800846e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3340      	adds	r3, #64	; 0x40
 800847c:	461a      	mov	r2, r3
 800847e:	887b      	ldrh	r3, [r7, #2]
 8008480:	f7f9 ff42 	bl	8002308 <HAL_DMA_Start_IT>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e05b      	b.n	8008546 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800849c:	60da      	str	r2, [r3, #12]
      break;
 800849e:	e002      	b.n	80084a6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	75fb      	strb	r3, [r7, #23]
      break;
 80084a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d14b      	bne.n	8008544 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2201      	movs	r2, #1
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fba9 	bl	8009c0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a27      	ldr	r2, [pc, #156]	; (800855c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d107      	bne.n	80084d4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a20      	ldr	r2, [pc, #128]	; (800855c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d018      	beq.n	8008510 <HAL_TIM_PWM_Start_DMA+0x300>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d013      	beq.n	8008510 <HAL_TIM_PWM_Start_DMA+0x300>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1c      	ldr	r2, [pc, #112]	; (8008560 <HAL_TIM_PWM_Start_DMA+0x350>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00e      	beq.n	8008510 <HAL_TIM_PWM_Start_DMA+0x300>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <HAL_TIM_PWM_Start_DMA+0x354>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d009      	beq.n	8008510 <HAL_TIM_PWM_Start_DMA+0x300>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d004      	beq.n	8008510 <HAL_TIM_PWM_Start_DMA+0x300>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a18      	ldr	r2, [pc, #96]	; (800856c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d111      	bne.n	8008534 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b06      	cmp	r3, #6
 8008520:	d010      	beq.n	8008544 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0201 	orr.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008532:	e007      	b.n	8008544 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08009245 	.word	0x08009245
 8008554:	080092ed 	.word	0x080092ed
 8008558:	080091b3 	.word	0x080091b3
 800855c:	40010000 	.word	0x40010000
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800
 8008568:	40000c00 	.word	0x40000c00
 800856c:	40014000 	.word	0x40014000

08008570 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e041      	b.n	8008606 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d106      	bne.n	800859c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f839 	bl	800860e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3304      	adds	r3, #4
 80085ac:	4619      	mov	r1, r3
 80085ae:	4610      	mov	r0, r2
 80085b0:	f000 ff68 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <HAL_TIM_IC_Start_DMA+0x22>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008642:	b2db      	uxtb	r3, r3
 8008644:	e013      	b.n	800866e <HAL_TIM_IC_Start_DMA+0x4a>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b04      	cmp	r3, #4
 800864a:	d104      	bne.n	8008656 <HAL_TIM_IC_Start_DMA+0x32>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008652:	b2db      	uxtb	r3, r3
 8008654:	e00b      	b.n	800866e <HAL_TIM_IC_Start_DMA+0x4a>
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2b08      	cmp	r3, #8
 800865a:	d104      	bne.n	8008666 <HAL_TIM_IC_Start_DMA+0x42>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008662:	b2db      	uxtb	r3, r3
 8008664:	e003      	b.n	800866e <HAL_TIM_IC_Start_DMA+0x4a>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800866c:	b2db      	uxtb	r3, r3
 800866e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <HAL_TIM_IC_Start_DMA+0x5c>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800867c:	b2db      	uxtb	r3, r3
 800867e:	e013      	b.n	80086a8 <HAL_TIM_IC_Start_DMA+0x84>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b04      	cmp	r3, #4
 8008684:	d104      	bne.n	8008690 <HAL_TIM_IC_Start_DMA+0x6c>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800868c:	b2db      	uxtb	r3, r3
 800868e:	e00b      	b.n	80086a8 <HAL_TIM_IC_Start_DMA+0x84>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b08      	cmp	r3, #8
 8008694:	d104      	bne.n	80086a0 <HAL_TIM_IC_Start_DMA+0x7c>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800869c:	b2db      	uxtb	r3, r3
 800869e:	e003      	b.n	80086a8 <HAL_TIM_IC_Start_DMA+0x84>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80086aa:	7dbb      	ldrb	r3, [r7, #22]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d002      	beq.n	80086b6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80086b0:	7d7b      	ldrb	r3, [r7, #21]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d101      	bne.n	80086ba <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80086b6:	2302      	movs	r3, #2
 80086b8:	e13c      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80086ba:	7dbb      	ldrb	r3, [r7, #22]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d143      	bne.n	8008748 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80086c0:	7d7b      	ldrb	r3, [r7, #21]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d140      	bne.n	8008748 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <HAL_TIM_IC_Start_DMA+0xb2>
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e12e      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d104      	bne.n	80086e6 <HAL_TIM_IC_Start_DMA+0xc2>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2202      	movs	r2, #2
 80086e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e4:	e013      	b.n	800870e <HAL_TIM_IC_Start_DMA+0xea>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d104      	bne.n	80086f6 <HAL_TIM_IC_Start_DMA+0xd2>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f4:	e00b      	b.n	800870e <HAL_TIM_IC_Start_DMA+0xea>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_IC_Start_DMA+0xe2>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008704:	e003      	b.n	800870e <HAL_TIM_IC_Start_DMA+0xea>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2202      	movs	r2, #2
 800870a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <HAL_TIM_IC_Start_DMA+0xfa>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800871c:	e016      	b.n	800874c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b04      	cmp	r3, #4
 8008722:	d104      	bne.n	800872e <HAL_TIM_IC_Start_DMA+0x10a>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800872c:	e00e      	b.n	800874c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b08      	cmp	r3, #8
 8008732:	d104      	bne.n	800873e <HAL_TIM_IC_Start_DMA+0x11a>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800873c:	e006      	b.n	800874c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2202      	movs	r2, #2
 8008742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008746:	e001      	b.n	800874c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e0f3      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2201      	movs	r2, #1
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	4618      	mov	r0, r3
 8008756:	f001 fa59 	bl	8009c0c <TIM_CCxChannelCmd>

  switch (Channel)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b0c      	cmp	r3, #12
 800875e:	f200 80ad 	bhi.w	80088bc <HAL_TIM_IC_Start_DMA+0x298>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <HAL_TIM_IC_Start_DMA+0x144>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	0800879d 	.word	0x0800879d
 800876c:	080088bd 	.word	0x080088bd
 8008770:	080088bd 	.word	0x080088bd
 8008774:	080088bd 	.word	0x080088bd
 8008778:	080087e5 	.word	0x080087e5
 800877c:	080088bd 	.word	0x080088bd
 8008780:	080088bd 	.word	0x080088bd
 8008784:	080088bd 	.word	0x080088bd
 8008788:	0800882d 	.word	0x0800882d
 800878c:	080088bd 	.word	0x080088bd
 8008790:	080088bd 	.word	0x080088bd
 8008794:	080088bd 	.word	0x080088bd
 8008798:	08008875 	.word	0x08008875
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	4a66      	ldr	r2, [pc, #408]	; (800893c <HAL_TIM_IC_Start_DMA+0x318>)
 80087a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	4a65      	ldr	r2, [pc, #404]	; (8008940 <HAL_TIM_IC_Start_DMA+0x31c>)
 80087aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	4a64      	ldr	r2, [pc, #400]	; (8008944 <HAL_TIM_IC_Start_DMA+0x320>)
 80087b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3334      	adds	r3, #52	; 0x34
 80087be:	4619      	mov	r1, r3
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	887b      	ldrh	r3, [r7, #2]
 80087c4:	f7f9 fda0 	bl	8002308 <HAL_DMA_Start_IT>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e0b0      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087e0:	60da      	str	r2, [r3, #12]
      break;
 80087e2:	e06e      	b.n	80088c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	4a54      	ldr	r2, [pc, #336]	; (800893c <HAL_TIM_IC_Start_DMA+0x318>)
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	4a53      	ldr	r2, [pc, #332]	; (8008940 <HAL_TIM_IC_Start_DMA+0x31c>)
 80087f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f8:	4a52      	ldr	r2, [pc, #328]	; (8008944 <HAL_TIM_IC_Start_DMA+0x320>)
 80087fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3338      	adds	r3, #56	; 0x38
 8008806:	4619      	mov	r1, r3
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	887b      	ldrh	r3, [r7, #2]
 800880c:	f7f9 fd7c 	bl	8002308 <HAL_DMA_Start_IT>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e08c      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008828:	60da      	str	r2, [r3, #12]
      break;
 800882a:	e04a      	b.n	80088c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4a42      	ldr	r2, [pc, #264]	; (800893c <HAL_TIM_IC_Start_DMA+0x318>)
 8008832:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	4a41      	ldr	r2, [pc, #260]	; (8008940 <HAL_TIM_IC_Start_DMA+0x31c>)
 800883a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a40      	ldr	r2, [pc, #256]	; (8008944 <HAL_TIM_IC_Start_DMA+0x320>)
 8008842:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	333c      	adds	r3, #60	; 0x3c
 800884e:	4619      	mov	r1, r3
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	f7f9 fd58 	bl	8002308 <HAL_DMA_Start_IT>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e068      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68da      	ldr	r2, [r3, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008870:	60da      	str	r2, [r3, #12]
      break;
 8008872:	e026      	b.n	80088c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	4a30      	ldr	r2, [pc, #192]	; (800893c <HAL_TIM_IC_Start_DMA+0x318>)
 800887a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	4a2f      	ldr	r2, [pc, #188]	; (8008940 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	4a2e      	ldr	r2, [pc, #184]	; (8008944 <HAL_TIM_IC_Start_DMA+0x320>)
 800888a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3340      	adds	r3, #64	; 0x40
 8008896:	4619      	mov	r1, r3
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	887b      	ldrh	r3, [r7, #2]
 800889c:	f7f9 fd34 	bl	8002308 <HAL_DMA_Start_IT>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e044      	b.n	8008934 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68da      	ldr	r2, [r3, #12]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088b8:	60da      	str	r2, [r3, #12]
      break;
 80088ba:	e002      	b.n	80088c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
      break;
 80088c0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a20      	ldr	r2, [pc, #128]	; (8008948 <HAL_TIM_IC_Start_DMA+0x324>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d018      	beq.n	80088fe <HAL_TIM_IC_Start_DMA+0x2da>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d4:	d013      	beq.n	80088fe <HAL_TIM_IC_Start_DMA+0x2da>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a1c      	ldr	r2, [pc, #112]	; (800894c <HAL_TIM_IC_Start_DMA+0x328>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00e      	beq.n	80088fe <HAL_TIM_IC_Start_DMA+0x2da>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1a      	ldr	r2, [pc, #104]	; (8008950 <HAL_TIM_IC_Start_DMA+0x32c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d009      	beq.n	80088fe <HAL_TIM_IC_Start_DMA+0x2da>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a19      	ldr	r2, [pc, #100]	; (8008954 <HAL_TIM_IC_Start_DMA+0x330>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d004      	beq.n	80088fe <HAL_TIM_IC_Start_DMA+0x2da>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a17      	ldr	r2, [pc, #92]	; (8008958 <HAL_TIM_IC_Start_DMA+0x334>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d111      	bne.n	8008922 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b06      	cmp	r3, #6
 800890e:	d010      	beq.n	8008932 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f042 0201 	orr.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008920:	e007      	b.n	8008932 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f042 0201 	orr.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	08009355 	.word	0x08009355
 8008940:	0800941d 	.word	0x0800941d
 8008944:	080091b3 	.word	0x080091b3
 8008948:	40010000 	.word	0x40010000
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40014000 	.word	0x40014000

0800895c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2200      	movs	r2, #0
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f001 f94a 	bl	8009c0c <TIM_CCxChannelCmd>

  switch (Channel)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b0c      	cmp	r3, #12
 800897c:	d854      	bhi.n	8008a28 <HAL_TIM_IC_Stop_DMA+0xcc>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_TIM_IC_Stop_DMA+0x28>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089b9 	.word	0x080089b9
 8008988:	08008a29 	.word	0x08008a29
 800898c:	08008a29 	.word	0x08008a29
 8008990:	08008a29 	.word	0x08008a29
 8008994:	080089d5 	.word	0x080089d5
 8008998:	08008a29 	.word	0x08008a29
 800899c:	08008a29 	.word	0x08008a29
 80089a0:	08008a29 	.word	0x08008a29
 80089a4:	080089f1 	.word	0x080089f1
 80089a8:	08008a29 	.word	0x08008a29
 80089ac:	08008a29 	.word	0x08008a29
 80089b0:	08008a29 	.word	0x08008a29
 80089b4:	08008a0d 	.word	0x08008a0d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80089c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f9 fd63 	bl	8002498 <HAL_DMA_Abort_IT>
      break;
 80089d2:	e02c      	b.n	8008a2e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f9 fd55 	bl	8002498 <HAL_DMA_Abort_IT>
      break;
 80089ee:	e01e      	b.n	8008a2e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f9 fd47 	bl	8002498 <HAL_DMA_Abort_IT>
      break;
 8008a0a:	e010      	b.n	8008a2e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f9 fd39 	bl	8002498 <HAL_DMA_Abort_IT>
      break;
 8008a26:	e002      	b.n	8008a2e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d14f      	bne.n	8008ad4 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a1a      	ldr	r2, [r3, #32]
 8008a3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10f      	bne.n	8008a64 <HAL_TIM_IC_Stop_DMA+0x108>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6a1a      	ldr	r2, [r3, #32]
 8008a4a:	f240 4344 	movw	r3, #1092	; 0x444
 8008a4e:	4013      	ands	r3, r2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d107      	bne.n	8008a64 <HAL_TIM_IC_Stop_DMA+0x108>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <HAL_TIM_IC_Stop_DMA+0x118>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a72:	e013      	b.n	8008a9c <HAL_TIM_IC_Stop_DMA+0x140>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d104      	bne.n	8008a84 <HAL_TIM_IC_Stop_DMA+0x128>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a82:	e00b      	b.n	8008a9c <HAL_TIM_IC_Stop_DMA+0x140>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d104      	bne.n	8008a94 <HAL_TIM_IC_Stop_DMA+0x138>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a92:	e003      	b.n	8008a9c <HAL_TIM_IC_Stop_DMA+0x140>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d104      	bne.n	8008aac <HAL_TIM_IC_Stop_DMA+0x150>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aaa:	e013      	b.n	8008ad4 <HAL_TIM_IC_Stop_DMA+0x178>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d104      	bne.n	8008abc <HAL_TIM_IC_Stop_DMA+0x160>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008aba:	e00b      	b.n	8008ad4 <HAL_TIM_IC_Stop_DMA+0x178>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d104      	bne.n	8008acc <HAL_TIM_IC_Stop_DMA+0x170>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aca:	e003      	b.n	8008ad4 <HAL_TIM_IC_Stop_DMA+0x178>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop

08008ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0302 	and.w	r3, r3, #2
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d122      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d11b      	bne.n	8008b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0202 	mvn.w	r2, #2
 8008b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fb13 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fb05 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f008 ffc5 	bl	8011ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d122      	bne.n	8008b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d11b      	bne.n	8008b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0204 	mvn.w	r2, #4
 8008b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fae9 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008b7c:	e005      	b.n	8008b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fadb 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f008 ff9b 	bl	8011ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d122      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d11b      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0208 	mvn.w	r2, #8
 8008bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2204      	movs	r2, #4
 8008bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fabf 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008bd0:	e005      	b.n	8008bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fab1 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f008 ff71 	bl	8011ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d122      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d11b      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0210 	mvn.w	r2, #16
 8008c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa95 	bl	800914e <HAL_TIM_IC_CaptureCallback>
 8008c24:	e005      	b.n	8008c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa87 	bl	800913a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f008 ff47 	bl	8011ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d10e      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d107      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0201 	mvn.w	r2, #1
 8008c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7f7 ff7e 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b80      	cmp	r3, #128	; 0x80
 8008c70:	d10e      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7c:	2b80      	cmp	r3, #128	; 0x80
 8008c7e:	d107      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f8ae 	bl	8009dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b40      	cmp	r3, #64	; 0x40
 8008c9c:	d10e      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca8:	2b40      	cmp	r3, #64	; 0x40
 8008caa:	d107      	bne.n	8008cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa67 	bl	800918a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d10e      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d107      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f06f 0220 	mvn.w	r2, #32
 8008ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 f878 	bl	8009dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e088      	b.n	8008e20 <HAL_TIM_IC_ConfigChannel+0x130>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d11b      	bne.n	8008d54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f000 fdb6 	bl	800989c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 020c 	bic.w	r2, r2, #12
 8008d3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6999      	ldr	r1, [r3, #24]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	619a      	str	r2, [r3, #24]
 8008d52:	e060      	b.n	8008e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d11c      	bne.n	8008d94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f000 fe2e 	bl	80099ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008d7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6999      	ldr	r1, [r3, #24]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	021a      	lsls	r2, r3, #8
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	619a      	str	r2, [r3, #24]
 8008d92:	e040      	b.n	8008e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d11b      	bne.n	8008dd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f000 fe7b 	bl	8009aa4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69da      	ldr	r2, [r3, #28]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 020c 	bic.w	r2, r2, #12
 8008dbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69d9      	ldr	r1, [r3, #28]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	61da      	str	r2, [r3, #28]
 8008dd0:	e021      	b.n	8008e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b0c      	cmp	r3, #12
 8008dd6:	d11c      	bne.n	8008e12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6819      	ldr	r1, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f000 fe98 	bl	8009b1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69da      	ldr	r2, [r3, #28]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008dfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69d9      	ldr	r1, [r3, #28]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	021a      	lsls	r2, r3, #8
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	61da      	str	r2, [r3, #28]
 8008e10:	e001      	b.n	8008e16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e0ae      	b.n	8008fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	f200 809f 	bhi.w	8008f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e56:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e91 	.word	0x08008e91
 8008e60:	08008f95 	.word	0x08008f95
 8008e64:	08008f95 	.word	0x08008f95
 8008e68:	08008f95 	.word	0x08008f95
 8008e6c:	08008ed1 	.word	0x08008ed1
 8008e70:	08008f95 	.word	0x08008f95
 8008e74:	08008f95 	.word	0x08008f95
 8008e78:	08008f95 	.word	0x08008f95
 8008e7c:	08008f13 	.word	0x08008f13
 8008e80:	08008f95 	.word	0x08008f95
 8008e84:	08008f95 	.word	0x08008f95
 8008e88:	08008f95 	.word	0x08008f95
 8008e8c:	08008f53 	.word	0x08008f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fb74 	bl	8009584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0208 	orr.w	r2, r2, #8
 8008eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0204 	bic.w	r2, r2, #4
 8008eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6999      	ldr	r1, [r3, #24]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	619a      	str	r2, [r3, #24]
      break;
 8008ece:	e064      	b.n	8008f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fbba 	bl	8009650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6999      	ldr	r1, [r3, #24]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	021a      	lsls	r2, r3, #8
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	619a      	str	r2, [r3, #24]
      break;
 8008f10:	e043      	b.n	8008f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 fc05 	bl	8009728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69da      	ldr	r2, [r3, #28]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0208 	orr.w	r2, r2, #8
 8008f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69da      	ldr	r2, [r3, #28]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0204 	bic.w	r2, r2, #4
 8008f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69d9      	ldr	r1, [r3, #28]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	61da      	str	r2, [r3, #28]
      break;
 8008f50:	e023      	b.n	8008f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fc4f 	bl	80097fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69d9      	ldr	r1, [r3, #28]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	021a      	lsls	r2, r3, #8
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	61da      	str	r2, [r3, #28]
      break;
 8008f92:	e002      	b.n	8008f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
      break;
 8008f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e0b4      	b.n	8009132 <HAL_TIM_ConfigClockSource+0x186>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009000:	d03e      	beq.n	8009080 <HAL_TIM_ConfigClockSource+0xd4>
 8009002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009006:	f200 8087 	bhi.w	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900e:	f000 8086 	beq.w	800911e <HAL_TIM_ConfigClockSource+0x172>
 8009012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009016:	d87f      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b70      	cmp	r3, #112	; 0x70
 800901a:	d01a      	beq.n	8009052 <HAL_TIM_ConfigClockSource+0xa6>
 800901c:	2b70      	cmp	r3, #112	; 0x70
 800901e:	d87b      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b60      	cmp	r3, #96	; 0x60
 8009022:	d050      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009024:	2b60      	cmp	r3, #96	; 0x60
 8009026:	d877      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b50      	cmp	r3, #80	; 0x50
 800902a:	d03c      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0xfa>
 800902c:	2b50      	cmp	r3, #80	; 0x50
 800902e:	d873      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	d058      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	d86f      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009038:	2b30      	cmp	r3, #48	; 0x30
 800903a:	d064      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0x15a>
 800903c:	2b30      	cmp	r3, #48	; 0x30
 800903e:	d86b      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009040:	2b20      	cmp	r3, #32
 8009042:	d060      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0x15a>
 8009044:	2b20      	cmp	r3, #32
 8009046:	d867      	bhi.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
 8009048:	2b00      	cmp	r3, #0
 800904a:	d05c      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0x15a>
 800904c:	2b10      	cmp	r3, #16
 800904e:	d05a      	beq.n	8009106 <HAL_TIM_ConfigClockSource+0x15a>
 8009050:	e062      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	6899      	ldr	r1, [r3, #8]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	f000 fdb3 	bl	8009bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	609a      	str	r2, [r3, #8]
      break;
 800907e:	e04f      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	6899      	ldr	r1, [r3, #8]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f000 fd9c 	bl	8009bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a2:	609a      	str	r2, [r3, #8]
      break;
 80090a4:	e03c      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f000 fc5a 	bl	800996c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2150      	movs	r1, #80	; 0x50
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd69 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 80090c4:	e02c      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f000 fcb6 	bl	8009a44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2160      	movs	r1, #96	; 0x60
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fd59 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 80090e4:	e01c      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6818      	ldr	r0, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	6859      	ldr	r1, [r3, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f000 fc3a 	bl	800996c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2140      	movs	r1, #64	; 0x40
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fd49 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 8009104:	e00c      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f000 fd40 	bl	8009b96 <TIM_ITRx_SetConfig>
      break;
 8009116:	e003      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
      break;
 800911c:	e000      	b.n	8009120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800911e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009130:	7bfb      	ldrb	r3, [r7, #15]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d107      	bne.n	80091da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091d8:	e02a      	b.n	8009230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d107      	bne.n	80091f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2202      	movs	r2, #2
 80091e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091f2:	e01d      	b.n	8009230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d107      	bne.n	800920e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2204      	movs	r2, #4
 8009202:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800920c:	e010      	b.n	8009230 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d107      	bne.n	8009228 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2208      	movs	r2, #8
 800921c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009226:	e003      	b.n	8009230 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff ffb4 	bl	800919e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	771a      	strb	r2, [r3, #28]
}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d10b      	bne.n	8009274 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d136      	bne.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009272:	e031      	b.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d10b      	bne.n	8009296 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2202      	movs	r2, #2
 8009282:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d125      	bne.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009294:	e020      	b.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d10b      	bne.n	80092b8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2204      	movs	r2, #4
 80092a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d114      	bne.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092b6:	e00f      	b.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d10a      	bne.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2208      	movs	r2, #8
 80092c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f008 fbf1 	bl	8011ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	771a      	strb	r2, [r3, #28]
}
 80092e4:	bf00      	nop
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d103      	bne.n	800930c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2201      	movs	r2, #1
 8009308:	771a      	strb	r2, [r3, #28]
 800930a:	e019      	b.n	8009340 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	d103      	bne.n	800931e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2202      	movs	r2, #2
 800931a:	771a      	strb	r2, [r3, #28]
 800931c:	e010      	b.n	8009340 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d103      	bne.n	8009330 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2204      	movs	r2, #4
 800932c:	771a      	strb	r2, [r3, #28]
 800932e:	e007      	b.n	8009340 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	429a      	cmp	r2, r3
 8009338:	d102      	bne.n	8009340 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2208      	movs	r2, #8
 800933e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f7ff ff18 	bl	8009176 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	771a      	strb	r2, [r3, #28]
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d10f      	bne.n	800938c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d146      	bne.n	8009408 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800938a:	e03d      	b.n	8009408 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	429a      	cmp	r2, r3
 8009394:	d10f      	bne.n	80093b6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2202      	movs	r2, #2
 800939a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d131      	bne.n	8009408 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093b4:	e028      	b.n	8009408 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d10f      	bne.n	80093e0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2204      	movs	r2, #4
 80093c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d11c      	bne.n	8009408 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093de:	e013      	b.n	8009408 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d10e      	bne.n	8009408 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2208      	movs	r2, #8
 80093ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d107      	bne.n	8009408 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff fea0 	bl	800914e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	429a      	cmp	r2, r3
 8009432:	d103      	bne.n	800943c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	771a      	strb	r2, [r3, #28]
 800943a:	e019      	b.n	8009470 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d103      	bne.n	800944e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2202      	movs	r2, #2
 800944a:	771a      	strb	r2, [r3, #28]
 800944c:	e010      	b.n	8009470 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d103      	bne.n	8009460 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2204      	movs	r2, #4
 800945c:	771a      	strb	r2, [r3, #28]
 800945e:	e007      	b.n	8009470 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d102      	bne.n	8009470 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2208      	movs	r2, #8
 800946e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f7ff fe76 	bl	8009162 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a34      	ldr	r2, [pc, #208]	; (8009568 <TIM_Base_SetConfig+0xe4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00f      	beq.n	80094bc <TIM_Base_SetConfig+0x38>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d00b      	beq.n	80094bc <TIM_Base_SetConfig+0x38>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a31      	ldr	r2, [pc, #196]	; (800956c <TIM_Base_SetConfig+0xe8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d007      	beq.n	80094bc <TIM_Base_SetConfig+0x38>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a30      	ldr	r2, [pc, #192]	; (8009570 <TIM_Base_SetConfig+0xec>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d003      	beq.n	80094bc <TIM_Base_SetConfig+0x38>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a2f      	ldr	r2, [pc, #188]	; (8009574 <TIM_Base_SetConfig+0xf0>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d108      	bne.n	80094ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a25      	ldr	r2, [pc, #148]	; (8009568 <TIM_Base_SetConfig+0xe4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d01b      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094dc:	d017      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a22      	ldr	r2, [pc, #136]	; (800956c <TIM_Base_SetConfig+0xe8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d013      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a21      	ldr	r2, [pc, #132]	; (8009570 <TIM_Base_SetConfig+0xec>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00f      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a20      	ldr	r2, [pc, #128]	; (8009574 <TIM_Base_SetConfig+0xf0>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00b      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <TIM_Base_SetConfig+0xf4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d007      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a1e      	ldr	r2, [pc, #120]	; (800957c <TIM_Base_SetConfig+0xf8>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d003      	beq.n	800950e <TIM_Base_SetConfig+0x8a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a1d      	ldr	r2, [pc, #116]	; (8009580 <TIM_Base_SetConfig+0xfc>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d108      	bne.n	8009520 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	689a      	ldr	r2, [r3, #8]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a08      	ldr	r2, [pc, #32]	; (8009568 <TIM_Base_SetConfig+0xe4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d103      	bne.n	8009554 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	615a      	str	r2, [r3, #20]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40010000 	.word	0x40010000
 800956c:	40000400 	.word	0x40000400
 8009570:	40000800 	.word	0x40000800
 8009574:	40000c00 	.word	0x40000c00
 8009578:	40014000 	.word	0x40014000
 800957c:	40014400 	.word	0x40014400
 8009580:	40014800 	.word	0x40014800

08009584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	f023 0201 	bic.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0303 	bic.w	r3, r3, #3
 80095ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f023 0302 	bic.w	r3, r3, #2
 80095cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a1c      	ldr	r2, [pc, #112]	; (800964c <TIM_OC1_SetConfig+0xc8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d10c      	bne.n	80095fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f023 0308 	bic.w	r3, r3, #8
 80095e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f023 0304 	bic.w	r3, r3, #4
 80095f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a13      	ldr	r2, [pc, #76]	; (800964c <TIM_OC1_SetConfig+0xc8>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d111      	bne.n	8009626 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	621a      	str	r2, [r3, #32]
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	40010000 	.word	0x40010000

08009650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f023 0210 	bic.w	r2, r3, #16
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	021b      	lsls	r3, r3, #8
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f023 0320 	bic.w	r3, r3, #32
 800969a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1e      	ldr	r2, [pc, #120]	; (8009724 <TIM_OC2_SetConfig+0xd4>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10d      	bne.n	80096cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a15      	ldr	r2, [pc, #84]	; (8009724 <TIM_OC2_SetConfig+0xd4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d113      	bne.n	80096fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	621a      	str	r2, [r3, #32]
}
 8009716:	bf00      	nop
 8009718:	371c      	adds	r7, #28
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	40010000 	.word	0x40010000

08009728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a1d      	ldr	r2, [pc, #116]	; (80097f8 <TIM_OC3_SetConfig+0xd0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d10d      	bne.n	80097a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800978c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	021b      	lsls	r3, r3, #8
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <TIM_OC3_SetConfig+0xd0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d113      	bne.n	80097d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	621a      	str	r2, [r3, #32]
}
 80097ec:	bf00      	nop
 80097ee:	371c      	adds	r7, #28
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	40010000 	.word	0x40010000

080097fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	031b      	lsls	r3, r3, #12
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a10      	ldr	r2, [pc, #64]	; (8009898 <TIM_OC4_SetConfig+0x9c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d109      	bne.n	8009870 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	019b      	lsls	r3, r3, #6
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	40010000 	.word	0x40010000

0800989c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f023 0201 	bic.w	r2, r3, #1
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4a24      	ldr	r2, [pc, #144]	; (8009958 <TIM_TI1_SetConfig+0xbc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_TI1_SetConfig+0x56>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d0:	d00f      	beq.n	80098f2 <TIM_TI1_SetConfig+0x56>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4a21      	ldr	r2, [pc, #132]	; (800995c <TIM_TI1_SetConfig+0xc0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_TI1_SetConfig+0x56>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4a20      	ldr	r2, [pc, #128]	; (8009960 <TIM_TI1_SetConfig+0xc4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_TI1_SetConfig+0x56>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <TIM_TI1_SetConfig+0xc8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_TI1_SetConfig+0x56>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a1e      	ldr	r2, [pc, #120]	; (8009968 <TIM_TI1_SetConfig+0xcc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d101      	bne.n	80098f6 <TIM_TI1_SetConfig+0x5a>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <TIM_TI1_SetConfig+0x5c>
 80098f6:	2300      	movs	r3, #0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d008      	beq.n	800990e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4313      	orrs	r3, r2
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	e003      	b.n	8009916 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f043 0301 	orr.w	r3, r3, #1
 8009914:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800991c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	b2db      	uxtb	r3, r3
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f023 030a 	bic.w	r3, r3, #10
 8009930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f003 030a 	and.w	r3, r3, #10
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	4313      	orrs	r3, r2
 800993c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	621a      	str	r2, [r3, #32]
}
 800994a:	bf00      	nop
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	40010000 	.word	0x40010000
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00
 8009968:	40014000 	.word	0x40014000

0800996c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0201 	bic.w	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 030a 	bic.w	r3, r3, #10
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
 80099d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	f023 0210 	bic.w	r2, r3, #16
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	031b      	lsls	r3, r3, #12
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	011b      	lsls	r3, r3, #4
 8009a22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a26:	693a      	ldr	r2, [r7, #16]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	621a      	str	r2, [r3, #32]
}
 8009a38:	bf00      	nop
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	f023 0210 	bic.w	r2, r3, #16
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	031b      	lsls	r3, r3, #12
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	621a      	str	r2, [r3, #32]
}
 8009a98:	bf00      	nop
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f023 0303 	bic.w	r3, r3, #3
 8009ad0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009af4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	021b      	lsls	r3, r3, #8
 8009afa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	621a      	str	r2, [r3, #32]
}
 8009b10:	bf00      	nop
 8009b12:	371c      	adds	r7, #28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	031b      	lsls	r3, r3, #12
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	031b      	lsls	r3, r3, #12
 8009b74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f043 0307 	orr.w	r3, r3, #7
 8009bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	609a      	str	r2, [r3, #8]
}
 8009bc0:	bf00      	nop
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	021a      	lsls	r2, r3, #8
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	371c      	adds	r7, #28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	2201      	movs	r2, #1
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	401a      	ands	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 031f 	and.w	r3, r3, #31
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	fa01 f303 	lsl.w	r3, r1, r3
 8009c44:	431a      	orrs	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e050      	b.n	8009d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d018      	beq.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cbc:	d013      	beq.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d00e      	beq.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a16      	ldr	r2, [pc, #88]	; (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d009      	beq.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a15      	ldr	r2, [pc, #84]	; (8009d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d004      	beq.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d10c      	bne.n	8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	40010000 	.word	0x40010000
 8009d24:	40000400 	.word	0x40000400
 8009d28:	40000800 	.word	0x40000800
 8009d2c:	40000c00 	.word	0x40000c00
 8009d30:	40014000 	.word	0x40014000

08009d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e03d      	b.n	8009dcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e03f      	b.n	8009e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7f7 ff6a 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2224      	movs	r2, #36	; 0x24
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 ff91 	bl	800ad6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68da      	ldr	r2, [r3, #12]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b08a      	sub	sp, #40	; 0x28
 8009e9e:	af02      	add	r7, sp, #8
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	603b      	str	r3, [r7, #0]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d17c      	bne.n	8009fb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <HAL_UART_Transmit+0x2c>
 8009ec0:	88fb      	ldrh	r3, [r7, #6]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e075      	b.n	8009fb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_UART_Transmit+0x3e>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e06e      	b.n	8009fb6 <HAL_UART_Transmit+0x11c>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2221      	movs	r2, #33	; 0x21
 8009eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009eee:	f7f8 f82f 	bl	8001f50 <HAL_GetTick>
 8009ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	88fa      	ldrh	r2, [r7, #6]
 8009efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f08:	d108      	bne.n	8009f1c <HAL_UART_Transmit+0x82>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	61bb      	str	r3, [r7, #24]
 8009f1a:	e003      	b.n	8009f24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f2c:	e02a      	b.n	8009f84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2180      	movs	r1, #128	; 0x80
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 fc49 	bl	800a7d0 <UART_WaitOnFlagUntilTimeout>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e036      	b.n	8009fb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10b      	bne.n	8009f66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	3302      	adds	r3, #2
 8009f62:	61bb      	str	r3, [r7, #24]
 8009f64:	e007      	b.n	8009f76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	781a      	ldrb	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	3301      	adds	r3, #1
 8009f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1cf      	bne.n	8009f2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2200      	movs	r2, #0
 8009f96:	2140      	movs	r1, #64	; 0x40
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fc19 	bl	800a7d0 <UART_WaitOnFlagUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e006      	b.n	8009fb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e000      	b.n	8009fb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009fb4:	2302      	movs	r3, #2
  }
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3720      	adds	r7, #32
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b08c      	sub	sp, #48	; 0x30
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d152      	bne.n	800a07e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d002      	beq.n	8009fe4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e04b      	b.n	800a080 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d101      	bne.n	8009ff6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e044      	b.n	800a080 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	461a      	mov	r2, r3
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fc4e 	bl	800a8ac <UART_Start_Receive_DMA>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a016:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d12c      	bne.n	800a078 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a022:	2b01      	cmp	r3, #1
 800a024:	d125      	bne.n	800a072 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	330c      	adds	r3, #12
 800a042:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	617b      	str	r3, [r7, #20]
   return(result);
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f043 0310 	orr.w	r3, r3, #16
 800a052:	62bb      	str	r3, [r7, #40]	; 0x28
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	330c      	adds	r3, #12
 800a05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a05c:	627a      	str	r2, [r7, #36]	; 0x24
 800a05e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6a39      	ldr	r1, [r7, #32]
 800a062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	61fb      	str	r3, [r7, #28]
   return(result);
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e5      	bne.n	800a03c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a070:	e002      	b.n	800a078 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a07c:	e000      	b.n	800a080 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a07e:	2302      	movs	r3, #2
  }
}
 800a080:	4618      	mov	r0, r3
 800a082:	3730      	adds	r7, #48	; 0x30
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b0ba      	sub	sp, #232	; 0xe8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0be:	f003 030f 	and.w	r3, r3, #15
 800a0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10f      	bne.n	800a0ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <HAL_UART_IRQHandler+0x66>
 800a0da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fd85 	bl	800abf6 <UART_Receive_IT>
      return;
 800a0ec:	e256      	b.n	800a59c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a0ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80de 	beq.w	800a2b4 <HAL_UART_IRQHandler+0x22c>
 800a0f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a108:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80d1 	beq.w	800a2b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <HAL_UART_IRQHandler+0xae>
 800a11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a126:	2b00      	cmp	r3, #0
 800a128:	d005      	beq.n	800a136 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	f043 0201 	orr.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a13a:	f003 0304 	and.w	r3, r3, #4
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00b      	beq.n	800a15a <HAL_UART_IRQHandler+0xd2>
 800a142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a146:	f003 0301 	and.w	r3, r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d005      	beq.n	800a15a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a152:	f043 0202 	orr.w	r2, r3, #2
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <HAL_UART_IRQHandler+0xf6>
 800a166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	f043 0204 	orr.w	r2, r3, #4
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a182:	f003 0308 	and.w	r3, r3, #8
 800a186:	2b00      	cmp	r3, #0
 800a188:	d011      	beq.n	800a1ae <HAL_UART_IRQHandler+0x126>
 800a18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d105      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	f043 0208 	orr.w	r2, r3, #8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 81ed 	beq.w	800a592 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x14e>
 800a1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c8:	f003 0320 	and.w	r3, r3, #32
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fd10 	bl	800abf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1e0:	2b40      	cmp	r3, #64	; 0x40
 800a1e2:	bf0c      	ite	eq
 800a1e4:	2301      	moveq	r3, #1
 800a1e6:	2300      	movne	r3, #0
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d103      	bne.n	800a202 <HAL_UART_IRQHandler+0x17a>
 800a1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d04f      	beq.n	800a2a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fc18 	bl	800aa38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a212:	2b40      	cmp	r3, #64	; 0x40
 800a214:	d141      	bne.n	800a29a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3314      	adds	r3, #20
 800a21c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a220:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a22c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3314      	adds	r3, #20
 800a23e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a242:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a24e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a25a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1d9      	bne.n	800a216 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	d013      	beq.n	800a292 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	4a7d      	ldr	r2, [pc, #500]	; (800a464 <HAL_UART_IRQHandler+0x3dc>)
 800a270:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	4618      	mov	r0, r3
 800a278:	f7f8 f90e 	bl	8002498 <HAL_DMA_Abort_IT>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d016      	beq.n	800a2b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	e00e      	b.n	800a2b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f008 fb92 	bl	80129bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a298:	e00a      	b.n	800a2b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f008 fb8e 	bl	80129bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a0:	e006      	b.n	800a2b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f008 fb8a 	bl	80129bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2ae:	e170      	b.n	800a592 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b0:	bf00      	nop
    return;
 800a2b2:	e16e      	b.n	800a592 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	f040 814a 	bne.w	800a552 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c2:	f003 0310 	and.w	r3, r3, #16
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f000 8143 	beq.w	800a552 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 813c 	beq.w	800a552 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	60bb      	str	r3, [r7, #8]
 800a2ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	f040 80b4 	bne.w	800a468 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a30c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 8140 	beq.w	800a596 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a31a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a31e:	429a      	cmp	r2, r3
 800a320:	f080 8139 	bcs.w	800a596 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a32a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a336:	f000 8088 	beq.w	800a44a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	330c      	adds	r3, #12
 800a340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	330c      	adds	r3, #12
 800a362:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a366:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a36a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a37e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1d9      	bne.n	800a33a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3314      	adds	r3, #20
 800a38c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3314      	adds	r3, #20
 800a3a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e1      	bne.n	800a386 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3314      	adds	r3, #20
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3314      	adds	r3, #20
 800a3e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	330c      	adds	r3, #12
 800a40e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a41a:	f023 0310 	bic.w	r3, r3, #16
 800a41e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	330c      	adds	r3, #12
 800a428:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a42c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a42e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a430:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a434:	e841 2300 	strex	r3, r2, [r1]
 800a438:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e3      	bne.n	800a408 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	4618      	mov	r0, r3
 800a446:	f7f7 ffb7 	bl	80023b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a452:	b29b      	uxth	r3, r3
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	b29b      	uxth	r3, r3
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f008 fa86 	bl	801296c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a460:	e099      	b.n	800a596 <HAL_UART_IRQHandler+0x50e>
 800a462:	bf00      	nop
 800a464:	0800aaff 	.word	0x0800aaff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a470:	b29b      	uxth	r3, r3
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 808b 	beq.w	800a59a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8086 	beq.w	800a59a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	330c      	adds	r3, #12
 800a4ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a4b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e3      	bne.n	800a48e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e3      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2220      	movs	r2, #32
 800a502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0310 	bic.w	r3, r3, #16
 800a522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a530:	61fa      	str	r2, [r7, #28]
 800a532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	69b9      	ldr	r1, [r7, #24]
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	617b      	str	r3, [r7, #20]
   return(result);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e3      	bne.n	800a50c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f008 fa0e 	bl	801296c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a550:	e023      	b.n	800a59a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d009      	beq.n	800a572 <HAL_UART_IRQHandler+0x4ea>
 800a55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fadb 	bl	800ab26 <UART_Transmit_IT>
    return;
 800a570:	e014      	b.n	800a59c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00e      	beq.n	800a59c <HAL_UART_IRQHandler+0x514>
 800a57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	d008      	beq.n	800a59c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb1b 	bl	800abc6 <UART_EndTransmit_IT>
    return;
 800a590:	e004      	b.n	800a59c <HAL_UART_IRQHandler+0x514>
    return;
 800a592:	bf00      	nop
 800a594:	e002      	b.n	800a59c <HAL_UART_IRQHandler+0x514>
      return;
 800a596:	bf00      	nop
 800a598:	e000      	b.n	800a59c <HAL_UART_IRQHandler+0x514>
      return;
 800a59a:	bf00      	nop
  }
}
 800a59c:	37e8      	adds	r7, #232	; 0xe8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop

0800a5a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b09c      	sub	sp, #112	; 0x70
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d172      	bne.n	800a6e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a5fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fe:	2200      	movs	r2, #0
 800a600:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	330c      	adds	r3, #12
 800a608:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a618:	66bb      	str	r3, [r7, #104]	; 0x68
 800a61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	330c      	adds	r3, #12
 800a620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a622:	65ba      	str	r2, [r7, #88]	; 0x58
 800a624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3314      	adds	r3, #20
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	e853 3f00 	ldrex	r3, [r3]
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	f023 0301 	bic.w	r3, r3, #1
 800a64c:	667b      	str	r3, [r7, #100]	; 0x64
 800a64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3314      	adds	r3, #20
 800a654:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a656:	647a      	str	r2, [r7, #68]	; 0x44
 800a658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a65c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a65e:	e841 2300 	strex	r3, r2, [r1]
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e5      	bne.n	800a636 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3314      	adds	r3, #20
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	623b      	str	r3, [r7, #32]
   return(result);
 800a67a:	6a3b      	ldr	r3, [r7, #32]
 800a67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a680:	663b      	str	r3, [r7, #96]	; 0x60
 800a682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3314      	adds	r3, #20
 800a688:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a68a:	633a      	str	r2, [r7, #48]	; 0x30
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d119      	bne.n	800a6e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	330c      	adds	r3, #12
 800a6b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f023 0310 	bic.w	r3, r3, #16
 800a6c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	330c      	adds	r3, #12
 800a6cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6ce:	61fa      	str	r2, [r7, #28]
 800a6d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	69b9      	ldr	r1, [r7, #24]
 800a6d4:	69fa      	ldr	r2, [r7, #28]
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	617b      	str	r3, [r7, #20]
   return(result);
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e5      	bne.n	800a6ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d106      	bne.n	800a6f8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6f2:	f008 f93b 	bl	801296c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6f6:	e002      	b.n	800a6fe <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a6f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6fa:	f7ff ff5d 	bl	800a5b8 <HAL_UART_RxCpltCallback>
}
 800a6fe:	bf00      	nop
 800a700:	3770      	adds	r7, #112	; 0x70
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a712:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d108      	bne.n	800a72e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a720:	085b      	lsrs	r3, r3, #1
 800a722:	b29b      	uxth	r3, r3
 800a724:	4619      	mov	r1, r3
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f008 f920 	bl	801296c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a72c:	e002      	b.n	800a734 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f7ff ff4c 	bl	800a5cc <HAL_UART_RxHalfCpltCallback>
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a744:	2300      	movs	r3, #0
 800a746:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a758:	2b80      	cmp	r3, #128	; 0x80
 800a75a:	bf0c      	ite	eq
 800a75c:	2301      	moveq	r3, #1
 800a75e:	2300      	movne	r3, #0
 800a760:	b2db      	uxtb	r3, r3
 800a762:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b21      	cmp	r3, #33	; 0x21
 800a76e:	d108      	bne.n	800a782 <UART_DMAError+0x46>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2200      	movs	r2, #0
 800a77a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a77c:	68b8      	ldr	r0, [r7, #8]
 800a77e:	f000 f933 	bl	800a9e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78c:	2b40      	cmp	r3, #64	; 0x40
 800a78e:	bf0c      	ite	eq
 800a790:	2301      	moveq	r3, #1
 800a792:	2300      	movne	r3, #0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b22      	cmp	r3, #34	; 0x22
 800a7a2:	d108      	bne.n	800a7b6 <UART_DMAError+0x7a>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d005      	beq.n	800a7b6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a7b0:	68b8      	ldr	r0, [r7, #8]
 800a7b2:	f000 f941 	bl	800aa38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	f043 0210 	orr.w	r2, r3, #16
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7c2:	68b8      	ldr	r0, [r7, #8]
 800a7c4:	f008 f8fa 	bl	80129bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b090      	sub	sp, #64	; 0x40
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e0:	e050      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e8:	d04c      	beq.n	800a884 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d007      	beq.n	800a800 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7f0:	f7f7 fbae 	bl	8001f50 <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d241      	bcs.n	800a884 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	330c      	adds	r3, #12
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	e853 3f00 	ldrex	r3, [r3]
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	330c      	adds	r3, #12
 800a81e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a820:	637a      	str	r2, [r7, #52]	; 0x34
 800a822:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a828:	e841 2300 	strex	r3, r2, [r1]
 800a82c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1e5      	bne.n	800a800 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3314      	adds	r3, #20
 800a83a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	e853 3f00 	ldrex	r3, [r3]
 800a842:	613b      	str	r3, [r7, #16]
   return(result);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f023 0301 	bic.w	r3, r3, #1
 800a84a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3314      	adds	r3, #20
 800a852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a854:	623a      	str	r2, [r7, #32]
 800a856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	69f9      	ldr	r1, [r7, #28]
 800a85a:	6a3a      	ldr	r2, [r7, #32]
 800a85c:	e841 2300 	strex	r3, r2, [r1]
 800a860:	61bb      	str	r3, [r7, #24]
   return(result);
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e5      	bne.n	800a834 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2220      	movs	r2, #32
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e00f      	b.n	800a8a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	4013      	ands	r3, r2
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	429a      	cmp	r2, r3
 800a892:	bf0c      	ite	eq
 800a894:	2301      	moveq	r3, #1
 800a896:	2300      	movne	r3, #0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	461a      	mov	r2, r3
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d09f      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3740      	adds	r7, #64	; 0x40
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b098      	sub	sp, #96	; 0x60
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	88fa      	ldrh	r2, [r7, #6]
 800a8c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2222      	movs	r2, #34	; 0x22
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	4a40      	ldr	r2, [pc, #256]	; (800a9dc <UART_Start_Receive_DMA+0x130>)
 800a8da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e0:	4a3f      	ldr	r2, [pc, #252]	; (800a9e0 <UART_Start_Receive_DMA+0x134>)
 800a8e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	4a3e      	ldr	r2, [pc, #248]	; (800a9e4 <UART_Start_Receive_DMA+0x138>)
 800a8ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a8f4:	f107 0308 	add.w	r3, r7, #8
 800a8f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	88fb      	ldrh	r3, [r7, #6]
 800a90c:	f7f7 fcfc 	bl	8002308 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a910:	2300      	movs	r3, #0
 800a912:	613b      	str	r3, [r7, #16]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	613b      	str	r3, [r7, #16]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d019      	beq.n	800a96a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a94c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a956:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a958:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a95c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e5      	bne.n	800a936 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3314      	adds	r3, #20
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	657b      	str	r3, [r7, #84]	; 0x54
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3314      	adds	r3, #20
 800a988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a98a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a98c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e5      	bne.n	800a96a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3314      	adds	r3, #20
 800a9a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9be:	627a      	str	r2, [r7, #36]	; 0x24
 800a9c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6a39      	ldr	r1, [r7, #32]
 800a9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e5      	bne.n	800a99e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3760      	adds	r7, #96	; 0x60
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	0800a5e1 	.word	0x0800a5e1
 800a9e0:	0800a707 	.word	0x0800a707
 800a9e4:	0800a73d 	.word	0x0800a73d

0800a9e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b089      	sub	sp, #36	; 0x24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	330c      	adds	r3, #12
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	61ba      	str	r2, [r7, #24]
 800aa12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6979      	ldr	r1, [r7, #20]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e5      	bne.n	800a9f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aa2c:	bf00      	nop
 800aa2e:	3724      	adds	r7, #36	; 0x24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b095      	sub	sp, #84	; 0x54
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	330c      	adds	r3, #12
 800aa46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa60:	643a      	str	r2, [r7, #64]	; 0x40
 800aa62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e5      	bne.n	800aa40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3314      	adds	r3, #20
 800aa92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e5      	bne.n	800aa74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d119      	bne.n	800aae4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	330c      	adds	r3, #12
 800aab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f023 0310 	bic.w	r3, r3, #16
 800aac6:	647b      	str	r3, [r7, #68]	; 0x44
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	330c      	adds	r3, #12
 800aace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aad0:	61ba      	str	r2, [r7, #24]
 800aad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	613b      	str	r3, [r7, #16]
   return(result);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e5      	bne.n	800aab0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800aaf2:	bf00      	nop
 800aaf4:	3754      	adds	r7, #84	; 0x54
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f007 ff4f 	bl	80129bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b085      	sub	sp, #20
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b21      	cmp	r3, #33	; 0x21
 800ab38:	d13e      	bne.n	800abb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab42:	d114      	bne.n	800ab6e <UART_Transmit_IT+0x48>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d110      	bne.n	800ab6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a1b      	ldr	r3, [r3, #32]
 800ab50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	881b      	ldrh	r3, [r3, #0]
 800ab56:	461a      	mov	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	1c9a      	adds	r2, r3, #2
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	621a      	str	r2, [r3, #32]
 800ab6c:	e008      	b.n	800ab80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	1c59      	adds	r1, r3, #1
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6211      	str	r1, [r2, #32]
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10f      	bne.n	800abb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aba2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68da      	ldr	r2, [r3, #12]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	e000      	b.n	800abba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abb8:	2302      	movs	r3, #2
  }
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fcdc 	bl	800a5a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b08c      	sub	sp, #48	; 0x30
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b22      	cmp	r3, #34	; 0x22
 800ac08:	f040 80ab 	bne.w	800ad62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac14:	d117      	bne.n	800ac46 <UART_Receive_IT+0x50>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d113      	bne.n	800ac46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	1c9a      	adds	r2, r3, #2
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	629a      	str	r2, [r3, #40]	; 0x28
 800ac44:	e026      	b.n	800ac94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac58:	d007      	beq.n	800ac6a <UART_Receive_IT+0x74>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <UART_Receive_IT+0x82>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e008      	b.n	800ac8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4619      	mov	r1, r3
 800aca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d15a      	bne.n	800ad5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68da      	ldr	r2, [r3, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0220 	bic.w	r2, r2, #32
 800acb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	695a      	ldr	r2, [r3, #20]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0201 	bic.w	r2, r2, #1
 800acd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2220      	movs	r2, #32
 800acdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d135      	bne.n	800ad54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	330c      	adds	r3, #12
 800acf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	e853 3f00 	ldrex	r3, [r3]
 800acfc:	613b      	str	r3, [r7, #16]
   return(result);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f023 0310 	bic.w	r3, r3, #16
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	330c      	adds	r3, #12
 800ad0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0e:	623a      	str	r2, [r7, #32]
 800ad10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad12:	69f9      	ldr	r1, [r7, #28]
 800ad14:	6a3a      	ldr	r2, [r7, #32]
 800ad16:	e841 2300 	strex	r3, r2, [r1]
 800ad1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1e5      	bne.n	800acee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0310 	and.w	r3, r3, #16
 800ad2c:	2b10      	cmp	r3, #16
 800ad2e:	d10a      	bne.n	800ad46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f007 fe0d 	bl	801296c <HAL_UARTEx_RxEventCallback>
 800ad52:	e002      	b.n	800ad5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fc2f 	bl	800a5b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e002      	b.n	800ad64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e000      	b.n	800ad64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad62:	2302      	movs	r3, #2
  }
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3730      	adds	r7, #48	; 0x30
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad70:	b0c0      	sub	sp, #256	; 0x100
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad88:	68d9      	ldr	r1, [r3, #12]
 800ad8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	ea40 0301 	orr.w	r3, r0, r1
 800ad94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	431a      	orrs	r2, r3
 800adac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800adc4:	f021 010c 	bic.w	r1, r1, #12
 800adc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800add2:	430b      	orrs	r3, r1
 800add4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800add6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ade2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade6:	6999      	ldr	r1, [r3, #24]
 800ade8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	ea40 0301 	orr.w	r3, r0, r1
 800adf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b8f      	ldr	r3, [pc, #572]	; (800b038 <UART_SetConfig+0x2cc>)
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d005      	beq.n	800ae0c <UART_SetConfig+0xa0>
 800ae00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	4b8d      	ldr	r3, [pc, #564]	; (800b03c <UART_SetConfig+0x2d0>)
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d104      	bne.n	800ae16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae0c:	f7fb ff00 	bl	8006c10 <HAL_RCC_GetPCLK2Freq>
 800ae10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ae14:	e003      	b.n	800ae1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae16:	f7fb fee7 	bl	8006be8 <HAL_RCC_GetPCLK1Freq>
 800ae1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae28:	f040 810c 	bne.w	800b044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ae3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ae3e:	4622      	mov	r2, r4
 800ae40:	462b      	mov	r3, r5
 800ae42:	1891      	adds	r1, r2, r2
 800ae44:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae46:	415b      	adcs	r3, r3
 800ae48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ae4e:	4621      	mov	r1, r4
 800ae50:	eb12 0801 	adds.w	r8, r2, r1
 800ae54:	4629      	mov	r1, r5
 800ae56:	eb43 0901 	adc.w	r9, r3, r1
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	f04f 0300 	mov.w	r3, #0
 800ae62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae6e:	4690      	mov	r8, r2
 800ae70:	4699      	mov	r9, r3
 800ae72:	4623      	mov	r3, r4
 800ae74:	eb18 0303 	adds.w	r3, r8, r3
 800ae78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	eb49 0303 	adc.w	r3, r9, r3
 800ae82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ae96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	18db      	adds	r3, r3, r3
 800ae9e:	653b      	str	r3, [r7, #80]	; 0x50
 800aea0:	4613      	mov	r3, r2
 800aea2:	eb42 0303 	adc.w	r3, r2, r3
 800aea6:	657b      	str	r3, [r7, #84]	; 0x54
 800aea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aeac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aeb0:	f7f5 f996 	bl	80001e0 <__aeabi_uldivmod>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4b61      	ldr	r3, [pc, #388]	; (800b040 <UART_SetConfig+0x2d4>)
 800aeba:	fba3 2302 	umull	r2, r3, r3, r2
 800aebe:	095b      	lsrs	r3, r3, #5
 800aec0:	011c      	lsls	r4, r3, #4
 800aec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aecc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aed4:	4642      	mov	r2, r8
 800aed6:	464b      	mov	r3, r9
 800aed8:	1891      	adds	r1, r2, r2
 800aeda:	64b9      	str	r1, [r7, #72]	; 0x48
 800aedc:	415b      	adcs	r3, r3
 800aede:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aee4:	4641      	mov	r1, r8
 800aee6:	eb12 0a01 	adds.w	sl, r2, r1
 800aeea:	4649      	mov	r1, r9
 800aeec:	eb43 0b01 	adc.w	fp, r3, r1
 800aef0:	f04f 0200 	mov.w	r2, #0
 800aef4:	f04f 0300 	mov.w	r3, #0
 800aef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aefc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af04:	4692      	mov	sl, r2
 800af06:	469b      	mov	fp, r3
 800af08:	4643      	mov	r3, r8
 800af0a:	eb1a 0303 	adds.w	r3, sl, r3
 800af0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af12:	464b      	mov	r3, r9
 800af14:	eb4b 0303 	adc.w	r3, fp, r3
 800af18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800af2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af30:	460b      	mov	r3, r1
 800af32:	18db      	adds	r3, r3, r3
 800af34:	643b      	str	r3, [r7, #64]	; 0x40
 800af36:	4613      	mov	r3, r2
 800af38:	eb42 0303 	adc.w	r3, r2, r3
 800af3c:	647b      	str	r3, [r7, #68]	; 0x44
 800af3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800af42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800af46:	f7f5 f94b 	bl	80001e0 <__aeabi_uldivmod>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	4b3b      	ldr	r3, [pc, #236]	; (800b040 <UART_SetConfig+0x2d4>)
 800af52:	fba3 2301 	umull	r2, r3, r3, r1
 800af56:	095b      	lsrs	r3, r3, #5
 800af58:	2264      	movs	r2, #100	; 0x64
 800af5a:	fb02 f303 	mul.w	r3, r2, r3
 800af5e:	1acb      	subs	r3, r1, r3
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800af66:	4b36      	ldr	r3, [pc, #216]	; (800b040 <UART_SetConfig+0x2d4>)
 800af68:	fba3 2302 	umull	r2, r3, r3, r2
 800af6c:	095b      	lsrs	r3, r3, #5
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af74:	441c      	add	r4, r3
 800af76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800af84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800af88:	4642      	mov	r2, r8
 800af8a:	464b      	mov	r3, r9
 800af8c:	1891      	adds	r1, r2, r2
 800af8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800af90:	415b      	adcs	r3, r3
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af98:	4641      	mov	r1, r8
 800af9a:	1851      	adds	r1, r2, r1
 800af9c:	6339      	str	r1, [r7, #48]	; 0x30
 800af9e:	4649      	mov	r1, r9
 800afa0:	414b      	adcs	r3, r1
 800afa2:	637b      	str	r3, [r7, #52]	; 0x34
 800afa4:	f04f 0200 	mov.w	r2, #0
 800afa8:	f04f 0300 	mov.w	r3, #0
 800afac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800afb0:	4659      	mov	r1, fp
 800afb2:	00cb      	lsls	r3, r1, #3
 800afb4:	4651      	mov	r1, sl
 800afb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afba:	4651      	mov	r1, sl
 800afbc:	00ca      	lsls	r2, r1, #3
 800afbe:	4610      	mov	r0, r2
 800afc0:	4619      	mov	r1, r3
 800afc2:	4603      	mov	r3, r0
 800afc4:	4642      	mov	r2, r8
 800afc6:	189b      	adds	r3, r3, r2
 800afc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afcc:	464b      	mov	r3, r9
 800afce:	460a      	mov	r2, r1
 800afd0:	eb42 0303 	adc.w	r3, r2, r3
 800afd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800afe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800afe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800afec:	460b      	mov	r3, r1
 800afee:	18db      	adds	r3, r3, r3
 800aff0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aff2:	4613      	mov	r3, r2
 800aff4:	eb42 0303 	adc.w	r3, r2, r3
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800affa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800affe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b002:	f7f5 f8ed 	bl	80001e0 <__aeabi_uldivmod>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	4b0d      	ldr	r3, [pc, #52]	; (800b040 <UART_SetConfig+0x2d4>)
 800b00c:	fba3 1302 	umull	r1, r3, r3, r2
 800b010:	095b      	lsrs	r3, r3, #5
 800b012:	2164      	movs	r1, #100	; 0x64
 800b014:	fb01 f303 	mul.w	r3, r1, r3
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	3332      	adds	r3, #50	; 0x32
 800b01e:	4a08      	ldr	r2, [pc, #32]	; (800b040 <UART_SetConfig+0x2d4>)
 800b020:	fba2 2303 	umull	r2, r3, r2, r3
 800b024:	095b      	lsrs	r3, r3, #5
 800b026:	f003 0207 	and.w	r2, r3, #7
 800b02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4422      	add	r2, r4
 800b032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b034:	e105      	b.n	800b242 <UART_SetConfig+0x4d6>
 800b036:	bf00      	nop
 800b038:	40011000 	.word	0x40011000
 800b03c:	40011400 	.word	0x40011400
 800b040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b04e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b056:	4642      	mov	r2, r8
 800b058:	464b      	mov	r3, r9
 800b05a:	1891      	adds	r1, r2, r2
 800b05c:	6239      	str	r1, [r7, #32]
 800b05e:	415b      	adcs	r3, r3
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
 800b062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b066:	4641      	mov	r1, r8
 800b068:	1854      	adds	r4, r2, r1
 800b06a:	4649      	mov	r1, r9
 800b06c:	eb43 0501 	adc.w	r5, r3, r1
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	f04f 0300 	mov.w	r3, #0
 800b078:	00eb      	lsls	r3, r5, #3
 800b07a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b07e:	00e2      	lsls	r2, r4, #3
 800b080:	4614      	mov	r4, r2
 800b082:	461d      	mov	r5, r3
 800b084:	4643      	mov	r3, r8
 800b086:	18e3      	adds	r3, r4, r3
 800b088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b08c:	464b      	mov	r3, r9
 800b08e:	eb45 0303 	adc.w	r3, r5, r3
 800b092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	008b      	lsls	r3, r1, #2
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0bc:	4621      	mov	r1, r4
 800b0be:	008a      	lsls	r2, r1, #2
 800b0c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b0c4:	f7f5 f88c 	bl	80001e0 <__aeabi_uldivmod>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4b60      	ldr	r3, [pc, #384]	; (800b250 <UART_SetConfig+0x4e4>)
 800b0ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	011c      	lsls	r4, r3, #4
 800b0d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b0e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	1891      	adds	r1, r2, r2
 800b0ee:	61b9      	str	r1, [r7, #24]
 800b0f0:	415b      	adcs	r3, r3
 800b0f2:	61fb      	str	r3, [r7, #28]
 800b0f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	1851      	adds	r1, r2, r1
 800b0fc:	6139      	str	r1, [r7, #16]
 800b0fe:	4649      	mov	r1, r9
 800b100:	414b      	adcs	r3, r1
 800b102:	617b      	str	r3, [r7, #20]
 800b104:	f04f 0200 	mov.w	r2, #0
 800b108:	f04f 0300 	mov.w	r3, #0
 800b10c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b110:	4659      	mov	r1, fp
 800b112:	00cb      	lsls	r3, r1, #3
 800b114:	4651      	mov	r1, sl
 800b116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b11a:	4651      	mov	r1, sl
 800b11c:	00ca      	lsls	r2, r1, #3
 800b11e:	4610      	mov	r0, r2
 800b120:	4619      	mov	r1, r3
 800b122:	4603      	mov	r3, r0
 800b124:	4642      	mov	r2, r8
 800b126:	189b      	adds	r3, r3, r2
 800b128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b12c:	464b      	mov	r3, r9
 800b12e:	460a      	mov	r2, r1
 800b130:	eb42 0303 	adc.w	r3, r2, r3
 800b134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	67bb      	str	r3, [r7, #120]	; 0x78
 800b142:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b150:	4649      	mov	r1, r9
 800b152:	008b      	lsls	r3, r1, #2
 800b154:	4641      	mov	r1, r8
 800b156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b15a:	4641      	mov	r1, r8
 800b15c:	008a      	lsls	r2, r1, #2
 800b15e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b162:	f7f5 f83d 	bl	80001e0 <__aeabi_uldivmod>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4b39      	ldr	r3, [pc, #228]	; (800b250 <UART_SetConfig+0x4e4>)
 800b16c:	fba3 1302 	umull	r1, r3, r3, r2
 800b170:	095b      	lsrs	r3, r3, #5
 800b172:	2164      	movs	r1, #100	; 0x64
 800b174:	fb01 f303 	mul.w	r3, r1, r3
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	3332      	adds	r3, #50	; 0x32
 800b17e:	4a34      	ldr	r2, [pc, #208]	; (800b250 <UART_SetConfig+0x4e4>)
 800b180:	fba2 2303 	umull	r2, r3, r2, r3
 800b184:	095b      	lsrs	r3, r3, #5
 800b186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b18a:	441c      	add	r4, r3
 800b18c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b190:	2200      	movs	r2, #0
 800b192:	673b      	str	r3, [r7, #112]	; 0x70
 800b194:	677a      	str	r2, [r7, #116]	; 0x74
 800b196:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b19a:	4642      	mov	r2, r8
 800b19c:	464b      	mov	r3, r9
 800b19e:	1891      	adds	r1, r2, r2
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	415b      	adcs	r3, r3
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1aa:	4641      	mov	r1, r8
 800b1ac:	1851      	adds	r1, r2, r1
 800b1ae:	6039      	str	r1, [r7, #0]
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	414b      	adcs	r3, r1
 800b1b4:	607b      	str	r3, [r7, #4]
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	00cb      	lsls	r3, r1, #3
 800b1c6:	4651      	mov	r1, sl
 800b1c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1cc:	4651      	mov	r1, sl
 800b1ce:	00ca      	lsls	r2, r1, #3
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	4642      	mov	r2, r8
 800b1d8:	189b      	adds	r3, r3, r2
 800b1da:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1dc:	464b      	mov	r3, r9
 800b1de:	460a      	mov	r2, r1
 800b1e0:	eb42 0303 	adc.w	r3, r2, r3
 800b1e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	663b      	str	r3, [r7, #96]	; 0x60
 800b1f0:	667a      	str	r2, [r7, #100]	; 0x64
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	f04f 0300 	mov.w	r3, #0
 800b1fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b1fe:	4649      	mov	r1, r9
 800b200:	008b      	lsls	r3, r1, #2
 800b202:	4641      	mov	r1, r8
 800b204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b208:	4641      	mov	r1, r8
 800b20a:	008a      	lsls	r2, r1, #2
 800b20c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b210:	f7f4 ffe6 	bl	80001e0 <__aeabi_uldivmod>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4b0d      	ldr	r3, [pc, #52]	; (800b250 <UART_SetConfig+0x4e4>)
 800b21a:	fba3 1302 	umull	r1, r3, r3, r2
 800b21e:	095b      	lsrs	r3, r3, #5
 800b220:	2164      	movs	r1, #100	; 0x64
 800b222:	fb01 f303 	mul.w	r3, r1, r3
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	3332      	adds	r3, #50	; 0x32
 800b22c:	4a08      	ldr	r2, [pc, #32]	; (800b250 <UART_SetConfig+0x4e4>)
 800b22e:	fba2 2303 	umull	r2, r3, r2, r3
 800b232:	095b      	lsrs	r3, r3, #5
 800b234:	f003 020f 	and.w	r2, r3, #15
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4422      	add	r2, r4
 800b240:	609a      	str	r2, [r3, #8]
}
 800b242:	bf00      	nop
 800b244:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b248:	46bd      	mov	sp, r7
 800b24a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b24e:	bf00      	nop
 800b250:	51eb851f 	.word	0x51eb851f

0800b254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b254:	b084      	sub	sp, #16
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	f107 001c 	add.w	r0, r7, #28
 800b262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d122      	bne.n	800b2b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b296:	2b01      	cmp	r3, #1
 800b298:	d105      	bne.n	800b2a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f001 fbee 	bl	800ca88 <USB_CoreReset>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]
 800b2b0:	e01a      	b.n	800b2e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fbe2 	bl	800ca88 <USB_CoreReset>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	639a      	str	r2, [r3, #56]	; 0x38
 800b2da:	e005      	b.n	800b2e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d10b      	bne.n	800b306 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f043 0206 	orr.w	r2, r3, #6
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f043 0220 	orr.w	r2, r3, #32
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b306:	7bfb      	ldrb	r3, [r7, #15]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b312:	b004      	add	sp, #16
 800b314:	4770      	bx	lr
	...

0800b318 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d165      	bne.n	800b3f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	4a41      	ldr	r2, [pc, #260]	; (800b434 <USB_SetTurnaroundTime+0x11c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d906      	bls.n	800b342 <USB_SetTurnaroundTime+0x2a>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4a40      	ldr	r2, [pc, #256]	; (800b438 <USB_SetTurnaroundTime+0x120>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d202      	bcs.n	800b342 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b33c:	230f      	movs	r3, #15
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	e062      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	4a3c      	ldr	r2, [pc, #240]	; (800b438 <USB_SetTurnaroundTime+0x120>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d306      	bcc.n	800b358 <USB_SetTurnaroundTime+0x40>
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	4a3b      	ldr	r2, [pc, #236]	; (800b43c <USB_SetTurnaroundTime+0x124>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d202      	bcs.n	800b358 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b352:	230e      	movs	r3, #14
 800b354:	617b      	str	r3, [r7, #20]
 800b356:	e057      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	4a38      	ldr	r2, [pc, #224]	; (800b43c <USB_SetTurnaroundTime+0x124>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d306      	bcc.n	800b36e <USB_SetTurnaroundTime+0x56>
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	4a37      	ldr	r2, [pc, #220]	; (800b440 <USB_SetTurnaroundTime+0x128>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d202      	bcs.n	800b36e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b368:	230d      	movs	r3, #13
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	e04c      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	4a33      	ldr	r2, [pc, #204]	; (800b440 <USB_SetTurnaroundTime+0x128>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d306      	bcc.n	800b384 <USB_SetTurnaroundTime+0x6c>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	4a32      	ldr	r2, [pc, #200]	; (800b444 <USB_SetTurnaroundTime+0x12c>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d802      	bhi.n	800b384 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b37e:	230c      	movs	r3, #12
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e041      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	4a2f      	ldr	r2, [pc, #188]	; (800b444 <USB_SetTurnaroundTime+0x12c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d906      	bls.n	800b39a <USB_SetTurnaroundTime+0x82>
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	4a2e      	ldr	r2, [pc, #184]	; (800b448 <USB_SetTurnaroundTime+0x130>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d802      	bhi.n	800b39a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b394:	230b      	movs	r3, #11
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e036      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	4a2a      	ldr	r2, [pc, #168]	; (800b448 <USB_SetTurnaroundTime+0x130>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d906      	bls.n	800b3b0 <USB_SetTurnaroundTime+0x98>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	4a29      	ldr	r2, [pc, #164]	; (800b44c <USB_SetTurnaroundTime+0x134>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d802      	bhi.n	800b3b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b3aa:	230a      	movs	r3, #10
 800b3ac:	617b      	str	r3, [r7, #20]
 800b3ae:	e02b      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4a26      	ldr	r2, [pc, #152]	; (800b44c <USB_SetTurnaroundTime+0x134>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d906      	bls.n	800b3c6 <USB_SetTurnaroundTime+0xae>
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	4a25      	ldr	r2, [pc, #148]	; (800b450 <USB_SetTurnaroundTime+0x138>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d202      	bcs.n	800b3c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b3c0:	2309      	movs	r3, #9
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	e020      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	4a21      	ldr	r2, [pc, #132]	; (800b450 <USB_SetTurnaroundTime+0x138>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d306      	bcc.n	800b3dc <USB_SetTurnaroundTime+0xc4>
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	4a20      	ldr	r2, [pc, #128]	; (800b454 <USB_SetTurnaroundTime+0x13c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d802      	bhi.n	800b3dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b3d6:	2308      	movs	r3, #8
 800b3d8:	617b      	str	r3, [r7, #20]
 800b3da:	e015      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <USB_SetTurnaroundTime+0x13c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d906      	bls.n	800b3f2 <USB_SetTurnaroundTime+0xda>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	4a1c      	ldr	r2, [pc, #112]	; (800b458 <USB_SetTurnaroundTime+0x140>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d202      	bcs.n	800b3f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b3ec:	2307      	movs	r3, #7
 800b3ee:	617b      	str	r3, [r7, #20]
 800b3f0:	e00a      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b3f2:	2306      	movs	r3, #6
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e007      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b3f8:	79fb      	ldrb	r3, [r7, #7]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b3fe:	2309      	movs	r3, #9
 800b400:	617b      	str	r3, [r7, #20]
 800b402:	e001      	b.n	800b408 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b404:	2309      	movs	r3, #9
 800b406:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	029b      	lsls	r3, r3, #10
 800b41c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b420:	431a      	orrs	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	00d8acbf 	.word	0x00d8acbf
 800b438:	00e4e1c0 	.word	0x00e4e1c0
 800b43c:	00f42400 	.word	0x00f42400
 800b440:	01067380 	.word	0x01067380
 800b444:	011a499f 	.word	0x011a499f
 800b448:	01312cff 	.word	0x01312cff
 800b44c:	014ca43f 	.word	0x014ca43f
 800b450:	016e3600 	.word	0x016e3600
 800b454:	01a6ab1f 	.word	0x01a6ab1f
 800b458:	01e84800 	.word	0x01e84800

0800b45c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f043 0201 	orr.w	r2, r3, #1
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f023 0201 	bic.w	r2, r3, #1
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d115      	bne.n	800b4ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	f7f6 fd4a 	bl	8001f68 <HAL_Delay>
      ms++;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 fa45 	bl	800c96a <USB_GetMode>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d01e      	beq.n	800b524 <USB_SetCurrentMode+0x84>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b31      	cmp	r3, #49	; 0x31
 800b4ea:	d9f0      	bls.n	800b4ce <USB_SetCurrentMode+0x2e>
 800b4ec:	e01a      	b.n	800b524 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d115      	bne.n	800b520 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b500:	2001      	movs	r0, #1
 800b502:	f7f6 fd31 	bl	8001f68 <HAL_Delay>
      ms++;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3301      	adds	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 fa2c 	bl	800c96a <USB_GetMode>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d005      	beq.n	800b524 <USB_SetCurrentMode+0x84>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b31      	cmp	r3, #49	; 0x31
 800b51c:	d9f0      	bls.n	800b500 <USB_SetCurrentMode+0x60>
 800b51e:	e001      	b.n	800b524 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e005      	b.n	800b530 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b32      	cmp	r3, #50	; 0x32
 800b528:	d101      	bne.n	800b52e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b538:	b084      	sub	sp, #16
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b086      	sub	sp, #24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b552:	2300      	movs	r3, #0
 800b554:	613b      	str	r3, [r7, #16]
 800b556:	e009      	b.n	800b56c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	3340      	adds	r3, #64	; 0x40
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	2200      	movs	r2, #0
 800b564:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	3301      	adds	r3, #1
 800b56a:	613b      	str	r3, [r7, #16]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	2b0e      	cmp	r3, #14
 800b570:	d9f2      	bls.n	800b558 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d11c      	bne.n	800b5b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b586:	f043 0302 	orr.w	r3, r3, #2
 800b58a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38
 800b5b0:	e00b      	b.n	800b5ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5dc:	4619      	mov	r1, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	680b      	ldr	r3, [r1, #0]
 800b5e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d10c      	bne.n	800b60a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d104      	bne.n	800b600 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f965 	bl	800b8c8 <USB_SetDevSpeed>
 800b5fe:	e008      	b.n	800b612 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b600:	2101      	movs	r1, #1
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f960 	bl	800b8c8 <USB_SetDevSpeed>
 800b608:	e003      	b.n	800b612 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b60a:	2103      	movs	r1, #3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f95b 	bl	800b8c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b612:	2110      	movs	r1, #16
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f8f3 	bl	800b800 <USB_FlushTxFifo>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f91f 	bl	800b868 <USB_FlushRxFifo>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b63a:	461a      	mov	r2, r3
 800b63c:	2300      	movs	r3, #0
 800b63e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b646:	461a      	mov	r2, r3
 800b648:	2300      	movs	r3, #0
 800b64a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	461a      	mov	r2, r3
 800b654:	2300      	movs	r3, #0
 800b656:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b658:	2300      	movs	r3, #0
 800b65a:	613b      	str	r3, [r7, #16]
 800b65c:	e043      	b.n	800b6e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b674:	d118      	bne.n	800b6a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10a      	bne.n	800b692 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b688:	461a      	mov	r2, r3
 800b68a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e013      	b.n	800b6ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	e008      	b.n	800b6ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d3b7      	bcc.n	800b65e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	613b      	str	r3, [r7, #16]
 800b6f2:	e043      	b.n	800b77c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b70a:	d118      	bne.n	800b73e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71e:	461a      	mov	r2, r3
 800b720:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	e013      	b.n	800b750 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b734:	461a      	mov	r2, r3
 800b736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b73a:	6013      	str	r3, [r2, #0]
 800b73c:	e008      	b.n	800b750 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	015a      	lsls	r2, r3, #5
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	4413      	add	r3, r2
 800b746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74a:	461a      	mov	r2, r3
 800b74c:	2300      	movs	r3, #0
 800b74e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75c:	461a      	mov	r2, r3
 800b75e:	2300      	movs	r3, #0
 800b760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	461a      	mov	r2, r3
 800b770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	3301      	adds	r3, #1
 800b77a:	613b      	str	r3, [r7, #16]
 800b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	429a      	cmp	r2, r3
 800b782:	d3b7      	bcc.n	800b6f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b796:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d105      	bne.n	800b7b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	f043 0210 	orr.w	r2, r3, #16
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	699a      	ldr	r2, [r3, #24]
 800b7bc:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <USB_DevInit+0x2c4>)
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d005      	beq.n	800b7d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	f043 0208 	orr.w	r2, r3, #8
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d107      	bne.n	800b7ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	699b      	ldr	r3, [r3, #24]
 800b7e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7e4:	f043 0304 	orr.w	r3, r3, #4
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7f8:	b004      	add	sp, #16
 800b7fa:	4770      	bx	lr
 800b7fc:	803c3800 	.word	0x803c3800

0800b800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3301      	adds	r3, #1
 800b812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	4a13      	ldr	r2, [pc, #76]	; (800b864 <USB_FlushTxFifo+0x64>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d901      	bls.n	800b820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e01b      	b.n	800b858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	daf2      	bge.n	800b80e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	019b      	lsls	r3, r3, #6
 800b830:	f043 0220 	orr.w	r2, r3, #32
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	4a08      	ldr	r2, [pc, #32]	; (800b864 <USB_FlushTxFifo+0x64>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d901      	bls.n	800b84a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e006      	b.n	800b858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b20      	cmp	r3, #32
 800b854:	d0f0      	beq.n	800b838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	00030d40 	.word	0x00030d40

0800b868 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4a11      	ldr	r2, [pc, #68]	; (800b8c4 <USB_FlushRxFifo+0x5c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d901      	bls.n	800b886 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e018      	b.n	800b8b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	daf2      	bge.n	800b874 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2210      	movs	r2, #16
 800b896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4a08      	ldr	r2, [pc, #32]	; (800b8c4 <USB_FlushRxFifo+0x5c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d901      	bls.n	800b8aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e006      	b.n	800b8b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	f003 0310 	and.w	r3, r3, #16
 800b8b2:	2b10      	cmp	r3, #16
 800b8b4:	d0f0      	beq.n	800b898 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	00030d40 	.word	0x00030d40

0800b8c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b087      	sub	sp, #28
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 0306 	and.w	r3, r3, #6
 800b912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b91a:	2300      	movs	r3, #0
 800b91c:	75fb      	strb	r3, [r7, #23]
 800b91e:	e00a      	b.n	800b936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b02      	cmp	r3, #2
 800b924:	d002      	beq.n	800b92c <USB_GetDevSpeed+0x32>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2b06      	cmp	r3, #6
 800b92a:	d102      	bne.n	800b932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b92c:	2302      	movs	r3, #2
 800b92e:	75fb      	strb	r3, [r7, #23]
 800b930:	e001      	b.n	800b936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b932:	230f      	movs	r3, #15
 800b934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d13a      	bne.n	800b9d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b966:	69da      	ldr	r2, [r3, #28]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	2101      	movs	r1, #1
 800b972:	fa01 f303 	lsl.w	r3, r1, r3
 800b976:	b29b      	uxth	r3, r3
 800b978:	68f9      	ldr	r1, [r7, #12]
 800b97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b97e:	4313      	orrs	r3, r2
 800b980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	015a      	lsls	r2, r3, #5
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4413      	add	r3, r2
 800b98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d155      	bne.n	800ba44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	791b      	ldrb	r3, [r3, #4]
 800b9b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	059b      	lsls	r3, r3, #22
 800b9ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	0151      	lsls	r1, r2, #5
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	440a      	add	r2, r1
 800b9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	e036      	b.n	800ba44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9dc:	69da      	ldr	r2, [r3, #28]
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ec:	041b      	lsls	r3, r3, #16
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d11a      	bne.n	800ba44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	791b      	ldrb	r3, [r3, #4]
 800ba28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
	...

0800ba54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d161      	bne.n	800bb34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba86:	d11f      	bne.n	800bac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	0151      	lsls	r1, r2, #5
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	440a      	add	r2, r1
 800ba9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800baa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 030f 	and.w	r3, r3, #15
 800bad8:	2101      	movs	r1, #1
 800bada:	fa01 f303 	lsl.w	r3, r1, r3
 800bade:	b29b      	uxth	r3, r3
 800bae0:	43db      	mvns	r3, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bae8:	4013      	ands	r3, r2
 800baea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 030f 	and.w	r3, r3, #15
 800bafc:	2101      	movs	r1, #1
 800bafe:	fa01 f303 	lsl.w	r3, r1, r3
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	43db      	mvns	r3, r3
 800bb06:	68f9      	ldr	r1, [r7, #12]
 800bb08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	0159      	lsls	r1, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	440b      	add	r3, r1
 800bb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4b35      	ldr	r3, [pc, #212]	; (800bc04 <USB_DeactivateEndpoint+0x1b0>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]
 800bb32:	e060      	b.n	800bbf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb4a:	d11f      	bne.n	800bb8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	0151      	lsls	r1, r2, #5
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	440a      	add	r2, r1
 800bb62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	015a      	lsls	r2, r3, #5
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	4413      	add	r3, r2
 800bb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	0151      	lsls	r1, r2, #5
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	440a      	add	r2, r1
 800bb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bba2:	041b      	lsls	r3, r3, #16
 800bba4:	43db      	mvns	r3, r3
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbac:	4013      	ands	r3, r2
 800bbae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb6:	69da      	ldr	r2, [r3, #28]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc6:	041b      	lsls	r3, r3, #16
 800bbc8:	43db      	mvns	r3, r3
 800bbca:	68f9      	ldr	r1, [r7, #12]
 800bbcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	0159      	lsls	r1, r3, #5
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	440b      	add	r3, r1
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <USB_DeactivateEndpoint+0x1b4>)
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3714      	adds	r7, #20
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	ec337800 	.word	0xec337800
 800bc08:	eff37800 	.word	0xeff37800

0800bc0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08a      	sub	sp, #40	; 0x28
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	785b      	ldrb	r3, [r3, #1]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	f040 815c 	bne.w	800bee6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d132      	bne.n	800bc9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	69ba      	ldr	r2, [r7, #24]
 800bc6a:	0151      	lsls	r1, r2, #5
 800bc6c:	69fa      	ldr	r2, [r7, #28]
 800bc6e:	440a      	add	r2, r1
 800bc70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	015a      	lsls	r2, r3, #5
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	4413      	add	r3, r2
 800bc82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	0151      	lsls	r1, r2, #5
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	440a      	add	r2, r1
 800bc90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc94:	0cdb      	lsrs	r3, r3, #19
 800bc96:	04db      	lsls	r3, r3, #19
 800bc98:	6113      	str	r3, [r2, #16]
 800bc9a:	e074      	b.n	800bd86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	0151      	lsls	r1, r2, #5
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	440a      	add	r2, r1
 800bcb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb6:	0cdb      	lsrs	r3, r3, #19
 800bcb8:	04db      	lsls	r3, r3, #19
 800bcba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	015a      	lsls	r2, r3, #5
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	0151      	lsls	r1, r2, #5
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	440a      	add	r2, r1
 800bcd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	6999      	ldr	r1, [r3, #24]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	440b      	add	r3, r1
 800bcf8:	1e59      	subs	r1, r3, #1
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bd04:	4b9d      	ldr	r3, [pc, #628]	; (800bf7c <USB_EPStartXfer+0x370>)
 800bd06:	400b      	ands	r3, r1
 800bd08:	69b9      	ldr	r1, [r7, #24]
 800bd0a:	0148      	lsls	r0, r1, #5
 800bd0c:	69f9      	ldr	r1, [r7, #28]
 800bd0e:	4401      	add	r1, r0
 800bd10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd14:	4313      	orrs	r3, r2
 800bd16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	691a      	ldr	r2, [r3, #16]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd2e:	69b9      	ldr	r1, [r7, #24]
 800bd30:	0148      	lsls	r0, r1, #5
 800bd32:	69f9      	ldr	r1, [r7, #28]
 800bd34:	4401      	add	r1, r0
 800bd36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	791b      	ldrb	r3, [r3, #4]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d11f      	bne.n	800bd86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	0151      	lsls	r1, r2, #5
 800bd58:	69fa      	ldr	r2, [r7, #28]
 800bd5a:	440a      	add	r2, r1
 800bd5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	0151      	lsls	r1, r2, #5
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	440a      	add	r2, r1
 800bd7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d14b      	bne.n	800be24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda0:	461a      	mov	r2, r3
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	791b      	ldrb	r3, [r3, #4]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d128      	bne.n	800be02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d110      	bne.n	800bde2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	0151      	lsls	r1, r2, #5
 800bdd2:	69fa      	ldr	r2, [r7, #28]
 800bdd4:	440a      	add	r2, r1
 800bdd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	e00f      	b.n	800be02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	0151      	lsls	r1, r2, #5
 800bdf4:	69fa      	ldr	r2, [r7, #28]
 800bdf6:	440a      	add	r2, r1
 800bdf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	015a      	lsls	r2, r3, #5
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	4413      	add	r3, r2
 800be0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	0151      	lsls	r1, r2, #5
 800be14:	69fa      	ldr	r2, [r7, #28]
 800be16:	440a      	add	r2, r1
 800be18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	e133      	b.n	800c08c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	015a      	lsls	r2, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	0151      	lsls	r1, r2, #5
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	440a      	add	r2, r1
 800be3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	791b      	ldrb	r3, [r3, #4]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d015      	beq.n	800be78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 811b 	beq.w	800c08c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 030f 	and.w	r3, r3, #15
 800be66:	2101      	movs	r1, #1
 800be68:	fa01 f303 	lsl.w	r3, r1, r3
 800be6c:	69f9      	ldr	r1, [r7, #28]
 800be6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be72:	4313      	orrs	r3, r2
 800be74:	634b      	str	r3, [r1, #52]	; 0x34
 800be76:	e109      	b.n	800c08c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be84:	2b00      	cmp	r3, #0
 800be86:	d110      	bne.n	800beaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	0151      	lsls	r1, r2, #5
 800be9a:	69fa      	ldr	r2, [r7, #28]
 800be9c:	440a      	add	r2, r1
 800be9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	e00f      	b.n	800beca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bec8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6919      	ldr	r1, [r3, #16]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	b298      	uxth	r0, r3
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4603      	mov	r3, r0
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 fade 	bl	800c4a0 <USB_WritePacket>
 800bee4:	e0d2      	b.n	800c08c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	0151      	lsls	r1, r2, #5
 800bef8:	69fa      	ldr	r2, [r7, #28]
 800befa:	440a      	add	r2, r1
 800befc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf00:	0cdb      	lsrs	r3, r3, #19
 800bf02:	04db      	lsls	r3, r3, #19
 800bf04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	69ba      	ldr	r2, [r7, #24]
 800bf16:	0151      	lsls	r1, r2, #5
 800bf18:	69fa      	ldr	r2, [r7, #28]
 800bf1a:	440a      	add	r2, r1
 800bf1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d126      	bne.n	800bf80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	015a      	lsls	r2, r3, #5
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	4413      	add	r3, r2
 800bf3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3e:	691a      	ldr	r2, [r3, #16]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	0148      	lsls	r0, r1, #5
 800bf4c:	69f9      	ldr	r1, [r7, #28]
 800bf4e:	4401      	add	r1, r0
 800bf50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf54:	4313      	orrs	r3, r2
 800bf56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	0151      	lsls	r1, r2, #5
 800bf6a:	69fa      	ldr	r2, [r7, #28]
 800bf6c:	440a      	add	r2, r1
 800bf6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf76:	6113      	str	r3, [r2, #16]
 800bf78:	e03a      	b.n	800bff0 <USB_EPStartXfer+0x3e4>
 800bf7a:	bf00      	nop
 800bf7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	4413      	add	r3, r2
 800bf8a:	1e5a      	subs	r2, r3, #1
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	8afa      	ldrh	r2, [r7, #22]
 800bf9c:	fb03 f202 	mul.w	r2, r3, r2
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb0:	691a      	ldr	r2, [r3, #16]
 800bfb2:	8afb      	ldrh	r3, [r7, #22]
 800bfb4:	04d9      	lsls	r1, r3, #19
 800bfb6:	4b38      	ldr	r3, [pc, #224]	; (800c098 <USB_EPStartXfer+0x48c>)
 800bfb8:	400b      	ands	r3, r1
 800bfba:	69b9      	ldr	r1, [r7, #24]
 800bfbc:	0148      	lsls	r0, r1, #5
 800bfbe:	69f9      	ldr	r1, [r7, #28]
 800bfc0:	4401      	add	r1, r0
 800bfc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfe0:	69b9      	ldr	r1, [r7, #24]
 800bfe2:	0148      	lsls	r0, r1, #5
 800bfe4:	69f9      	ldr	r1, [r7, #28]
 800bfe6:	4401      	add	r1, r0
 800bfe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfec:	4313      	orrs	r3, r2
 800bfee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d10d      	bne.n	800c012 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d009      	beq.n	800c012 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	6919      	ldr	r1, [r3, #16]
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	015a      	lsls	r2, r3, #5
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	4413      	add	r3, r2
 800c00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00e:	460a      	mov	r2, r1
 800c010:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	791b      	ldrb	r3, [r3, #4]
 800c016:	2b01      	cmp	r3, #1
 800c018:	d128      	bne.n	800c06c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c026:	2b00      	cmp	r3, #0
 800c028:	d110      	bne.n	800c04c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	015a      	lsls	r2, r3, #5
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	4413      	add	r3, r2
 800c032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	0151      	lsls	r1, r2, #5
 800c03c:	69fa      	ldr	r2, [r7, #28]
 800c03e:	440a      	add	r2, r1
 800c040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c044:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	e00f      	b.n	800c06c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	015a      	lsls	r2, r3, #5
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	4413      	add	r3, r2
 800c054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	0151      	lsls	r1, r2, #5
 800c05e:	69fa      	ldr	r2, [r7, #28]
 800c060:	440a      	add	r2, r1
 800c062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c06a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	4413      	add	r3, r2
 800c074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	0151      	lsls	r1, r2, #5
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	440a      	add	r2, r1
 800c082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c08a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3720      	adds	r7, #32
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	1ff80000 	.word	0x1ff80000

0800c09c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b087      	sub	sp, #28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	785b      	ldrb	r3, [r3, #1]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	f040 80ce 	bne.w	800c25a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d132      	bne.n	800c12c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	015a      	lsls	r2, r3, #5
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	0151      	lsls	r1, r2, #5
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	440a      	add	r2, r1
 800c0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	0151      	lsls	r1, r2, #5
 800c0fc:	697a      	ldr	r2, [r7, #20]
 800c0fe:	440a      	add	r2, r1
 800c100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	015a      	lsls	r2, r3, #5
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	4413      	add	r3, r2
 800c112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	0151      	lsls	r1, r2, #5
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	440a      	add	r2, r1
 800c120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c124:	0cdb      	lsrs	r3, r3, #19
 800c126:	04db      	lsls	r3, r3, #19
 800c128:	6113      	str	r3, [r2, #16]
 800c12a:	e04e      	b.n	800c1ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	0151      	lsls	r1, r2, #5
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	440a      	add	r2, r1
 800c142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c146:	0cdb      	lsrs	r3, r3, #19
 800c148:	04db      	lsls	r3, r3, #19
 800c14a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	0151      	lsls	r1, r2, #5
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	440a      	add	r2, r1
 800c162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c166:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c16a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c16e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	699a      	ldr	r2, [r3, #24]
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d903      	bls.n	800c184 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	0151      	lsls	r1, r2, #5
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	440a      	add	r2, r1
 800c19a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c19e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b0:	691a      	ldr	r2, [r3, #16]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1ba:	6939      	ldr	r1, [r7, #16]
 800c1bc:	0148      	lsls	r0, r1, #5
 800c1be:	6979      	ldr	r1, [r7, #20]
 800c1c0:	4401      	add	r1, r0
 800c1c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1ca:	79fb      	ldrb	r3, [r7, #7]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d11e      	bne.n	800c20e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	695b      	ldr	r3, [r3, #20]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	015a      	lsls	r2, r3, #5
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	0151      	lsls	r1, r2, #5
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	440a      	add	r2, r1
 800c202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	e097      	b.n	800c33e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c228:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c22c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 8083 	beq.w	800c33e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	2101      	movs	r1, #1
 800c24a:	fa01 f303 	lsl.w	r3, r1, r3
 800c24e:	6979      	ldr	r1, [r7, #20]
 800c250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c254:	4313      	orrs	r3, r2
 800c256:	634b      	str	r3, [r1, #52]	; 0x34
 800c258:	e071      	b.n	800c33e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	015a      	lsls	r2, r3, #5
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	4413      	add	r3, r2
 800c262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	0151      	lsls	r1, r2, #5
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	440a      	add	r2, r1
 800c270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c274:	0cdb      	lsrs	r3, r3, #19
 800c276:	04db      	lsls	r3, r3, #19
 800c278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	015a      	lsls	r2, r3, #5
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	4413      	add	r3, r2
 800c282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	0151      	lsls	r1, r2, #5
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	440a      	add	r2, r1
 800c290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c29c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	68da      	ldr	r2, [r3, #12]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	015a      	lsls	r2, r3, #5
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	4413      	add	r3, r2
 800c2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	0151      	lsls	r1, r2, #5
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	440a      	add	r2, r1
 800c2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e2:	691a      	ldr	r2, [r3, #16]
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	69db      	ldr	r3, [r3, #28]
 800c2e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ec:	6939      	ldr	r1, [r7, #16]
 800c2ee:	0148      	lsls	r0, r1, #5
 800c2f0:	6979      	ldr	r1, [r7, #20]
 800c2f2:	4401      	add	r1, r0
 800c2f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d10d      	bne.n	800c31e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	691b      	ldr	r3, [r3, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d009      	beq.n	800c31e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	6919      	ldr	r1, [r3, #16]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c31a:	460a      	mov	r2, r1
 800c31c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	0151      	lsls	r1, r2, #5
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	440a      	add	r2, r1
 800c334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c33c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	785b      	ldrb	r3, [r3, #1]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d14a      	bne.n	800c400 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c37e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c382:	f040 8086 	bne.w	800c492 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	015a      	lsls	r2, r3, #5
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	4413      	add	r3, r2
 800c390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	7812      	ldrb	r2, [r2, #0]
 800c39a:	0151      	lsls	r1, r2, #5
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	440a      	add	r2, r1
 800c3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c3a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	7812      	ldrb	r2, [r2, #0]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d902      	bls.n	800c3e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c3e2:	e056      	b.n	800c492 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3fc:	d0e7      	beq.n	800c3ce <USB_EPStopXfer+0x82>
 800c3fe:	e048      	b.n	800c492 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	015a      	lsls	r2, r3, #5
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	4413      	add	r3, r2
 800c40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c418:	d13b      	bne.n	800c492 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	015a      	lsls	r2, r3, #5
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	4413      	add	r3, r2
 800c424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	7812      	ldrb	r2, [r2, #0]
 800c42e:	0151      	lsls	r1, r2, #5
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	440a      	add	r2, r1
 800c434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c438:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c43c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	015a      	lsls	r2, r3, #5
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	4413      	add	r3, r2
 800c448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	7812      	ldrb	r2, [r2, #0]
 800c452:	0151      	lsls	r1, r2, #5
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	440a      	add	r2, r1
 800c458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c45c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c460:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3301      	adds	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c46e:	4293      	cmp	r3, r2
 800c470:	d902      	bls.n	800c478 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	75fb      	strb	r3, [r7, #23]
          break;
 800c476:	e00c      	b.n	800c492 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	015a      	lsls	r2, r3, #5
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	4413      	add	r3, r2
 800c482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c48c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c490:	d0e7      	beq.n	800c462 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c492:	7dfb      	ldrb	r3, [r7, #23]
}
 800c494:	4618      	mov	r0, r3
 800c496:	371c      	adds	r7, #28
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b089      	sub	sp, #36	; 0x24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	71fb      	strb	r3, [r7, #7]
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c4be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d123      	bne.n	800c50e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4c6:	88bb      	ldrh	r3, [r7, #4]
 800c4c8:	3303      	adds	r3, #3
 800c4ca:	089b      	lsrs	r3, r3, #2
 800c4cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61bb      	str	r3, [r7, #24]
 800c4d2:	e018      	b.n	800c506 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4d4:	79fb      	ldrb	r3, [r7, #7]
 800c4d6:	031a      	lsls	r2, r3, #12
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	3301      	adds	r3, #1
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d3e2      	bcc.n	800c4d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3724      	adds	r7, #36	; 0x24
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b08b      	sub	sp, #44	; 0x2c
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	4613      	mov	r3, r2
 800c528:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c532:	88fb      	ldrh	r3, [r7, #6]
 800c534:	089b      	lsrs	r3, r3, #2
 800c536:	b29b      	uxth	r3, r3
 800c538:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	f003 0303 	and.w	r3, r3, #3
 800c540:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c542:	2300      	movs	r3, #0
 800c544:	623b      	str	r3, [r7, #32]
 800c546:	e014      	b.n	800c572 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	601a      	str	r2, [r3, #0]
    pDest++;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	3301      	adds	r3, #1
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	3301      	adds	r3, #1
 800c55e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	3301      	adds	r3, #1
 800c564:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c568:	3301      	adds	r3, #1
 800c56a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c56c:	6a3b      	ldr	r3, [r7, #32]
 800c56e:	3301      	adds	r3, #1
 800c570:	623b      	str	r3, [r7, #32]
 800c572:	6a3a      	ldr	r2, [r7, #32]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	429a      	cmp	r2, r3
 800c578:	d3e6      	bcc.n	800c548 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c57a:	8bfb      	ldrh	r3, [r7, #30]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01e      	beq.n	800c5be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c580:	2300      	movs	r3, #0
 800c582:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c58a:	461a      	mov	r2, r3
 800c58c:	f107 0310 	add.w	r3, r7, #16
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	00db      	lsls	r3, r3, #3
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	701a      	strb	r2, [r3, #0]
      i++;
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c5b2:	8bfb      	ldrh	r3, [r7, #30]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c5b8:	8bfb      	ldrh	r3, [r7, #30]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1ea      	bne.n	800c594 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	372c      	adds	r7, #44	; 0x2c
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	785b      	ldrb	r3, [r3, #1]
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d12c      	bne.n	800c642 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	db12      	blt.n	800c620 <USB_EPSetStall+0x54>
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00f      	beq.n	800c620 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	0151      	lsls	r1, r2, #5
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	440a      	add	r2, r1
 800c616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c61e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4413      	add	r3, r2
 800c628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	0151      	lsls	r1, r2, #5
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	440a      	add	r2, r1
 800c636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c63a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c63e:	6013      	str	r3, [r2, #0]
 800c640:	e02b      	b.n	800c69a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	015a      	lsls	r2, r3, #5
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	db12      	blt.n	800c67a <USB_EPSetStall+0xae>
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00f      	beq.n	800c67a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	4413      	add	r3, r2
 800c662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c678:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	015a      	lsls	r2, r3, #5
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	4413      	add	r3, r2
 800c682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	0151      	lsls	r1, r2, #5
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	440a      	add	r2, r1
 800c690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c698:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	785b      	ldrb	r3, [r3, #1]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d128      	bne.n	800c716 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	791b      	ldrb	r3, [r3, #4]
 800c6e8:	2b03      	cmp	r3, #3
 800c6ea:	d003      	beq.n	800c6f4 <USB_EPClearStall+0x4c>
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	791b      	ldrb	r3, [r3, #4]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d138      	bne.n	800c766 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	0151      	lsls	r1, r2, #5
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	440a      	add	r2, r1
 800c70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c70e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c712:	6013      	str	r3, [r2, #0]
 800c714:	e027      	b.n	800c766 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	0151      	lsls	r1, r2, #5
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	440a      	add	r2, r1
 800c72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c730:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c734:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	791b      	ldrb	r3, [r3, #4]
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d003      	beq.n	800c746 <USB_EPClearStall+0x9e>
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	791b      	ldrb	r3, [r3, #4]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d10f      	bne.n	800c766 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	0151      	lsls	r1, r2, #5
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	440a      	add	r2, r1
 800c75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c764:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3714      	adds	r7, #20
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c792:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c796:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	78fb      	ldrb	r3, [r7, #3]
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c7a8:	68f9      	ldr	r1, [r7, #12]
 800c7aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c7da:	f023 0303 	bic.w	r3, r3, #3
 800c7de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ee:	f023 0302 	bic.w	r3, r3, #2
 800c7f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c802:	b480      	push	{r7}
 800c804:	b085      	sub	sp, #20
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c81c:	f023 0303 	bic.w	r3, r3, #3
 800c820:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c830:	f043 0302 	orr.w	r3, r3, #2
 800c834:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	695b      	ldr	r3, [r3, #20]
 800c850:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4013      	ands	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c886:	69db      	ldr	r3, [r3, #28]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	4013      	ands	r3, r2
 800c88c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	0c1b      	lsrs	r3, r3, #16
}
 800c892:	4618      	mov	r0, r3
 800c894:	3714      	adds	r7, #20
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c89e:	b480      	push	{r7}
 800c8a0:	b085      	sub	sp, #20
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	4013      	ands	r3, r2
 800c8c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	b29b      	uxth	r3, r3
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c8e2:	78fb      	ldrb	r3, [r7, #3]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8f8:	695b      	ldr	r3, [r3, #20]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c900:	68bb      	ldr	r3, [r7, #8]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3714      	adds	r7, #20
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c90e:	b480      	push	{r7}
 800c910:	b087      	sub	sp, #28
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
 800c916:	460b      	mov	r3, r1
 800c918:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c930:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c932:	78fb      	ldrb	r3, [r7, #3]
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	fa22 f303 	lsr.w	r3, r2, r3
 800c93e:	01db      	lsls	r3, r3, #7
 800c940:	b2db      	uxtb	r3, r3
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	4313      	orrs	r3, r2
 800c946:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c948:	78fb      	ldrb	r3, [r7, #3]
 800c94a:	015a      	lsls	r2, r3, #5
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	4413      	add	r3, r2
 800c950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4013      	ands	r3, r2
 800c95a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c95c:	68bb      	ldr	r3, [r7, #8]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	695b      	ldr	r3, [r3, #20]
 800c976:	f003 0301 	and.w	r3, r3, #1
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3714      	adds	r7, #20
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	607a      	str	r2, [r7, #4]
 800c9d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	333c      	adds	r3, #60	; 0x3c
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	4a26      	ldr	r2, [pc, #152]	; (800ca84 <USB_EP0_OutStart+0xb8>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d90a      	bls.n	800ca06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca00:	d101      	bne.n	800ca06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	e037      	b.n	800ca76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca34:	f043 0318 	orr.w	r3, r3, #24
 800ca38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ca4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ca4e:	7afb      	ldrb	r3, [r7, #11]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d10f      	bne.n	800ca74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ca72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	371c      	adds	r7, #28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	4f54300a 	.word	0x4f54300a

0800ca88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	3301      	adds	r3, #1
 800ca98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	4a13      	ldr	r2, [pc, #76]	; (800caec <USB_CoreReset+0x64>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d901      	bls.n	800caa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e01b      	b.n	800cade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	daf2      	bge.n	800ca94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800caae:	2300      	movs	r3, #0
 800cab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f043 0201 	orr.w	r2, r3, #1
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	3301      	adds	r3, #1
 800cac2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	4a09      	ldr	r2, [pc, #36]	; (800caec <USB_CoreReset+0x64>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d901      	bls.n	800cad0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cacc:	2303      	movs	r3, #3
 800cace:	e006      	b.n	800cade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d0f0      	beq.n	800cabe <USB_CoreReset+0x36>

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	00030d40 	.word	0x00030d40

0800caf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cafc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cb00:	f004 fbde 	bl	80112c0 <USBD_static_malloc>
 800cb04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d109      	bne.n	800cb20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	32b0      	adds	r2, #176	; 0xb0
 800cb16:	2100      	movs	r1, #0
 800cb18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cb1c:	2302      	movs	r3, #2
 800cb1e:	e0d4      	b.n	800ccca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cb20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cb24:	2100      	movs	r1, #0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f006 fc5e 	bl	80133e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	32b0      	adds	r2, #176	; 0xb0
 800cb36:	68f9      	ldr	r1, [r7, #12]
 800cb38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	32b0      	adds	r2, #176	; 0xb0
 800cb46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7c1b      	ldrb	r3, [r3, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d138      	bne.n	800cbca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb58:	4b5e      	ldr	r3, [pc, #376]	; (800ccd4 <USBD_CDC_Init+0x1e4>)
 800cb5a:	7819      	ldrb	r1, [r3, #0]
 800cb5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb60:	2202      	movs	r2, #2
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f004 fa89 	bl	801107a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb68:	4b5a      	ldr	r3, [pc, #360]	; (800ccd4 <USBD_CDC_Init+0x1e4>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	f003 020f 	and.w	r2, r3, #15
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3324      	adds	r3, #36	; 0x24
 800cb7e:	2201      	movs	r2, #1
 800cb80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb82:	4b55      	ldr	r3, [pc, #340]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800cb84:	7819      	ldrb	r1, [r3, #0]
 800cb86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f004 fa74 	bl	801107a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb92:	4b51      	ldr	r3, [pc, #324]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	f003 020f 	and.w	r2, r3, #15
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	440b      	add	r3, r1
 800cba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbaa:	2201      	movs	r2, #1
 800cbac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cbae:	4b4b      	ldr	r3, [pc, #300]	; (800ccdc <USBD_CDC_Init+0x1ec>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	f003 020f 	and.w	r2, r3, #15
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	440b      	add	r3, r1
 800cbc2:	3326      	adds	r3, #38	; 0x26
 800cbc4:	2210      	movs	r2, #16
 800cbc6:	801a      	strh	r2, [r3, #0]
 800cbc8:	e035      	b.n	800cc36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbca:	4b42      	ldr	r3, [pc, #264]	; (800ccd4 <USBD_CDC_Init+0x1e4>)
 800cbcc:	7819      	ldrb	r1, [r3, #0]
 800cbce:	2340      	movs	r3, #64	; 0x40
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f004 fa51 	bl	801107a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbd8:	4b3e      	ldr	r3, [pc, #248]	; (800ccd4 <USBD_CDC_Init+0x1e4>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	f003 020f 	and.w	r2, r3, #15
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	3324      	adds	r3, #36	; 0x24
 800cbee:	2201      	movs	r2, #1
 800cbf0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cbf2:	4b39      	ldr	r3, [pc, #228]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800cbf4:	7819      	ldrb	r1, [r3, #0]
 800cbf6:	2340      	movs	r3, #64	; 0x40
 800cbf8:	2202      	movs	r2, #2
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f004 fa3d 	bl	801107a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc00:	4b35      	ldr	r3, [pc, #212]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	f003 020f 	and.w	r2, r3, #15
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	440b      	add	r3, r1
 800cc14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc18:	2201      	movs	r2, #1
 800cc1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc1c:	4b2f      	ldr	r3, [pc, #188]	; (800ccdc <USBD_CDC_Init+0x1ec>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	f003 020f 	and.w	r2, r3, #15
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	4613      	mov	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	440b      	add	r3, r1
 800cc30:	3326      	adds	r3, #38	; 0x26
 800cc32:	2210      	movs	r2, #16
 800cc34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc36:	4b29      	ldr	r3, [pc, #164]	; (800ccdc <USBD_CDC_Init+0x1ec>)
 800cc38:	7819      	ldrb	r1, [r3, #0]
 800cc3a:	2308      	movs	r3, #8
 800cc3c:	2203      	movs	r2, #3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f004 fa1b 	bl	801107a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cc44:	4b25      	ldr	r3, [pc, #148]	; (800ccdc <USBD_CDC_Init+0x1ec>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f003 020f 	and.w	r2, r3, #15
 800cc4c:	6879      	ldr	r1, [r7, #4]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	440b      	add	r3, r1
 800cc58:	3324      	adds	r3, #36	; 0x24
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	33b0      	adds	r3, #176	; 0xb0
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4413      	add	r3, r2
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cc94:	2302      	movs	r3, #2
 800cc96:	e018      	b.n	800ccca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	7c1b      	ldrb	r3, [r3, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10a      	bne.n	800ccb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cca0:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800cca2:	7819      	ldrb	r1, [r3, #0]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f004 fad2 	bl	8011258 <USBD_LL_PrepareReceive>
 800ccb4:	e008      	b.n	800ccc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccb6:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <USBD_CDC_Init+0x1e8>)
 800ccb8:	7819      	ldrb	r1, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccc0:	2340      	movs	r3, #64	; 0x40
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f004 fac8 	bl	8011258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20000093 	.word	0x20000093
 800ccd8:	20000094 	.word	0x20000094
 800ccdc:	20000095 	.word	0x20000095

0800cce0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ccec:	4b3a      	ldr	r3, [pc, #232]	; (800cdd8 <USBD_CDC_DeInit+0xf8>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f004 f9e7 	bl	80110c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ccf8:	4b37      	ldr	r3, [pc, #220]	; (800cdd8 <USBD_CDC_DeInit+0xf8>)
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 020f 	and.w	r2, r3, #15
 800cd00:	6879      	ldr	r1, [r7, #4]
 800cd02:	4613      	mov	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3324      	adds	r3, #36	; 0x24
 800cd0e:	2200      	movs	r2, #0
 800cd10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cd12:	4b32      	ldr	r3, [pc, #200]	; (800cddc <USBD_CDC_DeInit+0xfc>)
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f004 f9d4 	bl	80110c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cd1e:	4b2f      	ldr	r3, [pc, #188]	; (800cddc <USBD_CDC_DeInit+0xfc>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	f003 020f 	and.w	r2, r3, #15
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	440b      	add	r3, r1
 800cd32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd36:	2200      	movs	r2, #0
 800cd38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cd3a:	4b29      	ldr	r3, [pc, #164]	; (800cde0 <USBD_CDC_DeInit+0x100>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	4619      	mov	r1, r3
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f004 f9c0 	bl	80110c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cd46:	4b26      	ldr	r3, [pc, #152]	; (800cde0 <USBD_CDC_DeInit+0x100>)
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	f003 020f 	and.w	r2, r3, #15
 800cd4e:	6879      	ldr	r1, [r7, #4]
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	440b      	add	r3, r1
 800cd5a:	3324      	adds	r3, #36	; 0x24
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cd60:	4b1f      	ldr	r3, [pc, #124]	; (800cde0 <USBD_CDC_DeInit+0x100>)
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	f003 020f 	and.w	r2, r3, #15
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	440b      	add	r3, r1
 800cd74:	3326      	adds	r3, #38	; 0x26
 800cd76:	2200      	movs	r2, #0
 800cd78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	32b0      	adds	r2, #176	; 0xb0
 800cd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d01f      	beq.n	800cdcc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	33b0      	adds	r3, #176	; 0xb0
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	32b0      	adds	r2, #176	; 0xb0
 800cdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f004 fa94 	bl	80112dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32b0      	adds	r2, #176	; 0xb0
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20000093 	.word	0x20000093
 800cddc:	20000094 	.word	0x20000094
 800cde0:	20000095 	.word	0x20000095

0800cde4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	32b0      	adds	r2, #176	; 0xb0
 800cdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce02:	2300      	movs	r3, #0
 800ce04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ce10:	2303      	movs	r3, #3
 800ce12:	e0bf      	b.n	800cf94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d050      	beq.n	800cec2 <USBD_CDC_Setup+0xde>
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	f040 80af 	bne.w	800cf84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	88db      	ldrh	r3, [r3, #6]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d03a      	beq.n	800cea4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	b25b      	sxtb	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	da1b      	bge.n	800ce70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	33b0      	adds	r3, #176	; 0xb0
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ce4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	88d2      	ldrh	r2, [r2, #6]
 800ce54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	88db      	ldrh	r3, [r3, #6]
 800ce5a:	2b07      	cmp	r3, #7
 800ce5c:	bf28      	it	cs
 800ce5e:	2307      	movcs	r3, #7
 800ce60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	89fa      	ldrh	r2, [r7, #14]
 800ce66:	4619      	mov	r1, r3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f001 fd89 	bl	800e980 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ce6e:	e090      	b.n	800cf92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	785a      	ldrb	r2, [r3, #1]
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	2b3f      	cmp	r3, #63	; 0x3f
 800ce80:	d803      	bhi.n	800ce8a <USBD_CDC_Setup+0xa6>
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	88db      	ldrh	r3, [r3, #6]
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	e000      	b.n	800ce8c <USBD_CDC_Setup+0xa8>
 800ce8a:	2240      	movs	r2, #64	; 0x40
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ce92:	6939      	ldr	r1, [r7, #16]
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 fd9b 	bl	800e9d8 <USBD_CtlPrepareRx>
      break;
 800cea2:	e076      	b.n	800cf92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	33b0      	adds	r3, #176	; 0xb0
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	7850      	ldrb	r0, [r2, #1]
 800ceba:	2200      	movs	r2, #0
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	4798      	blx	r3
      break;
 800cec0:	e067      	b.n	800cf92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	785b      	ldrb	r3, [r3, #1]
 800cec6:	2b0b      	cmp	r3, #11
 800cec8:	d851      	bhi.n	800cf6e <USBD_CDC_Setup+0x18a>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <USBD_CDC_Setup+0xec>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cf01 	.word	0x0800cf01
 800ced4:	0800cf7d 	.word	0x0800cf7d
 800ced8:	0800cf6f 	.word	0x0800cf6f
 800cedc:	0800cf6f 	.word	0x0800cf6f
 800cee0:	0800cf6f 	.word	0x0800cf6f
 800cee4:	0800cf6f 	.word	0x0800cf6f
 800cee8:	0800cf6f 	.word	0x0800cf6f
 800ceec:	0800cf6f 	.word	0x0800cf6f
 800cef0:	0800cf6f 	.word	0x0800cf6f
 800cef4:	0800cf6f 	.word	0x0800cf6f
 800cef8:	0800cf2b 	.word	0x0800cf2b
 800cefc:	0800cf55 	.word	0x0800cf55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d107      	bne.n	800cf1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf0c:	f107 030a 	add.w	r3, r7, #10
 800cf10:	2202      	movs	r2, #2
 800cf12:	4619      	mov	r1, r3
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f001 fd33 	bl	800e980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf1a:	e032      	b.n	800cf82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 fcbd 	bl	800e89e <USBD_CtlError>
            ret = USBD_FAIL;
 800cf24:	2303      	movs	r3, #3
 800cf26:	75fb      	strb	r3, [r7, #23]
          break;
 800cf28:	e02b      	b.n	800cf82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d107      	bne.n	800cf46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cf36:	f107 030d 	add.w	r3, r7, #13
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f001 fd1e 	bl	800e980 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf44:	e01d      	b.n	800cf82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f001 fca8 	bl	800e89e <USBD_CtlError>
            ret = USBD_FAIL;
 800cf4e:	2303      	movs	r3, #3
 800cf50:	75fb      	strb	r3, [r7, #23]
          break;
 800cf52:	e016      	b.n	800cf82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d00f      	beq.n	800cf80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 fc9b 	bl	800e89e <USBD_CtlError>
            ret = USBD_FAIL;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cf6c:	e008      	b.n	800cf80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f001 fc94 	bl	800e89e <USBD_CtlError>
          ret = USBD_FAIL;
 800cf76:	2303      	movs	r3, #3
 800cf78:	75fb      	strb	r3, [r7, #23]
          break;
 800cf7a:	e002      	b.n	800cf82 <USBD_CDC_Setup+0x19e>
          break;
 800cf7c:	bf00      	nop
 800cf7e:	e008      	b.n	800cf92 <USBD_CDC_Setup+0x1ae>
          break;
 800cf80:	bf00      	nop
      }
      break;
 800cf82:	e006      	b.n	800cf92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 fc89 	bl	800e89e <USBD_CtlError>
      ret = USBD_FAIL;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf90:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cfae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	32b0      	adds	r2, #176	; 0xb0
 800cfba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e065      	b.n	800d092 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	32b0      	adds	r2, #176	; 0xb0
 800cfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cfd6:	78fb      	ldrb	r3, [r7, #3]
 800cfd8:	f003 020f 	and.w	r2, r3, #15
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	440b      	add	r3, r1
 800cfe8:	3318      	adds	r3, #24
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d02f      	beq.n	800d050 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	f003 020f 	and.w	r2, r3, #15
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	440b      	add	r3, r1
 800d002:	3318      	adds	r3, #24
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	78fb      	ldrb	r3, [r7, #3]
 800d008:	f003 010f 	and.w	r1, r3, #15
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	460b      	mov	r3, r1
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	440b      	add	r3, r1
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4403      	add	r3, r0
 800d018:	3348      	adds	r3, #72	; 0x48
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d020:	fb01 f303 	mul.w	r3, r1, r3
 800d024:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d026:	2b00      	cmp	r3, #0
 800d028:	d112      	bne.n	800d050 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d02a:	78fb      	ldrb	r3, [r7, #3]
 800d02c:	f003 020f 	and.w	r2, r3, #15
 800d030:	6879      	ldr	r1, [r7, #4]
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	440b      	add	r3, r1
 800d03c:	3318      	adds	r3, #24
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d042:	78f9      	ldrb	r1, [r7, #3]
 800d044:	2300      	movs	r3, #0
 800d046:	2200      	movs	r2, #0
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f004 f8e4 	bl	8011216 <USBD_LL_Transmit>
 800d04e:	e01f      	b.n	800d090 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2200      	movs	r2, #0
 800d054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	33b0      	adds	r3, #176	; 0xb0
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d010      	beq.n	800d090 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	33b0      	adds	r3, #176	; 0xb0
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d08c:	78fa      	ldrb	r2, [r7, #3]
 800d08e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	32b0      	adds	r2, #176	; 0xb0
 800d0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	32b0      	adds	r2, #176	; 0xb0
 800d0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e01a      	b.n	800d102 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d0cc:	78fb      	ldrb	r3, [r7, #3]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f004 f8e2 	bl	801129a <USBD_LL_GetRxDataSize>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	33b0      	adds	r3, #176	; 0xb0
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	32b0      	adds	r2, #176	; 0xb0
 800d11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d128:	2303      	movs	r3, #3
 800d12a:	e025      	b.n	800d178 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	33b0      	adds	r3, #176	; 0xb0
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d01a      	beq.n	800d176 <USBD_CDC_EP0_RxReady+0x6c>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d146:	2bff      	cmp	r3, #255	; 0xff
 800d148:	d015      	beq.n	800d176 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	33b0      	adds	r3, #176	; 0xb0
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d162:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d16a:	b292      	uxth	r2, r2
 800d16c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	22ff      	movs	r2, #255	; 0xff
 800d172:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3710      	adds	r7, #16
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d188:	2182      	movs	r1, #130	; 0x82
 800d18a:	4818      	ldr	r0, [pc, #96]	; (800d1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d18c:	f000 fd4f 	bl	800dc2e <USBD_GetEpDesc>
 800d190:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d192:	2101      	movs	r1, #1
 800d194:	4815      	ldr	r0, [pc, #84]	; (800d1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d196:	f000 fd4a 	bl	800dc2e <USBD_GetEpDesc>
 800d19a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d19c:	2181      	movs	r1, #129	; 0x81
 800d19e:	4813      	ldr	r0, [pc, #76]	; (800d1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1a0:	f000 fd45 	bl	800dc2e <USBD_GetEpDesc>
 800d1a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d002      	beq.n	800d1b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2210      	movs	r2, #16
 800d1b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d006      	beq.n	800d1c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1c0:	711a      	strb	r2, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d006      	beq.n	800d1da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1d4:	711a      	strb	r2, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2243      	movs	r2, #67	; 0x43
 800d1de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1e0:	4b02      	ldr	r3, [pc, #8]	; (800d1ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20000050 	.word	0x20000050

0800d1f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1f8:	2182      	movs	r1, #130	; 0x82
 800d1fa:	4818      	ldr	r0, [pc, #96]	; (800d25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d1fc:	f000 fd17 	bl	800dc2e <USBD_GetEpDesc>
 800d200:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d202:	2101      	movs	r1, #1
 800d204:	4815      	ldr	r0, [pc, #84]	; (800d25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d206:	f000 fd12 	bl	800dc2e <USBD_GetEpDesc>
 800d20a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d20c:	2181      	movs	r1, #129	; 0x81
 800d20e:	4813      	ldr	r0, [pc, #76]	; (800d25c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d210:	f000 fd0d 	bl	800dc2e <USBD_GetEpDesc>
 800d214:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2210      	movs	r2, #16
 800d220:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	2200      	movs	r2, #0
 800d22c:	711a      	strb	r2, [r3, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f042 0202 	orr.w	r2, r2, #2
 800d234:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2200      	movs	r2, #0
 800d240:	711a      	strb	r2, [r3, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	f042 0202 	orr.w	r2, r2, #2
 800d248:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2243      	movs	r2, #67	; 0x43
 800d24e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d250:	4b02      	ldr	r3, [pc, #8]	; (800d25c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	20000050 	.word	0x20000050

0800d260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d268:	2182      	movs	r1, #130	; 0x82
 800d26a:	4818      	ldr	r0, [pc, #96]	; (800d2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d26c:	f000 fcdf 	bl	800dc2e <USBD_GetEpDesc>
 800d270:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d272:	2101      	movs	r1, #1
 800d274:	4815      	ldr	r0, [pc, #84]	; (800d2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d276:	f000 fcda 	bl	800dc2e <USBD_GetEpDesc>
 800d27a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d27c:	2181      	movs	r1, #129	; 0x81
 800d27e:	4813      	ldr	r0, [pc, #76]	; (800d2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d280:	f000 fcd5 	bl	800dc2e <USBD_GetEpDesc>
 800d284:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	2210      	movs	r2, #16
 800d290:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2a0:	711a      	strb	r2, [r3, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d006      	beq.n	800d2ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2b4:	711a      	strb	r2, [r3, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2243      	movs	r2, #67	; 0x43
 800d2be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2c0:	4b02      	ldr	r3, [pc, #8]	; (800d2cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3718      	adds	r7, #24
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000050 	.word	0x20000050

0800d2d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	220a      	movs	r2, #10
 800d2dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d2de:	4b03      	ldr	r3, [pc, #12]	; (800d2ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	2000000c 	.word	0x2000000c

0800d2f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d300:	2303      	movs	r3, #3
 800d302:	e009      	b.n	800d318 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	33b0      	adds	r3, #176	; 0xb0
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	32b0      	adds	r2, #176	; 0xb0
 800d33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d346:	2303      	movs	r3, #3
 800d348:	e008      	b.n	800d35c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	371c      	adds	r7, #28
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	32b0      	adds	r2, #176	; 0xb0
 800d37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d101      	bne.n	800d38c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d388:	2303      	movs	r3, #3
 800d38a:	e004      	b.n	800d396 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d394:	2300      	movs	r3, #0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	32b0      	adds	r2, #176	; 0xb0
 800d3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	32b0      	adds	r2, #176	; 0xb0
 800d3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d101      	bne.n	800d3d6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	e025      	b.n	800d422 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d11f      	bne.n	800d420 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d3e8:	4b10      	ldr	r3, [pc, #64]	; (800d42c <USBD_CDC_TransmitPacket+0x88>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	f003 020f 	and.w	r2, r3, #15
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	4403      	add	r3, r0
 800d402:	3318      	adds	r3, #24
 800d404:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d406:	4b09      	ldr	r3, [pc, #36]	; (800d42c <USBD_CDC_TransmitPacket+0x88>)
 800d408:	7819      	ldrb	r1, [r3, #0]
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f003 fefd 	bl	8011216 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20000093 	.word	0x20000093

0800d430 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	32b0      	adds	r2, #176	; 0xb0
 800d442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d446:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	32b0      	adds	r2, #176	; 0xb0
 800d452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e018      	b.n	800d490 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7c1b      	ldrb	r3, [r3, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10a      	bne.n	800d47c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d466:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <USBD_CDC_ReceivePacket+0x68>)
 800d468:	7819      	ldrb	r1, [r3, #0]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d470:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f003 feef 	bl	8011258 <USBD_LL_PrepareReceive>
 800d47a:	e008      	b.n	800d48e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <USBD_CDC_ReceivePacket+0x68>)
 800d47e:	7819      	ldrb	r1, [r3, #0]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d486:	2340      	movs	r3, #64	; 0x40
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f003 fee5 	bl	8011258 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000094 	.word	0x20000094

0800d49c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e01f      	b.n	800d4f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	79fa      	ldrb	r2, [r7, #7]
 800d4e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f003 fd5f 	bl	8010fac <USBD_LL_Init>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d506:	2300      	movs	r3, #0
 800d508:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d510:	2303      	movs	r3, #3
 800d512:	e025      	b.n	800d560 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	683a      	ldr	r2, [r7, #0]
 800d518:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	32ae      	adds	r2, #174	; 0xae
 800d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00f      	beq.n	800d550 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	32ae      	adds	r2, #174	; 0xae
 800d53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	f107 020e 	add.w	r2, r7, #14
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
 800d548:	4602      	mov	r2, r0
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f003 fd67 	bl	8011044 <USBD_LL_Start>
 800d576:	4603      	mov	r3, r0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d588:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d009      	beq.n	800d5c4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	78fa      	ldrb	r2, [r7, #3]
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	4798      	blx	r3
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b084      	sub	sp, #16
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	4798      	blx	r3
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b084      	sub	sp, #16
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	4618      	mov	r0, r3
 800d616:	f001 f908 	bl	800e82a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d628:	461a      	mov	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d636:	f003 031f 	and.w	r3, r3, #31
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d01a      	beq.n	800d674 <USBD_LL_SetupStage+0x72>
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d822      	bhi.n	800d688 <USBD_LL_SetupStage+0x86>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <USBD_LL_SetupStage+0x4a>
 800d646:	2b01      	cmp	r3, #1
 800d648:	d00a      	beq.n	800d660 <USBD_LL_SetupStage+0x5e>
 800d64a:	e01d      	b.n	800d688 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fb5f 	bl	800dd18 <USBD_StdDevReq>
 800d65a:	4603      	mov	r3, r0
 800d65c:	73fb      	strb	r3, [r7, #15]
      break;
 800d65e:	e020      	b.n	800d6a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fbc7 	bl	800ddfc <USBD_StdItfReq>
 800d66e:	4603      	mov	r3, r0
 800d670:	73fb      	strb	r3, [r7, #15]
      break;
 800d672:	e016      	b.n	800d6a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fc29 	bl	800ded4 <USBD_StdEPReq>
 800d682:	4603      	mov	r3, r0
 800d684:	73fb      	strb	r3, [r7, #15]
      break;
 800d686:	e00c      	b.n	800d6a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d68e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d692:	b2db      	uxtb	r3, r3
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f003 fd34 	bl	8011104 <USBD_LL_StallEP>
 800d69c:	4603      	mov	r3, r0
 800d69e:	73fb      	strb	r3, [r7, #15]
      break;
 800d6a0:	bf00      	nop
  }

  return ret;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d16e      	bne.n	800d7a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d6ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	f040 8098 	bne.w	800d808 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	689a      	ldr	r2, [r3, #8]
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d913      	bls.n	800d70c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	1ad2      	subs	r2, r2, r3
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	bf28      	it	cs
 800d6fe:	4613      	movcs	r3, r2
 800d700:	461a      	mov	r2, r3
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f001 f984 	bl	800ea12 <USBD_CtlContinueRx>
 800d70a:	e07d      	b.n	800d808 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d712:	f003 031f 	and.w	r3, r3, #31
 800d716:	2b02      	cmp	r3, #2
 800d718:	d014      	beq.n	800d744 <USBD_LL_DataOutStage+0x98>
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d81d      	bhi.n	800d75a <USBD_LL_DataOutStage+0xae>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <USBD_LL_DataOutStage+0x7c>
 800d722:	2b01      	cmp	r3, #1
 800d724:	d003      	beq.n	800d72e <USBD_LL_DataOutStage+0x82>
 800d726:	e018      	b.n	800d75a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d728:	2300      	movs	r3, #0
 800d72a:	75bb      	strb	r3, [r7, #22]
            break;
 800d72c:	e018      	b.n	800d760 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d734:	b2db      	uxtb	r3, r3
 800d736:	4619      	mov	r1, r3
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f000 fa5e 	bl	800dbfa <USBD_CoreFindIF>
 800d73e:	4603      	mov	r3, r0
 800d740:	75bb      	strb	r3, [r7, #22]
            break;
 800d742:	e00d      	b.n	800d760 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	4619      	mov	r1, r3
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 fa60 	bl	800dc14 <USBD_CoreFindEP>
 800d754:	4603      	mov	r3, r0
 800d756:	75bb      	strb	r3, [r7, #22]
            break;
 800d758:	e002      	b.n	800d760 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	75bb      	strb	r3, [r7, #22]
            break;
 800d75e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d760:	7dbb      	ldrb	r3, [r7, #22]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d119      	bne.n	800d79a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b03      	cmp	r3, #3
 800d770:	d113      	bne.n	800d79a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d772:	7dba      	ldrb	r2, [r7, #22]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	32ae      	adds	r2, #174	; 0xae
 800d778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00b      	beq.n	800d79a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d782:	7dba      	ldrb	r2, [r7, #22]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d78a:	7dba      	ldrb	r2, [r7, #22]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	32ae      	adds	r2, #174	; 0xae
 800d790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f001 f94a 	bl	800ea34 <USBD_CtlSendStatus>
 800d7a0:	e032      	b.n	800d808 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
 800d7a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f000 fa31 	bl	800dc14 <USBD_CoreFindEP>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7b6:	7dbb      	ldrb	r3, [r7, #22]
 800d7b8:	2bff      	cmp	r3, #255	; 0xff
 800d7ba:	d025      	beq.n	800d808 <USBD_LL_DataOutStage+0x15c>
 800d7bc:	7dbb      	ldrb	r3, [r7, #22]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d122      	bne.n	800d808 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d117      	bne.n	800d7fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d7ce:	7dba      	ldrb	r2, [r7, #22]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	32ae      	adds	r2, #174	; 0xae
 800d7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00f      	beq.n	800d7fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d7de:	7dba      	ldrb	r2, [r7, #22]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d7e6:	7dba      	ldrb	r2, [r7, #22]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	32ae      	adds	r2, #174	; 0xae
 800d7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	7afa      	ldrb	r2, [r7, #11]
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	4798      	blx	r3
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d7fe:	7dfb      	ldrb	r3, [r7, #23]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d804:	7dfb      	ldrb	r3, [r7, #23]
 800d806:	e000      	b.n	800d80a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b086      	sub	sp, #24
 800d816:	af00      	add	r7, sp, #0
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	460b      	mov	r3, r1
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d820:	7afb      	ldrb	r3, [r7, #11]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d16f      	bne.n	800d906 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3314      	adds	r3, #20
 800d82a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d832:	2b02      	cmp	r3, #2
 800d834:	d15a      	bne.n	800d8ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	689a      	ldr	r2, [r3, #8]
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d914      	bls.n	800d86c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	689a      	ldr	r2, [r3, #8]
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	461a      	mov	r2, r3
 800d856:	6879      	ldr	r1, [r7, #4]
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f001 f8ac 	bl	800e9b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d85e:	2300      	movs	r3, #0
 800d860:	2200      	movs	r2, #0
 800d862:	2100      	movs	r1, #0
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f003 fcf7 	bl	8011258 <USBD_LL_PrepareReceive>
 800d86a:	e03f      	b.n	800d8ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	429a      	cmp	r2, r3
 800d876:	d11c      	bne.n	800d8b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d880:	429a      	cmp	r2, r3
 800d882:	d316      	bcc.n	800d8b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d88e:	429a      	cmp	r2, r3
 800d890:	d20f      	bcs.n	800d8b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d892:	2200      	movs	r2, #0
 800d894:	2100      	movs	r1, #0
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f001 f88d 	bl	800e9b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f003 fcd4 	bl	8011258 <USBD_LL_PrepareReceive>
 800d8b0:	e01c      	b.n	800d8ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	2b03      	cmp	r3, #3
 800d8bc:	d10f      	bne.n	800d8de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d009      	beq.n	800d8de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8de:	2180      	movs	r1, #128	; 0x80
 800d8e0:	68f8      	ldr	r0, [r7, #12]
 800d8e2:	f003 fc0f 	bl	8011104 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f001 f8b7 	bl	800ea5a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d03a      	beq.n	800d96c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff fe42 	bl	800d580 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d904:	e032      	b.n	800d96c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d906:	7afb      	ldrb	r3, [r7, #11]
 800d908:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	4619      	mov	r1, r3
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f000 f97f 	bl	800dc14 <USBD_CoreFindEP>
 800d916:	4603      	mov	r3, r0
 800d918:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	2bff      	cmp	r3, #255	; 0xff
 800d91e:	d025      	beq.n	800d96c <USBD_LL_DataInStage+0x15a>
 800d920:	7dfb      	ldrb	r3, [r7, #23]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d122      	bne.n	800d96c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b03      	cmp	r3, #3
 800d930:	d11c      	bne.n	800d96c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d932:	7dfa      	ldrb	r2, [r7, #23]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	32ae      	adds	r2, #174	; 0xae
 800d938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d014      	beq.n	800d96c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d942:	7dfa      	ldrb	r2, [r7, #23]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d94a:	7dfa      	ldrb	r2, [r7, #23]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	32ae      	adds	r2, #174	; 0xae
 800d950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	7afa      	ldrb	r2, [r7, #11]
 800d958:	4611      	mov	r1, r2
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	4798      	blx	r3
 800d95e:	4603      	mov	r3, r0
 800d960:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d962:	7dbb      	ldrb	r3, [r7, #22]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d001      	beq.n	800d96c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d968:	7dbb      	ldrb	r3, [r7, #22]
 800d96a:	e000      	b.n	800d96e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3718      	adds	r7, #24
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b084      	sub	sp, #16
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d014      	beq.n	800d9dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00e      	beq.n	800d9dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	6852      	ldr	r2, [r2, #4]
 800d9ca:	b2d2      	uxtb	r2, r2
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	4798      	blx	r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d001      	beq.n	800d9dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9dc:	2340      	movs	r3, #64	; 0x40
 800d9de:	2200      	movs	r2, #0
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f003 fb49 	bl	801107a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2240      	movs	r2, #64	; 0x40
 800d9f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9f8:	2340      	movs	r3, #64	; 0x40
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	2180      	movs	r1, #128	; 0x80
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f003 fb3b 	bl	801107a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2240      	movs	r2, #64	; 0x40
 800da0e:	621a      	str	r2, [r3, #32]

  return ret;
 800da10:	7bfb      	ldrb	r3, [r7, #15]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	78fa      	ldrb	r2, [r7, #3]
 800da2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2204      	movs	r2, #4
 800da54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da74:	b2db      	uxtb	r3, r3
 800da76:	2b04      	cmp	r3, #4
 800da78:	d106      	bne.n	800da88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da80:	b2da      	uxtb	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	d110      	bne.n	800dacc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac6:	69db      	ldr	r3, [r3, #28]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	32ae      	adds	r2, #174	; 0xae
 800daec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e01c      	b.n	800db32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b03      	cmp	r3, #3
 800db02:	d115      	bne.n	800db30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	32ae      	adds	r2, #174	; 0xae
 800db0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db12:	6a1b      	ldr	r3, [r3, #32]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00b      	beq.n	800db30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	32ae      	adds	r2, #174	; 0xae
 800db22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	78fa      	ldrb	r2, [r7, #3]
 800db2a:	4611      	mov	r1, r2
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b082      	sub	sp, #8
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	460b      	mov	r3, r1
 800db44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	32ae      	adds	r2, #174	; 0xae
 800db50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800db58:	2303      	movs	r3, #3
 800db5a:	e01c      	b.n	800db96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b03      	cmp	r3, #3
 800db66:	d115      	bne.n	800db94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	32ae      	adds	r2, #174	; 0xae
 800db72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00b      	beq.n	800db94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	32ae      	adds	r2, #174	; 0xae
 800db86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8c:	78fa      	ldrb	r2, [r7, #3]
 800db8e:	4611      	mov	r1, r2
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00e      	beq.n	800dbf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	6852      	ldr	r2, [r2, #4]
 800dbde:	b2d2      	uxtb	r2, r2
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	4798      	blx	r3
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dbec:	2303      	movs	r3, #3
 800dbee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dc06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dc20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	370c      	adds	r7, #12
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	460b      	mov	r3, r1
 800dc38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	885b      	ldrh	r3, [r3, #2]
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d920      	bls.n	800dc98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dc5e:	e013      	b.n	800dc88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dc60:	f107 030a 	add.w	r3, r7, #10
 800dc64:	4619      	mov	r1, r3
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	f000 f81b 	bl	800dca2 <USBD_GetNextDesc>
 800dc6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	785b      	ldrb	r3, [r3, #1]
 800dc72:	2b05      	cmp	r3, #5
 800dc74:	d108      	bne.n	800dc88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	789b      	ldrb	r3, [r3, #2]
 800dc7e:	78fa      	ldrb	r2, [r7, #3]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d008      	beq.n	800dc96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	885b      	ldrh	r3, [r3, #2]
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	897b      	ldrh	r3, [r7, #10]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d8e5      	bhi.n	800dc60 <USBD_GetEpDesc+0x32>
 800dc94:	e000      	b.n	800dc98 <USBD_GetEpDesc+0x6a>
          break;
 800dc96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dc98:	693b      	ldr	r3, [r7, #16]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3718      	adds	r7, #24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b085      	sub	sp, #20
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	881a      	ldrh	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4413      	add	r3, r2
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4413      	add	r3, r2
 800dccc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dcce:	68fb      	ldr	r3, [r7, #12]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3714      	adds	r7, #20
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b087      	sub	sp, #28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dcfa:	8a3b      	ldrh	r3, [r7, #16]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	b21a      	sxth	r2, r3
 800dd00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	b21b      	sxth	r3, r3
 800dd08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dd0a:	89fb      	ldrh	r3, [r7, #14]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	371c      	adds	r7, #28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd2e:	2b40      	cmp	r3, #64	; 0x40
 800dd30:	d005      	beq.n	800dd3e <USBD_StdDevReq+0x26>
 800dd32:	2b40      	cmp	r3, #64	; 0x40
 800dd34:	d857      	bhi.n	800dde6 <USBD_StdDevReq+0xce>
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00f      	beq.n	800dd5a <USBD_StdDevReq+0x42>
 800dd3a:	2b20      	cmp	r3, #32
 800dd3c:	d153      	bne.n	800dde6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	32ae      	adds	r2, #174	; 0xae
 800dd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	4798      	blx	r3
 800dd54:	4603      	mov	r3, r0
 800dd56:	73fb      	strb	r3, [r7, #15]
      break;
 800dd58:	e04a      	b.n	800ddf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	785b      	ldrb	r3, [r3, #1]
 800dd5e:	2b09      	cmp	r3, #9
 800dd60:	d83b      	bhi.n	800ddda <USBD_StdDevReq+0xc2>
 800dd62:	a201      	add	r2, pc, #4	; (adr r2, 800dd68 <USBD_StdDevReq+0x50>)
 800dd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd68:	0800ddbd 	.word	0x0800ddbd
 800dd6c:	0800ddd1 	.word	0x0800ddd1
 800dd70:	0800dddb 	.word	0x0800dddb
 800dd74:	0800ddc7 	.word	0x0800ddc7
 800dd78:	0800dddb 	.word	0x0800dddb
 800dd7c:	0800dd9b 	.word	0x0800dd9b
 800dd80:	0800dd91 	.word	0x0800dd91
 800dd84:	0800dddb 	.word	0x0800dddb
 800dd88:	0800ddb3 	.word	0x0800ddb3
 800dd8c:	0800dda5 	.word	0x0800dda5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dd90:	6839      	ldr	r1, [r7, #0]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fa3c 	bl	800e210 <USBD_GetDescriptor>
          break;
 800dd98:	e024      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dd9a:	6839      	ldr	r1, [r7, #0]
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 fba1 	bl	800e4e4 <USBD_SetAddress>
          break;
 800dda2:	e01f      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fbe0 	bl	800e56c <USBD_SetConfig>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]
          break;
 800ddb0:	e018      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fc83 	bl	800e6c0 <USBD_GetConfig>
          break;
 800ddba:	e013      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fcb4 	bl	800e72c <USBD_GetStatus>
          break;
 800ddc4:	e00e      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fce3 	bl	800e794 <USBD_SetFeature>
          break;
 800ddce:	e009      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 fd07 	bl	800e7e6 <USBD_ClrFeature>
          break;
 800ddd8:	e004      	b.n	800dde4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 fd5e 	bl	800e89e <USBD_CtlError>
          break;
 800dde2:	bf00      	nop
      }
      break;
 800dde4:	e004      	b.n	800ddf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 fd58 	bl	800e89e <USBD_CtlError>
      break;
 800ddee:	bf00      	nop
  }

  return ret;
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop

0800ddfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de12:	2b40      	cmp	r3, #64	; 0x40
 800de14:	d005      	beq.n	800de22 <USBD_StdItfReq+0x26>
 800de16:	2b40      	cmp	r3, #64	; 0x40
 800de18:	d852      	bhi.n	800dec0 <USBD_StdItfReq+0xc4>
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d001      	beq.n	800de22 <USBD_StdItfReq+0x26>
 800de1e:	2b20      	cmp	r3, #32
 800de20:	d14e      	bne.n	800dec0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	3b01      	subs	r3, #1
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d840      	bhi.n	800deb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	889b      	ldrh	r3, [r3, #4]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b01      	cmp	r3, #1
 800de38:	d836      	bhi.n	800dea8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	889b      	ldrh	r3, [r3, #4]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	4619      	mov	r1, r3
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff fed9 	bl	800dbfa <USBD_CoreFindIF>
 800de48:	4603      	mov	r3, r0
 800de4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de4c:	7bbb      	ldrb	r3, [r7, #14]
 800de4e:	2bff      	cmp	r3, #255	; 0xff
 800de50:	d01d      	beq.n	800de8e <USBD_StdItfReq+0x92>
 800de52:	7bbb      	ldrb	r3, [r7, #14]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d11a      	bne.n	800de8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800de58:	7bba      	ldrb	r2, [r7, #14]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	32ae      	adds	r2, #174	; 0xae
 800de5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00f      	beq.n	800de88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800de68:	7bba      	ldrb	r2, [r7, #14]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de70:	7bba      	ldrb	r2, [r7, #14]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	32ae      	adds	r2, #174	; 0xae
 800de76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	6839      	ldr	r1, [r7, #0]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	4798      	blx	r3
 800de82:	4603      	mov	r3, r0
 800de84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800de86:	e004      	b.n	800de92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800de88:	2303      	movs	r3, #3
 800de8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800de8c:	e001      	b.n	800de92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800de8e:	2303      	movs	r3, #3
 800de90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	88db      	ldrh	r3, [r3, #6]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d110      	bne.n	800debc <USBD_StdItfReq+0xc0>
 800de9a:	7bfb      	ldrb	r3, [r7, #15]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10d      	bne.n	800debc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 fdc7 	bl	800ea34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dea6:	e009      	b.n	800debc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dea8:	6839      	ldr	r1, [r7, #0]
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fcf7 	bl	800e89e <USBD_CtlError>
          break;
 800deb0:	e004      	b.n	800debc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fcf2 	bl	800e89e <USBD_CtlError>
          break;
 800deba:	e000      	b.n	800debe <USBD_StdItfReq+0xc2>
          break;
 800debc:	bf00      	nop
      }
      break;
 800debe:	e004      	b.n	800deca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dec0:	6839      	ldr	r1, [r7, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fceb 	bl	800e89e <USBD_CtlError>
      break;
 800dec8:	bf00      	nop
  }

  return ret;
 800deca:	7bfb      	ldrb	r3, [r7, #15]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dede:	2300      	movs	r3, #0
 800dee0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	889b      	ldrh	r3, [r3, #4]
 800dee6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800def0:	2b40      	cmp	r3, #64	; 0x40
 800def2:	d007      	beq.n	800df04 <USBD_StdEPReq+0x30>
 800def4:	2b40      	cmp	r3, #64	; 0x40
 800def6:	f200 817f 	bhi.w	800e1f8 <USBD_StdEPReq+0x324>
 800defa:	2b00      	cmp	r3, #0
 800defc:	d02a      	beq.n	800df54 <USBD_StdEPReq+0x80>
 800defe:	2b20      	cmp	r3, #32
 800df00:	f040 817a 	bne.w	800e1f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800df04:	7bbb      	ldrb	r3, [r7, #14]
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff fe83 	bl	800dc14 <USBD_CoreFindEP>
 800df0e:	4603      	mov	r3, r0
 800df10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df12:	7b7b      	ldrb	r3, [r7, #13]
 800df14:	2bff      	cmp	r3, #255	; 0xff
 800df16:	f000 8174 	beq.w	800e202 <USBD_StdEPReq+0x32e>
 800df1a:	7b7b      	ldrb	r3, [r7, #13]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f040 8170 	bne.w	800e202 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800df22:	7b7a      	ldrb	r2, [r7, #13]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800df2a:	7b7a      	ldrb	r2, [r7, #13]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	32ae      	adds	r2, #174	; 0xae
 800df30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 8163 	beq.w	800e202 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800df3c:	7b7a      	ldrb	r2, [r7, #13]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	32ae      	adds	r2, #174	; 0xae
 800df42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	4798      	blx	r3
 800df4e:	4603      	mov	r3, r0
 800df50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800df52:	e156      	b.n	800e202 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	785b      	ldrb	r3, [r3, #1]
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d008      	beq.n	800df6e <USBD_StdEPReq+0x9a>
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	f300 8145 	bgt.w	800e1ec <USBD_StdEPReq+0x318>
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 809b 	beq.w	800e09e <USBD_StdEPReq+0x1ca>
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d03c      	beq.n	800dfe6 <USBD_StdEPReq+0x112>
 800df6c:	e13e      	b.n	800e1ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df74:	b2db      	uxtb	r3, r3
 800df76:	2b02      	cmp	r3, #2
 800df78:	d002      	beq.n	800df80 <USBD_StdEPReq+0xac>
 800df7a:	2b03      	cmp	r3, #3
 800df7c:	d016      	beq.n	800dfac <USBD_StdEPReq+0xd8>
 800df7e:	e02c      	b.n	800dfda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df80:	7bbb      	ldrb	r3, [r7, #14]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00d      	beq.n	800dfa2 <USBD_StdEPReq+0xce>
 800df86:	7bbb      	ldrb	r3, [r7, #14]
 800df88:	2b80      	cmp	r3, #128	; 0x80
 800df8a:	d00a      	beq.n	800dfa2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f003 f8b7 	bl	8011104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df96:	2180      	movs	r1, #128	; 0x80
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f003 f8b3 	bl	8011104 <USBD_LL_StallEP>
 800df9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfa0:	e020      	b.n	800dfe4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fc7a 	bl	800e89e <USBD_CtlError>
              break;
 800dfaa:	e01b      	b.n	800dfe4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	885b      	ldrh	r3, [r3, #2]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10e      	bne.n	800dfd2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dfb4:	7bbb      	ldrb	r3, [r7, #14]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00b      	beq.n	800dfd2 <USBD_StdEPReq+0xfe>
 800dfba:	7bbb      	ldrb	r3, [r7, #14]
 800dfbc:	2b80      	cmp	r3, #128	; 0x80
 800dfbe:	d008      	beq.n	800dfd2 <USBD_StdEPReq+0xfe>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	88db      	ldrh	r3, [r3, #6]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d104      	bne.n	800dfd2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f003 f899 	bl	8011104 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fd2e 	bl	800ea34 <USBD_CtlSendStatus>

              break;
 800dfd8:	e004      	b.n	800dfe4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 fc5e 	bl	800e89e <USBD_CtlError>
              break;
 800dfe2:	bf00      	nop
          }
          break;
 800dfe4:	e107      	b.n	800e1f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	d002      	beq.n	800dff8 <USBD_StdEPReq+0x124>
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d016      	beq.n	800e024 <USBD_StdEPReq+0x150>
 800dff6:	e04b      	b.n	800e090 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dff8:	7bbb      	ldrb	r3, [r7, #14]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00d      	beq.n	800e01a <USBD_StdEPReq+0x146>
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
 800e000:	2b80      	cmp	r3, #128	; 0x80
 800e002:	d00a      	beq.n	800e01a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	4619      	mov	r1, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f003 f87b 	bl	8011104 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e00e:	2180      	movs	r1, #128	; 0x80
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f003 f877 	bl	8011104 <USBD_LL_StallEP>
 800e016:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e018:	e040      	b.n	800e09c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e01a:	6839      	ldr	r1, [r7, #0]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fc3e 	bl	800e89e <USBD_CtlError>
              break;
 800e022:	e03b      	b.n	800e09c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	885b      	ldrh	r3, [r3, #2]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d136      	bne.n	800e09a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e02c:	7bbb      	ldrb	r3, [r7, #14]
 800e02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e032:	2b00      	cmp	r3, #0
 800e034:	d004      	beq.n	800e040 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e036:	7bbb      	ldrb	r3, [r7, #14]
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f003 f881 	bl	8011142 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fcf7 	bl	800ea34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff fde2 	bl	800dc14 <USBD_CoreFindEP>
 800e050:	4603      	mov	r3, r0
 800e052:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e054:	7b7b      	ldrb	r3, [r7, #13]
 800e056:	2bff      	cmp	r3, #255	; 0xff
 800e058:	d01f      	beq.n	800e09a <USBD_StdEPReq+0x1c6>
 800e05a:	7b7b      	ldrb	r3, [r7, #13]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d11c      	bne.n	800e09a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e060:	7b7a      	ldrb	r2, [r7, #13]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e068:	7b7a      	ldrb	r2, [r7, #13]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	32ae      	adds	r2, #174	; 0xae
 800e06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d010      	beq.n	800e09a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e078:	7b7a      	ldrb	r2, [r7, #13]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	32ae      	adds	r2, #174	; 0xae
 800e07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	4798      	blx	r3
 800e08a:	4603      	mov	r3, r0
 800e08c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e08e:	e004      	b.n	800e09a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fc03 	bl	800e89e <USBD_CtlError>
              break;
 800e098:	e000      	b.n	800e09c <USBD_StdEPReq+0x1c8>
              break;
 800e09a:	bf00      	nop
          }
          break;
 800e09c:	e0ab      	b.n	800e1f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d002      	beq.n	800e0b0 <USBD_StdEPReq+0x1dc>
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d032      	beq.n	800e114 <USBD_StdEPReq+0x240>
 800e0ae:	e097      	b.n	800e1e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0b0:	7bbb      	ldrb	r3, [r7, #14]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d007      	beq.n	800e0c6 <USBD_StdEPReq+0x1f2>
 800e0b6:	7bbb      	ldrb	r3, [r7, #14]
 800e0b8:	2b80      	cmp	r3, #128	; 0x80
 800e0ba:	d004      	beq.n	800e0c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fbed 	bl	800e89e <USBD_CtlError>
                break;
 800e0c4:	e091      	b.n	800e1ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	da0b      	bge.n	800e0e6 <USBD_StdEPReq+0x212>
 800e0ce:	7bbb      	ldrb	r3, [r7, #14]
 800e0d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	3310      	adds	r3, #16
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	e00b      	b.n	800e0fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0e6:	7bbb      	ldrb	r3, [r7, #14]
 800e0e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2202      	movs	r2, #2
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 fc37 	bl	800e980 <USBD_CtlSendData>
              break;
 800e112:	e06a      	b.n	800e1ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	da11      	bge.n	800e140 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e11c:	7bbb      	ldrb	r3, [r7, #14]
 800e11e:	f003 020f 	and.w	r2, r3, #15
 800e122:	6879      	ldr	r1, [r7, #4]
 800e124:	4613      	mov	r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	440b      	add	r3, r1
 800e12e:	3324      	adds	r3, #36	; 0x24
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d117      	bne.n	800e166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fbb0 	bl	800e89e <USBD_CtlError>
                  break;
 800e13e:	e054      	b.n	800e1ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	f003 020f 	and.w	r2, r3, #15
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	4613      	mov	r3, r2
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	440b      	add	r3, r1
 800e152:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fb9d 	bl	800e89e <USBD_CtlError>
                  break;
 800e164:	e041      	b.n	800e1ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	da0b      	bge.n	800e186 <USBD_StdEPReq+0x2b2>
 800e16e:	7bbb      	ldrb	r3, [r7, #14]
 800e170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	3310      	adds	r3, #16
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	4413      	add	r3, r2
 800e182:	3304      	adds	r3, #4
 800e184:	e00b      	b.n	800e19e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e186:	7bbb      	ldrb	r3, [r7, #14]
 800e188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e18c:	4613      	mov	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	4413      	add	r3, r2
 800e19c:	3304      	adds	r3, #4
 800e19e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e1a0:	7bbb      	ldrb	r3, [r7, #14]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <USBD_StdEPReq+0x2d8>
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
 800e1a8:	2b80      	cmp	r3, #128	; 0x80
 800e1aa:	d103      	bne.n	800e1b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	601a      	str	r2, [r3, #0]
 800e1b2:	e00e      	b.n	800e1d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f002 ffe1 	bl	8011180 <USBD_LL_IsStallEP>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d003      	beq.n	800e1cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e002      	b.n	800e1d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	2202      	movs	r2, #2
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 fbd1 	bl	800e980 <USBD_CtlSendData>
              break;
 800e1de:	e004      	b.n	800e1ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb5b 	bl	800e89e <USBD_CtlError>
              break;
 800e1e8:	bf00      	nop
          }
          break;
 800e1ea:	e004      	b.n	800e1f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fb55 	bl	800e89e <USBD_CtlError>
          break;
 800e1f4:	bf00      	nop
      }
      break;
 800e1f6:	e005      	b.n	800e204 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fb4f 	bl	800e89e <USBD_CtlError>
      break;
 800e200:	e000      	b.n	800e204 <USBD_StdEPReq+0x330>
      break;
 800e202:	bf00      	nop
  }

  return ret;
 800e204:	7bfb      	ldrb	r3, [r7, #15]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e21a:	2300      	movs	r3, #0
 800e21c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e21e:	2300      	movs	r3, #0
 800e220:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e222:	2300      	movs	r3, #0
 800e224:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	885b      	ldrh	r3, [r3, #2]
 800e22a:	0a1b      	lsrs	r3, r3, #8
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	3b01      	subs	r3, #1
 800e230:	2b06      	cmp	r3, #6
 800e232:	f200 8128 	bhi.w	800e486 <USBD_GetDescriptor+0x276>
 800e236:	a201      	add	r2, pc, #4	; (adr r2, 800e23c <USBD_GetDescriptor+0x2c>)
 800e238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23c:	0800e259 	.word	0x0800e259
 800e240:	0800e271 	.word	0x0800e271
 800e244:	0800e2b1 	.word	0x0800e2b1
 800e248:	0800e487 	.word	0x0800e487
 800e24c:	0800e487 	.word	0x0800e487
 800e250:	0800e427 	.word	0x0800e427
 800e254:	0800e453 	.word	0x0800e453
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	7c12      	ldrb	r2, [r2, #16]
 800e264:	f107 0108 	add.w	r1, r7, #8
 800e268:	4610      	mov	r0, r2
 800e26a:	4798      	blx	r3
 800e26c:	60f8      	str	r0, [r7, #12]
      break;
 800e26e:	e112      	b.n	800e496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	7c1b      	ldrb	r3, [r3, #16]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10d      	bne.n	800e294 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e280:	f107 0208 	add.w	r2, r7, #8
 800e284:	4610      	mov	r0, r2
 800e286:	4798      	blx	r3
 800e288:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3301      	adds	r3, #1
 800e28e:	2202      	movs	r2, #2
 800e290:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e292:	e100      	b.n	800e496 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	f107 0208 	add.w	r2, r7, #8
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	4798      	blx	r3
 800e2a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	701a      	strb	r2, [r3, #0]
      break;
 800e2ae:	e0f2      	b.n	800e496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	885b      	ldrh	r3, [r3, #2]
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2b05      	cmp	r3, #5
 800e2b8:	f200 80ac 	bhi.w	800e414 <USBD_GetDescriptor+0x204>
 800e2bc:	a201      	add	r2, pc, #4	; (adr r2, 800e2c4 <USBD_GetDescriptor+0xb4>)
 800e2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c2:	bf00      	nop
 800e2c4:	0800e2dd 	.word	0x0800e2dd
 800e2c8:	0800e311 	.word	0x0800e311
 800e2cc:	0800e345 	.word	0x0800e345
 800e2d0:	0800e379 	.word	0x0800e379
 800e2d4:	0800e3ad 	.word	0x0800e3ad
 800e2d8:	0800e3e1 	.word	0x0800e3e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	7c12      	ldrb	r2, [r2, #16]
 800e2f4:	f107 0108 	add.w	r1, r7, #8
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fe:	e091      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 facb 	bl	800e89e <USBD_CtlError>
            err++;
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	3301      	adds	r3, #1
 800e30c:	72fb      	strb	r3, [r7, #11]
          break;
 800e30e:	e089      	b.n	800e424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	7c12      	ldrb	r2, [r2, #16]
 800e328:	f107 0108 	add.w	r1, r7, #8
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
 800e330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e332:	e077      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fab1 	bl	800e89e <USBD_CtlError>
            err++;
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	3301      	adds	r3, #1
 800e340:	72fb      	strb	r3, [r7, #11]
          break;
 800e342:	e06f      	b.n	800e424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	7c12      	ldrb	r2, [r2, #16]
 800e35c:	f107 0108 	add.w	r1, r7, #8
 800e360:	4610      	mov	r0, r2
 800e362:	4798      	blx	r3
 800e364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e366:	e05d      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fa97 	bl	800e89e <USBD_CtlError>
            err++;
 800e370:	7afb      	ldrb	r3, [r7, #11]
 800e372:	3301      	adds	r3, #1
 800e374:	72fb      	strb	r3, [r7, #11]
          break;
 800e376:	e055      	b.n	800e424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00b      	beq.n	800e39c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	7c12      	ldrb	r2, [r2, #16]
 800e390:	f107 0108 	add.w	r1, r7, #8
 800e394:	4610      	mov	r0, r2
 800e396:	4798      	blx	r3
 800e398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e39a:	e043      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fa7d 	bl	800e89e <USBD_CtlError>
            err++;
 800e3a4:	7afb      	ldrb	r3, [r7, #11]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e3aa:	e03b      	b.n	800e424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00b      	beq.n	800e3d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	7c12      	ldrb	r2, [r2, #16]
 800e3c4:	f107 0108 	add.w	r1, r7, #8
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	4798      	blx	r3
 800e3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3ce:	e029      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fa63 	bl	800e89e <USBD_CtlError>
            err++;
 800e3d8:	7afb      	ldrb	r3, [r7, #11]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e3de:	e021      	b.n	800e424 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00b      	beq.n	800e404 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	7c12      	ldrb	r2, [r2, #16]
 800e3f8:	f107 0108 	add.w	r1, r7, #8
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
 800e400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e402:	e00f      	b.n	800e424 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fa49 	bl	800e89e <USBD_CtlError>
            err++;
 800e40c:	7afb      	ldrb	r3, [r7, #11]
 800e40e:	3301      	adds	r3, #1
 800e410:	72fb      	strb	r3, [r7, #11]
          break;
 800e412:	e007      	b.n	800e424 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fa41 	bl	800e89e <USBD_CtlError>
          err++;
 800e41c:	7afb      	ldrb	r3, [r7, #11]
 800e41e:	3301      	adds	r3, #1
 800e420:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e422:	bf00      	nop
      }
      break;
 800e424:	e037      	b.n	800e496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7c1b      	ldrb	r3, [r3, #16]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d109      	bne.n	800e442 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e436:	f107 0208 	add.w	r2, r7, #8
 800e43a:	4610      	mov	r0, r2
 800e43c:	4798      	blx	r3
 800e43e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e440:	e029      	b.n	800e496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fa2a 	bl	800e89e <USBD_CtlError>
        err++;
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	3301      	adds	r3, #1
 800e44e:	72fb      	strb	r3, [r7, #11]
      break;
 800e450:	e021      	b.n	800e496 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7c1b      	ldrb	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10d      	bne.n	800e476 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e462:	f107 0208 	add.w	r2, r7, #8
 800e466:	4610      	mov	r0, r2
 800e468:	4798      	blx	r3
 800e46a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	3301      	adds	r3, #1
 800e470:	2207      	movs	r2, #7
 800e472:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e474:	e00f      	b.n	800e496 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e476:	6839      	ldr	r1, [r7, #0]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fa10 	bl	800e89e <USBD_CtlError>
        err++;
 800e47e:	7afb      	ldrb	r3, [r7, #11]
 800e480:	3301      	adds	r3, #1
 800e482:	72fb      	strb	r3, [r7, #11]
      break;
 800e484:	e007      	b.n	800e496 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e486:	6839      	ldr	r1, [r7, #0]
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 fa08 	bl	800e89e <USBD_CtlError>
      err++;
 800e48e:	7afb      	ldrb	r3, [r7, #11]
 800e490:	3301      	adds	r3, #1
 800e492:	72fb      	strb	r3, [r7, #11]
      break;
 800e494:	bf00      	nop
  }

  if (err != 0U)
 800e496:	7afb      	ldrb	r3, [r7, #11]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d11e      	bne.n	800e4da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	88db      	ldrh	r3, [r3, #6]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d016      	beq.n	800e4d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e4a4:	893b      	ldrh	r3, [r7, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00e      	beq.n	800e4c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	88da      	ldrh	r2, [r3, #6]
 800e4ae:	893b      	ldrh	r3, [r7, #8]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	bf28      	it	cs
 800e4b4:	4613      	movcs	r3, r2
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e4ba:	893b      	ldrh	r3, [r7, #8]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	68f9      	ldr	r1, [r7, #12]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fa5d 	bl	800e980 <USBD_CtlSendData>
 800e4c6:	e009      	b.n	800e4dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e4c8:	6839      	ldr	r1, [r7, #0]
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 f9e7 	bl	800e89e <USBD_CtlError>
 800e4d0:	e004      	b.n	800e4dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 faae 	bl	800ea34 <USBD_CtlSendStatus>
 800e4d8:	e000      	b.n	800e4dc <USBD_GetDescriptor+0x2cc>
    return;
 800e4da:	bf00      	nop
  }
}
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop

0800e4e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	889b      	ldrh	r3, [r3, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d131      	bne.n	800e55a <USBD_SetAddress+0x76>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	88db      	ldrh	r3, [r3, #6]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d12d      	bne.n	800e55a <USBD_SetAddress+0x76>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	885b      	ldrh	r3, [r3, #2]
 800e502:	2b7f      	cmp	r3, #127	; 0x7f
 800e504:	d829      	bhi.n	800e55a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	885b      	ldrh	r3, [r3, #2]
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e510:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	d104      	bne.n	800e528 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f9bc 	bl	800e89e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e526:	e01d      	b.n	800e564 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7bfa      	ldrb	r2, [r7, #15]
 800e52c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e530:	7bfb      	ldrb	r3, [r7, #15]
 800e532:	4619      	mov	r1, r3
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f002 fe4f 	bl	80111d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 fa7a 	bl	800ea34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d004      	beq.n	800e550 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e54e:	e009      	b.n	800e564 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e558:	e004      	b.n	800e564 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f99e 	bl	800e89e <USBD_CtlError>
  }
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	885b      	ldrh	r3, [r3, #2]
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	4b4e      	ldr	r3, [pc, #312]	; (800e6bc <USBD_SetConfig+0x150>)
 800e582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e584:	4b4d      	ldr	r3, [pc, #308]	; (800e6bc <USBD_SetConfig+0x150>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d905      	bls.n	800e598 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e58c:	6839      	ldr	r1, [r7, #0]
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f985 	bl	800e89e <USBD_CtlError>
    return USBD_FAIL;
 800e594:	2303      	movs	r3, #3
 800e596:	e08c      	b.n	800e6b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d002      	beq.n	800e5aa <USBD_SetConfig+0x3e>
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d029      	beq.n	800e5fc <USBD_SetConfig+0x90>
 800e5a8:	e075      	b.n	800e696 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e5aa:	4b44      	ldr	r3, [pc, #272]	; (800e6bc <USBD_SetConfig+0x150>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d020      	beq.n	800e5f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e5b2:	4b42      	ldr	r3, [pc, #264]	; (800e6bc <USBD_SetConfig+0x150>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5bc:	4b3f      	ldr	r3, [pc, #252]	; (800e6bc <USBD_SetConfig+0x150>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7fe ffe7 	bl	800d596 <USBD_SetClassConfig>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f962 	bl	800e89e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2202      	movs	r2, #2
 800e5de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5e2:	e065      	b.n	800e6b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa25 	bl	800ea34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2203      	movs	r2, #3
 800e5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e5f2:	e05d      	b.n	800e6b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fa1d 	bl	800ea34 <USBD_CtlSendStatus>
      break;
 800e5fa:	e059      	b.n	800e6b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e5fc:	4b2f      	ldr	r3, [pc, #188]	; (800e6bc <USBD_SetConfig+0x150>)
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d112      	bne.n	800e62a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2202      	movs	r2, #2
 800e608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e60c:	4b2b      	ldr	r3, [pc, #172]	; (800e6bc <USBD_SetConfig+0x150>)
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	461a      	mov	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e616:	4b29      	ldr	r3, [pc, #164]	; (800e6bc <USBD_SetConfig+0x150>)
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	4619      	mov	r1, r3
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7fe ffd6 	bl	800d5ce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fa06 	bl	800ea34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e628:	e042      	b.n	800e6b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e62a:	4b24      	ldr	r3, [pc, #144]	; (800e6bc <USBD_SetConfig+0x150>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	461a      	mov	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	429a      	cmp	r2, r3
 800e636:	d02a      	beq.n	800e68e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7fe ffc4 	bl	800d5ce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e646:	4b1d      	ldr	r3, [pc, #116]	; (800e6bc <USBD_SetConfig+0x150>)
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e650:	4b1a      	ldr	r3, [pc, #104]	; (800e6bc <USBD_SetConfig+0x150>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	4619      	mov	r1, r3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7fe ff9d 	bl	800d596 <USBD_SetClassConfig>
 800e65c:	4603      	mov	r3, r0
 800e65e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e660:	7bfb      	ldrb	r3, [r7, #15]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00f      	beq.n	800e686 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 f918 	bl	800e89e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	4619      	mov	r1, r3
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7fe ffa9 	bl	800d5ce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e684:	e014      	b.n	800e6b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f9d4 	bl	800ea34 <USBD_CtlSendStatus>
      break;
 800e68c:	e010      	b.n	800e6b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f9d0 	bl	800ea34 <USBD_CtlSendStatus>
      break;
 800e694:	e00c      	b.n	800e6b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f900 	bl	800e89e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e69e:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <USBD_SetConfig+0x150>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7fe ff92 	bl	800d5ce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e6ae:	bf00      	nop
  }

  return ret;
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20004ae4 	.word	0x20004ae4

0800e6c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	88db      	ldrh	r3, [r3, #6]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d004      	beq.n	800e6dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f8e2 	bl	800e89e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e6da:	e023      	b.n	800e724 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	dc02      	bgt.n	800e6ee <USBD_GetConfig+0x2e>
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc03      	bgt.n	800e6f4 <USBD_GetConfig+0x34>
 800e6ec:	e015      	b.n	800e71a <USBD_GetConfig+0x5a>
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d00b      	beq.n	800e70a <USBD_GetConfig+0x4a>
 800e6f2:	e012      	b.n	800e71a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3308      	adds	r3, #8
 800e6fe:	2201      	movs	r2, #1
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 f93c 	bl	800e980 <USBD_CtlSendData>
        break;
 800e708:	e00c      	b.n	800e724 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3304      	adds	r3, #4
 800e70e:	2201      	movs	r2, #1
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f934 	bl	800e980 <USBD_CtlSendData>
        break;
 800e718:	e004      	b.n	800e724 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f8be 	bl	800e89e <USBD_CtlError>
        break;
 800e722:	bf00      	nop
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b02      	cmp	r3, #2
 800e742:	d81e      	bhi.n	800e782 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	88db      	ldrh	r3, [r3, #6]
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d004      	beq.n	800e756 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e74c:	6839      	ldr	r1, [r7, #0]
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 f8a5 	bl	800e89e <USBD_CtlError>
        break;
 800e754:	e01a      	b.n	800e78c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e762:	2b00      	cmp	r3, #0
 800e764:	d005      	beq.n	800e772 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	f043 0202 	orr.w	r2, r3, #2
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	330c      	adds	r3, #12
 800e776:	2202      	movs	r2, #2
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 f900 	bl	800e980 <USBD_CtlSendData>
      break;
 800e780:	e004      	b.n	800e78c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e782:	6839      	ldr	r1, [r7, #0]
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 f88a 	bl	800e89e <USBD_CtlError>
      break;
 800e78a:	bf00      	nop
  }
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	885b      	ldrh	r3, [r3, #2]
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d107      	bne.n	800e7b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 f940 	bl	800ea34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e7b4:	e013      	b.n	800e7de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	885b      	ldrh	r3, [r3, #2]
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d10b      	bne.n	800e7d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	889b      	ldrh	r3, [r3, #4]
 800e7c2:	0a1b      	lsrs	r3, r3, #8
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f930 	bl	800ea34 <USBD_CtlSendStatus>
}
 800e7d4:	e003      	b.n	800e7de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 f860 	bl	800e89e <USBD_CtlError>
}
 800e7de:	bf00      	nop
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d80b      	bhi.n	800e816 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	885b      	ldrh	r3, [r3, #2]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d10c      	bne.n	800e820 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f910 	bl	800ea34 <USBD_CtlSendStatus>
      }
      break;
 800e814:	e004      	b.n	800e820 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f840 	bl	800e89e <USBD_CtlError>
      break;
 800e81e:	e000      	b.n	800e822 <USBD_ClrFeature+0x3c>
      break;
 800e820:	bf00      	nop
  }
}
 800e822:	bf00      	nop
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b084      	sub	sp, #16
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	781a      	ldrb	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	3301      	adds	r3, #1
 800e844:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	781a      	ldrb	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3301      	adds	r3, #1
 800e852:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7ff fa41 	bl	800dcdc <SWAPBYTE>
 800e85a:	4603      	mov	r3, r0
 800e85c:	461a      	mov	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	3301      	adds	r3, #1
 800e86c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fa34 	bl	800dcdc <SWAPBYTE>
 800e874:	4603      	mov	r3, r0
 800e876:	461a      	mov	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	3301      	adds	r3, #1
 800e880:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	3301      	adds	r3, #1
 800e886:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7ff fa27 	bl	800dcdc <SWAPBYTE>
 800e88e:	4603      	mov	r3, r0
 800e890:	461a      	mov	r2, r3
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	80da      	strh	r2, [r3, #6]
}
 800e896:	bf00      	nop
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8a8:	2180      	movs	r1, #128	; 0x80
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f002 fc2a 	bl	8011104 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f002 fc26 	bl	8011104 <USBD_LL_StallEP>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d036      	beq.n	800e944 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e8da:	6938      	ldr	r0, [r7, #16]
 800e8dc:	f000 f836 	bl	800e94c <USBD_GetLen>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	7812      	ldrb	r2, [r2, #0]
 800e8f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e900:	7dfb      	ldrb	r3, [r7, #23]
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	4413      	add	r3, r2
 800e906:	2203      	movs	r2, #3
 800e908:	701a      	strb	r2, [r3, #0]
  idx++;
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
 800e90c:	3301      	adds	r3, #1
 800e90e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e910:	e013      	b.n	800e93a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	4413      	add	r3, r2
 800e918:	693a      	ldr	r2, [r7, #16]
 800e91a:	7812      	ldrb	r2, [r2, #0]
 800e91c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	3301      	adds	r3, #1
 800e922:	613b      	str	r3, [r7, #16]
    idx++;
 800e924:	7dfb      	ldrb	r3, [r7, #23]
 800e926:	3301      	adds	r3, #1
 800e928:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	4413      	add	r3, r2
 800e930:	2200      	movs	r2, #0
 800e932:	701a      	strb	r2, [r3, #0]
    idx++;
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	3301      	adds	r3, #1
 800e938:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1e7      	bne.n	800e912 <USBD_GetString+0x52>
 800e942:	e000      	b.n	800e946 <USBD_GetString+0x86>
    return;
 800e944:	bf00      	nop
  }
}
 800e946:	3718      	adds	r7, #24
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e95c:	e005      	b.n	800e96a <USBD_GetLen+0x1e>
  {
    len++;
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	3301      	adds	r3, #1
 800e962:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	3301      	adds	r3, #1
 800e968:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1f5      	bne.n	800e95e <USBD_GetLen+0x12>
  }

  return len;
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3714      	adds	r7, #20
 800e978:	46bd      	mov	sp, r7
 800e97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97e:	4770      	bx	lr

0800e980 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2202      	movs	r2, #2
 800e990:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f002 fc35 	bl	8011216 <USBD_LL_Transmit>

  return USBD_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	60f8      	str	r0, [r7, #12]
 800e9be:	60b9      	str	r1, [r7, #8]
 800e9c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f002 fc24 	bl	8011216 <USBD_LL_Transmit>

  return USBD_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3710      	adds	r7, #16
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2203      	movs	r2, #3
 800e9e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	2100      	movs	r1, #0
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f002 fc28 	bl	8011258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	60f8      	str	r0, [r7, #12]
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	68ba      	ldr	r2, [r7, #8]
 800ea22:	2100      	movs	r1, #0
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f002 fc17 	bl	8011258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3710      	adds	r7, #16
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2204      	movs	r2, #4
 800ea40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ea44:	2300      	movs	r3, #0
 800ea46:	2200      	movs	r2, #0
 800ea48:	2100      	movs	r1, #0
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f002 fbe3 	bl	8011216 <USBD_LL_Transmit>

  return USBD_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b082      	sub	sp, #8
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2205      	movs	r2, #5
 800ea66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	2100      	movs	r1, #0
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f002 fbf1 	bl	8011258 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ea8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea92:	2b84      	cmp	r3, #132	; 0x84
 800ea94:	d005      	beq.n	800eaa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	3303      	adds	r3, #3
 800eaa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eab4:	f000 fe1e 	bl	800f6f4 <vTaskStartScheduler>
  
  return osOK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eabe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eac0:	b089      	sub	sp, #36	; 0x24
 800eac2:	af04      	add	r7, sp, #16
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d020      	beq.n	800eb12 <osThreadCreate+0x54>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d01c      	beq.n	800eb12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685c      	ldr	r4, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681d      	ldr	r5, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	691e      	ldr	r6, [r3, #16]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7ff ffc8 	bl	800ea80 <makeFreeRtosPriority>
 800eaf0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eafa:	9202      	str	r2, [sp, #8]
 800eafc:	9301      	str	r3, [sp, #4]
 800eafe:	9100      	str	r1, [sp, #0]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	4632      	mov	r2, r6
 800eb04:	4629      	mov	r1, r5
 800eb06:	4620      	mov	r0, r4
 800eb08:	f000 fc2c 	bl	800f364 <xTaskCreateStatic>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	60fb      	str	r3, [r7, #12]
 800eb10:	e01c      	b.n	800eb4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	685c      	ldr	r4, [r3, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb1e:	b29e      	uxth	r6, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff ffaa 	bl	800ea80 <makeFreeRtosPriority>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	f107 030c 	add.w	r3, r7, #12
 800eb32:	9301      	str	r3, [sp, #4]
 800eb34:	9200      	str	r2, [sp, #0]
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	4632      	mov	r2, r6
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 fc6e 	bl	800f41e <xTaskCreate>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d001      	beq.n	800eb4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	e000      	b.n	800eb4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3714      	adds	r7, #20
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <osDelay+0x16>
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	e000      	b.n	800eb6e <osDelay+0x18>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fd8c 	bl	800f68c <vTaskDelay>
  
  return osOK;
 800eb74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b086      	sub	sp, #24
 800eb82:	af02      	add	r7, sp, #8
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00f      	beq.n	800ebb0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d10a      	bne.n	800ebac <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	2203      	movs	r2, #3
 800eb9c:	9200      	str	r2, [sp, #0]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2100      	movs	r1, #0
 800eba2:	2001      	movs	r0, #1
 800eba4:	f000 f93a 	bl	800ee1c <xQueueGenericCreateStatic>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	e016      	b.n	800ebda <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ebac:	2300      	movs	r3, #0
 800ebae:	e014      	b.n	800ebda <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d110      	bne.n	800ebd8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ebb6:	2203      	movs	r2, #3
 800ebb8:	2100      	movs	r1, #0
 800ebba:	2001      	movs	r0, #1
 800ebbc:	f000 f9a6 	bl	800ef0c <xQueueGenericCreate>
 800ebc0:	60f8      	str	r0, [r7, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d005      	beq.n	800ebd4 <osSemaphoreCreate+0x56>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2100      	movs	r1, #0
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f9f6 	bl	800efc0 <xQueueGenericSend>
      return sema;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	e000      	b.n	800ebda <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ebd8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b083      	sub	sp, #12
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f103 0208 	add.w	r2, r3, #8
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f103 0208 	add.w	r2, r3, #8
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f103 0208 	add.w	r2, r3, #8
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec16:	bf00      	nop
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	689a      	ldr	r2, [r3, #8]
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]
}
 800ec78:	bf00      	nop
 800ec7a:	3714      	adds	r7, #20
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9a:	d103      	bne.n	800eca4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	e00c      	b.n	800ecbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3308      	adds	r3, #8
 800eca8:	60fb      	str	r3, [r7, #12]
 800ecaa:	e002      	b.n	800ecb2 <vListInsert+0x2e>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d2f6      	bcs.n	800ecac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	1c5a      	adds	r2, r3, #1
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	601a      	str	r2, [r3, #0]
}
 800ecea:	bf00      	nop
 800ecec:	3714      	adds	r7, #20
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr

0800ecf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecf6:	b480      	push	{r7}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	6892      	ldr	r2, [r2, #8]
 800ed0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	6852      	ldr	r2, [r2, #4]
 800ed16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d103      	bne.n	800ed2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	689a      	ldr	r2, [r3, #8]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	1e5a      	subs	r2, r3, #1
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3714      	adds	r7, #20
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
	...

0800ed4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10a      	bne.n	800ed76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed76:	f001 faf5 	bl	8010364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed82:	68f9      	ldr	r1, [r7, #12]
 800ed84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed86:	fb01 f303 	mul.w	r3, r1, r3
 800ed8a:	441a      	add	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2200      	movs	r2, #0
 800ed94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eda6:	3b01      	subs	r3, #1
 800eda8:	68f9      	ldr	r1, [r7, #12]
 800edaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800edac:	fb01 f303 	mul.w	r3, r1, r3
 800edb0:	441a      	add	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	22ff      	movs	r2, #255	; 0xff
 800edba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	22ff      	movs	r2, #255	; 0xff
 800edc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d114      	bne.n	800edf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d01a      	beq.n	800ee0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	3310      	adds	r3, #16
 800edd8:	4618      	mov	r0, r3
 800edda:	f000 fecd 	bl	800fb78 <xTaskRemoveFromEventList>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d012      	beq.n	800ee0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ede4:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <xQueueGenericReset+0xcc>)
 800ede6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edea:	601a      	str	r2, [r3, #0]
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	f3bf 8f6f 	isb	sy
 800edf4:	e009      	b.n	800ee0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	3310      	adds	r3, #16
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7ff fef1 	bl	800ebe2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	3324      	adds	r3, #36	; 0x24
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff feec 	bl	800ebe2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ee0a:	f001 fadb 	bl	80103c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ee0e:	2301      	movs	r3, #1
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3710      	adds	r7, #16
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	e000ed04 	.word	0xe000ed04

0800ee1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08e      	sub	sp, #56	; 0x38
 800ee20:	af02      	add	r7, sp, #8
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10a      	bne.n	800ee46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ee30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee42:	bf00      	nop
 800ee44:	e7fe      	b.n	800ee44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <xQueueGenericCreateStatic+0x52>
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <xQueueGenericCreateStatic+0x56>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e000      	b.n	800ee74 <xQueueGenericCreateStatic+0x58>
 800ee72:	2300      	movs	r3, #0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d10a      	bne.n	800ee8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ee78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	623b      	str	r3, [r7, #32]
}
 800ee8a:	bf00      	nop
 800ee8c:	e7fe      	b.n	800ee8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d102      	bne.n	800ee9a <xQueueGenericCreateStatic+0x7e>
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <xQueueGenericCreateStatic+0x82>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e000      	b.n	800eea0 <xQueueGenericCreateStatic+0x84>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10a      	bne.n	800eeba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	61fb      	str	r3, [r7, #28]
}
 800eeb6:	bf00      	nop
 800eeb8:	e7fe      	b.n	800eeb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800eeba:	2348      	movs	r3, #72	; 0x48
 800eebc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	2b48      	cmp	r3, #72	; 0x48
 800eec2:	d00a      	beq.n	800eeda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	61bb      	str	r3, [r7, #24]
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800eeda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00d      	beq.n	800ef02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eeee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	4613      	mov	r3, r2
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	68b9      	ldr	r1, [r7, #8]
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f000 f83f 	bl	800ef80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3730      	adds	r7, #48	; 0x30
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b08a      	sub	sp, #40	; 0x28
 800ef10:	af02      	add	r7, sp, #8
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	4613      	mov	r3, r2
 800ef18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	613b      	str	r3, [r7, #16]
}
 800ef32:	bf00      	nop
 800ef34:	e7fe      	b.n	800ef34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	fb02 f303 	mul.w	r3, r2, r3
 800ef3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	3348      	adds	r3, #72	; 0x48
 800ef44:	4618      	mov	r0, r3
 800ef46:	f001 faef 	bl	8010528 <pvPortMalloc>
 800ef4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d011      	beq.n	800ef76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	3348      	adds	r3, #72	; 0x48
 800ef5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ef64:	79fa      	ldrb	r2, [r7, #7]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	9300      	str	r3, [sp, #0]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	68b9      	ldr	r1, [r7, #8]
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f000 f805 	bl	800ef80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef76:	69bb      	ldr	r3, [r7, #24]
	}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3720      	adds	r7, #32
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d103      	bne.n	800ef9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	69ba      	ldr	r2, [r7, #24]
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	e002      	b.n	800efa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800efae:	2101      	movs	r1, #1
 800efb0:	69b8      	ldr	r0, [r7, #24]
 800efb2:	f7ff fecb 	bl	800ed4c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800efb6:	bf00      	nop
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
	...

0800efc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08e      	sub	sp, #56	; 0x38
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800efce:	2300      	movs	r3, #0
 800efd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10a      	bne.n	800eff2 <xQueueGenericSend+0x32>
	__asm volatile
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800efee:	bf00      	nop
 800eff0:	e7fe      	b.n	800eff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d103      	bne.n	800f000 <xQueueGenericSend+0x40>
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800effc:	2b00      	cmp	r3, #0
 800effe:	d101      	bne.n	800f004 <xQueueGenericSend+0x44>
 800f000:	2301      	movs	r3, #1
 800f002:	e000      	b.n	800f006 <xQueueGenericSend+0x46>
 800f004:	2300      	movs	r3, #0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d10a      	bne.n	800f020 <xQueueGenericSend+0x60>
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f01c:	bf00      	nop
 800f01e:	e7fe      	b.n	800f01e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2b02      	cmp	r3, #2
 800f024:	d103      	bne.n	800f02e <xQueueGenericSend+0x6e>
 800f026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d101      	bne.n	800f032 <xQueueGenericSend+0x72>
 800f02e:	2301      	movs	r3, #1
 800f030:	e000      	b.n	800f034 <xQueueGenericSend+0x74>
 800f032:	2300      	movs	r3, #0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10a      	bne.n	800f04e <xQueueGenericSend+0x8e>
	__asm volatile
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	623b      	str	r3, [r7, #32]
}
 800f04a:	bf00      	nop
 800f04c:	e7fe      	b.n	800f04c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f04e:	f000 ff4f 	bl	800fef0 <xTaskGetSchedulerState>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <xQueueGenericSend+0x9e>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d101      	bne.n	800f062 <xQueueGenericSend+0xa2>
 800f05e:	2301      	movs	r3, #1
 800f060:	e000      	b.n	800f064 <xQueueGenericSend+0xa4>
 800f062:	2300      	movs	r3, #0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10a      	bne.n	800f07e <xQueueGenericSend+0xbe>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	61fb      	str	r3, [r7, #28]
}
 800f07a:	bf00      	nop
 800f07c:	e7fe      	b.n	800f07c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f07e:	f001 f971 	bl	8010364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d302      	bcc.n	800f094 <xQueueGenericSend+0xd4>
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b02      	cmp	r3, #2
 800f092:	d129      	bne.n	800f0e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f09a:	f000 f88f 	bl	800f1bc <prvCopyDataToQueue>
 800f09e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d010      	beq.n	800f0ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0aa:	3324      	adds	r3, #36	; 0x24
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 fd63 	bl	800fb78 <xTaskRemoveFromEventList>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d013      	beq.n	800f0e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f0b8:	4b3f      	ldr	r3, [pc, #252]	; (800f1b8 <xQueueGenericSend+0x1f8>)
 800f0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0be:	601a      	str	r2, [r3, #0]
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	e00a      	b.n	800f0e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d007      	beq.n	800f0e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f0d0:	4b39      	ldr	r3, [pc, #228]	; (800f1b8 <xQueueGenericSend+0x1f8>)
 800f0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f0e0:	f001 f970 	bl	80103c4 <vPortExitCritical>
				return pdPASS;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e063      	b.n	800f1b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d103      	bne.n	800f0f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0ee:	f001 f969 	bl	80103c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e05c      	b.n	800f1b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d106      	bne.n	800f10a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0fc:	f107 0314 	add.w	r3, r7, #20
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fd9b 	bl	800fc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f106:	2301      	movs	r3, #1
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f10a:	f001 f95b 	bl	80103c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f10e:	f000 fb51 	bl	800f7b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f112:	f001 f927 	bl	8010364 <vPortEnterCritical>
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f11c:	b25b      	sxtb	r3, r3
 800f11e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f122:	d103      	bne.n	800f12c <xQueueGenericSend+0x16c>
 800f124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f132:	b25b      	sxtb	r3, r3
 800f134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f138:	d103      	bne.n	800f142 <xQueueGenericSend+0x182>
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	2200      	movs	r2, #0
 800f13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f142:	f001 f93f 	bl	80103c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f146:	1d3a      	adds	r2, r7, #4
 800f148:	f107 0314 	add.w	r3, r7, #20
 800f14c:	4611      	mov	r1, r2
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fd8a 	bl	800fc68 <xTaskCheckForTimeOut>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d124      	bne.n	800f1a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f15a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f15c:	f000 f8ea 	bl	800f334 <prvIsQueueFull>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d018      	beq.n	800f198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	3310      	adds	r3, #16
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	4611      	mov	r1, r2
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fcde 	bl	800fb30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f176:	f000 f88b 	bl	800f290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f17a:	f000 fb29 	bl	800f7d0 <xTaskResumeAll>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	f47f af7c 	bne.w	800f07e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f186:	4b0c      	ldr	r3, [pc, #48]	; (800f1b8 <xQueueGenericSend+0x1f8>)
 800f188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	e772      	b.n	800f07e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f19a:	f000 f879 	bl	800f290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f19e:	f000 fb17 	bl	800f7d0 <xTaskResumeAll>
 800f1a2:	e76c      	b.n	800f07e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f1a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1a6:	f000 f873 	bl	800f290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1aa:	f000 fb11 	bl	800f7d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f1ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3738      	adds	r7, #56	; 0x38
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	e000ed04 	.word	0xe000ed04

0800f1bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10d      	bne.n	800f1f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d14d      	bne.n	800f27e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fea0 	bl	800ff2c <xTaskPriorityDisinherit>
 800f1ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	609a      	str	r2, [r3, #8]
 800f1f4:	e043      	b.n	800f27e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d119      	bne.n	800f230 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6858      	ldr	r0, [r3, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f204:	461a      	mov	r2, r3
 800f206:	68b9      	ldr	r1, [r7, #8]
 800f208:	f004 f8e0 	bl	80133cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	685a      	ldr	r2, [r3, #4]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f214:	441a      	add	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	429a      	cmp	r2, r3
 800f224:	d32b      	bcc.n	800f27e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	605a      	str	r2, [r3, #4]
 800f22e:	e026      	b.n	800f27e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	68d8      	ldr	r0, [r3, #12]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f238:	461a      	mov	r2, r3
 800f23a:	68b9      	ldr	r1, [r7, #8]
 800f23c:	f004 f8c6 	bl	80133cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	68da      	ldr	r2, [r3, #12]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f248:	425b      	negs	r3, r3
 800f24a:	441a      	add	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	68da      	ldr	r2, [r3, #12]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d207      	bcs.n	800f26c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f264:	425b      	negs	r3, r3
 800f266:	441a      	add	r2, r3
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d105      	bne.n	800f27e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	1c5a      	adds	r2, r3, #1
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f286:	697b      	ldr	r3, [r7, #20]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f298:	f001 f864 	bl	8010364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2a4:	e011      	b.n	800f2ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d012      	beq.n	800f2d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3324      	adds	r3, #36	; 0x24
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 fc60 	bl	800fb78 <xTaskRemoveFromEventList>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f2be:	f000 fd35 	bl	800fd2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f2c2:	7bfb      	ldrb	r3, [r7, #15]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	dce9      	bgt.n	800f2a6 <prvUnlockQueue+0x16>
 800f2d2:	e000      	b.n	800f2d6 <prvUnlockQueue+0x46>
					break;
 800f2d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	22ff      	movs	r2, #255	; 0xff
 800f2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f2de:	f001 f871 	bl	80103c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f2e2:	f001 f83f 	bl	8010364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f2ee:	e011      	b.n	800f314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d012      	beq.n	800f31e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	3310      	adds	r3, #16
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f000 fc3b 	bl	800fb78 <xTaskRemoveFromEventList>
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f308:	f000 fd10 	bl	800fd2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f30c:	7bbb      	ldrb	r3, [r7, #14]
 800f30e:	3b01      	subs	r3, #1
 800f310:	b2db      	uxtb	r3, r3
 800f312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dce9      	bgt.n	800f2f0 <prvUnlockQueue+0x60>
 800f31c:	e000      	b.n	800f320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f31e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	22ff      	movs	r2, #255	; 0xff
 800f324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f328:	f001 f84c 	bl	80103c4 <vPortExitCritical>
}
 800f32c:	bf00      	nop
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f33c:	f001 f812 	bl	8010364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f348:	429a      	cmp	r2, r3
 800f34a:	d102      	bne.n	800f352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f34c:	2301      	movs	r3, #1
 800f34e:	60fb      	str	r3, [r7, #12]
 800f350:	e001      	b.n	800f356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f352:	2300      	movs	r3, #0
 800f354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f356:	f001 f835 	bl	80103c4 <vPortExitCritical>

	return xReturn;
 800f35a:	68fb      	ldr	r3, [r7, #12]
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08e      	sub	sp, #56	; 0x38
 800f368:	af04      	add	r7, sp, #16
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	623b      	str	r3, [r7, #32]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	2b00      	cmp	r3, #0
 800f392:	d10a      	bne.n	800f3aa <xTaskCreateStatic+0x46>
	__asm volatile
 800f394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f398:	f383 8811 	msr	BASEPRI, r3
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	61fb      	str	r3, [r7, #28]
}
 800f3a6:	bf00      	nop
 800f3a8:	e7fe      	b.n	800f3a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f3aa:	2354      	movs	r3, #84	; 0x54
 800f3ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	2b54      	cmp	r3, #84	; 0x54
 800f3b2:	d00a      	beq.n	800f3ca <xTaskCreateStatic+0x66>
	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	61bb      	str	r3, [r7, #24]
}
 800f3c6:	bf00      	nop
 800f3c8:	e7fe      	b.n	800f3c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d01e      	beq.n	800f410 <xTaskCreateStatic+0xac>
 800f3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01b      	beq.n	800f410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	9303      	str	r3, [sp, #12]
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	9302      	str	r3, [sp, #8]
 800f3f2:	f107 0314 	add.w	r3, r7, #20
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	68b9      	ldr	r1, [r7, #8]
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f000 f850 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f40a:	f000 f8d5 	bl	800f5b8 <prvAddNewTaskToReadyList>
 800f40e:	e001      	b.n	800f414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f414:	697b      	ldr	r3, [r7, #20]
	}
 800f416:	4618      	mov	r0, r3
 800f418:	3728      	adds	r7, #40	; 0x28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b08c      	sub	sp, #48	; 0x30
 800f422:	af04      	add	r7, sp, #16
 800f424:	60f8      	str	r0, [r7, #12]
 800f426:	60b9      	str	r1, [r7, #8]
 800f428:	603b      	str	r3, [r7, #0]
 800f42a:	4613      	mov	r3, r2
 800f42c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f42e:	88fb      	ldrh	r3, [r7, #6]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4618      	mov	r0, r3
 800f434:	f001 f878 	bl	8010528 <pvPortMalloc>
 800f438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f440:	2054      	movs	r0, #84	; 0x54
 800f442:	f001 f871 	bl	8010528 <pvPortMalloc>
 800f446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	631a      	str	r2, [r3, #48]	; 0x30
 800f454:	e005      	b.n	800f462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f456:	6978      	ldr	r0, [r7, #20]
 800f458:	f001 f932 	bl	80106c0 <vPortFree>
 800f45c:	e001      	b.n	800f462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d017      	beq.n	800f498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f470:	88fa      	ldrh	r2, [r7, #6]
 800f472:	2300      	movs	r3, #0
 800f474:	9303      	str	r3, [sp, #12]
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	9302      	str	r3, [sp, #8]
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	68b9      	ldr	r1, [r7, #8]
 800f486:	68f8      	ldr	r0, [r7, #12]
 800f488:	f000 f80e 	bl	800f4a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f48c:	69f8      	ldr	r0, [r7, #28]
 800f48e:	f000 f893 	bl	800f5b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f492:	2301      	movs	r3, #1
 800f494:	61bb      	str	r3, [r7, #24]
 800f496:	e002      	b.n	800f49e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f49e:	69bb      	ldr	r3, [r7, #24]
	}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3720      	adds	r7, #32
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	607a      	str	r2, [r7, #4]
 800f4b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	4413      	add	r3, r2
 800f4c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	f023 0307 	bic.w	r3, r3, #7
 800f4ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00a      	beq.n	800f4f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4de:	f383 8811 	msr	BASEPRI, r3
 800f4e2:	f3bf 8f6f 	isb	sy
 800f4e6:	f3bf 8f4f 	dsb	sy
 800f4ea:	617b      	str	r3, [r7, #20]
}
 800f4ec:	bf00      	nop
 800f4ee:	e7fe      	b.n	800f4ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d01f      	beq.n	800f536 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e012      	b.n	800f522 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	4413      	add	r3, r2
 800f502:	7819      	ldrb	r1, [r3, #0]
 800f504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	4413      	add	r3, r2
 800f50a:	3334      	adds	r3, #52	; 0x34
 800f50c:	460a      	mov	r2, r1
 800f50e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f510:	68ba      	ldr	r2, [r7, #8]
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d006      	beq.n	800f52a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	3301      	adds	r3, #1
 800f520:	61fb      	str	r3, [r7, #28]
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	2b0f      	cmp	r3, #15
 800f526:	d9e9      	bls.n	800f4fc <prvInitialiseNewTask+0x54>
 800f528:	e000      	b.n	800f52c <prvInitialiseNewTask+0x84>
			{
				break;
 800f52a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f534:	e003      	b.n	800f53e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	2200      	movs	r2, #0
 800f53a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	2b06      	cmp	r3, #6
 800f542:	d901      	bls.n	800f548 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f544:	2306      	movs	r3, #6
 800f546:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f54c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f552:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f556:	2200      	movs	r2, #0
 800f558:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55c:	3304      	adds	r3, #4
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fb5f 	bl	800ec22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	3318      	adds	r3, #24
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff fb5a 	bl	800ec22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f572:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f576:	f1c3 0207 	rsb	r2, r3, #7
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f582:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f586:	2200      	movs	r2, #0
 800f588:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	2200      	movs	r2, #0
 800f58e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	68f9      	ldr	r1, [r7, #12]
 800f596:	69b8      	ldr	r0, [r7, #24]
 800f598:	f000 fdb4 	bl	8010104 <pxPortInitialiseStack>
 800f59c:	4602      	mov	r2, r0
 800f59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5ae:	bf00      	nop
 800f5b0:	3720      	adds	r7, #32
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
	...

0800f5b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5c0:	f000 fed0 	bl	8010364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5c4:	4b2a      	ldr	r3, [pc, #168]	; (800f670 <prvAddNewTaskToReadyList+0xb8>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	4a29      	ldr	r2, [pc, #164]	; (800f670 <prvAddNewTaskToReadyList+0xb8>)
 800f5cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5ce:	4b29      	ldr	r3, [pc, #164]	; (800f674 <prvAddNewTaskToReadyList+0xbc>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d109      	bne.n	800f5ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5d6:	4a27      	ldr	r2, [pc, #156]	; (800f674 <prvAddNewTaskToReadyList+0xbc>)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5dc:	4b24      	ldr	r3, [pc, #144]	; (800f670 <prvAddNewTaskToReadyList+0xb8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d110      	bne.n	800f606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f5e4:	f000 fbc6 	bl	800fd74 <prvInitialiseTaskLists>
 800f5e8:	e00d      	b.n	800f606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f5ea:	4b23      	ldr	r3, [pc, #140]	; (800f678 <prvAddNewTaskToReadyList+0xc0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d109      	bne.n	800f606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f5f2:	4b20      	ldr	r3, [pc, #128]	; (800f674 <prvAddNewTaskToReadyList+0xbc>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d802      	bhi.n	800f606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f600:	4a1c      	ldr	r2, [pc, #112]	; (800f674 <prvAddNewTaskToReadyList+0xbc>)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f606:	4b1d      	ldr	r3, [pc, #116]	; (800f67c <prvAddNewTaskToReadyList+0xc4>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	3301      	adds	r3, #1
 800f60c:	4a1b      	ldr	r2, [pc, #108]	; (800f67c <prvAddNewTaskToReadyList+0xc4>)
 800f60e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f614:	2201      	movs	r2, #1
 800f616:	409a      	lsls	r2, r3
 800f618:	4b19      	ldr	r3, [pc, #100]	; (800f680 <prvAddNewTaskToReadyList+0xc8>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	4a18      	ldr	r2, [pc, #96]	; (800f680 <prvAddNewTaskToReadyList+0xc8>)
 800f620:	6013      	str	r3, [r2, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	4613      	mov	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	4413      	add	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	4a15      	ldr	r2, [pc, #84]	; (800f684 <prvAddNewTaskToReadyList+0xcc>)
 800f630:	441a      	add	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	3304      	adds	r3, #4
 800f636:	4619      	mov	r1, r3
 800f638:	4610      	mov	r0, r2
 800f63a:	f7ff faff 	bl	800ec3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f63e:	f000 fec1 	bl	80103c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f642:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <prvAddNewTaskToReadyList+0xc0>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00e      	beq.n	800f668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <prvAddNewTaskToReadyList+0xbc>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f654:	429a      	cmp	r2, r3
 800f656:	d207      	bcs.n	800f668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f658:	4b0b      	ldr	r3, [pc, #44]	; (800f688 <prvAddNewTaskToReadyList+0xd0>)
 800f65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	20004be8 	.word	0x20004be8
 800f674:	20004ae8 	.word	0x20004ae8
 800f678:	20004bf4 	.word	0x20004bf4
 800f67c:	20004c04 	.word	0x20004c04
 800f680:	20004bf0 	.word	0x20004bf0
 800f684:	20004aec 	.word	0x20004aec
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f694:	2300      	movs	r3, #0
 800f696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d017      	beq.n	800f6ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f69e:	4b13      	ldr	r3, [pc, #76]	; (800f6ec <vTaskDelay+0x60>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00a      	beq.n	800f6bc <vTaskDelay+0x30>
	__asm volatile
 800f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6aa:	f383 8811 	msr	BASEPRI, r3
 800f6ae:	f3bf 8f6f 	isb	sy
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	60bb      	str	r3, [r7, #8]
}
 800f6b8:	bf00      	nop
 800f6ba:	e7fe      	b.n	800f6ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f6bc:	f000 f87a 	bl	800f7b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fcb8 	bl	8010038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6c8:	f000 f882 	bl	800f7d0 <xTaskResumeAll>
 800f6cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f6d4:	4b06      	ldr	r3, [pc, #24]	; (800f6f0 <vTaskDelay+0x64>)
 800f6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6da:	601a      	str	r2, [r3, #0]
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6e4:	bf00      	nop
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	20004c10 	.word	0x20004c10
 800f6f0:	e000ed04 	.word	0xe000ed04

0800f6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08a      	sub	sp, #40	; 0x28
 800f6f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6fe:	2300      	movs	r3, #0
 800f700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f702:	463a      	mov	r2, r7
 800f704:	1d39      	adds	r1, r7, #4
 800f706:	f107 0308 	add.w	r3, r7, #8
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7f0 ff70 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f710:	6839      	ldr	r1, [r7, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	9202      	str	r2, [sp, #8]
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	2300      	movs	r3, #0
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	2300      	movs	r3, #0
 800f720:	460a      	mov	r2, r1
 800f722:	491e      	ldr	r1, [pc, #120]	; (800f79c <vTaskStartScheduler+0xa8>)
 800f724:	481e      	ldr	r0, [pc, #120]	; (800f7a0 <vTaskStartScheduler+0xac>)
 800f726:	f7ff fe1d 	bl	800f364 <xTaskCreateStatic>
 800f72a:	4603      	mov	r3, r0
 800f72c:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <vTaskStartScheduler+0xb0>)
 800f72e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f730:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <vTaskStartScheduler+0xb0>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f738:	2301      	movs	r3, #1
 800f73a:	617b      	str	r3, [r7, #20]
 800f73c:	e001      	b.n	800f742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d116      	bne.n	800f776 <vTaskStartScheduler+0x82>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	613b      	str	r3, [r7, #16]
}
 800f75a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f75c:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <vTaskStartScheduler+0xb4>)
 800f75e:	f04f 32ff 	mov.w	r2, #4294967295
 800f762:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f764:	4b11      	ldr	r3, [pc, #68]	; (800f7ac <vTaskStartScheduler+0xb8>)
 800f766:	2201      	movs	r2, #1
 800f768:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f76a:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <vTaskStartScheduler+0xbc>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f770:	f000 fd56 	bl	8010220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f774:	e00e      	b.n	800f794 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77c:	d10a      	bne.n	800f794 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	60fb      	str	r3, [r7, #12]
}
 800f790:	bf00      	nop
 800f792:	e7fe      	b.n	800f792 <vTaskStartScheduler+0x9e>
}
 800f794:	bf00      	nop
 800f796:	3718      	adds	r7, #24
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	08013464 	.word	0x08013464
 800f7a0:	0800fd45 	.word	0x0800fd45
 800f7a4:	20004c0c 	.word	0x20004c0c
 800f7a8:	20004c08 	.word	0x20004c08
 800f7ac:	20004bf4 	.word	0x20004bf4
 800f7b0:	20004bec 	.word	0x20004bec

0800f7b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f7b8:	4b04      	ldr	r3, [pc, #16]	; (800f7cc <vTaskSuspendAll+0x18>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	4a03      	ldr	r2, [pc, #12]	; (800f7cc <vTaskSuspendAll+0x18>)
 800f7c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f7c2:	bf00      	nop
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	20004c10 	.word	0x20004c10

0800f7d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7de:	4b41      	ldr	r3, [pc, #260]	; (800f8e4 <xTaskResumeAll+0x114>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10a      	bne.n	800f7fc <xTaskResumeAll+0x2c>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	603b      	str	r3, [r7, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	e7fe      	b.n	800f7fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7fc:	f000 fdb2 	bl	8010364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f800:	4b38      	ldr	r3, [pc, #224]	; (800f8e4 <xTaskResumeAll+0x114>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	3b01      	subs	r3, #1
 800f806:	4a37      	ldr	r2, [pc, #220]	; (800f8e4 <xTaskResumeAll+0x114>)
 800f808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f80a:	4b36      	ldr	r3, [pc, #216]	; (800f8e4 <xTaskResumeAll+0x114>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d161      	bne.n	800f8d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f812:	4b35      	ldr	r3, [pc, #212]	; (800f8e8 <xTaskResumeAll+0x118>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d05d      	beq.n	800f8d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f81a:	e02e      	b.n	800f87a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f81c:	4b33      	ldr	r3, [pc, #204]	; (800f8ec <xTaskResumeAll+0x11c>)
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3318      	adds	r3, #24
 800f828:	4618      	mov	r0, r3
 800f82a:	f7ff fa64 	bl	800ecf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	3304      	adds	r3, #4
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff fa5f 	bl	800ecf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83c:	2201      	movs	r2, #1
 800f83e:	409a      	lsls	r2, r3
 800f840:	4b2b      	ldr	r3, [pc, #172]	; (800f8f0 <xTaskResumeAll+0x120>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4313      	orrs	r3, r2
 800f846:	4a2a      	ldr	r2, [pc, #168]	; (800f8f0 <xTaskResumeAll+0x120>)
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84e:	4613      	mov	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4413      	add	r3, r2
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	4a27      	ldr	r2, [pc, #156]	; (800f8f4 <xTaskResumeAll+0x124>)
 800f858:	441a      	add	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f7ff f9eb 	bl	800ec3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f86a:	4b23      	ldr	r3, [pc, #140]	; (800f8f8 <xTaskResumeAll+0x128>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f870:	429a      	cmp	r2, r3
 800f872:	d302      	bcc.n	800f87a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f874:	4b21      	ldr	r3, [pc, #132]	; (800f8fc <xTaskResumeAll+0x12c>)
 800f876:	2201      	movs	r2, #1
 800f878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f87a:	4b1c      	ldr	r3, [pc, #112]	; (800f8ec <xTaskResumeAll+0x11c>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1cc      	bne.n	800f81c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f888:	f000 fb12 	bl	800feb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f88c:	4b1c      	ldr	r3, [pc, #112]	; (800f900 <xTaskResumeAll+0x130>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d010      	beq.n	800f8ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f898:	f000 f836 	bl	800f908 <xTaskIncrementTick>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d002      	beq.n	800f8a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f8a2:	4b16      	ldr	r3, [pc, #88]	; (800f8fc <xTaskResumeAll+0x12c>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1f1      	bne.n	800f898 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f8b4:	4b12      	ldr	r3, [pc, #72]	; (800f900 <xTaskResumeAll+0x130>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f8ba:	4b10      	ldr	r3, [pc, #64]	; (800f8fc <xTaskResumeAll+0x12c>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d009      	beq.n	800f8d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <xTaskResumeAll+0x134>)
 800f8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8d6:	f000 fd75 	bl	80103c4 <vPortExitCritical>

	return xAlreadyYielded;
 800f8da:	68bb      	ldr	r3, [r7, #8]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20004c10 	.word	0x20004c10
 800f8e8:	20004be8 	.word	0x20004be8
 800f8ec:	20004ba8 	.word	0x20004ba8
 800f8f0:	20004bf0 	.word	0x20004bf0
 800f8f4:	20004aec 	.word	0x20004aec
 800f8f8:	20004ae8 	.word	0x20004ae8
 800f8fc:	20004bfc 	.word	0x20004bfc
 800f900:	20004bf8 	.word	0x20004bf8
 800f904:	e000ed04 	.word	0xe000ed04

0800f908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b086      	sub	sp, #24
 800f90c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f90e:	2300      	movs	r3, #0
 800f910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f912:	4b4e      	ldr	r3, [pc, #312]	; (800fa4c <xTaskIncrementTick+0x144>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	f040 808e 	bne.w	800fa38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f91c:	4b4c      	ldr	r3, [pc, #304]	; (800fa50 <xTaskIncrementTick+0x148>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	3301      	adds	r3, #1
 800f922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f924:	4a4a      	ldr	r2, [pc, #296]	; (800fa50 <xTaskIncrementTick+0x148>)
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d120      	bne.n	800f972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f930:	4b48      	ldr	r3, [pc, #288]	; (800fa54 <xTaskIncrementTick+0x14c>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00a      	beq.n	800f950 <xTaskIncrementTick+0x48>
	__asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	603b      	str	r3, [r7, #0]
}
 800f94c:	bf00      	nop
 800f94e:	e7fe      	b.n	800f94e <xTaskIncrementTick+0x46>
 800f950:	4b40      	ldr	r3, [pc, #256]	; (800fa54 <xTaskIncrementTick+0x14c>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	60fb      	str	r3, [r7, #12]
 800f956:	4b40      	ldr	r3, [pc, #256]	; (800fa58 <xTaskIncrementTick+0x150>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a3e      	ldr	r2, [pc, #248]	; (800fa54 <xTaskIncrementTick+0x14c>)
 800f95c:	6013      	str	r3, [r2, #0]
 800f95e:	4a3e      	ldr	r2, [pc, #248]	; (800fa58 <xTaskIncrementTick+0x150>)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6013      	str	r3, [r2, #0]
 800f964:	4b3d      	ldr	r3, [pc, #244]	; (800fa5c <xTaskIncrementTick+0x154>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	3301      	adds	r3, #1
 800f96a:	4a3c      	ldr	r2, [pc, #240]	; (800fa5c <xTaskIncrementTick+0x154>)
 800f96c:	6013      	str	r3, [r2, #0]
 800f96e:	f000 fa9f 	bl	800feb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f972:	4b3b      	ldr	r3, [pc, #236]	; (800fa60 <xTaskIncrementTick+0x158>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d348      	bcc.n	800fa0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f97c:	4b35      	ldr	r3, [pc, #212]	; (800fa54 <xTaskIncrementTick+0x14c>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d104      	bne.n	800f990 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f986:	4b36      	ldr	r3, [pc, #216]	; (800fa60 <xTaskIncrementTick+0x158>)
 800f988:	f04f 32ff 	mov.w	r2, #4294967295
 800f98c:	601a      	str	r2, [r3, #0]
					break;
 800f98e:	e03e      	b.n	800fa0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f990:	4b30      	ldr	r3, [pc, #192]	; (800fa54 <xTaskIncrementTick+0x14c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d203      	bcs.n	800f9b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9a8:	4a2d      	ldr	r2, [pc, #180]	; (800fa60 <xTaskIncrementTick+0x158>)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9ae:	e02e      	b.n	800fa0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff f99e 	bl	800ecf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d004      	beq.n	800f9cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	3318      	adds	r3, #24
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7ff f995 	bl	800ecf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	409a      	lsls	r2, r3
 800f9d4:	4b23      	ldr	r3, [pc, #140]	; (800fa64 <xTaskIncrementTick+0x15c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	4a22      	ldr	r2, [pc, #136]	; (800fa64 <xTaskIncrementTick+0x15c>)
 800f9dc:	6013      	str	r3, [r2, #0]
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	4413      	add	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4a1f      	ldr	r2, [pc, #124]	; (800fa68 <xTaskIncrementTick+0x160>)
 800f9ec:	441a      	add	r2, r3
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	3304      	adds	r3, #4
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	f7ff f921 	bl	800ec3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9fe:	4b1b      	ldr	r3, [pc, #108]	; (800fa6c <xTaskIncrementTick+0x164>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d3b9      	bcc.n	800f97c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa0c:	e7b6      	b.n	800f97c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa0e:	4b17      	ldr	r3, [pc, #92]	; (800fa6c <xTaskIncrementTick+0x164>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa14:	4914      	ldr	r1, [pc, #80]	; (800fa68 <xTaskIncrementTick+0x160>)
 800fa16:	4613      	mov	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	4413      	add	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	440b      	add	r3, r1
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d901      	bls.n	800fa2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fa26:	2301      	movs	r3, #1
 800fa28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fa2a:	4b11      	ldr	r3, [pc, #68]	; (800fa70 <xTaskIncrementTick+0x168>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d007      	beq.n	800fa42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fa32:	2301      	movs	r3, #1
 800fa34:	617b      	str	r3, [r7, #20]
 800fa36:	e004      	b.n	800fa42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa38:	4b0e      	ldr	r3, [pc, #56]	; (800fa74 <xTaskIncrementTick+0x16c>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	4a0d      	ldr	r2, [pc, #52]	; (800fa74 <xTaskIncrementTick+0x16c>)
 800fa40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa42:	697b      	ldr	r3, [r7, #20]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3718      	adds	r7, #24
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	20004c10 	.word	0x20004c10
 800fa50:	20004bec 	.word	0x20004bec
 800fa54:	20004ba0 	.word	0x20004ba0
 800fa58:	20004ba4 	.word	0x20004ba4
 800fa5c:	20004c00 	.word	0x20004c00
 800fa60:	20004c08 	.word	0x20004c08
 800fa64:	20004bf0 	.word	0x20004bf0
 800fa68:	20004aec 	.word	0x20004aec
 800fa6c:	20004ae8 	.word	0x20004ae8
 800fa70:	20004bfc 	.word	0x20004bfc
 800fa74:	20004bf8 	.word	0x20004bf8

0800fa78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa7e:	4b27      	ldr	r3, [pc, #156]	; (800fb1c <vTaskSwitchContext+0xa4>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d003      	beq.n	800fa8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa86:	4b26      	ldr	r3, [pc, #152]	; (800fb20 <vTaskSwitchContext+0xa8>)
 800fa88:	2201      	movs	r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa8c:	e03f      	b.n	800fb0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fa8e:	4b24      	ldr	r3, [pc, #144]	; (800fb20 <vTaskSwitchContext+0xa8>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa94:	4b23      	ldr	r3, [pc, #140]	; (800fb24 <vTaskSwitchContext+0xac>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	fab3 f383 	clz	r3, r3
 800faa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800faa2:	7afb      	ldrb	r3, [r7, #11]
 800faa4:	f1c3 031f 	rsb	r3, r3, #31
 800faa8:	617b      	str	r3, [r7, #20]
 800faaa:	491f      	ldr	r1, [pc, #124]	; (800fb28 <vTaskSwitchContext+0xb0>)
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	4613      	mov	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	4413      	add	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	440b      	add	r3, r1
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10a      	bne.n	800fad4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	607b      	str	r3, [r7, #4]
}
 800fad0:	bf00      	nop
 800fad2:	e7fe      	b.n	800fad2 <vTaskSwitchContext+0x5a>
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4a12      	ldr	r2, [pc, #72]	; (800fb28 <vTaskSwitchContext+0xb0>)
 800fae0:	4413      	add	r3, r2
 800fae2:	613b      	str	r3, [r7, #16]
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	605a      	str	r2, [r3, #4]
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	685a      	ldr	r2, [r3, #4]
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	3308      	adds	r3, #8
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d104      	bne.n	800fb04 <vTaskSwitchContext+0x8c>
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	605a      	str	r2, [r3, #4]
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	4a08      	ldr	r2, [pc, #32]	; (800fb2c <vTaskSwitchContext+0xb4>)
 800fb0c:	6013      	str	r3, [r2, #0]
}
 800fb0e:	bf00      	nop
 800fb10:	371c      	adds	r7, #28
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	20004c10 	.word	0x20004c10
 800fb20:	20004bfc 	.word	0x20004bfc
 800fb24:	20004bf0 	.word	0x20004bf0
 800fb28:	20004aec 	.word	0x20004aec
 800fb2c:	20004ae8 	.word	0x20004ae8

0800fb30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10a      	bne.n	800fb56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	60fb      	str	r3, [r7, #12]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb56:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <vTaskPlaceOnEventList+0x44>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3318      	adds	r3, #24
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7ff f890 	bl	800ec84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb64:	2101      	movs	r1, #1
 800fb66:	6838      	ldr	r0, [r7, #0]
 800fb68:	f000 fa66 	bl	8010038 <prvAddCurrentTaskToDelayedList>
}
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	20004ae8 	.word	0x20004ae8

0800fb78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10a      	bne.n	800fba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	60fb      	str	r3, [r7, #12]
}
 800fba0:	bf00      	nop
 800fba2:	e7fe      	b.n	800fba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3318      	adds	r3, #24
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7ff f8a4 	bl	800ecf6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbae:	4b1d      	ldr	r3, [pc, #116]	; (800fc24 <xTaskRemoveFromEventList+0xac>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d11c      	bne.n	800fbf0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff f89b 	bl	800ecf6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	409a      	lsls	r2, r3
 800fbc8:	4b17      	ldr	r3, [pc, #92]	; (800fc28 <xTaskRemoveFromEventList+0xb0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	4a16      	ldr	r2, [pc, #88]	; (800fc28 <xTaskRemoveFromEventList+0xb0>)
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4413      	add	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4a13      	ldr	r2, [pc, #76]	; (800fc2c <xTaskRemoveFromEventList+0xb4>)
 800fbe0:	441a      	add	r2, r3
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7ff f827 	bl	800ec3c <vListInsertEnd>
 800fbee:	e005      	b.n	800fbfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	480e      	ldr	r0, [pc, #56]	; (800fc30 <xTaskRemoveFromEventList+0xb8>)
 800fbf8:	f7ff f820 	bl	800ec3c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc00:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <xTaskRemoveFromEventList+0xbc>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d905      	bls.n	800fc16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc0e:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <xTaskRemoveFromEventList+0xc0>)
 800fc10:	2201      	movs	r2, #1
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	e001      	b.n	800fc1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fc16:	2300      	movs	r3, #0
 800fc18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc1a:	697b      	ldr	r3, [r7, #20]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3718      	adds	r7, #24
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20004c10 	.word	0x20004c10
 800fc28:	20004bf0 	.word	0x20004bf0
 800fc2c:	20004aec 	.word	0x20004aec
 800fc30:	20004ba8 	.word	0x20004ba8
 800fc34:	20004ae8 	.word	0x20004ae8
 800fc38:	20004bfc 	.word	0x20004bfc

0800fc3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc44:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <vTaskInternalSetTimeOutState+0x24>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc4c:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <vTaskInternalSetTimeOutState+0x28>)
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	605a      	str	r2, [r3, #4]
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	20004c00 	.word	0x20004c00
 800fc64:	20004bec 	.word	0x20004bec

0800fc68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b088      	sub	sp, #32
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7c:	f383 8811 	msr	BASEPRI, r3
 800fc80:	f3bf 8f6f 	isb	sy
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	613b      	str	r3, [r7, #16]
}
 800fc8a:	bf00      	nop
 800fc8c:	e7fe      	b.n	800fc8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d10a      	bne.n	800fcaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc98:	f383 8811 	msr	BASEPRI, r3
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f3bf 8f4f 	dsb	sy
 800fca4:	60fb      	str	r3, [r7, #12]
}
 800fca6:	bf00      	nop
 800fca8:	e7fe      	b.n	800fca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fcaa:	f000 fb5b 	bl	8010364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcae:	4b1d      	ldr	r3, [pc, #116]	; (800fd24 <xTaskCheckForTimeOut+0xbc>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc6:	d102      	bne.n	800fcce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	61fb      	str	r3, [r7, #28]
 800fccc:	e023      	b.n	800fd16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	4b15      	ldr	r3, [pc, #84]	; (800fd28 <xTaskCheckForTimeOut+0xc0>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d007      	beq.n	800fcea <xTaskCheckForTimeOut+0x82>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	69ba      	ldr	r2, [r7, #24]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d302      	bcc.n	800fcea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fce4:	2301      	movs	r3, #1
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	e015      	b.n	800fd16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d20b      	bcs.n	800fd0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	1ad2      	subs	r2, r2, r3
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff ff9b 	bl	800fc3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd06:	2300      	movs	r3, #0
 800fd08:	61fb      	str	r3, [r7, #28]
 800fd0a:	e004      	b.n	800fd16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd12:	2301      	movs	r3, #1
 800fd14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd16:	f000 fb55 	bl	80103c4 <vPortExitCritical>

	return xReturn;
 800fd1a:	69fb      	ldr	r3, [r7, #28]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	3720      	adds	r7, #32
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}
 800fd24:	20004bec 	.word	0x20004bec
 800fd28:	20004c00 	.word	0x20004c00

0800fd2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd30:	4b03      	ldr	r3, [pc, #12]	; (800fd40 <vTaskMissedYield+0x14>)
 800fd32:	2201      	movs	r2, #1
 800fd34:	601a      	str	r2, [r3, #0]
}
 800fd36:	bf00      	nop
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	20004bfc 	.word	0x20004bfc

0800fd44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd4c:	f000 f852 	bl	800fdf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd50:	4b06      	ldr	r3, [pc, #24]	; (800fd6c <prvIdleTask+0x28>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d9f9      	bls.n	800fd4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd58:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <prvIdleTask+0x2c>)
 800fd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	f3bf 8f4f 	dsb	sy
 800fd64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd68:	e7f0      	b.n	800fd4c <prvIdleTask+0x8>
 800fd6a:	bf00      	nop
 800fd6c:	20004aec 	.word	0x20004aec
 800fd70:	e000ed04 	.word	0xe000ed04

0800fd74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	607b      	str	r3, [r7, #4]
 800fd7e:	e00c      	b.n	800fd9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	4613      	mov	r3, r2
 800fd84:	009b      	lsls	r3, r3, #2
 800fd86:	4413      	add	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4a12      	ldr	r2, [pc, #72]	; (800fdd4 <prvInitialiseTaskLists+0x60>)
 800fd8c:	4413      	add	r3, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe ff27 	bl	800ebe2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	3301      	adds	r3, #1
 800fd98:	607b      	str	r3, [r7, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b06      	cmp	r3, #6
 800fd9e:	d9ef      	bls.n	800fd80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fda0:	480d      	ldr	r0, [pc, #52]	; (800fdd8 <prvInitialiseTaskLists+0x64>)
 800fda2:	f7fe ff1e 	bl	800ebe2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fda6:	480d      	ldr	r0, [pc, #52]	; (800fddc <prvInitialiseTaskLists+0x68>)
 800fda8:	f7fe ff1b 	bl	800ebe2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdac:	480c      	ldr	r0, [pc, #48]	; (800fde0 <prvInitialiseTaskLists+0x6c>)
 800fdae:	f7fe ff18 	bl	800ebe2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdb2:	480c      	ldr	r0, [pc, #48]	; (800fde4 <prvInitialiseTaskLists+0x70>)
 800fdb4:	f7fe ff15 	bl	800ebe2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdb8:	480b      	ldr	r0, [pc, #44]	; (800fde8 <prvInitialiseTaskLists+0x74>)
 800fdba:	f7fe ff12 	bl	800ebe2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdbe:	4b0b      	ldr	r3, [pc, #44]	; (800fdec <prvInitialiseTaskLists+0x78>)
 800fdc0:	4a05      	ldr	r2, [pc, #20]	; (800fdd8 <prvInitialiseTaskLists+0x64>)
 800fdc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdc4:	4b0a      	ldr	r3, [pc, #40]	; (800fdf0 <prvInitialiseTaskLists+0x7c>)
 800fdc6:	4a05      	ldr	r2, [pc, #20]	; (800fddc <prvInitialiseTaskLists+0x68>)
 800fdc8:	601a      	str	r2, [r3, #0]
}
 800fdca:	bf00      	nop
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	20004aec 	.word	0x20004aec
 800fdd8:	20004b78 	.word	0x20004b78
 800fddc:	20004b8c 	.word	0x20004b8c
 800fde0:	20004ba8 	.word	0x20004ba8
 800fde4:	20004bbc 	.word	0x20004bbc
 800fde8:	20004bd4 	.word	0x20004bd4
 800fdec:	20004ba0 	.word	0x20004ba0
 800fdf0:	20004ba4 	.word	0x20004ba4

0800fdf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdfa:	e019      	b.n	800fe30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdfc:	f000 fab2 	bl	8010364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe00:	4b10      	ldr	r3, [pc, #64]	; (800fe44 <prvCheckTasksWaitingTermination+0x50>)
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7fe ff72 	bl	800ecf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe12:	4b0d      	ldr	r3, [pc, #52]	; (800fe48 <prvCheckTasksWaitingTermination+0x54>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3b01      	subs	r3, #1
 800fe18:	4a0b      	ldr	r2, [pc, #44]	; (800fe48 <prvCheckTasksWaitingTermination+0x54>)
 800fe1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe1c:	4b0b      	ldr	r3, [pc, #44]	; (800fe4c <prvCheckTasksWaitingTermination+0x58>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	4a0a      	ldr	r2, [pc, #40]	; (800fe4c <prvCheckTasksWaitingTermination+0x58>)
 800fe24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe26:	f000 facd 	bl	80103c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 f810 	bl	800fe50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe30:	4b06      	ldr	r3, [pc, #24]	; (800fe4c <prvCheckTasksWaitingTermination+0x58>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1e1      	bne.n	800fdfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe38:	bf00      	nop
 800fe3a:	bf00      	nop
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	20004bbc 	.word	0x20004bbc
 800fe48:	20004be8 	.word	0x20004be8
 800fe4c:	20004bd0 	.word	0x20004bd0

0800fe50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d108      	bne.n	800fe74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 fc2a 	bl	80106c0 <vPortFree>
				vPortFree( pxTCB );
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 fc27 	bl	80106c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe72:	e018      	b.n	800fea6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d103      	bne.n	800fe86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fc1e 	bl	80106c0 <vPortFree>
	}
 800fe84:	e00f      	b.n	800fea6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	d00a      	beq.n	800fea6 <prvDeleteTCB+0x56>
	__asm volatile
 800fe90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe94:	f383 8811 	msr	BASEPRI, r3
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	60fb      	str	r3, [r7, #12]
}
 800fea2:	bf00      	nop
 800fea4:	e7fe      	b.n	800fea4 <prvDeleteTCB+0x54>
	}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
	...

0800feb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800feb6:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <prvResetNextTaskUnblockTime+0x38>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d104      	bne.n	800feca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fec0:	4b0a      	ldr	r3, [pc, #40]	; (800feec <prvResetNextTaskUnblockTime+0x3c>)
 800fec2:	f04f 32ff 	mov.w	r2, #4294967295
 800fec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fec8:	e008      	b.n	800fedc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feca:	4b07      	ldr	r3, [pc, #28]	; (800fee8 <prvResetNextTaskUnblockTime+0x38>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	4a04      	ldr	r2, [pc, #16]	; (800feec <prvResetNextTaskUnblockTime+0x3c>)
 800feda:	6013      	str	r3, [r2, #0]
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	20004ba0 	.word	0x20004ba0
 800feec:	20004c08 	.word	0x20004c08

0800fef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fef6:	4b0b      	ldr	r3, [pc, #44]	; (800ff24 <xTaskGetSchedulerState+0x34>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d102      	bne.n	800ff04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fefe:	2301      	movs	r3, #1
 800ff00:	607b      	str	r3, [r7, #4]
 800ff02:	e008      	b.n	800ff16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff04:	4b08      	ldr	r3, [pc, #32]	; (800ff28 <xTaskGetSchedulerState+0x38>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d102      	bne.n	800ff12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff0c:	2302      	movs	r3, #2
 800ff0e:	607b      	str	r3, [r7, #4]
 800ff10:	e001      	b.n	800ff16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff12:	2300      	movs	r3, #0
 800ff14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff16:	687b      	ldr	r3, [r7, #4]
	}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	20004bf4 	.word	0x20004bf4
 800ff28:	20004c10 	.word	0x20004c10

0800ff2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff38:	2300      	movs	r3, #0
 800ff3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d06e      	beq.n	8010020 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff42:	4b3a      	ldr	r3, [pc, #232]	; (801002c <xTaskPriorityDisinherit+0x100>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	693a      	ldr	r2, [r7, #16]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d00a      	beq.n	800ff62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	f383 8811 	msr	BASEPRI, r3
 800ff54:	f3bf 8f6f 	isb	sy
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	60fb      	str	r3, [r7, #12]
}
 800ff5e:	bf00      	nop
 800ff60:	e7fe      	b.n	800ff60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	60bb      	str	r3, [r7, #8]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff84:	1e5a      	subs	r2, r3, #1
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d044      	beq.n	8010020 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d140      	bne.n	8010020 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fe fea7 	bl	800ecf6 <uxListRemove>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d115      	bne.n	800ffda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb2:	491f      	ldr	r1, [pc, #124]	; (8010030 <xTaskPriorityDisinherit+0x104>)
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10a      	bne.n	800ffda <xTaskPriorityDisinherit+0xae>
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	2201      	movs	r2, #1
 800ffca:	fa02 f303 	lsl.w	r3, r2, r3
 800ffce:	43da      	mvns	r2, r3
 800ffd0:	4b18      	ldr	r3, [pc, #96]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	4a17      	ldr	r2, [pc, #92]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800ffd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe6:	f1c3 0207 	rsb	r2, r3, #7
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff2:	2201      	movs	r2, #1
 800fff4:	409a      	lsls	r2, r3
 800fff6:	4b0f      	ldr	r3, [pc, #60]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	4a0d      	ldr	r2, [pc, #52]	; (8010034 <xTaskPriorityDisinherit+0x108>)
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010004:	4613      	mov	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4a08      	ldr	r2, [pc, #32]	; (8010030 <xTaskPriorityDisinherit+0x104>)
 801000e:	441a      	add	r2, r3
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	3304      	adds	r3, #4
 8010014:	4619      	mov	r1, r3
 8010016:	4610      	mov	r0, r2
 8010018:	f7fe fe10 	bl	800ec3c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801001c:	2301      	movs	r3, #1
 801001e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010020:	697b      	ldr	r3, [r7, #20]
	}
 8010022:	4618      	mov	r0, r3
 8010024:	3718      	adds	r7, #24
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20004ae8 	.word	0x20004ae8
 8010030:	20004aec 	.word	0x20004aec
 8010034:	20004bf0 	.word	0x20004bf0

08010038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010042:	4b29      	ldr	r3, [pc, #164]	; (80100e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010048:	4b28      	ldr	r3, [pc, #160]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	3304      	adds	r3, #4
 801004e:	4618      	mov	r0, r3
 8010050:	f7fe fe51 	bl	800ecf6 <uxListRemove>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10b      	bne.n	8010072 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801005a:	4b24      	ldr	r3, [pc, #144]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010060:	2201      	movs	r2, #1
 8010062:	fa02 f303 	lsl.w	r3, r2, r3
 8010066:	43da      	mvns	r2, r3
 8010068:	4b21      	ldr	r3, [pc, #132]	; (80100f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4013      	ands	r3, r2
 801006e:	4a20      	ldr	r2, [pc, #128]	; (80100f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010070:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010078:	d10a      	bne.n	8010090 <prvAddCurrentTaskToDelayedList+0x58>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d007      	beq.n	8010090 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010080:	4b1a      	ldr	r3, [pc, #104]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3304      	adds	r3, #4
 8010086:	4619      	mov	r1, r3
 8010088:	481a      	ldr	r0, [pc, #104]	; (80100f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801008a:	f7fe fdd7 	bl	800ec3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801008e:	e026      	b.n	80100de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4413      	add	r3, r2
 8010096:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010098:	4b14      	ldr	r3, [pc, #80]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100a0:	68ba      	ldr	r2, [r7, #8]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d209      	bcs.n	80100bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100a8:	4b13      	ldr	r3, [pc, #76]	; (80100f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	4b0f      	ldr	r3, [pc, #60]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	3304      	adds	r3, #4
 80100b2:	4619      	mov	r1, r3
 80100b4:	4610      	mov	r0, r2
 80100b6:	f7fe fde5 	bl	800ec84 <vListInsert>
}
 80100ba:	e010      	b.n	80100de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100bc:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3304      	adds	r3, #4
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fe fddb 	bl	800ec84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80100ce:	4b0c      	ldr	r3, [pc, #48]	; (8010100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	68ba      	ldr	r2, [r7, #8]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d202      	bcs.n	80100de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80100d8:	4a09      	ldr	r2, [pc, #36]	; (8010100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	6013      	str	r3, [r2, #0]
}
 80100de:	bf00      	nop
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20004bec 	.word	0x20004bec
 80100ec:	20004ae8 	.word	0x20004ae8
 80100f0:	20004bf0 	.word	0x20004bf0
 80100f4:	20004bd4 	.word	0x20004bd4
 80100f8:	20004ba4 	.word	0x20004ba4
 80100fc:	20004ba0 	.word	0x20004ba0
 8010100:	20004c08 	.word	0x20004c08

08010104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	3b04      	subs	r3, #4
 8010114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801011c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	3b04      	subs	r3, #4
 8010122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	f023 0201 	bic.w	r2, r3, #1
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3b04      	subs	r3, #4
 8010132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010134:	4a0c      	ldr	r2, [pc, #48]	; (8010168 <pxPortInitialiseStack+0x64>)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3b14      	subs	r3, #20
 801013e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	3b04      	subs	r3, #4
 801014a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f06f 0202 	mvn.w	r2, #2
 8010152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	3b20      	subs	r3, #32
 8010158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801015a:	68fb      	ldr	r3, [r7, #12]
}
 801015c:	4618      	mov	r0, r3
 801015e:	3714      	adds	r7, #20
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr
 8010168:	0801016d 	.word	0x0801016d

0801016c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010172:	2300      	movs	r3, #0
 8010174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010176:	4b12      	ldr	r3, [pc, #72]	; (80101c0 <prvTaskExitError+0x54>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017e:	d00a      	beq.n	8010196 <prvTaskExitError+0x2a>
	__asm volatile
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	60fb      	str	r3, [r7, #12]
}
 8010192:	bf00      	nop
 8010194:	e7fe      	b.n	8010194 <prvTaskExitError+0x28>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019a:	f383 8811 	msr	BASEPRI, r3
 801019e:	f3bf 8f6f 	isb	sy
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	60bb      	str	r3, [r7, #8]
}
 80101a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80101aa:	bf00      	nop
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d0fc      	beq.n	80101ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101b2:	bf00      	nop
 80101b4:	bf00      	nop
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	20000098 	.word	0x20000098
	...

080101d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101d0:	4b07      	ldr	r3, [pc, #28]	; (80101f0 <pxCurrentTCBConst2>)
 80101d2:	6819      	ldr	r1, [r3, #0]
 80101d4:	6808      	ldr	r0, [r1, #0]
 80101d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101da:	f380 8809 	msr	PSP, r0
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f04f 0000 	mov.w	r0, #0
 80101e6:	f380 8811 	msr	BASEPRI, r0
 80101ea:	4770      	bx	lr
 80101ec:	f3af 8000 	nop.w

080101f0 <pxCurrentTCBConst2>:
 80101f0:	20004ae8 	.word	0x20004ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80101f4:	bf00      	nop
 80101f6:	bf00      	nop

080101f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80101f8:	4808      	ldr	r0, [pc, #32]	; (801021c <prvPortStartFirstTask+0x24>)
 80101fa:	6800      	ldr	r0, [r0, #0]
 80101fc:	6800      	ldr	r0, [r0, #0]
 80101fe:	f380 8808 	msr	MSP, r0
 8010202:	f04f 0000 	mov.w	r0, #0
 8010206:	f380 8814 	msr	CONTROL, r0
 801020a:	b662      	cpsie	i
 801020c:	b661      	cpsie	f
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	df00      	svc	0
 8010218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801021a:	bf00      	nop
 801021c:	e000ed08 	.word	0xe000ed08

08010220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010226:	4b46      	ldr	r3, [pc, #280]	; (8010340 <xPortStartScheduler+0x120>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a46      	ldr	r2, [pc, #280]	; (8010344 <xPortStartScheduler+0x124>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d10a      	bne.n	8010246 <xPortStartScheduler+0x26>
	__asm volatile
 8010230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010234:	f383 8811 	msr	BASEPRI, r3
 8010238:	f3bf 8f6f 	isb	sy
 801023c:	f3bf 8f4f 	dsb	sy
 8010240:	613b      	str	r3, [r7, #16]
}
 8010242:	bf00      	nop
 8010244:	e7fe      	b.n	8010244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010246:	4b3e      	ldr	r3, [pc, #248]	; (8010340 <xPortStartScheduler+0x120>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a3f      	ldr	r2, [pc, #252]	; (8010348 <xPortStartScheduler+0x128>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d10a      	bne.n	8010266 <xPortStartScheduler+0x46>
	__asm volatile
 8010250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010254:	f383 8811 	msr	BASEPRI, r3
 8010258:	f3bf 8f6f 	isb	sy
 801025c:	f3bf 8f4f 	dsb	sy
 8010260:	60fb      	str	r3, [r7, #12]
}
 8010262:	bf00      	nop
 8010264:	e7fe      	b.n	8010264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010266:	4b39      	ldr	r3, [pc, #228]	; (801034c <xPortStartScheduler+0x12c>)
 8010268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	b2db      	uxtb	r3, r3
 8010270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	22ff      	movs	r2, #255	; 0xff
 8010276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	b2db      	uxtb	r3, r3
 801027e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010280:	78fb      	ldrb	r3, [r7, #3]
 8010282:	b2db      	uxtb	r3, r3
 8010284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010288:	b2da      	uxtb	r2, r3
 801028a:	4b31      	ldr	r3, [pc, #196]	; (8010350 <xPortStartScheduler+0x130>)
 801028c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801028e:	4b31      	ldr	r3, [pc, #196]	; (8010354 <xPortStartScheduler+0x134>)
 8010290:	2207      	movs	r2, #7
 8010292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010294:	e009      	b.n	80102aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010296:	4b2f      	ldr	r3, [pc, #188]	; (8010354 <xPortStartScheduler+0x134>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	3b01      	subs	r3, #1
 801029c:	4a2d      	ldr	r2, [pc, #180]	; (8010354 <xPortStartScheduler+0x134>)
 801029e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102a0:	78fb      	ldrb	r3, [r7, #3]
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102aa:	78fb      	ldrb	r3, [r7, #3]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102b2:	2b80      	cmp	r3, #128	; 0x80
 80102b4:	d0ef      	beq.n	8010296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102b6:	4b27      	ldr	r3, [pc, #156]	; (8010354 <xPortStartScheduler+0x134>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f1c3 0307 	rsb	r3, r3, #7
 80102be:	2b04      	cmp	r3, #4
 80102c0:	d00a      	beq.n	80102d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	f383 8811 	msr	BASEPRI, r3
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	60bb      	str	r3, [r7, #8]
}
 80102d4:	bf00      	nop
 80102d6:	e7fe      	b.n	80102d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80102d8:	4b1e      	ldr	r3, [pc, #120]	; (8010354 <xPortStartScheduler+0x134>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	021b      	lsls	r3, r3, #8
 80102de:	4a1d      	ldr	r2, [pc, #116]	; (8010354 <xPortStartScheduler+0x134>)
 80102e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80102e2:	4b1c      	ldr	r3, [pc, #112]	; (8010354 <xPortStartScheduler+0x134>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80102ea:	4a1a      	ldr	r2, [pc, #104]	; (8010354 <xPortStartScheduler+0x134>)
 80102ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80102f6:	4b18      	ldr	r3, [pc, #96]	; (8010358 <xPortStartScheduler+0x138>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a17      	ldr	r2, [pc, #92]	; (8010358 <xPortStartScheduler+0x138>)
 80102fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010302:	4b15      	ldr	r3, [pc, #84]	; (8010358 <xPortStartScheduler+0x138>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a14      	ldr	r2, [pc, #80]	; (8010358 <xPortStartScheduler+0x138>)
 8010308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801030c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801030e:	f000 f8dd 	bl	80104cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010312:	4b12      	ldr	r3, [pc, #72]	; (801035c <xPortStartScheduler+0x13c>)
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010318:	f000 f8fc 	bl	8010514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801031c:	4b10      	ldr	r3, [pc, #64]	; (8010360 <xPortStartScheduler+0x140>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a0f      	ldr	r2, [pc, #60]	; (8010360 <xPortStartScheduler+0x140>)
 8010322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010328:	f7ff ff66 	bl	80101f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801032c:	f7ff fba4 	bl	800fa78 <vTaskSwitchContext>
	prvTaskExitError();
 8010330:	f7ff ff1c 	bl	801016c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010334:	2300      	movs	r3, #0
}
 8010336:	4618      	mov	r0, r3
 8010338:	3718      	adds	r7, #24
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	e000ed00 	.word	0xe000ed00
 8010344:	410fc271 	.word	0x410fc271
 8010348:	410fc270 	.word	0x410fc270
 801034c:	e000e400 	.word	0xe000e400
 8010350:	20004c14 	.word	0x20004c14
 8010354:	20004c18 	.word	0x20004c18
 8010358:	e000ed20 	.word	0xe000ed20
 801035c:	20000098 	.word	0x20000098
 8010360:	e000ef34 	.word	0xe000ef34

08010364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
	__asm volatile
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	607b      	str	r3, [r7, #4]
}
 801037c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801037e:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <vPortEnterCritical+0x58>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	3301      	adds	r3, #1
 8010384:	4a0d      	ldr	r2, [pc, #52]	; (80103bc <vPortEnterCritical+0x58>)
 8010386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010388:	4b0c      	ldr	r3, [pc, #48]	; (80103bc <vPortEnterCritical+0x58>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d10f      	bne.n	80103b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010390:	4b0b      	ldr	r3, [pc, #44]	; (80103c0 <vPortEnterCritical+0x5c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00a      	beq.n	80103b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	603b      	str	r3, [r7, #0]
}
 80103ac:	bf00      	nop
 80103ae:	e7fe      	b.n	80103ae <vPortEnterCritical+0x4a>
	}
}
 80103b0:	bf00      	nop
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr
 80103bc:	20000098 	.word	0x20000098
 80103c0:	e000ed04 	.word	0xe000ed04

080103c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80103ca:	4b12      	ldr	r3, [pc, #72]	; (8010414 <vPortExitCritical+0x50>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d10a      	bne.n	80103e8 <vPortExitCritical+0x24>
	__asm volatile
 80103d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d6:	f383 8811 	msr	BASEPRI, r3
 80103da:	f3bf 8f6f 	isb	sy
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	607b      	str	r3, [r7, #4]
}
 80103e4:	bf00      	nop
 80103e6:	e7fe      	b.n	80103e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80103e8:	4b0a      	ldr	r3, [pc, #40]	; (8010414 <vPortExitCritical+0x50>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	4a09      	ldr	r2, [pc, #36]	; (8010414 <vPortExitCritical+0x50>)
 80103f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80103f2:	4b08      	ldr	r3, [pc, #32]	; (8010414 <vPortExitCritical+0x50>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d105      	bne.n	8010406 <vPortExitCritical+0x42>
 80103fa:	2300      	movs	r3, #0
 80103fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010406:	bf00      	nop
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	20000098 	.word	0x20000098
	...

08010420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010420:	f3ef 8009 	mrs	r0, PSP
 8010424:	f3bf 8f6f 	isb	sy
 8010428:	4b15      	ldr	r3, [pc, #84]	; (8010480 <pxCurrentTCBConst>)
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	f01e 0f10 	tst.w	lr, #16
 8010430:	bf08      	it	eq
 8010432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043a:	6010      	str	r0, [r2, #0]
 801043c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010444:	f380 8811 	msr	BASEPRI, r0
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	f3bf 8f6f 	isb	sy
 8010450:	f7ff fb12 	bl	800fa78 <vTaskSwitchContext>
 8010454:	f04f 0000 	mov.w	r0, #0
 8010458:	f380 8811 	msr	BASEPRI, r0
 801045c:	bc09      	pop	{r0, r3}
 801045e:	6819      	ldr	r1, [r3, #0]
 8010460:	6808      	ldr	r0, [r1, #0]
 8010462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010466:	f01e 0f10 	tst.w	lr, #16
 801046a:	bf08      	it	eq
 801046c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010470:	f380 8809 	msr	PSP, r0
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop
 801047c:	f3af 8000 	nop.w

08010480 <pxCurrentTCBConst>:
 8010480:	20004ae8 	.word	0x20004ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010484:	bf00      	nop
 8010486:	bf00      	nop

08010488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
	__asm volatile
 801048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	607b      	str	r3, [r7, #4]
}
 80104a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104a2:	f7ff fa31 	bl	800f908 <xTaskIncrementTick>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d003      	beq.n	80104b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104ac:	4b06      	ldr	r3, [pc, #24]	; (80104c8 <SysTick_Handler+0x40>)
 80104ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104b2:	601a      	str	r2, [r3, #0]
 80104b4:	2300      	movs	r3, #0
 80104b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	f383 8811 	msr	BASEPRI, r3
}
 80104be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	e000ed04 	.word	0xe000ed04

080104cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80104d0:	4b0b      	ldr	r3, [pc, #44]	; (8010500 <vPortSetupTimerInterrupt+0x34>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80104d6:	4b0b      	ldr	r3, [pc, #44]	; (8010504 <vPortSetupTimerInterrupt+0x38>)
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80104dc:	4b0a      	ldr	r3, [pc, #40]	; (8010508 <vPortSetupTimerInterrupt+0x3c>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a0a      	ldr	r2, [pc, #40]	; (801050c <vPortSetupTimerInterrupt+0x40>)
 80104e2:	fba2 2303 	umull	r2, r3, r2, r3
 80104e6:	099b      	lsrs	r3, r3, #6
 80104e8:	4a09      	ldr	r2, [pc, #36]	; (8010510 <vPortSetupTimerInterrupt+0x44>)
 80104ea:	3b01      	subs	r3, #1
 80104ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80104ee:	4b04      	ldr	r3, [pc, #16]	; (8010500 <vPortSetupTimerInterrupt+0x34>)
 80104f0:	2207      	movs	r2, #7
 80104f2:	601a      	str	r2, [r3, #0]
}
 80104f4:	bf00      	nop
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	e000e010 	.word	0xe000e010
 8010504:	e000e018 	.word	0xe000e018
 8010508:	20000000 	.word	0x20000000
 801050c:	10624dd3 	.word	0x10624dd3
 8010510:	e000e014 	.word	0xe000e014

08010514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010524 <vPortEnableVFP+0x10>
 8010518:	6801      	ldr	r1, [r0, #0]
 801051a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801051e:	6001      	str	r1, [r0, #0]
 8010520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010522:	bf00      	nop
 8010524:	e000ed88 	.word	0xe000ed88

08010528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b08a      	sub	sp, #40	; 0x28
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010530:	2300      	movs	r3, #0
 8010532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010534:	f7ff f93e 	bl	800f7b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010538:	4b5b      	ldr	r3, [pc, #364]	; (80106a8 <pvPortMalloc+0x180>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d101      	bne.n	8010544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010540:	f000 f920 	bl	8010784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010544:	4b59      	ldr	r3, [pc, #356]	; (80106ac <pvPortMalloc+0x184>)
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4013      	ands	r3, r2
 801054c:	2b00      	cmp	r3, #0
 801054e:	f040 8093 	bne.w	8010678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d01d      	beq.n	8010594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010558:	2208      	movs	r2, #8
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4413      	add	r3, r2
 801055e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f003 0307 	and.w	r3, r3, #7
 8010566:	2b00      	cmp	r3, #0
 8010568:	d014      	beq.n	8010594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f023 0307 	bic.w	r3, r3, #7
 8010570:	3308      	adds	r3, #8
 8010572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f003 0307 	and.w	r3, r3, #7
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00a      	beq.n	8010594 <pvPortMalloc+0x6c>
	__asm volatile
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	617b      	str	r3, [r7, #20]
}
 8010590:	bf00      	nop
 8010592:	e7fe      	b.n	8010592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d06e      	beq.n	8010678 <pvPortMalloc+0x150>
 801059a:	4b45      	ldr	r3, [pc, #276]	; (80106b0 <pvPortMalloc+0x188>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	687a      	ldr	r2, [r7, #4]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d869      	bhi.n	8010678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80105a4:	4b43      	ldr	r3, [pc, #268]	; (80106b4 <pvPortMalloc+0x18c>)
 80105a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80105a8:	4b42      	ldr	r3, [pc, #264]	; (80106b4 <pvPortMalloc+0x18c>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ae:	e004      	b.n	80105ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80105b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80105b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d903      	bls.n	80105cc <pvPortMalloc+0xa4>
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1f1      	bne.n	80105b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80105cc:	4b36      	ldr	r3, [pc, #216]	; (80106a8 <pvPortMalloc+0x180>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d050      	beq.n	8010678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80105d6:	6a3b      	ldr	r3, [r7, #32]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2208      	movs	r2, #8
 80105dc:	4413      	add	r3, r2
 80105de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80105e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	1ad2      	subs	r2, r2, r3
 80105f0:	2308      	movs	r3, #8
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d91f      	bls.n	8010638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4413      	add	r3, r2
 80105fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	f003 0307 	and.w	r3, r3, #7
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00a      	beq.n	8010620 <pvPortMalloc+0xf8>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	613b      	str	r3, [r7, #16]
}
 801061c:	bf00      	nop
 801061e:	e7fe      	b.n	801061e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	685a      	ldr	r2, [r3, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	1ad2      	subs	r2, r2, r3
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010632:	69b8      	ldr	r0, [r7, #24]
 8010634:	f000 f908 	bl	8010848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010638:	4b1d      	ldr	r3, [pc, #116]	; (80106b0 <pvPortMalloc+0x188>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	4a1b      	ldr	r2, [pc, #108]	; (80106b0 <pvPortMalloc+0x188>)
 8010644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010646:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <pvPortMalloc+0x188>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	4b1b      	ldr	r3, [pc, #108]	; (80106b8 <pvPortMalloc+0x190>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d203      	bcs.n	801065a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010652:	4b17      	ldr	r3, [pc, #92]	; (80106b0 <pvPortMalloc+0x188>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a18      	ldr	r2, [pc, #96]	; (80106b8 <pvPortMalloc+0x190>)
 8010658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	685a      	ldr	r2, [r3, #4]
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <pvPortMalloc+0x184>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	431a      	orrs	r2, r3
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <pvPortMalloc+0x194>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3301      	adds	r3, #1
 8010674:	4a11      	ldr	r2, [pc, #68]	; (80106bc <pvPortMalloc+0x194>)
 8010676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010678:	f7ff f8aa 	bl	800f7d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	f003 0307 	and.w	r3, r3, #7
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00a      	beq.n	801069c <pvPortMalloc+0x174>
	__asm volatile
 8010686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068a:	f383 8811 	msr	BASEPRI, r3
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	f3bf 8f4f 	dsb	sy
 8010696:	60fb      	str	r3, [r7, #12]
}
 8010698:	bf00      	nop
 801069a:	e7fe      	b.n	801069a <pvPortMalloc+0x172>
	return pvReturn;
 801069c:	69fb      	ldr	r3, [r7, #28]
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3728      	adds	r7, #40	; 0x28
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	20008824 	.word	0x20008824
 80106ac:	20008838 	.word	0x20008838
 80106b0:	20008828 	.word	0x20008828
 80106b4:	2000881c 	.word	0x2000881c
 80106b8:	2000882c 	.word	0x2000882c
 80106bc:	20008830 	.word	0x20008830

080106c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d04d      	beq.n	801076e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80106d2:	2308      	movs	r3, #8
 80106d4:	425b      	negs	r3, r3
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	4413      	add	r3, r2
 80106da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	4b24      	ldr	r3, [pc, #144]	; (8010778 <vPortFree+0xb8>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4013      	ands	r3, r2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10a      	bne.n	8010704 <vPortFree+0x44>
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	60fb      	str	r3, [r7, #12]
}
 8010700:	bf00      	nop
 8010702:	e7fe      	b.n	8010702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00a      	beq.n	8010722 <vPortFree+0x62>
	__asm volatile
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	60bb      	str	r3, [r7, #8]
}
 801071e:	bf00      	nop
 8010720:	e7fe      	b.n	8010720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	685a      	ldr	r2, [r3, #4]
 8010726:	4b14      	ldr	r3, [pc, #80]	; (8010778 <vPortFree+0xb8>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4013      	ands	r3, r2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01e      	beq.n	801076e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d11a      	bne.n	801076e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	4b0e      	ldr	r3, [pc, #56]	; (8010778 <vPortFree+0xb8>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	43db      	mvns	r3, r3
 8010742:	401a      	ands	r2, r3
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010748:	f7ff f834 	bl	800f7b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	4b0a      	ldr	r3, [pc, #40]	; (801077c <vPortFree+0xbc>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4413      	add	r3, r2
 8010756:	4a09      	ldr	r2, [pc, #36]	; (801077c <vPortFree+0xbc>)
 8010758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801075a:	6938      	ldr	r0, [r7, #16]
 801075c:	f000 f874 	bl	8010848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010760:	4b07      	ldr	r3, [pc, #28]	; (8010780 <vPortFree+0xc0>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	3301      	adds	r3, #1
 8010766:	4a06      	ldr	r2, [pc, #24]	; (8010780 <vPortFree+0xc0>)
 8010768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801076a:	f7ff f831 	bl	800f7d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801076e:	bf00      	nop
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	20008838 	.word	0x20008838
 801077c:	20008828 	.word	0x20008828
 8010780:	20008834 	.word	0x20008834

08010784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801078a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801078e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010790:	4b27      	ldr	r3, [pc, #156]	; (8010830 <prvHeapInit+0xac>)
 8010792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f003 0307 	and.w	r3, r3, #7
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00c      	beq.n	80107b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	3307      	adds	r3, #7
 80107a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0307 	bic.w	r3, r3, #7
 80107aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	4a1f      	ldr	r2, [pc, #124]	; (8010830 <prvHeapInit+0xac>)
 80107b4:	4413      	add	r3, r2
 80107b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80107bc:	4a1d      	ldr	r2, [pc, #116]	; (8010834 <prvHeapInit+0xb0>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80107c2:	4b1c      	ldr	r3, [pc, #112]	; (8010834 <prvHeapInit+0xb0>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	68ba      	ldr	r2, [r7, #8]
 80107cc:	4413      	add	r3, r2
 80107ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80107d0:	2208      	movs	r2, #8
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f023 0307 	bic.w	r3, r3, #7
 80107de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	4a15      	ldr	r2, [pc, #84]	; (8010838 <prvHeapInit+0xb4>)
 80107e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80107e6:	4b14      	ldr	r3, [pc, #80]	; (8010838 <prvHeapInit+0xb4>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2200      	movs	r2, #0
 80107ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80107ee:	4b12      	ldr	r3, [pc, #72]	; (8010838 <prvHeapInit+0xb4>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	1ad2      	subs	r2, r2, r3
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010804:	4b0c      	ldr	r3, [pc, #48]	; (8010838 <prvHeapInit+0xb4>)
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	4a0a      	ldr	r2, [pc, #40]	; (801083c <prvHeapInit+0xb8>)
 8010812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	4a09      	ldr	r2, [pc, #36]	; (8010840 <prvHeapInit+0xbc>)
 801081a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <prvHeapInit+0xc0>)
 801081e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010822:	601a      	str	r2, [r3, #0]
}
 8010824:	bf00      	nop
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	20004c1c 	.word	0x20004c1c
 8010834:	2000881c 	.word	0x2000881c
 8010838:	20008824 	.word	0x20008824
 801083c:	2000882c 	.word	0x2000882c
 8010840:	20008828 	.word	0x20008828
 8010844:	20008838 	.word	0x20008838

08010848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <prvInsertBlockIntoFreeList+0xac>)
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e002      	b.n	801085c <prvInsertBlockIntoFreeList+0x14>
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	60fb      	str	r3, [r7, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	429a      	cmp	r2, r3
 8010864:	d8f7      	bhi.n	8010856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	68ba      	ldr	r2, [r7, #8]
 8010870:	4413      	add	r3, r2
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	429a      	cmp	r2, r3
 8010876:	d108      	bne.n	801088a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	441a      	add	r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	441a      	add	r2, r3
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	429a      	cmp	r2, r3
 801089c:	d118      	bne.n	80108d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	4b15      	ldr	r3, [pc, #84]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d00d      	beq.n	80108c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	441a      	add	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	681a      	ldr	r2, [r3, #0]
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	601a      	str	r2, [r3, #0]
 80108c4:	e008      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80108c6:	4b0c      	ldr	r3, [pc, #48]	; (80108f8 <prvInsertBlockIntoFreeList+0xb0>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	e003      	b.n	80108d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d002      	beq.n	80108e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108e6:	bf00      	nop
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	2000881c 	.word	0x2000881c
 80108f8:	20008824 	.word	0x20008824

080108fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010900:	2200      	movs	r2, #0
 8010902:	4912      	ldr	r1, [pc, #72]	; (801094c <MX_USB_DEVICE_Init+0x50>)
 8010904:	4812      	ldr	r0, [pc, #72]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 8010906:	f7fc fdc9 	bl	800d49c <USBD_Init>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d001      	beq.n	8010914 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010910:	f7f0 f94e 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010914:	490f      	ldr	r1, [pc, #60]	; (8010954 <MX_USB_DEVICE_Init+0x58>)
 8010916:	480e      	ldr	r0, [pc, #56]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 8010918:	f7fc fdf0 	bl	800d4fc <USBD_RegisterClass>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	d001      	beq.n	8010926 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010922:	f7f0 f945 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010926:	490c      	ldr	r1, [pc, #48]	; (8010958 <MX_USB_DEVICE_Init+0x5c>)
 8010928:	4809      	ldr	r0, [pc, #36]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 801092a:	f7fc fce1 	bl	800d2f0 <USBD_CDC_RegisterInterface>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010934:	f7f0 f93c 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010938:	4805      	ldr	r0, [pc, #20]	; (8010950 <MX_USB_DEVICE_Init+0x54>)
 801093a:	f7fc fe15 	bl	800d568 <USBD_Start>
 801093e:	4603      	mov	r3, r0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d001      	beq.n	8010948 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010944:	f7f0 f934 	bl	8000bb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010948:	bf00      	nop
 801094a:	bd80      	pop	{r7, pc}
 801094c:	200000b0 	.word	0x200000b0
 8010950:	2000883c 	.word	0x2000883c
 8010954:	20000018 	.word	0x20000018
 8010958:	2000009c 	.word	0x2000009c

0801095c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010960:	2200      	movs	r2, #0
 8010962:	4905      	ldr	r1, [pc, #20]	; (8010978 <CDC_Init_FS+0x1c>)
 8010964:	4805      	ldr	r0, [pc, #20]	; (801097c <CDC_Init_FS+0x20>)
 8010966:	f7fc fcdd 	bl	800d324 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801096a:	4905      	ldr	r1, [pc, #20]	; (8010980 <CDC_Init_FS+0x24>)
 801096c:	4803      	ldr	r0, [pc, #12]	; (801097c <CDC_Init_FS+0x20>)
 801096e:	f7fc fcfb 	bl	800d368 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010972:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010974:	4618      	mov	r0, r3
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20008f44 	.word	0x20008f44
 801097c:	2000883c 	.word	0x2000883c
 8010980:	20008b5c 	.word	0x20008b5c

08010984 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010984:	b480      	push	{r7}
 8010986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010988:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801098a:	4618      	mov	r0, r3
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010994:	b480      	push	{r7}
 8010996:	b083      	sub	sp, #12
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	6039      	str	r1, [r7, #0]
 801099e:	71fb      	strb	r3, [r7, #7]
 80109a0:	4613      	mov	r3, r2
 80109a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80109a4:	79fb      	ldrb	r3, [r7, #7]
 80109a6:	2b23      	cmp	r3, #35	; 0x23
 80109a8:	d84a      	bhi.n	8010a40 <CDC_Control_FS+0xac>
 80109aa:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <CDC_Control_FS+0x1c>)
 80109ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b0:	08010a41 	.word	0x08010a41
 80109b4:	08010a41 	.word	0x08010a41
 80109b8:	08010a41 	.word	0x08010a41
 80109bc:	08010a41 	.word	0x08010a41
 80109c0:	08010a41 	.word	0x08010a41
 80109c4:	08010a41 	.word	0x08010a41
 80109c8:	08010a41 	.word	0x08010a41
 80109cc:	08010a41 	.word	0x08010a41
 80109d0:	08010a41 	.word	0x08010a41
 80109d4:	08010a41 	.word	0x08010a41
 80109d8:	08010a41 	.word	0x08010a41
 80109dc:	08010a41 	.word	0x08010a41
 80109e0:	08010a41 	.word	0x08010a41
 80109e4:	08010a41 	.word	0x08010a41
 80109e8:	08010a41 	.word	0x08010a41
 80109ec:	08010a41 	.word	0x08010a41
 80109f0:	08010a41 	.word	0x08010a41
 80109f4:	08010a41 	.word	0x08010a41
 80109f8:	08010a41 	.word	0x08010a41
 80109fc:	08010a41 	.word	0x08010a41
 8010a00:	08010a41 	.word	0x08010a41
 8010a04:	08010a41 	.word	0x08010a41
 8010a08:	08010a41 	.word	0x08010a41
 8010a0c:	08010a41 	.word	0x08010a41
 8010a10:	08010a41 	.word	0x08010a41
 8010a14:	08010a41 	.word	0x08010a41
 8010a18:	08010a41 	.word	0x08010a41
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a41 	.word	0x08010a41
 8010a24:	08010a41 	.word	0x08010a41
 8010a28:	08010a41 	.word	0x08010a41
 8010a2c:	08010a41 	.word	0x08010a41
 8010a30:	08010a41 	.word	0x08010a41
 8010a34:	08010a41 	.word	0x08010a41
 8010a38:	08010a41 	.word	0x08010a41
 8010a3c:	08010a41 	.word	0x08010a41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a40:	bf00      	nop
  }

  return (USBD_OK);
 8010a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	480e      	ldr	r0, [pc, #56]	; (8010a98 <CDC_Receive_FS+0x48>)
 8010a5e:	f7fc fc83 	bl	800d368 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a62:	480d      	ldr	r0, [pc, #52]	; (8010a98 <CDC_Receive_FS+0x48>)
 8010a64:	f7fc fce4 	bl	800d430 <USBD_CDC_ReceivePacket>

  dataUsb_rxlength =  (uint8_t)* Len;
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	b2da      	uxtb	r2, r3
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <CDC_Receive_FS+0x4c>)
 8010a70:	701a      	strb	r2, [r3, #0]
  memcpy(dataUsb_rx,Buf,dataUsb_rxlength);
 8010a72:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <CDC_Receive_FS+0x4c>)
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	6879      	ldr	r1, [r7, #4]
 8010a7a:	4809      	ldr	r0, [pc, #36]	; (8010aa0 <CDC_Receive_FS+0x50>)
 8010a7c:	f002 fca6 	bl	80133cc <memcpy>
  AnalyserCMD(dataUsb_rx,dataUsb_rxlength, USB);
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <CDC_Receive_FS+0x4c>)
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	2201      	movs	r2, #1
 8010a86:	4619      	mov	r1, r3
 8010a88:	4805      	ldr	r0, [pc, #20]	; (8010aa0 <CDC_Receive_FS+0x50>)
 8010a8a:	f002 f833 	bl	8012af4 <AnalyserCMD>

  return (USBD_OK);
 8010a8e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	2000883c 	.word	0x2000883c
 8010a9c:	20008b18 	.word	0x20008b18
 8010aa0:	20008b1c 	.word	0x20008b1c

08010aa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	460b      	mov	r3, r1
 8010aae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010ab4:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <CDC_Transmit_FS+0x48>)
 8010ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010aba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d001      	beq.n	8010aca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	e00b      	b.n	8010ae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010aca:	887b      	ldrh	r3, [r7, #2]
 8010acc:	461a      	mov	r2, r3
 8010ace:	6879      	ldr	r1, [r7, #4]
 8010ad0:	4806      	ldr	r0, [pc, #24]	; (8010aec <CDC_Transmit_FS+0x48>)
 8010ad2:	f7fc fc27 	bl	800d324 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010ad6:	4805      	ldr	r0, [pc, #20]	; (8010aec <CDC_Transmit_FS+0x48>)
 8010ad8:	f7fc fc64 	bl	800d3a4 <USBD_CDC_TransmitPacket>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	2000883c 	.word	0x2000883c

08010af0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b087      	sub	sp, #28
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	4613      	mov	r3, r2
 8010afc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	371c      	adds	r7, #28
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
	...

08010b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	6039      	str	r1, [r7, #0]
 8010b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	2212      	movs	r2, #18
 8010b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010b26:	4b03      	ldr	r3, [pc, #12]	; (8010b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	370c      	adds	r7, #12
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b32:	4770      	bx	lr
 8010b34:	200000cc 	.word	0x200000cc

08010b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	4603      	mov	r3, r0
 8010b40:	6039      	str	r1, [r7, #0]
 8010b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	2204      	movs	r2, #4
 8010b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b4a:	4b03      	ldr	r3, [pc, #12]	; (8010b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr
 8010b58:	200000e0 	.word	0x200000e0

08010b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	4603      	mov	r3, r0
 8010b64:	6039      	str	r1, [r7, #0]
 8010b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b68:	79fb      	ldrb	r3, [r7, #7]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d105      	bne.n	8010b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	4907      	ldr	r1, [pc, #28]	; (8010b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8010b72:	4808      	ldr	r0, [pc, #32]	; (8010b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8010b74:	f7fd fea4 	bl	800e8c0 <USBD_GetString>
 8010b78:	e004      	b.n	8010b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010b7a:	683a      	ldr	r2, [r7, #0]
 8010b7c:	4904      	ldr	r1, [pc, #16]	; (8010b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8010b7e:	4805      	ldr	r0, [pc, #20]	; (8010b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8010b80:	f7fd fe9e 	bl	800e8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2000932c 	.word	0x2000932c
 8010b94:	0801346c 	.word	0x0801346c

08010b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	6039      	str	r1, [r7, #0]
 8010ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010ba4:	683a      	ldr	r2, [r7, #0]
 8010ba6:	4904      	ldr	r1, [pc, #16]	; (8010bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ba8:	4804      	ldr	r0, [pc, #16]	; (8010bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010baa:	f7fd fe89 	bl	800e8c0 <USBD_GetString>
  return USBD_StrDesc;
 8010bae:	4b02      	ldr	r3, [pc, #8]	; (8010bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	2000932c 	.word	0x2000932c
 8010bbc:	0801347c 	.word	0x0801347c

08010bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	6039      	str	r1, [r7, #0]
 8010bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	221a      	movs	r2, #26
 8010bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010bd2:	f000 f843 	bl	8010c5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010bd6:	4b02      	ldr	r3, [pc, #8]	; (8010be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	200000e4 	.word	0x200000e4

08010be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	6039      	str	r1, [r7, #0]
 8010bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010bf0:	79fb      	ldrb	r3, [r7, #7]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d105      	bne.n	8010c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	4907      	ldr	r1, [pc, #28]	; (8010c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010bfa:	4808      	ldr	r0, [pc, #32]	; (8010c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010bfc:	f7fd fe60 	bl	800e8c0 <USBD_GetString>
 8010c00:	e004      	b.n	8010c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	4904      	ldr	r1, [pc, #16]	; (8010c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010c06:	4805      	ldr	r0, [pc, #20]	; (8010c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010c08:	f7fd fe5a 	bl	800e8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c0c:	4b02      	ldr	r3, [pc, #8]	; (8010c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	2000932c 	.word	0x2000932c
 8010c1c:	08013484 	.word	0x08013484

08010c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	6039      	str	r1, [r7, #0]
 8010c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c2c:	79fb      	ldrb	r3, [r7, #7]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d105      	bne.n	8010c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	4907      	ldr	r1, [pc, #28]	; (8010c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c36:	4808      	ldr	r0, [pc, #32]	; (8010c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c38:	f7fd fe42 	bl	800e8c0 <USBD_GetString>
 8010c3c:	e004      	b.n	8010c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	4904      	ldr	r1, [pc, #16]	; (8010c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010c42:	4805      	ldr	r0, [pc, #20]	; (8010c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010c44:	f7fd fe3c 	bl	800e8c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c48:	4b02      	ldr	r3, [pc, #8]	; (8010c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop
 8010c54:	2000932c 	.word	0x2000932c
 8010c58:	08013490 	.word	0x08013490

08010c5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010c62:	4b0f      	ldr	r3, [pc, #60]	; (8010ca0 <Get_SerialNum+0x44>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010c68:	4b0e      	ldr	r3, [pc, #56]	; (8010ca4 <Get_SerialNum+0x48>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010c6e:	4b0e      	ldr	r3, [pc, #56]	; (8010ca8 <Get_SerialNum+0x4c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4413      	add	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d009      	beq.n	8010c96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010c82:	2208      	movs	r2, #8
 8010c84:	4909      	ldr	r1, [pc, #36]	; (8010cac <Get_SerialNum+0x50>)
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f000 f814 	bl	8010cb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010c8c:	2204      	movs	r2, #4
 8010c8e:	4908      	ldr	r1, [pc, #32]	; (8010cb0 <Get_SerialNum+0x54>)
 8010c90:	68b8      	ldr	r0, [r7, #8]
 8010c92:	f000 f80f 	bl	8010cb4 <IntToUnicode>
  }
}
 8010c96:	bf00      	nop
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	1fff7a10 	.word	0x1fff7a10
 8010ca4:	1fff7a14 	.word	0x1fff7a14
 8010ca8:	1fff7a18 	.word	0x1fff7a18
 8010cac:	200000e6 	.word	0x200000e6
 8010cb0:	200000f6 	.word	0x200000f6

08010cb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b087      	sub	sp, #28
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	75fb      	strb	r3, [r7, #23]
 8010cca:	e027      	b.n	8010d1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	0f1b      	lsrs	r3, r3, #28
 8010cd0:	2b09      	cmp	r3, #9
 8010cd2:	d80b      	bhi.n	8010cec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	0f1b      	lsrs	r3, r3, #28
 8010cd8:	b2da      	uxtb	r2, r3
 8010cda:	7dfb      	ldrb	r3, [r7, #23]
 8010cdc:	005b      	lsls	r3, r3, #1
 8010cde:	4619      	mov	r1, r3
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	440b      	add	r3, r1
 8010ce4:	3230      	adds	r2, #48	; 0x30
 8010ce6:	b2d2      	uxtb	r2, r2
 8010ce8:	701a      	strb	r2, [r3, #0]
 8010cea:	e00a      	b.n	8010d02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	0f1b      	lsrs	r3, r3, #28
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	7dfb      	ldrb	r3, [r7, #23]
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	440b      	add	r3, r1
 8010cfc:	3237      	adds	r2, #55	; 0x37
 8010cfe:	b2d2      	uxtb	r2, r2
 8010d00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d08:	7dfb      	ldrb	r3, [r7, #23]
 8010d0a:	005b      	lsls	r3, r3, #1
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	4413      	add	r3, r2
 8010d12:	2200      	movs	r2, #0
 8010d14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d16:	7dfb      	ldrb	r3, [r7, #23]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	75fb      	strb	r3, [r7, #23]
 8010d1c:	7dfa      	ldrb	r2, [r7, #23]
 8010d1e:	79fb      	ldrb	r3, [r7, #7]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d3d3      	bcc.n	8010ccc <IntToUnicode+0x18>
  }
}
 8010d24:	bf00      	nop
 8010d26:	bf00      	nop
 8010d28:	371c      	adds	r7, #28
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
	...

08010d34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08a      	sub	sp, #40	; 0x28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d3c:	f107 0314 	add.w	r3, r7, #20
 8010d40:	2200      	movs	r2, #0
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	605a      	str	r2, [r3, #4]
 8010d46:	609a      	str	r2, [r3, #8]
 8010d48:	60da      	str	r2, [r3, #12]
 8010d4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d54:	d13a      	bne.n	8010dcc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d56:	2300      	movs	r3, #0
 8010d58:	613b      	str	r3, [r7, #16]
 8010d5a:	4b1e      	ldr	r3, [pc, #120]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d5e:	4a1d      	ldr	r2, [pc, #116]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010d60:	f043 0301 	orr.w	r3, r3, #1
 8010d64:	6313      	str	r3, [r2, #48]	; 0x30
 8010d66:	4b1b      	ldr	r3, [pc, #108]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d6a:	f003 0301 	and.w	r3, r3, #1
 8010d6e:	613b      	str	r3, [r7, #16]
 8010d70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010d72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d78:	2302      	movs	r3, #2
 8010d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d80:	2303      	movs	r3, #3
 8010d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010d84:	230a      	movs	r3, #10
 8010d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d88:	f107 0314 	add.w	r3, r7, #20
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4812      	ldr	r0, [pc, #72]	; (8010dd8 <HAL_PCD_MspInit+0xa4>)
 8010d90:	f7f1 fe28 	bl	80029e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d94:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d98:	4a0e      	ldr	r2, [pc, #56]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d9e:	6353      	str	r3, [r2, #52]	; 0x34
 8010da0:	2300      	movs	r3, #0
 8010da2:	60fb      	str	r3, [r7, #12]
 8010da4:	4b0b      	ldr	r3, [pc, #44]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010da8:	4a0a      	ldr	r2, [pc, #40]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010dae:	6453      	str	r3, [r2, #68]	; 0x44
 8010db0:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <HAL_PCD_MspInit+0xa0>)
 8010db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	2105      	movs	r1, #5
 8010dc0:	2043      	movs	r0, #67	; 0x43
 8010dc2:	f7f1 f9c4 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010dc6:	2043      	movs	r0, #67	; 0x43
 8010dc8:	f7f1 f9dd 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010dcc:	bf00      	nop
 8010dce:	3728      	adds	r7, #40	; 0x28
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}
 8010dd4:	40023800 	.word	0x40023800
 8010dd8:	40020000 	.word	0x40020000

08010ddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b082      	sub	sp, #8
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010df0:	4619      	mov	r1, r3
 8010df2:	4610      	mov	r0, r2
 8010df4:	f7fc fc05 	bl	800d602 <USBD_LL_SetupStage>
}
 8010df8:	bf00      	nop
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010e12:	78fa      	ldrb	r2, [r7, #3]
 8010e14:	6879      	ldr	r1, [r7, #4]
 8010e16:	4613      	mov	r3, r2
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	4413      	add	r3, r2
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	440b      	add	r3, r1
 8010e20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	78fb      	ldrb	r3, [r7, #3]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	f7fc fc3f 	bl	800d6ac <USBD_LL_DataOutStage>
}
 8010e2e:	bf00      	nop
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}

08010e36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b082      	sub	sp, #8
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010e48:	78fa      	ldrb	r2, [r7, #3]
 8010e4a:	6879      	ldr	r1, [r7, #4]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	00db      	lsls	r3, r3, #3
 8010e50:	4413      	add	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	440b      	add	r3, r1
 8010e56:	334c      	adds	r3, #76	; 0x4c
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	78fb      	ldrb	r3, [r7, #3]
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	f7fc fcd8 	bl	800d812 <USBD_LL_DataInStage>
}
 8010e62:	bf00      	nop
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b082      	sub	sp, #8
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fc fe0c 	bl	800da96 <USBD_LL_SOF>
}
 8010e7e:	bf00      	nop
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e86:	b580      	push	{r7, lr}
 8010e88:	b084      	sub	sp, #16
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	d001      	beq.n	8010e9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010e9a:	f7ef fe89 	bl	8000bb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ea4:	7bfa      	ldrb	r2, [r7, #15]
 8010ea6:	4611      	mov	r1, r2
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fc fdb6 	bl	800da1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fc fd5e 	bl	800d976 <USBD_LL_Reset>
}
 8010eba:	bf00      	nop
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
	...

08010ec4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fc fdb1 	bl	800da3a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	6812      	ldr	r2, [r2, #0]
 8010ee6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010eea:	f043 0301 	orr.w	r3, r3, #1
 8010eee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6a1b      	ldr	r3, [r3, #32]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d005      	beq.n	8010f04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ef8:	4b04      	ldr	r3, [pc, #16]	; (8010f0c <HAL_PCD_SuspendCallback+0x48>)
 8010efa:	691b      	ldr	r3, [r3, #16]
 8010efc:	4a03      	ldr	r2, [pc, #12]	; (8010f0c <HAL_PCD_SuspendCallback+0x48>)
 8010efe:	f043 0306 	orr.w	r3, r3, #6
 8010f02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010f04:	bf00      	nop
 8010f06:	3708      	adds	r7, #8
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	e000ed00 	.word	0xe000ed00

08010f10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fc fda1 	bl	800da66 <USBD_LL_Resume>
}
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	460b      	mov	r3, r1
 8010f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f3e:	78fa      	ldrb	r2, [r7, #3]
 8010f40:	4611      	mov	r1, r2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fc fdf9 	bl	800db3a <USBD_LL_IsoOUTIncomplete>
}
 8010f48:	bf00      	nop
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	460b      	mov	r3, r1
 8010f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f62:	78fa      	ldrb	r2, [r7, #3]
 8010f64:	4611      	mov	r1, r2
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fc fdb5 	bl	800dad6 <USBD_LL_IsoINIncomplete>
}
 8010f6c:	bf00      	nop
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fc fe0b 	bl	800db9e <USBD_LL_DevConnected>
}
 8010f88:	bf00      	nop
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fc fe08 	bl	800dbb4 <USBD_LL_DevDisconnected>
}
 8010fa4:	bf00      	nop
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}

08010fac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d13c      	bne.n	8011036 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010fbc:	4a20      	ldr	r2, [pc, #128]	; (8011040 <USBD_LL_Init+0x94>)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	4a1e      	ldr	r2, [pc, #120]	; (8011040 <USBD_LL_Init+0x94>)
 8010fc8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010fcc:	4b1c      	ldr	r3, [pc, #112]	; (8011040 <USBD_LL_Init+0x94>)
 8010fce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010fd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010fd4:	4b1a      	ldr	r3, [pc, #104]	; (8011040 <USBD_LL_Init+0x94>)
 8010fd6:	2204      	movs	r2, #4
 8010fd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010fda:	4b19      	ldr	r3, [pc, #100]	; (8011040 <USBD_LL_Init+0x94>)
 8010fdc:	2202      	movs	r2, #2
 8010fde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010fe0:	4b17      	ldr	r3, [pc, #92]	; (8011040 <USBD_LL_Init+0x94>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010fe6:	4b16      	ldr	r3, [pc, #88]	; (8011040 <USBD_LL_Init+0x94>)
 8010fe8:	2202      	movs	r2, #2
 8010fea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010fec:	4b14      	ldr	r3, [pc, #80]	; (8011040 <USBD_LL_Init+0x94>)
 8010fee:	2200      	movs	r2, #0
 8010ff0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010ff2:	4b13      	ldr	r3, [pc, #76]	; (8011040 <USBD_LL_Init+0x94>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010ff8:	4b11      	ldr	r3, [pc, #68]	; (8011040 <USBD_LL_Init+0x94>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010ffe:	4b10      	ldr	r3, [pc, #64]	; (8011040 <USBD_LL_Init+0x94>)
 8011000:	2200      	movs	r2, #0
 8011002:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011004:	4b0e      	ldr	r3, [pc, #56]	; (8011040 <USBD_LL_Init+0x94>)
 8011006:	2200      	movs	r2, #0
 8011008:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801100a:	480d      	ldr	r0, [pc, #52]	; (8011040 <USBD_LL_Init+0x94>)
 801100c:	f7f3 ff3f 	bl	8004e8e <HAL_PCD_Init>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d001      	beq.n	801101a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011016:	f7ef fdcb 	bl	8000bb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801101a:	2180      	movs	r1, #128	; 0x80
 801101c:	4808      	ldr	r0, [pc, #32]	; (8011040 <USBD_LL_Init+0x94>)
 801101e:	f7f5 f996 	bl	800634e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011022:	2240      	movs	r2, #64	; 0x40
 8011024:	2100      	movs	r1, #0
 8011026:	4806      	ldr	r0, [pc, #24]	; (8011040 <USBD_LL_Init+0x94>)
 8011028:	f7f5 f94a 	bl	80062c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801102c:	2280      	movs	r2, #128	; 0x80
 801102e:	2101      	movs	r1, #1
 8011030:	4803      	ldr	r0, [pc, #12]	; (8011040 <USBD_LL_Init+0x94>)
 8011032:	f7f5 f945 	bl	80062c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011036:	2300      	movs	r3, #0
}
 8011038:	4618      	mov	r0, r3
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}
 8011040:	2000952c 	.word	0x2000952c

08011044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801105a:	4618      	mov	r0, r3
 801105c:	f7f4 f834 	bl	80050c8 <HAL_PCD_Start>
 8011060:	4603      	mov	r3, r0
 8011062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011064:	7bfb      	ldrb	r3, [r7, #15]
 8011066:	4618      	mov	r0, r3
 8011068:	f000 f942 	bl	80112f0 <USBD_Get_USB_Status>
 801106c:	4603      	mov	r3, r0
 801106e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011070:	7bbb      	ldrb	r3, [r7, #14]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b084      	sub	sp, #16
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	4608      	mov	r0, r1
 8011084:	4611      	mov	r1, r2
 8011086:	461a      	mov	r2, r3
 8011088:	4603      	mov	r3, r0
 801108a:	70fb      	strb	r3, [r7, #3]
 801108c:	460b      	mov	r3, r1
 801108e:	70bb      	strb	r3, [r7, #2]
 8011090:	4613      	mov	r3, r2
 8011092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011098:	2300      	movs	r3, #0
 801109a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80110a2:	78bb      	ldrb	r3, [r7, #2]
 80110a4:	883a      	ldrh	r2, [r7, #0]
 80110a6:	78f9      	ldrb	r1, [r7, #3]
 80110a8:	f7f4 fd05 	bl	8005ab6 <HAL_PCD_EP_Open>
 80110ac:	4603      	mov	r3, r0
 80110ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 f91c 	bl	80112f0 <USBD_Get_USB_Status>
 80110b8:	4603      	mov	r3, r0
 80110ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}

080110c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b084      	sub	sp, #16
 80110ca:	af00      	add	r7, sp, #0
 80110cc:	6078      	str	r0, [r7, #4]
 80110ce:	460b      	mov	r3, r1
 80110d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d6:	2300      	movs	r3, #0
 80110d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80110e0:	78fa      	ldrb	r2, [r7, #3]
 80110e2:	4611      	mov	r1, r2
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7f4 fd4e 	bl	8005b86 <HAL_PCD_EP_Close>
 80110ea:	4603      	mov	r3, r0
 80110ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110ee:	7bfb      	ldrb	r3, [r7, #15]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f000 f8fd 	bl	80112f0 <USBD_Get_USB_Status>
 80110f6:	4603      	mov	r3, r0
 80110f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011110:	2300      	movs	r3, #0
 8011112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011114:	2300      	movs	r3, #0
 8011116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801111e:	78fa      	ldrb	r2, [r7, #3]
 8011120:	4611      	mov	r1, r2
 8011122:	4618      	mov	r0, r3
 8011124:	f7f4 fe26 	bl	8005d74 <HAL_PCD_EP_SetStall>
 8011128:	4603      	mov	r3, r0
 801112a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801112c:	7bfb      	ldrb	r3, [r7, #15]
 801112e:	4618      	mov	r0, r3
 8011130:	f000 f8de 	bl	80112f0 <USBD_Get_USB_Status>
 8011134:	4603      	mov	r3, r0
 8011136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011138:	7bbb      	ldrb	r3, [r7, #14]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3710      	adds	r7, #16
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	460b      	mov	r3, r1
 801114c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801115c:	78fa      	ldrb	r2, [r7, #3]
 801115e:	4611      	mov	r1, r2
 8011160:	4618      	mov	r0, r3
 8011162:	f7f4 fe6b 	bl	8005e3c <HAL_PCD_EP_ClrStall>
 8011166:	4603      	mov	r3, r0
 8011168:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801116a:	7bfb      	ldrb	r3, [r7, #15]
 801116c:	4618      	mov	r0, r3
 801116e:	f000 f8bf 	bl	80112f0 <USBD_Get_USB_Status>
 8011172:	4603      	mov	r3, r0
 8011174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011176:	7bbb      	ldrb	r3, [r7, #14]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3710      	adds	r7, #16
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011192:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011198:	2b00      	cmp	r3, #0
 801119a:	da0b      	bge.n	80111b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801119c:	78fb      	ldrb	r3, [r7, #3]
 801119e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111a2:	68f9      	ldr	r1, [r7, #12]
 80111a4:	4613      	mov	r3, r2
 80111a6:	00db      	lsls	r3, r3, #3
 80111a8:	4413      	add	r3, r2
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	440b      	add	r3, r1
 80111ae:	333e      	adds	r3, #62	; 0x3e
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	e00b      	b.n	80111cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111b4:	78fb      	ldrb	r3, [r7, #3]
 80111b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80111ba:	68f9      	ldr	r1, [r7, #12]
 80111bc:	4613      	mov	r3, r2
 80111be:	00db      	lsls	r3, r3, #3
 80111c0:	4413      	add	r3, r2
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	440b      	add	r3, r1
 80111c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80111ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3714      	adds	r7, #20
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr

080111d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	460b      	mov	r3, r1
 80111e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111e8:	2300      	movs	r3, #0
 80111ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111f2:	78fa      	ldrb	r2, [r7, #3]
 80111f4:	4611      	mov	r1, r2
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f4 fc38 	bl	8005a6c <HAL_PCD_SetAddress>
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011200:	7bfb      	ldrb	r3, [r7, #15]
 8011202:	4618      	mov	r0, r3
 8011204:	f000 f874 	bl	80112f0 <USBD_Get_USB_Status>
 8011208:	4603      	mov	r3, r0
 801120a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801120c:	7bbb      	ldrb	r3, [r7, #14]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b086      	sub	sp, #24
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	607a      	str	r2, [r7, #4]
 8011220:	603b      	str	r3, [r7, #0]
 8011222:	460b      	mov	r3, r1
 8011224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801122a:	2300      	movs	r3, #0
 801122c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011234:	7af9      	ldrb	r1, [r7, #11]
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	f7f4 fd51 	bl	8005ce0 <HAL_PCD_EP_Transmit>
 801123e:	4603      	mov	r3, r0
 8011240:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011242:	7dfb      	ldrb	r3, [r7, #23]
 8011244:	4618      	mov	r0, r3
 8011246:	f000 f853 	bl	80112f0 <USBD_Get_USB_Status>
 801124a:	4603      	mov	r3, r0
 801124c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801124e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b086      	sub	sp, #24
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	607a      	str	r2, [r7, #4]
 8011262:	603b      	str	r3, [r7, #0]
 8011264:	460b      	mov	r3, r1
 8011266:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011276:	7af9      	ldrb	r1, [r7, #11]
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	f7f4 fccd 	bl	8005c1a <HAL_PCD_EP_Receive>
 8011280:	4603      	mov	r3, r0
 8011282:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011284:	7dfb      	ldrb	r3, [r7, #23]
 8011286:	4618      	mov	r0, r3
 8011288:	f000 f832 	bl	80112f0 <USBD_Get_USB_Status>
 801128c:	4603      	mov	r3, r0
 801128e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011290:	7dbb      	ldrb	r3, [r7, #22]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3718      	adds	r7, #24
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	460b      	mov	r3, r1
 80112a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ac:	78fa      	ldrb	r2, [r7, #3]
 80112ae:	4611      	mov	r1, r2
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7f4 fcfd 	bl	8005cb0 <HAL_PCD_EP_GetRxCount>
 80112b6:	4603      	mov	r3, r0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80112c8:	4b03      	ldr	r3, [pc, #12]	; (80112d8 <USBD_static_malloc+0x18>)
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	370c      	adds	r7, #12
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	20009a38 	.word	0x20009a38

080112dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]

}
 80112e4:	bf00      	nop
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	4603      	mov	r3, r0
 80112f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	2b03      	cmp	r3, #3
 8011302:	d817      	bhi.n	8011334 <USBD_Get_USB_Status+0x44>
 8011304:	a201      	add	r2, pc, #4	; (adr r2, 801130c <USBD_Get_USB_Status+0x1c>)
 8011306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801130a:	bf00      	nop
 801130c:	0801131d 	.word	0x0801131d
 8011310:	08011323 	.word	0x08011323
 8011314:	08011329 	.word	0x08011329
 8011318:	0801132f 	.word	0x0801132f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	73fb      	strb	r3, [r7, #15]
    break;
 8011320:	e00b      	b.n	801133a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011322:	2303      	movs	r3, #3
 8011324:	73fb      	strb	r3, [r7, #15]
    break;
 8011326:	e008      	b.n	801133a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011328:	2301      	movs	r3, #1
 801132a:	73fb      	strb	r3, [r7, #15]
    break;
 801132c:	e005      	b.n	801133a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801132e:	2303      	movs	r3, #3
 8011330:	73fb      	strb	r3, [r7, #15]
    break;
 8011332:	e002      	b.n	801133a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011334:	2303      	movs	r3, #3
 8011336:	73fb      	strb	r3, [r7, #15]
    break;
 8011338:	bf00      	nop
  }
  return usb_status;
 801133a:	7bfb      	ldrb	r3, [r7, #15]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3714      	adds	r7, #20
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr

08011348 <Checksum>:
 * 		- set ping=7 khi có data từ chessclock gửi về để reset biến đếm
 * 	chu kỳ chessclock gửi tín hiệu về là 5s */
uint8_t ping_chessclock=7;

uint8_t Checksum(uint8_t *data, uint8_t length)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	460b      	mov	r3, r1
 8011352:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t Sum = 0;
 8011354:	2300      	movs	r3, #0
 8011356:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 8011358:	2300      	movs	r3, #0
 801135a:	73fb      	strb	r3, [r7, #15]
 801135c:	e009      	b.n	8011372 <Checksum+0x2a>
		Sum = Sum + data[count];
 801135e:	7bfb      	ldrb	r3, [r7, #15]
 8011360:	687a      	ldr	r2, [r7, #4]
 8011362:	4413      	add	r3, r2
 8011364:	781a      	ldrb	r2, [r3, #0]
 8011366:	7bbb      	ldrb	r3, [r7, #14]
 8011368:	4413      	add	r3, r2
 801136a:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 801136c:	7bfb      	ldrb	r3, [r7, #15]
 801136e:	3301      	adds	r3, #1
 8011370:	73fb      	strb	r3, [r7, #15]
 8011372:	7bfa      	ldrb	r2, [r7, #15]
 8011374:	78fb      	ldrb	r3, [r7, #3]
 8011376:	429a      	cmp	r2, r3
 8011378:	d3f1      	bcc.n	801135e <Checksum+0x16>
	Sum = -Sum;
 801137a:	7bbb      	ldrb	r3, [r7, #14]
 801137c:	425b      	negs	r3, r3
 801137e:	73bb      	strb	r3, [r7, #14]
	return (Sum & 0xFF);
 8011380:	7bbb      	ldrb	r3, [r7, #14]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3714      	adds	r7, #20
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
	...

08011390 <HAL_I2C_AddrCallback>:

// I2C-Interface , callback khi co  read/write i2c
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	460b      	mov	r3, r1
 801139a:	70fb      	strb	r3, [r7, #3]
 801139c:	4613      	mov	r3, r2
 801139e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C1)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4a07      	ldr	r2, [pc, #28]	; (80113c4 <HAL_I2C_AddrCallback+0x34>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d108      	bne.n	80113bc <HAL_I2C_AddrCallback+0x2c>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // neu i2c master write to slave
 80113aa:	78fb      	ldrb	r3, [r7, #3]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d105      	bne.n	80113bc <HAL_I2C_AddrCallback+0x2c>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1,data_chessclock,15,I2C_FIRST_AND_LAST_FRAME); // thi luu data bang dma
 80113b0:	2308      	movs	r3, #8
 80113b2:	220f      	movs	r2, #15
 80113b4:	4904      	ldr	r1, [pc, #16]	; (80113c8 <HAL_I2C_AddrCallback+0x38>)
 80113b6:	4805      	ldr	r0, [pc, #20]	; (80113cc <HAL_I2C_AddrCallback+0x3c>)
 80113b8:	f7f1 fdf6 	bl	8002fa8 <HAL_I2C_Slave_Seq_Receive_DMA>
		}
	}
}
 80113bc:	bf00      	nop
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	40005400 	.word	0x40005400
 80113c8:	20009c5c 	.word	0x20009c5c
 80113cc:	200043dc 	.word	0x200043dc

080113d0 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);  // bat laij ngat
 80113d8:	4803      	ldr	r0, [pc, #12]	; (80113e8 <HAL_I2C_ListenCpltCallback+0x18>)
 80113da:	f7f1 ff1f 	bl	800321c <HAL_I2C_EnableListen_IT>
}
 80113de:	bf00      	nop
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	200043dc 	.word	0x200043dc

080113ec <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1)
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4a0d      	ldr	r2, [pc, #52]	; (8011430 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d113      	bne.n	8011426 <HAL_I2C_SlaveRxCpltCallback+0x3a>
	{
		crcval = Checksum(data_chessclock, 14);
 80113fe:	210e      	movs	r1, #14
 8011400:	480c      	ldr	r0, [pc, #48]	; (8011434 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8011402:	f7ff ffa1 	bl	8011348 <Checksum>
 8011406:	4603      	mov	r3, r0
 8011408:	461a      	mov	r2, r3
 801140a:	4b0b      	ldr	r3, [pc, #44]	; (8011438 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801140c:	701a      	strb	r2, [r3, #0]
		if(crcval == data_chessclock[14]){
 801140e:	4b09      	ldr	r3, [pc, #36]	; (8011434 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8011410:	7b9a      	ldrb	r2, [r3, #14]
 8011412:	4b09      	ldr	r3, [pc, #36]	; (8011438 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	429a      	cmp	r2, r3
 8011418:	d105      	bne.n	8011426 <HAL_I2C_SlaveRxCpltCallback+0x3a>
			chessclock_interrup = true; // bat flag khi co data clock
 801141a:	4b08      	ldr	r3, [pc, #32]	; (801143c <HAL_I2C_SlaveRxCpltCallback+0x50>)
 801141c:	2201      	movs	r2, #1
 801141e:	701a      	strb	r2, [r3, #0]
			ping_chessclock = 7;
 8011420:	4b07      	ldr	r3, [pc, #28]	; (8011440 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8011422:	2207      	movs	r2, #7
 8011424:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8011426:	bf00      	nop
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	40005400 	.word	0x40005400
 8011434:	20009c5c 	.word	0x20009c5c
 8011438:	20009c6b 	.word	0x20009c6b
 801143c:	20009c58 	.word	0x20009c58
 8011440:	200000fe 	.word	0x200000fe

08011444 <HAL_I2C_ErrorCallback>:
// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4a04      	ldr	r2, [pc, #16]	; (8011464 <HAL_I2C_ErrorCallback+0x20>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d101      	bne.n	801145a <HAL_I2C_ErrorCallback+0x16>
		HAL_NVIC_SystemReset();
 8011456:	f7f0 fea4 	bl	80021a2 <HAL_NVIC_SystemReset>
	}
}
 801145a:	bf00      	nop
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	40005400 	.word	0x40005400

08011468 <ChessClock_Init>:

void ChessClock_Init()
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
	HAL_I2C_EnableListen_IT(&hi2c1);   // bat ngat I2C, khi co thao tac read/write
 801146c:	4802      	ldr	r0, [pc, #8]	; (8011478 <ChessClock_Init+0x10>)
 801146e:	f7f1 fed5 	bl	800321c <HAL_I2C_EnableListen_IT>
}
 8011472:	bf00      	nop
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	200043dc 	.word	0x200043dc

0801147c <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 8011482:	2304      	movs	r3, #4
 8011484:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 8011486:	2200      	movs	r2, #0
 8011488:	2110      	movs	r1, #16
 801148a:	480b      	ldr	r0, [pc, #44]	; (80114b8 <WriteProtect+0x3c>)
 801148c:	f7f1 fc2e 	bl	8002cec <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011490:	1d39      	adds	r1, r7, #4
 8011492:	2301      	movs	r3, #1
 8011494:	2201      	movs	r2, #1
 8011496:	4809      	ldr	r0, [pc, #36]	; (80114bc <WriteProtect+0x40>)
 8011498:	f7f6 f88f 	bl	80075ba <HAL_SPI_Transmit>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	4b07      	ldr	r3, [pc, #28]	; (80114c0 <WriteProtect+0x44>)
 80114a2:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80114a4:	2201      	movs	r2, #1
 80114a6:	2110      	movs	r1, #16
 80114a8:	4803      	ldr	r0, [pc, #12]	; (80114b8 <WriteProtect+0x3c>)
 80114aa:	f7f1 fc1f 	bl	8002cec <HAL_GPIO_WritePin>
}
 80114ae:	bf00      	nop
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	40020000 	.word	0x40020000
 80114bc:	200044bc 	.word	0x200044bc
 80114c0:	20009ca2 	.word	0x20009ca2

080114c4 <WriteEnable>:
	MB85RS_CS_LOW;
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
	MB85RS_CS_HIGH;
	return reg[1];
}
void WriteEnable(){
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 80114ca:	2306      	movs	r3, #6
 80114cc:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 80114ce:	2200      	movs	r2, #0
 80114d0:	2110      	movs	r1, #16
 80114d2:	480b      	ldr	r0, [pc, #44]	; (8011500 <WriteEnable+0x3c>)
 80114d4:	f7f1 fc0a 	bl	8002cec <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 80114d8:	1d39      	adds	r1, r7, #4
 80114da:	2301      	movs	r3, #1
 80114dc:	2201      	movs	r2, #1
 80114de:	4809      	ldr	r0, [pc, #36]	; (8011504 <WriteEnable+0x40>)
 80114e0:	f7f6 f86b 	bl	80075ba <HAL_SPI_Transmit>
 80114e4:	4603      	mov	r3, r0
 80114e6:	461a      	mov	r2, r3
 80114e8:	4b07      	ldr	r3, [pc, #28]	; (8011508 <WriteEnable+0x44>)
 80114ea:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80114ec:	2201      	movs	r2, #1
 80114ee:	2110      	movs	r1, #16
 80114f0:	4803      	ldr	r0, [pc, #12]	; (8011500 <WriteEnable+0x3c>)
 80114f2:	f7f1 fbfb 	bl	8002cec <HAL_GPIO_WritePin>
}
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	40020000 	.word	0x40020000
 8011504:	200044bc 	.word	0x200044bc
 8011508:	20009ca2 	.word	0x20009ca2

0801150c <MB85RS_write>:

void MB85RS_write(unsigned int address, unsigned char *buffer, unsigned int size)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b086      	sub	sp, #24
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
	Mb85rs_dataTx[0] = WRITE;
 8011518:	4b1c      	ldr	r3, [pc, #112]	; (801158c <MB85RS_write+0x80>)
 801151a:	2202      	movs	r2, #2
 801151c:	701a      	strb	r2, [r3, #0]
	Mb85rs_dataTx[1] = (char)(address >> 8);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	0a1b      	lsrs	r3, r3, #8
 8011522:	b2da      	uxtb	r2, r3
 8011524:	4b19      	ldr	r3, [pc, #100]	; (801158c <MB85RS_write+0x80>)
 8011526:	705a      	strb	r2, [r3, #1]
	Mb85rs_dataTx[2] = (char)(address);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	b2da      	uxtb	r2, r3
 801152c:	4b17      	ldr	r3, [pc, #92]	; (801158c <MB85RS_write+0x80>)
 801152e:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<size;i++){
 8011530:	2300      	movs	r3, #0
 8011532:	617b      	str	r3, [r7, #20]
 8011534:	e00a      	b.n	801154c <MB85RS_write+0x40>
		Mb85rs_dataTx[3+i] = buffer[i];
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	441a      	add	r2, r3
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	3303      	adds	r3, #3
 8011540:	7811      	ldrb	r1, [r2, #0]
 8011542:	4a12      	ldr	r2, [pc, #72]	; (801158c <MB85RS_write+0x80>)
 8011544:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<size;i++){
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	3301      	adds	r3, #1
 801154a:	617b      	str	r3, [r7, #20]
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	429a      	cmp	r2, r3
 8011552:	d8f0      	bhi.n	8011536 <MB85RS_write+0x2a>
	}
	WriteEnable();
 8011554:	f7ff ffb6 	bl	80114c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011558:	2200      	movs	r2, #0
 801155a:	2110      	movs	r1, #16
 801155c:	480c      	ldr	r0, [pc, #48]	; (8011590 <MB85RS_write+0x84>)
 801155e:	f7f1 fbc5 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Mb85rs_dataTx, size+3, 10);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	b29b      	uxth	r3, r3
 8011566:	3303      	adds	r3, #3
 8011568:	b29a      	uxth	r2, r3
 801156a:	230a      	movs	r3, #10
 801156c:	4907      	ldr	r1, [pc, #28]	; (801158c <MB85RS_write+0x80>)
 801156e:	4809      	ldr	r0, [pc, #36]	; (8011594 <MB85RS_write+0x88>)
 8011570:	f7f6 f823 	bl	80075ba <HAL_SPI_Transmit>
	MB85RS_CS_HIGH;
 8011574:	2201      	movs	r2, #1
 8011576:	2110      	movs	r1, #16
 8011578:	4805      	ldr	r0, [pc, #20]	; (8011590 <MB85RS_write+0x84>)
 801157a:	f7f1 fbb7 	bl	8002cec <HAL_GPIO_WritePin>
	WriteProtect();
 801157e:	f7ff ff7d 	bl	801147c <WriteProtect>
}
 8011582:	bf00      	nop
 8011584:	3718      	adds	r7, #24
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	20009c70 	.word	0x20009c70
 8011590:	40020000 	.word	0x40020000
 8011594:	200044bc 	.word	0x200044bc

08011598 <MB85RS_read>:
void MB85RS_read(unsigned int address, unsigned char *buffer, unsigned int size)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[3];
	cmd[0]=READ;
 80115a4:	2303      	movs	r3, #3
 80115a6:	753b      	strb	r3, [r7, #20]
	cmd[1]=(char)(address >> 8);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	0a1b      	lsrs	r3, r3, #8
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	757b      	strb	r3, [r7, #21]
	cmd[2] = (char)(address);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	75bb      	strb	r3, [r7, #22]
	MB85RS_CS_LOW;
 80115b6:	2200      	movs	r2, #0
 80115b8:	2110      	movs	r1, #16
 80115ba:	480d      	ldr	r0, [pc, #52]	; (80115f0 <MB85RS_read+0x58>)
 80115bc:	f7f1 fb96 	bl	8002cec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 3, 10);
 80115c0:	f107 0114 	add.w	r1, r7, #20
 80115c4:	230a      	movs	r3, #10
 80115c6:	2203      	movs	r2, #3
 80115c8:	480a      	ldr	r0, [pc, #40]	; (80115f4 <MB85RS_read+0x5c>)
 80115ca:	f7f5 fff6 	bl	80075ba <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	230a      	movs	r3, #10
 80115d4:	68b9      	ldr	r1, [r7, #8]
 80115d6:	4807      	ldr	r0, [pc, #28]	; (80115f4 <MB85RS_read+0x5c>)
 80115d8:	f7f6 f92b 	bl	8007832 <HAL_SPI_Receive>
	MB85RS_CS_HIGH;
 80115dc:	2201      	movs	r2, #1
 80115de:	2110      	movs	r1, #16
 80115e0:	4803      	ldr	r0, [pc, #12]	; (80115f0 <MB85RS_read+0x58>)
 80115e2:	f7f1 fb83 	bl	8002cec <HAL_GPIO_WritePin>
}
 80115e6:	bf00      	nop
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	40020000 	.word	0x40020000
 80115f4:	200044bc 	.word	0x200044bc

080115f8 <MB85RS_erase>:

void MB85RS_erase()
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b0a4      	sub	sp, #144	; 0x90
 80115fc:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80115fe:	2302      	movs	r3, #2
 8011600:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 8011610:	f7ff ff58 	bl	80114c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011614:	2200      	movs	r2, #0
 8011616:	2110      	movs	r1, #16
 8011618:	481d      	ldr	r0, [pc, #116]	; (8011690 <MB85RS_erase+0x98>)
 801161a:	f7f1 fb67 	bl	8002cec <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 801161e:	2300      	movs	r3, #0
 8011620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011624:	e00a      	b.n	801163c <MB85RS_erase+0x44>
		datanull[i]=0;
 8011626:	1d3a      	adds	r2, r7, #4
 8011628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801162c:	4413      	add	r3, r2
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 8011632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011636:	3301      	adds	r3, #1
 8011638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801163c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011640:	2b7f      	cmp	r3, #127	; 0x7f
 8011642:	ddf0      	ble.n	8011626 <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8011644:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8011648:	2364      	movs	r3, #100	; 0x64
 801164a:	2203      	movs	r2, #3
 801164c:	4811      	ldr	r0, [pc, #68]	; (8011694 <MB85RS_erase+0x9c>)
 801164e:	f7f5 ffb4 	bl	80075ba <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011652:	2300      	movs	r3, #0
 8011654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011658:	e00a      	b.n	8011670 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 801165a:	1d39      	adds	r1, r7, #4
 801165c:	2364      	movs	r3, #100	; 0x64
 801165e:	2280      	movs	r2, #128	; 0x80
 8011660:	480c      	ldr	r0, [pc, #48]	; (8011694 <MB85RS_erase+0x9c>)
 8011662:	f7f5 ffaa 	bl	80075ba <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801166a:	3301      	adds	r3, #1
 801166c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011678:	ddef      	ble.n	801165a <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 801167a:	2201      	movs	r2, #1
 801167c:	2110      	movs	r1, #16
 801167e:	4804      	ldr	r0, [pc, #16]	; (8011690 <MB85RS_erase+0x98>)
 8011680:	f7f1 fb34 	bl	8002cec <HAL_GPIO_WritePin>
	WriteProtect();
 8011684:	f7ff fefa 	bl	801147c <WriteProtect>
}
 8011688:	bf00      	nop
 801168a:	3790      	adds	r7, #144	; 0x90
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	40020000 	.word	0x40020000
 8011694:	200044bc 	.word	0x200044bc

08011698 <MB85RS_getPointSave>:


// get Điểm lưu FEN gần nhất ( thông tin được lưu ở Address cuối cùng)
void MB85RS_getPointSave(){
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
	uint8_t point[2];
	MB85RS_read(32766, point, 2);
 801169e:	1d3b      	adds	r3, r7, #4
 80116a0:	2202      	movs	r2, #2
 80116a2:	4619      	mov	r1, r3
 80116a4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80116a8:	f7ff ff76 	bl	8011598 <MB85RS_read>
	pointsave = point[0]*255 +point[1];
 80116ac:	793b      	ldrb	r3, [r7, #4]
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	461a      	mov	r2, r3
 80116b2:	0212      	lsls	r2, r2, #8
 80116b4:	1ad3      	subs	r3, r2, r3
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	797b      	ldrb	r3, [r7, #5]
 80116ba:	b29b      	uxth	r3, r3
 80116bc:	4413      	add	r3, r2
 80116be:	b29a      	uxth	r2, r3
 80116c0:	4b02      	ldr	r3, [pc, #8]	; (80116cc <MB85RS_getPointSave+0x34>)
 80116c2:	801a      	strh	r2, [r3, #0]
}
 80116c4:	bf00      	nop
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	20009c6c 	.word	0x20009c6c

080116d0 <MB85RS_WritePointSave>:
void MB85RS_WritePointSave(){
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
	if(pointsave >712) pointsave=0;
 80116d6:	4b14      	ldr	r3, [pc, #80]	; (8011728 <MB85RS_WritePointSave+0x58>)
 80116d8:	881b      	ldrh	r3, [r3, #0]
 80116da:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 80116de:	d902      	bls.n	80116e6 <MB85RS_WritePointSave+0x16>
 80116e0:	4b11      	ldr	r3, [pc, #68]	; (8011728 <MB85RS_WritePointSave+0x58>)
 80116e2:	2200      	movs	r2, #0
 80116e4:	801a      	strh	r2, [r3, #0]
	uint8_t point[2];
	point[0] = pointsave/255;
 80116e6:	4b10      	ldr	r3, [pc, #64]	; (8011728 <MB85RS_WritePointSave+0x58>)
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	4a10      	ldr	r2, [pc, #64]	; (801172c <MB85RS_WritePointSave+0x5c>)
 80116ec:	fba2 2303 	umull	r2, r3, r2, r3
 80116f0:	09db      	lsrs	r3, r3, #7
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	713b      	strb	r3, [r7, #4]
	point[1] = pointsave%255;
 80116f8:	4b0b      	ldr	r3, [pc, #44]	; (8011728 <MB85RS_WritePointSave+0x58>)
 80116fa:	881a      	ldrh	r2, [r3, #0]
 80116fc:	4b0b      	ldr	r3, [pc, #44]	; (801172c <MB85RS_WritePointSave+0x5c>)
 80116fe:	fba3 1302 	umull	r1, r3, r3, r2
 8011702:	09d9      	lsrs	r1, r3, #7
 8011704:	460b      	mov	r3, r1
 8011706:	021b      	lsls	r3, r3, #8
 8011708:	1a5b      	subs	r3, r3, r1
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	b29b      	uxth	r3, r3
 801170e:	b2db      	uxtb	r3, r3
 8011710:	717b      	strb	r3, [r7, #5]
	MB85RS_write(32766,point, 2);
 8011712:	1d3b      	adds	r3, r7, #4
 8011714:	2202      	movs	r2, #2
 8011716:	4619      	mov	r1, r3
 8011718:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801171c:	f7ff fef6 	bl	801150c <MB85RS_write>
}
 8011720:	bf00      	nop
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	20009c6c 	.word	0x20009c6c
 801172c:	80808081 	.word	0x80808081

08011730 <MB85RS_WriteNewGame>:

void MB85RS_WriteNewGame(){
 8011730:	b580      	push	{r7, lr}
 8011732:	b094      	sub	sp, #80	; 0x50
 8011734:	af00      	add	r7, sp, #0
	uint8_t dat[46];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8011736:	f107 0308 	add.w	r3, r7, #8
 801173a:	2200      	movs	r2, #0
 801173c:	4619      	mov	r1, r3
 801173e:	4821      	ldr	r0, [pc, #132]	; (80117c4 <MB85RS_WriteNewGame+0x94>)
 8011740:	f7f5 fcaa 	bl	8007098 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011744:	1d3b      	adds	r3, r7, #4
 8011746:	2200      	movs	r2, #0
 8011748:	4619      	mov	r1, r3
 801174a:	481e      	ldr	r0, [pc, #120]	; (80117c4 <MB85RS_WriteNewGame+0x94>)
 801174c:	f7f5 fd86 	bl	800725c <HAL_RTC_GetDate>
	dat[0]=254; // code for HeaderGame
 8011750:	23fe      	movs	r3, #254	; 0xfe
 8011752:	773b      	strb	r3, [r7, #28]
	dat[1] = sTime.Seconds;
 8011754:	7abb      	ldrb	r3, [r7, #10]
 8011756:	777b      	strb	r3, [r7, #29]
	dat[2] = sTime.Minutes;
 8011758:	7a7b      	ldrb	r3, [r7, #9]
 801175a:	77bb      	strb	r3, [r7, #30]
	dat[3] = sTime.Hours;
 801175c:	7a3b      	ldrb	r3, [r7, #8]
 801175e:	77fb      	strb	r3, [r7, #31]
	dat[4] = sDate.Date;
 8011760:	79bb      	ldrb	r3, [r7, #6]
 8011762:	f887 3020 	strb.w	r3, [r7, #32]
	dat[5] = sDate.Month;
 8011766:	797b      	ldrb	r3, [r7, #5]
 8011768:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dat[6] = sDate.Year;
 801176c:	79fb      	ldrb	r3, [r7, #7]
 801176e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(int i=7;i<46;i++){
 8011772:	2307      	movs	r3, #7
 8011774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011776:	e008      	b.n	801178a <MB85RS_WriteNewGame+0x5a>
		dat[i]=0;
 8011778:	f107 021c 	add.w	r2, r7, #28
 801177c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801177e:	4413      	add	r3, r2
 8011780:	2200      	movs	r2, #0
 8011782:	701a      	strb	r2, [r3, #0]
	for(int i=7;i<46;i++){
 8011784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011786:	3301      	adds	r3, #1
 8011788:	64fb      	str	r3, [r7, #76]	; 0x4c
 801178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801178c:	2b2d      	cmp	r3, #45	; 0x2d
 801178e:	ddf3      	ble.n	8011778 <MB85RS_WriteNewGame+0x48>
	}
	MB85RS_write(pointsave*46, dat, 46);
 8011790:	4b0d      	ldr	r3, [pc, #52]	; (80117c8 <MB85RS_WriteNewGame+0x98>)
 8011792:	881b      	ldrh	r3, [r3, #0]
 8011794:	461a      	mov	r2, r3
 8011796:	232e      	movs	r3, #46	; 0x2e
 8011798:	fb02 f303 	mul.w	r3, r2, r3
 801179c:	4618      	mov	r0, r3
 801179e:	f107 031c 	add.w	r3, r7, #28
 80117a2:	222e      	movs	r2, #46	; 0x2e
 80117a4:	4619      	mov	r1, r3
 80117a6:	f7ff feb1 	bl	801150c <MB85RS_write>
	pointsave++;
 80117aa:	4b07      	ldr	r3, [pc, #28]	; (80117c8 <MB85RS_WriteNewGame+0x98>)
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	3301      	adds	r3, #1
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	4b05      	ldr	r3, [pc, #20]	; (80117c8 <MB85RS_WriteNewGame+0x98>)
 80117b4:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 80117b6:	f7ff ff8b 	bl	80116d0 <MB85RS_WritePointSave>
}
 80117ba:	bf00      	nop
 80117bc:	3750      	adds	r7, #80	; 0x50
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	2000449c 	.word	0x2000449c
 80117c8:	20009c6c 	.word	0x20009c6c

080117cc <MB85RS_saveFen>:

// 32bytePiece + 14byteClock
void MB85RS_saveFen(){
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b090      	sub	sp, #64	; 0x40
 80117d0:	af00      	add	r7, sp, #0
	uint8_t data[46];
	uint8_t pieceA,pieceB,pie=0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 80117d8:	2300      	movs	r3, #0
 80117da:	63bb      	str	r3, [r7, #56]	; 0x38
 80117dc:	e02d      	b.n	801183a <MB85RS_saveFen+0x6e>
		pieceA = byteToPiece(datamain_old[pie]);
 80117de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117e2:	4a2d      	ldr	r2, [pc, #180]	; (8011898 <MB85RS_saveFen+0xcc>)
 80117e4:	5cd3      	ldrb	r3, [r2, r3]
 80117e6:	4618      	mov	r0, r3
 80117e8:	f001 f912 	bl	8012a10 <byteToPiece>
 80117ec:	4603      	mov	r3, r0
 80117ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		pie++;
 80117f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117f6:	3301      	adds	r3, #1
 80117f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		pieceB = byteToPiece(datamain_old[pie]);
 80117fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011800:	4a25      	ldr	r2, [pc, #148]	; (8011898 <MB85RS_saveFen+0xcc>)
 8011802:	5cd3      	ldrb	r3, [r2, r3]
 8011804:	4618      	mov	r0, r3
 8011806:	f001 f903 	bl	8012a10 <byteToPiece>
 801180a:	4603      	mov	r3, r0
 801180c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		pie++;
 8011810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011814:	3301      	adds	r3, #1
 8011816:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		data[i] = (pieceA << 4) + pieceB;
 801181a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801181e:	011b      	lsls	r3, r3, #4
 8011820:	b2da      	uxtb	r2, r3
 8011822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011826:	4413      	add	r3, r2
 8011828:	b2d9      	uxtb	r1, r3
 801182a:	1d3a      	adds	r2, r7, #4
 801182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182e:	4413      	add	r3, r2
 8011830:	460a      	mov	r2, r1
 8011832:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8011834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011836:	3301      	adds	r3, #1
 8011838:	63bb      	str	r3, [r7, #56]	; 0x38
 801183a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183c:	2b1f      	cmp	r3, #31
 801183e:	ddce      	ble.n	80117de <MB85RS_saveFen+0x12>
	}
	for (int i = 0; i < 14; i++) {
 8011840:	2300      	movs	r3, #0
 8011842:	637b      	str	r3, [r7, #52]	; 0x34
 8011844:	e00c      	b.n	8011860 <MB85RS_saveFen+0x94>
		data[32 + i] = data_chessclock[i];
 8011846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011848:	3320      	adds	r3, #32
 801184a:	4914      	ldr	r1, [pc, #80]	; (801189c <MB85RS_saveFen+0xd0>)
 801184c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801184e:	440a      	add	r2, r1
 8011850:	7812      	ldrb	r2, [r2, #0]
 8011852:	3340      	adds	r3, #64	; 0x40
 8011854:	443b      	add	r3, r7
 8011856:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (int i = 0; i < 14; i++) {
 801185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801185c:	3301      	adds	r3, #1
 801185e:	637b      	str	r3, [r7, #52]	; 0x34
 8011860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011862:	2b0d      	cmp	r3, #13
 8011864:	ddef      	ble.n	8011846 <MB85RS_saveFen+0x7a>
	}
	MB85RS_write(pointsave*46,data, 46);
 8011866:	4b0e      	ldr	r3, [pc, #56]	; (80118a0 <MB85RS_saveFen+0xd4>)
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	461a      	mov	r2, r3
 801186c:	232e      	movs	r3, #46	; 0x2e
 801186e:	fb02 f303 	mul.w	r3, r2, r3
 8011872:	4618      	mov	r0, r3
 8011874:	1d3b      	adds	r3, r7, #4
 8011876:	222e      	movs	r2, #46	; 0x2e
 8011878:	4619      	mov	r1, r3
 801187a:	f7ff fe47 	bl	801150c <MB85RS_write>
	pointsave++;
 801187e:	4b08      	ldr	r3, [pc, #32]	; (80118a0 <MB85RS_saveFen+0xd4>)
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	3301      	adds	r3, #1
 8011884:	b29a      	uxth	r2, r3
 8011886:	4b06      	ldr	r3, [pc, #24]	; (80118a0 <MB85RS_saveFen+0xd4>)
 8011888:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 801188a:	f7ff ff21 	bl	80116d0 <MB85RS_WritePointSave>
}
 801188e:	bf00      	nop
 8011890:	3740      	adds	r7, #64	; 0x40
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	2000aeec 	.word	0x2000aeec
 801189c:	20009c5c 	.word	0x20009c5c
 80118a0:	20009c6c 	.word	0x20009c6c

080118a4 <handlerMb85rs>:

uint8_t oldSide = SIDE_WHITE;
uint16_t recorded = 0;

void handlerMb85rs() {
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
	/* Do chessclock cập nhật trạng thái mỗi 5s nên cần bỏ qua trạng thái này  */
	 //CLOCKSTATUS { READY=0,BEGIN_PLAY=1,PLAYING=2,PLAY_TO_PAUSE=3,PAUSE_TO_PLAY=4,ONE_SIDE_OVER_TIME=5,ALL_SIDE_OVER_TIME=6 };
	if (data_chessclock[9] == 1) {
 80118aa:	4b1b      	ldr	r3, [pc, #108]	; (8011918 <handlerMb85rs+0x74>)
 80118ac:	7a5b      	ldrb	r3, [r3, #9]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d109      	bne.n	80118c6 <handlerMb85rs+0x22>
		MB85RS_WriteNewGame();
 80118b2:	f7ff ff3d 	bl	8011730 <MB85RS_WriteNewGame>
		oldSide = data_chessclock[8] & 0x01;
 80118b6:	4b18      	ldr	r3, [pc, #96]	; (8011918 <handlerMb85rs+0x74>)
 80118b8:	7a1b      	ldrb	r3, [r3, #8]
 80118ba:	f003 0301 	and.w	r3, r3, #1
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	4b16      	ldr	r3, [pc, #88]	; (801191c <handlerMb85rs+0x78>)
 80118c2:	701a      	strb	r2, [r3, #0]
			recorded++;
			oldSide = newSide;
			MB85RS_saveFen();
		}
	}
}
 80118c4:	e024      	b.n	8011910 <handlerMb85rs+0x6c>
	} else if (data_chessclock[9] == 2 || data_chessclock[9] ==4 || data_chessclock[9] == 5 || data_chessclock[9]==6) {
 80118c6:	4b14      	ldr	r3, [pc, #80]	; (8011918 <handlerMb85rs+0x74>)
 80118c8:	7a5b      	ldrb	r3, [r3, #9]
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d00b      	beq.n	80118e6 <handlerMb85rs+0x42>
 80118ce:	4b12      	ldr	r3, [pc, #72]	; (8011918 <handlerMb85rs+0x74>)
 80118d0:	7a5b      	ldrb	r3, [r3, #9]
 80118d2:	2b04      	cmp	r3, #4
 80118d4:	d007      	beq.n	80118e6 <handlerMb85rs+0x42>
 80118d6:	4b10      	ldr	r3, [pc, #64]	; (8011918 <handlerMb85rs+0x74>)
 80118d8:	7a5b      	ldrb	r3, [r3, #9]
 80118da:	2b05      	cmp	r3, #5
 80118dc:	d003      	beq.n	80118e6 <handlerMb85rs+0x42>
 80118de:	4b0e      	ldr	r3, [pc, #56]	; (8011918 <handlerMb85rs+0x74>)
 80118e0:	7a5b      	ldrb	r3, [r3, #9]
 80118e2:	2b06      	cmp	r3, #6
 80118e4:	d114      	bne.n	8011910 <handlerMb85rs+0x6c>
		uint8_t newSide = data_chessclock[8] & 0x01;
 80118e6:	4b0c      	ldr	r3, [pc, #48]	; (8011918 <handlerMb85rs+0x74>)
 80118e8:	7a1b      	ldrb	r3, [r3, #8]
 80118ea:	f003 0301 	and.w	r3, r3, #1
 80118ee:	71fb      	strb	r3, [r7, #7]
		if(newSide != oldSide){
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <handlerMb85rs+0x78>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	79fa      	ldrb	r2, [r7, #7]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d00a      	beq.n	8011910 <handlerMb85rs+0x6c>
			recorded++;
 80118fa:	4b09      	ldr	r3, [pc, #36]	; (8011920 <handlerMb85rs+0x7c>)
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	3301      	adds	r3, #1
 8011900:	b29a      	uxth	r2, r3
 8011902:	4b07      	ldr	r3, [pc, #28]	; (8011920 <handlerMb85rs+0x7c>)
 8011904:	801a      	strh	r2, [r3, #0]
			oldSide = newSide;
 8011906:	4a05      	ldr	r2, [pc, #20]	; (801191c <handlerMb85rs+0x78>)
 8011908:	79fb      	ldrb	r3, [r7, #7]
 801190a:	7013      	strb	r3, [r2, #0]
			MB85RS_saveFen();
 801190c:	f7ff ff5e 	bl	80117cc <MB85RS_saveFen>
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	20009c5c 	.word	0x20009c5c
 801191c:	200000ff 	.word	0x200000ff
 8011920:	20009ca4 	.word	0x20009ca4

08011924 <QueueGetRear>:
int8_t 		qrear =-1;
uint8_t 	qcount =0;

/* trả về rear mà sau đó sẽ push data vào nó ( data[rear] ) */
int8_t QueueGetRear()
{
 8011924:	b480      	push	{r7}
 8011926:	af00      	add	r7, sp, #0
	if (qcount == QUEUE_MAX)  // nếu queue đầy thì xóa phần tử đầu front
 8011928:	4b1a      	ldr	r3, [pc, #104]	; (8011994 <QueueGetRear+0x70>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	2b14      	cmp	r3, #20
 801192e:	d112      	bne.n	8011956 <QueueGetRear+0x32>
	{
		qfront++;						 // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 8011930:	4b19      	ldr	r3, [pc, #100]	; (8011998 <QueueGetRear+0x74>)
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	3301      	adds	r3, #1
 8011936:	b2da      	uxtb	r2, r3
 8011938:	4b17      	ldr	r3, [pc, #92]	; (8011998 <QueueGetRear+0x74>)
 801193a:	701a      	strb	r2, [r3, #0]
		if(qfront ==QUEUE_MAX) qfront=0;
 801193c:	4b16      	ldr	r3, [pc, #88]	; (8011998 <QueueGetRear+0x74>)
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	2b14      	cmp	r3, #20
 8011942:	d102      	bne.n	801194a <QueueGetRear+0x26>
 8011944:	4b14      	ldr	r3, [pc, #80]	; (8011998 <QueueGetRear+0x74>)
 8011946:	2200      	movs	r2, #0
 8011948:	701a      	strb	r2, [r3, #0]
		qcount--;
 801194a:	4b12      	ldr	r3, [pc, #72]	; (8011994 <QueueGetRear+0x70>)
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	3b01      	subs	r3, #1
 8011950:	b2da      	uxtb	r2, r3
 8011952:	4b10      	ldr	r3, [pc, #64]	; (8011994 <QueueGetRear+0x70>)
 8011954:	701a      	strb	r2, [r3, #0]
	}
	//tang Rear len va gan phan tu vao, Neu Rear dang o vi tri Max-1 thi tang ve vi tri 0
	qrear++;
 8011956:	4b11      	ldr	r3, [pc, #68]	; (801199c <QueueGetRear+0x78>)
 8011958:	f993 3000 	ldrsb.w	r3, [r3]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	3301      	adds	r3, #1
 8011960:	b2db      	uxtb	r3, r3
 8011962:	b25a      	sxtb	r2, r3
 8011964:	4b0d      	ldr	r3, [pc, #52]	; (801199c <QueueGetRear+0x78>)
 8011966:	701a      	strb	r2, [r3, #0]
	if(qrear==QUEUE_MAX) qrear=0;
 8011968:	4b0c      	ldr	r3, [pc, #48]	; (801199c <QueueGetRear+0x78>)
 801196a:	f993 3000 	ldrsb.w	r3, [r3]
 801196e:	2b14      	cmp	r3, #20
 8011970:	d102      	bne.n	8011978 <QueueGetRear+0x54>
 8011972:	4b0a      	ldr	r3, [pc, #40]	; (801199c <QueueGetRear+0x78>)
 8011974:	2200      	movs	r2, #0
 8011976:	701a      	strb	r2, [r3, #0]
	qcount++; //tang so phan tu len
 8011978:	4b06      	ldr	r3, [pc, #24]	; (8011994 <QueueGetRear+0x70>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	3301      	adds	r3, #1
 801197e:	b2da      	uxtb	r2, r3
 8011980:	4b04      	ldr	r3, [pc, #16]	; (8011994 <QueueGetRear+0x70>)
 8011982:	701a      	strb	r2, [r3, #0]
	return qrear;
 8011984:	4b05      	ldr	r3, [pc, #20]	; (801199c <QueueGetRear+0x78>)
 8011986:	f993 3000 	ldrsb.w	r3, [r3]
}
 801198a:	4618      	mov	r0, r3
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr
 8011994:	20009ca7 	.word	0x20009ca7
 8011998:	20009ca6 	.word	0x20009ca6
 801199c:	20000100 	.word	0x20000100

080119a0 <QueueGetFront>:
/* trả về front, mà sau đó sẽ lấy data ra ( data[front] ) */
int8_t QueueGetFront()
{
 80119a0:	b480      	push	{r7}
 80119a2:	af00      	add	r7, sp, #0
	return qfront;
 80119a4:	4b03      	ldr	r3, [pc, #12]	; (80119b4 <QueueGetFront+0x14>)
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	b25b      	sxtb	r3, r3

}
 80119aa:	4618      	mov	r0, r3
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr
 80119b4:	20009ca6 	.word	0x20009ca6

080119b8 <QueueGetFrontAfter>:
/* sau khi lấy dữ liệu từ front thì cần thay đổi qfront và qcount  */
void QueueGetFrontAfter()
{
 80119b8:	b480      	push	{r7}
 80119ba:	af00      	add	r7, sp, #0
	qfront++;
 80119bc:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <QueueGetFrontAfter+0x34>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	3301      	adds	r3, #1
 80119c2:	b2da      	uxtb	r2, r3
 80119c4:	4b09      	ldr	r3, [pc, #36]	; (80119ec <QueueGetFrontAfter+0x34>)
 80119c6:	701a      	strb	r2, [r3, #0]
	if(qfront==QUEUE_MAX)qfront = 0; // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 80119c8:	4b08      	ldr	r3, [pc, #32]	; (80119ec <QueueGetFrontAfter+0x34>)
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	2b14      	cmp	r3, #20
 80119ce:	d102      	bne.n	80119d6 <QueueGetFrontAfter+0x1e>
 80119d0:	4b06      	ldr	r3, [pc, #24]	; (80119ec <QueueGetFrontAfter+0x34>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	701a      	strb	r2, [r3, #0]
	qcount--;//giam so phan tu xuong
 80119d6:	4b06      	ldr	r3, [pc, #24]	; (80119f0 <QueueGetFrontAfter+0x38>)
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	3b01      	subs	r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	4b04      	ldr	r3, [pc, #16]	; (80119f0 <QueueGetFrontAfter+0x38>)
 80119e0:	701a      	strb	r2, [r3, #0]
}
 80119e2:	bf00      	nop
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr
 80119ec:	20009ca6 	.word	0x20009ca6
 80119f0:	20009ca7 	.word	0x20009ca7

080119f4 <QueueGetCount>:

uint8_t QueueGetCount()
{
 80119f4:	b480      	push	{r7}
 80119f6:	af00      	add	r7, sp, #0
	return qcount;
 80119f8:	4b03      	ldr	r3, [pc, #12]	; (8011a08 <QueueGetCount+0x14>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	46bd      	mov	sp, r7
 8011a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	20009ca7 	.word	0x20009ca7

08011a0c <QueueClear>:
void QueueClear()
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	af00      	add	r7, sp, #0
	qfront=0;
 8011a10:	4b06      	ldr	r3, [pc, #24]	; (8011a2c <QueueClear+0x20>)
 8011a12:	2200      	movs	r2, #0
 8011a14:	701a      	strb	r2, [r3, #0]
	qrear=-1;
 8011a16:	4b06      	ldr	r3, [pc, #24]	; (8011a30 <QueueClear+0x24>)
 8011a18:	22ff      	movs	r2, #255	; 0xff
 8011a1a:	701a      	strb	r2, [r3, #0]
	qcount=0;
 8011a1c:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <QueueClear+0x28>)
 8011a1e:	2200      	movs	r2, #0
 8011a20:	701a      	strb	r2, [r3, #0]
}
 8011a22:	bf00      	nop
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr
 8011a2c:	20009ca6 	.word	0x20009ca6
 8011a30:	20000100 	.word	0x20000100
 8011a34:	20009ca7 	.word	0x20009ca7

08011a38 <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;


/* data=6byte /second/minute/hour/day/month/year */
void RTC_SetTime(uint8_t* datatime)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime = {0};
 8011a40:	f107 030c 	add.w	r3, r7, #12
 8011a44:	2200      	movs	r2, #0
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	605a      	str	r2, [r3, #4]
 8011a4a:	609a      	str	r2, [r3, #8]
 8011a4c:	60da      	str	r2, [r3, #12]
 8011a4e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011a50:	2300      	movs	r3, #0
 8011a52:	60bb      	str	r3, [r7, #8]
  sTime.Hours = datatime[2];
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	789b      	ldrb	r3, [r3, #2]
 8011a58:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = datatime[1];
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	785b      	ldrb	r3, [r3, #1]
 8011a5e:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = datatime[0];
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011a66:	2300      	movs	r3, #0
 8011a68:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8011a6e:	f107 030c 	add.w	r3, r7, #12
 8011a72:	2200      	movs	r2, #0
 8011a74:	4619      	mov	r1, r3
 8011a76:	4811      	ldr	r0, [pc, #68]	; (8011abc <RTC_SetTime+0x84>)
 8011a78:	f7f5 fa74 	bl	8006f64 <HAL_RTC_SetTime>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d001      	beq.n	8011a86 <RTC_SetTime+0x4e>
  {
    Error_Handler();
 8011a82:	f7ef f895 	bl	8000bb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011a86:	2301      	movs	r3, #1
 8011a88:	723b      	strb	r3, [r7, #8]
  sDate.Month = datatime[4];
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	791b      	ldrb	r3, [r3, #4]
 8011a8e:	727b      	strb	r3, [r7, #9]
  sDate.Date = datatime[3];
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	78db      	ldrb	r3, [r3, #3]
 8011a94:	72bb      	strb	r3, [r7, #10]
  sDate.Year = datatime[5];
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	795b      	ldrb	r3, [r3, #5]
 8011a9a:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8011a9c:	f107 0308 	add.w	r3, r7, #8
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	4805      	ldr	r0, [pc, #20]	; (8011abc <RTC_SetTime+0x84>)
 8011aa6:	f7f5 fb55 	bl	8007154 <HAL_RTC_SetDate>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d001      	beq.n	8011ab4 <RTC_SetTime+0x7c>
  {
    Error_Handler();
 8011ab0:	f7ef f87e 	bl	8000bb0 <Error_Handler>
  }
}
 8011ab4:	bf00      	nop
 8011ab6:	3720      	adds	r7, #32
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}
 8011abc:	2000449c 	.word	0x2000449c

08011ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t  responce_length;
uint16_t responce_period;


/* hàm callback khi phát pulse hoàn thành */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
	if(is_start_measure ==true){
 8011ac8:	4b07      	ldr	r3, [pc, #28]	; (8011ae8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d004      	beq.n	8011adc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		point_start_measure = TIM4->CNT;  // điểm bắt đầu đo đạc là giá trị TIM4->CNT hiện tại
 8011ad2:	4b06      	ldr	r3, [pc, #24]	; (8011aec <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8011ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b05      	ldr	r3, [pc, #20]	; (8011af0 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8011ada:	801a      	strh	r2, [r3, #0]
	}
}
 8011adc:	bf00      	nop
 8011ade:	370c      	adds	r7, #12
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	20009caa 	.word	0x20009caa
 8011aec:	40000800 	.word	0x40000800
 8011af0:	20009ca8 	.word	0x20009ca8

08011af4 <ScanPiecesInit>:

void ScanPiecesInit()
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	af00      	add	r7, sp, #0
	/*	mặc định kênh TIM_CCxN bị tắt, cần phải bật nó lên để có thể xuất xung PWM trên nó	*/
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8011af8:	4b09      	ldr	r3, [pc, #36]	; (8011b20 <ScanPiecesInit+0x2c>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2204      	movs	r2, #4
 8011afe:	2108      	movs	r1, #8
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7f8 f883 	bl	8009c0c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 8011b06:	4b06      	ldr	r3, [pc, #24]	; (8011b20 <ScanPiecesInit+0x2c>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	2204      	movs	r2, #4
 8011b0c:	2104      	movs	r1, #4
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7f8 f87c 	bl	8009c0c <TIM_CCxChannelCmd>
	HAL_TIM_Base_Start_IT(&htim4);
 8011b14:	4803      	ldr	r0, [pc, #12]	; (8011b24 <ScanPiecesInit+0x30>)
 8011b16:	f7f6 fabf 	bl	8008098 <HAL_TIM_Base_Start_IT>
}
 8011b1a:	bf00      	nop
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000455c 	.word	0x2000455c
 8011b24:	20004634 	.word	0x20004634

08011b28 <PulseOut>:
// độ dài tối đa của length=20
void PulseOut(uint8_t type,uint8_t length,uint8_t outCoil)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	71fb      	strb	r3, [r7, #7]
 8011b32:	460b      	mov	r3, r1
 8011b34:	71bb      	strb	r3, [r7, #6]
 8011b36:	4613      	mov	r3, r2
 8011b38:	717b      	strb	r3, [r7, #5]
	uint16_t _length = length;
 8011b3a:	79bb      	ldrb	r3, [r7, #6]
 8011b3c:	827b      	strh	r3, [r7, #18]
	uint16_t period = 84000/ListFrequency[type]; // tính toán chu kỳ
 8011b3e:	79fb      	ldrb	r3, [r7, #7]
 8011b40:	4a52      	ldr	r2, [pc, #328]	; (8011c8c <PulseOut+0x164>)
 8011b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b46:	461a      	mov	r2, r3
 8011b48:	4b51      	ldr	r3, [pc, #324]	; (8011c90 <PulseOut+0x168>)
 8011b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b4e:	823b      	strh	r3, [r7, #16]
	uint16_t duty	 = period/2;
 8011b50:	8a3b      	ldrh	r3, [r7, #16]
 8011b52:	085b      	lsrs	r3, r3, #1
 8011b54:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<_length;i++)
 8011b56:	2300      	movs	r3, #0
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	e00c      	b.n	8011b76 <PulseOut+0x4e>
	{
		pwmdata[i] = duty;
 8011b5c:	494d      	ldr	r1, [pc, #308]	; (8011c94 <PulseOut+0x16c>)
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	89fa      	ldrh	r2, [r7, #14]
 8011b62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		pwmdata32[i] = (uint32_t)duty;
 8011b66:	89fa      	ldrh	r2, [r7, #14]
 8011b68:	494b      	ldr	r1, [pc, #300]	; (8011c98 <PulseOut+0x170>)
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<_length;i++)
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	3301      	adds	r3, #1
 8011b74:	617b      	str	r3, [r7, #20]
 8011b76:	8a7b      	ldrh	r3, [r7, #18]
 8011b78:	697a      	ldr	r2, [r7, #20]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	dbee      	blt.n	8011b5c <PulseOut+0x34>
	}
	pwmdata[_length] =0;
 8011b7e:	8a7b      	ldrh	r3, [r7, #18]
 8011b80:	4a44      	ldr	r2, [pc, #272]	; (8011c94 <PulseOut+0x16c>)
 8011b82:	2100      	movs	r1, #0
 8011b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pwmdata32[_length]=0;
 8011b88:	8a7b      	ldrh	r3, [r7, #18]
 8011b8a:	4a43      	ldr	r2, [pc, #268]	; (8011c98 <PulseOut+0x170>)
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	switch(outCoil){
 8011b92:	797b      	ldrb	r3, [r7, #5]
 8011b94:	3b01      	subs	r3, #1
 8011b96:	2b07      	cmp	r3, #7
 8011b98:	d874      	bhi.n	8011c84 <PulseOut+0x15c>
 8011b9a:	a201      	add	r2, pc, #4	; (adr r2, 8011ba0 <PulseOut+0x78>)
 8011b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ba0:	08011bc1 	.word	0x08011bc1
 8011ba4:	08011bd9 	.word	0x08011bd9
 8011ba8:	08011bf3 	.word	0x08011bf3
 8011bac:	08011c0b 	.word	0x08011c0b
 8011bb0:	08011c23 	.word	0x08011c23
 8011bb4:	08011c3b 	.word	0x08011c3b
 8011bb8:	08011c55 	.word	0x08011c55
 8011bbc:	08011c6d 	.word	0x08011c6d
	case 1:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011bc0:	4a36      	ldr	r2, [pc, #216]	; (8011c9c <PulseOut+0x174>)
 8011bc2:	8a3b      	ldrh	r3, [r7, #16]
 8011bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011bc6:	8a7b      	ldrh	r3, [r7, #18]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	4a31      	ldr	r2, [pc, #196]	; (8011c94 <PulseOut+0x16c>)
 8011bce:	2100      	movs	r1, #0
 8011bd0:	4833      	ldr	r0, [pc, #204]	; (8011ca0 <PulseOut+0x178>)
 8011bd2:	f7f6 fb1d 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011bd6:	e055      	b.n	8011c84 <PulseOut+0x15c>
	case 2:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *)pwmdata32, _length+1); 	break;
 8011bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011bdc:	8a3b      	ldrh	r3, [r7, #16]
 8011bde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011be0:	8a7b      	ldrh	r3, [r7, #18]
 8011be2:	3301      	adds	r3, #1
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	4a2c      	ldr	r2, [pc, #176]	; (8011c98 <PulseOut+0x170>)
 8011be8:	2104      	movs	r1, #4
 8011bea:	482e      	ldr	r0, [pc, #184]	; (8011ca4 <PulseOut+0x17c>)
 8011bec:	f7f6 fb10 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011bf0:	e048      	b.n	8011c84 <PulseOut+0x15c>
	case 3:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011bf2:	4a2d      	ldr	r2, [pc, #180]	; (8011ca8 <PulseOut+0x180>)
 8011bf4:	8a3b      	ldrh	r3, [r7, #16]
 8011bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011bf8:	8a7b      	ldrh	r3, [r7, #18]
 8011bfa:	3301      	adds	r3, #1
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	4a25      	ldr	r2, [pc, #148]	; (8011c94 <PulseOut+0x16c>)
 8011c00:	2100      	movs	r1, #0
 8011c02:	482a      	ldr	r0, [pc, #168]	; (8011cac <PulseOut+0x184>)
 8011c04:	f7f6 fb04 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c08:	e03c      	b.n	8011c84 <PulseOut+0x15c>
	case 4: TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011c0a:	4a27      	ldr	r2, [pc, #156]	; (8011ca8 <PulseOut+0x180>)
 8011c0c:	8a3b      	ldrh	r3, [r7, #16]
 8011c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c10:	8a7b      	ldrh	r3, [r7, #18]
 8011c12:	3301      	adds	r3, #1
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	4a1f      	ldr	r2, [pc, #124]	; (8011c94 <PulseOut+0x16c>)
 8011c18:	2108      	movs	r1, #8
 8011c1a:	4824      	ldr	r0, [pc, #144]	; (8011cac <PulseOut+0x184>)
 8011c1c:	f7f6 faf8 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c20:	e030      	b.n	8011c84 <PulseOut+0x15c>
	case 5:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,(uint32_t *)pwmdata, _length+1); 	break;
 8011c22:	4a21      	ldr	r2, [pc, #132]	; (8011ca8 <PulseOut+0x180>)
 8011c24:	8a3b      	ldrh	r3, [r7, #16]
 8011c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c28:	8a7b      	ldrh	r3, [r7, #18]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	4a19      	ldr	r2, [pc, #100]	; (8011c94 <PulseOut+0x16c>)
 8011c30:	2104      	movs	r1, #4
 8011c32:	481e      	ldr	r0, [pc, #120]	; (8011cac <PulseOut+0x184>)
 8011c34:	f7f6 faec 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c38:	e024      	b.n	8011c84 <PulseOut+0x15c>
	case 6:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3,(uint32_t *)pwmdata32, _length+1); 	break;
 8011c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011c3e:	8a3b      	ldrh	r3, [r7, #16]
 8011c40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c42:	8a7b      	ldrh	r3, [r7, #18]
 8011c44:	3301      	adds	r3, #1
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	4a13      	ldr	r2, [pc, #76]	; (8011c98 <PulseOut+0x170>)
 8011c4a:	2108      	movs	r1, #8
 8011c4c:	4815      	ldr	r0, [pc, #84]	; (8011ca4 <PulseOut+0x17c>)
 8011c4e:	f7f6 fadf 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c52:	e017      	b.n	8011c84 <PulseOut+0x15c>
	case 7:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,(uint32_t *)pwmdata, _length+1); 	break;
 8011c54:	4a11      	ldr	r2, [pc, #68]	; (8011c9c <PulseOut+0x174>)
 8011c56:	8a3b      	ldrh	r3, [r7, #16]
 8011c58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c5a:	8a7b      	ldrh	r3, [r7, #18]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	4a0c      	ldr	r2, [pc, #48]	; (8011c94 <PulseOut+0x16c>)
 8011c62:	210c      	movs	r1, #12
 8011c64:	480e      	ldr	r0, [pc, #56]	; (8011ca0 <PulseOut+0x178>)
 8011c66:	f7f6 fad3 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c6a:	e00b      	b.n	8011c84 <PulseOut+0x15c>
	case 8:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011c6c:	4a0b      	ldr	r2, [pc, #44]	; (8011c9c <PulseOut+0x174>)
 8011c6e:	8a3b      	ldrh	r3, [r7, #16]
 8011c70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011c72:	8a7b      	ldrh	r3, [r7, #18]
 8011c74:	3301      	adds	r3, #1
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4a06      	ldr	r2, [pc, #24]	; (8011c94 <PulseOut+0x16c>)
 8011c7a:	2108      	movs	r1, #8
 8011c7c:	4808      	ldr	r0, [pc, #32]	; (8011ca0 <PulseOut+0x178>)
 8011c7e:	f7f6 fac7 	bl	8008210 <HAL_TIM_PWM_Start_DMA>
 8011c82:	bf00      	nop
	}
}
 8011c84:	bf00      	nop
 8011c86:	3718      	adds	r7, #24
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	080134cc 	.word	0x080134cc
 8011c90:	00014820 	.word	0x00014820
 8011c94:	2000af2c 	.word	0x2000af2c
 8011c98:	2000af7c 	.word	0x2000af7c
 8011c9c:	40000400 	.word	0x40000400
 8011ca0:	200045ec 	.word	0x200045ec
 8011ca4:	200045a4 	.word	0x200045a4
 8011ca8:	40010000 	.word	0x40010000
 8011cac:	2000455c 	.word	0x2000455c

08011cb0 <SelectReadCoil>:
void SelectReadCoil(uint8_t readCoil)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	71fb      	strb	r3, [r7, #7]
	switch(readCoil){
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	2b07      	cmp	r3, #7
 8011cc0:	f200 809c 	bhi.w	8011dfc <SelectReadCoil+0x14c>
 8011cc4:	a201      	add	r2, pc, #4	; (adr r2, 8011ccc <SelectReadCoil+0x1c>)
 8011cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cca:	bf00      	nop
 8011ccc:	08011ced 	.word	0x08011ced
 8011cd0:	08011d0f 	.word	0x08011d0f
 8011cd4:	08011d31 	.word	0x08011d31
 8011cd8:	08011d53 	.word	0x08011d53
 8011cdc:	08011d75 	.word	0x08011d75
 8011ce0:	08011d97 	.word	0x08011d97
 8011ce4:	08011db9 	.word	0x08011db9
 8011ce8:	08011ddb 	.word	0x08011ddb
		case 1: CD4051_A_1; CD4051_B_0; CD4051_C_1;break; //coil_1 <-> X5
 8011cec:	2201      	movs	r2, #1
 8011cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011cf2:	4844      	ldr	r0, [pc, #272]	; (8011e04 <SelectReadCoil+0x154>)
 8011cf4:	f7f0 fffa 	bl	8002cec <HAL_GPIO_WritePin>
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2120      	movs	r1, #32
 8011cfc:	4842      	ldr	r0, [pc, #264]	; (8011e08 <SelectReadCoil+0x158>)
 8011cfe:	f7f0 fff5 	bl	8002cec <HAL_GPIO_WritePin>
 8011d02:	2201      	movs	r2, #1
 8011d04:	2140      	movs	r1, #64	; 0x40
 8011d06:	4840      	ldr	r0, [pc, #256]	; (8011e08 <SelectReadCoil+0x158>)
 8011d08:	f7f0 fff0 	bl	8002cec <HAL_GPIO_WritePin>
 8011d0c:	e076      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 2: CD4051_A_1; CD4051_B_1; CD4051_C_1;break; //coil_2 <-> X7
 8011d0e:	2201      	movs	r2, #1
 8011d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011d14:	483b      	ldr	r0, [pc, #236]	; (8011e04 <SelectReadCoil+0x154>)
 8011d16:	f7f0 ffe9 	bl	8002cec <HAL_GPIO_WritePin>
 8011d1a:	2201      	movs	r2, #1
 8011d1c:	2120      	movs	r1, #32
 8011d1e:	483a      	ldr	r0, [pc, #232]	; (8011e08 <SelectReadCoil+0x158>)
 8011d20:	f7f0 ffe4 	bl	8002cec <HAL_GPIO_WritePin>
 8011d24:	2201      	movs	r2, #1
 8011d26:	2140      	movs	r1, #64	; 0x40
 8011d28:	4837      	ldr	r0, [pc, #220]	; (8011e08 <SelectReadCoil+0x158>)
 8011d2a:	f7f0 ffdf 	bl	8002cec <HAL_GPIO_WritePin>
 8011d2e:	e065      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 3: CD4051_A_0; CD4051_B_1; CD4051_C_1;break; //coil_3 <-> X6
 8011d30:	2200      	movs	r2, #0
 8011d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011d36:	4833      	ldr	r0, [pc, #204]	; (8011e04 <SelectReadCoil+0x154>)
 8011d38:	f7f0 ffd8 	bl	8002cec <HAL_GPIO_WritePin>
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	2120      	movs	r1, #32
 8011d40:	4831      	ldr	r0, [pc, #196]	; (8011e08 <SelectReadCoil+0x158>)
 8011d42:	f7f0 ffd3 	bl	8002cec <HAL_GPIO_WritePin>
 8011d46:	2201      	movs	r2, #1
 8011d48:	2140      	movs	r1, #64	; 0x40
 8011d4a:	482f      	ldr	r0, [pc, #188]	; (8011e08 <SelectReadCoil+0x158>)
 8011d4c:	f7f0 ffce 	bl	8002cec <HAL_GPIO_WritePin>
 8011d50:	e054      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 4: CD4051_A_0; CD4051_B_0; CD4051_C_1;break; //coil_4 <-> X4
 8011d52:	2200      	movs	r2, #0
 8011d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011d58:	482a      	ldr	r0, [pc, #168]	; (8011e04 <SelectReadCoil+0x154>)
 8011d5a:	f7f0 ffc7 	bl	8002cec <HAL_GPIO_WritePin>
 8011d5e:	2200      	movs	r2, #0
 8011d60:	2120      	movs	r1, #32
 8011d62:	4829      	ldr	r0, [pc, #164]	; (8011e08 <SelectReadCoil+0x158>)
 8011d64:	f7f0 ffc2 	bl	8002cec <HAL_GPIO_WritePin>
 8011d68:	2201      	movs	r2, #1
 8011d6a:	2140      	movs	r1, #64	; 0x40
 8011d6c:	4826      	ldr	r0, [pc, #152]	; (8011e08 <SelectReadCoil+0x158>)
 8011d6e:	f7f0 ffbd 	bl	8002cec <HAL_GPIO_WritePin>
 8011d72:	e043      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 5: CD4051_A_0; CD4051_B_1; CD4051_C_0;break; //coil_5 <-> X2
 8011d74:	2200      	movs	r2, #0
 8011d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011d7a:	4822      	ldr	r0, [pc, #136]	; (8011e04 <SelectReadCoil+0x154>)
 8011d7c:	f7f0 ffb6 	bl	8002cec <HAL_GPIO_WritePin>
 8011d80:	2201      	movs	r2, #1
 8011d82:	2120      	movs	r1, #32
 8011d84:	4820      	ldr	r0, [pc, #128]	; (8011e08 <SelectReadCoil+0x158>)
 8011d86:	f7f0 ffb1 	bl	8002cec <HAL_GPIO_WritePin>
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	2140      	movs	r1, #64	; 0x40
 8011d8e:	481e      	ldr	r0, [pc, #120]	; (8011e08 <SelectReadCoil+0x158>)
 8011d90:	f7f0 ffac 	bl	8002cec <HAL_GPIO_WritePin>
 8011d94:	e032      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 6: CD4051_A_1; CD4051_B_0; CD4051_C_0;break; //coil_6 <-> X1
 8011d96:	2201      	movs	r2, #1
 8011d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011d9c:	4819      	ldr	r0, [pc, #100]	; (8011e04 <SelectReadCoil+0x154>)
 8011d9e:	f7f0 ffa5 	bl	8002cec <HAL_GPIO_WritePin>
 8011da2:	2200      	movs	r2, #0
 8011da4:	2120      	movs	r1, #32
 8011da6:	4818      	ldr	r0, [pc, #96]	; (8011e08 <SelectReadCoil+0x158>)
 8011da8:	f7f0 ffa0 	bl	8002cec <HAL_GPIO_WritePin>
 8011dac:	2200      	movs	r2, #0
 8011dae:	2140      	movs	r1, #64	; 0x40
 8011db0:	4815      	ldr	r0, [pc, #84]	; (8011e08 <SelectReadCoil+0x158>)
 8011db2:	f7f0 ff9b 	bl	8002cec <HAL_GPIO_WritePin>
 8011db6:	e021      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 7: CD4051_A_0; CD4051_B_0; CD4051_C_0;break; //coil_7 <-> X0
 8011db8:	2200      	movs	r2, #0
 8011dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011dbe:	4811      	ldr	r0, [pc, #68]	; (8011e04 <SelectReadCoil+0x154>)
 8011dc0:	f7f0 ff94 	bl	8002cec <HAL_GPIO_WritePin>
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	2120      	movs	r1, #32
 8011dc8:	480f      	ldr	r0, [pc, #60]	; (8011e08 <SelectReadCoil+0x158>)
 8011dca:	f7f0 ff8f 	bl	8002cec <HAL_GPIO_WritePin>
 8011dce:	2200      	movs	r2, #0
 8011dd0:	2140      	movs	r1, #64	; 0x40
 8011dd2:	480d      	ldr	r0, [pc, #52]	; (8011e08 <SelectReadCoil+0x158>)
 8011dd4:	f7f0 ff8a 	bl	8002cec <HAL_GPIO_WritePin>
 8011dd8:	e010      	b.n	8011dfc <SelectReadCoil+0x14c>
		case 8: CD4051_A_1; CD4051_B_1; CD4051_C_0;break; //coil_8 <-> X3
 8011dda:	2201      	movs	r2, #1
 8011ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011de0:	4808      	ldr	r0, [pc, #32]	; (8011e04 <SelectReadCoil+0x154>)
 8011de2:	f7f0 ff83 	bl	8002cec <HAL_GPIO_WritePin>
 8011de6:	2201      	movs	r2, #1
 8011de8:	2120      	movs	r1, #32
 8011dea:	4807      	ldr	r0, [pc, #28]	; (8011e08 <SelectReadCoil+0x158>)
 8011dec:	f7f0 ff7e 	bl	8002cec <HAL_GPIO_WritePin>
 8011df0:	2200      	movs	r2, #0
 8011df2:	2140      	movs	r1, #64	; 0x40
 8011df4:	4804      	ldr	r0, [pc, #16]	; (8011e08 <SelectReadCoil+0x158>)
 8011df6:	f7f0 ff79 	bl	8002cec <HAL_GPIO_WritePin>
 8011dfa:	bf00      	nop
	}
}
 8011dfc:	bf00      	nop
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	40020000 	.word	0x40020000
 8011e08:	40020400 	.word	0x40020400

08011e0c <Measure>:


void Measure(uint8_t type,uint8_t outCoil,uint8_t readCoil)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	71fb      	strb	r3, [r7, #7]
 8011e16:	460b      	mov	r3, r1
 8011e18:	71bb      	strb	r3, [r7, #6]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	717b      	strb	r3, [r7, #5]
	/* Phát xung và thiết lập Cuộn cảm nhận tín hiệu */
	PulseOut(type,ListLengthOut[type], outCoil);
 8011e1e:	79fb      	ldrb	r3, [r7, #7]
 8011e20:	4a96      	ldr	r2, [pc, #600]	; (801207c <Measure+0x270>)
 8011e22:	5cd1      	ldrb	r1, [r2, r3]
 8011e24:	79ba      	ldrb	r2, [r7, #6]
 8011e26:	79fb      	ldrb	r3, [r7, #7]
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fe7d 	bl	8011b28 <PulseOut>
	SelectReadCoil(readCoil);
 8011e2e:	797b      	ldrb	r3, [r7, #5]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7ff ff3d 	bl	8011cb0 <SelectReadCoil>
	/* Đưa các biến sử dụng trong đo đạc về giá trị ban đầu */
	is_start_measure = true;
 8011e36:	4b92      	ldr	r3, [pc, #584]	; (8012080 <Measure+0x274>)
 8011e38:	2201      	movs	r2, #1
 8011e3a:	701a      	strb	r2, [r3, #0]
	point_start_measure=0;
 8011e3c:	4b91      	ldr	r3, [pc, #580]	; (8012084 <Measure+0x278>)
 8011e3e:	2200      	movs	r2, #0
 8011e40:	801a      	strh	r2, [r3, #0]
	startmeasure=0;
 8011e42:	4b91      	ldr	r3, [pc, #580]	; (8012088 <Measure+0x27c>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	801a      	strh	r2, [r3, #0]
	stopmeasure=0;
 8011e48:	4b90      	ldr	r3, [pc, #576]	; (801208c <Measure+0x280>)
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	801a      	strh	r2, [r3, #0]
	responce_length=0;
 8011e4e:	4b90      	ldr	r3, [pc, #576]	; (8012090 <Measure+0x284>)
 8011e50:	2200      	movs	r2, #0
 8011e52:	701a      	strb	r2, [r3, #0]
	responce_period=0;
 8011e54:	4b8f      	ldr	r3, [pc, #572]	; (8012094 <Measure+0x288>)
 8011e56:	2200      	movs	r2, #0
 8011e58:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<IC_MAX;i++){
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	617b      	str	r3, [r7, #20]
 8011e5e:	e007      	b.n	8011e70 <Measure+0x64>
		inputCapture_data[i]=0;	// Clear ic_data
 8011e60:	4a8d      	ldr	r2, [pc, #564]	; (8012098 <Measure+0x28c>)
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	2100      	movs	r1, #0
 8011e66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<IC_MAX;i++){
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	617b      	str	r3, [r7, #20]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	2b31      	cmp	r3, #49	; 0x31
 8011e74:	ddf4      	ble.n	8011e60 <Measure+0x54>
	}
	uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8011e76:	797a      	ldrb	r2, [r7, #5]
 8011e78:	79bb      	ldrb	r3, [r7, #6]
 8011e7a:	4611      	mov	r1, r2
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f000 fac3 	bl	8012408 <FileRankToSquare>
 8011e82:	4603      	mov	r3, r0
 8011e84:	72fb      	strb	r3, [r7, #11]
	bool firstcheck=true;
 8011e86:	2301      	movs	r3, #1
 8011e88:	72bb      	strb	r3, [r7, #10]
	uint16_t period = 84000/ListFrequency[type]; 	// tính toán chu kỳ
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	4a83      	ldr	r2, [pc, #524]	; (801209c <Measure+0x290>)
 8011e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e92:	461a      	mov	r2, r3
 8011e94:	4b82      	ldr	r3, [pc, #520]	; (80120a0 <Measure+0x294>)
 8011e96:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e9a:	813b      	strh	r3, [r7, #8]

	/*	Thiết lập Timer để đo đạc tín hiệu trả về	*/
	TIM4->ARR = ListIC_measure[type];	// xác định khoảng đo tối đa
 8011e9c:	79fb      	ldrb	r3, [r7, #7]
 8011e9e:	4a81      	ldr	r2, [pc, #516]	; (80120a4 <Measure+0x298>)
 8011ea0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011ea4:	4b80      	ldr	r3, [pc, #512]	; (80120a8 <Measure+0x29c>)
 8011ea6:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
 8011ea8:	2332      	movs	r3, #50	; 0x32
 8011eaa:	4a7b      	ldr	r2, [pc, #492]	; (8012098 <Measure+0x28c>)
 8011eac:	2104      	movs	r1, #4
 8011eae:	487f      	ldr	r0, [pc, #508]	; (80120ac <Measure+0x2a0>)
 8011eb0:	f7f6 fbb8 	bl	8008624 <HAL_TIM_IC_Start_DMA>

    /* chờ cho quá trình đo PWM hoàn thành */
	while(is_start_measure){
 8011eb4:	e03b      	b.n	8011f2e <Measure+0x122>
		/*	Kiểm tra liên tục xem có xung phản hồi hay không? nếu không thì dừng quá trình đo lại luôn để tiết kiệm thời gian
		 * khi quét ô cuối cùng thì không bỏ qua quá trình scan vì nó sẽ gây nhiễu đến piece type sau đó */
		if(firstcheck && outCoil!=sttInOut[7] && readCoil!=sttInOut[7]){
 8011eb6:	7abb      	ldrb	r3, [r7, #10]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d038      	beq.n	8011f2e <Measure+0x122>
 8011ebc:	2206      	movs	r2, #6
 8011ebe:	79bb      	ldrb	r3, [r7, #6]
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d034      	beq.n	8011f2e <Measure+0x122>
 8011ec4:	2206      	movs	r2, #6
 8011ec6:	797b      	ldrb	r3, [r7, #5]
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d030      	beq.n	8011f2e <Measure+0x122>
			if(TIM4->CNT > (period*18)){
 8011ecc:	4b76      	ldr	r3, [pc, #472]	; (80120a8 <Measure+0x29c>)
 8011ece:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011ed0:	893a      	ldrh	r2, [r7, #8]
 8011ed2:	4613      	mov	r3, r2
 8011ed4:	00db      	lsls	r3, r3, #3
 8011ed6:	4413      	add	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4299      	cmp	r1, r3
 8011edc:	d927      	bls.n	8011f2e <Measure+0x122>
				if(inputCapture_data[10]==0){
 8011ede:	4b6e      	ldr	r3, [pc, #440]	; (8012098 <Measure+0x28c>)
 8011ee0:	8a9b      	ldrh	r3, [r3, #20]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d123      	bne.n	8011f2e <Measure+0x122>
					/* Nếu không có xung phản hồi thì reset biến và đặt lại timer */
					firstcheck=false;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	72bb      	strb	r3, [r7, #10]
					responce_length=0;
 8011eea:	4b69      	ldr	r3, [pc, #420]	; (8012090 <Measure+0x284>)
 8011eec:	2200      	movs	r2, #0
 8011eee:	701a      	strb	r2, [r3, #0]
					responce_period=0;
 8011ef0:	4b68      	ldr	r3, [pc, #416]	; (8012094 <Measure+0x288>)
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	801a      	strh	r2, [r3, #0]
					datapieces[type][sq][PULSES]=0;
 8011ef6:	79fa      	ldrb	r2, [r7, #7]
 8011ef8:	7afb      	ldrb	r3, [r7, #11]
 8011efa:	496d      	ldr	r1, [pc, #436]	; (80120b0 <Measure+0x2a4>)
 8011efc:	0192      	lsls	r2, r2, #6
 8011efe:	4413      	add	r3, r2
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	440b      	add	r3, r1
 8011f04:	2200      	movs	r2, #0
 8011f06:	805a      	strh	r2, [r3, #2]
					datapieces[type][sq][PERIOD]=0;
 8011f08:	79fa      	ldrb	r2, [r7, #7]
 8011f0a:	7afb      	ldrb	r3, [r7, #11]
 8011f0c:	4968      	ldr	r1, [pc, #416]	; (80120b0 <Measure+0x2a4>)
 8011f0e:	0192      	lsls	r2, r2, #6
 8011f10:	4413      	add	r3, r2
 8011f12:	2200      	movs	r2, #0
 8011f14:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
					TIM4->CNT=0;
 8011f18:	4b63      	ldr	r3, [pc, #396]	; (80120a8 <Measure+0x29c>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8011f1e:	2104      	movs	r1, #4
 8011f20:	4862      	ldr	r0, [pc, #392]	; (80120ac <Measure+0x2a0>)
 8011f22:	f7f6 fd1b 	bl	800895c <HAL_TIM_IC_Stop_DMA>
					is_start_measure=false;
 8011f26:	4b56      	ldr	r3, [pc, #344]	; (8012080 <Measure+0x274>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	701a      	strb	r2, [r3, #0]
					return;
 8011f2c:	e0a3      	b.n	8012076 <Measure+0x26a>
	while(is_start_measure){
 8011f2e:	4b54      	ldr	r3, [pc, #336]	; (8012080 <Measure+0x274>)
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1be      	bne.n	8011eb6 <Measure+0xaa>
	 * 	sử dụng 1 khoảng để đo tần số ⏤⏤⏤⏤┘
	 *
	 *  */

	/* xác định điểm đầu Measure */
	for(int i=0;i<IC_MAX;i++){
 8011f38:	2300      	movs	r3, #0
 8011f3a:	613b      	str	r3, [r7, #16]
 8011f3c:	e02e      	b.n	8011f9c <Measure+0x190>
		if(inputCapture_data[i] >point_start_measure){
 8011f3e:	4a56      	ldr	r2, [pc, #344]	; (8012098 <Measure+0x28c>)
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011f46:	4b4f      	ldr	r3, [pc, #316]	; (8012084 <Measure+0x278>)
 8011f48:	881b      	ldrh	r3, [r3, #0]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d904      	bls.n	8011f5a <Measure+0x14e>
			startmeasure=i;
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	4b4c      	ldr	r3, [pc, #304]	; (8012088 <Measure+0x27c>)
 8011f56:	801a      	strh	r2, [r3, #0]
			break;
 8011f58:	e023      	b.n	8011fa2 <Measure+0x196>
		}else if(inputCapture_data[i]==0){ // nếu ko có xung nào nhận được
 8011f5a:	4a4f      	ldr	r2, [pc, #316]	; (8012098 <Measure+0x28c>)
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d117      	bne.n	8011f96 <Measure+0x18a>
			responce_length=0;
 8011f66:	4b4a      	ldr	r3, [pc, #296]	; (8012090 <Measure+0x284>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	701a      	strb	r2, [r3, #0]
			responce_period=0;
 8011f6c:	4b49      	ldr	r3, [pc, #292]	; (8012094 <Measure+0x288>)
 8011f6e:	2200      	movs	r2, #0
 8011f70:	801a      	strh	r2, [r3, #0]
			datapieces[type][sq][PULSES]=0;
 8011f72:	79fa      	ldrb	r2, [r7, #7]
 8011f74:	7afb      	ldrb	r3, [r7, #11]
 8011f76:	494e      	ldr	r1, [pc, #312]	; (80120b0 <Measure+0x2a4>)
 8011f78:	0192      	lsls	r2, r2, #6
 8011f7a:	4413      	add	r3, r2
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	440b      	add	r3, r1
 8011f80:	2200      	movs	r2, #0
 8011f82:	805a      	strh	r2, [r3, #2]
			datapieces[type][sq][PERIOD]=0;
 8011f84:	79fa      	ldrb	r2, [r7, #7]
 8011f86:	7afb      	ldrb	r3, [r7, #11]
 8011f88:	4949      	ldr	r1, [pc, #292]	; (80120b0 <Measure+0x2a4>)
 8011f8a:	0192      	lsls	r2, r2, #6
 8011f8c:	4413      	add	r3, r2
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			return;
 8011f94:	e06f      	b.n	8012076 <Measure+0x26a>
	for(int i=0;i<IC_MAX;i++){
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	3301      	adds	r3, #1
 8011f9a:	613b      	str	r3, [r7, #16]
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	2b31      	cmp	r3, #49	; 0x31
 8011fa0:	ddcd      	ble.n	8011f3e <Measure+0x132>
		}
	}

	/* xác định điểm cuối Measure */
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8011fa2:	4b39      	ldr	r3, [pc, #228]	; (8012088 <Measure+0x27c>)
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
 8011fa8:	e011      	b.n	8011fce <Measure+0x1c2>
		stopmeasure=i;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	b29a      	uxth	r2, r3
 8011fae:	4b37      	ldr	r3, [pc, #220]	; (801208c <Measure+0x280>)
 8011fb0:	801a      	strh	r2, [r3, #0]
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	3301      	adds	r3, #1
 8011fb6:	4a38      	ldr	r2, [pc, #224]	; (8012098 <Measure+0x28c>)
 8011fb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011fbc:	4936      	ldr	r1, [pc, #216]	; (8012098 <Measure+0x28c>)
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d306      	bcc.n	8011fd6 <Measure+0x1ca>
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b30      	cmp	r3, #48	; 0x30
 8011fd2:	ddea      	ble.n	8011faa <Measure+0x19e>
 8011fd4:	e000      	b.n	8011fd8 <Measure+0x1cc>
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8011fd6:	bf00      	nop
	}
	if(inputCapture_data[IC_MAX-1]!=0) stopmeasure=IC_MAX;
 8011fd8:	4b2f      	ldr	r3, [pc, #188]	; (8012098 <Measure+0x28c>)
 8011fda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d002      	beq.n	8011fe8 <Measure+0x1dc>
 8011fe2:	4b2a      	ldr	r3, [pc, #168]	; (801208c <Measure+0x280>)
 8011fe4:	2232      	movs	r2, #50	; 0x32
 8011fe6:	801a      	strh	r2, [r3, #0]

	/* tính toán số lượng Pulses phản hồi */
	responce_length = stopmeasure-startmeasure;
 8011fe8:	4b28      	ldr	r3, [pc, #160]	; (801208c <Measure+0x280>)
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	b2da      	uxtb	r2, r3
 8011fee:	4b26      	ldr	r3, [pc, #152]	; (8012088 <Measure+0x27c>)
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	1ad3      	subs	r3, r2, r3
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	4b25      	ldr	r3, [pc, #148]	; (8012090 <Measure+0x284>)
 8011ffa:	701a      	strb	r2, [r3, #0]

	// tính period phản hồi
	if(responce_length > offsetMeasure[type]+RANGE_MEASURE){
 8011ffc:	4b24      	ldr	r3, [pc, #144]	; (8012090 <Measure+0x284>)
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	4619      	mov	r1, r3
 8012002:	79fb      	ldrb	r3, [r7, #7]
 8012004:	4a2b      	ldr	r2, [pc, #172]	; (80120b4 <Measure+0x2a8>)
 8012006:	5cd3      	ldrb	r3, [r2, r3]
 8012008:	3304      	adds	r3, #4
 801200a:	4299      	cmp	r1, r3
 801200c:	dd1d      	ble.n	801204a <Measure+0x23e>
		responce_period = (inputCapture_data[startmeasure+offsetMeasure[type]+RANGE_MEASURE] - inputCapture_data[startmeasure + offsetMeasure[type]]) / RANGE_MEASURE;
 801200e:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <Measure+0x27c>)
 8012010:	881b      	ldrh	r3, [r3, #0]
 8012012:	4619      	mov	r1, r3
 8012014:	79fb      	ldrb	r3, [r7, #7]
 8012016:	4a27      	ldr	r2, [pc, #156]	; (80120b4 <Measure+0x2a8>)
 8012018:	5cd3      	ldrb	r3, [r2, r3]
 801201a:	440b      	add	r3, r1
 801201c:	3304      	adds	r3, #4
 801201e:	4a1e      	ldr	r2, [pc, #120]	; (8012098 <Measure+0x28c>)
 8012020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012024:	4619      	mov	r1, r3
 8012026:	4b18      	ldr	r3, [pc, #96]	; (8012088 <Measure+0x27c>)
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	4618      	mov	r0, r3
 801202c:	79fb      	ldrb	r3, [r7, #7]
 801202e:	4a21      	ldr	r2, [pc, #132]	; (80120b4 <Measure+0x2a8>)
 8012030:	5cd3      	ldrb	r3, [r2, r3]
 8012032:	4403      	add	r3, r0
 8012034:	4a18      	ldr	r2, [pc, #96]	; (8012098 <Measure+0x28c>)
 8012036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801203a:	1acb      	subs	r3, r1, r3
 801203c:	2b00      	cmp	r3, #0
 801203e:	da00      	bge.n	8012042 <Measure+0x236>
 8012040:	3303      	adds	r3, #3
 8012042:	109b      	asrs	r3, r3, #2
 8012044:	b29a      	uxth	r2, r3
 8012046:	4b13      	ldr	r3, [pc, #76]	; (8012094 <Measure+0x288>)
 8012048:	801a      	strh	r2, [r3, #0]
	}else{
		datapieces[type][sq][PULSES]=0;
		datapieces[type][sq][PERIOD]=0;
	}
#else
	datapieces[type][sq][PULSES]=responce_length;
 801204a:	4b11      	ldr	r3, [pc, #68]	; (8012090 <Measure+0x284>)
 801204c:	7819      	ldrb	r1, [r3, #0]
 801204e:	79fa      	ldrb	r2, [r7, #7]
 8012050:	7afb      	ldrb	r3, [r7, #11]
 8012052:	b288      	uxth	r0, r1
 8012054:	4916      	ldr	r1, [pc, #88]	; (80120b0 <Measure+0x2a4>)
 8012056:	0192      	lsls	r2, r2, #6
 8012058:	4413      	add	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	440b      	add	r3, r1
 801205e:	4602      	mov	r2, r0
 8012060:	805a      	strh	r2, [r3, #2]
	datapieces[type][sq][PERIOD]=responce_period;
 8012062:	79fa      	ldrb	r2, [r7, #7]
 8012064:	7afb      	ldrb	r3, [r7, #11]
 8012066:	490b      	ldr	r1, [pc, #44]	; (8012094 <Measure+0x288>)
 8012068:	8808      	ldrh	r0, [r1, #0]
 801206a:	4911      	ldr	r1, [pc, #68]	; (80120b0 <Measure+0x2a4>)
 801206c:	0192      	lsls	r2, r2, #6
 801206e:	4413      	add	r3, r2
 8012070:	4602      	mov	r2, r0
 8012072:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
#endif
}
 8012076:	3718      	adds	r7, #24
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}
 801207c:	080134f0 	.word	0x080134f0
 8012080:	20009caa 	.word	0x20009caa
 8012084:	20009ca8 	.word	0x20009ca8
 8012088:	2000b080 	.word	0x2000b080
 801208c:	2000b082 	.word	0x2000b082
 8012090:	2000b084 	.word	0x2000b084
 8012094:	2000b086 	.word	0x2000b086
 8012098:	2000b01c 	.word	0x2000b01c
 801209c:	080134cc 	.word	0x080134cc
 80120a0:	00014820 	.word	0x00014820
 80120a4:	0801354c 	.word	0x0801354c
 80120a8:	40000800 	.word	0x40000800
 80120ac:	20004634 	.word	0x20004634
 80120b0:	20009cac 	.word	0x20009cac
 80120b4:	08013570 	.word	0x08013570

080120b8 <Scan>:
 * Return 0: quá trình quét hoàn tất và không phát hiện sự thay đổi của FEN
 * Return 1: quá trình quét hoàn tất và phát hiện có sự thay đổi FEN
 * Return 2: quá trình quét có xảy ra ChessClock Side Thay đổi
 *  enableClockSideInterrupt: có cho phép return lại khi chessclock thay đổi hay không */
SCANRESULT Scan(bool enableClockSideInterrup)
{
 80120b8:	b590      	push	{r4, r7, lr}
 80120ba:	b093      	sub	sp, #76	; 0x4c
 80120bc:	af00      	add	r7, sp, #0
 80120be:	4603      	mov	r3, r0
 80120c0:	71fb      	strb	r3, [r7, #7]
	/* Reset lại các biến */
	for(int i=0;i<64;i++){
 80120c2:	2300      	movs	r3, #0
 80120c4:	647b      	str	r3, [r7, #68]	; 0x44
 80120c6:	e007      	b.n	80120d8 <Scan+0x20>
		datamain[i]=0;
 80120c8:	4a91      	ldr	r2, [pc, #580]	; (8012310 <Scan+0x258>)
 80120ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120cc:	4413      	add	r3, r2
 80120ce:	2200      	movs	r2, #0
 80120d0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 80120d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120d4:	3301      	adds	r3, #1
 80120d6:	647b      	str	r3, [r7, #68]	; 0x44
 80120d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80120da:	2b3f      	cmp	r3, #63	; 0x3f
 80120dc:	ddf4      	ble.n	80120c8 <Scan+0x10>
	}
	for(int t=0;t<18;t++){
 80120de:	2300      	movs	r3, #0
 80120e0:	643b      	str	r3, [r7, #64]	; 0x40
 80120e2:	e01c      	b.n	801211e <Scan+0x66>
		for(int s =0;s<64;s++){
 80120e4:	2300      	movs	r3, #0
 80120e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120e8:	e013      	b.n	8012112 <Scan+0x5a>
			datapieces[t][s][PULSES]=0;
 80120ea:	498a      	ldr	r1, [pc, #552]	; (8012314 <Scan+0x25c>)
 80120ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120ee:	019a      	lsls	r2, r3, #6
 80120f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f2:	4413      	add	r3, r2
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	440b      	add	r3, r1
 80120f8:	2200      	movs	r2, #0
 80120fa:	805a      	strh	r2, [r3, #2]
			datapieces[t][s][PERIOD]=0;
 80120fc:	4985      	ldr	r1, [pc, #532]	; (8012314 <Scan+0x25c>)
 80120fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012100:	019a      	lsls	r2, r3, #6
 8012102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012104:	4413      	add	r3, r2
 8012106:	2200      	movs	r2, #0
 8012108:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
		for(int s =0;s<64;s++){
 801210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801210e:	3301      	adds	r3, #1
 8012110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012114:	2b3f      	cmp	r3, #63	; 0x3f
 8012116:	dde8      	ble.n	80120ea <Scan+0x32>
	for(int t=0;t<18;t++){
 8012118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801211a:	3301      	adds	r3, #1
 801211c:	643b      	str	r3, [r7, #64]	; 0x40
 801211e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012120:	2b11      	cmp	r3, #17
 8012122:	dddf      	ble.n	80120e4 <Scan+0x2c>
		}
	}
	/* Quét tất cả các Piece */
	for(int i=0;i<18;i++){
 8012124:	2300      	movs	r3, #0
 8012126:	63bb      	str	r3, [r7, #56]	; 0x38
 8012128:	e15a      	b.n	80123e0 <Scan+0x328>
		int type = sttscan[i];
 801212a:	4a7b      	ldr	r2, [pc, #492]	; (8012318 <Scan+0x260>)
 801212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212e:	4413      	add	r3, r2
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	627b      	str	r3, [r7, #36]	; 0x24
		int outCoil =0;
 8012134:	2300      	movs	r3, #0
 8012136:	623b      	str	r3, [r7, #32]
		int readCoil =0;
 8012138:	2300      	movs	r3, #0
 801213a:	61fb      	str	r3, [r7, #28]
		for(int j=0;j<8;j++){
 801213c:	2300      	movs	r3, #0
 801213e:	637b      	str	r3, [r7, #52]	; 0x34
 8012140:	e039      	b.n	80121b6 <Scan+0xfe>
			readCoil = sttInOut[j];
 8012142:	4a76      	ldr	r2, [pc, #472]	; (801231c <Scan+0x264>)
 8012144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012146:	4413      	add	r3, r2
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	61fb      	str	r3, [r7, #28]
			for(int k=0;k<8;k++){
 801214c:	2300      	movs	r3, #0
 801214e:	633b      	str	r3, [r7, #48]	; 0x30
 8012150:	e02b      	b.n	80121aa <Scan+0xf2>
				outCoil = sttInOut[k];
 8012152:	4a72      	ldr	r2, [pc, #456]	; (801231c <Scan+0x264>)
 8012154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012156:	4413      	add	r3, r2
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	623b      	str	r3, [r7, #32]
				if(chessclock_interrup==true && enableClockSideInterrup==true){
 801215c:	4b70      	ldr	r3, [pc, #448]	; (8012320 <Scan+0x268>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d007      	beq.n	8012174 <Scan+0xbc>
 8012164:	79fb      	ldrb	r3, [r7, #7]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d004      	beq.n	8012174 <Scan+0xbc>
					chessclock_interrup=false;
 801216a:	4b6d      	ldr	r3, [pc, #436]	; (8012320 <Scan+0x268>)
 801216c:	2200      	movs	r2, #0
 801216e:	701a      	strb	r2, [r3, #0]
					return SCAN_SIDE_CHANGED;
 8012170:	2302      	movs	r3, #2
 8012172:	e141      	b.n	80123f8 <Scan+0x340>
				}
				uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8012174:	6a3b      	ldr	r3, [r7, #32]
 8012176:	b2db      	uxtb	r3, r3
 8012178:	69fa      	ldr	r2, [r7, #28]
 801217a:	b2d2      	uxtb	r2, r2
 801217c:	4611      	mov	r1, r2
 801217e:	4618      	mov	r0, r3
 8012180:	f000 f942 	bl	8012408 <FileRankToSquare>
 8012184:	4603      	mov	r3, r0
 8012186:	76fb      	strb	r3, [r7, #27]
				if(datamain[sq]==0){  // nếu ô quét chưa thấy piece nào thì tiến hành đo đạc
 8012188:	7efb      	ldrb	r3, [r7, #27]
 801218a:	4a61      	ldr	r2, [pc, #388]	; (8012310 <Scan+0x258>)
 801218c:	5cd3      	ldrb	r3, [r2, r3]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d108      	bne.n	80121a4 <Scan+0xec>
					Measure(type,outCoil,readCoil);
 8012192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012194:	b2db      	uxtb	r3, r3
 8012196:	6a3a      	ldr	r2, [r7, #32]
 8012198:	b2d1      	uxtb	r1, r2
 801219a:	69fa      	ldr	r2, [r7, #28]
 801219c:	b2d2      	uxtb	r2, r2
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff fe34 	bl	8011e0c <Measure>
			for(int k=0;k<8;k++){
 80121a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a6:	3301      	adds	r3, #1
 80121a8:	633b      	str	r3, [r7, #48]	; 0x30
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b07      	cmp	r3, #7
 80121ae:	ddd0      	ble.n	8012152 <Scan+0x9a>
		for(int j=0;j<8;j++){
 80121b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b2:	3301      	adds	r3, #1
 80121b4:	637b      	str	r3, [r7, #52]	; 0x34
 80121b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b8:	2b07      	cmp	r3, #7
 80121ba:	ddc2      	ble.n	8012142 <Scan+0x8a>

				}
			}
		}
		// edit new
		int8_t sqDetects[10]={-5,-5,-5,-5,-5,-5,-5,-5,-5,-5}; // mảng các ô có pulseLength > MinValue và có period nằm trong ngưỡng detect
 80121bc:	4a59      	ldr	r2, [pc, #356]	; (8012324 <Scan+0x26c>)
 80121be:	f107 0310 	add.w	r3, r7, #16
 80121c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80121c4:	c303      	stmia	r3!, {r0, r1}
 80121c6:	801a      	strh	r2, [r3, #0]
		uint8_t lengthValid =0; // số lượng các ô hợp lệ
 80121c8:	2300      	movs	r3, #0
 80121ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		/* tìm các ô có pulseLength và period hợp lệ  */
		for (int8_t sq = 0; sq < 64; sq++) {
 80121ce:	2300      	movs	r3, #0
 80121d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80121d4:	e048      	b.n	8012268 <Scan+0x1b0>
			// số xung phải lớn hơn ngưỡng calibase
			if (datapieces[type][sq][PULSES] >= getMarkSq(type, sq)) {// period phải nằm trong khoảng của type piece
 80121d6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80121da:	494e      	ldr	r1, [pc, #312]	; (8012314 <Scan+0x25c>)
 80121dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121de:	0192      	lsls	r2, r2, #6
 80121e0:	4413      	add	r3, r2
 80121e2:	009b      	lsls	r3, r3, #2
 80121e4:	440b      	add	r3, r1
 80121e6:	885c      	ldrh	r4, [r3, #2]
 80121e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ea:	b2db      	uxtb	r3, r3
 80121ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80121f0:	4611      	mov	r1, r2
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 fafe 	bl	80127f4 <getMarkSq>
 80121f8:	4603      	mov	r3, r0
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	429c      	cmp	r4, r3
 80121fe:	d32c      	bcc.n	801225a <Scan+0x1a2>
				if (datapieces[type][sq][PERIOD] <= mark_period_max[type] && datapieces[type][sq][PERIOD] > mark_period_min[type])
 8012200:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012204:	4943      	ldr	r1, [pc, #268]	; (8012314 <Scan+0x25c>)
 8012206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012208:	0192      	lsls	r2, r2, #6
 801220a:	4413      	add	r3, r2
 801220c:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8012210:	4945      	ldr	r1, [pc, #276]	; (8012328 <Scan+0x270>)
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012218:	429a      	cmp	r2, r3
 801221a:	d81e      	bhi.n	801225a <Scan+0x1a2>
 801221c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012220:	493c      	ldr	r1, [pc, #240]	; (8012314 <Scan+0x25c>)
 8012222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012224:	0192      	lsls	r2, r2, #6
 8012226:	4413      	add	r3, r2
 8012228:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 801222c:	493f      	ldr	r1, [pc, #252]	; (801232c <Scan+0x274>)
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012234:	429a      	cmp	r2, r3
 8012236:	d910      	bls.n	801225a <Scan+0x1a2>
				{
					sqDetects[lengthValid] = sq;
 8012238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801223c:	3348      	adds	r3, #72	; 0x48
 801223e:	443b      	add	r3, r7
 8012240:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8012244:	f803 2c38 	strb.w	r2, [r3, #-56]
					lengthValid++;
 8012248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801224c:	3301      	adds	r3, #1
 801224e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 8012252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012256:	2b0a      	cmp	r3, #10
 8012258:	d80b      	bhi.n	8012272 <Scan+0x1ba>
		for (int8_t sq = 0; sq < 64; sq++) {
 801225a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801225e:	b2db      	uxtb	r3, r3
 8012260:	3301      	adds	r3, #1
 8012262:	b2db      	uxtb	r3, r3
 8012264:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012268:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801226c:	2b3f      	cmp	r3, #63	; 0x3f
 801226e:	ddb2      	ble.n	80121d6 <Scan+0x11e>
 8012270:	e000      	b.n	8012274 <Scan+0x1bc>
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 8012272:	bf00      	nop
				}
			}
		}
		/* nếu có 1 ô hợp lệ thì đó là piece  */
		if(lengthValid==1)
 8012274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012278:	2b01      	cmp	r3, #1
 801227a:	d108      	bne.n	801228e <Scan+0x1d6>
		{
			datamain[sqDetects[0]]=type+1;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8012284:	3301      	adds	r3, #1
 8012286:	b2d9      	uxtb	r1, r3
 8012288:	4b21      	ldr	r3, [pc, #132]	; (8012310 <Scan+0x258>)
 801228a:	5499      	strb	r1, [r3, r2]
 801228c:	e0a5      	b.n	80123da <Scan+0x322>
		}else if(lengthValid > 1)	// tìm ra 2 ô có giá trị lớn nhất
 801228e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012292:	2b01      	cmp	r3, #1
 8012294:	f240 80a1 	bls.w	80123da <Scan+0x322>
		{
			SQData firstMax,secondMax;
			firstMax.pulses=-1;firstMax.square=-1;
 8012298:	23ff      	movs	r3, #255	; 0xff
 801229a:	733b      	strb	r3, [r7, #12]
 801229c:	23ff      	movs	r3, #255	; 0xff
 801229e:	737b      	strb	r3, [r7, #13]
			secondMax.pulses=-2;secondMax.square=-2;
 80122a0:	23fe      	movs	r3, #254	; 0xfe
 80122a2:	723b      	strb	r3, [r7, #8]
 80122a4:	23fe      	movs	r3, #254	; 0xfe
 80122a6:	727b      	strb	r3, [r7, #9]

			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 80122a8:	2300      	movs	r3, #0
 80122aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ac:	e06d      	b.n	801238a <Scan+0x2d2>
			{
				if(datapieces[type][sqDetects[v]][PULSES] >= firstMax.pulses)
 80122ae:	f107 0210 	add.w	r2, r7, #16
 80122b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b4:	4413      	add	r3, r2
 80122b6:	f993 3000 	ldrsb.w	r3, [r3]
 80122ba:	4619      	mov	r1, r3
 80122bc:	4a15      	ldr	r2, [pc, #84]	; (8012314 <Scan+0x25c>)
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	019b      	lsls	r3, r3, #6
 80122c2:	440b      	add	r3, r1
 80122c4:	009b      	lsls	r3, r3, #2
 80122c6:	4413      	add	r3, r2
 80122c8:	885b      	ldrh	r3, [r3, #2]
 80122ca:	461a      	mov	r2, r3
 80122cc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	db2d      	blt.n	8012330 <Scan+0x278>
				{
					secondMax.pulses = firstMax.pulses;
 80122d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80122d8:	723b      	strb	r3, [r7, #8]
					secondMax.square = firstMax.square;
 80122da:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80122de:	727b      	strb	r3, [r7, #9]
					firstMax.pulses  = datapieces[type][sqDetects[v]][PULSES];
 80122e0:	f107 0210 	add.w	r2, r7, #16
 80122e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e6:	4413      	add	r3, r2
 80122e8:	f993 3000 	ldrsb.w	r3, [r3]
 80122ec:	4619      	mov	r1, r3
 80122ee:	4a09      	ldr	r2, [pc, #36]	; (8012314 <Scan+0x25c>)
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	019b      	lsls	r3, r3, #6
 80122f4:	440b      	add	r3, r1
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	885b      	ldrh	r3, [r3, #2]
 80122fc:	b25b      	sxtb	r3, r3
 80122fe:	733b      	strb	r3, [r7, #12]
					firstMax.square = sqDetects[v];
 8012300:	f107 0210 	add.w	r2, r7, #16
 8012304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012306:	4413      	add	r3, r2
 8012308:	f993 3000 	ldrsb.w	r3, [r3]
 801230c:	737b      	strb	r3, [r7, #13]
 801230e:	e039      	b.n	8012384 <Scan+0x2cc>
 8012310:	2000aeac 	.word	0x2000aeac
 8012314:	20009cac 	.word	0x20009cac
 8012318:	08013584 	.word	0x08013584
 801231c:	08013598 	.word	0x08013598
 8012320:	20009c58 	.word	0x20009c58
 8012324:	080134a0 	.word	0x080134a0
 8012328:	08013504 	.word	0x08013504
 801232c:	08013528 	.word	0x08013528
				}else if(datapieces[type][sqDetects[v]][PULSES] >= secondMax.pulses){
 8012330:	f107 0210 	add.w	r2, r7, #16
 8012334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012336:	4413      	add	r3, r2
 8012338:	f993 3000 	ldrsb.w	r3, [r3]
 801233c:	4619      	mov	r1, r3
 801233e:	4a30      	ldr	r2, [pc, #192]	; (8012400 <Scan+0x348>)
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	019b      	lsls	r3, r3, #6
 8012344:	440b      	add	r3, r1
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	4413      	add	r3, r2
 801234a:	885b      	ldrh	r3, [r3, #2]
 801234c:	461a      	mov	r2, r3
 801234e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8012352:	429a      	cmp	r2, r3
 8012354:	db16      	blt.n	8012384 <Scan+0x2cc>
					secondMax.pulses = datapieces[type][sqDetects[v]][PULSES];
 8012356:	f107 0210 	add.w	r2, r7, #16
 801235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235c:	4413      	add	r3, r2
 801235e:	f993 3000 	ldrsb.w	r3, [r3]
 8012362:	4619      	mov	r1, r3
 8012364:	4a26      	ldr	r2, [pc, #152]	; (8012400 <Scan+0x348>)
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	019b      	lsls	r3, r3, #6
 801236a:	440b      	add	r3, r1
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	4413      	add	r3, r2
 8012370:	885b      	ldrh	r3, [r3, #2]
 8012372:	b25b      	sxtb	r3, r3
 8012374:	723b      	strb	r3, [r7, #8]
					secondMax.square = sqDetects[v];
 8012376:	f107 0210 	add.w	r2, r7, #16
 801237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237c:	4413      	add	r3, r2
 801237e:	f993 3000 	ldrsb.w	r3, [r3]
 8012382:	727b      	strb	r3, [r7, #9]
			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 8012384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012386:	3301      	adds	r3, #1
 8012388:	62bb      	str	r3, [r7, #40]	; 0x28
 801238a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801238e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012390:	429a      	cmp	r2, r3
 8012392:	db8c      	blt.n	80122ae <Scan+0x1f6>
				}
			}
			/* nếu type là King thì chỉ chọn firstMax là ô có piece */
			/* nếu không thì kiểm tra xem 2 ô có phải là 2 ô liền kề hay không
			 * 4 ô liền kề với ô firstMax là : (sq+1;sq-1;sq+8;sq-8) */
			if(type == 0 || type==5)
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	2b00      	cmp	r3, #0
 8012398:	d002      	beq.n	80123a0 <Scan+0x2e8>
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	2b05      	cmp	r3, #5
 801239e:	d10c      	bne.n	80123ba <Scan+0x302>
			{
				if(firstMax.square >=0)
 80123a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	db18      	blt.n	80123da <Scan+0x322>
				{
					datamain[firstMax.square] = type+1;
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80123b0:	3301      	adds	r3, #1
 80123b2:	b2d9      	uxtb	r1, r3
 80123b4:	4b13      	ldr	r3, [pc, #76]	; (8012404 <Scan+0x34c>)
 80123b6:	5499      	strb	r1, [r3, r2]
				if(firstMax.square >=0)
 80123b8:	e00f      	b.n	80123da <Scan+0x322>
				}
			}
#endif
			else	// nếu không phải là 2 ô liền kề thì cả 2 ô đều là Piece
			{
				datamain[firstMax.square] = type+1;
 80123ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123bc:	b2db      	uxtb	r3, r3
 80123be:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80123c2:	3301      	adds	r3, #1
 80123c4:	b2d9      	uxtb	r1, r3
 80123c6:	4b0f      	ldr	r3, [pc, #60]	; (8012404 <Scan+0x34c>)
 80123c8:	5499      	strb	r1, [r3, r2]
				datamain[secondMax.square] = type+1;
 80123ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	f997 2009 	ldrsb.w	r2, [r7, #9]
 80123d2:	3301      	adds	r3, #1
 80123d4:	b2d9      	uxtb	r1, r3
 80123d6:	4b0b      	ldr	r3, [pc, #44]	; (8012404 <Scan+0x34c>)
 80123d8:	5499      	strb	r1, [r3, r2]
	for(int i=0;i<18;i++){
 80123da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123dc:	3301      	adds	r3, #1
 80123de:	63bb      	str	r3, [r7, #56]	; 0x38
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	2b11      	cmp	r3, #17
 80123e4:	f77f aea1 	ble.w	801212a <Scan+0x72>
			}
		}
	}
	if(DetectFenChange()) return SCAN_FEN_CHANGE;
 80123e8:	f000 f828 	bl	801243c <DetectFenChange>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d001      	beq.n	80123f6 <Scan+0x33e>
 80123f2:	2301      	movs	r3, #1
 80123f4:	e000      	b.n	80123f8 <Scan+0x340>
	return SCAN_NO_FEN_CHANGE;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	374c      	adds	r7, #76	; 0x4c
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd90      	pop	{r4, r7, pc}
 8012400:	20009cac 	.word	0x20009cac
 8012404:	2000aeac 	.word	0x2000aeac

08012408 <FileRankToSquare>:


// file:1->8 rank:1->8 (file=outCoil , rank=readCoil)
uint8_t FileRankToSquare(uint8_t file,uint8_t rank)
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	4603      	mov	r3, r0
 8012410:	460a      	mov	r2, r1
 8012412:	71fb      	strb	r3, [r7, #7]
 8012414:	4613      	mov	r3, r2
 8012416:	71bb      	strb	r3, [r7, #6]
	return (8-file)*8 + rank-1;
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	f1c3 0308 	rsb	r3, r3, #8
 801241e:	b2db      	uxtb	r3, r3
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	b2da      	uxtb	r2, r3
 8012424:	79bb      	ldrb	r3, [r7, #6]
 8012426:	4413      	add	r3, r2
 8012428:	b2db      	uxtb	r3, r3
 801242a:	3b01      	subs	r3, #1
 801242c:	b2db      	uxtb	r3, r3
}
 801242e:	4618      	mov	r0, r3
 8012430:	370c      	adds	r7, #12
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
	...

0801243c <DetectFenChange>:

/* Tìm sự thay đổi của FEN */
bool DetectFenChange()
{
 801243c:	b480      	push	{r7}
 801243e:	b083      	sub	sp, #12
 8012440:	af00      	add	r7, sp, #0
	bool resuft=false;
 8012442:	2300      	movs	r3, #0
 8012444:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<64;i++){
 8012446:	2300      	movs	r3, #0
 8012448:	603b      	str	r3, [r7, #0]
 801244a:	e017      	b.n	801247c <DetectFenChange+0x40>
		if(datamain[i] != datamain_old[i]){
 801244c:	4a10      	ldr	r2, [pc, #64]	; (8012490 <DetectFenChange+0x54>)
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	4413      	add	r3, r2
 8012452:	781a      	ldrb	r2, [r3, #0]
 8012454:	490f      	ldr	r1, [pc, #60]	; (8012494 <DetectFenChange+0x58>)
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	440b      	add	r3, r1
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	429a      	cmp	r2, r3
 801245e:	d00a      	beq.n	8012476 <DetectFenChange+0x3a>
			resuft = true;
 8012460:	2301      	movs	r3, #1
 8012462:	71fb      	strb	r3, [r7, #7]
			datamain_old[i] = datamain[i];
 8012464:	4a0a      	ldr	r2, [pc, #40]	; (8012490 <DetectFenChange+0x54>)
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	4413      	add	r3, r2
 801246a:	7819      	ldrb	r1, [r3, #0]
 801246c:	4a09      	ldr	r2, [pc, #36]	; (8012494 <DetectFenChange+0x58>)
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	4413      	add	r3, r2
 8012472:	460a      	mov	r2, r1
 8012474:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	3301      	adds	r3, #1
 801247a:	603b      	str	r3, [r7, #0]
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	2b3f      	cmp	r3, #63	; 0x3f
 8012480:	dde4      	ble.n	801244c <DetectFenChange+0x10>
		}
	}
	return resuft;
 8012482:	79fb      	ldrb	r3, [r7, #7]
}
 8012484:	4618      	mov	r0, r3
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr
 8012490:	2000aeac 	.word	0x2000aeac
 8012494:	2000aeec 	.word	0x2000aeec

08012498 <StartTaskScanPiece>:
 * 		- các lệnh được gửi theo chu kỳ khoảng 500ms, nếu quá thời gian này (khoảng 1000ms) thì
 * 		   coi như đó là lệnh đầu tiên( trả về fulldata và scanpiece 1 lần sau đó)
 * 3_Review: mỗi lần nhận review
 * 		- board sẽ chỉ scan khi chessclock_side thay đổi sau đó trả về fulldata */

void StartTaskScanPiece(void const *argument) {
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
	ScanPiecesInit();
 80124a0:	f7ff fb28 	bl	8011af4 <ScanPiecesInit>
	MB85RS_getPointSave();
 80124a4:	f7ff f8f8 	bl	8011698 <MB85RS_getPointSave>
		//RoamingData();

		osDelay(1);
#else
#ifdef CALIBASE
		if (isCalibaseMode == true) {
 80124a8:	4b47      	ldr	r3, [pc, #284]	; (80125c8 <StartTaskScanPiece+0x130>)
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00c      	beq.n	80124ca <StartTaskScanPiece+0x32>
			Scan(false);
 80124b0:	2000      	movs	r0, #0
 80124b2:	f7ff fe01 	bl	80120b8 <Scan>
			UsbSendDataCalibase();
 80124b6:	f000 fe87 	bl	80131c8 <UsbSendDataCalibase>
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 80124ba:	4b44      	ldr	r3, [pc, #272]	; (80125cc <StartTaskScanPiece+0x134>)
 80124bc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80124c0:	601a      	str	r2, [r3, #0]
			osDelay(1);
 80124c2:	2001      	movs	r0, #1
 80124c4:	f7fc fb47 	bl	800eb56 <osDelay>
 80124c8:	e079      	b.n	80125be <StartTaskScanPiece+0x126>
		} else
#endif
		if (globalMode == MODE_REVIEW) {
 80124ca:	4b41      	ldr	r3, [pc, #260]	; (80125d0 <StartTaskScanPiece+0x138>)
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d130      	bne.n	8012534 <StartTaskScanPiece+0x9c>
			SCANRESULT result = Scan(true);
 80124d2:	2001      	movs	r0, #1
 80124d4:	f7ff fdf0 	bl	80120b8 <Scan>
 80124d8:	4603      	mov	r3, r0
 80124da:	73bb      	strb	r3, [r7, #14]
			if (result == SCAN_FEN_CHANGE) {
 80124dc:	7bbb      	ldrb	r3, [r7, #14]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d103      	bne.n	80124ea <StartTaskScanPiece+0x52>
				flagReviewFullData = true;
 80124e2:	4b3c      	ldr	r3, [pc, #240]	; (80125d4 <StartTaskScanPiece+0x13c>)
 80124e4:	2201      	movs	r2, #1
 80124e6:	701a      	strb	r2, [r3, #0]
 80124e8:	e01b      	b.n	8012522 <StartTaskScanPiece+0x8a>
			} else if (result == SCAN_NO_FEN_CHANGE) {
 80124ea:	7bbb      	ldrb	r3, [r7, #14]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d103      	bne.n	80124f8 <StartTaskScanPiece+0x60>
				flagReviewFullData = false;
 80124f0:	4b38      	ldr	r3, [pc, #224]	; (80125d4 <StartTaskScanPiece+0x13c>)
 80124f2:	2200      	movs	r2, #0
 80124f4:	701a      	strb	r2, [r3, #0]
 80124f6:	e014      	b.n	8012522 <StartTaskScanPiece+0x8a>
			} else if (result == SCAN_SIDE_CHANGED) {
 80124f8:	7bbb      	ldrb	r3, [r7, #14]
 80124fa:	2b02      	cmp	r3, #2
 80124fc:	d111      	bne.n	8012522 <StartTaskScanPiece+0x8a>
				LED_ON;
 80124fe:	2201      	movs	r2, #1
 8012500:	2104      	movs	r1, #4
 8012502:	4835      	ldr	r0, [pc, #212]	; (80125d8 <StartTaskScanPiece+0x140>)
 8012504:	f7f0 fbf2 	bl	8002cec <HAL_GPIO_WritePin>
				Scan(false); // scanpiece không ngắt bởi clockside
 8012508:	2000      	movs	r0, #0
 801250a:	f7ff fdd5 	bl	80120b8 <Scan>
				flagReviewFullData = true;
 801250e:	4b31      	ldr	r3, [pc, #196]	; (80125d4 <StartTaskScanPiece+0x13c>)
 8012510:	2201      	movs	r2, #1
 8012512:	701a      	strb	r2, [r3, #0]
				handlerMb85rs();
 8012514:	f7ff f9c6 	bl	80118a4 <handlerMb85rs>
				LED_OFF;
 8012518:	2200      	movs	r2, #0
 801251a:	2104      	movs	r1, #4
 801251c:	482e      	ldr	r0, [pc, #184]	; (80125d8 <StartTaskScanPiece+0x140>)
 801251e:	f7f0 fbe5 	bl	8002cec <HAL_GPIO_WritePin>
			}
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 8012522:	4b2a      	ldr	r3, [pc, #168]	; (80125cc <StartTaskScanPiece+0x134>)
 8012524:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012528:	601a      	str	r2, [r3, #0]
			osDelay(500);
 801252a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801252e:	f7fc fb12 	bl	800eb56 <osDelay>
 8012532:	e044      	b.n	80125be <StartTaskScanPiece+0x126>
		} else if (globalMode == MODE_RECORDING) {
 8012534:	4b26      	ldr	r3, [pc, #152]	; (80125d0 <StartTaskScanPiece+0x138>)
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b01      	cmp	r3, #1
 801253a:	d140      	bne.n	80125be <StartTaskScanPiece+0x126>
			if (chessclock_interrup) {
 801253c:	4b27      	ldr	r3, [pc, #156]	; (80125dc <StartTaskScanPiece+0x144>)
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d018      	beq.n	8012576 <StartTaskScanPiece+0xde>
				LED_ON;
 8012544:	2201      	movs	r2, #1
 8012546:	2104      	movs	r1, #4
 8012548:	4823      	ldr	r0, [pc, #140]	; (80125d8 <StartTaskScanPiece+0x140>)
 801254a:	f7f0 fbcf 	bl	8002cec <HAL_GPIO_WritePin>
				Scan(false);
 801254e:	2000      	movs	r0, #0
 8012550:	f7ff fdb2 	bl	80120b8 <Scan>
				chessclock_interrup = false;
 8012554:	4b21      	ldr	r3, [pc, #132]	; (80125dc <StartTaskScanPiece+0x144>)
 8012556:	2200      	movs	r2, #0
 8012558:	701a      	strb	r2, [r3, #0]
				PushData(true);
 801255a:	2001      	movs	r0, #1
 801255c:	f000 f842 	bl	80125e4 <PushData>
				handlerMb85rs();
 8012560:	f7ff f9a0 	bl	80118a4 <handlerMb85rs>
				LED_OFF;
 8012564:	2200      	movs	r2, #0
 8012566:	2104      	movs	r1, #4
 8012568:	481b      	ldr	r0, [pc, #108]	; (80125d8 <StartTaskScanPiece+0x140>)
 801256a:	f7f0 fbbf 	bl	8002cec <HAL_GPIO_WritePin>
				tikReviewData = 0; 		//đặt lại biến đếm
 801256e:	4b1c      	ldr	r3, [pc, #112]	; (80125e0 <StartTaskScanPiece+0x148>)
 8012570:	2200      	movs	r2, #0
 8012572:	801a      	strh	r2, [r3, #0]
 8012574:	e01f      	b.n	80125b6 <StartTaskScanPiece+0x11e>
			} else {
				tikReviewData++;
 8012576:	4b1a      	ldr	r3, [pc, #104]	; (80125e0 <StartTaskScanPiece+0x148>)
 8012578:	881b      	ldrh	r3, [r3, #0]
 801257a:	3301      	adds	r3, #1
 801257c:	b29a      	uxth	r2, r3
 801257e:	4b18      	ldr	r3, [pc, #96]	; (80125e0 <StartTaskScanPiece+0x148>)
 8012580:	801a      	strh	r2, [r3, #0]
				if (tikReviewData > 2000) { // sau chu kỳ 1s sẽ tiến hành scan để lấy dữ liệu review
 8012582:	4b17      	ldr	r3, [pc, #92]	; (80125e0 <StartTaskScanPiece+0x148>)
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801258a:	d914      	bls.n	80125b6 <StartTaskScanPiece+0x11e>
					tikReviewData = 0;
 801258c:	4b14      	ldr	r3, [pc, #80]	; (80125e0 <StartTaskScanPiece+0x148>)
 801258e:	2200      	movs	r2, #0
 8012590:	801a      	strh	r2, [r3, #0]
					SCANRESULT result = Scan(true);
 8012592:	2001      	movs	r0, #1
 8012594:	f7ff fd90 	bl	80120b8 <Scan>
 8012598:	4603      	mov	r3, r0
 801259a:	73fb      	strb	r3, [r7, #15]
					if (result != SCAN_SIDE_CHANGED) {
 801259c:	7bfb      	ldrb	r3, [r7, #15]
 801259e:	2b02      	cmp	r3, #2
 80125a0:	d003      	beq.n	80125aa <StartTaskScanPiece+0x112>
						flagReviewFullData = true;
 80125a2:	4b0c      	ldr	r3, [pc, #48]	; (80125d4 <StartTaskScanPiece+0x13c>)
 80125a4:	2201      	movs	r2, #1
 80125a6:	701a      	strb	r2, [r3, #0]
 80125a8:	e005      	b.n	80125b6 <StartTaskScanPiece+0x11e>
					}else if (result == SCAN_SIDE_CHANGED) {
 80125aa:	7bfb      	ldrb	r3, [r7, #15]
 80125ac:	2b02      	cmp	r3, #2
 80125ae:	d102      	bne.n	80125b6 <StartTaskScanPiece+0x11e>
						chessclock_interrup = true;  // đặt lại biến để tiến hành scan ở phần trên
 80125b0:	4b0a      	ldr	r3, [pc, #40]	; (80125dc <StartTaskScanPiece+0x144>)
 80125b2:	2201      	movs	r2, #1
 80125b4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 80125b6:	4b05      	ldr	r3, [pc, #20]	; (80125cc <StartTaskScanPiece+0x134>)
 80125b8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80125bc:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 80125be:	2001      	movs	r0, #1
 80125c0:	f7fc fac9 	bl	800eb56 <osDelay>
		if (isCalibaseMode == true) {
 80125c4:	e770      	b.n	80124a8 <StartTaskScanPiece+0x10>
 80125c6:	bf00      	nop
 80125c8:	2000b4d9 	.word	0x2000b4d9
 80125cc:	40003000 	.word	0x40003000
 80125d0:	2000b4d1 	.word	0x2000b4d1
 80125d4:	20000101 	.word	0x20000101
 80125d8:	40020400 	.word	0x40020400
 80125dc:	20009c58 	.word	0x20009c58
 80125e0:	2000b4ac 	.word	0x2000b4ac

080125e4 <PushData>:
#endif
	}
}

/* đẩy data vào queue */
void PushData(bool isClockChanged) {
 80125e4:	b590      	push	{r4, r7, lr}
 80125e6:	b089      	sub	sp, #36	; 0x24
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	71fb      	strb	r3, [r7, #7]
	uint8_t pieceA, pieceB, pie = 0;
 80125ee:	2300      	movs	r3, #0
 80125f0:	77fb      	strb	r3, [r7, #31]
	uint16_t crc;

	int8_t rear = QueueGetRear();
 80125f2:	f7ff f997 	bl	8011924 <QueueGetRear>
 80125f6:	4603      	mov	r3, r0
 80125f8:	74fb      	strb	r3, [r7, #19]
	queueData[rear][0] = CMD_BEGIN;
 80125fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125fe:	4a59      	ldr	r2, [pc, #356]	; (8012764 <PushData+0x180>)
 8012600:	2135      	movs	r1, #53	; 0x35
 8012602:	fb01 f303 	mul.w	r3, r1, r3
 8012606:	4413      	add	r3, r2
 8012608:	223a      	movs	r2, #58	; 0x3a
 801260a:	701a      	strb	r2, [r3, #0]
	queueData[rear][1] = ADDRESSBOARD_PART0;
 801260c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012610:	4a54      	ldr	r2, [pc, #336]	; (8012764 <PushData+0x180>)
 8012612:	2135      	movs	r1, #53	; 0x35
 8012614:	fb01 f303 	mul.w	r3, r1, r3
 8012618:	4413      	add	r3, r2
 801261a:	3301      	adds	r3, #1
 801261c:	2200      	movs	r2, #0
 801261e:	701a      	strb	r2, [r3, #0]
	queueData[rear][2] = ADDRESSBOARD_PART1;
 8012620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012624:	4a4f      	ldr	r2, [pc, #316]	; (8012764 <PushData+0x180>)
 8012626:	2135      	movs	r1, #53	; 0x35
 8012628:	fb01 f303 	mul.w	r3, r1, r3
 801262c:	4413      	add	r3, r2
 801262e:	3302      	adds	r3, #2
 8012630:	2200      	movs	r2, #0
 8012632:	701a      	strb	r2, [r3, #0]
	queueData[rear][3] = ADDRESSBOARD_PART2;
 8012634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012638:	4a4a      	ldr	r2, [pc, #296]	; (8012764 <PushData+0x180>)
 801263a:	2135      	movs	r1, #53	; 0x35
 801263c:	fb01 f303 	mul.w	r3, r1, r3
 8012640:	4413      	add	r3, r2
 8012642:	3303      	adds	r3, #3
 8012644:	2224      	movs	r2, #36	; 0x24
 8012646:	701a      	strb	r2, [r3, #0]
	if (isClockChanged) {
 8012648:	79fb      	ldrb	r3, [r7, #7]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d00a      	beq.n	8012664 <PushData+0x80>
		queueData[rear][4] = RES_DATACLOCKCHANGE;
 801264e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012652:	4a44      	ldr	r2, [pc, #272]	; (8012764 <PushData+0x180>)
 8012654:	2135      	movs	r1, #53	; 0x35
 8012656:	fb01 f303 	mul.w	r3, r1, r3
 801265a:	4413      	add	r3, r2
 801265c:	3304      	adds	r3, #4
 801265e:	2239      	movs	r2, #57	; 0x39
 8012660:	701a      	strb	r2, [r3, #0]
 8012662:	e009      	b.n	8012678 <PushData+0x94>
	} else {
		queueData[rear][4] = RES_DATAFENCHANGE;
 8012664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012668:	4a3e      	ldr	r2, [pc, #248]	; (8012764 <PushData+0x180>)
 801266a:	2135      	movs	r1, #53	; 0x35
 801266c:	fb01 f303 	mul.w	r3, r1, r3
 8012670:	4413      	add	r3, r2
 8012672:	3304      	adds	r3, #4
 8012674:	2238      	movs	r2, #56	; 0x38
 8012676:	701a      	strb	r2, [r3, #0]
	}

	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 8012678:	2300      	movs	r3, #0
 801267a:	61bb      	str	r3, [r7, #24]
 801267c:	e02a      	b.n	80126d4 <PushData+0xf0>
		pieceA = byteToPiece(datamain_old[pie]);
 801267e:	7ffb      	ldrb	r3, [r7, #31]
 8012680:	4a39      	ldr	r2, [pc, #228]	; (8012768 <PushData+0x184>)
 8012682:	5cd3      	ldrb	r3, [r2, r3]
 8012684:	4618      	mov	r0, r3
 8012686:	f000 f9c3 	bl	8012a10 <byteToPiece>
 801268a:	4603      	mov	r3, r0
 801268c:	73fb      	strb	r3, [r7, #15]
		pie++;
 801268e:	7ffb      	ldrb	r3, [r7, #31]
 8012690:	3301      	adds	r3, #1
 8012692:	77fb      	strb	r3, [r7, #31]
		pieceB = byteToPiece(datamain_old[pie]);
 8012694:	7ffb      	ldrb	r3, [r7, #31]
 8012696:	4a34      	ldr	r2, [pc, #208]	; (8012768 <PushData+0x184>)
 8012698:	5cd3      	ldrb	r3, [r2, r3]
 801269a:	4618      	mov	r0, r3
 801269c:	f000 f9b8 	bl	8012a10 <byteToPiece>
 80126a0:	4603      	mov	r3, r0
 80126a2:	73bb      	strb	r3, [r7, #14]
		pie++;
 80126a4:	7ffb      	ldrb	r3, [r7, #31]
 80126a6:	3301      	adds	r3, #1
 80126a8:	77fb      	strb	r3, [r7, #31]
		queueData[rear][i + 5] = (pieceA << 4) + pieceB;
 80126aa:	7bfb      	ldrb	r3, [r7, #15]
 80126ac:	011b      	lsls	r3, r3, #4
 80126ae:	b2d8      	uxtb	r0, r3
 80126b0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	3305      	adds	r3, #5
 80126b8:	7bb9      	ldrb	r1, [r7, #14]
 80126ba:	4401      	add	r1, r0
 80126bc:	b2cc      	uxtb	r4, r1
 80126be:	4929      	ldr	r1, [pc, #164]	; (8012764 <PushData+0x180>)
 80126c0:	2035      	movs	r0, #53	; 0x35
 80126c2:	fb00 f202 	mul.w	r2, r0, r2
 80126c6:	440a      	add	r2, r1
 80126c8:	4413      	add	r3, r2
 80126ca:	4622      	mov	r2, r4
 80126cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	3301      	adds	r3, #1
 80126d2:	61bb      	str	r3, [r7, #24]
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	2b1f      	cmp	r3, #31
 80126d8:	ddd1      	ble.n	801267e <PushData+0x9a>
	}
	for (int i = 0; i < 14; i++) {
 80126da:	2300      	movs	r3, #0
 80126dc:	617b      	str	r3, [r7, #20]
 80126de:	e012      	b.n	8012706 <PushData+0x122>
		queueData[rear][37 + i] = data_chessclock[i];
 80126e0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	3325      	adds	r3, #37	; 0x25
 80126e8:	4820      	ldr	r0, [pc, #128]	; (801276c <PushData+0x188>)
 80126ea:	6979      	ldr	r1, [r7, #20]
 80126ec:	4401      	add	r1, r0
 80126ee:	780c      	ldrb	r4, [r1, #0]
 80126f0:	491c      	ldr	r1, [pc, #112]	; (8012764 <PushData+0x180>)
 80126f2:	2035      	movs	r0, #53	; 0x35
 80126f4:	fb00 f202 	mul.w	r2, r0, r2
 80126f8:	440a      	add	r2, r1
 80126fa:	4413      	add	r3, r2
 80126fc:	4622      	mov	r2, r4
 80126fe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	3301      	adds	r3, #1
 8012704:	617b      	str	r3, [r7, #20]
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	2b0d      	cmp	r3, #13
 801270a:	dde9      	ble.n	80126e0 <PushData+0xfc>
	}
	crc = CalculateCRC(queueData[rear], 1, 50);
 801270c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012710:	2235      	movs	r2, #53	; 0x35
 8012712:	fb02 f303 	mul.w	r3, r2, r3
 8012716:	4a13      	ldr	r2, [pc, #76]	; (8012764 <PushData+0x180>)
 8012718:	4413      	add	r3, r2
 801271a:	2232      	movs	r2, #50	; 0x32
 801271c:	2101      	movs	r1, #1
 801271e:	4618      	mov	r0, r3
 8012720:	f000 f826 	bl	8012770 <CalculateCRC>
 8012724:	4603      	mov	r3, r0
 8012726:	823b      	strh	r3, [r7, #16]
	queueData[rear][51] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012728:	8a3b      	ldrh	r3, [r7, #16]
 801272a:	0a1b      	lsrs	r3, r3, #8
 801272c:	b29a      	uxth	r2, r3
 801272e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012732:	b2d0      	uxtb	r0, r2
 8012734:	4a0b      	ldr	r2, [pc, #44]	; (8012764 <PushData+0x180>)
 8012736:	2135      	movs	r1, #53	; 0x35
 8012738:	fb01 f303 	mul.w	r3, r1, r3
 801273c:	4413      	add	r3, r2
 801273e:	3333      	adds	r3, #51	; 0x33
 8012740:	4602      	mov	r2, r0
 8012742:	701a      	strb	r2, [r3, #0]
	queueData[rear][52] = (uint8_t) (crc & 0x00FF);
 8012744:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012748:	8a3a      	ldrh	r2, [r7, #16]
 801274a:	b2d0      	uxtb	r0, r2
 801274c:	4a05      	ldr	r2, [pc, #20]	; (8012764 <PushData+0x180>)
 801274e:	2135      	movs	r1, #53	; 0x35
 8012750:	fb01 f303 	mul.w	r3, r1, r3
 8012754:	4413      	add	r3, r2
 8012756:	3334      	adds	r3, #52	; 0x34
 8012758:	4602      	mov	r2, r0
 801275a:	701a      	strb	r2, [r3, #0]
}
 801275c:	bf00      	nop
 801275e:	3724      	adds	r7, #36	; 0x24
 8012760:	46bd      	mov	sp, r7
 8012762:	bd90      	pop	{r4, r7, pc}
 8012764:	2000b088 	.word	0x2000b088
 8012768:	2000aeec 	.word	0x2000aeec
 801276c:	20009c5c 	.word	0x20009c5c

08012770 <CalculateCRC>:
{
	return ((uint32_t)byteA)*64516 +  ((uint32_t)byteB)*254 +  (uint32_t)byteC;
}

uint16_t CalculateCRC(uint8_t* buffer,uint16_t offset,uint16_t count)
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	460b      	mov	r3, r1
 801277a:	807b      	strh	r3, [r7, #2]
 801277c:	4613      	mov	r3, r2
 801277e:	803b      	strh	r3, [r7, #0]
	uint16_t crc = 0xFFFF;
 8012780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012784:	81fb      	strh	r3, [r7, #14]

	for(uint16_t j=offset;j<(count+offset);j++)
 8012786:	887b      	ldrh	r3, [r7, #2]
 8012788:	81bb      	strh	r3, [r7, #12]
 801278a:	e026      	b.n	80127da <CalculateCRC+0x6a>
	{
		crc ^= (uint16_t)buffer[j];
 801278c:	89bb      	ldrh	r3, [r7, #12]
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	4413      	add	r3, r2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	b29a      	uxth	r2, r3
 8012796:	89fb      	ldrh	r3, [r7, #14]
 8012798:	4053      	eors	r3, r2
 801279a:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 801279c:	2300      	movs	r3, #0
 801279e:	60bb      	str	r3, [r7, #8]
 80127a0:	e015      	b.n	80127ce <CalculateCRC+0x5e>
		{
			if ((crc & 0x0001) != 0)
 80127a2:	89fb      	ldrh	r3, [r7, #14]
 80127a4:	f003 0301 	and.w	r3, r3, #1
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00a      	beq.n	80127c2 <CalculateCRC+0x52>
			{
				crc >>= 1;
 80127ac:	89fb      	ldrh	r3, [r7, #14]
 80127ae:	085b      	lsrs	r3, r3, #1
 80127b0:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80127b2:	89fb      	ldrh	r3, [r7, #14]
 80127b4:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80127b8:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80127bc:	43db      	mvns	r3, r3
 80127be:	81fb      	strh	r3, [r7, #14]
 80127c0:	e002      	b.n	80127c8 <CalculateCRC+0x58>
			}
			else
			{
				crc >>= 1;
 80127c2:	89fb      	ldrh	r3, [r7, #14]
 80127c4:	085b      	lsrs	r3, r3, #1
 80127c6:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	3301      	adds	r3, #1
 80127cc:	60bb      	str	r3, [r7, #8]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b07      	cmp	r3, #7
 80127d2:	dde6      	ble.n	80127a2 <CalculateCRC+0x32>
	for(uint16_t j=offset;j<(count+offset);j++)
 80127d4:	89bb      	ldrh	r3, [r7, #12]
 80127d6:	3301      	adds	r3, #1
 80127d8:	81bb      	strh	r3, [r7, #12]
 80127da:	89ba      	ldrh	r2, [r7, #12]
 80127dc:	8839      	ldrh	r1, [r7, #0]
 80127de:	887b      	ldrh	r3, [r7, #2]
 80127e0:	440b      	add	r3, r1
 80127e2:	429a      	cmp	r2, r3
 80127e4:	dbd2      	blt.n	801278c <CalculateCRC+0x1c>
			}
		}
	}
	return crc;
 80127e6:	89fb      	ldrh	r3, [r7, #14]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <getMarkSq>:
		18,16,16,16,16,16,16,16,	//3
		18,16,16,16,16,16,16,16,	//2
		5,16,16,16,16,16,16, 8};	//1
//       a  b  c  d  e  f  g  h

uint8_t getMarkSq(uint8_t type,uint8_t squamark){
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	4603      	mov	r3, r0
 80127fc:	460a      	mov	r2, r1
 80127fe:	71fb      	strb	r3, [r7, #7]
 8012800:	4613      	mov	r3, r2
 8012802:	71bb      	strb	r3, [r7, #6]
	uint8_t pulses_mark=0;
 8012804:	2300      	movs	r3, #0
 8012806:	73fb      	strb	r3, [r7, #15]
	switch(type){
 8012808:	79fb      	ldrb	r3, [r7, #7]
 801280a:	2b11      	cmp	r3, #17
 801280c:	f200 8082 	bhi.w	8012914 <getMarkSq+0x120>
 8012810:	a201      	add	r2, pc, #4	; (adr r2, 8012818 <getMarkSq+0x24>)
 8012812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012816:	bf00      	nop
 8012818:	08012861 	.word	0x08012861
 801281c:	0801286b 	.word	0x0801286b
 8012820:	08012875 	.word	0x08012875
 8012824:	0801287f 	.word	0x0801287f
 8012828:	08012889 	.word	0x08012889
 801282c:	08012893 	.word	0x08012893
 8012830:	0801289d 	.word	0x0801289d
 8012834:	080128a7 	.word	0x080128a7
 8012838:	080128b1 	.word	0x080128b1
 801283c:	080128bb 	.word	0x080128bb
 8012840:	080128c5 	.word	0x080128c5
 8012844:	080128cf 	.word	0x080128cf
 8012848:	080128d9 	.word	0x080128d9
 801284c:	080128e3 	.word	0x080128e3
 8012850:	080128ed 	.word	0x080128ed
 8012854:	080128f7 	.word	0x080128f7
 8012858:	08012901 	.word	0x08012901
 801285c:	0801290b 	.word	0x0801290b
	case 0:pulses_mark = mark_pulse0[squamark]; break;
 8012860:	79bb      	ldrb	r3, [r7, #6]
 8012862:	4a30      	ldr	r2, [pc, #192]	; (8012924 <getMarkSq+0x130>)
 8012864:	5cd3      	ldrb	r3, [r2, r3]
 8012866:	73fb      	strb	r3, [r7, #15]
 8012868:	e054      	b.n	8012914 <getMarkSq+0x120>
	case 1:pulses_mark = mark_pulse1[squamark]; break;
 801286a:	79bb      	ldrb	r3, [r7, #6]
 801286c:	4a2e      	ldr	r2, [pc, #184]	; (8012928 <getMarkSq+0x134>)
 801286e:	5cd3      	ldrb	r3, [r2, r3]
 8012870:	73fb      	strb	r3, [r7, #15]
 8012872:	e04f      	b.n	8012914 <getMarkSq+0x120>
	case 2:pulses_mark = mark_pulse2[squamark]; break;
 8012874:	79bb      	ldrb	r3, [r7, #6]
 8012876:	4a2d      	ldr	r2, [pc, #180]	; (801292c <getMarkSq+0x138>)
 8012878:	5cd3      	ldrb	r3, [r2, r3]
 801287a:	73fb      	strb	r3, [r7, #15]
 801287c:	e04a      	b.n	8012914 <getMarkSq+0x120>
	case 3:pulses_mark = mark_pulse3[squamark]; break;
 801287e:	79bb      	ldrb	r3, [r7, #6]
 8012880:	4a2b      	ldr	r2, [pc, #172]	; (8012930 <getMarkSq+0x13c>)
 8012882:	5cd3      	ldrb	r3, [r2, r3]
 8012884:	73fb      	strb	r3, [r7, #15]
 8012886:	e045      	b.n	8012914 <getMarkSq+0x120>
	case 4:pulses_mark = mark_pulse4[squamark]; break;
 8012888:	79bb      	ldrb	r3, [r7, #6]
 801288a:	4a2a      	ldr	r2, [pc, #168]	; (8012934 <getMarkSq+0x140>)
 801288c:	5cd3      	ldrb	r3, [r2, r3]
 801288e:	73fb      	strb	r3, [r7, #15]
 8012890:	e040      	b.n	8012914 <getMarkSq+0x120>
	case 5:pulses_mark = mark_pulse5[squamark]; break;
 8012892:	79bb      	ldrb	r3, [r7, #6]
 8012894:	4a28      	ldr	r2, [pc, #160]	; (8012938 <getMarkSq+0x144>)
 8012896:	5cd3      	ldrb	r3, [r2, r3]
 8012898:	73fb      	strb	r3, [r7, #15]
 801289a:	e03b      	b.n	8012914 <getMarkSq+0x120>
	case 6:pulses_mark = mark_pulse6[squamark]; break;
 801289c:	79bb      	ldrb	r3, [r7, #6]
 801289e:	4a27      	ldr	r2, [pc, #156]	; (801293c <getMarkSq+0x148>)
 80128a0:	5cd3      	ldrb	r3, [r2, r3]
 80128a2:	73fb      	strb	r3, [r7, #15]
 80128a4:	e036      	b.n	8012914 <getMarkSq+0x120>
	case 7:pulses_mark = mark_pulse7[squamark]; break;
 80128a6:	79bb      	ldrb	r3, [r7, #6]
 80128a8:	4a25      	ldr	r2, [pc, #148]	; (8012940 <getMarkSq+0x14c>)
 80128aa:	5cd3      	ldrb	r3, [r2, r3]
 80128ac:	73fb      	strb	r3, [r7, #15]
 80128ae:	e031      	b.n	8012914 <getMarkSq+0x120>
	case 8:pulses_mark = mark_pulse8[squamark]; break;
 80128b0:	79bb      	ldrb	r3, [r7, #6]
 80128b2:	4a24      	ldr	r2, [pc, #144]	; (8012944 <getMarkSq+0x150>)
 80128b4:	5cd3      	ldrb	r3, [r2, r3]
 80128b6:	73fb      	strb	r3, [r7, #15]
 80128b8:	e02c      	b.n	8012914 <getMarkSq+0x120>
	case 9:pulses_mark = mark_pulse9[squamark]; break;
 80128ba:	79bb      	ldrb	r3, [r7, #6]
 80128bc:	4a22      	ldr	r2, [pc, #136]	; (8012948 <getMarkSq+0x154>)
 80128be:	5cd3      	ldrb	r3, [r2, r3]
 80128c0:	73fb      	strb	r3, [r7, #15]
 80128c2:	e027      	b.n	8012914 <getMarkSq+0x120>
	case 10:pulses_mark = mark_pulse10[squamark]; break;
 80128c4:	79bb      	ldrb	r3, [r7, #6]
 80128c6:	4a21      	ldr	r2, [pc, #132]	; (801294c <getMarkSq+0x158>)
 80128c8:	5cd3      	ldrb	r3, [r2, r3]
 80128ca:	73fb      	strb	r3, [r7, #15]
 80128cc:	e022      	b.n	8012914 <getMarkSq+0x120>
	case 11:pulses_mark = mark_pulse11[squamark]; break;
 80128ce:	79bb      	ldrb	r3, [r7, #6]
 80128d0:	4a1f      	ldr	r2, [pc, #124]	; (8012950 <getMarkSq+0x15c>)
 80128d2:	5cd3      	ldrb	r3, [r2, r3]
 80128d4:	73fb      	strb	r3, [r7, #15]
 80128d6:	e01d      	b.n	8012914 <getMarkSq+0x120>
	case 12:pulses_mark = mark_pulse12[squamark]; break;
 80128d8:	79bb      	ldrb	r3, [r7, #6]
 80128da:	4a1e      	ldr	r2, [pc, #120]	; (8012954 <getMarkSq+0x160>)
 80128dc:	5cd3      	ldrb	r3, [r2, r3]
 80128de:	73fb      	strb	r3, [r7, #15]
 80128e0:	e018      	b.n	8012914 <getMarkSq+0x120>
	case 13:pulses_mark = mark_pulse13[squamark]; break;
 80128e2:	79bb      	ldrb	r3, [r7, #6]
 80128e4:	4a1c      	ldr	r2, [pc, #112]	; (8012958 <getMarkSq+0x164>)
 80128e6:	5cd3      	ldrb	r3, [r2, r3]
 80128e8:	73fb      	strb	r3, [r7, #15]
 80128ea:	e013      	b.n	8012914 <getMarkSq+0x120>
	case 14:pulses_mark = mark_pulse14[squamark]; break;
 80128ec:	79bb      	ldrb	r3, [r7, #6]
 80128ee:	4a1b      	ldr	r2, [pc, #108]	; (801295c <getMarkSq+0x168>)
 80128f0:	5cd3      	ldrb	r3, [r2, r3]
 80128f2:	73fb      	strb	r3, [r7, #15]
 80128f4:	e00e      	b.n	8012914 <getMarkSq+0x120>
	case 15:pulses_mark = mark_pulse15[squamark]; break;
 80128f6:	79bb      	ldrb	r3, [r7, #6]
 80128f8:	4a19      	ldr	r2, [pc, #100]	; (8012960 <getMarkSq+0x16c>)
 80128fa:	5cd3      	ldrb	r3, [r2, r3]
 80128fc:	73fb      	strb	r3, [r7, #15]
 80128fe:	e009      	b.n	8012914 <getMarkSq+0x120>
	case 16:pulses_mark = mark_pulse16[squamark]; break;
 8012900:	79bb      	ldrb	r3, [r7, #6]
 8012902:	4a18      	ldr	r2, [pc, #96]	; (8012964 <getMarkSq+0x170>)
 8012904:	5cd3      	ldrb	r3, [r2, r3]
 8012906:	73fb      	strb	r3, [r7, #15]
 8012908:	e004      	b.n	8012914 <getMarkSq+0x120>
	case 17:pulses_mark = mark_pulse17[squamark]; break;
 801290a:	79bb      	ldrb	r3, [r7, #6]
 801290c:	4a16      	ldr	r2, [pc, #88]	; (8012968 <getMarkSq+0x174>)
 801290e:	5cd3      	ldrb	r3, [r2, r3]
 8012910:	73fb      	strb	r3, [r7, #15]
 8012912:	bf00      	nop
	}
	return pulses_mark;
 8012914:	7bfb      	ldrb	r3, [r7, #15]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3714      	adds	r7, #20
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	080139e0 	.word	0x080139e0
 8012928:	080139a0 	.word	0x080139a0
 801292c:	08013960 	.word	0x08013960
 8012930:	08013920 	.word	0x08013920
 8012934:	080138e0 	.word	0x080138e0
 8012938:	080138a0 	.word	0x080138a0
 801293c:	08013860 	.word	0x08013860
 8012940:	08013820 	.word	0x08013820
 8012944:	080137e0 	.word	0x080137e0
 8012948:	080137a0 	.word	0x080137a0
 801294c:	08013760 	.word	0x08013760
 8012950:	08013720 	.word	0x08013720
 8012954:	080136e0 	.word	0x080136e0
 8012958:	080136a0 	.word	0x080136a0
 801295c:	08013660 	.word	0x08013660
 8012960:	08013620 	.word	0x08013620
 8012964:	080135e0 	.word	0x080135e0
 8012968:	080135a0 	.word	0x080135a0

0801296c <HAL_UARTEx_RxEventCallback>:
	uint8_t dataUsbCalibase[263];
	extern uint16_t datapieces[18][64][2];  	// 18-type 	64-square	2-period+length
	extern uint8_t datamain[64];				// chứa dữ liệu chính của pieces
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	460b      	mov	r3, r1
 8012976:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a0b      	ldr	r2, [pc, #44]	; (80129ac <HAL_UARTEx_RxEventCallback+0x40>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d10f      	bne.n	80129a2 <HAL_UARTEx_RxEventCallback+0x36>
		uart1_data_length=Size;
 8012982:	887b      	ldrh	r3, [r7, #2]
 8012984:	b2da      	uxtb	r2, r3
 8012986:	4b0a      	ldr	r3, [pc, #40]	; (80129b0 <HAL_UARTEx_RxEventCallback+0x44>)
 8012988:	701a      	strb	r2, [r3, #0]
		AnalyserCMD(uart1_rx_buf,uart1_data_length, RS485);
 801298a:	4b09      	ldr	r3, [pc, #36]	; (80129b0 <HAL_UARTEx_RxEventCallback+0x44>)
 801298c:	781b      	ldrb	r3, [r3, #0]
 801298e:	2200      	movs	r2, #0
 8012990:	4619      	mov	r1, r3
 8012992:	4808      	ldr	r0, [pc, #32]	; (80129b4 <HAL_UARTEx_RxEventCallback+0x48>)
 8012994:	f000 f8ae 	bl	8012af4 <AnalyserCMD>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012998:	2220      	movs	r2, #32
 801299a:	4906      	ldr	r1, [pc, #24]	; (80129b4 <HAL_UARTEx_RxEventCallback+0x48>)
 801299c:	4806      	ldr	r0, [pc, #24]	; (80129b8 <HAL_UARTEx_RxEventCallback+0x4c>)
 801299e:	f7f7 fb0e 	bl	8009fbe <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80129a2:	bf00      	nop
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	40011000 	.word	0x40011000
 80129b0:	2000b4d0 	.word	0x2000b4d0
 80129b4:	2000b4b0 	.word	0x2000b4b0
 80129b8:	200049dc 	.word	0x200049dc

080129bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	4a04      	ldr	r2, [pc, #16]	; (80129dc <HAL_UART_ErrorCallback+0x20>)
 80129ca:	4293      	cmp	r3, r2
 80129cc:	d101      	bne.n	80129d2 <HAL_UART_ErrorCallback+0x16>
		HAL_NVIC_SystemReset();
 80129ce:	f7ef fbe8 	bl	80021a2 <HAL_NVIC_SystemReset>
	}
}
 80129d2:	bf00      	nop
 80129d4:	3708      	adds	r7, #8
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
 80129da:	bf00      	nop
 80129dc:	40011000 	.word	0x40011000

080129e0 <initReceiverUart>:

void initReceiverUart(){
 80129e0:	b580      	push	{r7, lr}
 80129e2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 80129e4:	2220      	movs	r2, #32
 80129e6:	4907      	ldr	r1, [pc, #28]	; (8012a04 <initReceiverUart+0x24>)
 80129e8:	4807      	ldr	r0, [pc, #28]	; (8012a08 <initReceiverUart+0x28>)
 80129ea:	f7f7 fae8 	bl	8009fbe <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80129ee:	4b07      	ldr	r3, [pc, #28]	; (8012a0c <initReceiverUart+0x2c>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	4b05      	ldr	r3, [pc, #20]	; (8012a0c <initReceiverUart+0x2c>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f022 0208 	bic.w	r2, r2, #8
 80129fc:	601a      	str	r2, [r3, #0]
}
 80129fe:	bf00      	nop
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	2000b4b0 	.word	0x2000b4b0
 8012a08:	200049dc 	.word	0x200049dc
 8012a0c:	20004a20 	.word	0x20004a20

08012a10 <byteToPiece>:
 *  xxxx: 0->12 piece A
 *  yyyy: 0->12 piece B
 *  0:EMTY, 1:WKING, 2:WQUEEN, 3:WBISHOP, 4:WKNIGHT, 5:WROOK, 6:WPAWN,
 *  		7:BKING, 8:BQUEEN, 9:BBISHOP,10:BKNIGHT,11:BROOK,12:BPAWN.
 * 		*/
uint8_t byteToPiece(uint8_t piece){
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	4603      	mov	r3, r0
 8012a18:	71fb      	strb	r3, [r7, #7]
	uint8_t pi;
	switch(piece){
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	2b12      	cmp	r3, #18
 8012a1e:	d862      	bhi.n	8012ae6 <byteToPiece+0xd6>
 8012a20:	a201      	add	r2, pc, #4	; (adr r2, 8012a28 <byteToPiece+0x18>)
 8012a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a26:	bf00      	nop
 8012a28:	08012a75 	.word	0x08012a75
 8012a2c:	08012a7b 	.word	0x08012a7b
 8012a30:	08012a81 	.word	0x08012a81
 8012a34:	08012a87 	.word	0x08012a87
 8012a38:	08012a8d 	.word	0x08012a8d
 8012a3c:	08012a93 	.word	0x08012a93
 8012a40:	08012a99 	.word	0x08012a99
 8012a44:	08012a9f 	.word	0x08012a9f
 8012a48:	08012aa5 	.word	0x08012aa5
 8012a4c:	08012aab 	.word	0x08012aab
 8012a50:	08012ab1 	.word	0x08012ab1
 8012a54:	08012ab7 	.word	0x08012ab7
 8012a58:	08012abd 	.word	0x08012abd
 8012a5c:	08012ac3 	.word	0x08012ac3
 8012a60:	08012ac9 	.word	0x08012ac9
 8012a64:	08012acf 	.word	0x08012acf
 8012a68:	08012ad5 	.word	0x08012ad5
 8012a6c:	08012adb 	.word	0x08012adb
 8012a70:	08012ae1 	.word	0x08012ae1
	case 0: pi=EMTY;	break;
 8012a74:	2300      	movs	r3, #0
 8012a76:	73fb      	strb	r3, [r7, #15]
 8012a78:	e035      	b.n	8012ae6 <byteToPiece+0xd6>
	case 1: pi=WKING; 	break;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	73fb      	strb	r3, [r7, #15]
 8012a7e:	e032      	b.n	8012ae6 <byteToPiece+0xd6>
	case 2: pi=WQUEEN; 	break;
 8012a80:	2302      	movs	r3, #2
 8012a82:	73fb      	strb	r3, [r7, #15]
 8012a84:	e02f      	b.n	8012ae6 <byteToPiece+0xd6>
	case 3: pi=WBISHOP; break;
 8012a86:	2303      	movs	r3, #3
 8012a88:	73fb      	strb	r3, [r7, #15]
 8012a8a:	e02c      	b.n	8012ae6 <byteToPiece+0xd6>
	case 4: pi=WKNIGHT; break;
 8012a8c:	2304      	movs	r3, #4
 8012a8e:	73fb      	strb	r3, [r7, #15]
 8012a90:	e029      	b.n	8012ae6 <byteToPiece+0xd6>
	case 5: pi=WROOK; 	break;
 8012a92:	2305      	movs	r3, #5
 8012a94:	73fb      	strb	r3, [r7, #15]
 8012a96:	e026      	b.n	8012ae6 <byteToPiece+0xd6>
	case 6: pi=BKING; 	break;
 8012a98:	2307      	movs	r3, #7
 8012a9a:	73fb      	strb	r3, [r7, #15]
 8012a9c:	e023      	b.n	8012ae6 <byteToPiece+0xd6>
	case 7: pi=BQUEEN; 	break;
 8012a9e:	2308      	movs	r3, #8
 8012aa0:	73fb      	strb	r3, [r7, #15]
 8012aa2:	e020      	b.n	8012ae6 <byteToPiece+0xd6>
	case 8: pi=BBISHOP; break;
 8012aa4:	2309      	movs	r3, #9
 8012aa6:	73fb      	strb	r3, [r7, #15]
 8012aa8:	e01d      	b.n	8012ae6 <byteToPiece+0xd6>
	case 9: pi=BKNIGHT; break;
 8012aaa:	230a      	movs	r3, #10
 8012aac:	73fb      	strb	r3, [r7, #15]
 8012aae:	e01a      	b.n	8012ae6 <byteToPiece+0xd6>
	case 10:pi=BROOK; 	break;
 8012ab0:	230b      	movs	r3, #11
 8012ab2:	73fb      	strb	r3, [r7, #15]
 8012ab4:	e017      	b.n	8012ae6 <byteToPiece+0xd6>
	case 11:pi=BPAWN; 	break;
 8012ab6:	230c      	movs	r3, #12
 8012ab8:	73fb      	strb	r3, [r7, #15]
 8012aba:	e014      	b.n	8012ae6 <byteToPiece+0xd6>
	case 12:pi=BPAWN; 	break;
 8012abc:	230c      	movs	r3, #12
 8012abe:	73fb      	strb	r3, [r7, #15]
 8012ac0:	e011      	b.n	8012ae6 <byteToPiece+0xd6>
	case 13:pi=BPAWN; 	break;
 8012ac2:	230c      	movs	r3, #12
 8012ac4:	73fb      	strb	r3, [r7, #15]
 8012ac6:	e00e      	b.n	8012ae6 <byteToPiece+0xd6>
	case 14:pi=BPAWN; 	break;
 8012ac8:	230c      	movs	r3, #12
 8012aca:	73fb      	strb	r3, [r7, #15]
 8012acc:	e00b      	b.n	8012ae6 <byteToPiece+0xd6>
	case 15:pi=WPAWN; 	break;
 8012ace:	2306      	movs	r3, #6
 8012ad0:	73fb      	strb	r3, [r7, #15]
 8012ad2:	e008      	b.n	8012ae6 <byteToPiece+0xd6>
	case 16:pi=WPAWN; 	break;
 8012ad4:	2306      	movs	r3, #6
 8012ad6:	73fb      	strb	r3, [r7, #15]
 8012ad8:	e005      	b.n	8012ae6 <byteToPiece+0xd6>
	case 17:pi=WPAWN; 	break;
 8012ada:	2306      	movs	r3, #6
 8012adc:	73fb      	strb	r3, [r7, #15]
 8012ade:	e002      	b.n	8012ae6 <byteToPiece+0xd6>
	case 18:pi=WPAWN; 	break;
 8012ae0:	2306      	movs	r3, #6
 8012ae2:	73fb      	strb	r3, [r7, #15]
 8012ae4:	bf00      	nop
	}
	return pi;
 8012ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3714      	adds	r7, #20
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <AnalyserCMD>:

/*phân tích dữ liệu nhận được */


void AnalyserCMD(uint8_t *data,uint8_t length,TypeConnection typeconnect )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b086      	sub	sp, #24
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
 8012b00:	4613      	mov	r3, r2
 8012b02:	70bb      	strb	r3, [r7, #2]
	uint16_t crc;
	uint8_t crcval[2];
#ifdef CALIBASE
	if(data[0]==CMD_ENABLE_CALIBASE_MODE){ // Enable Calibase Mode
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b63      	cmp	r3, #99	; 0x63
 8012b0a:	d106      	bne.n	8012b1a <AnalyserCMD+0x26>
		isCalibaseMode = true;
 8012b0c:	4b7a      	ldr	r3, [pc, #488]	; (8012cf8 <AnalyserCMD+0x204>)
 8012b0e:	2201      	movs	r2, #1
 8012b10:	701a      	strb	r2, [r3, #0]
		typeCalibaseConnect = typeconnect;
 8012b12:	4a7a      	ldr	r2, [pc, #488]	; (8012cfc <AnalyserCMD+0x208>)
 8012b14:	78bb      	ldrb	r3, [r7, #2]
 8012b16:	7013      	strb	r3, [r2, #0]
 8012b18:	e033      	b.n	8012b82 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_CALIBASE_SET_TYPE){  // Calibase Code: 'C' + 'Type'
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	2b43      	cmp	r3, #67	; 0x43
 8012b20:	d104      	bne.n	8012b2c <AnalyserCMD+0x38>
		calibase_type = data[1];
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	785a      	ldrb	r2, [r3, #1]
 8012b26:	4b76      	ldr	r3, [pc, #472]	; (8012d00 <AnalyserCMD+0x20c>)
 8012b28:	701a      	strb	r2, [r3, #0]
 8012b2a:	e02a      	b.n	8012b82 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_SET_REAL_TIME){
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b54      	cmp	r3, #84	; 0x54
 8012b32:	d119      	bne.n	8012b68 <AnalyserCMD+0x74>
		uint8_t datatime[6];
		for(int i=0;i<6;i++){
 8012b34:	2300      	movs	r3, #0
 8012b36:	617b      	str	r3, [r7, #20]
 8012b38:	e00d      	b.n	8012b56 <AnalyserCMD+0x62>
			datatime[i] = data[i+1];
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	4413      	add	r3, r2
 8012b42:	7819      	ldrb	r1, [r3, #0]
 8012b44:	f107 0208 	add.w	r2, r7, #8
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	460a      	mov	r2, r1
 8012b4e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<6;i++){
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	3301      	adds	r3, #1
 8012b54:	617b      	str	r3, [r7, #20]
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2b05      	cmp	r3, #5
 8012b5a:	ddee      	ble.n	8012b3a <AnalyserCMD+0x46>
		}
		RTC_SetTime(datatime);
 8012b5c:	f107 0308 	add.w	r3, r7, #8
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fe ff69 	bl	8011a38 <RTC_SetTime>
 8012b66:	e00c      	b.n	8012b82 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_READ_REAL_TIME){
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	2b74      	cmp	r3, #116	; 0x74
 8012b6e:	d102      	bne.n	8012b76 <AnalyserCMD+0x82>
		UsbSendDateTime();
 8012b70:	f000 fb00 	bl	8013174 <UsbSendDateTime>
 8012b74:	e005      	b.n	8012b82 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_FRAM_ERASE){
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	2b45      	cmp	r3, #69	; 0x45
 8012b7c:	d101      	bne.n	8012b82 <AnalyserCMD+0x8e>
		MB85RS_erase();
 8012b7e:	f7fe fd3b 	bl	80115f8 <MB85RS_erase>
	}
	if(isCalibaseMode) return;
 8012b82:	4b5d      	ldr	r3, [pc, #372]	; (8012cf8 <AnalyserCMD+0x204>)
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	f040 80ac 	bne.w	8012ce4 <AnalyserCMD+0x1f0>
#endif

	/* kiểm tra khớp địa chỉ */
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f040 80a8 	bne.w	8012ce8 <AnalyserCMD+0x1f4>
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3302      	adds	r3, #2
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f040 80a2 	bne.w	8012ce8 <AnalyserCMD+0x1f4>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3303      	adds	r3, #3
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	2b24      	cmp	r3, #36	; 0x24
 8012bac:	f040 809c 	bne.w	8012ce8 <AnalyserCMD+0x1f4>
	/* Kiểm tra CRC */
	if(length==7)	// các lệnh Get có độ dài 7byte
 8012bb0:	78fb      	ldrb	r3, [r7, #3]
 8012bb2:	2b07      	cmp	r3, #7
 8012bb4:	d11c      	bne.n	8012bf0 <AnalyserCMD+0xfc>
	{
		crc = CalculateCRC(data, 1, 4);
 8012bb6:	2204      	movs	r2, #4
 8012bb8:	2101      	movs	r1, #1
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7ff fdd8 	bl	8012770 <CalculateCRC>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012bc4:	8a7b      	ldrh	r3, [r7, #18]
 8012bc6:	0a1b      	lsrs	r3, r3, #8
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012bce:	8a7b      	ldrh	r3, [r7, #18]
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012bd4:	7c3a      	ldrb	r2, [r7, #16]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	3305      	adds	r3, #5
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	f040 8085 	bne.w	8012cec <AnalyserCMD+0x1f8>
 8012be2:	7c7a      	ldrb	r2, [r7, #17]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	3306      	adds	r3, #6
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d01e      	beq.n	8012c2c <AnalyserCMD+0x138>
 8012bee:	e07d      	b.n	8012cec <AnalyserCMD+0x1f8>
	}else if(length==13) // lệnh Set Time RTC có độ dài 13 byte
 8012bf0:	78fb      	ldrb	r3, [r7, #3]
 8012bf2:	2b0d      	cmp	r3, #13
 8012bf4:	d11a      	bne.n	8012c2c <AnalyserCMD+0x138>
	{
		crc = CalculateCRC(data, 1, 10);
 8012bf6:	220a      	movs	r2, #10
 8012bf8:	2101      	movs	r1, #1
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fdb8 	bl	8012770 <CalculateCRC>
 8012c00:	4603      	mov	r3, r0
 8012c02:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012c04:	8a7b      	ldrh	r3, [r7, #18]
 8012c06:	0a1b      	lsrs	r3, r3, #8
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012c0e:	8a7b      	ldrh	r3, [r7, #18]
 8012c10:	b2db      	uxtb	r3, r3
 8012c12:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012c14:	7c3a      	ldrb	r2, [r7, #16]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	330b      	adds	r3, #11
 8012c1a:	781b      	ldrb	r3, [r3, #0]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d167      	bne.n	8012cf0 <AnalyserCMD+0x1fc>
 8012c20:	7c7a      	ldrb	r2, [r7, #17]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	330c      	adds	r3, #12
 8012c26:	781b      	ldrb	r3, [r3, #0]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d161      	bne.n	8012cf0 <AnalyserCMD+0x1fc>
	}

	if(data[4]==CMD_CHECKBOARD)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	3304      	adds	r3, #4
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	2b31      	cmp	r3, #49	; 0x31
 8012c34:	d104      	bne.n	8012c40 <AnalyserCMD+0x14c>
	{
		Response_CheckAddress(typeconnect);
 8012c36:	78bb      	ldrb	r3, [r7, #2]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 f869 	bl	8012d10 <Response_CheckAddress>
 8012c3e:	e058      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	}else if(data[4]==CMD_GETBOARDREVIEW)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	3304      	adds	r3, #4
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	2b32      	cmp	r3, #50	; 0x32
 8012c48:	d118      	bne.n	8012c7c <AnalyserCMD+0x188>
	{
		globalMode  = MODE_REVIEW;
 8012c4a:	4b2e      	ldr	r3, [pc, #184]	; (8012d04 <AnalyserCMD+0x210>)
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	701a      	strb	r2, [r3, #0]
		if(HAL_GetTick()- lastCmdReview >1000){
 8012c50:	f7ef f97e 	bl	8001f50 <HAL_GetTick>
 8012c54:	4602      	mov	r2, r0
 8012c56:	4b2c      	ldr	r3, [pc, #176]	; (8012d08 <AnalyserCMD+0x214>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	1ad3      	subs	r3, r2, r3
 8012c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012c60:	d902      	bls.n	8012c68 <AnalyserCMD+0x174>
			flagReviewFullData = true;
 8012c62:	4b2a      	ldr	r3, [pc, #168]	; (8012d0c <AnalyserCMD+0x218>)
 8012c64:	2201      	movs	r2, #1
 8012c66:	701a      	strb	r2, [r3, #0]
		}
		lastCmdReview = HAL_GetTick();
 8012c68:	f7ef f972 	bl	8001f50 <HAL_GetTick>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	4a26      	ldr	r2, [pc, #152]	; (8012d08 <AnalyserCMD+0x214>)
 8012c70:	6013      	str	r3, [r2, #0]
		Responce_GetBoardReview(typeconnect);
 8012c72:	78bb      	ldrb	r3, [r7, #2]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f000 f893 	bl	8012da0 <Responce_GetBoardReview>
 8012c7a:	e03a      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_GETBOARDRECORDING)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3304      	adds	r3, #4
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b33      	cmp	r3, #51	; 0x33
 8012c84:	d10d      	bne.n	8012ca2 <AnalyserCMD+0x1ae>
	{
		if(globalMode==MODE_REVIEW) // nếu mode trước đó là review thì clear queue data
 8012c86:	4b1f      	ldr	r3, [pc, #124]	; (8012d04 <AnalyserCMD+0x210>)
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d101      	bne.n	8012c92 <AnalyserCMD+0x19e>
		{
			QueueClear();
 8012c8e:	f7fe febd 	bl	8011a0c <QueueClear>
		}
		globalMode = MODE_RECORDING;
 8012c92:	4b1c      	ldr	r3, [pc, #112]	; (8012d04 <AnalyserCMD+0x210>)
 8012c94:	2201      	movs	r2, #1
 8012c96:	701a      	strb	r2, [r3, #0]
		Responce_GetBoardRecording(typeconnect);
 8012c98:	78bb      	ldrb	r3, [r7, #2]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f000 f960 	bl	8012f60 <Responce_GetBoardRecording>
 8012ca0:	e027      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_SETTIMERTC)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b34      	cmp	r3, #52	; 0x34
 8012caa:	d103      	bne.n	8012cb4 <AnalyserCMD+0x1c0>
	{
		Responce_SetTimeRTC(data);
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 f9e1 	bl	8013074 <Responce_SetTimeRTC>
 8012cb2:	e01e      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	}else if(data[4] >= CMD_GETGAMESAVEBASE){
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	2b40      	cmp	r3, #64	; 0x40
 8012cbc:	d90a      	bls.n	8012cd4 <AnalyserCMD+0x1e0>
		Responce_GetDataGameSave(typeconnect,data[4]-CMD_GETGAMESAVEBASE);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	3304      	adds	r3, #4
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	3b41      	subs	r3, #65	; 0x41
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	78bb      	ldrb	r3, [r7, #2]
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 f9f3 	bl	80130b8 <Responce_GetDataGameSave>
 8012cd2:	e00e      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_ERASEALLGAME){
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b37      	cmp	r3, #55	; 0x37
 8012cdc:	d109      	bne.n	8012cf2 <AnalyserCMD+0x1fe>
		Responce_EraseGameSave();
 8012cde:	f000 fa43 	bl	8013168 <Responce_EraseGameSave>
 8012ce2:	e006      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	if(isCalibaseMode) return;
 8012ce4:	bf00      	nop
 8012ce6:	e004      	b.n	8012cf2 <AnalyserCMD+0x1fe>
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012ce8:	bf00      	nop
 8012cea:	e002      	b.n	8012cf2 <AnalyserCMD+0x1fe>
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012cec:	bf00      	nop
 8012cee:	e000      	b.n	8012cf2 <AnalyserCMD+0x1fe>
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012cf0:	bf00      	nop
	}
}
 8012cf2:	3718      	adds	r7, #24
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}
 8012cf8:	2000b4d9 	.word	0x2000b4d9
 8012cfc:	20000102 	.word	0x20000102
 8012d00:	2000b4d8 	.word	0x2000b4d8
 8012d04:	2000b4d1 	.word	0x2000b4d1
 8012d08:	2000b4d4 	.word	0x2000b4d4
 8012d0c:	20000101 	.word	0x20000101

08012d10 <Response_CheckAddress>:


void Response_CheckAddress(TypeConnection typeconnect)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	4603      	mov	r3, r0
 8012d18:	71fb      	strb	r3, [r7, #7]
	uint8_t data[7];
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8012d1a:	233a      	movs	r3, #58	; 0x3a
 8012d1c:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 8012d22:	2300      	movs	r3, #0
 8012d24:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 8012d26:	2324      	movs	r3, #36	; 0x24
 8012d28:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_CHECKBOARD;
 8012d2a:	2331      	movs	r3, #49	; 0x31
 8012d2c:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 8012d2e:	f107 030c 	add.w	r3, r7, #12
 8012d32:	2204      	movs	r2, #4
 8012d34:	2101      	movs	r1, #1
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ff fd1a 	bl	8012770 <CalculateCRC>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	82fb      	strh	r3, [r7, #22]
	data[5] = (uint8_t)((crc & 0xFF00)>>8);
 8012d40:	8afb      	ldrh	r3, [r7, #22]
 8012d42:	0a1b      	lsrs	r3, r3, #8
 8012d44:	b29b      	uxth	r3, r3
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(crc & 0x00FF);
 8012d4a:	8afb      	ldrh	r3, [r7, #22]
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	74bb      	strb	r3, [r7, #18]

	if(typeconnect ==RS485){
 8012d50:	79fb      	ldrb	r3, [r7, #7]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d112      	bne.n	8012d7c <Response_CheckAddress+0x6c>
		RS485_TX_ENA;
 8012d56:	2201      	movs	r2, #1
 8012d58:	2101      	movs	r1, #1
 8012d5a:	480f      	ldr	r0, [pc, #60]	; (8012d98 <Response_CheckAddress+0x88>)
 8012d5c:	f7ef ffc6 	bl	8002cec <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, data, 7,1000);
 8012d60:	f107 010c 	add.w	r1, r7, #12
 8012d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d68:	2207      	movs	r2, #7
 8012d6a:	480c      	ldr	r0, [pc, #48]	; (8012d9c <Response_CheckAddress+0x8c>)
 8012d6c:	f7f7 f895 	bl	8009e9a <HAL_UART_Transmit>
		RS485_TX_DIS;
 8012d70:	2200      	movs	r2, #0
 8012d72:	2101      	movs	r1, #1
 8012d74:	4808      	ldr	r0, [pc, #32]	; (8012d98 <Response_CheckAddress+0x88>)
 8012d76:	f7ef ffb9 	bl	8002cec <HAL_GPIO_WritePin>
	}else if(typeconnect == USB){
		CDC_Transmit_FS(data, 7);
	}else if(typeconnect == BLE){

	}
}
 8012d7a:	e008      	b.n	8012d8e <Response_CheckAddress+0x7e>
	}else if(typeconnect == USB){
 8012d7c:	79fb      	ldrb	r3, [r7, #7]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d105      	bne.n	8012d8e <Response_CheckAddress+0x7e>
		CDC_Transmit_FS(data, 7);
 8012d82:	f107 030c 	add.w	r3, r7, #12
 8012d86:	2107      	movs	r1, #7
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7fd fe8b 	bl	8010aa4 <CDC_Transmit_FS>
}
 8012d8e:	bf00      	nop
 8012d90:	3718      	adds	r7, #24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	40020000 	.word	0x40020000
 8012d9c:	200049dc 	.word	0x200049dc

08012da0 <Responce_GetBoardReview>:
void Responce_GetBoardReview(TypeConnection typeconnect) {
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b094      	sub	sp, #80	; 0x50
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	4603      	mov	r3, r0
 8012da8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[53];
	uint16_t crc;
	uint8_t pieceA,pieceB,pie=0;
 8012daa:	2300      	movs	r3, #0
 8012dac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	data[0] = CMD_BEGIN;
 8012db0:	233a      	movs	r3, #58	; 0x3a
 8012db2:	723b      	strb	r3, [r7, #8]
	data[1] = ADDRESSBOARD_PART0;
 8012db4:	2300      	movs	r3, #0
 8012db6:	727b      	strb	r3, [r7, #9]
	data[2] = ADDRESSBOARD_PART1;
 8012db8:	2300      	movs	r3, #0
 8012dba:	72bb      	strb	r3, [r7, #10]
	data[3] = ADDRESSBOARD_PART2;
 8012dbc:	2324      	movs	r3, #36	; 0x24
 8012dbe:	72fb      	strb	r3, [r7, #11]
	if(data_chessclock[9]==STATUS_DISCONNECT_CLOCK){
 8012dc0:	4b62      	ldr	r3, [pc, #392]	; (8012f4c <Responce_GetBoardReview+0x1ac>)
 8012dc2:	7a5b      	ldrb	r3, [r3, #9]
 8012dc4:	2b37      	cmp	r3, #55	; 0x37
 8012dc6:	d102      	bne.n	8012dce <Responce_GetBoardReview+0x2e>
		data[4] = RES_CHESSCLOCK_DISCONECTED;
 8012dc8:	233b      	movs	r3, #59	; 0x3b
 8012dca:	733b      	strb	r3, [r7, #12]
 8012dcc:	e001      	b.n	8012dd2 <Responce_GetBoardReview+0x32>
	}else{
		data[4] = RES_DATAFENCHANGE;
 8012dce:	2338      	movs	r3, #56	; 0x38
 8012dd0:	733b      	strb	r3, [r7, #12]
	}

	if (flagReviewFullData == true) {
 8012dd2:	4b5f      	ldr	r3, [pc, #380]	; (8012f50 <Responce_GetBoardReview+0x1b0>)
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f000 8081 	beq.w	8012ede <Responce_GetBoardReview+0x13e>
		flagReviewFullData = false;
 8012ddc:	4b5c      	ldr	r3, [pc, #368]	; (8012f50 <Responce_GetBoardReview+0x1b0>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	701a      	strb	r2, [r3, #0]
		/* gắn datamain vào 32 byte tiếp theo */
		for(int i=0;i<32;i++){
 8012de2:	2300      	movs	r3, #0
 8012de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8012de6:	e02e      	b.n	8012e46 <Responce_GetBoardReview+0xa6>
			pieceA = byteToPiece(datamain_old[pie]);
 8012de8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012dec:	4a59      	ldr	r2, [pc, #356]	; (8012f54 <Responce_GetBoardReview+0x1b4>)
 8012dee:	5cd3      	ldrb	r3, [r2, r3]
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff fe0d 	bl	8012a10 <byteToPiece>
 8012df6:	4603      	mov	r3, r0
 8012df8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			pie++;
 8012dfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e00:	3301      	adds	r3, #1
 8012e02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pieceB = byteToPiece(datamain_old[pie]);
 8012e06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e0a:	4a52      	ldr	r2, [pc, #328]	; (8012f54 <Responce_GetBoardReview+0x1b4>)
 8012e0c:	5cd3      	ldrb	r3, [r2, r3]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7ff fdfe 	bl	8012a10 <byteToPiece>
 8012e14:	4603      	mov	r3, r0
 8012e16:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			pie++;
 8012e1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e1e:	3301      	adds	r3, #1
 8012e20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			data[i+5]=(pieceA<<4)+pieceB;
 8012e24:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012e28:	011b      	lsls	r3, r3, #4
 8012e2a:	b2d9      	uxtb	r1, r3
 8012e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e2e:	3305      	adds	r3, #5
 8012e30:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8012e34:	440a      	add	r2, r1
 8012e36:	b2d2      	uxtb	r2, r2
 8012e38:	3350      	adds	r3, #80	; 0x50
 8012e3a:	443b      	add	r3, r7
 8012e3c:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<32;i++){
 8012e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e42:	3301      	adds	r3, #1
 8012e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e48:	2b1f      	cmp	r3, #31
 8012e4a:	ddcd      	ble.n	8012de8 <Responce_GetBoardReview+0x48>
		}
		for(int i=0;i<14;i++)
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8012e50:	e00c      	b.n	8012e6c <Responce_GetBoardReview+0xcc>
		{
			data[37+i] = data_chessclock[i];
 8012e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e54:	3325      	adds	r3, #37	; 0x25
 8012e56:	493d      	ldr	r1, [pc, #244]	; (8012f4c <Responce_GetBoardReview+0x1ac>)
 8012e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e5a:	440a      	add	r2, r1
 8012e5c:	7812      	ldrb	r2, [r2, #0]
 8012e5e:	3350      	adds	r3, #80	; 0x50
 8012e60:	443b      	add	r3, r7
 8012e62:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<14;i++)
 8012e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e68:	3301      	adds	r3, #1
 8012e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8012e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e6e:	2b0d      	cmp	r3, #13
 8012e70:	ddef      	ble.n	8012e52 <Responce_GetBoardReview+0xb2>
		}
		crc = CalculateCRC(data, 1, 50);
 8012e72:	f107 0308 	add.w	r3, r7, #8
 8012e76:	2232      	movs	r2, #50	; 0x32
 8012e78:	2101      	movs	r1, #1
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff fc78 	bl	8012770 <CalculateCRC>
 8012e80:	4603      	mov	r3, r0
 8012e82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			data[51] = (uint8_t)((crc &0xFF00)>>8);
 8012e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e8a:	0a1b      	lsrs	r3, r3, #8
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			data[52] = (uint8_t)(crc &0x00FF);
 8012e94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		if (typeconnect == RS485) {
 8012e9e:	79fb      	ldrb	r3, [r7, #7]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d112      	bne.n	8012eca <Responce_GetBoardReview+0x12a>
			RS485_TX_ENA;
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	2101      	movs	r1, #1
 8012ea8:	482b      	ldr	r0, [pc, #172]	; (8012f58 <Responce_GetBoardReview+0x1b8>)
 8012eaa:	f7ef ff1f 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, 53, 1000);
 8012eae:	f107 0108 	add.w	r1, r7, #8
 8012eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012eb6:	2235      	movs	r2, #53	; 0x35
 8012eb8:	4828      	ldr	r0, [pc, #160]	; (8012f5c <Responce_GetBoardReview+0x1bc>)
 8012eba:	f7f6 ffee 	bl	8009e9a <HAL_UART_Transmit>
			RS485_TX_DIS;
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	4825      	ldr	r0, [pc, #148]	; (8012f58 <Responce_GetBoardReview+0x1b8>)
 8012ec4:	f7ef ff12 	bl	8002cec <HAL_GPIO_WritePin>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 8012ec8:	e03c      	b.n	8012f44 <Responce_GetBoardReview+0x1a4>
		} else if (typeconnect == USB) {
 8012eca:	79fb      	ldrb	r3, [r7, #7]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d139      	bne.n	8012f44 <Responce_GetBoardReview+0x1a4>
			CDC_Transmit_FS(data, 53);
 8012ed0:	f107 0308 	add.w	r3, r7, #8
 8012ed4:	2135      	movs	r1, #53	; 0x35
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fd fde4 	bl	8010aa4 <CDC_Transmit_FS>
}
 8012edc:	e032      	b.n	8012f44 <Responce_GetBoardReview+0x1a4>
		crc = CalculateCRC(data, 1, 4);
 8012ede:	f107 0308 	add.w	r3, r7, #8
 8012ee2:	2204      	movs	r2, #4
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7ff fc42 	bl	8012770 <CalculateCRC>
 8012eec:	4603      	mov	r3, r0
 8012eee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ef6:	0a1b      	lsrs	r3, r3, #8
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8012efe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 8012f06:	79fb      	ldrb	r3, [r7, #7]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d112      	bne.n	8012f32 <Responce_GetBoardReview+0x192>
			RS485_TX_ENA;
 8012f0c:	2201      	movs	r2, #1
 8012f0e:	2101      	movs	r1, #1
 8012f10:	4811      	ldr	r0, [pc, #68]	; (8012f58 <Responce_GetBoardReview+0x1b8>)
 8012f12:	f7ef feeb 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 8012f16:	f107 0108 	add.w	r1, r7, #8
 8012f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f1e:	2207      	movs	r2, #7
 8012f20:	480e      	ldr	r0, [pc, #56]	; (8012f5c <Responce_GetBoardReview+0x1bc>)
 8012f22:	f7f6 ffba 	bl	8009e9a <HAL_UART_Transmit>
			RS485_TX_DIS;
 8012f26:	2200      	movs	r2, #0
 8012f28:	2101      	movs	r1, #1
 8012f2a:	480b      	ldr	r0, [pc, #44]	; (8012f58 <Responce_GetBoardReview+0x1b8>)
 8012f2c:	f7ef fede 	bl	8002cec <HAL_GPIO_WritePin>
}
 8012f30:	e008      	b.n	8012f44 <Responce_GetBoardReview+0x1a4>
		} else if (typeconnect == USB) {
 8012f32:	79fb      	ldrb	r3, [r7, #7]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d105      	bne.n	8012f44 <Responce_GetBoardReview+0x1a4>
			CDC_Transmit_FS(data, 7);
 8012f38:	f107 0308 	add.w	r3, r7, #8
 8012f3c:	2107      	movs	r1, #7
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fd fdb0 	bl	8010aa4 <CDC_Transmit_FS>
}
 8012f44:	bf00      	nop
 8012f46:	3750      	adds	r7, #80	; 0x50
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	20009c5c 	.word	0x20009c5c
 8012f50:	20000101 	.word	0x20000101
 8012f54:	2000aeec 	.word	0x2000aeec
 8012f58:	40020000 	.word	0x40020000
 8012f5c:	200049dc 	.word	0x200049dc

08012f60 <Responce_GetBoardRecording>:

void Responce_GetBoardRecording(TypeConnection typeconnect)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b090      	sub	sp, #64	; 0x40
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	4603      	mov	r3, r0
 8012f68:	71fb      	strb	r3, [r7, #7]
	if (QueueGetCount() > 0) {
 8012f6a:	f7fe fd43 	bl	80119f4 <QueueGetCount>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d030      	beq.n	8012fd6 <Responce_GetBoardRecording+0x76>
		uint8_t front = QueueGetFront();
 8012f74:	f7fe fd14 	bl	80119a0 <QueueGetFront>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if (typeconnect == RS485) {
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d117      	bne.n	8012fb4 <Responce_GetBoardRecording+0x54>
			RS485_TX_ENA;
 8012f84:	2201      	movs	r2, #1
 8012f86:	2101      	movs	r1, #1
 8012f88:	4836      	ldr	r0, [pc, #216]	; (8013064 <Responce_GetBoardRecording+0x104>)
 8012f8a:	f7ef feaf 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, queueData[front], 53, 1000);
 8012f8e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012f92:	2235      	movs	r2, #53	; 0x35
 8012f94:	fb02 f303 	mul.w	r3, r2, r3
 8012f98:	4a33      	ldr	r2, [pc, #204]	; (8013068 <Responce_GetBoardRecording+0x108>)
 8012f9a:	1899      	adds	r1, r3, r2
 8012f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012fa0:	2235      	movs	r2, #53	; 0x35
 8012fa2:	4832      	ldr	r0, [pc, #200]	; (801306c <Responce_GetBoardRecording+0x10c>)
 8012fa4:	f7f6 ff79 	bl	8009e9a <HAL_UART_Transmit>
			RS485_TX_DIS;
 8012fa8:	2200      	movs	r2, #0
 8012faa:	2101      	movs	r1, #1
 8012fac:	482d      	ldr	r0, [pc, #180]	; (8013064 <Responce_GetBoardRecording+0x104>)
 8012fae:	f7ef fe9d 	bl	8002cec <HAL_GPIO_WritePin>
 8012fb2:	e00d      	b.n	8012fd0 <Responce_GetBoardRecording+0x70>
		} else if (typeconnect == USB) {
 8012fb4:	79fb      	ldrb	r3, [r7, #7]
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d10a      	bne.n	8012fd0 <Responce_GetBoardRecording+0x70>
			CDC_Transmit_FS(queueData[front], 53);
 8012fba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012fbe:	2235      	movs	r2, #53	; 0x35
 8012fc0:	fb02 f303 	mul.w	r3, r2, r3
 8012fc4:	4a28      	ldr	r2, [pc, #160]	; (8013068 <Responce_GetBoardRecording+0x108>)
 8012fc6:	4413      	add	r3, r2
 8012fc8:	2135      	movs	r1, #53	; 0x35
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fd fd6a 	bl	8010aa4 <CDC_Transmit_FS>
		} else if (typeconnect == BLE) {

		}
		QueueGetFrontAfter();
 8012fd0:	f7fe fcf2 	bl	80119b8 <QueueGetFrontAfter>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 8012fd4:	e042      	b.n	801305c <Responce_GetBoardRecording+0xfc>
	}else if(flagReviewFullData){
 8012fd6:	4b26      	ldr	r3, [pc, #152]	; (8013070 <Responce_GetBoardRecording+0x110>)
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d004      	beq.n	8012fe8 <Responce_GetBoardRecording+0x88>
		Responce_GetBoardReview(typeconnect);
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff fedd 	bl	8012da0 <Responce_GetBoardReview>
}
 8012fe6:	e039      	b.n	801305c <Responce_GetBoardRecording+0xfc>
		data[0] = CMD_BEGIN;
 8012fe8:	233a      	movs	r3, #58	; 0x3a
 8012fea:	723b      	strb	r3, [r7, #8]
		data[1] = ADDRESSBOARD_PART0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	727b      	strb	r3, [r7, #9]
		data[2] = ADDRESSBOARD_PART1;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	72bb      	strb	r3, [r7, #10]
		data[3] = ADDRESSBOARD_PART2;
 8012ff4:	2324      	movs	r3, #36	; 0x24
 8012ff6:	72fb      	strb	r3, [r7, #11]
		data[4] = CMD_GETBOARDDATA;
 8012ff8:	2332      	movs	r3, #50	; 0x32
 8012ffa:	733b      	strb	r3, [r7, #12]
		crc = CalculateCRC(data, 1, 4);
 8012ffc:	f107 0308 	add.w	r3, r7, #8
 8013000:	2204      	movs	r2, #4
 8013002:	2101      	movs	r1, #1
 8013004:	4618      	mov	r0, r3
 8013006:	f7ff fbb3 	bl	8012770 <CalculateCRC>
 801300a:	4603      	mov	r3, r0
 801300c:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 801300e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013010:	0a1b      	lsrs	r3, r3, #8
 8013012:	b29b      	uxth	r3, r3
 8013014:	b2db      	uxtb	r3, r3
 8013016:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8013018:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801301a:	b2db      	uxtb	r3, r3
 801301c:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 801301e:	79fb      	ldrb	r3, [r7, #7]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d112      	bne.n	801304a <Responce_GetBoardRecording+0xea>
			RS485_TX_ENA;
 8013024:	2201      	movs	r2, #1
 8013026:	2101      	movs	r1, #1
 8013028:	480e      	ldr	r0, [pc, #56]	; (8013064 <Responce_GetBoardRecording+0x104>)
 801302a:	f7ef fe5f 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 801302e:	f107 0108 	add.w	r1, r7, #8
 8013032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013036:	2207      	movs	r2, #7
 8013038:	480c      	ldr	r0, [pc, #48]	; (801306c <Responce_GetBoardRecording+0x10c>)
 801303a:	f7f6 ff2e 	bl	8009e9a <HAL_UART_Transmit>
			RS485_TX_DIS;
 801303e:	2200      	movs	r2, #0
 8013040:	2101      	movs	r1, #1
 8013042:	4808      	ldr	r0, [pc, #32]	; (8013064 <Responce_GetBoardRecording+0x104>)
 8013044:	f7ef fe52 	bl	8002cec <HAL_GPIO_WritePin>
}
 8013048:	e008      	b.n	801305c <Responce_GetBoardRecording+0xfc>
		} else if (typeconnect == USB) {
 801304a:	79fb      	ldrb	r3, [r7, #7]
 801304c:	2b01      	cmp	r3, #1
 801304e:	d105      	bne.n	801305c <Responce_GetBoardRecording+0xfc>
			CDC_Transmit_FS(data, 7);
 8013050:	f107 0308 	add.w	r3, r7, #8
 8013054:	2107      	movs	r1, #7
 8013056:	4618      	mov	r0, r3
 8013058:	f7fd fd24 	bl	8010aa4 <CDC_Transmit_FS>
}
 801305c:	bf00      	nop
 801305e:	3740      	adds	r7, #64	; 0x40
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	40020000 	.word	0x40020000
 8013068:	2000b088 	.word	0x2000b088
 801306c:	200049dc 	.word	0x200049dc
 8013070:	20000101 	.word	0x20000101

08013074 <Responce_SetTimeRTC>:
void Responce_SetTimeRTC(uint8_t *dat)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
	uint8_t datatime[6];
	for(int i=0;i<6;i++){
 801307c:	2300      	movs	r3, #0
 801307e:	617b      	str	r3, [r7, #20]
 8013080:	e00d      	b.n	801309e <Responce_SetTimeRTC+0x2a>
		datatime[i] = dat[i+5];
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	3305      	adds	r3, #5
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	4413      	add	r3, r2
 801308a:	7819      	ldrb	r1, [r3, #0]
 801308c:	f107 020c 	add.w	r2, r7, #12
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	4413      	add	r3, r2
 8013094:	460a      	mov	r2, r1
 8013096:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	3301      	adds	r3, #1
 801309c:	617b      	str	r3, [r7, #20]
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	2b05      	cmp	r3, #5
 80130a2:	ddee      	ble.n	8013082 <Responce_SetTimeRTC+0xe>
	}
	RTC_SetTime(datatime);
 80130a4:	f107 030c 	add.w	r3, r7, #12
 80130a8:	4618      	mov	r0, r3
 80130aa:	f7fe fcc5 	bl	8011a38 <RTC_SetTime>
}
 80130ae:	bf00      	nop
 80130b0:	3718      	adds	r7, #24
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
	...

080130b8 <Responce_GetDataGameSave>:

void Responce_GetDataGameSave(TypeConnection typeconnect,uint8_t part)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80130be:	af00      	add	r7, sp, #0
 80130c0:	4602      	mov	r2, r0
 80130c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80130c6:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80130ca:	701a      	strb	r2, [r3, #0]
 80130cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80130d0:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 80130d4:	460a      	mov	r2, r1
 80130d6:	701a      	strb	r2, [r3, #0]
	uint8_t data[GAMESAVELENGTH];
	if(part > GAMESAVEPARTS) return;
 80130d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80130dc:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	2b3e      	cmp	r3, #62	; 0x3e
 80130e4:	d837      	bhi.n	8013156 <Responce_GetDataGameSave+0x9e>
	MB85RS_read(part*GAMESAVELENGTH, data, GAMESAVELENGTH);
 80130e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80130ea:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	025b      	lsls	r3, r3, #9
 80130f2:	4618      	mov	r0, r3
 80130f4:	f107 0308 	add.w	r3, r7, #8
 80130f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130fc:	4619      	mov	r1, r3
 80130fe:	f7fe fa4b 	bl	8011598 <MB85RS_read>

	if(typeconnect ==RS485){
 8013102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013106:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d113      	bne.n	8013138 <Responce_GetDataGameSave+0x80>
		RS485_TX_ENA;
 8013110:	2201      	movs	r2, #1
 8013112:	2101      	movs	r1, #1
 8013114:	4812      	ldr	r0, [pc, #72]	; (8013160 <Responce_GetDataGameSave+0xa8>)
 8013116:	f7ef fde9 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, GAMESAVELENGTH, 1000);
 801311a:	f107 0108 	add.w	r1, r7, #8
 801311e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013126:	480f      	ldr	r0, [pc, #60]	; (8013164 <Responce_GetDataGameSave+0xac>)
 8013128:	f7f6 feb7 	bl	8009e9a <HAL_UART_Transmit>
		RS485_TX_DIS;
 801312c:	2200      	movs	r2, #0
 801312e:	2101      	movs	r1, #1
 8013130:	480b      	ldr	r0, [pc, #44]	; (8013160 <Responce_GetDataGameSave+0xa8>)
 8013132:	f7ef fddb 	bl	8002cec <HAL_GPIO_WritePin>
 8013136:	e00f      	b.n	8013158 <Responce_GetDataGameSave+0xa0>
	}else if(typeconnect == USB){
 8013138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801313c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d108      	bne.n	8013158 <Responce_GetDataGameSave+0xa0>
		CDC_Transmit_FS(data, GAMESAVELENGTH);
 8013146:	f107 0308 	add.w	r3, r7, #8
 801314a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801314e:	4618      	mov	r0, r3
 8013150:	f7fd fca8 	bl	8010aa4 <CDC_Transmit_FS>
 8013154:	e000      	b.n	8013158 <Responce_GetDataGameSave+0xa0>
	if(part > GAMESAVEPARTS) return;
 8013156:	bf00      	nop
	}else if(typeconnect == BLE){

	}
}
 8013158:	f507 7702 	add.w	r7, r7, #520	; 0x208
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}
 8013160:	40020000 	.word	0x40020000
 8013164:	200049dc 	.word	0x200049dc

08013168 <Responce_EraseGameSave>:
void Responce_EraseGameSave()
{
 8013168:	b580      	push	{r7, lr}
 801316a:	af00      	add	r7, sp, #0
	MB85RS_erase();
 801316c:	f7fe fa44 	bl	80115f8 <MB85RS_erase>
}
 8013170:	bf00      	nop
 8013172:	bd80      	pop	{r7, pc}

08013174 <UsbSendDateTime>:


void UsbSendDateTime()
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	uint8_t dat[7];
	RTC_TimeTypeDef 	sTime;
	RTC_DateTypeDef 	sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801317a:	1d3b      	adds	r3, r7, #4
 801317c:	2200      	movs	r2, #0
 801317e:	4619      	mov	r1, r3
 8013180:	4810      	ldr	r0, [pc, #64]	; (80131c4 <UsbSendDateTime+0x50>)
 8013182:	f7f3 ff89 	bl	8007098 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8013186:	463b      	mov	r3, r7
 8013188:	2200      	movs	r2, #0
 801318a:	4619      	mov	r1, r3
 801318c:	480d      	ldr	r0, [pc, #52]	; (80131c4 <UsbSendDateTime+0x50>)
 801318e:	f7f4 f865 	bl	800725c <HAL_RTC_GetDate>
	dat[0] = sTime.Seconds;
 8013192:	79bb      	ldrb	r3, [r7, #6]
 8013194:	763b      	strb	r3, [r7, #24]
	dat[1] = sTime.Minutes;
 8013196:	797b      	ldrb	r3, [r7, #5]
 8013198:	767b      	strb	r3, [r7, #25]
	dat[2] = sTime.Hours;
 801319a:	793b      	ldrb	r3, [r7, #4]
 801319c:	76bb      	strb	r3, [r7, #26]
	dat[3] = sDate.Date;
 801319e:	78bb      	ldrb	r3, [r7, #2]
 80131a0:	76fb      	strb	r3, [r7, #27]
	dat[4] = sDate.Month;
 80131a2:	787b      	ldrb	r3, [r7, #1]
 80131a4:	773b      	strb	r3, [r7, #28]
	dat[5] = sDate.Year;
 80131a6:	78fb      	ldrb	r3, [r7, #3]
 80131a8:	777b      	strb	r3, [r7, #29]
	dat[6] = NEWLINE;
 80131aa:	23ff      	movs	r3, #255	; 0xff
 80131ac:	77bb      	strb	r3, [r7, #30]
	CDC_Transmit_FS(dat, 7);
 80131ae:	f107 0318 	add.w	r3, r7, #24
 80131b2:	2107      	movs	r1, #7
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fd fc75 	bl	8010aa4 <CDC_Transmit_FS>
#endif
}
 80131ba:	bf00      	nop
 80131bc:	3720      	adds	r7, #32
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	2000449c 	.word	0x2000449c

080131c8 <UsbSendDataCalibase>:

void UsbSendDataCalibase()
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b08a      	sub	sp, #40	; 0x28
 80131cc:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	if(isCalibaseMode==true){
 80131ce:	4b63      	ldr	r3, [pc, #396]	; (801335c <UsbSendDataCalibase+0x194>)
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 80bd 	beq.w	8013352 <UsbSendDataCalibase+0x18a>
		if(calibase_type>17) calibase_type=0;
 80131d8:	4b61      	ldr	r3, [pc, #388]	; (8013360 <UsbSendDataCalibase+0x198>)
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	2b11      	cmp	r3, #17
 80131de:	d902      	bls.n	80131e6 <UsbSendDataCalibase+0x1e>
 80131e0:	4b5f      	ldr	r3, [pc, #380]	; (8013360 <UsbSendDataCalibase+0x198>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 80131e6:	2300      	movs	r3, #0
 80131e8:	627b      	str	r3, [r7, #36]	; 0x24
 80131ea:	e011      	b.n	8013210 <UsbSendDataCalibase+0x48>
			dataUsbCalibase[i]= (uint8_t)datapieces[calibase_type][i][PULSES];
 80131ec:	4b5c      	ldr	r3, [pc, #368]	; (8013360 <UsbSendDataCalibase+0x198>)
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	495c      	ldr	r1, [pc, #368]	; (8013364 <UsbSendDataCalibase+0x19c>)
 80131f2:	019a      	lsls	r2, r3, #6
 80131f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f6:	4413      	add	r3, r2
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	440b      	add	r3, r1
 80131fc:	885b      	ldrh	r3, [r3, #2]
 80131fe:	b2d9      	uxtb	r1, r3
 8013200:	4a59      	ldr	r2, [pc, #356]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 8013202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013204:	4413      	add	r3, r2
 8013206:	460a      	mov	r2, r1
 8013208:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 801320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320c:	3301      	adds	r3, #1
 801320e:	627b      	str	r3, [r7, #36]	; 0x24
 8013210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013212:	2b3f      	cmp	r3, #63	; 0x3f
 8013214:	ddea      	ble.n	80131ec <UsbSendDataCalibase+0x24>
		}
		int inx =0;
 8013216:	2300      	movs	r3, #0
 8013218:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 801321a:	2300      	movs	r3, #0
 801321c:	61fb      	str	r3, [r7, #28]
 801321e:	e033      	b.n	8013288 <UsbSendDataCalibase+0xc0>
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]/254;
 8013220:	4b4f      	ldr	r3, [pc, #316]	; (8013360 <UsbSendDataCalibase+0x198>)
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	494f      	ldr	r1, [pc, #316]	; (8013364 <UsbSendDataCalibase+0x19c>)
 8013226:	019a      	lsls	r2, r3, #6
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	4413      	add	r3, r2
 801322c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8013230:	085b      	lsrs	r3, r3, #1
 8013232:	4a4e      	ldr	r2, [pc, #312]	; (801336c <UsbSendDataCalibase+0x1a4>)
 8013234:	fba2 2303 	umull	r2, r3, r2, r3
 8013238:	099b      	lsrs	r3, r3, #6
 801323a:	b29a      	uxth	r2, r3
 801323c:	6a3b      	ldr	r3, [r7, #32]
 801323e:	3340      	adds	r3, #64	; 0x40
 8013240:	b2d1      	uxtb	r1, r2
 8013242:	4a49      	ldr	r2, [pc, #292]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 8013244:	54d1      	strb	r1, [r2, r3]
			inx++;
 8013246:	6a3b      	ldr	r3, [r7, #32]
 8013248:	3301      	adds	r3, #1
 801324a:	623b      	str	r3, [r7, #32]
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]%254;
 801324c:	4b44      	ldr	r3, [pc, #272]	; (8013360 <UsbSendDataCalibase+0x198>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	4944      	ldr	r1, [pc, #272]	; (8013364 <UsbSendDataCalibase+0x19c>)
 8013252:	019a      	lsls	r2, r3, #6
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	4413      	add	r3, r2
 8013258:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 801325c:	0853      	lsrs	r3, r2, #1
 801325e:	4943      	ldr	r1, [pc, #268]	; (801336c <UsbSendDataCalibase+0x1a4>)
 8013260:	fba1 1303 	umull	r1, r3, r1, r3
 8013264:	0999      	lsrs	r1, r3, #6
 8013266:	460b      	mov	r3, r1
 8013268:	01db      	lsls	r3, r3, #7
 801326a:	1a5b      	subs	r3, r3, r1
 801326c:	005b      	lsls	r3, r3, #1
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	b29a      	uxth	r2, r3
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	3340      	adds	r3, #64	; 0x40
 8013276:	b2d1      	uxtb	r1, r2
 8013278:	4a3b      	ldr	r2, [pc, #236]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 801327a:	54d1      	strb	r1, [r2, r3]
			inx++;
 801327c:	6a3b      	ldr	r3, [r7, #32]
 801327e:	3301      	adds	r3, #1
 8013280:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	3301      	adds	r3, #1
 8013286:	61fb      	str	r3, [r7, #28]
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	2b3f      	cmp	r3, #63	; 0x3f
 801328c:	ddc8      	ble.n	8013220 <UsbSendDataCalibase+0x58>
		}
		for(int i=0;i<64;i++){
 801328e:	2300      	movs	r3, #0
 8013290:	61bb      	str	r3, [r7, #24]
 8013292:	e00a      	b.n	80132aa <UsbSendDataCalibase+0xe2>
			dataUsbCalibase[192+i] = datamain[i];
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	33c0      	adds	r3, #192	; 0xc0
 8013298:	4935      	ldr	r1, [pc, #212]	; (8013370 <UsbSendDataCalibase+0x1a8>)
 801329a:	69ba      	ldr	r2, [r7, #24]
 801329c:	440a      	add	r2, r1
 801329e:	7811      	ldrb	r1, [r2, #0]
 80132a0:	4a31      	ldr	r2, [pc, #196]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132a2:	54d1      	strb	r1, [r2, r3]
		for(int i=0;i<64;i++){
 80132a4:	69bb      	ldr	r3, [r7, #24]
 80132a6:	3301      	adds	r3, #1
 80132a8:	61bb      	str	r3, [r7, #24]
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	2b3f      	cmp	r3, #63	; 0x3f
 80132ae:	ddf1      	ble.n	8013294 <UsbSendDataCalibase+0xcc>
		}

		RTC_TimeTypeDef sTime = {0};
 80132b0:	1d3b      	adds	r3, r7, #4
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	605a      	str	r2, [r3, #4]
 80132b8:	609a      	str	r2, [r3, #8]
 80132ba:	60da      	str	r2, [r3, #12]
 80132bc:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80132be:	2300      	movs	r3, #0
 80132c0:	603b      	str	r3, [r7, #0]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80132c2:	1d3b      	adds	r3, r7, #4
 80132c4:	2200      	movs	r2, #0
 80132c6:	4619      	mov	r1, r3
 80132c8:	482a      	ldr	r0, [pc, #168]	; (8013374 <UsbSendDataCalibase+0x1ac>)
 80132ca:	f7f3 fee5 	bl	8007098 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80132ce:	463b      	mov	r3, r7
 80132d0:	2200      	movs	r2, #0
 80132d2:	4619      	mov	r1, r3
 80132d4:	4827      	ldr	r0, [pc, #156]	; (8013374 <UsbSendDataCalibase+0x1ac>)
 80132d6:	f7f3 ffc1 	bl	800725c <HAL_RTC_GetDate>

		dataUsbCalibase[256] = sTime.Seconds;
 80132da:	79ba      	ldrb	r2, [r7, #6]
 80132dc:	4b22      	ldr	r3, [pc, #136]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132de:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		dataUsbCalibase[257] = sTime.Minutes;
 80132e2:	797a      	ldrb	r2, [r7, #5]
 80132e4:	4b20      	ldr	r3, [pc, #128]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132e6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		dataUsbCalibase[258] = sTime.Hours;
 80132ea:	793a      	ldrb	r2, [r7, #4]
 80132ec:	4b1e      	ldr	r3, [pc, #120]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132ee:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		dataUsbCalibase[259] = sDate.Date;
 80132f2:	78ba      	ldrb	r2, [r7, #2]
 80132f4:	4b1c      	ldr	r3, [pc, #112]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132f6:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		dataUsbCalibase[260] = sDate.Month;
 80132fa:	787a      	ldrb	r2, [r7, #1]
 80132fc:	4b1a      	ldr	r3, [pc, #104]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 80132fe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		dataUsbCalibase[261] = sDate.Year;
 8013302:	78fa      	ldrb	r2, [r7, #3]
 8013304:	4b18      	ldr	r3, [pc, #96]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 8013306:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

		dataUsbCalibase[262]=255;
 801330a:	4b17      	ldr	r3, [pc, #92]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 801330c:	22ff      	movs	r2, #255	; 0xff
 801330e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		if(typeCalibaseConnect==USB){
 8013312:	4b19      	ldr	r3, [pc, #100]	; (8013378 <UsbSendDataCalibase+0x1b0>)
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d105      	bne.n	8013326 <UsbSendDataCalibase+0x15e>
			CDC_Transmit_FS(dataUsbCalibase,263);
 801331a:	f240 1107 	movw	r1, #263	; 0x107
 801331e:	4812      	ldr	r0, [pc, #72]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 8013320:	f7fd fbc0 	bl	8010aa4 <CDC_Transmit_FS>
			RS485_TX_DIS;
		}
	}
#endif

}
 8013324:	e015      	b.n	8013352 <UsbSendDataCalibase+0x18a>
		}else if(typeCalibaseConnect==RS485){
 8013326:	4b14      	ldr	r3, [pc, #80]	; (8013378 <UsbSendDataCalibase+0x1b0>)
 8013328:	781b      	ldrb	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d111      	bne.n	8013352 <UsbSendDataCalibase+0x18a>
			RS485_TX_ENA;
 801332e:	2201      	movs	r2, #1
 8013330:	2101      	movs	r1, #1
 8013332:	4812      	ldr	r0, [pc, #72]	; (801337c <UsbSendDataCalibase+0x1b4>)
 8013334:	f7ef fcda 	bl	8002cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, dataUsbCalibase, 263, 1000);
 8013338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801333c:	f240 1207 	movw	r2, #263	; 0x107
 8013340:	4909      	ldr	r1, [pc, #36]	; (8013368 <UsbSendDataCalibase+0x1a0>)
 8013342:	480f      	ldr	r0, [pc, #60]	; (8013380 <UsbSendDataCalibase+0x1b8>)
 8013344:	f7f6 fda9 	bl	8009e9a <HAL_UART_Transmit>
			RS485_TX_DIS;
 8013348:	2200      	movs	r2, #0
 801334a:	2101      	movs	r1, #1
 801334c:	480b      	ldr	r0, [pc, #44]	; (801337c <UsbSendDataCalibase+0x1b4>)
 801334e:	f7ef fccd 	bl	8002cec <HAL_GPIO_WritePin>
}
 8013352:	bf00      	nop
 8013354:	3728      	adds	r7, #40	; 0x28
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	2000b4d9 	.word	0x2000b4d9
 8013360:	2000b4d8 	.word	0x2000b4d8
 8013364:	20009cac 	.word	0x20009cac
 8013368:	2000b4dc 	.word	0x2000b4dc
 801336c:	81020409 	.word	0x81020409
 8013370:	2000aeac 	.word	0x2000aeac
 8013374:	2000449c 	.word	0x2000449c
 8013378:	20000102 	.word	0x20000102
 801337c:	40020000 	.word	0x40020000
 8013380:	200049dc 	.word	0x200049dc

08013384 <__libc_init_array>:
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	4d0d      	ldr	r5, [pc, #52]	; (80133bc <__libc_init_array+0x38>)
 8013388:	4c0d      	ldr	r4, [pc, #52]	; (80133c0 <__libc_init_array+0x3c>)
 801338a:	1b64      	subs	r4, r4, r5
 801338c:	10a4      	asrs	r4, r4, #2
 801338e:	2600      	movs	r6, #0
 8013390:	42a6      	cmp	r6, r4
 8013392:	d109      	bne.n	80133a8 <__libc_init_array+0x24>
 8013394:	4d0b      	ldr	r5, [pc, #44]	; (80133c4 <__libc_init_array+0x40>)
 8013396:	4c0c      	ldr	r4, [pc, #48]	; (80133c8 <__libc_init_array+0x44>)
 8013398:	f000 f82e 	bl	80133f8 <_init>
 801339c:	1b64      	subs	r4, r4, r5
 801339e:	10a4      	asrs	r4, r4, #2
 80133a0:	2600      	movs	r6, #0
 80133a2:	42a6      	cmp	r6, r4
 80133a4:	d105      	bne.n	80133b2 <__libc_init_array+0x2e>
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80133ac:	4798      	blx	r3
 80133ae:	3601      	adds	r6, #1
 80133b0:	e7ee      	b.n	8013390 <__libc_init_array+0xc>
 80133b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80133b6:	4798      	blx	r3
 80133b8:	3601      	adds	r6, #1
 80133ba:	e7f2      	b.n	80133a2 <__libc_init_array+0x1e>
 80133bc:	08013a28 	.word	0x08013a28
 80133c0:	08013a28 	.word	0x08013a28
 80133c4:	08013a28 	.word	0x08013a28
 80133c8:	08013a2c 	.word	0x08013a2c

080133cc <memcpy>:
 80133cc:	440a      	add	r2, r1
 80133ce:	4291      	cmp	r1, r2
 80133d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80133d4:	d100      	bne.n	80133d8 <memcpy+0xc>
 80133d6:	4770      	bx	lr
 80133d8:	b510      	push	{r4, lr}
 80133da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133e2:	4291      	cmp	r1, r2
 80133e4:	d1f9      	bne.n	80133da <memcpy+0xe>
 80133e6:	bd10      	pop	{r4, pc}

080133e8 <memset>:
 80133e8:	4402      	add	r2, r0
 80133ea:	4603      	mov	r3, r0
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d100      	bne.n	80133f2 <memset+0xa>
 80133f0:	4770      	bx	lr
 80133f2:	f803 1b01 	strb.w	r1, [r3], #1
 80133f6:	e7f9      	b.n	80133ec <memset+0x4>

080133f8 <_init>:
 80133f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133fa:	bf00      	nop
 80133fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133fe:	bc08      	pop	{r3}
 8013400:	469e      	mov	lr, r3
 8013402:	4770      	bx	lr

08013404 <_fini>:
 8013404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013406:	bf00      	nop
 8013408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801340a:	bc08      	pop	{r3}
 801340c:	469e      	mov	lr, r3
 801340e:	4770      	bx	lr
