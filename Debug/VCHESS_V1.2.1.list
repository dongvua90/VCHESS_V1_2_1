
VCHESS_V1.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08013b54  08013b54  00023b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014164  08014164  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  08014164  08014164  00024164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801416c  0801416c  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801416c  0801416c  0002416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014170  08014170  00024170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08014174  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9a8  20000104  08014278  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000baac  08014278  0003baac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e417  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007473  00000000  00000000  0005e54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002560  00000000  00000000  000659c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002238  00000000  00000000  00067f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002129b  00000000  00000000  0006a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034724  00000000  00000000  0008b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6d98  00000000  00000000  000bfb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001668af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097f8  00000000  00000000  00166900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013b3c 	.word	0x08013b3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08013b3c 	.word	0x08013b3c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <MX_DMA_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a3e      	ldr	r2, [pc, #248]	; (80005ec <MX_DMA_Init+0x108>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_DMA_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <MX_DMA_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <MX_DMA_Init+0x108>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_DMA_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fe4b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f001 fe64 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2105      	movs	r1, #5
 8000536:	200c      	movs	r0, #12
 8000538:	f001 fe43 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800053c:	200c      	movs	r0, #12
 800053e:	f001 fe5c 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200d      	movs	r0, #13
 8000548:	f001 fe3b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f001 fe54 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	200e      	movs	r0, #14
 8000558:	f001 fe33 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800055c:	200e      	movs	r0, #14
 800055e:	f001 fe4c 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	200f      	movs	r0, #15
 8000568:	f001 fe2b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800056c:	200f      	movs	r0, #15
 800056e:	f001 fe44 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2011      	movs	r0, #17
 8000578:	f001 fe23 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800057c:	2011      	movs	r0, #17
 800057e:	f001 fe3c 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	202f      	movs	r0, #47	; 0x2f
 8000588:	f001 fe1b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800058c:	202f      	movs	r0, #47	; 0x2f
 800058e:	f001 fe34 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2039      	movs	r0, #57	; 0x39
 8000598:	f001 fe13 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f001 fe2c 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	203a      	movs	r0, #58	; 0x3a
 80005a8:	f001 fe0b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f001 fe24 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2105      	movs	r1, #5
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f001 fe03 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f001 fe1c 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2105      	movs	r1, #5
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f001 fdfb 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	; 0x45
 80005ce:	f001 fe14 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 fdf3 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 fe0c 	bl	80021fa <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20004188 	.word	0x20004188
 8000620:	200041dc 	.word	0x200041dc

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemGetFRAM */
  osSemaphoreDef(binarySemGetFRAM);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  binarySemGetFRAMHandle = osSemaphoreCreate(osSemaphore(binarySemGetFRAM), 1);
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f00e fb88 	bl	800ed4e <osSemaphoreCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemMasterGetData */
  osSemaphoreDef(binarySemMasterGetData);
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  binarySemMasterGetDataHandle = osSemaphoreCreate(osSemaphore(binarySemMasterGetData), 1);
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f00e fb7b 	bl	800ed4e <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemI2C_Status */
  osSemaphoreDef(binarySemI2C_Status);
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  binarySemI2C_StatusHandle = osSemaphoreCreate(osSemaphore(binarySemI2C_Status), 1);
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f00e fb6e 	bl	800ed4e <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 512);
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e fafb 	bl	800ec8e <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskScanPiece */
  osThreadStaticDef(taskScanPiece, StartTaskScanPiece, osPriorityHigh, 0, 4096, taskScanPieceBuffer, &taskScanPieceControlBlock);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FREERTOS_Init+0xb8>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskScanPieceHandle = osThreadCreate(osThread(taskScanPiece), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00e faea 	bl	800ec8e <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_FREERTOS_Init+0xbc>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	2000417c 	.word	0x2000417c
 80006cc:	20004180 	.word	0x20004180
 80006d0:	20004184 	.word	0x20004184
 80006d4:	08013b70 	.word	0x08013b70
 80006d8:	20000120 	.word	0x20000120
 80006dc:	08013b8c 	.word	0x08013b8c
 80006e0:	20000124 	.word	0x20000124

080006e4 <StartDefaultTask>:
  */
extern uint8_t ping_chessclock;
extern uint8_t data_chessclock[15];
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f010 f9ee 	bl	8010acc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  ChessClock_Init();
 80006f0:	f011 f83a 	bl	8011768 <ChessClock_Init>

  /* Infinite loop */
  for(;;)
  {
	  // kiểm tra trạng thái kết nối với đồng hồ qua I2C
	  osDelay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f00e fb15 	bl	800ed26 <osDelay>
	  if(ping_chessclock > 0) {
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <StartDefaultTask+0x40>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <StartDefaultTask+0x2c>
		  ping_chessclock--;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <StartDefaultTask+0x40>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <StartDefaultTask+0x40>)
 800070e:	701a      	strb	r2, [r3, #0]
	  }
	  /* ping_chessclock sẽ đếm ngược đến 0
	   * khi nó đếm đến 0 sẽ set chessclock status = disconnect */
	  if(ping_chessclock==0){
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <StartDefaultTask+0x40>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1ed      	bne.n	80006f4 <StartDefaultTask+0x10>
		  data_chessclock[9]=STATUS_DISCONNECT_CLOCK;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <StartDefaultTask+0x44>)
 800071a:	2237      	movs	r2, #55	; 0x37
 800071c:	725a      	strb	r2, [r3, #9]
		  HAL_NVIC_SystemReset();
 800071e:	f001 fd7a 	bl	8002216 <HAL_NVIC_SystemReset>
	  osDelay(1000);
 8000722:	e7e7      	b.n	80006f4 <StartDefaultTask+0x10>
 8000724:	200000fe 	.word	0x200000fe
 8000728:	20009c60 	.word	0x20009c60

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b41      	ldr	r3, [pc, #260]	; (800084c <MX_GPIO_Init+0x120>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a40      	ldr	r2, [pc, #256]	; (800084c <MX_GPIO_Init+0x120>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_GPIO_Init+0x120>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <MX_GPIO_Init+0x120>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <MX_GPIO_Init+0x120>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_GPIO_Init+0x120>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b33      	ldr	r3, [pc, #204]	; (800084c <MX_GPIO_Init+0x120>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a32      	ldr	r2, [pc, #200]	; (800084c <MX_GPIO_Init+0x120>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x120>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_GPIO_Init+0x120>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2b      	ldr	r2, [pc, #172]	; (800084c <MX_GPIO_Init+0x120>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0x120>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_TX_EN_Pin|CD4051_A_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f248 0101 	movw	r1, #32769	; 0x8001
 80007b8:	4825      	ldr	r0, [pc, #148]	; (8000850 <MX_GPIO_Init+0x124>)
 80007ba:	f002 fad1 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_PWRC_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2112      	movs	r1, #18
 80007c2:	4823      	ldr	r0, [pc, #140]	; (8000850 <MX_GPIO_Init+0x124>)
 80007c4:	f002 facc 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <MX_GPIO_Init+0x128>)
 80007ce:	f002 fac7 	bl	8002d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TX_EN_Pin;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485_TX_EN_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4819      	ldr	r0, [pc, #100]	; (8000850 <MX_GPIO_Init+0x124>)
 80007ea:	f002 f935 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_PWRC_Pin|CD4051_A_Pin;
 80007ee:	f248 0302 	movw	r3, #32770	; 0x8002
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0x124>)
 8000808:	f002 f926 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800080c:	2310      	movs	r3, #16
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0x124>)
 8000824:	f002 f918 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin;
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0x128>)
 8000840:	f002 f90a 	bl	8002a58 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 160;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	22a0      	movs	r2, #160	; 0xa0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f002 fa7d 	bl	8002d94 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f990 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200043dc 	.word	0x200043dc
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <HAL_I2C_MspInit+0x104>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d16b      	bne.n	80009ae <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	482c      	ldr	r0, [pc, #176]	; (80009c0 <HAL_I2C_MspInit+0x10c>)
 8000910:	f002 f8a2 	bl	8002a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_I2C_MspInit+0x108>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <HAL_I2C_MspInit+0x114>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000974:	f001 fc54 	bl	8002220 <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800097e:	f000 f921 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201f      	movs	r0, #31
 8000994:	f001 fc15 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000998:	201f      	movs	r0, #31
 800099a:	f001 fc2e 	bl	80021fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2020      	movs	r0, #32
 80009a4:	f001 fc0d 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009a8:	2020      	movs	r0, #32
 80009aa:	f001 fc26 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	20004430 	.word	0x20004430
 80009c8:	40026010 	.word	0x40026010

080009cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <MX_IWDG_Init+0x30>)
 80009d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009d8:	2204      	movs	r2, #4
 80009da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_IWDG_Init+0x2c>)
 80009e6:	f004 fa56 	bl	8004e96 <HAL_IWDG_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009f0:	f000 f8e8 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20004490 	.word	0x20004490
 80009fc:	40003000 	.word	0x40003000

08000a00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a06:	f001 faa7 	bl	8001f58 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a0a:	f000 f843 	bl	8000a94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a0e:	f7ff fe8d 	bl	800072c <MX_GPIO_Init>
	MX_DMA_Init();
 8000a12:	f7ff fd67 	bl	80004e4 <MX_DMA_Init>
	MX_TIM1_Init();
 8000a16:	f000 fbeb 	bl	80011f0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000a1a:	f000 fca3 	bl	8001364 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000a1e:	f000 fd21 	bl	8001464 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000a22:	f000 fdab 	bl	800157c <MX_TIM4_Init>
	MX_I2C1_Init();
 8000a26:	f7ff ff17 	bl	8000858 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000a2a:	f000 f9a5 	bl	8000d78 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000a2e:	f001 f977 	bl	8001d20 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8000a32:	f000 f8f1 	bl	8000c18 <MX_RTC_Init>
	MX_IWDG_Init();
 8000a36:	f7ff ffc9 	bl	80009cc <MX_IWDG_Init>
	/* USER CODE BEGIN 2 */
	// led nhay bao hieu khoi dong
	for (int i = 0; i < 3; i++) {
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e012      	b.n	8000a66 <main+0x66>
		LED_ON;
 8000a40:	2201      	movs	r2, #1
 8000a42:	2104      	movs	r1, #4
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <main+0x8c>)
 8000a46:	f002 f98b 	bl	8002d60 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f001 fac6 	bl	8001fdc <HAL_Delay>
		LED_OFF
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <main+0x8c>)
 8000a56:	f002 f983 	bl	8002d60 <HAL_GPIO_WritePin>
		;
		HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f001 fabe 	bl	8001fdc <HAL_Delay>
	for (int i = 0; i < 3; i++) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	dde9      	ble.n	8000a40 <main+0x40>
	}
	PVD_Config();
 8000a6c:	f011 f8e8 	bl	8011c40 <PVD_Config>
	initReceiverUart();
 8000a70:	f012 fab4 	bl	8012fdc <initReceiverUart>
	sys_error = BackupError_read(); // lấy lại trạng thái lỗi trước đó .
 8000a74:	f011 f9e0 	bl	8011e38 <BackupError_read>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <main+0x90>)
 8000a7e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000a80:	f7ff fdd0 	bl	8000624 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000a84:	f00e f8fc 	bl	800ec80 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a88:	e7fe      	b.n	8000a88 <main+0x88>
 8000a8a:	bf00      	nop
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	2000449c 	.word	0x2000449c

08000a94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2230      	movs	r2, #48	; 0x30
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f013 f842 	bl	8013b2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <SystemClock_Config+0xd8>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <SystemClock_Config+0xd8>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <SystemClock_Config+0xd8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemClock_Config+0xdc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae0:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <SystemClock_Config+0xdc>)
 8000ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <SystemClock_Config+0xdc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000af4:	230d      	movs	r3, #13
 8000af6:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000b10:	2319      	movs	r3, #25
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 fcf2 	bl	8006510 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xa2>
		Error_Handler();
 8000b32:	f000 f847 	bl	8000bc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f005 ff54 	bl	8006a00 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xce>
		Error_Handler();
 8000b5e:	f000 f831 	bl	8000bc4 <Error_Handler>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM11) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d102      	bne.n	8000b8c <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_IncTick();
 8000b86:	f001 fa09 	bl	8001f9c <HAL_IncTick>
			is_start_measure = false;
			HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
		}
	}
	/* USER CODE END Callback 1 */
}
 8000b8a:	e00f      	b.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x38>
	else if (htim->Instance == TIM4) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10a      	bne.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x38>
		if (is_start_measure == true) {
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x38>
			is_start_measure = false;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ba8:	f007 ffb4 	bl	8008b14 <HAL_TIM_IC_Stop_DMA>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40014800 	.word	0x40014800
 8000bb8:	40000800 	.word	0x40000800
 8000bbc:	20009cae 	.word	0x20009cae
 8000bc0:	20004638 	.word	0x20004638

08000bc4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bca:	b672      	cpsid	i
}
 8000bcc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	sys_error = BOARD_SYS_ERROR;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <Error_Handler+0x50>)
 8000bd0:	2210      	movs	r2, #16
 8000bd2:	701a      	strb	r2, [r3, #0]
	BackupError_write(sys_error);
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <Error_Handler+0x50>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f011 f91b 	bl	8011e14 <BackupError_write>

	for (int i = 0; i < 30000; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e00e      	b.n	8000c02 <Error_Handler+0x3e>
		for (int j = 0; j < 30000; j++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	e003      	b.n	8000bf2 <Error_Handler+0x2e>
			__NOP();
 8000bea:	bf00      	nop
		for (int j = 0; j < 30000; j++) {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f247 522f 	movw	r2, #29999	; 0x752f
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	ddf6      	ble.n	8000bea <Error_Handler+0x26>
	for (int i = 0; i < 30000; i++) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f247 522f 	movw	r2, #29999	; 0x752f
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	ddeb      	ble.n	8000be4 <Error_Handler+0x20>
		}
	}
	HAL_NVIC_SystemReset();
 8000c0c:	f001 fb03 	bl	8002216 <HAL_NVIC_SystemReset>

	while (1) {
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x4c>
 8000c12:	bf00      	nop
 8000c14:	2000449c 	.word	0x2000449c

08000c18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	if(RTC->BKP1R==1990){
 8000c1e:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_RTC_Init+0x100>)
 8000c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c22:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11d      	bne.n	8000c66 <MX_RTC_Init+0x4e>
		 hrtc.Instance = RTC;
 8000c2a:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c2c:	4a3a      	ldr	r2, [pc, #232]	; (8000d18 <MX_RTC_Init+0x100>)
 8000c2e:	601a      	str	r2, [r3, #0]
		  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c30:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
		  hrtc.Init.AsynchPrediv = 127;
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c38:	227f      	movs	r2, #127	; 0x7f
 8000c3a:	609a      	str	r2, [r3, #8]
		  hrtc.Init.SynchPrediv = 255;
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	60da      	str	r2, [r3, #12]
		  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
		  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c48:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
		  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c4e:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
		  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c54:	4831      	ldr	r0, [pc, #196]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c56:	f006 f9d3 	bl	8007000 <HAL_RTC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d057      	beq.n	8000d10 <MX_RTC_Init+0xf8>
		  {
		    Error_Handler();
 8000c60:	f7ff ffb0 	bl	8000bc4 <Error_Handler>
 8000c64:	e055      	b.n	8000d12 <MX_RTC_Init+0xfa>
		  }
		return;
	}
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c7a:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <MX_RTC_Init+0x100>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c86:	227f      	movs	r2, #127	; 0x7f
 8000c88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c8c:	22ff      	movs	r2, #255	; 0xff
 8000c8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_RTC_Init+0x104>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <MX_RTC_Init+0x104>)
 8000ca4:	f006 f9ac 	bl	8007000 <HAL_RTC_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000cae:	f7ff ff89 	bl	8000bc4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4813      	ldr	r0, [pc, #76]	; (8000d1c <MX_RTC_Init+0x104>)
 8000cce:	f006 fa0d 	bl	80070ec <HAL_RTC_SetTime>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cd8:	f7ff ff74 	bl	8000bc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000ce0:	2309      	movs	r3, #9
 8000ce2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000ce4:	2309      	movs	r3, #9
 8000ce6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000ce8:	2316      	movs	r3, #22
 8000cea:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480a      	ldr	r0, [pc, #40]	; (8000d1c <MX_RTC_Init+0x104>)
 8000cf4:	f006 faf2 	bl	80072dc <HAL_RTC_SetDate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000cfe:	f7ff ff61 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1990);
 8000d02:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000d06:	2101      	movs	r1, #1
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_RTC_Init+0x104>)
 8000d0a:	f006 fc77 	bl	80075fc <HAL_RTCEx_BKUPWrite>
 8000d0e:	e000      	b.n	8000d12 <MX_RTC_Init+0xfa>
		return;
 8000d10:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40002800 	.word	0x40002800
 8000d1c:	200044a0 	.word	0x200044a0

08000d20 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_RTC_MspInit+0x50>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d111      	bne.n	8000d66 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d42:	2302      	movs	r3, #2
 8000d44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 f867 	bl	8006e24 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d5c:	f7ff ff32 	bl	8000bc4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_RTC_MspInit+0x54>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40002800 	.word	0x40002800
 8000d74:	42470e3c 	.word	0x42470e3c

08000d78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d7e:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <MX_SPI1_Init+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000dac:	2210      	movs	r2, #16
 8000dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_SPI1_Init+0x64>)
 8000dca:	f006 fc49 	bl	8007660 <HAL_SPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd4:	f7ff fef6 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200044c0 	.word	0x200044c0
 8000de0:	40013000 	.word	0x40013000

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23e0      	movs	r3, #224	; 0xe0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f001 fdfd 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_MspInit+0x64>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_MspInit+0x64>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_MspInit+0x64>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x64>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x64>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x64>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f001 f982 	bl	80021c2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f001 f97d 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f001 f996 	bl	80021fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_InitTick+0xd0>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <HAL_InitTick+0xd0>)
 8000ef6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efa:	6453      	str	r3, [r2, #68]	; 0x44
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_InitTick+0xd0>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f08:	f107 020c 	add.w	r2, r7, #12
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f005 ff54 	bl	8006dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f18:	f005 ff3e 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 8000f1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f20:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <HAL_InitTick+0xd4>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <HAL_InitTick+0xdc>)
 8000f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f38:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000f52:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f54:	f007 f92c 	bl	80081b0 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d11b      	bne.n	8000f9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000f66:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <HAL_InitTick+0xd8>)
 8000f68:	f007 f972 	bl	8008250 <HAL_TIM_Base_Start_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d111      	bne.n	8000f9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000f7a:	201a      	movs	r0, #26
 8000f7c:	f001 f93d 	bl	80021fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d808      	bhi.n	8000f98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	201a      	movs	r0, #26
 8000f8c:	f001 f919 	bl	80021c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0xe0>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e002      	b.n	8000f9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3730      	adds	r7, #48	; 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	431bde83 	.word	0x431bde83
 8000fb4:	20004518 	.word	0x20004518
 8000fb8:	40014800 	.word	0x40014800
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000ff0:	f005 fa7c 	bl	80064ec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA1_Stream0_IRQHandler+0x10>)
 8000ffe:	f001 faa7 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20004430 	.word	0x20004430

0800100c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Stream1_IRQHandler+0x10>)
 8001012:	f001 fa9d 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200047a0 	.word	0x200047a0

08001020 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream2_IRQHandler+0x10>)
 8001026:	f001 fa93 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20004920 	.word	0x20004920

08001034 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DMA1_Stream3_IRQHandler+0x10>)
 800103a:	f001 fa89 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20004980 	.word	0x20004980

08001048 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <DMA1_Stream4_IRQHandler+0x10>)
 800104e:	f001 fa7f 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20004860 	.word	0x20004860

0800105c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA1_Stream6_IRQHandler+0x10>)
 8001062:	f001 fa75 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20004800 	.word	0x20004800

08001070 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001076:	f007 fe0f 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20004560 	.word	0x20004560

08001084 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800108a:	f007 fe05 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20004560 	.word	0x20004560

08001098 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800109e:	f007 fdfb 	bl	8008c98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80010a4:	f007 fdf8 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20004560 	.word	0x20004560
 80010b0:	20004518 	.word	0x20004518

080010b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM1_CC_IRQHandler+0x10>)
 80010ba:	f007 fded 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20004560 	.word	0x20004560

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f007 fde3 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200045a8 	.word	0x200045a8

080010dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM3_IRQHandler+0x10>)
 80010e2:	f007 fdd9 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200045f0 	.word	0x200045f0

080010f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM4_IRQHandler+0x10>)
 80010f6:	f007 fdcf 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20004638 	.word	0x20004638

08001104 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <I2C1_EV_IRQHandler+0x10>)
 800110a:	f002 f8f7 	bl	80032fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200043dc 	.word	0x200043dc

08001118 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <I2C1_ER_IRQHandler+0x10>)
 800111e:	f002 fa5e 	bl	80035de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200043dc 	.word	0x200043dc

0800112c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <USART1_IRQHandler+0x10>)
 8001132:	f009 f885 	bl	800a240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200049e0 	.word	0x200049e0

08001140 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <DMA1_Stream7_IRQHandler+0x10>)
 8001146:	f001 fa03 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200048c0 	.word	0x200048c0

08001154 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA2_Stream1_IRQHandler+0x10>)
 800115a:	f001 f9f9 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20004680 	.word	0x20004680

08001168 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA2_Stream2_IRQHandler+0x10>)
 800116e:	f001 f9ef 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200046e0 	.word	0x200046e0

0800117c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <OTG_FS_IRQHandler+0x10>)
 8001182:	f004 f81a 	bl	80051ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20009530 	.word	0x20009530

08001190 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA2_Stream5_IRQHandler+0x10>)
 8001196:	f001 f9db 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20004a24 	.word	0x20004a24

080011a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <DMA2_Stream6_IRQHandler+0x10>)
 80011aa:	f001 f9d1 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20004740 	.word	0x20004740

080011b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA2_Stream7_IRQHandler+0x10>)
 80011be:	f001 f9c7 	bl	8002550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20004a84 	.word	0x20004a84

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f012 fc7f 	bl	8013b2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122e:	4b4b      	ldr	r3, [pc, #300]	; (800135c <MX_TIM1_Init+0x16c>)
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <MX_TIM1_Init+0x170>)
 8001232:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001234:	4b49      	ldr	r3, [pc, #292]	; (800135c <MX_TIM1_Init+0x16c>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <MX_TIM1_Init+0x16c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <MX_TIM1_Init+0x16c>)
 8001242:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001246:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <MX_TIM1_Init+0x16c>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <MX_TIM1_Init+0x16c>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <MX_TIM1_Init+0x16c>)
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800125a:	4840      	ldr	r0, [pc, #256]	; (800135c <MX_TIM1_Init+0x16c>)
 800125c:	f006 ffa8 	bl	80081b0 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001266:	f7ff fcad 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001274:	4619      	mov	r1, r3
 8001276:	4839      	ldr	r0, [pc, #228]	; (800135c <MX_TIM1_Init+0x16c>)
 8001278:	f007 ff74 	bl	8009164 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001282:	f7ff fc9f 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001286:	4835      	ldr	r0, [pc, #212]	; (800135c <MX_TIM1_Init+0x16c>)
 8001288:	f007 f844 	bl	8008314 <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001292:	f7ff fc97 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012a2:	4619      	mov	r1, r3
 80012a4:	482d      	ldr	r0, [pc, #180]	; (800135c <MX_TIM1_Init+0x16c>)
 80012a6:	f008 fdb3 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012b0:	f7ff fc88 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	2360      	movs	r3, #96	; 0x60
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_TIM1_Init+0x16c>)
 80012da:	f007 fe81 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012e4:	f7ff fc6e 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80012e8:	2370      	movs	r3, #112	; 0x70
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	2204      	movs	r2, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <MX_TIM1_Init+0x16c>)
 80012f6:	f007 fe73 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001300:	f7ff fc60 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM1_Init+0x16c>)
 800130e:	f007 fe67 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001318:	f7ff fc54 	bl	8000bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM1_Init+0x16c>)
 8001340:	f008 fdd4 	bl	8009eec <HAL_TIMEx_ConfigBreakDeadTime>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800134a:	f7ff fc3b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM1_Init+0x16c>)
 8001350:	f000 fc40 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3758      	adds	r7, #88	; 0x58
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20004560 	.word	0x20004560
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <MX_TIM2_Init+0xfc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013bc:	4828      	ldr	r0, [pc, #160]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013be:	f006 fef7 	bl	80081b0 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013c8:	f7ff fbfc 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4821      	ldr	r0, [pc, #132]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013da:	f007 fec3 	bl	8009164 <HAL_TIM_ConfigClockSource>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013e4:	f7ff fbee 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e8:	481d      	ldr	r0, [pc, #116]	; (8001460 <MX_TIM2_Init+0xfc>)
 80013ea:	f006 ff93 	bl	8008314 <HAL_TIM_PWM_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013f4:	f7ff fbe6 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4619      	mov	r1, r3
 8001406:	4816      	ldr	r0, [pc, #88]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001408:	f008 fd02 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001412:	f7ff fbd7 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001416:	2360      	movs	r3, #96	; 0x60
 8001418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2204      	movs	r2, #4
 800142a:	4619      	mov	r1, r3
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <MX_TIM2_Init+0xfc>)
 800142e:	f007 fdd7 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001438:	f7ff fbc4 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2208      	movs	r2, #8
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001444:	f007 fdcc 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800144e:	f7ff fbb9 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0xfc>)
 8001454:	f000 fbbe 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200045a8 	.word	0x200045a8

08001464 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08e      	sub	sp, #56	; 0x38
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <MX_TIM3_Init+0x110>)
 8001496:	4a38      	ldr	r2, [pc, #224]	; (8001578 <MX_TIM3_Init+0x114>)
 8001498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <MX_TIM3_Init+0x110>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <MX_TIM3_Init+0x110>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_TIM3_Init+0x110>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_TIM3_Init+0x110>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <MX_TIM3_Init+0x110>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ba:	482e      	ldr	r0, [pc, #184]	; (8001574 <MX_TIM3_Init+0x110>)
 80014bc:	f006 fe78 	bl	80081b0 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014c6:	f7ff fb7d 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d4:	4619      	mov	r1, r3
 80014d6:	4827      	ldr	r0, [pc, #156]	; (8001574 <MX_TIM3_Init+0x110>)
 80014d8:	f007 fe44 	bl	8009164 <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014e2:	f7ff fb6f 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_TIM3_Init+0x110>)
 80014e8:	f006 ff14 	bl	8008314 <HAL_TIM_PWM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014f2:	f7ff fb67 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	4619      	mov	r1, r3
 8001504:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_TIM3_Init+0x110>)
 8001506:	f008 fc83 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001510:	f7ff fb58 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	4619      	mov	r1, r3
 800152a:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_TIM3_Init+0x110>)
 800152c:	f007 fd58 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001536:	f7ff fb45 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2208      	movs	r2, #8
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_TIM3_Init+0x110>)
 8001542:	f007 fd4d 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800154c:	f7ff fb3a 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	220c      	movs	r2, #12
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM3_Init+0x110>)
 8001558:	f007 fd42 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001562:	f7ff fb2f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM3_Init+0x110>)
 8001568:	f000 fb34 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 800156c:	bf00      	nop
 800156e:	3738      	adds	r7, #56	; 0x38
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200045f0 	.word	0x200045f0
 8001578:	40000400 	.word	0x40000400

0800157c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015a8:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <MX_TIM4_Init+0xdc>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015cc:	4821      	ldr	r0, [pc, #132]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015ce:	f006 fdef 	bl	80081b0 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80015d8:	f7ff faf4 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	4619      	mov	r1, r3
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015ea:	f007 fdbb 	bl	8009164 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f7ff fae6 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015f8:	4816      	ldr	r0, [pc, #88]	; (8001654 <MX_TIM4_Init+0xd8>)
 80015fa:	f007 f895 	bl	8008728 <HAL_TIM_IC_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001604:	f7ff fade 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4619      	mov	r1, r3
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <MX_TIM4_Init+0xd8>)
 8001618:	f008 fbfa 	bl	8009e10 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001622:	f7ff facf 	bl	8000bc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	2204      	movs	r2, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM4_Init+0xd8>)
 800163e:	f007 fc33 	bl	8008ea8 <HAL_TIM_IC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001648:	f7ff fabc 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20004638 	.word	0x20004638
 8001658:	40000800 	.word	0x40000800

0800165c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a62      	ldr	r2, [pc, #392]	; (8001804 <HAL_TIM_Base_MspInit+0x1a8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	f040 80d2 	bne.w	8001824 <HAL_TIM_Base_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_TIM_Base_MspInit+0x1ac>)
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_TIM_Base_MspInit+0x1ac>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6453      	str	r3, [r2, #68]	; 0x44
 8001690:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_TIM_Base_MspInit+0x1ac>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800169c:	4b5b      	ldr	r3, [pc, #364]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 800169e:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <HAL_TIM_Base_MspInit+0x1b4>)
 80016a0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016a4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80016a8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016aa:	4b58      	ldr	r3, [pc, #352]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016ac:	2240      	movs	r2, #64	; 0x40
 80016ae:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016b6:	4b55      	ldr	r3, [pc, #340]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016da:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80016e2:	484a      	ldr	r0, [pc, #296]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016e4:	f000 fd9c 	bl	8002220 <HAL_DMA_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 80016ee:	f7ff fa69 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a45      	ldr	r2, [pc, #276]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
 80016f8:	4a44      	ldr	r2, [pc, #272]	; (800180c <HAL_TIM_Base_MspInit+0x1b0>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80016fe:	4b45      	ldr	r3, [pc, #276]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001700:	4a45      	ldr	r2, [pc, #276]	; (8001818 <HAL_TIM_Base_MspInit+0x1bc>)
 8001702:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001706:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800170a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170c:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 800171a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001726:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001728:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 800172a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800173c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001744:	4833      	ldr	r0, [pc, #204]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001746:	f000 fd6b 	bl	8002220 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 8001750:	f7ff fa38 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
 800175a:	4a2e      	ldr	r2, [pc, #184]	; (8001814 <HAL_TIM_Base_MspInit+0x1b8>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001762:	4a2f      	ldr	r2, [pc, #188]	; (8001820 <HAL_TIM_Base_MspInit+0x1c4>)
 8001764:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001768:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800176c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001770:	2240      	movs	r2, #64	; 0x40
 8001772:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 800177c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001780:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001788:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 800178c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001790:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 800179a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800179e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80017a6:	481d      	ldr	r0, [pc, #116]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 80017a8:	f000 fd3a 	bl	8002220 <HAL_DMA_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 80017b2:	f7ff fa07 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_TIM_Base_MspInit+0x1c0>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2105      	movs	r1, #5
 80017c6:	2018      	movs	r0, #24
 80017c8:	f000 fcfb 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017cc:	2018      	movs	r0, #24
 80017ce:	f000 fd14 	bl	80021fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	2019      	movs	r0, #25
 80017d8:	f000 fcf3 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017dc:	2019      	movs	r0, #25
 80017de:	f000 fd0c 	bl	80021fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	210f      	movs	r1, #15
 80017e6:	201a      	movs	r0, #26
 80017e8:	f000 fceb 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017ec:	201a      	movs	r0, #26
 80017ee:	f000 fd04 	bl	80021fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	201b      	movs	r0, #27
 80017f8:	f000 fce3 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017fc:	201b      	movs	r0, #27
 80017fe:	f000 fcfc 	bl	80021fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001802:	e1cb      	b.n	8001b9c <HAL_TIM_Base_MspInit+0x540>
 8001804:	40010000 	.word	0x40010000
 8001808:	40023800 	.word	0x40023800
 800180c:	20004680 	.word	0x20004680
 8001810:	40026428 	.word	0x40026428
 8001814:	200046e0 	.word	0x200046e0
 8001818:	40026440 	.word	0x40026440
 800181c:	20004740 	.word	0x20004740
 8001820:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182c:	f040 8090 	bne.w	8001950 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_TIM_Base_MspInit+0x2e0>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_TIM_Base_MspInit+0x2e0>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_TIM_Base_MspInit+0x2e0>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_TIM_Base_MspInit+0x2e8>)
 8001850:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001854:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001858:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 800185c:	2240      	movs	r2, #64	; 0x40
 800185e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001862:	2200      	movs	r2, #0
 8001864:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001874:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800188a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001892:	482b      	ldr	r0, [pc, #172]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 8001894:	f000 fcc4 	bl	8002220 <HAL_DMA_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 800189e:	f7ff f991 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 80018b2:	621a      	str	r2, [r3, #32]
 80018b4:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_TIM_Base_MspInit+0x2e4>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018bc:	4a23      	ldr	r2, [pc, #140]	; (800194c <HAL_TIM_Base_MspInit+0x2f0>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018c2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80018c6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001900:	4811      	ldr	r0, [pc, #68]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 8001902:	f000 fc8d 	bl	8002220 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_TIM_Base_MspInit+0x2b4>
      Error_Handler();
 800190c:	f7ff f95a 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_TIM_Base_MspInit+0x2ec>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2105      	movs	r1, #5
 800192c:	201c      	movs	r0, #28
 800192e:	f000 fc48 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001932:	201c      	movs	r0, #28
 8001934:	f000 fc61 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001938:	e130      	b.n	8001b9c <HAL_TIM_Base_MspInit+0x540>
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	200047a0 	.word	0x200047a0
 8001944:	40026028 	.word	0x40026028
 8001948:	20004800 	.word	0x20004800
 800194c:	400260a0 	.word	0x400260a0
  else if(tim_baseHandle->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a93      	ldr	r2, [pc, #588]	; (8001ba4 <HAL_TIM_Base_MspInit+0x548>)
 8001956:	4293      	cmp	r3, r2
 8001958:	f040 80b6 	bne.w	8001ac8 <HAL_TIM_Base_MspInit+0x46c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	4b91      	ldr	r3, [pc, #580]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a90      	ldr	r2, [pc, #576]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b8e      	ldr	r3, [pc, #568]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001978:	4b8c      	ldr	r3, [pc, #560]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 800197a:	4a8d      	ldr	r2, [pc, #564]	; (8001bb0 <HAL_TIM_Base_MspInit+0x554>)
 800197c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800197e:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 8001980:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001984:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b87      	ldr	r3, [pc, #540]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 8001994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001998:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199a:	4b84      	ldr	r3, [pc, #528]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 800199c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a2:	4b82      	ldr	r3, [pc, #520]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80019aa:	4b80      	ldr	r3, [pc, #512]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019b0:	4b7e      	ldr	r3, [pc, #504]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b8:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80019be:	487b      	ldr	r0, [pc, #492]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019c0:	f000 fc2e 	bl	8002220 <HAL_DMA_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_TIM_Base_MspInit+0x372>
      Error_Handler();
 80019ca:	f7ff f8fb 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a76      	ldr	r2, [pc, #472]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
 80019d4:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a73      	ldr	r2, [pc, #460]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
 80019e0:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_TIM_Base_MspInit+0x550>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 80019e8:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_TIM_Base_MspInit+0x55c>)
 80019ea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 80019ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a0e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a10:	4b68      	ldr	r3, [pc, #416]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001a18:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a24:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8001a2c:	4861      	ldr	r0, [pc, #388]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a2e:	f000 fbf7 	bl	8002220 <HAL_DMA_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_TIM_Base_MspInit+0x3e0>
      Error_Handler();
 8001a38:	f7ff f8c4 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a42:	4a5c      	ldr	r2, [pc, #368]	; (8001bb4 <HAL_TIM_Base_MspInit+0x558>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001a48:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	; (8001bc0 <HAL_TIM_Base_MspInit+0x564>)
 8001a4c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a50:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001a54:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a56:	4b59      	ldr	r3, [pc, #356]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a58:	2240      	movs	r2, #64	; 0x40
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001a62:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a6a:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001a7a:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a80:	4b4e      	ldr	r3, [pc, #312]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a86:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a8e:	484b      	ldr	r0, [pc, #300]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001a90:	f000 fbc6 	bl	8002220 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_TIM_Base_MspInit+0x442>
      Error_Handler();
 8001a9a:	f7ff f893 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a46      	ldr	r2, [pc, #280]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa4:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a43      	ldr	r2, [pc, #268]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001aae:	621a      	str	r2, [r3, #32]
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_TIM_Base_MspInit+0x560>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2105      	movs	r1, #5
 8001aba:	201d      	movs	r0, #29
 8001abc:	f000 fb81 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ac0:	201d      	movs	r0, #29
 8001ac2:	f000 fb9a 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001ac6:	e069      	b.n	8001b9c <HAL_TIM_Base_MspInit+0x540>
  else if(tim_baseHandle->Instance==TIM4)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <HAL_TIM_Base_MspInit+0x568>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d164      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x540>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a2c      	ldr	r2, [pc, #176]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_TIM_Base_MspInit+0x54c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IC_IN_TIM4_CH2_Pin;
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_IN_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4828      	ldr	r0, [pc, #160]	; (8001bc8 <HAL_TIM_Base_MspInit+0x56c>)
 8001b26:	f000 ff97 	bl	8002a58 <HAL_GPIO_Init>
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b2c:	4a28      	ldr	r2, [pc, #160]	; (8001bd0 <HAL_TIM_Base_MspInit+0x574>)
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b36:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b4a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b52:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b68:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001b70:	4816      	ldr	r0, [pc, #88]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b72:	f000 fb55 	bl	8002220 <HAL_DMA_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_TIM_Base_MspInit+0x524>
      Error_Handler();
 8001b7c:	f7ff f822 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_TIM_Base_MspInit+0x570>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	201e      	movs	r0, #30
 8001b92:	f000 fb16 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b96:	201e      	movs	r0, #30
 8001b98:	f000 fb2f 	bl	80021fa <HAL_NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	20004860 	.word	0x20004860
 8001bb0:	40026070 	.word	0x40026070
 8001bb4:	200048c0 	.word	0x200048c0
 8001bb8:	400260b8 	.word	0x400260b8
 8001bbc:	20004920 	.word	0x20004920
 8001bc0:	40026040 	.word	0x40026040
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	20004980 	.word	0x20004980
 8001bd0:	40026058 	.word	0x40026058

08001bd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a46      	ldr	r2, [pc, #280]	; (8001d0c <HAL_TIM_MspPostInit+0x138>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d13e      	bne.n	8001c74 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	4b45      	ldr	r3, [pc, #276]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b3e      	ldr	r3, [pc, #248]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4832      	ldr	r0, [pc, #200]	; (8001d14 <HAL_TIM_MspPostInit+0x140>)
 8001c4c:	f000 ff04 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	482a      	ldr	r0, [pc, #168]	; (8001d18 <HAL_TIM_MspPostInit+0x144>)
 8001c6e:	f000 fef3 	bl	8002a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c72:	e047      	b.n	8001d04 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d11f      	bne.n	8001cbe <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001c9a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cac:	2301      	movs	r3, #1
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4817      	ldr	r0, [pc, #92]	; (8001d14 <HAL_TIM_MspPostInit+0x140>)
 8001cb8:	f000 fece 	bl	8002a58 <HAL_GPIO_Init>
}
 8001cbc:	e022      	b.n	8001d04 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM3)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <HAL_TIM_MspPostInit+0x148>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d11d      	bne.n	8001d04 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_TIM_MspPostInit+0x13c>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001ce4:	2313      	movs	r3, #19
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_TIM_MspPostInit+0x140>)
 8001d00:	f000 feaa 	bl	8002a58 <HAL_GPIO_Init>
}
 8001d04:	bf00      	nop
 8001d06:	3730      	adds	r7, #48	; 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40000400 	.word	0x40000400

08001d20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART1_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART1_UART_Init+0x4c>)
 8001d58:	f008 f92e 	bl	8009fb8 <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d62:	f7fe ff2f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200049e0 	.word	0x200049e0
 8001d70:	40011000 	.word	0x40011000

08001d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a55      	ldr	r2, [pc, #340]	; (8001ee8 <HAL_UART_MspInit+0x174>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 80a4 	bne.w	8001ee0 <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6453      	str	r3, [r2, #68]	; 0x44
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_UART_MspInit+0x178>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de2:	2307      	movs	r3, #7
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4840      	ldr	r0, [pc, #256]	; (8001ef0 <HAL_UART_MspInit+0x17c>)
 8001dee:	f000 fe33 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e04:	2307      	movs	r3, #7
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4838      	ldr	r0, [pc, #224]	; (8001ef0 <HAL_UART_MspInit+0x17c>)
 8001e10:	f000 fe22 	bl	8002a58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e16:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <HAL_UART_MspInit+0x184>)
 8001e18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e36:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e48:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e56:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e58:	f000 f9e2 	bl	8002220 <HAL_DMA_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001e62:	f7fe feaf 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_UART_MspInit+0x180>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e74:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_UART_MspInit+0x18c>)
 8001e76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001ea8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eb4:	4811      	ldr	r0, [pc, #68]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001eb6:	f000 f9b3 	bl	8002220 <HAL_DMA_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8001ec0:	f7fe fe80 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_UART_MspInit+0x188>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2105      	movs	r1, #5
 8001ed4:	2025      	movs	r0, #37	; 0x25
 8001ed6:	f000 f974 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eda:	2025      	movs	r0, #37	; 0x25
 8001edc:	f000 f98d 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	20004a24 	.word	0x20004a24
 8001ef8:	40026488 	.word	0x40026488
 8001efc:	20004a84 	.word	0x20004a84
 8001f00:	400264b8 	.word	0x400264b8

08001f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0a:	490e      	ldr	r1, [pc, #56]	; (8001f44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f20:	4c0b      	ldr	r4, [pc, #44]	; (8001f50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f2e:	f7ff f94d 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f32:	f011 fdc9 	bl	8013ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f36:	f7fe fd63 	bl	8000a00 <main>
  bx  lr    
 8001f3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001f48:	08014174 	.word	0x08014174
  ldr r2, =_sbss
 8001f4c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001f50:	2000baac 	.word	0x2000baac

08001f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <HAL_Init+0x40>)
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HAL_Init+0x40>)
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x40>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 f913 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	200f      	movs	r0, #15
 8001f88:	f7fe ffa8 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7fe ff72 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20004ae4 	.word	0x20004ae4

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20004ae4 	.word	0x20004ae4

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002040:	4013      	ands	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800204c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <__NVIC_SetPriorityGrouping+0x44>)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	60d3      	str	r3, [r2, #12]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <__NVIC_GetPriorityGrouping+0x18>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	f003 0307 	and.w	r3, r3, #7
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	2b00      	cmp	r3, #0
 8002098:	db0b      	blt.n	80020b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	f003 021f 	and.w	r2, r3, #31
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <__NVIC_EnableIRQ+0x38>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2001      	movs	r0, #1
 80020aa:	fa00 f202 	lsl.w	r2, r0, r2
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	; (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	; (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002184:	f3bf 8f4f 	dsb	sy
}
 8002188:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <__NVIC_SystemReset+0x24>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002192:	4904      	ldr	r1, [pc, #16]	; (80021a4 <__NVIC_SystemReset+0x24>)
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <__NVIC_SystemReset+0x28>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800219a:	f3bf 8f4f 	dsb	sy
}
 800219e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <__NVIC_SystemReset+0x20>
 80021a4:	e000ed00 	.word	0xe000ed00
 80021a8:	05fa0004 	.word	0x05fa0004

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff35 	bl	8002024 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff4a 	bl	800206c <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff9a 	bl	8002118 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff69 	bl	80020c4 <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff3d 	bl	8002088 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800221a:	f7ff ffb1 	bl	8002180 <__NVIC_SystemReset>
	...

08002220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff feca 	bl	8001fc4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e099      	b.n	8002370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e00f      	b.n	800227e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff feb1 	bl	8001fc4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d908      	bls.n	800227e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e078      	b.n	8002370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e8      	bne.n	800225e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_DMA_Init+0x158>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4313      	orrs	r3, r2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b04      	cmp	r3, #4
 8002310:	d117      	bne.n	8002342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fb1b 	bl	8002960 <DMA_CheckFifoParam>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800233e:	2301      	movs	r3, #1
 8002340:	e016      	b.n	8002370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fad2 	bl	80028f4 <DMA_CalcBaseAndBitshift>
 8002350:	4603      	mov	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	223f      	movs	r2, #63	; 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	f010803f 	.word	0xf010803f

0800237c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Start_IT+0x26>
 800239e:	2302      	movs	r3, #2
 80023a0:	e040      	b.n	8002424 <HAL_DMA_Start_IT+0xa8>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d12f      	bne.n	8002416 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fa64 	bl	8002898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0216 	orr.w	r2, r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e005      	b.n	8002422 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7ff fdc3 	bl	8001fc4 <HAL_GetTick>
 800243e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d008      	beq.n	800245e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e052      	b.n	8002504 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0216 	bic.w	r2, r2, #22
 800246c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_DMA_Abort+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	e013      	b.n	80024d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b0:	f7ff fd88 	bl	8001fc4 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d90c      	bls.n	80024d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2203      	movs	r2, #3
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e015      	b.n	8002504 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e4      	bne.n	80024b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	223f      	movs	r2, #63	; 0x3f
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d004      	beq.n	800252a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00c      	b.n	8002544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2205      	movs	r2, #5
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800255c:	4b8e      	ldr	r3, [pc, #568]	; (8002798 <HAL_DMA_IRQHandler+0x248>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a8e      	ldr	r2, [pc, #568]	; (800279c <HAL_DMA_IRQHandler+0x24c>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a9b      	lsrs	r3, r3, #10
 8002568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2208      	movs	r2, #8
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01a      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2208      	movs	r2, #8
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0202 	orr.w	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2204      	movs	r2, #4
 80025f8:	409a      	lsls	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d012      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	2204      	movs	r2, #4
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f043 0204 	orr.w	r2, r3, #4
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2210      	movs	r2, #16
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d043      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d03c      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2210      	movs	r2, #16
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d018      	beq.n	8002692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d024      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	4798      	blx	r3
 800267e:	e01f      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01b      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
 8002690:	e016      	b.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0208 	bic.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2220      	movs	r2, #32
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 808f 	beq.w	80027f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8087 	beq.w	80027f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2220      	movs	r2, #32
 80026e8:	409a      	lsls	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d136      	bne.n	8002768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0216 	bic.w	r2, r2, #22
 8002708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <HAL_DMA_IRQHandler+0x1da>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0208 	bic.w	r2, r2, #8
 8002738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273e:	223f      	movs	r2, #63	; 0x3f
 8002740:	409a      	lsls	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	2b00      	cmp	r3, #0
 800275c:	d07e      	beq.n	800285c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
        }
        return;
 8002766:	e079      	b.n	800285c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01d      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	2b00      	cmp	r3, #0
 800278a:	d031      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e02c      	b.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
 80027b0:	e01e      	b.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0210 	bic.w	r2, r2, #16
 80027ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d032      	beq.n	800285e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d022      	beq.n	800284a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2205      	movs	r2, #5
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3301      	adds	r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d307      	bcc.n	8002838 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f2      	bne.n	800281c <HAL_DMA_IRQHandler+0x2cc>
 8002836:	e000      	b.n	800283a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002838:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
 800285a:	e000      	b.n	800285e <HAL_DMA_IRQHandler+0x30e>
        return;
 800285c:	bf00      	nop
    }
  }
}
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d108      	bne.n	80028d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028d6:	e007      	b.n	80028e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3b10      	subs	r3, #16
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <DMA_CalcBaseAndBitshift+0x64>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <DMA_CalcBaseAndBitshift+0x68>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d909      	bls.n	8002936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	; 0x58
 8002934:	e007      	b.n	8002946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	aaaaaaab 	.word	0xaaaaaaab
 800295c:	08013c08 	.word	0x08013c08

08002960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11f      	bne.n	80029ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d856      	bhi.n	8002a2e <DMA_CheckFifoParam+0xce>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <DMA_CheckFifoParam+0x28>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002999 	.word	0x08002999
 800298c:	080029ab 	.word	0x080029ab
 8002990:	08002999 	.word	0x08002999
 8002994:	08002a2f 	.word	0x08002a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d046      	beq.n	8002a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e043      	b.n	8002a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b2:	d140      	bne.n	8002a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e03d      	b.n	8002a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d121      	bne.n	8002a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d837      	bhi.n	8002a3a <DMA_CheckFifoParam+0xda>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <DMA_CheckFifoParam+0x70>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029e7 	.word	0x080029e7
 80029d8:	080029e1 	.word	0x080029e1
 80029dc:	080029f9 	.word	0x080029f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e030      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d025      	beq.n	8002a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f6:	e022      	b.n	8002a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a00:	d11f      	bne.n	8002a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a06:	e01c      	b.n	8002a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d903      	bls.n	8002a16 <DMA_CheckFifoParam+0xb6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a14:	e018      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1a:	e015      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	e00b      	b.n	8002a46 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e00a      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e008      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e006      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e004      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
    }
  } 
  
  return status; 
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e159      	b.n	8002d28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8148 	bne.w	8002d22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a2 	beq.w	8002d22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <HAL_GPIO_Init+0x2e8>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a56      	ldr	r2, [pc, #344]	; (8002d40 <HAL_GPIO_Init+0x2e8>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_GPIO_Init+0x2e8>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x2ec>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_GPIO_Init+0x2f0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d019      	beq.n	8002c5a <HAL_GPIO_Init+0x202>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a48      	ldr	r2, [pc, #288]	; (8002d4c <HAL_GPIO_Init+0x2f4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d013      	beq.n	8002c56 <HAL_GPIO_Init+0x1fe>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a47      	ldr	r2, [pc, #284]	; (8002d50 <HAL_GPIO_Init+0x2f8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00d      	beq.n	8002c52 <HAL_GPIO_Init+0x1fa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a46      	ldr	r2, [pc, #280]	; (8002d54 <HAL_GPIO_Init+0x2fc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x1f6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a45      	ldr	r2, [pc, #276]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_GPIO_Init+0x1f2>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e008      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e004      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x204>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f002 0203 	and.w	r2, r2, #3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4093      	lsls	r3, r2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6c:	4935      	ldr	r1, [pc, #212]	; (8002d44 <HAL_GPIO_Init+0x2ec>)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9e:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	f67f aea2 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3724      	adds	r7, #36	; 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40013800 	.word	0x40013800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d7c:	e003      	b.n	8002d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	619a      	str	r2, [r3, #24]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e12b      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fd7a 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f003 ffba 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a81      	ldr	r2, [pc, #516]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x84>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a80      	ldr	r2, [pc, #512]	; (800300c <HAL_I2C_Init+0x278>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x92>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a7d      	ldr	r2, [pc, #500]	; (8003010 <HAL_I2C_Init+0x27c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0e7      	b.n	8002ffe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a78      	ldr	r2, [pc, #480]	; (8003014 <HAL_I2C_Init+0x280>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xd4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xe8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_I2C_Init+0x284>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	495c      	ldr	r1, [pc, #368]	; (8003008 <HAL_I2C_Init+0x274>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_I2C_Init+0x13c>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_I2C_Init+0x138>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	e051      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e04f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_I2C_Init+0x168>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Init+0x18e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Init+0x196>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e022      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10e      	bne.n	8002f50 <HAL_I2C_Init+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1e58      	subs	r0, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	440b      	add	r3, r1
 8002f40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Init+0x1dc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	6809      	ldr	r1, [r1, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6911      	ldr	r1, [r2, #16]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	000186a0 	.word	0x000186a0
 800300c:	001e847f 	.word	0x001e847f
 8003010:	003d08ff 	.word	0x003d08ff
 8003014:	431bde83 	.word	0x431bde83
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003038:	2b28      	cmp	r3, #40	; 0x28
 800303a:	f040 811e 	bne.w	800327a <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e116      	b.n	800327c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8003058:	2302      	movs	r3, #2
 800305a:	e10f      	b.n	800327c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003072:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b2a      	cmp	r3, #42	; 0x2a
 800307e:	d127      	bne.n	80030d0 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d14c      	bne.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	d048      	beq.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	4a75      	ldr	r2, [pc, #468]	; (8003284 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80030ae:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fa29 	bl	800250c <HAL_DMA_Abort_IT>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d034      	beq.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ca:	4610      	mov	r0, r2
 80030cc:	4798      	blx	r3
 80030ce:	e02c      	b.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b29      	cmp	r3, #41	; 0x29
 80030da:	d126      	bne.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ea:	d11e      	bne.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fa:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	4a5e      	ldr	r2, [pc, #376]	; (8003284 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800310a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f9fb 	bl	800250c <HAL_DMA_Abort_IT>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003126:	4610      	mov	r0, r2
 8003128:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	222a      	movs	r2, #42	; 0x2a
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d022      	beq.n	80031d8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	4a3c      	ldr	r2, [pc, #240]	; (8003288 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	4a3b      	ldr	r2, [pc, #236]	; (800328c <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 80031a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	2200      	movs	r2, #0
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3310      	adds	r3, #16
 80031bc:	4619      	mov	r1, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	f7ff f8d8 	bl	800237c <HAL_DMA_Start_IT>
 80031cc:	4603      	mov	r3, r0
 80031ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d13d      	bne.n	8003252 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80031d6:	e013      	b.n	8003200 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2228      	movs	r2, #40	; 0x28
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03d      	b.n	800327c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323c:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800324c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e014      	b.n	800327c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	08004cad 	.word	0x08004cad
 8003288:	08004a89 	.word	0x08004a89
 800328c:	08004c33 	.word	0x08004c33

08003290 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d124      	bne.n	80032ee <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2228      	movs	r2, #40	; 0x28
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d007      	beq.n	80032ca <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032e8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b10      	cmp	r3, #16
 800332a:	d003      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x38>
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	f040 80c1 	bne.w	80034b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_I2C_EV_IRQHandler+0x6e>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003354:	d003      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x62>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800335c:	d101      	bne.n	8003362 <HAL_I2C_EV_IRQHandler+0x66>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_I2C_EV_IRQHandler+0x68>
 8003362:	2300      	movs	r3, #0
 8003364:	2b01      	cmp	r3, #1
 8003366:	f000 8132 	beq.w	80035ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00c      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x92>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f001 fd6d 	bl	8004e60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fd63 	bl	8003e52 <I2C_Master_SB>
 800338c:	e092      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0xb2>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	0a5b      	lsrs	r3, r3, #9
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fdd9 	bl	8003f5e <I2C_Master_ADD10>
 80033ac:	e082      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0xd2>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0a5b      	lsrs	r3, r3, #9
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fdf3 	bl	8003fb2 <I2C_Master_ADDR>
 80033cc:	e072      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	089b      	lsrs	r3, r3, #2
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03b      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	f000 80f3 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	09db      	lsrs	r3, r3, #7
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00f      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0x11c>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0x11c>
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f9d3 	bl	80037bc <I2C_MasterTransmit_TXE>
 8003416:	e04d      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80d6 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	0a5b      	lsrs	r3, r3, #9
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80cf 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	2b21      	cmp	r3, #33	; 0x21
 8003438:	d103      	bne.n	8003442 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa5a 	bl	80038f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003440:	e0c7      	b.n	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	f040 80c4 	bne.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fac8 	bl	80039e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003450:	e0bf      	b.n	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	f000 80b7 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <HAL_I2C_EV_IRQHandler+0x194>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HAL_I2C_EV_IRQHandler+0x194>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb3d 	bl	8003b08 <I2C_MasterReceive_RXNE>
 800348e:	e011      	b.n	80034b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 809a 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	0a5b      	lsrs	r3, r3, #9
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8093 	beq.w	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fbe6 	bl	8003c7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b2:	e08e      	b.n	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034b4:	e08d      	b.n	80035d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e007      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x20e>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	0a5b      	lsrs	r3, r3, #9
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 ffa4 	bl	8004450 <I2C_Slave_ADDR>
 8003508:	e066      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_I2C_EV_IRQHandler+0x22e>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	0a5b      	lsrs	r3, r3, #9
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 ffde 	bl	80044e4 <I2C_Slave_STOPF>
 8003528:	e056      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d002      	beq.n	8003536 <HAL_I2C_EV_IRQHandler+0x23a>
 8003530:	7bbb      	ldrb	r3, [r7, #14]
 8003532:	2b29      	cmp	r3, #41	; 0x29
 8003534:	d125      	bne.n	8003582 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	09db      	lsrs	r3, r3, #7
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00f      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x266>
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	0a9b      	lsrs	r3, r3, #10
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x266>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 feba 	bl	80042d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003560:	e039      	b.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d033      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	0a5b      	lsrs	r3, r3, #9
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02d      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fee7 	bl	800434e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003580:	e029      	b.n	80035d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	0a9b      	lsrs	r3, r3, #10
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fef2 	bl	8004390 <I2C_SlaveReceive_RXNE>
 80035ac:	e014      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	0a5b      	lsrs	r3, r3, #9
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 ff20 	bl	800440c <I2C_SlaveReceive_BTF>
 80035cc:	e004      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b08a      	sub	sp, #40	; 0x28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00e      	beq.n	800362c <HAL_I2C_ER_IRQHandler+0x4e>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800362a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	0a5b      	lsrs	r3, r3, #9
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_I2C_ER_IRQHandler+0x78>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003654:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	0a9b      	lsrs	r3, r3, #10
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d03f      	beq.n	80036e2 <HAL_I2C_ER_IRQHandler+0x104>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d039      	beq.n	80036e2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800366e:	7efb      	ldrb	r3, [r7, #27]
 8003670:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003688:	7ebb      	ldrb	r3, [r7, #26]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d112      	bne.n	80036b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10f      	bne.n	80036b4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b21      	cmp	r3, #33	; 0x21
 8003698:	d008      	beq.n	80036ac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b29      	cmp	r3, #41	; 0x29
 800369e:	d005      	beq.n	80036ac <HAL_I2C_ER_IRQHandler+0xce>
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b28      	cmp	r3, #40	; 0x28
 80036a4:	d106      	bne.n	80036b4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b21      	cmp	r3, #33	; 0x21
 80036aa:	d103      	bne.n	80036b4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f001 f849 	bl	8004744 <I2C_Slave_AF>
 80036b2:	e016      	b.n	80036e2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f043 0304 	orr.w	r3, r3, #4
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036c6:	7efb      	ldrb	r3, [r7, #27]
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d002      	beq.n	80036d2 <HAL_I2C_ER_IRQHandler+0xf4>
 80036cc:	7efb      	ldrb	r3, [r7, #27]
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	d107      	bne.n	80036e2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	0adb      	lsrs	r3, r3, #11
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <HAL_I2C_ER_IRQHandler+0x12e>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f043 0308 	orr.w	r3, r3, #8
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800370a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f001 f880 	bl	8004824 <I2C_ITError>
  }
}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d150      	bne.n	8003884 <I2C_MasterTransmit_TXE+0xc8>
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b21      	cmp	r3, #33	; 0x21
 80037e6:	d14d      	bne.n	8003884 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d01d      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d01a      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037fa:	d016      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800380a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2211      	movs	r2, #17
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff82 	bl	800372c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003828:	e060      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003838:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003848:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d107      	bne.n	8003874 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff7b 	bl	8003768 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003872:	e03b      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff55 	bl	800372c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003882:	e033      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b21      	cmp	r3, #33	; 0x21
 8003888:	d005      	beq.n	8003896 <I2C_MasterTransmit_TXE+0xda>
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d12d      	bne.n	80038ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b22      	cmp	r3, #34	; 0x22
 8003894:	d12a      	bne.n	80038ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038b0:	e01c      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d103      	bne.n	80038c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f88e 	bl	80039e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80038c4:	e012      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038ea:	e7ff      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b21      	cmp	r3, #33	; 0x21
 800390c:	d164      	bne.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800393c:	e04c      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d01d      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b20      	cmp	r3, #32
 8003948:	d01a      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003950:	d016      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003960:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2211      	movs	r2, #17
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fed7 	bl	800372c <HAL_I2C_MasterTxCpltCallback>
}
 800397e:	e02b      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800398e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d107      	bne.n	80039ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fed0 	bl	8003768 <HAL_I2C_MemTxCpltCallback>
}
 80039c8:	e006      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff feaa 	bl	800372c <HAL_I2C_MasterTxCpltCallback>
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10b      	bne.n	8003a18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a16:	e073      	b.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	121b      	asrs	r3, r3, #8
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a32:	e065      	b.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10b      	bne.n	8003a54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a52:	e055      	b.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d151      	bne.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b22      	cmp	r3, #34	; 0x22
 8003a60:	d10d      	bne.n	8003a7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a7c:	e040      	b.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b21      	cmp	r3, #33	; 0x21
 8003a8c:	d112      	bne.n	8003ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ab2:	e025      	b.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d120      	bne.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b21      	cmp	r3, #33	; 0x21
 8003ac2:	d11d      	bne.n	8003b00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ad2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe34 	bl	8003768 <HAL_I2C_MemTxCpltCallback>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b22      	cmp	r3, #34	; 0x22
 8003b1a:	f040 80ac 	bne.w	8003c76 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d921      	bls.n	8003b70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	f040 808c 	bne.w	8003c76 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b6e:	e082      	b.n	8003c76 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d075      	beq.n	8003c64 <I2C_MasterReceive_RXNE+0x15c>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d002      	beq.n	8003b84 <I2C_MasterReceive_RXNE+0x7c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d16f      	bne.n	8003c64 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f001 f939 	bl	8004dfc <I2C_WaitOnSTOPRequestThroughIT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d142      	bne.n	8003c16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d10a      	bne.n	8003c00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fdbf 	bl	800377c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bfe:	e03a      	b.n	8003c76 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2212      	movs	r2, #18
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fd96 	bl	8003740 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c14:	e02f      	b.n	8003c76 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f00d fcd9 	bl	8011614 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c62:	e008      	b.n	8003c76 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	605a      	str	r2, [r3, #4]
}
 8003c74:	e7ff      	b.n	8003c76 <I2C_MasterReceive_RXNE+0x16e>
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d11b      	bne.n	8003cce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ccc:	e0bd      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d129      	bne.n	8003d2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00a      	beq.n	8003d04 <I2C_MasterReceive_BTF+0x86>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d007      	beq.n	8003d04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d2a:	e08e      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d176      	bne.n	8003e24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d002      	beq.n	8003d42 <I2C_MasterReceive_BTF+0xc4>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d108      	bne.n	8003d54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e019      	b.n	8003d88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d002      	beq.n	8003d60 <I2C_MasterReceive_BTF+0xe2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d108      	bne.n	8003d72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e00a      	b.n	8003d88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d007      	beq.n	8003d88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003de2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d10a      	bne.n	8003e0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fcb8 	bl	800377c <HAL_I2C_MemRxCpltCallback>
}
 8003e0c:	e01d      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2212      	movs	r2, #18
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fc8f 	bl	8003740 <HAL_I2C_MasterRxCpltCallback>
}
 8003e22:	e012      	b.n	8003e4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d117      	bne.n	8003e96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e80:	e067      	b.n	8003f52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]
}
 8003e94:	e05d      	b.n	8003f52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9e:	d133      	bne.n	8003f08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b21      	cmp	r3, #33	; 0x21
 8003eaa:	d109      	bne.n	8003ec0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ebc:	611a      	str	r2, [r3, #16]
 8003ebe:	e008      	b.n	8003ed2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <I2C_Master_SB+0x92>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d032      	beq.n	8003f52 <I2C_Master_SB+0x100>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02d      	beq.n	8003f52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f04:	605a      	str	r2, [r3, #4]
}
 8003f06:	e024      	b.n	8003f52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10e      	bne.n	8003f2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	11db      	asrs	r3, r3, #7
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0306 	and.w	r3, r3, #6
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f063 030f 	orn	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	611a      	str	r2, [r3, #16]
}
 8003f2c:	e011      	b.n	8003f52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10d      	bne.n	8003f52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	11db      	asrs	r3, r3, #7
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f003 0306 	and.w	r3, r3, #6
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f063 030e 	orn	r3, r3, #14
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <I2C_Master_ADD10+0x26>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00c      	beq.n	8003fa6 <I2C_Master_ADD10+0x48>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa4:	605a      	str	r2, [r3, #4]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b091      	sub	sp, #68	; 0x44
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b22      	cmp	r3, #34	; 0x22
 8003fda:	f040 8169 	bne.w	80042b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <I2C_Master_ADDR+0x54>
 8003fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d10b      	bne.n	8004006 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	e160      	b.n	80042c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11d      	bne.n	800404a <I2C_Master_ADDR+0x98>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004016:	d118      	bne.n	800404a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	651a      	str	r2, [r3, #80]	; 0x50
 8004048:	e13e      	b.n	80042c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004054:	2300      	movs	r3, #0
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e115      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	f040 808a 	bne.w	800419c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800408e:	d137      	bne.n	8004100 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ae:	d113      	bne.n	80040d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	e0e7      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	623b      	str	r3, [r7, #32]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e0d3      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	2b08      	cmp	r3, #8
 8004104:	d02e      	beq.n	8004164 <I2C_Master_ADDR+0x1b2>
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	2b20      	cmp	r3, #32
 800410a:	d02b      	beq.n	8004164 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	2b12      	cmp	r3, #18
 8004110:	d102      	bne.n	8004118 <I2C_Master_ADDR+0x166>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b01      	cmp	r3, #1
 8004116:	d125      	bne.n	8004164 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00e      	beq.n	800413c <I2C_Master_ADDR+0x18a>
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	2b02      	cmp	r3, #2
 8004122:	d00b      	beq.n	800413c <I2C_Master_ADDR+0x18a>
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b10      	cmp	r3, #16
 8004128:	d008      	beq.n	800413c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e007      	b.n	800414c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800414a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	61fb      	str	r3, [r7, #28]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	e0a1      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e085      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d14d      	bne.n	8004242 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d016      	beq.n	80041da <I2C_Master_ADDR+0x228>
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d013      	beq.n	80041da <I2C_Master_ADDR+0x228>
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d010      	beq.n	80041da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e007      	b.n	80041ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f8:	d117      	bne.n	800422a <I2C_Master_ADDR+0x278>
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004200:	d00b      	beq.n	800421a <I2C_Master_ADDR+0x268>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b01      	cmp	r3, #1
 8004206:	d008      	beq.n	800421a <I2C_Master_ADDR+0x268>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	2b08      	cmp	r3, #8
 800420c:	d005      	beq.n	800421a <I2C_Master_ADDR+0x268>
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b10      	cmp	r3, #16
 8004212:	d002      	beq.n	800421a <I2C_Master_ADDR+0x268>
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2b20      	cmp	r3, #32
 8004218:	d107      	bne.n	800422a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004228:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	e032      	b.n	80042a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004250:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d117      	bne.n	8004292 <I2C_Master_ADDR+0x2e0>
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004268:	d00b      	beq.n	8004282 <I2C_Master_ADDR+0x2d0>
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b01      	cmp	r3, #1
 800426e:	d008      	beq.n	8004282 <I2C_Master_ADDR+0x2d0>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b08      	cmp	r3, #8
 8004274:	d005      	beq.n	8004282 <I2C_Master_ADDR+0x2d0>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b10      	cmp	r3, #16
 800427a:	d002      	beq.n	8004282 <I2C_Master_ADDR+0x2d0>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b20      	cmp	r3, #32
 8004280:	d107      	bne.n	8004292 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004290:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042ae:	e00b      	b.n	80042c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
}
 80042c6:	e7ff      	b.n	80042c8 <I2C_Master_ADDR+0x316>
 80042c8:	bf00      	nop
 80042ca:	3744      	adds	r7, #68	; 0x44
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02b      	beq.n	8004346 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <I2C_SlaveTransmit_TXE+0x72>
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b29      	cmp	r3, #41	; 0x29
 8004320:	d111      	bne.n	8004346 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004330:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2221      	movs	r2, #33	; 0x21
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2228      	movs	r2, #40	; 0x28
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff fa07 	bl	8003754 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02c      	beq.n	8004404 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d114      	bne.n	8004404 <I2C_SlaveReceive_RXNE+0x74>
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b2a      	cmp	r3, #42	; 0x2a
 80043de:	d111      	bne.n	8004404 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2222      	movs	r2, #34	; 0x22
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2228      	movs	r2, #40	; 0x28
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f00d f8dc 	bl	80115bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800446a:	2b28      	cmp	r3, #40	; 0x28
 800446c:	d127      	bne.n	80044be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	09db      	lsrs	r3, r3, #7
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	81bb      	strh	r3, [r7, #12]
 80044a0:	e002      	b.n	80044a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044b0:	89ba      	ldrh	r2, [r7, #12]
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f00d f852 	bl	8011560 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044bc:	e00e      	b.n	80044dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004502:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004540:	d172      	bne.n	8004628 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b22      	cmp	r3, #34	; 0x22
 8004546:	d002      	beq.n	800454e <I2C_Slave_STOPF+0x6a>
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b2a      	cmp	r3, #42	; 0x2a
 800454c:	d135      	bne.n	80045ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0204 	orr.w	r2, r3, #4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe f96c 	bl	8002864 <HAL_DMA_GetState>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d049      	beq.n	8004626 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <I2C_Slave_STOPF+0x258>)
 8004598:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fd ffb4 	bl	800250c <HAL_DMA_Abort_IT>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03d      	beq.n	8004626 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b4:	4610      	mov	r0, r2
 80045b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b8:	e035      	b.n	8004626 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe f936 	bl	8002864 <HAL_DMA_GetState>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d014      	beq.n	8004628 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <I2C_Slave_STOPF+0x258>)
 8004604:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	4618      	mov	r0, r3
 800460c:	f7fd ff7e 	bl	800250c <HAL_DMA_Abort_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
 8004624:	e000      	b.n	8004628 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004626:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03e      	beq.n	80046b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d112      	bne.n	8004666 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d112      	bne.n	800469a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8b3 	bl	8004824 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046be:	e039      	b.n	8004734 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b2a      	cmp	r3, #42	; 0x2a
 80046c4:	d109      	bne.n	80046da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2228      	movs	r2, #40	; 0x28
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f00c ff71 	bl	80115bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b28      	cmp	r3, #40	; 0x28
 80046e4:	d111      	bne.n	800470a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <I2C_Slave_STOPF+0x25c>)
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f00c ff4c 	bl	80115a0 <HAL_I2C_ListenCpltCallback>
}
 8004708:	e014      	b.n	8004734 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	2b22      	cmp	r3, #34	; 0x22
 8004710:	d002      	beq.n	8004718 <I2C_Slave_STOPF+0x234>
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b22      	cmp	r3, #34	; 0x22
 8004716:	d10d      	bne.n	8004734 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f00c ff44 	bl	80115bc <HAL_I2C_SlaveRxCpltCallback>
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08004cad 	.word	0x08004cad
 8004740:	ffff0000 	.word	0xffff0000

08004744 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d002      	beq.n	8004766 <I2C_Slave_AF+0x22>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d129      	bne.n	80047ba <I2C_Slave_AF+0x76>
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b28      	cmp	r3, #40	; 0x28
 800476a:	d126      	bne.n	80047ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a2c      	ldr	r2, [pc, #176]	; (8004820 <I2C_Slave_AF+0xdc>)
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004780:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f00c fef4 	bl	80115a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047b8:	e02e      	b.n	8004818 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b21      	cmp	r3, #33	; 0x21
 80047be:	d126      	bne.n	800480e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <I2C_Slave_AF+0xdc>)
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fe ffa4 	bl	8003754 <HAL_I2C_SlaveTxCpltCallback>
}
 800480c:	e004      	b.n	8004818 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004816:	615a      	str	r2, [r3, #20]
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	ffff0000 	.word	0xffff0000

08004824 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800483a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800483c:	7bbb      	ldrb	r3, [r7, #14]
 800483e:	2b10      	cmp	r3, #16
 8004840:	d002      	beq.n	8004848 <I2C_ITError+0x24>
 8004842:	7bbb      	ldrb	r3, [r7, #14]
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d10a      	bne.n	800485e <I2C_ITError+0x3a>
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b22      	cmp	r3, #34	; 0x22
 800484c:	d107      	bne.n	800485e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004864:	2b28      	cmp	r3, #40	; 0x28
 8004866:	d107      	bne.n	8004878 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2228      	movs	r2, #40	; 0x28
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004876:	e015      	b.n	80048a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d00a      	beq.n	800489e <I2C_ITError+0x7a>
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b60      	cmp	r3, #96	; 0x60
 800488c:	d007      	beq.n	800489e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b2:	d162      	bne.n	800497a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d020      	beq.n	8004914 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	4a6a      	ldr	r2, [pc, #424]	; (8004a80 <I2C_ITError+0x25c>)
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd fe14 	bl	800250c <HAL_DMA_Abort_IT>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8089 	beq.w	80049fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800490e:	4610      	mov	r0, r2
 8004910:	4798      	blx	r3
 8004912:	e074      	b.n	80049fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	4a59      	ldr	r2, [pc, #356]	; (8004a80 <I2C_ITError+0x25c>)
 800491a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd fdf3 	bl	800250c <HAL_DMA_Abort_IT>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d068      	beq.n	80049fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d10b      	bne.n	8004952 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
 8004978:	e041      	b.n	80049fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b60      	cmp	r3, #96	; 0x60
 8004984:	d125      	bne.n	80049d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d10b      	bne.n	80049ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fe fee0 	bl	8003790 <HAL_I2C_AbortCpltCallback>
 80049d0:	e015      	b.n	80049fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d10b      	bne.n	80049f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f00c fe0b 	bl	8011614 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d104      	bne.n	8004a2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d113      	bne.n	8004a78 <I2C_ITError+0x254>
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b28      	cmp	r3, #40	; 0x28
 8004a54:	d110      	bne.n	8004a78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <I2C_ITError+0x260>)
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f00c fd94 	bl	80115a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	08004cad 	.word	0x08004cad
 8004a84:	ffff0000 	.word	0xffff0000

08004a88 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	2200      	movs	r2, #0
 8004ada:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ae2:	2b21      	cmp	r3, #33	; 0x21
 8004ae4:	d007      	beq.n	8004af6 <I2C_DMAXferCplt+0x6e>
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004aec:	2b22      	cmp	r3, #34	; 0x22
 8004aee:	d131      	bne.n	8004b54 <I2C_DMAXferCplt+0xcc>
 8004af0:	7cbb      	ldrb	r3, [r7, #18]
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d12e      	bne.n	8004b54 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b04:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	2b29      	cmp	r3, #41	; 0x29
 8004b10:	d10a      	bne.n	8004b28 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2221      	movs	r2, #33	; 0x21
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2228      	movs	r2, #40	; 0x28
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b20:	6978      	ldr	r0, [r7, #20]
 8004b22:	f7fe fe17 	bl	8003754 <HAL_I2C_SlaveTxCpltCallback>
 8004b26:	e00c      	b.n	8004b42 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2c:	d109      	bne.n	8004b42 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2222      	movs	r2, #34	; 0x22
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2228      	movs	r2, #40	; 0x28
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f00c fd3d 	bl	80115bc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b50:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b52:	e06a      	b.n	8004c2a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d064      	beq.n	8004c2a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d107      	bne.n	8004b7a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b78:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b90:	d009      	beq.n	8004ba6 <I2C_DMAXferCplt+0x11e>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d006      	beq.n	8004ba6 <I2C_DMAXferCplt+0x11e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b9e:	d002      	beq.n	8004ba6 <I2C_DMAXferCplt+0x11e>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d107      	bne.n	8004bb6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bc4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004be4:	6978      	ldr	r0, [r7, #20]
 8004be6:	f00c fd15 	bl	8011614 <HAL_I2C_ErrorCallback>
}
 8004bea:	e01e      	b.n	8004c2a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d10a      	bne.n	8004c16 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f7fe fdb4 	bl	800377c <HAL_I2C_MemRxCpltCallback>
}
 8004c14:	e009      	b.n	8004c2a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2212      	movs	r2, #18
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7fe fd8b 	bl	8003740 <HAL_I2C_MasterRxCpltCallback>
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7fd fe0d 	bl	8002880 <HAL_DMA_GetError>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d01b      	beq.n	8004ca4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0210 	orr.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f00c fcb8 	bl	8011614 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <I2C_DMAAbort+0x148>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	4a4a      	ldr	r2, [pc, #296]	; (8004df8 <I2C_DMAAbort+0x14c>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a1a      	lsrs	r2, r3, #8
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	00da      	lsls	r2, r3, #3
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004cf2:	e00a      	b.n	8004d0a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d0ea      	beq.n	8004ce0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	2200      	movs	r2, #0
 8004d18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	2200      	movs	r2, #0
 8004d28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b60      	cmp	r3, #96	; 0x60
 8004d7a:	d10e      	bne.n	8004d9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d92:	6978      	ldr	r0, [r7, #20]
 8004d94:	f7fe fcfc 	bl	8003790 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d98:	e027      	b.n	8004dea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004da0:	2b28      	cmp	r3, #40	; 0x28
 8004da2:	d117      	bne.n	8004dd4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2228      	movs	r2, #40	; 0x28
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dd2:	e007      	b.n	8004de4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f00c fc15 	bl	8011614 <HAL_I2C_ErrorCallback>
}
 8004dea:	bf00      	nop
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000
 8004df8:	14f8b589 	.word	0x14f8b589

08004dfc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e08:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	0a1a      	lsrs	r2, r3, #8
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e008      	b.n	8004e4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d0e9      	beq.n	8004e1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	14f8b589 	.word	0x14f8b589

08004e60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e70:	d103      	bne.n	8004e7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e78:	e007      	b.n	8004e8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e82:	d102      	bne.n	8004e8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2208      	movs	r2, #8
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e034      	b.n	8004f12 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f245 5255 	movw	r2, #21845	; 0x5555
 8004eba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6852      	ldr	r2, [r2, #4]
 8004ec4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6892      	ldr	r2, [r2, #8]
 8004ece:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004ed0:	f7fd f878 	bl	8001fc4 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ed6:	e00f      	b.n	8004ef8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004ed8:	f7fd f874 	bl	8001fc4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b31      	cmp	r3, #49	; 0x31
 8004ee4:	d908      	bls.n	8004ef8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e00c      	b.n	8004f12 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e8      	bne.n	8004ed8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1c:	b08f      	sub	sp, #60	; 0x3c
 8004f1e:	af0a      	add	r7, sp, #40	; 0x28
 8004f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e10f      	b.n	800514c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00b ffdc 	bl	8010f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2203      	movs	r2, #3
 8004f50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f006 fb6f 	bl	800b64e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	687e      	ldr	r6, [r7, #4]
 8004f78:	466d      	mov	r5, sp
 8004f7a:	f106 0410 	add.w	r4, r6, #16
 8004f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f8e:	1d33      	adds	r3, r6, #4
 8004f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f92:	6838      	ldr	r0, [r7, #0]
 8004f94:	f006 fa46 	bl	800b424 <USB_CoreInit>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0d0      	b.n	800514c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f006 fb5d 	bl	800b670 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e04a      	b.n	8005052 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	333d      	adds	r3, #61	; 0x3d
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	333c      	adds	r3, #60	; 0x3c
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	b298      	uxth	r0, r3
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3344      	adds	r3, #68	; 0x44
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3340      	adds	r3, #64	; 0x40
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3348      	adds	r3, #72	; 0x48
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	334c      	adds	r3, #76	; 0x4c
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3354      	adds	r3, #84	; 0x54
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	3301      	adds	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d3af      	bcc.n	8004fbc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e044      	b.n	80050ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3301      	adds	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	7bfa      	ldrb	r2, [r7, #15]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3b5      	bcc.n	8005062 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	687e      	ldr	r6, [r7, #4]
 80050fe:	466d      	mov	r5, sp
 8005100:	f106 0410 	add.w	r4, r6, #16
 8005104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800510a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800510c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005110:	e885 0003 	stmia.w	r5, {r0, r1}
 8005114:	1d33      	adds	r3, r6, #4
 8005116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f006 faf5 	bl	800b708 <USB_DevInit>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e00d      	b.n	800514c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f007 fc44 	bl	800c9d2 <USB_DevDisconnect>

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005154 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_PCD_Start+0x1c>
 800516c:	2302      	movs	r3, #2
 800516e:	e020      	b.n	80051b2 <HAL_PCD_Start+0x5e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	2b01      	cmp	r3, #1
 800517e:	d109      	bne.n	8005194 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005184:	2b01      	cmp	r3, #1
 8005186:	d005      	beq.n	8005194 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f006 fa47 	bl	800b62c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f007 fbf4 	bl	800c990 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051ba:	b590      	push	{r4, r7, lr}
 80051bc:	b08d      	sub	sp, #52	; 0x34
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f007 fcb2 	bl	800cb3a <USB_GetMode>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 848a 	bne.w	8005af2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f007 fc16 	bl	800ca14 <USB_ReadInterrupts>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8480 	beq.w	8005af0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f007 fc03 	bl	800ca14 <USB_ReadInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d107      	bne.n	8005228 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f002 0202 	and.w	r2, r2, #2
 8005226:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f007 fbf1 	bl	800ca14 <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b10      	cmp	r3, #16
 800523a:	d161      	bne.n	8005300 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0210 	bic.w	r2, r2, #16
 800524a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	0c5b      	lsrs	r3, r3, #17
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2b02      	cmp	r3, #2
 8005276:	d124      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d035      	beq.n	80052f0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800528e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6a38      	ldr	r0, [r7, #32]
 8005298:	f007 fa28 	bl	800c6ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052a8:	441a      	add	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ba:	441a      	add	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
 80052c0:	e016      	b.n	80052f0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	0c5b      	lsrs	r3, r3, #17
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d110      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052d4:	2208      	movs	r2, #8
 80052d6:	4619      	mov	r1, r3
 80052d8:	6a38      	ldr	r0, [r7, #32]
 80052da:	f007 fa07 	bl	800c6ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	441a      	add	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0210 	orr.w	r2, r2, #16
 80052fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f007 fb85 	bl	800ca14 <USB_ReadInterrupts>
 800530a:	4603      	mov	r3, r0
 800530c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005314:	f040 80a7 	bne.w	8005466 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f007 fb8a 	bl	800ca3a <USB_ReadDevAllOutEpInterrupt>
 8005326:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005328:	e099      	b.n	800545e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 808e 	beq.w	8005452 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f007 fbae 	bl	800caa2 <USB_ReadDevOutEPInterrupt>
 8005346:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	461a      	mov	r2, r3
 8005360:	2301      	movs	r3, #1
 8005362:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fec2 	bl	80060f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	461a      	mov	r2, r3
 8005384:	2308      	movs	r3, #8
 8005386:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 ff98 	bl	80062c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	2310      	movs	r3, #16
 80053aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d030      	beq.n	8005418 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d109      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	3304      	adds	r3, #4
 80053ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	78db      	ldrb	r3, [r3, #3]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2200      	movs	r2, #0
 80053f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f00b fe7b 	bl	80110fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	2302      	movs	r3, #2
 8005416:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542e:	461a      	mov	r2, r3
 8005430:	2320      	movs	r3, #32
 8005432:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	461a      	mov	r2, r3
 800544c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005450:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2b00      	cmp	r3, #0
 8005462:	f47f af62 	bne.w	800532a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f007 fad2 	bl	800ca14 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800547a:	f040 80db 	bne.w	8005634 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f007 faf3 	bl	800ca6e <USB_ReadDevAllInEpInterrupt>
 8005488:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800548e:	e0cd      	b.n	800562c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80c2 	beq.w	8005620 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f007 fb19 	bl	800cade <USB_ReadDevInEPInterrupt>
 80054ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d057      	beq.n	8005568 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	2201      	movs	r2, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69f9      	ldr	r1, [r7, #28]
 80054d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d8:	4013      	ands	r3, r2
 80054da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	461a      	mov	r2, r3
 80054ea:	2301      	movs	r3, #1
 80054ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d132      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	334c      	adds	r3, #76	; 0x4c
 8005506:	6819      	ldr	r1, [r3, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	4613      	mov	r3, r2
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4403      	add	r3, r0
 8005516:	3348      	adds	r3, #72	; 0x48
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4419      	add	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4403      	add	r3, r0
 800552a:	334c      	adds	r3, #76	; 0x4c
 800552c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d113      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	4613      	mov	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	440b      	add	r3, r1
 8005542:	3354      	adds	r3, #84	; 0x54
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d108      	bne.n	800555c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005554:	461a      	mov	r2, r3
 8005556:	2101      	movs	r1, #1
 8005558:	f007 fb20 	bl	800cb9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f00b fd4f 	bl	8011006 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2308      	movs	r3, #8
 8005582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	461a      	mov	r2, r3
 800559c:	2310      	movs	r3, #16
 800559e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	461a      	mov	r2, r3
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d023      	beq.n	800560e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055c8:	6a38      	ldr	r0, [r7, #32]
 80055ca:	f006 fa01 	bl	800b9d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	4613      	mov	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	3338      	adds	r3, #56	; 0x38
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4413      	add	r3, r2
 80055de:	3304      	adds	r3, #4
 80055e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	78db      	ldrb	r3, [r3, #3]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d108      	bne.n	80055fc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2200      	movs	r2, #0
 80055ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f00b fd92 	bl	8011120 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	2302      	movs	r3, #2
 800560c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fcdb 	bl	8005fd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	3301      	adds	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	f47f af2e 	bne.w	8005490 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f007 f9eb 	bl	800ca14 <USB_ReadInterrupts>
 800563e:	4603      	mov	r3, r0
 8005640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005648:	d122      	bne.n	8005690 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005664:	2b01      	cmp	r3, #1
 8005666:	d108      	bne.n	800567a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005670:	2100      	movs	r1, #0
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fec2 	bl	80063fc <HAL_PCDEx_LPM_Callback>
 8005678:	e002      	b.n	8005680 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f00b fd30 	bl	80110e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800568e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f007 f9bd 	bl	800ca14 <USB_ReadInterrupts>
 800569a:	4603      	mov	r3, r0
 800569c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a4:	d112      	bne.n	80056cc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f00b fcec 	bl	8011094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80056ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f007 f99f 	bl	800ca14 <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	f040 80b7 	bne.w	8005852 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2110      	movs	r1, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f006 f966 	bl	800b9d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005708:	e046      	b.n	8005798 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005716:	461a      	mov	r2, r3
 8005718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800571c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800573c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	461a      	mov	r2, r3
 800574c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005750:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	440a      	add	r2, r1
 8005768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005770:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	440a      	add	r2, r1
 8005788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005790:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	3301      	adds	r3, #1
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579e:	429a      	cmp	r2, r3
 80057a0:	d3b3      	bcc.n	800570a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80057b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ce:	f043 030b 	orr.w	r3, r3, #11
 80057d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e4:	f043 030b 	orr.w	r3, r3, #11
 80057e8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ea:	e015      	b.n	8005818 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005802:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005812:	f043 030b 	orr.w	r3, r3, #11
 8005816:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005826:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800582a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800583c:	461a      	mov	r2, r3
 800583e:	f007 f9ad 	bl	800cb9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f007 f8dc 	bl	800ca14 <USB_ReadInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	d124      	bne.n	80058b2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f007 f972 	bl	800cb56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f006 f927 	bl	800baca <USB_GetDevSpeed>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681c      	ldr	r4, [r3, #0]
 8005888:	f001 fa66 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 800588c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005892:	b2db      	uxtb	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	4620      	mov	r0, r4
 8005898:	f005 fe26 	bl	800b4e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f00b fbda 	bl	8011056 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80058b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f007 f8ac 	bl	800ca14 <USB_ReadInterrupts>
 80058bc:	4603      	mov	r3, r0
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d10a      	bne.n	80058dc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f00b fbb7 	bl	801103a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f002 0208 	and.w	r2, r2, #8
 80058da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f007 f897 	bl	800ca14 <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d122      	bne.n	8005936 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058fc:	2301      	movs	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e014      	b.n	800592c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d105      	bne.n	8005926 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	b2db      	uxtb	r3, r3
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb27 	bl	8005f74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	3301      	adds	r3, #1
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005932:	429a      	cmp	r2, r3
 8005934:	d3e5      	bcc.n	8005902 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f007 f86a 	bl	800ca14 <USB_ReadInterrupts>
 8005940:	4603      	mov	r3, r0
 8005942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594a:	d13b      	bne.n	80059c4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800594c:	2301      	movs	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
 8005950:	e02b      	b.n	80059aa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	3340      	adds	r3, #64	; 0x40
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d115      	bne.n	80059a4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005978:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	da12      	bge.n	80059a4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	333f      	adds	r3, #63	; 0x3f
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800599a:	b2db      	uxtb	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fae8 	bl	8005f74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d3ce      	bcc.n	8005952 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f007 f823 	bl	800ca14 <USB_ReadInterrupts>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059d8:	d155      	bne.n	8005a86 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059da:	2301      	movs	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	e045      	b.n	8005a6c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d12e      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da2b      	bge.n	8005a66 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d121      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a62:	6053      	str	r3, [r2, #4]
            break;
 8005a64:	e007      	b.n	8005a76 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	3301      	adds	r3, #1
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3b4      	bcc.n	80059e0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f006 ffc2 	bl	800ca14 <USB_ReadInterrupts>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d10a      	bne.n	8005ab2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f00b fb51 	bl	8011144 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f006 ffac 	bl	800ca14 <USB_ReadInterrupts>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d115      	bne.n	8005af2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00b fb41 	bl	8011160 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6859      	ldr	r1, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	e000      	b.n	8005af2 <HAL_PCD_IRQHandler+0x938>
      return;
 8005af0:	bf00      	nop
    }
  }
}
 8005af2:	3734      	adds	r7, #52	; 0x34
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd90      	pop	{r4, r7, pc}

08005af8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_PCD_SetAddress+0x1a>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e013      	b.n	8005b3a <HAL_PCD_SetAddress+0x42>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f006 ff0a 	bl	800c944 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4603      	mov	r3, r0
 8005b52:	70fb      	strb	r3, [r7, #3]
 8005b54:	460b      	mov	r3, r1
 8005b56:	803b      	strh	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da0f      	bge.n	8005b88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	3338      	adds	r3, #56	; 0x38
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	705a      	strb	r2, [r3, #1]
 8005b86:	e00f      	b.n	8005ba8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bb4:	883a      	ldrh	r2, [r7, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	78ba      	ldrb	r2, [r7, #2]
 8005bbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d004      	beq.n	8005bd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bd2:	78bb      	ldrb	r3, [r7, #2]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d102      	bne.n	8005bde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_PCD_EP_Open+0xaa>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e00e      	b.n	8005c0a <HAL_PCD_EP_Open+0xc8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f005 ff8a 	bl	800bb14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da0f      	bge.n	8005c46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c26:	78fb      	ldrb	r3, [r7, #3]
 8005c28:	f003 020f 	and.w	r2, r3, #15
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	3338      	adds	r3, #56	; 0x38
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	705a      	strb	r2, [r3, #1]
 8005c44:	e00f      	b.n	8005c66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	f003 020f 	and.w	r2, r3, #15
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_PCD_EP_Close+0x6e>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e00e      	b.n	8005c9e <HAL_PCD_EP_Close+0x8c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68f9      	ldr	r1, [r7, #12]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f005 ffc8 	bl	800bc24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b086      	sub	sp, #24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb6:	7afb      	ldrb	r3, [r7, #11]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ce8:	7afb      	ldrb	r3, [r7, #11]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d102      	bne.n	8005d02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d02:	7afb      	ldrb	r3, [r7, #11]
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d109      	bne.n	8005d20 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	f006 faa7 	bl	800c26c <USB_EP0StartXfer>
 8005d1e:	e008      	b.n	8005d32 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	f006 f855 	bl	800bddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7c:	7afb      	ldrb	r3, [r7, #11]
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	4613      	mov	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	3338      	adds	r3, #56	; 0x38
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	3304      	adds	r3, #4
 8005d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2201      	movs	r2, #1
 8005daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d102      	bne.n	8005dc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d109      	bne.n	8005de4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	6979      	ldr	r1, [r7, #20]
 8005dde:	f006 fa45 	bl	800c26c <USB_EP0StartXfer>
 8005de2:	e008      	b.n	8005df6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	6979      	ldr	r1, [r7, #20]
 8005df2:	f005 fff3 	bl	800bddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	f003 020f 	and.w	r2, r3, #15
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d901      	bls.n	8005e1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e050      	b.n	8005ec0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da0f      	bge.n	8005e46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	3338      	adds	r3, #56	; 0x38
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	705a      	strb	r2, [r3, #1]
 8005e44:	e00d      	b.n	8005e62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4413      	add	r3, r2
 8005e58:	3304      	adds	r3, #4
 8005e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_PCD_EP_SetStall+0x82>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e01e      	b.n	8005ec0 <HAL_PCD_EP_SetStall+0xc0>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68f9      	ldr	r1, [r7, #12]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f006 fc83 	bl	800c79c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	b2d9      	uxtb	r1, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f006 fe73 	bl	800cb9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	f003 020f 	and.w	r2, r3, #15
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d901      	bls.n	8005ee6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e042      	b.n	8005f6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da0f      	bge.n	8005f0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3338      	adds	r3, #56	; 0x38
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	3304      	adds	r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	705a      	strb	r2, [r3, #1]
 8005f0c:	e00f      	b.n	8005f2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	f003 020f 	and.w	r2, r3, #15
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4413      	add	r3, r2
 8005f24:	3304      	adds	r3, #4
 8005f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_PCD_EP_ClrStall+0x86>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e00e      	b.n	8005f6c <HAL_PCD_EP_ClrStall+0xa4>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f006 fc8b 	bl	800c878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da0c      	bge.n	8005fa2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	3338      	adds	r3, #56	; 0x38
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e00c      	b.n	8005fbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 020f 	and.w	r2, r3, #15
 8005fa8:	4613      	mov	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3304      	adds	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68f9      	ldr	r1, [r7, #12]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f006 faaa 	bl	800c51c <USB_EPStopXfer>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005fcc:	7afb      	ldrb	r3, [r7, #11]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b08a      	sub	sp, #40	; 0x28
 8005fda:	af02      	add	r7, sp, #8
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	3338      	adds	r3, #56	; 0x38
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	429a      	cmp	r2, r3
 8006008:	d901      	bls.n	800600e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e06c      	b.n	80060e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	429a      	cmp	r2, r3
 8006022:	d902      	bls.n	800602a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3303      	adds	r3, #3
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006032:	e02b      	b.n	800608c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	429a      	cmp	r2, r3
 8006048:	d902      	bls.n	8006050 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3303      	adds	r3, #3
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6919      	ldr	r1, [r3, #16]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006068:	b2db      	uxtb	r3, r3
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f006 fafe 	bl	800c670 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	b29b      	uxth	r3, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d809      	bhi.n	80060b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d203      	bcs.n	80060b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1be      	bne.n	8006034 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d811      	bhi.n	80060e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	2201      	movs	r2, #1
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	43db      	mvns	r3, r3
 80060dc:	6939      	ldr	r1, [r7, #16]
 80060de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e2:	4013      	ands	r3, r2
 80060e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	333c      	adds	r3, #60	; 0x3c
 8006108:	3304      	adds	r3, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d17b      	bne.n	800621e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d015      	beq.n	800615c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4a61      	ldr	r2, [pc, #388]	; (80062b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	f240 80b9 	bls.w	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80b3 	beq.w	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	461a      	mov	r2, r3
 8006154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	e0a7      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	461a      	mov	r2, r3
 8006174:	2320      	movs	r3, #32
 8006176:	6093      	str	r3, [r2, #8]
 8006178:	e098      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 8093 	bne.w	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d90f      	bls.n	80061ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	6093      	str	r3, [r2, #8]
 80061ac:	e07e      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	3304      	adds	r3, #4
 80061c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	0159      	lsls	r1, r3, #5
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d114      	bne.n	8006210 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061f8:	461a      	mov	r2, r3
 80061fa:	2101      	movs	r1, #1
 80061fc:	f006 fcce 	bl	800cb9c <USB_EP0_OutStart>
 8006200:	e006      	b.n	8006210 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	691a      	ldr	r2, [r3, #16]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	441a      	add	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f00a feda 	bl	8010fd0 <HAL_PCD_DataOutStageCallback>
 800621c:	e046      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	4a26      	ldr	r2, [pc, #152]	; (80062bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d124      	bne.n	8006270 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	461a      	mov	r2, r3
 800623e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006242:	6093      	str	r3, [r2, #8]
 8006244:	e032      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2320      	movs	r3, #32
 8006260:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f00a feb1 	bl	8010fd0 <HAL_PCD_DataOutStageCallback>
 800626e:	e01d      	b.n	80062ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d114      	bne.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006298:	461a      	mov	r2, r3
 800629a:	2100      	movs	r1, #0
 800629c:	f006 fc7e 	bl	800cb9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f00a fe92 	bl	8010fd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	4f54300a 	.word	0x4f54300a
 80062bc:	4f54310a 	.word	0x4f54310a

080062c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	333c      	adds	r3, #60	; 0x3c
 80062d8:	3304      	adds	r3, #4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a15      	ldr	r2, [pc, #84]	; (8006348 <PCD_EP_OutSetupPacket_int+0x88>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d90e      	bls.n	8006314 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f00a fe49 	bl	8010fac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <PCD_EP_OutSetupPacket_int+0x88>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d90c      	bls.n	800633c <PCD_EP_OutSetupPacket_int+0x7c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d108      	bne.n	800633c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006334:	461a      	mov	r2, r3
 8006336:	2101      	movs	r1, #1
 8006338:	f006 fc30 	bl	800cb9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	4f54300a 	.word	0x4f54300a

0800634c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
 8006358:	4613      	mov	r3, r2
 800635a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d107      	bne.n	800637a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800636a:	883b      	ldrh	r3, [r7, #0]
 800636c:	0419      	lsls	r1, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	430a      	orrs	r2, r1
 8006376:	629a      	str	r2, [r3, #40]	; 0x28
 8006378:	e028      	b.n	80063cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	e00d      	b.n	80063aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	3340      	adds	r3, #64	; 0x40
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	3301      	adds	r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]
 80063aa:	7bfa      	ldrb	r2, [r7, #15]
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d3ec      	bcc.n	800638e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063b4:	883b      	ldrh	r3, [r7, #0]
 80063b6:	0418      	lsls	r0, r3, #16
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6819      	ldr	r1, [r3, #0]
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	3b01      	subs	r3, #1
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	4302      	orrs	r2, r0
 80063c4:	3340      	adds	r3, #64	; 0x40
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800641c:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_PWR_ConfigPVD+0xb8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4928      	ldr	r1, [pc, #160]	; (80064cc <HAL_PWR_ConfigPVD+0xb8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800642e:	4b28      	ldr	r3, [pc, #160]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4a27      	ldr	r2, [pc, #156]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006438:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800643a:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006444:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800644c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006450:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8006452:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645c:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800646a:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a18      	ldr	r2, [pc, #96]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006474:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 8006488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800648c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800649a:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a4:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	4a06      	ldr	r2, [pc, #24]	; (80064d0 <HAL_PWR_ConfigPVD+0xbc>)
 80064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064bc:	60d3      	str	r3, [r2, #12]
  }
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40007000 	.word	0x40007000
 80064d0:	40013c00 	.word	0x40013c00

080064d4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <HAL_PWR_EnablePVD+0x14>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	420e0010 	.word	0x420e0010

080064ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_PWR_PVD_IRQHandler+0x20>)
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80064fc:	f00b fb92 	bl	8011c24 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <HAL_PWR_PVD_IRQHandler+0x20>)
 8006502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006506:	615a      	str	r2, [r3, #20]
  }
}
 8006508:	bf00      	nop
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40013c00 	.word	0x40013c00

08006510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e267      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d075      	beq.n	800661a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800652e:	4b88      	ldr	r3, [pc, #544]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
 8006536:	2b04      	cmp	r3, #4
 8006538:	d00c      	beq.n	8006554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653a:	4b85      	ldr	r3, [pc, #532]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006542:	2b08      	cmp	r3, #8
 8006544:	d112      	bne.n	800656c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006546:	4b82      	ldr	r3, [pc, #520]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006552:	d10b      	bne.n	800656c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006554:	4b7e      	ldr	r3, [pc, #504]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d05b      	beq.n	8006618 <HAL_RCC_OscConfig+0x108>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d157      	bne.n	8006618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e242      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d106      	bne.n	8006584 <HAL_RCC_OscConfig+0x74>
 8006576:	4b76      	ldr	r3, [pc, #472]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a75      	ldr	r2, [pc, #468]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e01d      	b.n	80065c0 <HAL_RCC_OscConfig+0xb0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x98>
 800658e:	4b70      	ldr	r3, [pc, #448]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a6f      	ldr	r2, [pc, #444]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a6c      	ldr	r2, [pc, #432]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e00b      	b.n	80065c0 <HAL_RCC_OscConfig+0xb0>
 80065a8:	4b69      	ldr	r3, [pc, #420]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a68      	ldr	r2, [pc, #416]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c8:	f7fb fcfc 	bl	8001fc4 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d0:	f7fb fcf8 	bl	8001fc4 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b64      	cmp	r3, #100	; 0x64
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e207      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065e2:	4b5b      	ldr	r3, [pc, #364]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f0      	beq.n	80065d0 <HAL_RCC_OscConfig+0xc0>
 80065ee:	e014      	b.n	800661a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fb fce8 	bl	8001fc4 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f8:	f7fb fce4 	bl	8001fc4 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e1f3      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800660a:	4b51      	ldr	r3, [pc, #324]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0xe8>
 8006616:	e000      	b.n	800661a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d063      	beq.n	80066ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006626:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b47      	ldr	r3, [pc, #284]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800663a:	2b08      	cmp	r3, #8
 800663c:	d11c      	bne.n	8006678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663e:	4b44      	ldr	r3, [pc, #272]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d116      	bne.n	8006678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800664a:	4b41      	ldr	r3, [pc, #260]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_RCC_OscConfig+0x152>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d001      	beq.n	8006662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e1c7      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4937      	ldr	r1, [pc, #220]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006676:	e03a      	b.n	80066ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d020      	beq.n	80066c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006680:	4b34      	ldr	r3, [pc, #208]	; (8006754 <HAL_RCC_OscConfig+0x244>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fb fc9d 	bl	8001fc4 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800668e:	f7fb fc99 	bl	8001fc4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e1a8      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ac:	4b28      	ldr	r3, [pc, #160]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4925      	ldr	r1, [pc, #148]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	600b      	str	r3, [r1, #0]
 80066c0:	e015      	b.n	80066ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c2:	4b24      	ldr	r3, [pc, #144]	; (8006754 <HAL_RCC_OscConfig+0x244>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fb fc7c 	bl	8001fc4 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066d0:	f7fb fc78 	bl	8001fc4 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e187      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e2:	4b1b      	ldr	r3, [pc, #108]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f0      	bne.n	80066d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d036      	beq.n	8006768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d016      	beq.n	8006730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <HAL_RCC_OscConfig+0x248>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fb fc5c 	bl	8001fc4 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006710:	f7fb fc58 	bl	8001fc4 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e167      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_OscConfig+0x240>)
 8006724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x200>
 800672e:	e01b      	b.n	8006768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <HAL_RCC_OscConfig+0x248>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006736:	f7fb fc45 	bl	8001fc4 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673c:	e00e      	b.n	800675c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673e:	f7fb fc41 	bl	8001fc4 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d907      	bls.n	800675c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e150      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
 8006750:	40023800 	.word	0x40023800
 8006754:	42470000 	.word	0x42470000
 8006758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800675c:	4b88      	ldr	r3, [pc, #544]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800675e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1ea      	bne.n	800673e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8097 	beq.w	80068a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800677a:	4b81      	ldr	r3, [pc, #516]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10f      	bne.n	80067a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	4b7d      	ldr	r3, [pc, #500]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	4a7c      	ldr	r2, [pc, #496]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	6413      	str	r3, [r2, #64]	; 0x40
 8006796:	4b7a      	ldr	r3, [pc, #488]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b77      	ldr	r3, [pc, #476]	; (8006984 <HAL_RCC_OscConfig+0x474>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b2:	4b74      	ldr	r3, [pc, #464]	; (8006984 <HAL_RCC_OscConfig+0x474>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a73      	ldr	r2, [pc, #460]	; (8006984 <HAL_RCC_OscConfig+0x474>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7fb fc01 	bl	8001fc4 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fb fbfd 	bl	8001fc4 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e10c      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d8:	4b6a      	ldr	r3, [pc, #424]	; (8006984 <HAL_RCC_OscConfig+0x474>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x2ea>
 80067ec:	4b64      	ldr	r3, [pc, #400]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	4a63      	ldr	r2, [pc, #396]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6713      	str	r3, [r2, #112]	; 0x70
 80067f8:	e01c      	b.n	8006834 <HAL_RCC_OscConfig+0x324>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	2b05      	cmp	r3, #5
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x30c>
 8006802:	4b5f      	ldr	r3, [pc, #380]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	4a5e      	ldr	r2, [pc, #376]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	6713      	str	r3, [r2, #112]	; 0x70
 800680e:	4b5c      	ldr	r3, [pc, #368]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	4a5b      	ldr	r2, [pc, #364]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006814:	f043 0301 	orr.w	r3, r3, #1
 8006818:	6713      	str	r3, [r2, #112]	; 0x70
 800681a:	e00b      	b.n	8006834 <HAL_RCC_OscConfig+0x324>
 800681c:	4b58      	ldr	r3, [pc, #352]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a57      	ldr	r2, [pc, #348]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006822:	f023 0301 	bic.w	r3, r3, #1
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
 8006828:	4b55      	ldr	r3, [pc, #340]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682c:	4a54      	ldr	r2, [pc, #336]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800682e:	f023 0304 	bic.w	r3, r3, #4
 8006832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fb fbc2 	bl	8001fc4 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fb fbbe 	bl	8001fc4 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0cb      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685a:	4b49      	ldr	r3, [pc, #292]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0ee      	beq.n	8006844 <HAL_RCC_OscConfig+0x334>
 8006866:	e014      	b.n	8006892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006868:	f7fb fbac 	bl	8001fc4 <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800686e:	e00a      	b.n	8006886 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006870:	f7fb fba8 	bl	8001fc4 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	f241 3288 	movw	r2, #5000	; 0x1388
 800687e:	4293      	cmp	r3, r2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e0b5      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006886:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ee      	bne.n	8006870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006898:	4b39      	ldr	r3, [pc, #228]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	4a38      	ldr	r2, [pc, #224]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800689e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80a1 	beq.w	80069f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068ae:	4b34      	ldr	r3, [pc, #208]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d05c      	beq.n	8006974 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d141      	bne.n	8006946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b31      	ldr	r3, [pc, #196]	; (8006988 <HAL_RCC_OscConfig+0x478>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fb fb7c 	bl	8001fc4 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fb fb78 	bl	8001fc4 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e087      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068e2:	4b27      	ldr	r3, [pc, #156]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	3b01      	subs	r3, #1
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	061b      	lsls	r3, r3, #24
 8006912:	491b      	ldr	r1, [pc, #108]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_RCC_OscConfig+0x478>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691e:	f7fb fb51 	bl	8001fc4 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006926:	f7fb fb4d 	bl	8001fc4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e05c      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x416>
 8006944:	e054      	b.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <HAL_RCC_OscConfig+0x478>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fb fb3a 	bl	8001fc4 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006954:	f7fb fb36 	bl	8001fc4 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e045      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_RCC_OscConfig+0x470>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x444>
 8006972:	e03d      	b.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e038      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
 8006980:	40023800 	.word	0x40023800
 8006984:	40007000 	.word	0x40007000
 8006988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x4ec>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d028      	beq.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d121      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d11a      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d111      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	3b01      	subs	r3, #1
 80069d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d107      	bne.n	80069ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d001      	beq.n	80069f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800

08006a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0cc      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a14:	4b68      	ldr	r3, [pc, #416]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d90c      	bls.n	8006a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b65      	ldr	r3, [pc, #404]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2a:	4b63      	ldr	r3, [pc, #396]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d001      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0b8      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a54:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	4a58      	ldr	r2, [pc, #352]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a6c:	4b53      	ldr	r3, [pc, #332]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a52      	ldr	r2, [pc, #328]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a78:	4b50      	ldr	r3, [pc, #320]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	494d      	ldr	r1, [pc, #308]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d044      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	4b47      	ldr	r3, [pc, #284]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d119      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e07f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d003      	beq.n	8006abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d107      	bne.n	8006ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abe:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e06f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ace:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e067      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ade:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f023 0203 	bic.w	r2, r3, #3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4934      	ldr	r1, [pc, #208]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006af0:	f7fb fa68 	bl	8001fc4 <HAL_GetTick>
 8006af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af6:	e00a      	b.n	8006b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af8:	f7fb fa64 	bl	8001fc4 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e04f      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0e:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 020c 	and.w	r2, r3, #12
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d1eb      	bne.n	8006af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b20:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20c      	bcs.n	8006b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4b22      	ldr	r3, [pc, #136]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b36:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d001      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e032      	b.n	8006bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4916      	ldr	r1, [pc, #88]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	490e      	ldr	r1, [pc, #56]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b86:	f000 f821 	bl	8006bcc <HAL_RCC_GetSysClockFreq>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	490a      	ldr	r1, [pc, #40]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b98:	5ccb      	ldrb	r3, [r1, r3]
 8006b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fa f998 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40023c00 	.word	0x40023c00
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	08013bf0 	.word	0x08013bf0
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	20000004 	.word	0x20000004

08006bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd0:	b090      	sub	sp, #64	; 0x40
 8006bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd8:	2300      	movs	r3, #0
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bdc:	2300      	movs	r3, #0
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be4:	4b59      	ldr	r3, [pc, #356]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 030c 	and.w	r3, r3, #12
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d00d      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x40>
 8006bf0:	2b08      	cmp	r3, #8
 8006bf2:	f200 80a1 	bhi.w	8006d38 <HAL_RCC_GetSysClockFreq+0x16c>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x34>
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bfe:	e09b      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c00:	4b53      	ldr	r3, [pc, #332]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006c04:	e09b      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c06:	4b53      	ldr	r3, [pc, #332]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c0a:	e098      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c16:	4b4d      	ldr	r3, [pc, #308]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c22:	4b4a      	ldr	r3, [pc, #296]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	2200      	movs	r2, #0
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c34:	2100      	movs	r1, #0
 8006c36:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c38:	fb03 f201 	mul.w	r2, r3, r1
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	fb00 f303 	mul.w	r3, r0, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	4a43      	ldr	r2, [pc, #268]	; (8006d54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c46:	fba0 1202 	umull	r1, r2, r0, r2
 8006c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c52:	4413      	add	r3, r2
 8006c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2200      	movs	r2, #0
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	61fa      	str	r2, [r7, #28]
 8006c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c66:	f7f9 fabb 	bl	80001e0 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4613      	mov	r3, r2
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c72:	e053      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c74:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	099b      	lsrs	r3, r3, #6
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	617a      	str	r2, [r7, #20]
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c86:	f04f 0b00 	mov.w	fp, #0
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	f04f 0000 	mov.w	r0, #0
 8006c92:	f04f 0100 	mov.w	r1, #0
 8006c96:	0159      	lsls	r1, r3, #5
 8006c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c9c:	0150      	lsls	r0, r2, #5
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ca6:	eb63 090b 	sbc.w	r9, r3, fp
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cbe:	ebb2 0408 	subs.w	r4, r2, r8
 8006cc2:	eb63 0509 	sbc.w	r5, r3, r9
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	00eb      	lsls	r3, r5, #3
 8006cd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd4:	00e2      	lsls	r2, r4, #3
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	461d      	mov	r5, r3
 8006cda:	eb14 030a 	adds.w	r3, r4, sl
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	eb45 030b 	adc.w	r3, r5, fp
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	028b      	lsls	r3, r1, #10
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	028a      	lsls	r2, r1, #10
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d06:	2200      	movs	r2, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	60fa      	str	r2, [r7, #12]
 8006d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d10:	f7f9 fa66 	bl	80001e0 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	3301      	adds	r3, #1
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d36:	e002      	b.n	8006d3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3740      	adds	r7, #64	; 0x40
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	00f42400 	.word	0x00f42400
 8006d54:	017d7840 	.word	0x017d7840

08006d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000000 	.word	0x20000000

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff0 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	0a9b      	lsrs	r3, r3, #10
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4903      	ldr	r1, [pc, #12]	; (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40023800 	.word	0x40023800
 8006d94:	08013c00 	.word	0x08013c00

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffdc 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	; (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	08013c00 	.word	0x08013c00

08006dc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220f      	movs	r2, #15
 8006dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0203 	and.w	r2, r3, #3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	08db      	lsrs	r3, r3, #3
 8006dfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_RCC_GetClockConfig+0x60>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0207 	and.w	r2, r3, #7
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40023c00 	.word	0x40023c00

08006e24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d035      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e4c:	4b67      	ldr	r3, [pc, #412]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e52:	f7fb f8b7 	bl	8001fc4 <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e5a:	f7fb f8b3 	bl	8001fc4 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e0ba      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e6c:	4b60      	ldr	r3, [pc, #384]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1f0      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	019a      	lsls	r2, r3, #6
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	495a      	ldr	r1, [pc, #360]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e8c:	4b57      	ldr	r3, [pc, #348]	; (8006fec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fb f897 	bl	8001fc4 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e9a:	f7fb f893 	bl	8001fc4 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e09a      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eac:	4b50      	ldr	r3, [pc, #320]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8083 	beq.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	4b49      	ldr	r3, [pc, #292]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	4a48      	ldr	r2, [pc, #288]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed6:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ee2:	4b44      	ldr	r3, [pc, #272]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a43      	ldr	r2, [pc, #268]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eee:	f7fb f869 	bl	8001fc4 <HAL_GetTick>
 8006ef2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ef6:	f7fb f865 	bl	8001fc4 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e06c      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f08:	4b3a      	ldr	r3, [pc, #232]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f14:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d02f      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d028      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f3c:	4b2e      	ldr	r3, [pc, #184]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f42:	4b2d      	ldr	r3, [pc, #180]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f48:	4a29      	ldr	r2, [pc, #164]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f4e:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d114      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f5a:	f7fb f833 	bl	8001fc4 <HAL_GetTick>
 8006f5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f60:	e00a      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f62:	f7fb f82f 	bl	8001fc4 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e034      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0ee      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f90:	d10d      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f92:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	4912      	ldr	r1, [pc, #72]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	608b      	str	r3, [r1, #8]
 8006fac:	e005      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fb4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fb8:	6093      	str	r3, [r2, #8]
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc6:	490a      	ldr	r1, [pc, #40]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	7c1a      	ldrb	r2, [r3, #16]
 8006fdc:	4b07      	ldr	r3, [pc, #28]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fde:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	42470068 	.word	0x42470068
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	42470e40 	.word	0x42470e40
 8006ffc:	424711e0 	.word	0x424711e0

08007000 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e066      	b.n	80070e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7f5b      	ldrb	r3, [r3, #29]
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d105      	bne.n	800702c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7f9 fe7a 	bl	8000d20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	22ca      	movs	r2, #202	; 0xca
 8007038:	625a      	str	r2, [r3, #36]	; 0x24
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2253      	movs	r2, #83	; 0x53
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa45 	bl	80074d2 <RTC_EnterInitMode>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d12c      	bne.n	80070ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007064:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6899      	ldr	r1, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68d2      	ldr	r2, [r2, #12]
 800708c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6919      	ldr	r1, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	041a      	lsls	r2, r3, #16
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa4c 	bl	8007540 <RTC_ExitInitMode>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d113      	bne.n	80070da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699a      	ldr	r2, [r3, #24]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	22ff      	movs	r2, #255	; 0xff
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	7f1b      	ldrb	r3, [r3, #28]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_RTC_SetTime+0x1c>
 8007104:	2302      	movs	r3, #2
 8007106:	e087      	b.n	8007218 <HAL_RTC_SetTime+0x12c>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2202      	movs	r2, #2
 8007112:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d126      	bne.n	8007168 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fa29 	bl	800758a <RTC_ByteToBcd2>
 8007138:	4603      	mov	r3, r0
 800713a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa22 	bl	800758a <RTC_ByteToBcd2>
 8007146:	4603      	mov	r3, r0
 8007148:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800714a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	789b      	ldrb	r3, [r3, #2]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fa1a 	bl	800758a <RTC_ByteToBcd2>
 8007156:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007158:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	78db      	ldrb	r3, [r3, #3]
 8007160:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e018      	b.n	800719a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007188:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800718e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	78db      	ldrb	r3, [r3, #3]
 8007194:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	22ca      	movs	r2, #202	; 0xca
 80071a0:	625a      	str	r2, [r3, #36]	; 0x24
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2253      	movs	r2, #83	; 0x53
 80071a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f991 	bl	80074d2 <RTC_EnterInitMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d120      	bne.n	80071fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6899      	ldr	r1, [r3, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f9a4 	bl	8007540 <RTC_ExitInitMode>
 80071f8:	4603      	mov	r3, r0
 80071fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80071fc:	7cfb      	ldrb	r3, [r7, #19]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	771a      	strb	r2, [r3, #28]

  return status;
 8007216:	7cfb      	ldrb	r3, [r7, #19]
}
 8007218:	4618      	mov	r0, r3
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd90      	pop	{r4, r7, pc}

08007220 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007252:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007256:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	0c1b      	lsrs	r3, r3, #16
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007280:	b2da      	uxtb	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	0d9b      	lsrs	r3, r3, #22
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d11a      	bne.n	80072d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f98f 	bl	80075c4 <RTC_Bcd2ToByte>
 80072a6:	4603      	mov	r3, r0
 80072a8:	461a      	mov	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f986 	bl	80075c4 <RTC_Bcd2ToByte>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	789b      	ldrb	r3, [r3, #2]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f97d 	bl	80075c4 <RTC_Bcd2ToByte>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	7f1b      	ldrb	r3, [r3, #28]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_RTC_SetDate+0x1c>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e071      	b.n	80073dc <HAL_RTC_SetDate+0x100>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2202      	movs	r2, #2
 8007302:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10e      	bne.n	8007328 <HAL_RTC_SetDate+0x4c>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	f003 0310 	and.w	r3, r3, #16
 8007312:	2b00      	cmp	r3, #0
 8007314:	d008      	beq.n	8007328 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	f023 0310 	bic.w	r3, r3, #16
 800731e:	b2db      	uxtb	r3, r3
 8007320:	330a      	adds	r3, #10
 8007322:	b2da      	uxtb	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11c      	bne.n	8007368 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f929 	bl	800758a <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f922 	bl	800758a <RTC_ByteToBcd2>
 8007346:	4603      	mov	r3, r0
 8007348:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800734a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f91a 	bl	800758a <RTC_ByteToBcd2>
 8007356:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007358:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e00e      	b.n	8007386 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	78db      	ldrb	r3, [r3, #3]
 800736c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007374:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800737a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	22ca      	movs	r2, #202	; 0xca
 800738c:	625a      	str	r2, [r3, #36]	; 0x24
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2253      	movs	r2, #83	; 0x53
 8007394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 f89b 	bl	80074d2 <RTC_EnterInitMode>
 800739c:	4603      	mov	r3, r0
 800739e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f8c2 	bl	8007540 <RTC_ExitInitMode>
 80073bc:	4603      	mov	r3, r0
 80073be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	771a      	strb	r2, [r3, #28]

  return status;
 80073da:	7cfb      	ldrb	r3, [r7, #19]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}

080073e4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007402:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	b2da      	uxtb	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	0b5b      	lsrs	r3, r3, #13
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	b2da      	uxtb	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d11a      	bne.n	8007478 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f8bc 	bl	80075c4 <RTC_Bcd2ToByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f8b3 	bl	80075c4 <RTC_Bcd2ToByte>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	789b      	ldrb	r3, [r3, #2]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f8aa 	bl	80075c4 <RTC_Bcd2ToByte>
 8007470:	4603      	mov	r3, r0
 8007472:	461a      	mov	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800749c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800749e:	f7fa fd91 	bl	8001fc4 <HAL_GetTick>
 80074a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074a4:	e009      	b.n	80074ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074a6:	f7fa fd8d 	bl	8001fc4 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b4:	d901      	bls.n	80074ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e007      	b.n	80074ca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0ee      	beq.n	80074a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d122      	bne.n	8007536 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007500:	f7fa fd60 	bl	8001fc4 <HAL_GetTick>
 8007504:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007506:	e00c      	b.n	8007522 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007508:	f7fa fd5c 	bl	8001fc4 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007516:	d904      	bls.n	8007522 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2204      	movs	r2, #4
 800751c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <RTC_EnterInitMode+0x64>
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d1e8      	bne.n	8007508 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007536:	7bfb      	ldrb	r3, [r7, #15]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800755a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0320 	and.w	r3, r3, #32
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff ff89 	bl	8007482 <HAL_RTC_WaitForSynchro>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2204      	movs	r2, #4
 800757a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	4603      	mov	r3, r0
 8007592:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007598:	e005      	b.n	80075a6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3301      	adds	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	3b0a      	subs	r3, #10
 80075a4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d8f6      	bhi.n	800759a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b2db      	uxtb	r3, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	091b      	lsrs	r3, r3, #4
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	0092      	lsls	r2, r2, #2
 80075dc:	4413      	add	r3, r2
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80075e2:	79fb      	ldrb	r3, [r7, #7]
 80075e4:	f003 030f 	and.w	r3, r3, #15
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	4413      	add	r3, r2
 80075ee:	b2db      	uxtb	r3, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3350      	adds	r3, #80	; 0x50
 8007612:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
}
 8007624:	bf00      	nop
 8007626:	371c      	adds	r7, #28
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3350      	adds	r3, #80	; 0x50
 8007644:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e07b      	b.n	800776a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d108      	bne.n	800768c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007682:	d009      	beq.n	8007698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	61da      	str	r2, [r3, #28]
 800768a:	e005      	b.n	8007698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7f9 fb96 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	ea42 0103 	orr.w	r1, r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	f003 0104 	and.w	r1, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f003 0210 	and.w	r2, r3, #16
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	69da      	ldr	r2, [r3, #28]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007758:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_SPI_Transmit+0x22>
 8007790:	2302      	movs	r3, #2
 8007792:	e126      	b.n	80079e2 <HAL_SPI_Transmit+0x270>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800779c:	f7fa fc12 	bl	8001fc4 <HAL_GetTick>
 80077a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d002      	beq.n	80077b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
 80077b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077b6:	e10b      	b.n	80079d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_Transmit+0x52>
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077c8:	e102      	b.n	80079d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2203      	movs	r2, #3
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	88fa      	ldrh	r2, [r7, #6]
 80077e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007810:	d10f      	bne.n	8007832 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d007      	beq.n	8007850 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007858:	d14b      	bne.n	80078f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_SPI_Transmit+0xf6>
 8007862:	8afb      	ldrh	r3, [r7, #22]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d13e      	bne.n	80078e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	1c9a      	adds	r2, r3, #2
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800788c:	e02b      	b.n	80078e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b02      	cmp	r3, #2
 800789a:	d112      	bne.n	80078c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	881a      	ldrh	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	1c9a      	adds	r2, r3, #2
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	86da      	strh	r2, [r3, #54]	; 0x36
 80078c0:	e011      	b.n	80078e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c2:	f7fa fb7f 	bl	8001fc4 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d803      	bhi.n	80078da <HAL_SPI_Transmit+0x168>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d102      	bne.n	80078e0 <HAL_SPI_Transmit+0x16e>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078e4:	e074      	b.n	80079d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ce      	bne.n	800788e <HAL_SPI_Transmit+0x11c>
 80078f0:	e04c      	b.n	800798c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <HAL_SPI_Transmit+0x18e>
 80078fa:	8afb      	ldrh	r3, [r7, #22]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d140      	bne.n	8007982 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	330c      	adds	r3, #12
 800790a:	7812      	ldrb	r2, [r2, #0]
 800790c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007926:	e02c      	b.n	8007982 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 0302 	and.w	r3, r3, #2
 8007932:	2b02      	cmp	r3, #2
 8007934:	d113      	bne.n	800795e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	86da      	strh	r2, [r3, #54]	; 0x36
 800795c:	e011      	b.n	8007982 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800795e:	f7fa fb31 	bl	8001fc4 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d803      	bhi.n	8007976 <HAL_SPI_Transmit+0x204>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d102      	bne.n	800797c <HAL_SPI_Transmit+0x20a>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007980:	e026      	b.n	80079d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1cd      	bne.n	8007928 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fbcb 	bl	800812c <SPI_EndRxTxTransaction>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2220      	movs	r2, #32
 80079a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10a      	bne.n	80079c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	77fb      	strb	r3, [r7, #31]
 80079cc:	e000      	b.n	80079d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80079ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b088      	sub	sp, #32
 80079ee:	af02      	add	r7, sp, #8
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a06:	d112      	bne.n	8007a2e <HAL_SPI_Receive+0x44>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10e      	bne.n	8007a2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f8f1 	bl	8007c0c <HAL_SPI_TransmitReceive>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	e0ea      	b.n	8007c04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_SPI_Receive+0x52>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e0e3      	b.n	8007c04 <HAL_SPI_Receive+0x21a>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a44:	f7fa fabe 	bl	8001fc4 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
 8007a58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a5a:	e0ca      	b.n	8007bf2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_SPI_Receive+0x7e>
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a6c:	e0c1      	b.n	8007bf2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2204      	movs	r2, #4
 8007a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab4:	d10f      	bne.n	8007ad6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ad4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae0:	2b40      	cmp	r3, #64	; 0x40
 8007ae2:	d007      	beq.n	8007af4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d162      	bne.n	8007bc2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007afc:	e02e      	b.n	8007b5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d115      	bne.n	8007b38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f103 020c 	add.w	r2, r3, #12
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	7812      	ldrb	r2, [r2, #0]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b36:	e011      	b.n	8007b5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b38:	f7fa fa44 	bl	8001fc4 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d803      	bhi.n	8007b50 <HAL_SPI_Receive+0x166>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4e:	d102      	bne.n	8007b56 <HAL_SPI_Receive+0x16c>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b5a:	e04a      	b.n	8007bf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1cb      	bne.n	8007afe <HAL_SPI_Receive+0x114>
 8007b66:	e031      	b.n	8007bcc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d113      	bne.n	8007b9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	b292      	uxth	r2, r2
 8007b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b9c:	e011      	b.n	8007bc2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b9e:	f7fa fa11 	bl	8001fc4 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d803      	bhi.n	8007bb6 <HAL_SPI_Receive+0x1cc>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d102      	bne.n	8007bbc <HAL_SPI_Receive+0x1d2>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bc0:	e017      	b.n	8007bf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1cd      	bne.n	8007b68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 fa45 	bl	8008060 <SPI_EndRxTransaction>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
 8007bee:	e000      	b.n	8007bf2 <HAL_SPI_Receive+0x208>
  }

error :
 8007bf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08c      	sub	sp, #48	; 0x30
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_SPI_TransmitReceive+0x26>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e18a      	b.n	8007f48 <HAL_SPI_TransmitReceive+0x33c>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c3a:	f7fa f9c3 	bl	8001fc4 <HAL_GetTick>
 8007c3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c50:	887b      	ldrh	r3, [r7, #2]
 8007c52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d00f      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x70>
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c62:	d107      	bne.n	8007c74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <HAL_SPI_TransmitReceive+0x68>
 8007c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d003      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c7a:	e15b      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x82>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x82>
 8007c88:	887b      	ldrh	r3, [r7, #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c94:	e14e      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d003      	beq.n	8007caa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	887a      	ldrh	r2, [r7, #2]
 8007cba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	887a      	ldrh	r2, [r7, #2]
 8007cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	887a      	ldrh	r2, [r7, #2]
 8007ccc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	887a      	ldrh	r2, [r7, #2]
 8007cd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d007      	beq.n	8007cfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d06:	d178      	bne.n	8007dfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_SPI_TransmitReceive+0x10a>
 8007d10:	8b7b      	ldrh	r3, [r7, #26]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d166      	bne.n	8007de4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	881a      	ldrh	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d3a:	e053      	b.n	8007de4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d11b      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x176>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d016      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x176>
 8007d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d113      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	881a      	ldrh	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	1c9a      	adds	r2, r3, #2
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d119      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x1b8>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d014      	beq.n	8007dc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	b292      	uxth	r2, r2
 8007da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	1c9a      	adds	r2, r3, #2
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dc4:	f7fa f8fe 	bl	8001fc4 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d807      	bhi.n	8007de4 <HAL_SPI_TransmitReceive+0x1d8>
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d003      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007de2:	e0a7      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1a6      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x130>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1a1      	bne.n	8007d3c <HAL_SPI_TransmitReceive+0x130>
 8007df8:	e07c      	b.n	8007ef4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x1fc>
 8007e02:	8b7b      	ldrh	r3, [r7, #26]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d16b      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e2e:	e057      	b.n	8007ee0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d11c      	bne.n	8007e78 <HAL_SPI_TransmitReceive+0x26c>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d017      	beq.n	8007e78 <HAL_SPI_TransmitReceive+0x26c>
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d114      	bne.n	8007e78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	7812      	ldrb	r2, [r2, #0]
 8007e5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d119      	bne.n	8007eba <HAL_SPI_TransmitReceive+0x2ae>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d014      	beq.n	8007eba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	b2d2      	uxtb	r2, r2
 8007e9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007eba:	f7fa f883 	bl	8001fc4 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d803      	bhi.n	8007ed2 <HAL_SPI_TransmitReceive+0x2c6>
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d102      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x2cc>
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d103      	bne.n	8007ee0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ede:	e029      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1a2      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x224>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d19d      	bne.n	8007e30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f917 	bl	800812c <SPI_EndRxTxTransaction>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d006      	beq.n	8007f12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f10:	e010      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10b      	bne.n	8007f32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	e000      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3730      	adds	r7, #48	; 0x30
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f60:	f7fa f830 	bl	8001fc4 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f70:	f7fa f828 	bl	8001fc4 <HAL_GetTick>
 8007f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	015b      	lsls	r3, r3, #5
 8007f7c:	0d1b      	lsrs	r3, r3, #20
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	fb02 f303 	mul.w	r3, r2, r3
 8007f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f86:	e054      	b.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d050      	beq.n	8008032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f90:	f7fa f818 	bl	8001fc4 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d902      	bls.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d13d      	bne.n	8008022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fbe:	d111      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc8:	d004      	beq.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd2:	d107      	bne.n	8007fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fec:	d10f      	bne.n	800800e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800800c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e017      	b.n	8008052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3b01      	subs	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	429a      	cmp	r2, r3
 800804e:	d19b      	bne.n	8007f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000000 	.word	0x20000000

08008060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008074:	d111      	bne.n	800809a <SPI_EndRxTransaction+0x3a>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807e:	d004      	beq.n	800808a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008088:	d107      	bne.n	800809a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008098:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080a2:	d12a      	bne.n	80080fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ac:	d012      	beq.n	80080d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ff49 	bl	8007f50 <SPI_WaitFlagStateUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d02d      	beq.n	8008120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e026      	b.n	8008122 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2200      	movs	r2, #0
 80080dc:	2101      	movs	r1, #1
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff ff36 	bl	8007f50 <SPI_WaitFlagStateUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01a      	beq.n	8008120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	f043 0220 	orr.w	r2, r3, #32
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e013      	b.n	8008122 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	2101      	movs	r1, #1
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff ff23 	bl	8007f50 <SPI_WaitFlagStateUntilTimeout>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008114:	f043 0220 	orr.w	r2, r3, #32
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e000      	b.n	8008122 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008138:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <SPI_EndRxTxTransaction+0x7c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1b      	ldr	r2, [pc, #108]	; (80081ac <SPI_EndRxTxTransaction+0x80>)
 800813e:	fba2 2303 	umull	r2, r3, r2, r3
 8008142:	0d5b      	lsrs	r3, r3, #21
 8008144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008156:	d112      	bne.n	800817e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2200      	movs	r2, #0
 8008160:	2180      	movs	r1, #128	; 0x80
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7ff fef4 	bl	8007f50 <SPI_WaitFlagStateUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	f043 0220 	orr.w	r2, r3, #32
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e00f      	b.n	800819e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	3b01      	subs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008194:	2b80      	cmp	r3, #128	; 0x80
 8008196:	d0f2      	beq.n	800817e <SPI_EndRxTxTransaction+0x52>
 8008198:	e000      	b.n	800819c <SPI_EndRxTxTransaction+0x70>
        break;
 800819a:	bf00      	nop
  }

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000000 	.word	0x20000000
 80081ac:	165e9f81 	.word	0x165e9f81

080081b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e041      	b.n	8008246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7f9 fa40 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f001 fa24 	bl	800963c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d001      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e044      	b.n	80082f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0201 	orr.w	r2, r2, #1
 800827e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <HAL_TIM_Base_Start_IT+0xb0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d018      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0x6c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008292:	d013      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0x6c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1a      	ldr	r2, [pc, #104]	; (8008304 <HAL_TIM_Base_Start_IT+0xb4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00e      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0x6c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a19      	ldr	r2, [pc, #100]	; (8008308 <HAL_TIM_Base_Start_IT+0xb8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d009      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0x6c>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a17      	ldr	r2, [pc, #92]	; (800830c <HAL_TIM_Base_Start_IT+0xbc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <HAL_TIM_Base_Start_IT+0x6c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a16      	ldr	r2, [pc, #88]	; (8008310 <HAL_TIM_Base_Start_IT+0xc0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d111      	bne.n	80082e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b06      	cmp	r3, #6
 80082cc:	d010      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0201 	orr.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082de:	e007      	b.n	80082f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	40010000 	.word	0x40010000
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00
 8008310:	40014000 	.word	0x40014000

08008314 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e041      	b.n	80083aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f839 	bl	80083b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f001 f972 	bl	800963c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	e022      	b.n	800843a <HAL_TIM_PWM_Start_DMA+0x72>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d109      	bne.n	800840e <HAL_TIM_PWM_Start_DMA+0x46>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e015      	b.n	800843a <HAL_TIM_PWM_Start_DMA+0x72>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d109      	bne.n	8008428 <HAL_TIM_PWM_Start_DMA+0x60>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	bf0c      	ite	eq
 8008420:	2301      	moveq	r3, #1
 8008422:	2300      	movne	r3, #0
 8008424:	b2db      	uxtb	r3, r3
 8008426:	e008      	b.n	800843a <HAL_TIM_PWM_Start_DMA+0x72>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	bf0c      	ite	eq
 8008434:	2301      	moveq	r3, #1
 8008436:	2300      	movne	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800843e:	2302      	movs	r3, #2
 8008440:	e15d      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <HAL_TIM_PWM_Start_DMA+0x94>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b01      	cmp	r3, #1
 8008452:	bf0c      	ite	eq
 8008454:	2301      	moveq	r3, #1
 8008456:	2300      	movne	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e022      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0xda>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b04      	cmp	r3, #4
 8008460:	d109      	bne.n	8008476 <HAL_TIM_PWM_Start_DMA+0xae>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b01      	cmp	r3, #1
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	e015      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b08      	cmp	r3, #8
 800847a:	d109      	bne.n	8008490 <HAL_TIM_PWM_Start_DMA+0xc8>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	bf0c      	ite	eq
 8008488:	2301      	moveq	r3, #1
 800848a:	2300      	movne	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	e008      	b.n	80084a2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d024      	beq.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start_DMA+0xee>
 80084ac:	887b      	ldrh	r3, [r7, #2]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e123      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c4:	e016      	b.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d4:	e00e      	b.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d104      	bne.n	80084e6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2202      	movs	r2, #2
 80084e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e4:	e006      	b.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ee:	e001      	b.n	80084f4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e104      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b0c      	cmp	r3, #12
 80084f8:	f200 80ae 	bhi.w	8008658 <HAL_TIM_PWM_Start_DMA+0x290>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008539 	.word	0x08008539
 8008508:	08008659 	.word	0x08008659
 800850c:	08008659 	.word	0x08008659
 8008510:	08008659 	.word	0x08008659
 8008514:	08008581 	.word	0x08008581
 8008518:	08008659 	.word	0x08008659
 800851c:	08008659 	.word	0x08008659
 8008520:	08008659 	.word	0x08008659
 8008524:	080085c9 	.word	0x080085c9
 8008528:	08008659 	.word	0x08008659
 800852c:	08008659 	.word	0x08008659
 8008530:	08008659 	.word	0x08008659
 8008534:	08008611 	.word	0x08008611
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	4a72      	ldr	r2, [pc, #456]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x340>)
 800853e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	4a71      	ldr	r2, [pc, #452]	; (800870c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	4a70      	ldr	r2, [pc, #448]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x348>)
 800854e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3334      	adds	r3, #52	; 0x34
 800855c:	461a      	mov	r2, r3
 800855e:	887b      	ldrh	r3, [r7, #2]
 8008560:	f7f9 ff0c 	bl	800237c <HAL_DMA_Start_IT>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e0c7      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857c:	60da      	str	r2, [r3, #12]
      break;
 800857e:	e06e      	b.n	800865e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008584:	4a60      	ldr	r2, [pc, #384]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008586:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	4a5f      	ldr	r2, [pc, #380]	; (800870c <HAL_TIM_PWM_Start_DMA+0x344>)
 800858e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	4a5e      	ldr	r2, [pc, #376]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008596:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3338      	adds	r3, #56	; 0x38
 80085a4:	461a      	mov	r2, r3
 80085a6:	887b      	ldrh	r3, [r7, #2]
 80085a8:	f7f9 fee8 	bl	800237c <HAL_DMA_Start_IT>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e0a3      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085c4:	60da      	str	r2, [r3, #12]
      break;
 80085c6:	e04a      	b.n	800865e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085cc:	4a4e      	ldr	r2, [pc, #312]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x340>)
 80085ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d4:	4a4d      	ldr	r2, [pc, #308]	; (800870c <HAL_TIM_PWM_Start_DMA+0x344>)
 80085d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4a4c      	ldr	r2, [pc, #304]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x348>)
 80085de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	333c      	adds	r3, #60	; 0x3c
 80085ec:	461a      	mov	r2, r3
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	f7f9 fec4 	bl	800237c <HAL_DMA_Start_IT>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e07f      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800860c:	60da      	str	r2, [r3, #12]
      break;
 800860e:	e026      	b.n	800865e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008614:	4a3c      	ldr	r2, [pc, #240]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008616:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861c:	4a3b      	ldr	r2, [pc, #236]	; (800870c <HAL_TIM_PWM_Start_DMA+0x344>)
 800861e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	4a3a      	ldr	r2, [pc, #232]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008626:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3340      	adds	r3, #64	; 0x40
 8008634:	461a      	mov	r2, r3
 8008636:	887b      	ldrh	r3, [r7, #2]
 8008638:	f7f9 fea0 	bl	800237c <HAL_DMA_Start_IT>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e05b      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008654:	60da      	str	r2, [r3, #12]
      break;
 8008656:	e002      	b.n	800865e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	bf00      	nop
  }

  if (status == HAL_OK)
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d14b      	bne.n	80086fc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2201      	movs	r2, #1
 800866a:	68b9      	ldr	r1, [r7, #8]
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fba9 	bl	8009dc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a27      	ldr	r2, [pc, #156]	; (8008714 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d107      	bne.n	800868c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800868a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a20      	ldr	r2, [pc, #128]	; (8008714 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x300>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <HAL_TIM_PWM_Start_DMA+0x350>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1b      	ldr	r2, [pc, #108]	; (800871c <HAL_TIM_PWM_Start_DMA+0x354>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a19      	ldr	r2, [pc, #100]	; (8008720 <HAL_TIM_PWM_Start_DMA+0x358>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x300>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a18      	ldr	r2, [pc, #96]	; (8008724 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d111      	bne.n	80086ec <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d010      	beq.n	80086fc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ea:	e007      	b.n	80086fc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	080093fd 	.word	0x080093fd
 800870c:	080094a5 	.word	0x080094a5
 8008710:	0800936b 	.word	0x0800936b
 8008714:	40010000 	.word	0x40010000
 8008718:	40000400 	.word	0x40000400
 800871c:	40000800 	.word	0x40000800
 8008720:	40000c00 	.word	0x40000c00
 8008724:	40014000 	.word	0x40014000

08008728 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e041      	b.n	80087be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f839 	bl	80087c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f000 ff68 	bl	800963c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <HAL_TIM_IC_Start_DMA+0x22>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	e013      	b.n	8008826 <HAL_TIM_IC_Start_DMA+0x4a>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b04      	cmp	r3, #4
 8008802:	d104      	bne.n	800880e <HAL_TIM_IC_Start_DMA+0x32>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800880a:	b2db      	uxtb	r3, r3
 800880c:	e00b      	b.n	8008826 <HAL_TIM_IC_Start_DMA+0x4a>
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d104      	bne.n	800881e <HAL_TIM_IC_Start_DMA+0x42>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800881a:	b2db      	uxtb	r3, r3
 800881c:	e003      	b.n	8008826 <HAL_TIM_IC_Start_DMA+0x4a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008824:	b2db      	uxtb	r3, r3
 8008826:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <HAL_TIM_IC_Start_DMA+0x5c>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e013      	b.n	8008860 <HAL_TIM_IC_Start_DMA+0x84>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d104      	bne.n	8008848 <HAL_TIM_IC_Start_DMA+0x6c>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008844:	b2db      	uxtb	r3, r3
 8008846:	e00b      	b.n	8008860 <HAL_TIM_IC_Start_DMA+0x84>
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b08      	cmp	r3, #8
 800884c:	d104      	bne.n	8008858 <HAL_TIM_IC_Start_DMA+0x7c>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008854:	b2db      	uxtb	r3, r3
 8008856:	e003      	b.n	8008860 <HAL_TIM_IC_Start_DMA+0x84>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800885e:	b2db      	uxtb	r3, r3
 8008860:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008862:	7dbb      	ldrb	r3, [r7, #22]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d002      	beq.n	800886e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008868:	7d7b      	ldrb	r3, [r7, #21]
 800886a:	2b02      	cmp	r3, #2
 800886c:	d101      	bne.n	8008872 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800886e:	2302      	movs	r3, #2
 8008870:	e13c      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008872:	7dbb      	ldrb	r3, [r7, #22]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d143      	bne.n	8008900 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008878:	7d7b      	ldrb	r3, [r7, #21]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d140      	bne.n	8008900 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <HAL_TIM_IC_Start_DMA+0xb2>
 8008884:	887b      	ldrh	r3, [r7, #2]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e12e      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <HAL_TIM_IC_Start_DMA+0xc2>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800889c:	e013      	b.n	80088c6 <HAL_TIM_IC_Start_DMA+0xea>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_IC_Start_DMA+0xd2>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ac:	e00b      	b.n	80088c6 <HAL_TIM_IC_Start_DMA+0xea>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d104      	bne.n	80088be <HAL_TIM_IC_Start_DMA+0xe2>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088bc:	e003      	b.n	80088c6 <HAL_TIM_IC_Start_DMA+0xea>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2202      	movs	r2, #2
 80088c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <HAL_TIM_IC_Start_DMA+0xfa>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80088d4:	e016      	b.n	8008904 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d104      	bne.n	80088e6 <HAL_TIM_IC_Start_DMA+0x10a>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80088e4:	e00e      	b.n	8008904 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d104      	bne.n	80088f6 <HAL_TIM_IC_Start_DMA+0x11a>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80088f4:	e006      	b.n	8008904 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80088fe:	e001      	b.n	8008904 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0f3      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2201      	movs	r2, #1
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	4618      	mov	r0, r3
 800890e:	f001 fa59 	bl	8009dc4 <TIM_CCxChannelCmd>

  switch (Channel)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b0c      	cmp	r3, #12
 8008916:	f200 80ad 	bhi.w	8008a74 <HAL_TIM_IC_Start_DMA+0x298>
 800891a:	a201      	add	r2, pc, #4	; (adr r2, 8008920 <HAL_TIM_IC_Start_DMA+0x144>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008955 	.word	0x08008955
 8008924:	08008a75 	.word	0x08008a75
 8008928:	08008a75 	.word	0x08008a75
 800892c:	08008a75 	.word	0x08008a75
 8008930:	0800899d 	.word	0x0800899d
 8008934:	08008a75 	.word	0x08008a75
 8008938:	08008a75 	.word	0x08008a75
 800893c:	08008a75 	.word	0x08008a75
 8008940:	080089e5 	.word	0x080089e5
 8008944:	08008a75 	.word	0x08008a75
 8008948:	08008a75 	.word	0x08008a75
 800894c:	08008a75 	.word	0x08008a75
 8008950:	08008a2d 	.word	0x08008a2d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	4a66      	ldr	r2, [pc, #408]	; (8008af4 <HAL_TIM_IC_Start_DMA+0x318>)
 800895a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	4a65      	ldr	r2, [pc, #404]	; (8008af8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	4a64      	ldr	r2, [pc, #400]	; (8008afc <HAL_TIM_IC_Start_DMA+0x320>)
 800896a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3334      	adds	r3, #52	; 0x34
 8008976:	4619      	mov	r1, r3
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	887b      	ldrh	r3, [r7, #2]
 800897c:	f7f9 fcfe 	bl	800237c <HAL_DMA_Start_IT>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e0b0      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008998:	60da      	str	r2, [r3, #12]
      break;
 800899a:	e06e      	b.n	8008a7a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	4a54      	ldr	r2, [pc, #336]	; (8008af4 <HAL_TIM_IC_Start_DMA+0x318>)
 80089a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	4a53      	ldr	r2, [pc, #332]	; (8008af8 <HAL_TIM_IC_Start_DMA+0x31c>)
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	4a52      	ldr	r2, [pc, #328]	; (8008afc <HAL_TIM_IC_Start_DMA+0x320>)
 80089b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3338      	adds	r3, #56	; 0x38
 80089be:	4619      	mov	r1, r3
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	887b      	ldrh	r3, [r7, #2]
 80089c4:	f7f9 fcda 	bl	800237c <HAL_DMA_Start_IT>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e08c      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089e0:	60da      	str	r2, [r3, #12]
      break;
 80089e2:	e04a      	b.n	8008a7a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	4a42      	ldr	r2, [pc, #264]	; (8008af4 <HAL_TIM_IC_Start_DMA+0x318>)
 80089ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	4a41      	ldr	r2, [pc, #260]	; (8008af8 <HAL_TIM_IC_Start_DMA+0x31c>)
 80089f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	4a40      	ldr	r2, [pc, #256]	; (8008afc <HAL_TIM_IC_Start_DMA+0x320>)
 80089fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	333c      	adds	r3, #60	; 0x3c
 8008a06:	4619      	mov	r1, r3
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	887b      	ldrh	r3, [r7, #2]
 8008a0c:	f7f9 fcb6 	bl	800237c <HAL_DMA_Start_IT>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e068      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a28:	60da      	str	r2, [r3, #12]
      break;
 8008a2a:	e026      	b.n	8008a7a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	4a30      	ldr	r2, [pc, #192]	; (8008af4 <HAL_TIM_IC_Start_DMA+0x318>)
 8008a32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	4a2f      	ldr	r2, [pc, #188]	; (8008af8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	4a2e      	ldr	r2, [pc, #184]	; (8008afc <HAL_TIM_IC_Start_DMA+0x320>)
 8008a42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3340      	adds	r3, #64	; 0x40
 8008a4e:	4619      	mov	r1, r3
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	887b      	ldrh	r3, [r7, #2]
 8008a54:	f7f9 fc92 	bl	800237c <HAL_DMA_Start_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e044      	b.n	8008aec <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a70:	60da      	str	r2, [r3, #12]
      break;
 8008a72:	e002      	b.n	8008a7a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
      break;
 8008a78:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a20      	ldr	r2, [pc, #128]	; (8008b00 <HAL_TIM_IC_Start_DMA+0x324>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x2da>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8c:	d013      	beq.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x2da>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a1c      	ldr	r2, [pc, #112]	; (8008b04 <HAL_TIM_IC_Start_DMA+0x328>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x2da>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x2da>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <HAL_TIM_IC_Start_DMA+0x330>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x2da>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a17      	ldr	r2, [pc, #92]	; (8008b10 <HAL_TIM_IC_Start_DMA+0x334>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d111      	bne.n	8008ada <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b06      	cmp	r3, #6
 8008ac6:	d010      	beq.n	8008aea <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad8:	e007      	b.n	8008aea <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f042 0201 	orr.w	r2, r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	0800950d 	.word	0x0800950d
 8008af8:	080095d5 	.word	0x080095d5
 8008afc:	0800936b 	.word	0x0800936b
 8008b00:	40010000 	.word	0x40010000
 8008b04:	40000400 	.word	0x40000400
 8008b08:	40000800 	.word	0x40000800
 8008b0c:	40000c00 	.word	0x40000c00
 8008b10:	40014000 	.word	0x40014000

08008b14 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2200      	movs	r2, #0
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f001 f94a 	bl	8009dc4 <TIM_CCxChannelCmd>

  switch (Channel)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b0c      	cmp	r3, #12
 8008b34:	d854      	bhi.n	8008be0 <HAL_TIM_IC_Stop_DMA+0xcc>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <HAL_TIM_IC_Stop_DMA+0x28>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b71 	.word	0x08008b71
 8008b40:	08008be1 	.word	0x08008be1
 8008b44:	08008be1 	.word	0x08008be1
 8008b48:	08008be1 	.word	0x08008be1
 8008b4c:	08008b8d 	.word	0x08008b8d
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008be1 	.word	0x08008be1
 8008b5c:	08008ba9 	.word	0x08008ba9
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008bc5 	.word	0x08008bc5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f9 fcc1 	bl	800250c <HAL_DMA_Abort_IT>
      break;
 8008b8a:	e02c      	b.n	8008be6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f9 fcb3 	bl	800250c <HAL_DMA_Abort_IT>
      break;
 8008ba6:	e01e      	b.n	8008be6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f9 fca5 	bl	800250c <HAL_DMA_Abort_IT>
      break;
 8008bc2:	e010      	b.n	8008be6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7f9 fc97 	bl	800250c <HAL_DMA_Abort_IT>
      break;
 8008bde:	e002      	b.n	8008be6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	73fb      	strb	r3, [r7, #15]
      break;
 8008be4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d14f      	bne.n	8008c8c <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6a1a      	ldr	r2, [r3, #32]
 8008bf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10f      	bne.n	8008c1c <HAL_TIM_IC_Stop_DMA+0x108>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	f240 4344 	movw	r3, #1092	; 0x444
 8008c06:	4013      	ands	r3, r2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d107      	bne.n	8008c1c <HAL_TIM_IC_Stop_DMA+0x108>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0201 	bic.w	r2, r2, #1
 8008c1a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <HAL_TIM_IC_Stop_DMA+0x118>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c2a:	e013      	b.n	8008c54 <HAL_TIM_IC_Stop_DMA+0x140>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d104      	bne.n	8008c3c <HAL_TIM_IC_Stop_DMA+0x128>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c3a:	e00b      	b.n	8008c54 <HAL_TIM_IC_Stop_DMA+0x140>
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d104      	bne.n	8008c4c <HAL_TIM_IC_Stop_DMA+0x138>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c4a:	e003      	b.n	8008c54 <HAL_TIM_IC_Stop_DMA+0x140>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d104      	bne.n	8008c64 <HAL_TIM_IC_Stop_DMA+0x150>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c62:	e013      	b.n	8008c8c <HAL_TIM_IC_Stop_DMA+0x178>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d104      	bne.n	8008c74 <HAL_TIM_IC_Stop_DMA+0x160>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c72:	e00b      	b.n	8008c8c <HAL_TIM_IC_Stop_DMA+0x178>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d104      	bne.n	8008c84 <HAL_TIM_IC_Stop_DMA+0x170>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c82:	e003      	b.n	8008c8c <HAL_TIM_IC_Stop_DMA+0x178>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop

08008c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d122      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d11b      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0202 	mvn.w	r2, #2
 8008cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fb13 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb05 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f009 f8b5 	bl	8011e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0204 	mvn.w	r2, #4
 8008d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fae9 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fadb 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f009 f88b 	bl	8011e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d122      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d11b      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0208 	mvn.w	r2, #8
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2204      	movs	r2, #4
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fabf 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fab1 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f009 f861 	bl	8011e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d122      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d11b      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa95 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa87 	bl	80092f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f009 f837 	bl	8011e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0201 	mvn.w	r2, #1
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f7 feac 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d10e      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d107      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 f8ae 	bl	8009fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d10e      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d107      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa67 	bl	8009342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d10e      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d107      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0220 	mvn.w	r2, #32
 8008e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 f878 	bl	8009f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e088      	b.n	8008fd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11b      	bne.n	8008f0c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6819      	ldr	r1, [r3, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f000 fdb6 	bl	8009a54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699a      	ldr	r2, [r3, #24]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 020c 	bic.w	r2, r2, #12
 8008ef6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6999      	ldr	r1, [r3, #24]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	619a      	str	r2, [r3, #24]
 8008f0a:	e060      	b.n	8008fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d11c      	bne.n	8008f4c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6819      	ldr	r1, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f000 fe2e 	bl	8009b82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6999      	ldr	r1, [r3, #24]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	021a      	lsls	r2, r3, #8
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	619a      	str	r2, [r3, #24]
 8008f4a:	e040      	b.n	8008fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d11b      	bne.n	8008f8a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6819      	ldr	r1, [r3, #0]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f000 fe7b 	bl	8009c5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 020c 	bic.w	r2, r2, #12
 8008f74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69d9      	ldr	r1, [r3, #28]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	689a      	ldr	r2, [r3, #8]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	61da      	str	r2, [r3, #28]
 8008f88:	e021      	b.n	8008fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b0c      	cmp	r3, #12
 8008f8e:	d11c      	bne.n	8008fca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f000 fe98 	bl	8009cd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69da      	ldr	r2, [r3, #28]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fb2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69d9      	ldr	r1, [r3, #28]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	021a      	lsls	r2, r3, #8
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	61da      	str	r2, [r3, #28]
 8008fc8:	e001      	b.n	8008fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	e0ae      	b.n	800915c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b0c      	cmp	r3, #12
 800900a:	f200 809f 	bhi.w	800914c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009049 	.word	0x08009049
 8009018:	0800914d 	.word	0x0800914d
 800901c:	0800914d 	.word	0x0800914d
 8009020:	0800914d 	.word	0x0800914d
 8009024:	08009089 	.word	0x08009089
 8009028:	0800914d 	.word	0x0800914d
 800902c:	0800914d 	.word	0x0800914d
 8009030:	0800914d 	.word	0x0800914d
 8009034:	080090cb 	.word	0x080090cb
 8009038:	0800914d 	.word	0x0800914d
 800903c:	0800914d 	.word	0x0800914d
 8009040:	0800914d 	.word	0x0800914d
 8009044:	0800910b 	.word	0x0800910b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fb74 	bl	800973c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0208 	orr.w	r2, r2, #8
 8009062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f022 0204 	bic.w	r2, r2, #4
 8009072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6999      	ldr	r1, [r3, #24]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	619a      	str	r2, [r3, #24]
      break;
 8009086:	e064      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fbba 	bl	8009808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699a      	ldr	r2, [r3, #24]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6999      	ldr	r1, [r3, #24]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	021a      	lsls	r2, r3, #8
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	619a      	str	r2, [r3, #24]
      break;
 80090c8:	e043      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fc05 	bl	80098e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69da      	ldr	r2, [r3, #28]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0208 	orr.w	r2, r2, #8
 80090e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69da      	ldr	r2, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0204 	bic.w	r2, r2, #4
 80090f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69d9      	ldr	r1, [r3, #28]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	61da      	str	r2, [r3, #28]
      break;
 8009108:	e023      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68b9      	ldr	r1, [r7, #8]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fc4f 	bl	80099b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	69da      	ldr	r2, [r3, #28]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69d9      	ldr	r1, [r3, #28]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	021a      	lsls	r2, r3, #8
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	61da      	str	r2, [r3, #28]
      break;
 800914a:	e002      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
      break;
 8009150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800915a:	7dfb      	ldrb	r3, [r7, #23]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_TIM_ConfigClockSource+0x1c>
 800917c:	2302      	movs	r3, #2
 800917e:	e0b4      	b.n	80092ea <HAL_TIM_ConfigClockSource+0x186>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800919e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b8:	d03e      	beq.n	8009238 <HAL_TIM_ConfigClockSource+0xd4>
 80091ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091be:	f200 8087 	bhi.w	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	f000 8086 	beq.w	80092d6 <HAL_TIM_ConfigClockSource+0x172>
 80091ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ce:	d87f      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b70      	cmp	r3, #112	; 0x70
 80091d2:	d01a      	beq.n	800920a <HAL_TIM_ConfigClockSource+0xa6>
 80091d4:	2b70      	cmp	r3, #112	; 0x70
 80091d6:	d87b      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d8:	2b60      	cmp	r3, #96	; 0x60
 80091da:	d050      	beq.n	800927e <HAL_TIM_ConfigClockSource+0x11a>
 80091dc:	2b60      	cmp	r3, #96	; 0x60
 80091de:	d877      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e0:	2b50      	cmp	r3, #80	; 0x50
 80091e2:	d03c      	beq.n	800925e <HAL_TIM_ConfigClockSource+0xfa>
 80091e4:	2b50      	cmp	r3, #80	; 0x50
 80091e6:	d873      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091e8:	2b40      	cmp	r3, #64	; 0x40
 80091ea:	d058      	beq.n	800929e <HAL_TIM_ConfigClockSource+0x13a>
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d86f      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b30      	cmp	r3, #48	; 0x30
 80091f2:	d064      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 80091f4:	2b30      	cmp	r3, #48	; 0x30
 80091f6:	d86b      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d060      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d867      	bhi.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d05c      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 8009204:	2b10      	cmp	r3, #16
 8009206:	d05a      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x15a>
 8009208:	e062      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6899      	ldr	r1, [r3, #8]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	f000 fdb3 	bl	8009d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800922c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	609a      	str	r2, [r3, #8]
      break;
 8009236:	e04f      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	6899      	ldr	r1, [r3, #8]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f000 fd9c 	bl	8009d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800925a:	609a      	str	r2, [r3, #8]
      break;
 800925c:	e03c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6859      	ldr	r1, [r3, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	461a      	mov	r2, r3
 800926c:	f000 fc5a 	bl	8009b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2150      	movs	r1, #80	; 0x50
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fd69 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 800927c:	e02c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	6859      	ldr	r1, [r3, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	461a      	mov	r2, r3
 800928c:	f000 fcb6 	bl	8009bfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2160      	movs	r1, #96	; 0x60
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fd59 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 800929c:	e01c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	6859      	ldr	r1, [r3, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	461a      	mov	r2, r3
 80092ac:	f000 fc3a 	bl	8009b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2140      	movs	r1, #64	; 0x40
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fd49 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 80092bc:	e00c      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f000 fd40 	bl	8009d4e <TIM_ITRx_SetConfig>
      break;
 80092ce:	e003      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
      break;
 80092d4:	e000      	b.n	80092d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d107      	bne.n	8009392 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2201      	movs	r2, #1
 8009386:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009390:	e02a      	b.n	80093e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	429a      	cmp	r2, r3
 800939a:	d107      	bne.n	80093ac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2202      	movs	r2, #2
 80093a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093aa:	e01d      	b.n	80093e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d107      	bne.n	80093c6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2204      	movs	r2, #4
 80093ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093c4:	e010      	b.n	80093e8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d107      	bne.n	80093e0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2208      	movs	r2, #8
 80093d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093de:	e003      	b.n	80093e8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff ffb4 	bl	8009356 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	771a      	strb	r2, [r3, #28]
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d10b      	bne.n	800942c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2201      	movs	r2, #1
 8009418:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d136      	bne.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800942a:	e031      	b.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	d10b      	bne.n	800944e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2202      	movs	r2, #2
 800943a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d125      	bne.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800944c:	e020      	b.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d10b      	bne.n	8009470 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2204      	movs	r2, #4
 800945c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d114      	bne.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800946e:	e00f      	b.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d10a      	bne.n	8009490 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2208      	movs	r2, #8
 800947e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d103      	bne.n	8009490 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f008 fce1 	bl	8011e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	771a      	strb	r2, [r3, #28]
}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d103      	bne.n	80094c4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	771a      	strb	r2, [r3, #28]
 80094c2:	e019      	b.n	80094f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d103      	bne.n	80094d6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2202      	movs	r2, #2
 80094d2:	771a      	strb	r2, [r3, #28]
 80094d4:	e010      	b.n	80094f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d103      	bne.n	80094e8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2204      	movs	r2, #4
 80094e4:	771a      	strb	r2, [r3, #28]
 80094e6:	e007      	b.n	80094f8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d102      	bne.n	80094f8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2208      	movs	r2, #8
 80094f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff ff18 	bl	800932e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	771a      	strb	r2, [r3, #28]
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d10f      	bne.n	8009544 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d146      	bne.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009542:	e03d      	b.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	429a      	cmp	r2, r3
 800954c:	d10f      	bne.n	800956e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d131      	bne.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800956c:	e028      	b.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	429a      	cmp	r2, r3
 8009576:	d10f      	bne.n	8009598 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2204      	movs	r2, #4
 800957c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d11c      	bne.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009596:	e013      	b.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10e      	bne.n	80095c0 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2208      	movs	r2, #8
 80095a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d107      	bne.n	80095c0 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff fea0 	bl	8009306 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	771a      	strb	r2, [r3, #28]
}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d103      	bne.n	80095f4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	771a      	strb	r2, [r3, #28]
 80095f2:	e019      	b.n	8009628 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d103      	bne.n	8009606 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	771a      	strb	r2, [r3, #28]
 8009604:	e010      	b.n	8009628 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	429a      	cmp	r2, r3
 800960e:	d103      	bne.n	8009618 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2204      	movs	r2, #4
 8009614:	771a      	strb	r2, [r3, #28]
 8009616:	e007      	b.n	8009628 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	429a      	cmp	r2, r3
 8009620:	d102      	bne.n	8009628 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2208      	movs	r2, #8
 8009626:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7ff fe76 	bl	800931a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	771a      	strb	r2, [r3, #28]
}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a34      	ldr	r2, [pc, #208]	; (8009720 <TIM_Base_SetConfig+0xe4>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00f      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965a:	d00b      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a31      	ldr	r2, [pc, #196]	; (8009724 <TIM_Base_SetConfig+0xe8>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a30      	ldr	r2, [pc, #192]	; (8009728 <TIM_Base_SetConfig+0xec>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_Base_SetConfig+0x38>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a2f      	ldr	r2, [pc, #188]	; (800972c <TIM_Base_SetConfig+0xf0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d108      	bne.n	8009686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a25      	ldr	r2, [pc, #148]	; (8009720 <TIM_Base_SetConfig+0xe4>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01b      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d017      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a22      	ldr	r2, [pc, #136]	; (8009724 <TIM_Base_SetConfig+0xe8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d013      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a21      	ldr	r2, [pc, #132]	; (8009728 <TIM_Base_SetConfig+0xec>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d00f      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a20      	ldr	r2, [pc, #128]	; (800972c <TIM_Base_SetConfig+0xf0>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00b      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <TIM_Base_SetConfig+0xf4>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d007      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a1e      	ldr	r2, [pc, #120]	; (8009734 <TIM_Base_SetConfig+0xf8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d003      	beq.n	80096c6 <TIM_Base_SetConfig+0x8a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a1d      	ldr	r2, [pc, #116]	; (8009738 <TIM_Base_SetConfig+0xfc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d108      	bne.n	80096d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689a      	ldr	r2, [r3, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a08      	ldr	r2, [pc, #32]	; (8009720 <TIM_Base_SetConfig+0xe4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d103      	bne.n	800970c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	615a      	str	r2, [r3, #20]
}
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40010000 	.word	0x40010000
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40000c00 	.word	0x40000c00
 8009730:	40014000 	.word	0x40014000
 8009734:	40014400 	.word	0x40014400
 8009738:	40014800 	.word	0x40014800

0800973c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	f023 0201 	bic.w	r2, r3, #1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800976a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f023 0302 	bic.w	r3, r3, #2
 8009784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	4313      	orrs	r3, r2
 800978e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a1c      	ldr	r2, [pc, #112]	; (8009804 <TIM_OC1_SetConfig+0xc8>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d10c      	bne.n	80097b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0308 	bic.w	r3, r3, #8
 800979e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 0304 	bic.w	r3, r3, #4
 80097b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a13      	ldr	r2, [pc, #76]	; (8009804 <TIM_OC1_SetConfig+0xc8>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d111      	bne.n	80097de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	621a      	str	r2, [r3, #32]
}
 80097f8:	bf00      	nop
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	40010000 	.word	0x40010000

08009808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	f023 0210 	bic.w	r2, r3, #16
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f023 0320 	bic.w	r3, r3, #32
 8009852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	011b      	lsls	r3, r3, #4
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a1e      	ldr	r2, [pc, #120]	; (80098dc <TIM_OC2_SetConfig+0xd4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d10d      	bne.n	8009884 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a15      	ldr	r2, [pc, #84]	; (80098dc <TIM_OC2_SetConfig+0xd4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d113      	bne.n	80098b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800989a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	621a      	str	r2, [r3, #32]
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	40010000 	.word	0x40010000

080098e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0303 	bic.w	r3, r3, #3
 8009916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	021b      	lsls	r3, r3, #8
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	4313      	orrs	r3, r2
 8009934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a1d      	ldr	r2, [pc, #116]	; (80099b0 <TIM_OC3_SetConfig+0xd0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d10d      	bne.n	800995a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <TIM_OC3_SetConfig+0xd0>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d113      	bne.n	800998a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	4313      	orrs	r3, r2
 8009988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	621a      	str	r2, [r3, #32]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	40010000 	.word	0x40010000

080099b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69db      	ldr	r3, [r3, #28]
 80099da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	031b      	lsls	r3, r3, #12
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a10      	ldr	r2, [pc, #64]	; (8009a50 <TIM_OC4_SetConfig+0x9c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d109      	bne.n	8009a28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	019b      	lsls	r3, r3, #6
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	621a      	str	r2, [r3, #32]
}
 8009a42:	bf00      	nop
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40010000 	.word	0x40010000

08009a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0201 	bic.w	r2, r3, #1
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4a24      	ldr	r2, [pc, #144]	; (8009b10 <TIM_TI1_SetConfig+0xbc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_TI1_SetConfig+0x56>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a88:	d00f      	beq.n	8009aaa <TIM_TI1_SetConfig+0x56>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a21      	ldr	r2, [pc, #132]	; (8009b14 <TIM_TI1_SetConfig+0xc0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_TI1_SetConfig+0x56>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4a20      	ldr	r2, [pc, #128]	; (8009b18 <TIM_TI1_SetConfig+0xc4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_TI1_SetConfig+0x56>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <TIM_TI1_SetConfig+0xc8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_TI1_SetConfig+0x56>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a1e      	ldr	r2, [pc, #120]	; (8009b20 <TIM_TI1_SetConfig+0xcc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d101      	bne.n	8009aae <TIM_TI1_SetConfig+0x5a>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e000      	b.n	8009ab0 <TIM_TI1_SetConfig+0x5c>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d008      	beq.n	8009ac6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e003      	b.n	8009ace <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f043 0301 	orr.w	r3, r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f023 030a 	bic.w	r3, r3, #10
 8009ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f003 030a 	and.w	r3, r3, #10
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	621a      	str	r2, [r3, #32]
}
 8009b02:	bf00      	nop
 8009b04:	371c      	adds	r7, #28
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40010000 	.word	0x40010000
 8009b14:	40000400 	.word	0x40000400
 8009b18:	40000800 	.word	0x40000800
 8009b1c:	40000c00 	.word	0x40000c00
 8009b20:	40014000 	.word	0x40014000

08009b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f023 0201 	bic.w	r2, r3, #1
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f023 030a 	bic.w	r3, r3, #10
 8009b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	f023 0210 	bic.w	r2, r3, #16
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	031b      	lsls	r3, r3, #12
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	011b      	lsls	r3, r3, #4
 8009bda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	621a      	str	r2, [r3, #32]
}
 8009bf0:	bf00      	nop
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
 8009c0c:	f023 0210 	bic.w	r2, r3, #16
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	031b      	lsls	r3, r3, #12
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	693a      	ldr	r2, [r7, #16]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	621a      	str	r2, [r3, #32]
}
 8009c50:	bf00      	nop
 8009c52:	371c      	adds	r7, #28
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a1b      	ldr	r3, [r3, #32]
 8009c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	f023 0303 	bic.w	r3, r3, #3
 8009c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009cac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	621a      	str	r2, [r3, #32]
}
 8009cc8:	bf00      	nop
 8009cca:	371c      	adds	r7, #28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b087      	sub	sp, #28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	031b      	lsls	r3, r3, #12
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009d26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	031b      	lsls	r3, r3, #12
 8009d2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	f043 0307 	orr.w	r3, r3, #7
 8009d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	609a      	str	r2, [r3, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	021a      	lsls	r2, r3, #8
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	609a      	str	r2, [r3, #8]
}
 8009db8:	bf00      	nop
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 031f 	and.w	r3, r3, #31
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6a1a      	ldr	r2, [r3, #32]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	43db      	mvns	r3, r3
 8009de6:	401a      	ands	r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6a1a      	ldr	r2, [r3, #32]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f003 031f 	and.w	r3, r3, #31
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	621a      	str	r2, [r3, #32]
}
 8009e02:	bf00      	nop
 8009e04:	371c      	adds	r7, #28
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
	...

08009e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e050      	b.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d018      	beq.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e74:	d013      	beq.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a18      	ldr	r2, [pc, #96]	; (8009edc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d00e      	beq.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a16      	ldr	r2, [pc, #88]	; (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d009      	beq.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a15      	ldr	r2, [pc, #84]	; (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d004      	beq.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a13      	ldr	r2, [pc, #76]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d10c      	bne.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40014000 	.word	0x40014000

08009eec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e03d      	b.n	8009f84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e03f      	b.n	800a04a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f7 fec8 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2224      	movs	r2, #36	; 0x24
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68da      	ldr	r2, [r3, #12]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 ff9d 	bl	800af3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	695a      	ldr	r2, [r3, #20]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68da      	ldr	r2, [r3, #12]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b08a      	sub	sp, #40	; 0x28
 800a056:	af02      	add	r7, sp, #8
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4613      	mov	r3, r2
 800a060:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b20      	cmp	r3, #32
 800a070:	d17c      	bne.n	800a16c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <HAL_UART_Transmit+0x2c>
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e075      	b.n	800a16e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_UART_Transmit+0x3e>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e06e      	b.n	800a16e <HAL_UART_Transmit+0x11c>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2221      	movs	r2, #33	; 0x21
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0a6:	f7f7 ff8d 	bl	8001fc4 <HAL_GetTick>
 800a0aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	88fa      	ldrh	r2, [r7, #6]
 800a0b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c0:	d108      	bne.n	800a0d4 <HAL_UART_Transmit+0x82>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	61bb      	str	r3, [r7, #24]
 800a0d2:	e003      	b.n	800a0dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a0e4:	e02a      	b.n	800a13c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fc55 	bl	800a9a0 <UART_WaitOnFlagUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e036      	b.n	800a16e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	3302      	adds	r3, #2
 800a11a:	61bb      	str	r3, [r7, #24]
 800a11c:	e007      	b.n	800a12e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	781a      	ldrb	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	3301      	adds	r3, #1
 800a12c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a140:	b29b      	uxth	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1cf      	bne.n	800a0e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2200      	movs	r2, #0
 800a14e:	2140      	movs	r1, #64	; 0x40
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 fc25 	bl	800a9a0 <UART_WaitOnFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e006      	b.n	800a16e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	e000      	b.n	800a16e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b08c      	sub	sp, #48	; 0x30
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	4613      	mov	r3, r2
 800a182:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d152      	bne.n	800a236 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e04b      	b.n	800a238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e044      	b.n	800a238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	68b9      	ldr	r1, [r7, #8]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fc5a 	bl	800aa7c <UART_Start_Receive_DMA>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d12c      	bne.n	800a230 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d125      	bne.n	800a22a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	613b      	str	r3, [r7, #16]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	613b      	str	r3, [r7, #16]
 800a1f2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	330c      	adds	r3, #12
 800a1fa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	617b      	str	r3, [r7, #20]
   return(result);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f043 0310 	orr.w	r3, r3, #16
 800a20a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	330c      	adds	r3, #12
 800a212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a214:	627a      	str	r2, [r7, #36]	; 0x24
 800a216:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	6a39      	ldr	r1, [r7, #32]
 800a21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	61fb      	str	r3, [r7, #28]
   return(result);
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e5      	bne.n	800a1f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a228:	e002      	b.n	800a230 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a234:	e000      	b.n	800a238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a236:	2302      	movs	r3, #2
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3730      	adds	r7, #48	; 0x30
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b0ba      	sub	sp, #232	; 0xe8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a266:	2300      	movs	r3, #0
 800a268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 030f 	and.w	r3, r3, #15
 800a27a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a27e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10f      	bne.n	800a2a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x66>
 800a292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a296:	f003 0320 	and.w	r3, r3, #32
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fd91 	bl	800adc6 <UART_Receive_IT>
      return;
 800a2a4:	e256      	b.n	800a754 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 80de 	beq.w	800a46c <HAL_UART_IRQHandler+0x22c>
 800a2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f000 80d1 	beq.w	800a46c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00b      	beq.n	800a2ee <HAL_UART_IRQHandler+0xae>
 800a2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f043 0201 	orr.w	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00b      	beq.n	800a312 <HAL_UART_IRQHandler+0xd2>
 800a2fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	d005      	beq.n	800a312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f043 0202 	orr.w	r2, r3, #2
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00b      	beq.n	800a336 <HAL_UART_IRQHandler+0xf6>
 800a31e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	d005      	beq.n	800a336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	f043 0204 	orr.w	r2, r3, #4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a33a:	f003 0308 	and.w	r3, r3, #8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d011      	beq.n	800a366 <HAL_UART_IRQHandler+0x126>
 800a342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d105      	bne.n	800a35a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a34e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	f043 0208 	orr.w	r2, r3, #8
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 81ed 	beq.w	800a74a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a374:	f003 0320 	and.w	r3, r3, #32
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d008      	beq.n	800a38e <HAL_UART_IRQHandler+0x14e>
 800a37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fd1c 	bl	800adc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a398:	2b40      	cmp	r3, #64	; 0x40
 800a39a:	bf0c      	ite	eq
 800a39c:	2301      	moveq	r3, #1
 800a39e:	2300      	movne	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	f003 0308 	and.w	r3, r3, #8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d103      	bne.n	800a3ba <HAL_UART_IRQHandler+0x17a>
 800a3b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d04f      	beq.n	800a45a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fc24 	bl	800ac08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ca:	2b40      	cmp	r3, #64	; 0x40
 800a3cc:	d141      	bne.n	800a452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3314      	adds	r3, #20
 800a3d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3dc:	e853 3f00 	ldrex	r3, [r3]
 800a3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3314      	adds	r3, #20
 800a3f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1d9      	bne.n	800a3ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d013      	beq.n	800a44a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a426:	4a7d      	ldr	r2, [pc, #500]	; (800a61c <HAL_UART_IRQHandler+0x3dc>)
 800a428:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f8 f86c 	bl	800250c <HAL_DMA_Abort_IT>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d016      	beq.n	800a468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a444:	4610      	mov	r0, r2
 800a446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a448:	e00e      	b.n	800a468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f008 fd64 	bl	8012f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	e00a      	b.n	800a468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f008 fd60 	bl	8012f18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a458:	e006      	b.n	800a468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f008 fd5c 	bl	8012f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a466:	e170      	b.n	800a74a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a468:	bf00      	nop
    return;
 800a46a:	e16e      	b.n	800a74a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a470:	2b01      	cmp	r3, #1
 800a472:	f040 814a 	bne.w	800a70a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 8143 	beq.w	800a70a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 813c 	beq.w	800a70a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a492:	2300      	movs	r3, #0
 800a494:	60bb      	str	r3, [r7, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	60bb      	str	r3, [r7, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	60bb      	str	r3, [r7, #8]
 800a4a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b2:	2b40      	cmp	r3, #64	; 0x40
 800a4b4:	f040 80b4 	bne.w	800a620 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8140 	beq.w	800a74e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	f080 8139 	bcs.w	800a74e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	f000 8088 	beq.w	800a602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a50c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	330c      	adds	r3, #12
 800a51a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a51e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a52a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1d9      	bne.n	800a4f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3314      	adds	r3, #20
 800a544:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a54e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a550:	f023 0301 	bic.w	r3, r3, #1
 800a554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3314      	adds	r3, #20
 800a55e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a562:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a566:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a56a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1e1      	bne.n	800a53e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3314      	adds	r3, #20
 800a580:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a58a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3314      	adds	r3, #20
 800a59a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a59e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e3      	bne.n	800a57a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d2:	f023 0310 	bic.w	r3, r3, #16
 800a5d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	330c      	adds	r3, #12
 800a5e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ec:	e841 2300 	strex	r3, r2, [r1]
 800a5f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1e3      	bne.n	800a5c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f7 ff15 	bl	800242c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f008 fc58 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a618:	e099      	b.n	800a74e <HAL_UART_IRQHandler+0x50e>
 800a61a:	bf00      	nop
 800a61c:	0800accf 	.word	0x0800accf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a628:	b29b      	uxth	r3, r3
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 808b 	beq.w	800a752 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a63c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 8086 	beq.w	800a752 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	330c      	adds	r3, #12
 800a64c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a65c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	330c      	adds	r3, #12
 800a666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a66a:	647a      	str	r2, [r7, #68]	; 0x44
 800a66c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e3      	bne.n	800a646 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3314      	adds	r3, #20
 800a684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	623b      	str	r3, [r7, #32]
   return(result);
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3314      	adds	r3, #20
 800a69e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e3      	bne.n	800a67e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	330c      	adds	r3, #12
 800a6ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0310 	bic.w	r3, r3, #16
 800a6da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	330c      	adds	r3, #12
 800a6e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6e8:	61fa      	str	r2, [r7, #28]
 800a6ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ec:	69b9      	ldr	r1, [r7, #24]
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	e841 2300 	strex	r3, r2, [r1]
 800a6f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e3      	bne.n	800a6c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f008 fbe0 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a708:	e023      	b.n	800a752 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <HAL_UART_IRQHandler+0x4ea>
 800a716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fae7 	bl	800acf6 <UART_Transmit_IT>
    return;
 800a728:	e014      	b.n	800a754 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a72a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00e      	beq.n	800a754 <HAL_UART_IRQHandler+0x514>
 800a736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d008      	beq.n	800a754 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fb27 	bl	800ad96 <UART_EndTransmit_IT>
    return;
 800a748:	e004      	b.n	800a754 <HAL_UART_IRQHandler+0x514>
    return;
 800a74a:	bf00      	nop
 800a74c:	e002      	b.n	800a754 <HAL_UART_IRQHandler+0x514>
      return;
 800a74e:	bf00      	nop
 800a750:	e000      	b.n	800a754 <HAL_UART_IRQHandler+0x514>
      return;
 800a752:	bf00      	nop
  }
}
 800a754:	37e8      	adds	r7, #232	; 0xe8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop

0800a75c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b09c      	sub	sp, #112	; 0x70
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d172      	bne.n	800a8b2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	330c      	adds	r3, #12
 800a7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7f2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e5      	bne.n	800a7d2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3314      	adds	r3, #20
 800a80c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	f023 0301 	bic.w	r3, r3, #1
 800a81c:	667b      	str	r3, [r7, #100]	; 0x64
 800a81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3314      	adds	r3, #20
 800a824:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a826:	647a      	str	r2, [r7, #68]	; 0x44
 800a828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a82c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e5      	bne.n	800a806 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3314      	adds	r3, #20
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	623b      	str	r3, [r7, #32]
   return(result);
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a850:	663b      	str	r3, [r7, #96]	; 0x60
 800a852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3314      	adds	r3, #20
 800a858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a85a:	633a      	str	r2, [r7, #48]	; 0x30
 800a85c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e5      	bne.n	800a83a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a870:	2220      	movs	r2, #32
 800a872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d119      	bne.n	800a8b2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	330c      	adds	r3, #12
 800a884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f023 0310 	bic.w	r3, r3, #16
 800a894:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	330c      	adds	r3, #12
 800a89c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a89e:	61fa      	str	r2, [r7, #28]
 800a8a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	69b9      	ldr	r1, [r7, #24]
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e5      	bne.n	800a87e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d106      	bne.n	800a8c8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8c2:	f008 fb01 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8c6:	e002      	b.n	800a8ce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a8c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8ca:	f7ff ff51 	bl	800a770 <HAL_UART_RxCpltCallback>
}
 800a8ce:	bf00      	nop
 800a8d0:	3770      	adds	r7, #112	; 0x70
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d108      	bne.n	800a8fe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8f0:	085b      	lsrs	r3, r3, #1
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f008 fae6 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8fc:	e002      	b.n	800a904 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff ff40 	bl	800a784 <HAL_UART_RxHalfCpltCallback>
}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a928:	2b80      	cmp	r3, #128	; 0x80
 800a92a:	bf0c      	ite	eq
 800a92c:	2301      	moveq	r3, #1
 800a92e:	2300      	movne	r3, #0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b21      	cmp	r3, #33	; 0x21
 800a93e:	d108      	bne.n	800a952 <UART_DMAError+0x46>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d005      	beq.n	800a952 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2200      	movs	r2, #0
 800a94a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a94c:	68b8      	ldr	r0, [r7, #8]
 800a94e:	f000 f933 	bl	800abb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95c:	2b40      	cmp	r3, #64	; 0x40
 800a95e:	bf0c      	ite	eq
 800a960:	2301      	moveq	r3, #1
 800a962:	2300      	movne	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b22      	cmp	r3, #34	; 0x22
 800a972:	d108      	bne.n	800a986 <UART_DMAError+0x7a>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a980:	68b8      	ldr	r0, [r7, #8]
 800a982:	f000 f941 	bl	800ac08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	f043 0210 	orr.w	r2, r3, #16
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	f008 fac0 	bl	8012f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b090      	sub	sp, #64	; 0x40
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9b0:	e050      	b.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b8:	d04c      	beq.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a9ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a9c0:	f7f7 fb00 	bl	8001fc4 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d241      	bcs.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	330c      	adds	r3, #12
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	e853 3f00 	ldrex	r3, [r3]
 800a9de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	330c      	adds	r3, #12
 800a9ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9f0:	637a      	str	r2, [r7, #52]	; 0x34
 800a9f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e5      	bne.n	800a9d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3314      	adds	r3, #20
 800aa0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	613b      	str	r3, [r7, #16]
   return(result);
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3314      	adds	r3, #20
 800aa22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa24:	623a      	str	r2, [r7, #32]
 800aa26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69f9      	ldr	r1, [r7, #28]
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e5      	bne.n	800aa04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e00f      	b.n	800aa74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	bf0c      	ite	eq
 800aa64:	2301      	moveq	r3, #1
 800aa66:	2300      	movne	r3, #0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d09f      	beq.n	800a9b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3740      	adds	r7, #64	; 0x40
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b098      	sub	sp, #96	; 0x60
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2222      	movs	r2, #34	; 0x22
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	4a40      	ldr	r2, [pc, #256]	; (800abac <UART_Start_Receive_DMA+0x130>)
 800aaaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	4a3f      	ldr	r2, [pc, #252]	; (800abb0 <UART_Start_Receive_DMA+0x134>)
 800aab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab8:	4a3e      	ldr	r2, [pc, #248]	; (800abb4 <UART_Start_Receive_DMA+0x138>)
 800aaba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	2200      	movs	r2, #0
 800aac2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aac4:	f107 0308 	add.w	r3, r7, #8
 800aac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4619      	mov	r1, r3
 800aad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	f7f7 fc4e 	bl	800237c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aae0:	2300      	movs	r3, #0
 800aae2:	613b      	str	r3, [r7, #16]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	613b      	str	r3, [r7, #16]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	613b      	str	r3, [r7, #16]
 800aaf4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d019      	beq.n	800ab3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab10:	e853 3f00 	ldrex	r3, [r3]
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	330c      	adds	r3, #12
 800ab24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab26:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ab28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab2e:	e841 2300 	strex	r3, r2, [r1]
 800ab32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1e5      	bne.n	800ab06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3314      	adds	r3, #20
 800ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	e853 3f00 	ldrex	r3, [r3]
 800ab48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	f043 0301 	orr.w	r3, r3, #1
 800ab50:	657b      	str	r3, [r7, #84]	; 0x54
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	3314      	adds	r3, #20
 800ab58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab5a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ab5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab62:	e841 2300 	strex	r3, r2, [r1]
 800ab66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1e5      	bne.n	800ab3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	3314      	adds	r3, #20
 800ab74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab84:	653b      	str	r3, [r7, #80]	; 0x50
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3314      	adds	r3, #20
 800ab8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab8e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	6a39      	ldr	r1, [r7, #32]
 800ab94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e5      	bne.n	800ab6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3760      	adds	r7, #96	; 0x60
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	0800a7b1 	.word	0x0800a7b1
 800abb0:	0800a8d7 	.word	0x0800a8d7
 800abb4:	0800a90d 	.word	0x0800a90d

0800abb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	; 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	330c      	adds	r3, #12
 800abc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	e853 3f00 	ldrex	r3, [r3]
 800abce:	60bb      	str	r3, [r7, #8]
   return(result);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abd6:	61fb      	str	r3, [r7, #28]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	330c      	adds	r3, #12
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	61ba      	str	r2, [r7, #24]
 800abe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe4:	6979      	ldr	r1, [r7, #20]
 800abe6:	69ba      	ldr	r2, [r7, #24]
 800abe8:	e841 2300 	strex	r3, r2, [r1]
 800abec:	613b      	str	r3, [r7, #16]
   return(result);
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1e5      	bne.n	800abc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2220      	movs	r2, #32
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800abfc:	bf00      	nop
 800abfe:	3724      	adds	r7, #36	; 0x24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b095      	sub	sp, #84	; 0x54
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac30:	643a      	str	r2, [r7, #64]	; 0x40
 800ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e5      	bne.n	800ac10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3314      	adds	r3, #20
 800ac4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	e853 3f00 	ldrex	r3, [r3]
 800ac52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	f023 0301 	bic.w	r3, r3, #1
 800ac5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3314      	adds	r3, #20
 800ac62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac6c:	e841 2300 	strex	r3, r2, [r1]
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e5      	bne.n	800ac44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d119      	bne.n	800acb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	330c      	adds	r3, #12
 800ac86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	e853 3f00 	ldrex	r3, [r3]
 800ac8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	f023 0310 	bic.w	r3, r3, #16
 800ac96:	647b      	str	r3, [r7, #68]	; 0x44
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aca0:	61ba      	str	r2, [r7, #24]
 800aca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	6979      	ldr	r1, [r7, #20]
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	613b      	str	r3, [r7, #16]
   return(result);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e5      	bne.n	800ac80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acc2:	bf00      	nop
 800acc4:	3754      	adds	r7, #84	; 0x54
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f008 f915 	bl	8012f18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acee:	bf00      	nop
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b21      	cmp	r3, #33	; 0x21
 800ad08:	d13e      	bne.n	800ad88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad12:	d114      	bne.n	800ad3e <UART_Transmit_IT+0x48>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d110      	bne.n	800ad3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	1c9a      	adds	r2, r3, #2
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	621a      	str	r2, [r3, #32]
 800ad3c:	e008      	b.n	800ad50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	6211      	str	r1, [r2, #32]
 800ad48:	781a      	ldrb	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10f      	bne.n	800ad84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68da      	ldr	r2, [r3, #12]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	e000      	b.n	800ad8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad88:	2302      	movs	r3, #2
  }
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3714      	adds	r7, #20
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fcd0 	bl	800a75c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b08c      	sub	sp, #48	; 0x30
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b22      	cmp	r3, #34	; 0x22
 800add8:	f040 80ab 	bne.w	800af32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ade4:	d117      	bne.n	800ae16 <UART_Receive_IT+0x50>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d113      	bne.n	800ae16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0e:	1c9a      	adds	r2, r3, #2
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	629a      	str	r2, [r3, #40]	; 0x28
 800ae14:	e026      	b.n	800ae64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae28:	d007      	beq.n	800ae3a <UART_Receive_IT+0x74>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <UART_Receive_IT+0x82>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d106      	bne.n	800ae48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e008      	b.n	800ae5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	4619      	mov	r1, r3
 800ae72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d15a      	bne.n	800af2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0220 	bic.w	r2, r2, #32
 800ae86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	695a      	ldr	r2, [r3, #20]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0201 	bic.w	r2, r2, #1
 800aea6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d135      	bne.n	800af24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	330c      	adds	r3, #12
 800aec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	613b      	str	r3, [r7, #16]
   return(result);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	f023 0310 	bic.w	r3, r3, #16
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	330c      	adds	r3, #12
 800aedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aede:	623a      	str	r2, [r7, #32]
 800aee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	69f9      	ldr	r1, [r7, #28]
 800aee4:	6a3a      	ldr	r2, [r7, #32]
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0310 	and.w	r3, r3, #16
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d10a      	bne.n	800af16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f007 ffd3 	bl	8012ec8 <HAL_UARTEx_RxEventCallback>
 800af22:	e002      	b.n	800af2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fc23 	bl	800a770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e002      	b.n	800af34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	e000      	b.n	800af34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800af32:	2302      	movs	r3, #2
  }
}
 800af34:	4618      	mov	r0, r3
 800af36:	3730      	adds	r7, #48	; 0x30
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af40:	b0c0      	sub	sp, #256	; 0x100
 800af42:	af00      	add	r7, sp, #0
 800af44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af58:	68d9      	ldr	r1, [r3, #12]
 800af5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	ea40 0301 	orr.w	r3, r0, r1
 800af64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	431a      	orrs	r2, r3
 800af74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af94:	f021 010c 	bic.w	r1, r1, #12
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afa2:	430b      	orrs	r3, r1
 800afa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb6:	6999      	ldr	r1, [r3, #24]
 800afb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	ea40 0301 	orr.w	r3, r0, r1
 800afc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b8f      	ldr	r3, [pc, #572]	; (800b208 <UART_SetConfig+0x2cc>)
 800afcc:	429a      	cmp	r2, r3
 800afce:	d005      	beq.n	800afdc <UART_SetConfig+0xa0>
 800afd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b8d      	ldr	r3, [pc, #564]	; (800b20c <UART_SetConfig+0x2d0>)
 800afd8:	429a      	cmp	r2, r3
 800afda:	d104      	bne.n	800afe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afdc:	f7fb fedc 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 800afe0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800afe4:	e003      	b.n	800afee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afe6:	f7fb fec3 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 800afea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aff8:	f040 810c 	bne.w	800b214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800affc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b000:	2200      	movs	r2, #0
 800b002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b006:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b00a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b00e:	4622      	mov	r2, r4
 800b010:	462b      	mov	r3, r5
 800b012:	1891      	adds	r1, r2, r2
 800b014:	65b9      	str	r1, [r7, #88]	; 0x58
 800b016:	415b      	adcs	r3, r3
 800b018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b01a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b01e:	4621      	mov	r1, r4
 800b020:	eb12 0801 	adds.w	r8, r2, r1
 800b024:	4629      	mov	r1, r5
 800b026:	eb43 0901 	adc.w	r9, r3, r1
 800b02a:	f04f 0200 	mov.w	r2, #0
 800b02e:	f04f 0300 	mov.w	r3, #0
 800b032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b03a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b03e:	4690      	mov	r8, r2
 800b040:	4699      	mov	r9, r3
 800b042:	4623      	mov	r3, r4
 800b044:	eb18 0303 	adds.w	r3, r8, r3
 800b048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b04c:	462b      	mov	r3, r5
 800b04e:	eb49 0303 	adc.w	r3, r9, r3
 800b052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b062:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b06a:	460b      	mov	r3, r1
 800b06c:	18db      	adds	r3, r3, r3
 800b06e:	653b      	str	r3, [r7, #80]	; 0x50
 800b070:	4613      	mov	r3, r2
 800b072:	eb42 0303 	adc.w	r3, r2, r3
 800b076:	657b      	str	r3, [r7, #84]	; 0x54
 800b078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b07c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b080:	f7f5 f8ae 	bl	80001e0 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4b61      	ldr	r3, [pc, #388]	; (800b210 <UART_SetConfig+0x2d4>)
 800b08a:	fba3 2302 	umull	r2, r3, r3, r2
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	011c      	lsls	r4, r3, #4
 800b092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b096:	2200      	movs	r2, #0
 800b098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b09c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	1891      	adds	r1, r2, r2
 800b0aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0ac:	415b      	adcs	r3, r3
 800b0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	eb12 0a01 	adds.w	sl, r2, r1
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	eb43 0b01 	adc.w	fp, r3, r1
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0d4:	4692      	mov	sl, r2
 800b0d6:	469b      	mov	fp, r3
 800b0d8:	4643      	mov	r3, r8
 800b0da:	eb1a 0303 	adds.w	r3, sl, r3
 800b0de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0e2:	464b      	mov	r3, r9
 800b0e4:	eb4b 0303 	adc.w	r3, fp, r3
 800b0e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b100:	460b      	mov	r3, r1
 800b102:	18db      	adds	r3, r3, r3
 800b104:	643b      	str	r3, [r7, #64]	; 0x40
 800b106:	4613      	mov	r3, r2
 800b108:	eb42 0303 	adc.w	r3, r2, r3
 800b10c:	647b      	str	r3, [r7, #68]	; 0x44
 800b10e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b116:	f7f5 f863 	bl	80001e0 <__aeabi_uldivmod>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	4b3b      	ldr	r3, [pc, #236]	; (800b210 <UART_SetConfig+0x2d4>)
 800b122:	fba3 2301 	umull	r2, r3, r3, r1
 800b126:	095b      	lsrs	r3, r3, #5
 800b128:	2264      	movs	r2, #100	; 0x64
 800b12a:	fb02 f303 	mul.w	r3, r2, r3
 800b12e:	1acb      	subs	r3, r1, r3
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b136:	4b36      	ldr	r3, [pc, #216]	; (800b210 <UART_SetConfig+0x2d4>)
 800b138:	fba3 2302 	umull	r2, r3, r3, r2
 800b13c:	095b      	lsrs	r3, r3, #5
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b144:	441c      	add	r4, r3
 800b146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b150:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	1891      	adds	r1, r2, r2
 800b15e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b160:	415b      	adcs	r3, r3
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b168:	4641      	mov	r1, r8
 800b16a:	1851      	adds	r1, r2, r1
 800b16c:	6339      	str	r1, [r7, #48]	; 0x30
 800b16e:	4649      	mov	r1, r9
 800b170:	414b      	adcs	r3, r1
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
 800b174:	f04f 0200 	mov.w	r2, #0
 800b178:	f04f 0300 	mov.w	r3, #0
 800b17c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b180:	4659      	mov	r1, fp
 800b182:	00cb      	lsls	r3, r1, #3
 800b184:	4651      	mov	r1, sl
 800b186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b18a:	4651      	mov	r1, sl
 800b18c:	00ca      	lsls	r2, r1, #3
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	4603      	mov	r3, r0
 800b194:	4642      	mov	r2, r8
 800b196:	189b      	adds	r3, r3, r2
 800b198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b19c:	464b      	mov	r3, r9
 800b19e:	460a      	mov	r2, r1
 800b1a0:	eb42 0303 	adc.w	r3, r2, r3
 800b1a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1bc:	460b      	mov	r3, r1
 800b1be:	18db      	adds	r3, r3, r3
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	eb42 0303 	adc.w	r3, r2, r3
 800b1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1d2:	f7f5 f805 	bl	80001e0 <__aeabi_uldivmod>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <UART_SetConfig+0x2d4>)
 800b1dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1e0:	095b      	lsrs	r3, r3, #5
 800b1e2:	2164      	movs	r1, #100	; 0x64
 800b1e4:	fb01 f303 	mul.w	r3, r1, r3
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	3332      	adds	r3, #50	; 0x32
 800b1ee:	4a08      	ldr	r2, [pc, #32]	; (800b210 <UART_SetConfig+0x2d4>)
 800b1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f4:	095b      	lsrs	r3, r3, #5
 800b1f6:	f003 0207 	and.w	r2, r3, #7
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4422      	add	r2, r4
 800b202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b204:	e105      	b.n	800b412 <UART_SetConfig+0x4d6>
 800b206:	bf00      	nop
 800b208:	40011000 	.word	0x40011000
 800b20c:	40011400 	.word	0x40011400
 800b210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b21e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b226:	4642      	mov	r2, r8
 800b228:	464b      	mov	r3, r9
 800b22a:	1891      	adds	r1, r2, r2
 800b22c:	6239      	str	r1, [r7, #32]
 800b22e:	415b      	adcs	r3, r3
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
 800b232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b236:	4641      	mov	r1, r8
 800b238:	1854      	adds	r4, r2, r1
 800b23a:	4649      	mov	r1, r9
 800b23c:	eb43 0501 	adc.w	r5, r3, r1
 800b240:	f04f 0200 	mov.w	r2, #0
 800b244:	f04f 0300 	mov.w	r3, #0
 800b248:	00eb      	lsls	r3, r5, #3
 800b24a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b24e:	00e2      	lsls	r2, r4, #3
 800b250:	4614      	mov	r4, r2
 800b252:	461d      	mov	r5, r3
 800b254:	4643      	mov	r3, r8
 800b256:	18e3      	adds	r3, r4, r3
 800b258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b25c:	464b      	mov	r3, r9
 800b25e:	eb45 0303 	adc.w	r3, r5, r3
 800b262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b272:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	f04f 0300 	mov.w	r3, #0
 800b27e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b282:	4629      	mov	r1, r5
 800b284:	008b      	lsls	r3, r1, #2
 800b286:	4621      	mov	r1, r4
 800b288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b28c:	4621      	mov	r1, r4
 800b28e:	008a      	lsls	r2, r1, #2
 800b290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b294:	f7f4 ffa4 	bl	80001e0 <__aeabi_uldivmod>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4b60      	ldr	r3, [pc, #384]	; (800b420 <UART_SetConfig+0x4e4>)
 800b29e:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	011c      	lsls	r4, r3, #4
 800b2a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	1891      	adds	r1, r2, r2
 800b2be:	61b9      	str	r1, [r7, #24]
 800b2c0:	415b      	adcs	r3, r3
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	1851      	adds	r1, r2, r1
 800b2cc:	6139      	str	r1, [r7, #16]
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	414b      	adcs	r3, r1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	00cb      	lsls	r3, r1, #3
 800b2e4:	4651      	mov	r1, sl
 800b2e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ea:	4651      	mov	r1, sl
 800b2ec:	00ca      	lsls	r2, r1, #3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	460a      	mov	r2, r1
 800b300:	eb42 0303 	adc.w	r3, r2, r3
 800b304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	67bb      	str	r3, [r7, #120]	; 0x78
 800b312:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b314:	f04f 0200 	mov.w	r2, #0
 800b318:	f04f 0300 	mov.w	r3, #0
 800b31c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b320:	4649      	mov	r1, r9
 800b322:	008b      	lsls	r3, r1, #2
 800b324:	4641      	mov	r1, r8
 800b326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b32a:	4641      	mov	r1, r8
 800b32c:	008a      	lsls	r2, r1, #2
 800b32e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b332:	f7f4 ff55 	bl	80001e0 <__aeabi_uldivmod>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4b39      	ldr	r3, [pc, #228]	; (800b420 <UART_SetConfig+0x4e4>)
 800b33c:	fba3 1302 	umull	r1, r3, r3, r2
 800b340:	095b      	lsrs	r3, r3, #5
 800b342:	2164      	movs	r1, #100	; 0x64
 800b344:	fb01 f303 	mul.w	r3, r1, r3
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	3332      	adds	r3, #50	; 0x32
 800b34e:	4a34      	ldr	r2, [pc, #208]	; (800b420 <UART_SetConfig+0x4e4>)
 800b350:	fba2 2303 	umull	r2, r3, r2, r3
 800b354:	095b      	lsrs	r3, r3, #5
 800b356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b35a:	441c      	add	r4, r3
 800b35c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b360:	2200      	movs	r2, #0
 800b362:	673b      	str	r3, [r7, #112]	; 0x70
 800b364:	677a      	str	r2, [r7, #116]	; 0x74
 800b366:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b36a:	4642      	mov	r2, r8
 800b36c:	464b      	mov	r3, r9
 800b36e:	1891      	adds	r1, r2, r2
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	415b      	adcs	r3, r3
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b37a:	4641      	mov	r1, r8
 800b37c:	1851      	adds	r1, r2, r1
 800b37e:	6039      	str	r1, [r7, #0]
 800b380:	4649      	mov	r1, r9
 800b382:	414b      	adcs	r3, r1
 800b384:	607b      	str	r3, [r7, #4]
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	f04f 0300 	mov.w	r3, #0
 800b38e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b392:	4659      	mov	r1, fp
 800b394:	00cb      	lsls	r3, r1, #3
 800b396:	4651      	mov	r1, sl
 800b398:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b39c:	4651      	mov	r1, sl
 800b39e:	00ca      	lsls	r2, r1, #3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	189b      	adds	r3, r3, r2
 800b3aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3ac:	464b      	mov	r3, r9
 800b3ae:	460a      	mov	r2, r1
 800b3b0:	eb42 0303 	adc.w	r3, r2, r3
 800b3b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	663b      	str	r3, [r7, #96]	; 0x60
 800b3c0:	667a      	str	r2, [r7, #100]	; 0x64
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	008b      	lsls	r3, r1, #2
 800b3d2:	4641      	mov	r1, r8
 800b3d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3d8:	4641      	mov	r1, r8
 800b3da:	008a      	lsls	r2, r1, #2
 800b3dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b3e0:	f7f4 fefe 	bl	80001e0 <__aeabi_uldivmod>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <UART_SetConfig+0x4e4>)
 800b3ea:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ee:	095b      	lsrs	r3, r3, #5
 800b3f0:	2164      	movs	r1, #100	; 0x64
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	3332      	adds	r3, #50	; 0x32
 800b3fc:	4a08      	ldr	r2, [pc, #32]	; (800b420 <UART_SetConfig+0x4e4>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	f003 020f 	and.w	r2, r3, #15
 800b408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4422      	add	r2, r4
 800b410:	609a      	str	r2, [r3, #8]
}
 800b412:	bf00      	nop
 800b414:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b418:	46bd      	mov	sp, r7
 800b41a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b41e:	bf00      	nop
 800b420:	51eb851f 	.word	0x51eb851f

0800b424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b424:	b084      	sub	sp, #16
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	f107 001c 	add.w	r0, r7, #28
 800b432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d122      	bne.n	800b482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b466:	2b01      	cmp	r3, #1
 800b468:	d105      	bne.n	800b476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 fbee 	bl	800cc58 <USB_CoreReset>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	e01a      	b.n	800b4b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 fbe2 	bl	800cc58 <USB_CoreReset>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b4aa:	e005      	b.n	800b4b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d10b      	bne.n	800b4d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f043 0206 	orr.w	r2, r3, #6
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f043 0220 	orr.w	r2, r3, #32
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4e2:	b004      	add	sp, #16
 800b4e4:	4770      	bx	lr
	...

0800b4e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b087      	sub	sp, #28
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d165      	bne.n	800b5c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	4a41      	ldr	r2, [pc, #260]	; (800b604 <USB_SetTurnaroundTime+0x11c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d906      	bls.n	800b512 <USB_SetTurnaroundTime+0x2a>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4a40      	ldr	r2, [pc, #256]	; (800b608 <USB_SetTurnaroundTime+0x120>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d202      	bcs.n	800b512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b50c:	230f      	movs	r3, #15
 800b50e:	617b      	str	r3, [r7, #20]
 800b510:	e062      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	4a3c      	ldr	r2, [pc, #240]	; (800b608 <USB_SetTurnaroundTime+0x120>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d306      	bcc.n	800b528 <USB_SetTurnaroundTime+0x40>
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4a3b      	ldr	r2, [pc, #236]	; (800b60c <USB_SetTurnaroundTime+0x124>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d202      	bcs.n	800b528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b522:	230e      	movs	r3, #14
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	e057      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4a38      	ldr	r2, [pc, #224]	; (800b60c <USB_SetTurnaroundTime+0x124>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d306      	bcc.n	800b53e <USB_SetTurnaroundTime+0x56>
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4a37      	ldr	r2, [pc, #220]	; (800b610 <USB_SetTurnaroundTime+0x128>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d202      	bcs.n	800b53e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b538:	230d      	movs	r3, #13
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e04c      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	4a33      	ldr	r2, [pc, #204]	; (800b610 <USB_SetTurnaroundTime+0x128>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d306      	bcc.n	800b554 <USB_SetTurnaroundTime+0x6c>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	4a32      	ldr	r2, [pc, #200]	; (800b614 <USB_SetTurnaroundTime+0x12c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d802      	bhi.n	800b554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b54e:	230c      	movs	r3, #12
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e041      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4a2f      	ldr	r2, [pc, #188]	; (800b614 <USB_SetTurnaroundTime+0x12c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d906      	bls.n	800b56a <USB_SetTurnaroundTime+0x82>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a2e      	ldr	r2, [pc, #184]	; (800b618 <USB_SetTurnaroundTime+0x130>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d802      	bhi.n	800b56a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b564:	230b      	movs	r3, #11
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	e036      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a2a      	ldr	r2, [pc, #168]	; (800b618 <USB_SetTurnaroundTime+0x130>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d906      	bls.n	800b580 <USB_SetTurnaroundTime+0x98>
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4a29      	ldr	r2, [pc, #164]	; (800b61c <USB_SetTurnaroundTime+0x134>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d802      	bhi.n	800b580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b57a:	230a      	movs	r3, #10
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e02b      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a26      	ldr	r2, [pc, #152]	; (800b61c <USB_SetTurnaroundTime+0x134>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d906      	bls.n	800b596 <USB_SetTurnaroundTime+0xae>
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4a25      	ldr	r2, [pc, #148]	; (800b620 <USB_SetTurnaroundTime+0x138>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d202      	bcs.n	800b596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b590:	2309      	movs	r3, #9
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e020      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a21      	ldr	r2, [pc, #132]	; (800b620 <USB_SetTurnaroundTime+0x138>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d306      	bcc.n	800b5ac <USB_SetTurnaroundTime+0xc4>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a20      	ldr	r2, [pc, #128]	; (800b624 <USB_SetTurnaroundTime+0x13c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d802      	bhi.n	800b5ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e015      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a1d      	ldr	r2, [pc, #116]	; (800b624 <USB_SetTurnaroundTime+0x13c>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d906      	bls.n	800b5c2 <USB_SetTurnaroundTime+0xda>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a1c      	ldr	r2, [pc, #112]	; (800b628 <USB_SetTurnaroundTime+0x140>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d202      	bcs.n	800b5c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b5bc:	2307      	movs	r3, #7
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e00a      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b5c2:	2306      	movs	r3, #6
 800b5c4:	617b      	str	r3, [r7, #20]
 800b5c6:	e007      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d102      	bne.n	800b5d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b5ce:	2309      	movs	r3, #9
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e001      	b.n	800b5d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b5d4:	2309      	movs	r3, #9
 800b5d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	68da      	ldr	r2, [r3, #12]
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	029b      	lsls	r3, r3, #10
 800b5ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	371c      	adds	r7, #28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	00d8acbf 	.word	0x00d8acbf
 800b608:	00e4e1c0 	.word	0x00e4e1c0
 800b60c:	00f42400 	.word	0x00f42400
 800b610:	01067380 	.word	0x01067380
 800b614:	011a499f 	.word	0x011a499f
 800b618:	01312cff 	.word	0x01312cff
 800b61c:	014ca43f 	.word	0x014ca43f
 800b620:	016e3600 	.word	0x016e3600
 800b624:	01a6ab1f 	.word	0x01a6ab1f
 800b628:	01e84800 	.word	0x01e84800

0800b62c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f043 0201 	orr.w	r2, r3, #1
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f023 0201 	bic.w	r2, r3, #1
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d115      	bne.n	800b6be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b69e:	2001      	movs	r0, #1
 800b6a0:	f7f6 fc9c 	bl	8001fdc <HAL_Delay>
      ms++;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f001 fa45 	bl	800cb3a <USB_GetMode>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d01e      	beq.n	800b6f4 <USB_SetCurrentMode+0x84>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b31      	cmp	r3, #49	; 0x31
 800b6ba:	d9f0      	bls.n	800b69e <USB_SetCurrentMode+0x2e>
 800b6bc:	e01a      	b.n	800b6f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6be:	78fb      	ldrb	r3, [r7, #3]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d115      	bne.n	800b6f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7f6 fc83 	bl	8001fdc <HAL_Delay>
      ms++;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 fa2c 	bl	800cb3a <USB_GetMode>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d005      	beq.n	800b6f4 <USB_SetCurrentMode+0x84>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b31      	cmp	r3, #49	; 0x31
 800b6ec:	d9f0      	bls.n	800b6d0 <USB_SetCurrentMode+0x60>
 800b6ee:	e001      	b.n	800b6f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e005      	b.n	800b700 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b32      	cmp	r3, #50	; 0x32
 800b6f8:	d101      	bne.n	800b6fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e000      	b.n	800b700 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b708:	b084      	sub	sp, #16
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b086      	sub	sp, #24
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b71a:	2300      	movs	r3, #0
 800b71c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b722:	2300      	movs	r3, #0
 800b724:	613b      	str	r3, [r7, #16]
 800b726:	e009      	b.n	800b73c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3340      	adds	r3, #64	; 0x40
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	2200      	movs	r2, #0
 800b734:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	3301      	adds	r3, #1
 800b73a:	613b      	str	r3, [r7, #16]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2b0e      	cmp	r3, #14
 800b740:	d9f2      	bls.n	800b728 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11c      	bne.n	800b782 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b756:	f043 0302 	orr.w	r3, r3, #2
 800b75a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b778:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
 800b780:	e00b      	b.n	800b79a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b786:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	680b      	ldr	r3, [r1, #0]
 800b7b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d10c      	bne.n	800b7da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d104      	bne.n	800b7d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f965 	bl	800ba98 <USB_SetDevSpeed>
 800b7ce:	e008      	b.n	800b7e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f960 	bl	800ba98 <USB_SetDevSpeed>
 800b7d8:	e003      	b.n	800b7e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7da:	2103      	movs	r1, #3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f95b 	bl	800ba98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7e2:	2110      	movs	r1, #16
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f8f3 	bl	800b9d0 <USB_FlushTxFifo>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f91f 	bl	800ba38 <USB_FlushRxFifo>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b80a:	461a      	mov	r2, r3
 800b80c:	2300      	movs	r3, #0
 800b80e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b816:	461a      	mov	r2, r3
 800b818:	2300      	movs	r3, #0
 800b81a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b822:	461a      	mov	r2, r3
 800b824:	2300      	movs	r3, #0
 800b826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b828:	2300      	movs	r3, #0
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	e043      	b.n	800b8b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4413      	add	r3, r2
 800b836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b844:	d118      	bne.n	800b878 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10a      	bne.n	800b862 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b858:	461a      	mov	r2, r3
 800b85a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	e013      	b.n	800b88a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	015a      	lsls	r2, r3, #5
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	4413      	add	r3, r2
 800b86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b86e:	461a      	mov	r2, r3
 800b870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	e008      	b.n	800b88a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b884:	461a      	mov	r2, r3
 800b886:	2300      	movs	r3, #0
 800b888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	461a      	mov	r2, r3
 800b898:	2300      	movs	r3, #0
 800b89a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d3b7      	bcc.n	800b82e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8be:	2300      	movs	r3, #0
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	e043      	b.n	800b94c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	015a      	lsls	r2, r3, #5
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8da:	d118      	bne.n	800b90e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	e013      	b.n	800b920 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b904:	461a      	mov	r2, r3
 800b906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	e008      	b.n	800b920 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91a:	461a      	mov	r2, r3
 800b91c:	2300      	movs	r3, #0
 800b91e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92c:	461a      	mov	r2, r3
 800b92e:	2300      	movs	r3, #0
 800b930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93e:	461a      	mov	r2, r3
 800b940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	3301      	adds	r3, #1
 800b94a:	613b      	str	r3, [r7, #16]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	429a      	cmp	r2, r3
 800b952:	d3b7      	bcc.n	800b8c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d105      	bne.n	800b988 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	f043 0210 	orr.w	r2, r3, #16
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699a      	ldr	r2, [r3, #24]
 800b98c:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <USB_DevInit+0x2c4>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	f043 0208 	orr.w	r2, r3, #8
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d107      	bne.n	800b9bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9b4:	f043 0304 	orr.w	r3, r3, #4
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9c8:	b004      	add	sp, #16
 800b9ca:	4770      	bx	lr
 800b9cc:	803c3800 	.word	0x803c3800

0800b9d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	4a13      	ldr	r2, [pc, #76]	; (800ba34 <USB_FlushTxFifo+0x64>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d901      	bls.n	800b9f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e01b      	b.n	800ba28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	daf2      	bge.n	800b9de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	019b      	lsls	r3, r3, #6
 800ba00:	f043 0220 	orr.w	r2, r3, #32
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4a08      	ldr	r2, [pc, #32]	; (800ba34 <USB_FlushTxFifo+0x64>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d901      	bls.n	800ba1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e006      	b.n	800ba28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	f003 0320 	and.w	r3, r3, #32
 800ba22:	2b20      	cmp	r3, #32
 800ba24:	d0f0      	beq.n	800ba08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	00030d40 	.word	0x00030d40

0800ba38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3301      	adds	r3, #1
 800ba48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	4a11      	ldr	r2, [pc, #68]	; (800ba94 <USB_FlushRxFifo+0x5c>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d901      	bls.n	800ba56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e018      	b.n	800ba88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	daf2      	bge.n	800ba44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2210      	movs	r2, #16
 800ba66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4a08      	ldr	r2, [pc, #32]	; (800ba94 <USB_FlushRxFifo+0x5c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d901      	bls.n	800ba7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e006      	b.n	800ba88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	f003 0310 	and.w	r3, r3, #16
 800ba82:	2b10      	cmp	r3, #16
 800ba84:	d0f0      	beq.n	800ba68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr
 800ba94:	00030d40 	.word	0x00030d40

0800ba98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	68f9      	ldr	r1, [r7, #12]
 800bab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bab8:	4313      	orrs	r3, r2
 800baba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr

0800baca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800baca:	b480      	push	{r7}
 800bacc:	b087      	sub	sp, #28
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f003 0306 	and.w	r3, r3, #6
 800bae2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]
 800baee:	e00a      	b.n	800bb06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d002      	beq.n	800bafc <USB_GetDevSpeed+0x32>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2b06      	cmp	r3, #6
 800bafa:	d102      	bne.n	800bb02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bafc:	2302      	movs	r3, #2
 800bafe:	75fb      	strb	r3, [r7, #23]
 800bb00:	e001      	b.n	800bb06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb02:	230f      	movs	r3, #15
 800bb04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d13a      	bne.n	800bba6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb36:	69da      	ldr	r2, [r3, #28]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f003 030f 	and.w	r3, r3, #15
 800bb40:	2101      	movs	r1, #1
 800bb42:	fa01 f303 	lsl.w	r3, r1, r3
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	68f9      	ldr	r1, [r7, #12]
 800bb4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d155      	bne.n	800bc14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	791b      	ldrb	r3, [r3, #4]
 800bb82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	059b      	lsls	r3, r3, #22
 800bb8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	e036      	b.n	800bc14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	69da      	ldr	r2, [r3, #28]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f003 030f 	and.w	r3, r3, #15
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbbc:	041b      	lsls	r3, r3, #16
 800bbbe:	68f9      	ldr	r1, [r7, #12]
 800bbc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d11a      	bne.n	800bc14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	791b      	ldrb	r3, [r3, #4]
 800bbf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbfa:	430b      	orrs	r3, r1
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	0151      	lsls	r1, r2, #5
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	440a      	add	r2, r1
 800bc06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
	...

0800bc24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d161      	bne.n	800bd04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	015a      	lsls	r2, r3, #5
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc56:	d11f      	bne.n	800bc98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	0151      	lsls	r1, r2, #5
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	440a      	add	r2, r1
 800bc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	015a      	lsls	r2, r3, #5
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4413      	add	r3, r2
 800bc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	0151      	lsls	r1, r2, #5
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	440a      	add	r2, r1
 800bc8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	2101      	movs	r1, #1
 800bcaa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	43db      	mvns	r3, r3
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcb8:	4013      	ands	r3, r2
 800bcba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc2:	69da      	ldr	r2, [r3, #28]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 030f 	and.w	r3, r3, #15
 800bccc:	2101      	movs	r1, #1
 800bcce:	fa01 f303 	lsl.w	r3, r1, r3
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	43db      	mvns	r3, r3
 800bcd6:	68f9      	ldr	r1, [r7, #12]
 800bcd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcdc:	4013      	ands	r3, r2
 800bcde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	0159      	lsls	r1, r3, #5
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	440b      	add	r3, r1
 800bcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4b35      	ldr	r3, [pc, #212]	; (800bdd4 <USB_DeactivateEndpoint+0x1b0>)
 800bcfe:	4013      	ands	r3, r2
 800bd00:	600b      	str	r3, [r1, #0]
 800bd02:	e060      	b.n	800bdc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd1a:	d11f      	bne.n	800bd5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	0151      	lsls	r1, r2, #5
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	440a      	add	r2, r1
 800bd32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	0151      	lsls	r1, r2, #5
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	440a      	add	r2, r1
 800bd52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 030f 	and.w	r3, r3, #15
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd72:	041b      	lsls	r3, r3, #16
 800bd74:	43db      	mvns	r3, r3
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd86:	69da      	ldr	r2, [r3, #28]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	2101      	movs	r1, #1
 800bd92:	fa01 f303 	lsl.w	r3, r1, r3
 800bd96:	041b      	lsls	r3, r3, #16
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bda0:	4013      	ands	r3, r2
 800bda2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	0159      	lsls	r1, r3, #5
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	440b      	add	r3, r1
 800bdba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <USB_DeactivateEndpoint+0x1b4>)
 800bdc2:	4013      	ands	r3, r2
 800bdc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	ec337800 	.word	0xec337800
 800bdd8:	eff37800 	.word	0xeff37800

0800bddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08a      	sub	sp, #40	; 0x28
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	785b      	ldrb	r3, [r3, #1]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	f040 815c 	bne.w	800c0b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d132      	bne.n	800be6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	015a      	lsls	r2, r3, #5
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be12:	691b      	ldr	r3, [r3, #16]
 800be14:	69ba      	ldr	r2, [r7, #24]
 800be16:	0151      	lsls	r1, r2, #5
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	440a      	add	r2, r1
 800be1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	015a      	lsls	r2, r3, #5
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	4413      	add	r3, r2
 800be32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	0151      	lsls	r1, r2, #5
 800be3c:	69fa      	ldr	r2, [r7, #28]
 800be3e:	440a      	add	r2, r1
 800be40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	4413      	add	r3, r2
 800be52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	69ba      	ldr	r2, [r7, #24]
 800be5a:	0151      	lsls	r1, r2, #5
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	440a      	add	r2, r1
 800be60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be64:	0cdb      	lsrs	r3, r3, #19
 800be66:	04db      	lsls	r3, r3, #19
 800be68:	6113      	str	r3, [r2, #16]
 800be6a:	e074      	b.n	800bf56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	4413      	add	r3, r2
 800be74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	69ba      	ldr	r2, [r7, #24]
 800be7c:	0151      	lsls	r1, r2, #5
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	440a      	add	r2, r1
 800be82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be86:	0cdb      	lsrs	r3, r3, #19
 800be88:	04db      	lsls	r3, r3, #19
 800be8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	015a      	lsls	r2, r3, #5
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	4413      	add	r3, r2
 800be94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	0151      	lsls	r1, r2, #5
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	440a      	add	r2, r1
 800bea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800beaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800beae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	6999      	ldr	r1, [r3, #24]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	440b      	add	r3, r1
 800bec8:	1e59      	subs	r1, r3, #1
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	fbb1 f3f3 	udiv	r3, r1, r3
 800bed2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bed4:	4b9d      	ldr	r3, [pc, #628]	; (800c14c <USB_EPStartXfer+0x370>)
 800bed6:	400b      	ands	r3, r1
 800bed8:	69b9      	ldr	r1, [r7, #24]
 800beda:	0148      	lsls	r0, r1, #5
 800bedc:	69f9      	ldr	r1, [r7, #28]
 800bede:	4401      	add	r1, r0
 800bee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bee4:	4313      	orrs	r3, r2
 800bee6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	015a      	lsls	r2, r3, #5
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	4413      	add	r3, r2
 800bef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800befe:	69b9      	ldr	r1, [r7, #24]
 800bf00:	0148      	lsls	r0, r1, #5
 800bf02:	69f9      	ldr	r1, [r7, #28]
 800bf04:	4401      	add	r1, r0
 800bf06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	791b      	ldrb	r3, [r3, #4]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d11f      	bne.n	800bf56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	0151      	lsls	r1, r2, #5
 800bf28:	69fa      	ldr	r2, [r7, #28]
 800bf2a:	440a      	add	r2, r1
 800bf2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bf34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	015a      	lsls	r2, r3, #5
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	69ba      	ldr	r2, [r7, #24]
 800bf46:	0151      	lsls	r1, r2, #5
 800bf48:	69fa      	ldr	r2, [r7, #28]
 800bf4a:	440a      	add	r2, r1
 800bf4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d14b      	bne.n	800bff4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	695b      	ldr	r3, [r3, #20]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf70:	461a      	mov	r2, r3
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	791b      	ldrb	r3, [r3, #4]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d128      	bne.n	800bfd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d110      	bne.n	800bfb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	69fa      	ldr	r2, [r7, #28]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	e00f      	b.n	800bfd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	015a      	lsls	r2, r3, #5
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	4413      	add	r3, r2
 800bfba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	0151      	lsls	r1, r2, #5
 800bfc4:	69fa      	ldr	r2, [r7, #28]
 800bfc6:	440a      	add	r2, r1
 800bfc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	015a      	lsls	r2, r3, #5
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	4413      	add	r3, r2
 800bfda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	0151      	lsls	r1, r2, #5
 800bfe4:	69fa      	ldr	r2, [r7, #28]
 800bfe6:	440a      	add	r2, r1
 800bfe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bff0:	6013      	str	r3, [r2, #0]
 800bff2:	e133      	b.n	800c25c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	0151      	lsls	r1, r2, #5
 800c006:	69fa      	ldr	r2, [r7, #28]
 800c008:	440a      	add	r2, r1
 800c00a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c00e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c012:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	791b      	ldrb	r3, [r3, #4]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d015      	beq.n	800c048 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 811b 	beq.w	800c25c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 030f 	and.w	r3, r3, #15
 800c036:	2101      	movs	r1, #1
 800c038:	fa01 f303 	lsl.w	r3, r1, r3
 800c03c:	69f9      	ldr	r1, [r7, #28]
 800c03e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c042:	4313      	orrs	r3, r2
 800c044:	634b      	str	r3, [r1, #52]	; 0x34
 800c046:	e109      	b.n	800c25c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c054:	2b00      	cmp	r3, #0
 800c056:	d110      	bne.n	800c07a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	015a      	lsls	r2, r3, #5
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	4413      	add	r3, r2
 800c060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	0151      	lsls	r1, r2, #5
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	440a      	add	r2, r1
 800c06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c076:	6013      	str	r3, [r2, #0]
 800c078:	e00f      	b.n	800c09a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	015a      	lsls	r2, r3, #5
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	4413      	add	r3, r2
 800c082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	0151      	lsls	r1, r2, #5
 800c08c:	69fa      	ldr	r2, [r7, #28]
 800c08e:	440a      	add	r2, r1
 800c090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c098:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6919      	ldr	r1, [r3, #16]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	b298      	uxth	r0, r3
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f000 fade 	bl	800c670 <USB_WritePacket>
 800c0b4:	e0d2      	b.n	800c25c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	69ba      	ldr	r2, [r7, #24]
 800c0c6:	0151      	lsls	r1, r2, #5
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	440a      	add	r2, r1
 800c0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d0:	0cdb      	lsrs	r3, r3, #19
 800c0d2:	04db      	lsls	r3, r3, #19
 800c0d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	0151      	lsls	r1, r2, #5
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	440a      	add	r2, r1
 800c0ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c0f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c0f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d126      	bne.n	800c150 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	015a      	lsls	r2, r3, #5
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	4413      	add	r3, r2
 800c10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c118:	69b9      	ldr	r1, [r7, #24]
 800c11a:	0148      	lsls	r0, r1, #5
 800c11c:	69f9      	ldr	r1, [r7, #28]
 800c11e:	4401      	add	r1, r0
 800c120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c124:	4313      	orrs	r3, r2
 800c126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	0151      	lsls	r1, r2, #5
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	440a      	add	r2, r1
 800c13e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c146:	6113      	str	r3, [r2, #16]
 800c148:	e03a      	b.n	800c1c0 <USB_EPStartXfer+0x3e4>
 800c14a:	bf00      	nop
 800c14c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	699a      	ldr	r2, [r3, #24]
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	4413      	add	r3, r2
 800c15a:	1e5a      	subs	r2, r3, #1
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	fbb2 f3f3 	udiv	r3, r2, r3
 800c164:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	8afa      	ldrh	r2, [r7, #22]
 800c16c:	fb03 f202 	mul.w	r2, r3, r2
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c180:	691a      	ldr	r2, [r3, #16]
 800c182:	8afb      	ldrh	r3, [r7, #22]
 800c184:	04d9      	lsls	r1, r3, #19
 800c186:	4b38      	ldr	r3, [pc, #224]	; (800c268 <USB_EPStartXfer+0x48c>)
 800c188:	400b      	ands	r3, r1
 800c18a:	69b9      	ldr	r1, [r7, #24]
 800c18c:	0148      	lsls	r0, r1, #5
 800c18e:	69f9      	ldr	r1, [r7, #28]
 800c190:	4401      	add	r1, r0
 800c192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c196:	4313      	orrs	r3, r2
 800c198:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a6:	691a      	ldr	r2, [r3, #16]
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1b0:	69b9      	ldr	r1, [r7, #24]
 800c1b2:	0148      	lsls	r0, r1, #5
 800c1b4:	69f9      	ldr	r1, [r7, #28]
 800c1b6:	4401      	add	r1, r0
 800c1b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d10d      	bne.n	800c1e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6919      	ldr	r1, [r3, #16]
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1de:	460a      	mov	r2, r1
 800c1e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	791b      	ldrb	r3, [r3, #4]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d128      	bne.n	800c23c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d110      	bne.n	800c21c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	0151      	lsls	r1, r2, #5
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	440a      	add	r2, r1
 800c210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	e00f      	b.n	800c23c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	4413      	add	r3, r2
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	69fa      	ldr	r2, [r7, #28]
 800c230:	440a      	add	r2, r1
 800c232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c23a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	69fa      	ldr	r2, [r7, #28]
 800c250:	440a      	add	r2, r1
 800c252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c25a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	1ff80000 	.word	0x1ff80000

0800c26c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	4613      	mov	r3, r2
 800c278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	f040 80ce 	bne.w	800c42a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d132      	bne.n	800c2fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	0151      	lsls	r1, r2, #5
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	440a      	add	r2, r1
 800c2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	0151      	lsls	r1, r2, #5
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	440a      	add	r2, r1
 800c2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	015a      	lsls	r2, r3, #5
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	0151      	lsls	r1, r2, #5
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	440a      	add	r2, r1
 800c2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2f4:	0cdb      	lsrs	r3, r3, #19
 800c2f6:	04db      	lsls	r3, r3, #19
 800c2f8:	6113      	str	r3, [r2, #16]
 800c2fa:	e04e      	b.n	800c39a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	0151      	lsls	r1, r2, #5
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	440a      	add	r2, r1
 800c312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c316:	0cdb      	lsrs	r3, r3, #19
 800c318:	04db      	lsls	r3, r3, #19
 800c31a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	0151      	lsls	r1, r2, #5
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	440a      	add	r2, r1
 800c332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c33a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c33e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	699a      	ldr	r2, [r3, #24]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d903      	bls.n	800c354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	68da      	ldr	r2, [r3, #12]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	0151      	lsls	r1, r2, #5
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	440a      	add	r2, r1
 800c36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c36e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c380:	691a      	ldr	r2, [r3, #16]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c38a:	6939      	ldr	r1, [r7, #16]
 800c38c:	0148      	lsls	r0, r1, #5
 800c38e:	6979      	ldr	r1, [r7, #20]
 800c390:	4401      	add	r1, r0
 800c392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c396:	4313      	orrs	r3, r2
 800c398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d11e      	bne.n	800c3de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d009      	beq.n	800c3bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	015a      	lsls	r2, r3, #5
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	0151      	lsls	r1, r2, #5
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	440a      	add	r2, r1
 800c3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	e097      	b.n	800c50e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	0151      	lsls	r1, r2, #5
 800c3f0:	697a      	ldr	r2, [r7, #20]
 800c3f2:	440a      	add	r2, r1
 800c3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 8083 	beq.w	800c50e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c40e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 030f 	and.w	r3, r3, #15
 800c418:	2101      	movs	r1, #1
 800c41a:	fa01 f303 	lsl.w	r3, r1, r3
 800c41e:	6979      	ldr	r1, [r7, #20]
 800c420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c424:	4313      	orrs	r3, r2
 800c426:	634b      	str	r3, [r1, #52]	; 0x34
 800c428:	e071      	b.n	800c50e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	015a      	lsls	r2, r3, #5
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	4413      	add	r3, r2
 800c432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c444:	0cdb      	lsrs	r3, r3, #19
 800c446:	04db      	lsls	r3, r3, #19
 800c448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	697a      	ldr	r2, [r7, #20]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c46c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	68da      	ldr	r2, [r3, #12]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	015a      	lsls	r2, r3, #5
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	4413      	add	r3, r2
 800c48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	0151      	lsls	r1, r2, #5
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	440a      	add	r2, r1
 800c49c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b2:	691a      	ldr	r2, [r3, #16]
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	69db      	ldr	r3, [r3, #28]
 800c4b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4bc:	6939      	ldr	r1, [r7, #16]
 800c4be:	0148      	lsls	r0, r1, #5
 800c4c0:	6979      	ldr	r1, [r7, #20]
 800c4c2:	4401      	add	r1, r0
 800c4c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d10d      	bne.n	800c4ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d009      	beq.n	800c4ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	6919      	ldr	r1, [r3, #16]
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ea:	460a      	mov	r2, r1
 800c4ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	0151      	lsls	r1, r2, #5
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	440a      	add	r2, r1
 800c504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c50c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	371c      	adds	r7, #28
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d14a      	bne.n	800c5d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c54e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c552:	f040 8086 	bne.w	800c662 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	7812      	ldrb	r2, [r2, #0]
 800c56a:	0151      	lsls	r1, r2, #5
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	440a      	add	r2, r1
 800c570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c578:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	0151      	lsls	r1, r2, #5
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	440a      	add	r2, r1
 800c594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c59c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d902      	bls.n	800c5b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800c5b2:	e056      	b.n	800c662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5cc:	d0e7      	beq.n	800c59e <USB_EPStopXfer+0x82>
 800c5ce:	e048      	b.n	800c662 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5e8:	d13b      	bne.n	800c662 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	7812      	ldrb	r2, [r2, #0]
 800c5fe:	0151      	lsls	r1, r2, #5
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	440a      	add	r2, r1
 800c604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c60c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	7812      	ldrb	r2, [r2, #0]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	440a      	add	r2, r1
 800c628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3301      	adds	r3, #1
 800c636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c63e:	4293      	cmp	r3, r2
 800c640:	d902      	bls.n	800c648 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	75fb      	strb	r3, [r7, #23]
          break;
 800c646:	e00c      	b.n	800c662 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	015a      	lsls	r2, r3, #5
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	4413      	add	r3, r2
 800c652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c65c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c660:	d0e7      	beq.n	800c632 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c662:	7dfb      	ldrb	r3, [r7, #23]
}
 800c664:	4618      	mov	r0, r3
 800c666:	371c      	adds	r7, #28
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c670:	b480      	push	{r7}
 800c672:	b089      	sub	sp, #36	; 0x24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4611      	mov	r1, r2
 800c67c:	461a      	mov	r2, r3
 800c67e:	460b      	mov	r3, r1
 800c680:	71fb      	strb	r3, [r7, #7]
 800c682:	4613      	mov	r3, r2
 800c684:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c68e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c692:	2b00      	cmp	r3, #0
 800c694:	d123      	bne.n	800c6de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c696:	88bb      	ldrh	r3, [r7, #4]
 800c698:	3303      	adds	r3, #3
 800c69a:	089b      	lsrs	r3, r3, #2
 800c69c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	e018      	b.n	800c6d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c6a4:	79fb      	ldrb	r3, [r7, #7]
 800c6a6:	031a      	lsls	r2, r3, #12
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d3e2      	bcc.n	800c6a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3724      	adds	r7, #36	; 0x24
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b08b      	sub	sp, #44	; 0x2c
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c702:	88fb      	ldrh	r3, [r7, #6]
 800c704:	089b      	lsrs	r3, r3, #2
 800c706:	b29b      	uxth	r3, r3
 800c708:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c70a:	88fb      	ldrh	r3, [r7, #6]
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c712:	2300      	movs	r3, #0
 800c714:	623b      	str	r3, [r7, #32]
 800c716:	e014      	b.n	800c742 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	601a      	str	r2, [r3, #0]
    pDest++;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	3301      	adds	r3, #1
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	3301      	adds	r3, #1
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	3301      	adds	r3, #1
 800c734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c738:	3301      	adds	r3, #1
 800c73a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	3301      	adds	r3, #1
 800c740:	623b      	str	r3, [r7, #32]
 800c742:	6a3a      	ldr	r2, [r7, #32]
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	429a      	cmp	r2, r3
 800c748:	d3e6      	bcc.n	800c718 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c74a:	8bfb      	ldrh	r3, [r7, #30]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01e      	beq.n	800c78e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c75a:	461a      	mov	r2, r3
 800c75c:	f107 0310 	add.w	r3, r7, #16
 800c760:	6812      	ldr	r2, [r2, #0]
 800c762:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	fa22 f303 	lsr.w	r3, r2, r3
 800c770:	b2da      	uxtb	r2, r3
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	701a      	strb	r2, [r3, #0]
      i++;
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	3301      	adds	r3, #1
 800c77a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	3301      	adds	r3, #1
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c782:	8bfb      	ldrh	r3, [r7, #30]
 800c784:	3b01      	subs	r3, #1
 800c786:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c788:	8bfb      	ldrh	r3, [r7, #30]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1ea      	bne.n	800c764 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c790:	4618      	mov	r0, r3
 800c792:	372c      	adds	r7, #44	; 0x2c
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d12c      	bne.n	800c812 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	015a      	lsls	r2, r3, #5
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	4413      	add	r3, r2
 800c7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db12      	blt.n	800c7f0 <USB_EPSetStall+0x54>
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00f      	beq.n	800c7f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	015a      	lsls	r2, r3, #5
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	0151      	lsls	r1, r2, #5
 800c7e2:	68fa      	ldr	r2, [r7, #12]
 800c7e4:	440a      	add	r2, r1
 800c7e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	0151      	lsls	r1, r2, #5
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	440a      	add	r2, r1
 800c806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c80a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e02b      	b.n	800c86a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	db12      	blt.n	800c84a <USB_EPSetStall+0xae>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00f      	beq.n	800c84a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	0151      	lsls	r1, r2, #5
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	440a      	add	r2, r1
 800c840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c848:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	015a      	lsls	r2, r3, #5
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4413      	add	r3, r2
 800c852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	0151      	lsls	r1, r2, #5
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	440a      	add	r2, r1
 800c860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c868:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	785b      	ldrb	r3, [r3, #1]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d128      	bne.n	800c8e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	015a      	lsls	r2, r3, #5
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4413      	add	r3, r2
 800c89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	0151      	lsls	r1, r2, #5
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	440a      	add	r2, r1
 800c8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	791b      	ldrb	r3, [r3, #4]
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d003      	beq.n	800c8c4 <USB_EPClearStall+0x4c>
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	791b      	ldrb	r3, [r3, #4]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d138      	bne.n	800c936 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	015a      	lsls	r2, r3, #5
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	0151      	lsls	r1, r2, #5
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	440a      	add	r2, r1
 800c8da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8e2:	6013      	str	r3, [r2, #0]
 800c8e4:	e027      	b.n	800c936 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	015a      	lsls	r2, r3, #5
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	0151      	lsls	r1, r2, #5
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	440a      	add	r2, r1
 800c8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c904:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	791b      	ldrb	r3, [r3, #4]
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d003      	beq.n	800c916 <USB_EPClearStall+0x9e>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	791b      	ldrb	r3, [r3, #4]
 800c912:	2b02      	cmp	r3, #2
 800c914:	d10f      	bne.n	800c936 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	015a      	lsls	r2, r3, #5
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	4413      	add	r3, r2
 800c91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	0151      	lsls	r1, r2, #5
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	440a      	add	r2, r1
 800c92c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c934:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c962:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c966:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	011b      	lsls	r3, r3, #4
 800c974:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c978:	68f9      	ldr	r1, [r7, #12]
 800c97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c97e:	4313      	orrs	r3, r2
 800c980:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9be:	f023 0302 	bic.w	r3, r3, #2
 800c9c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b085      	sub	sp, #20
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca00:	f043 0302 	orr.w	r3, r3, #2
 800ca04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	4013      	ands	r3, r2
 800ca2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3714      	adds	r7, #20
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr

0800ca3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b085      	sub	sp, #20
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	0c1b      	lsrs	r3, r3, #16
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8a:	69db      	ldr	r3, [r3, #28]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	4013      	ands	r3, r2
 800ca90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	b29b      	uxth	r3, r3
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	4013      	ands	r3, r2
 800cace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cad0:	68bb      	ldr	r3, [r7, #8]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr

0800cade <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cade:	b480      	push	{r7}
 800cae0:	b087      	sub	sp, #28
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	460b      	mov	r3, r1
 800cae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	f003 030f 	and.w	r3, r3, #15
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0e:	01db      	lsls	r3, r3, #7
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb18:	78fb      	ldrb	r3, [r7, #3]
 800cb1a:	015a      	lsls	r2, r3, #5
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	4413      	add	r3, r2
 800cb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	4013      	ands	r3, r2
 800cb2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	371c      	adds	r7, #28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b083      	sub	sp, #12
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	f003 0301 	and.w	r3, r3, #1
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b085      	sub	sp, #20
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb74:	f023 0307 	bic.w	r3, r3, #7
 800cb78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	460b      	mov	r3, r1
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	333c      	adds	r3, #60	; 0x3c
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	4a26      	ldr	r2, [pc, #152]	; (800cc54 <USB_EP0_OutStart+0xb8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d90a      	bls.n	800cbd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbd0:	d101      	bne.n	800cbd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	e037      	b.n	800cc46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbdc:	461a      	mov	r2, r3
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc04:	f043 0318 	orr.w	r3, r3, #24
 800cc08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc1e:	7afb      	ldrb	r3, [r7, #11]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d10f      	bne.n	800cc44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	4f54300a 	.word	0x4f54300a

0800cc58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3301      	adds	r3, #1
 800cc68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4a13      	ldr	r2, [pc, #76]	; (800ccbc <USB_CoreReset+0x64>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e01b      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	daf2      	bge.n	800cc64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	f043 0201 	orr.w	r2, r3, #1
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3301      	adds	r3, #1
 800cc92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <USB_CoreReset+0x64>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d901      	bls.n	800cca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e006      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d0f0      	beq.n	800cc8e <USB_CoreReset+0x36>

  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	00030d40 	.word	0x00030d40

0800ccc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cccc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ccd0:	f004 fbde 	bl	8011490 <USBD_static_malloc>
 800ccd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d109      	bne.n	800ccf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	32b0      	adds	r2, #176	; 0xb0
 800cce6:	2100      	movs	r1, #0
 800cce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ccec:	2302      	movs	r3, #2
 800ccee:	e0d4      	b.n	800ce9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ccf0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f006 ff18 	bl	8013b2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	32b0      	adds	r2, #176	; 0xb0
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	32b0      	adds	r2, #176	; 0xb0
 800cd16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	7c1b      	ldrb	r3, [r3, #16]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d138      	bne.n	800cd9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd28:	4b5e      	ldr	r3, [pc, #376]	; (800cea4 <USBD_CDC_Init+0x1e4>)
 800cd2a:	7819      	ldrb	r1, [r3, #0]
 800cd2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd30:	2202      	movs	r2, #2
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f004 fa89 	bl	801124a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd38:	4b5a      	ldr	r3, [pc, #360]	; (800cea4 <USBD_CDC_Init+0x1e4>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f003 020f 	and.w	r2, r3, #15
 800cd40:	6879      	ldr	r1, [r7, #4]
 800cd42:	4613      	mov	r3, r2
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	440b      	add	r3, r1
 800cd4c:	3324      	adds	r3, #36	; 0x24
 800cd4e:	2201      	movs	r2, #1
 800cd50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd52:	4b55      	ldr	r3, [pc, #340]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800cd54:	7819      	ldrb	r1, [r3, #0]
 800cd56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f004 fa74 	bl	801124a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd62:	4b51      	ldr	r3, [pc, #324]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	f003 020f 	and.w	r2, r3, #15
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	440b      	add	r3, r1
 800cd76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd7e:	4b4b      	ldr	r3, [pc, #300]	; (800ceac <USBD_CDC_Init+0x1ec>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	f003 020f 	and.w	r2, r3, #15
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	4413      	add	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	440b      	add	r3, r1
 800cd92:	3326      	adds	r3, #38	; 0x26
 800cd94:	2210      	movs	r2, #16
 800cd96:	801a      	strh	r2, [r3, #0]
 800cd98:	e035      	b.n	800ce06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd9a:	4b42      	ldr	r3, [pc, #264]	; (800cea4 <USBD_CDC_Init+0x1e4>)
 800cd9c:	7819      	ldrb	r1, [r3, #0]
 800cd9e:	2340      	movs	r3, #64	; 0x40
 800cda0:	2202      	movs	r2, #2
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f004 fa51 	bl	801124a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cda8:	4b3e      	ldr	r3, [pc, #248]	; (800cea4 <USBD_CDC_Init+0x1e4>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 020f 	and.w	r2, r3, #15
 800cdb0:	6879      	ldr	r1, [r7, #4]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	440b      	add	r3, r1
 800cdbc:	3324      	adds	r3, #36	; 0x24
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cdc2:	4b39      	ldr	r3, [pc, #228]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800cdc4:	7819      	ldrb	r1, [r3, #0]
 800cdc6:	2340      	movs	r3, #64	; 0x40
 800cdc8:	2202      	movs	r2, #2
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f004 fa3d 	bl	801124a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cdd0:	4b35      	ldr	r3, [pc, #212]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	f003 020f 	and.w	r2, r3, #15
 800cdd8:	6879      	ldr	r1, [r7, #4]
 800cdda:	4613      	mov	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	440b      	add	r3, r1
 800cde4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cde8:	2201      	movs	r2, #1
 800cdea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cdec:	4b2f      	ldr	r3, [pc, #188]	; (800ceac <USBD_CDC_Init+0x1ec>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f003 020f 	and.w	r2, r3, #15
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	440b      	add	r3, r1
 800ce00:	3326      	adds	r3, #38	; 0x26
 800ce02:	2210      	movs	r2, #16
 800ce04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ce06:	4b29      	ldr	r3, [pc, #164]	; (800ceac <USBD_CDC_Init+0x1ec>)
 800ce08:	7819      	ldrb	r1, [r3, #0]
 800ce0a:	2308      	movs	r3, #8
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f004 fa1b 	bl	801124a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ce14:	4b25      	ldr	r3, [pc, #148]	; (800ceac <USBD_CDC_Init+0x1ec>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f003 020f 	and.w	r2, r3, #15
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	440b      	add	r3, r1
 800ce28:	3324      	adds	r3, #36	; 0x24
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	33b0      	adds	r3, #176	; 0xb0
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ce64:	2302      	movs	r3, #2
 800ce66:	e018      	b.n	800ce9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	7c1b      	ldrb	r3, [r3, #16]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10a      	bne.n	800ce86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce70:	4b0d      	ldr	r3, [pc, #52]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800ce72:	7819      	ldrb	r1, [r3, #0]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f004 fad2 	bl	8011428 <USBD_LL_PrepareReceive>
 800ce84:	e008      	b.n	800ce98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce86:	4b08      	ldr	r3, [pc, #32]	; (800cea8 <USBD_CDC_Init+0x1e8>)
 800ce88:	7819      	ldrb	r1, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce90:	2340      	movs	r3, #64	; 0x40
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f004 fac8 	bl	8011428 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	20000093 	.word	0x20000093
 800cea8:	20000094 	.word	0x20000094
 800ceac:	20000095 	.word	0x20000095

0800ceb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cebc:	4b3a      	ldr	r3, [pc, #232]	; (800cfa8 <USBD_CDC_DeInit+0xf8>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f004 f9e7 	bl	8011296 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cec8:	4b37      	ldr	r3, [pc, #220]	; (800cfa8 <USBD_CDC_DeInit+0xf8>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	f003 020f 	and.w	r2, r3, #15
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	3324      	adds	r3, #36	; 0x24
 800cede:	2200      	movs	r2, #0
 800cee0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cee2:	4b32      	ldr	r3, [pc, #200]	; (800cfac <USBD_CDC_DeInit+0xfc>)
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f004 f9d4 	bl	8011296 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ceee:	4b2f      	ldr	r3, [pc, #188]	; (800cfac <USBD_CDC_DeInit+0xfc>)
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	f003 020f 	and.w	r2, r3, #15
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	440b      	add	r3, r1
 800cf02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf06:	2200      	movs	r2, #0
 800cf08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cf0a:	4b29      	ldr	r3, [pc, #164]	; (800cfb0 <USBD_CDC_DeInit+0x100>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f004 f9c0 	bl	8011296 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cf16:	4b26      	ldr	r3, [pc, #152]	; (800cfb0 <USBD_CDC_DeInit+0x100>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 020f 	and.w	r2, r3, #15
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4613      	mov	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	440b      	add	r3, r1
 800cf2a:	3324      	adds	r3, #36	; 0x24
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cf30:	4b1f      	ldr	r3, [pc, #124]	; (800cfb0 <USBD_CDC_DeInit+0x100>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	440b      	add	r3, r1
 800cf44:	3326      	adds	r3, #38	; 0x26
 800cf46:	2200      	movs	r2, #0
 800cf48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	32b0      	adds	r2, #176	; 0xb0
 800cf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d01f      	beq.n	800cf9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	33b0      	adds	r3, #176	; 0xb0
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	32b0      	adds	r2, #176	; 0xb0
 800cf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f004 fa94 	bl	80114ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	32b0      	adds	r2, #176	; 0xb0
 800cf8e:	2100      	movs	r1, #0
 800cf90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20000093 	.word	0x20000093
 800cfac:	20000094 	.word	0x20000094
 800cfb0:	20000095 	.word	0x20000095

0800cfb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32b0      	adds	r2, #176	; 0xb0
 800cfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e0bf      	b.n	800d164 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d050      	beq.n	800d092 <USBD_CDC_Setup+0xde>
 800cff0:	2b20      	cmp	r3, #32
 800cff2:	f040 80af 	bne.w	800d154 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	88db      	ldrh	r3, [r3, #6]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d03a      	beq.n	800d074 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	b25b      	sxtb	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	da1b      	bge.n	800d040 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	33b0      	adds	r3, #176	; 0xb0
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d01e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	88d2      	ldrh	r2, [r2, #6]
 800d024:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	88db      	ldrh	r3, [r3, #6]
 800d02a:	2b07      	cmp	r3, #7
 800d02c:	bf28      	it	cs
 800d02e:	2307      	movcs	r3, #7
 800d030:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	89fa      	ldrh	r2, [r7, #14]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 fd89 	bl	800eb50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d03e:	e090      	b.n	800d162 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	785a      	ldrb	r2, [r3, #1]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	88db      	ldrh	r3, [r3, #6]
 800d04e:	2b3f      	cmp	r3, #63	; 0x3f
 800d050:	d803      	bhi.n	800d05a <USBD_CDC_Setup+0xa6>
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	88db      	ldrh	r3, [r3, #6]
 800d056:	b2da      	uxtb	r2, r3
 800d058:	e000      	b.n	800d05c <USBD_CDC_Setup+0xa8>
 800d05a:	2240      	movs	r2, #64	; 0x40
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d062:	6939      	ldr	r1, [r7, #16]
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d06a:	461a      	mov	r2, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f001 fd9b 	bl	800eba8 <USBD_CtlPrepareRx>
      break;
 800d072:	e076      	b.n	800d162 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	33b0      	adds	r3, #176	; 0xb0
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	7850      	ldrb	r0, [r2, #1]
 800d08a:	2200      	movs	r2, #0
 800d08c:	6839      	ldr	r1, [r7, #0]
 800d08e:	4798      	blx	r3
      break;
 800d090:	e067      	b.n	800d162 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	785b      	ldrb	r3, [r3, #1]
 800d096:	2b0b      	cmp	r3, #11
 800d098:	d851      	bhi.n	800d13e <USBD_CDC_Setup+0x18a>
 800d09a:	a201      	add	r2, pc, #4	; (adr r2, 800d0a0 <USBD_CDC_Setup+0xec>)
 800d09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a0:	0800d0d1 	.word	0x0800d0d1
 800d0a4:	0800d14d 	.word	0x0800d14d
 800d0a8:	0800d13f 	.word	0x0800d13f
 800d0ac:	0800d13f 	.word	0x0800d13f
 800d0b0:	0800d13f 	.word	0x0800d13f
 800d0b4:	0800d13f 	.word	0x0800d13f
 800d0b8:	0800d13f 	.word	0x0800d13f
 800d0bc:	0800d13f 	.word	0x0800d13f
 800d0c0:	0800d13f 	.word	0x0800d13f
 800d0c4:	0800d13f 	.word	0x0800d13f
 800d0c8:	0800d0fb 	.word	0x0800d0fb
 800d0cc:	0800d125 	.word	0x0800d125
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d107      	bne.n	800d0ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d0dc:	f107 030a 	add.w	r3, r7, #10
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f001 fd33 	bl	800eb50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0ea:	e032      	b.n	800d152 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 fcbd 	bl	800ea6e <USBD_CtlError>
            ret = USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	75fb      	strb	r3, [r7, #23]
          break;
 800d0f8:	e02b      	b.n	800d152 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b03      	cmp	r3, #3
 800d104:	d107      	bne.n	800d116 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d106:	f107 030d 	add.w	r3, r7, #13
 800d10a:	2201      	movs	r2, #1
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f001 fd1e 	bl	800eb50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d114:	e01d      	b.n	800d152 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 fca8 	bl	800ea6e <USBD_CtlError>
            ret = USBD_FAIL;
 800d11e:	2303      	movs	r3, #3
 800d120:	75fb      	strb	r3, [r7, #23]
          break;
 800d122:	e016      	b.n	800d152 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d00f      	beq.n	800d150 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f001 fc9b 	bl	800ea6e <USBD_CtlError>
            ret = USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d13c:	e008      	b.n	800d150 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d13e:	6839      	ldr	r1, [r7, #0]
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 fc94 	bl	800ea6e <USBD_CtlError>
          ret = USBD_FAIL;
 800d146:	2303      	movs	r3, #3
 800d148:	75fb      	strb	r3, [r7, #23]
          break;
 800d14a:	e002      	b.n	800d152 <USBD_CDC_Setup+0x19e>
          break;
 800d14c:	bf00      	nop
 800d14e:	e008      	b.n	800d162 <USBD_CDC_Setup+0x1ae>
          break;
 800d150:	bf00      	nop
      }
      break;
 800d152:	e006      	b.n	800d162 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 fc89 	bl	800ea6e <USBD_CtlError>
      ret = USBD_FAIL;
 800d15c:	2303      	movs	r3, #3
 800d15e:	75fb      	strb	r3, [r7, #23]
      break;
 800d160:	bf00      	nop
  }

  return (uint8_t)ret;
 800d162:	7dfb      	ldrb	r3, [r7, #23]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3718      	adds	r7, #24
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d17e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	32b0      	adds	r2, #176	; 0xb0
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d101      	bne.n	800d196 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d192:	2303      	movs	r3, #3
 800d194:	e065      	b.n	800d262 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	32b0      	adds	r2, #176	; 0xb0
 800d1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1a6:	78fb      	ldrb	r3, [r7, #3]
 800d1a8:	f003 020f 	and.w	r2, r3, #15
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	440b      	add	r3, r1
 800d1b8:	3318      	adds	r3, #24
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d02f      	beq.n	800d220 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d1c0:	78fb      	ldrb	r3, [r7, #3]
 800d1c2:	f003 020f 	and.w	r2, r3, #15
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	3318      	adds	r3, #24
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	78fb      	ldrb	r3, [r7, #3]
 800d1d8:	f003 010f 	and.w	r1, r3, #15
 800d1dc:	68f8      	ldr	r0, [r7, #12]
 800d1de:	460b      	mov	r3, r1
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	440b      	add	r3, r1
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4403      	add	r3, r0
 800d1e8:	3348      	adds	r3, #72	; 0x48
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1f0:	fb01 f303 	mul.w	r3, r1, r3
 800d1f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d112      	bne.n	800d220 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	f003 020f 	and.w	r2, r3, #15
 800d200:	6879      	ldr	r1, [r7, #4]
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	440b      	add	r3, r1
 800d20c:	3318      	adds	r3, #24
 800d20e:	2200      	movs	r2, #0
 800d210:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d212:	78f9      	ldrb	r1, [r7, #3]
 800d214:	2300      	movs	r3, #0
 800d216:	2200      	movs	r2, #0
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f004 f8e4 	bl	80113e6 <USBD_LL_Transmit>
 800d21e:	e01f      	b.n	800d260 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	33b0      	adds	r3, #176	; 0xb0
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	4413      	add	r3, r2
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d010      	beq.n	800d260 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	33b0      	adds	r3, #176	; 0xb0
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d256:	68ba      	ldr	r2, [r7, #8]
 800d258:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d25c:	78fa      	ldrb	r2, [r7, #3]
 800d25e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b084      	sub	sp, #16
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
 800d272:	460b      	mov	r3, r1
 800d274:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	32b0      	adds	r2, #176	; 0xb0
 800d280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d284:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	32b0      	adds	r2, #176	; 0xb0
 800d290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d298:	2303      	movs	r3, #3
 800d29a:	e01a      	b.n	800d2d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f004 f8e2 	bl	801146a <USBD_LL_GetRxDataSize>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	33b0      	adds	r3, #176	; 0xb0
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d2c6:	68fa      	ldr	r2, [r7, #12]
 800d2c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d2d0:	2300      	movs	r3, #0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	32b0      	adds	r2, #176	; 0xb0
 800d2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d101      	bne.n	800d2fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e025      	b.n	800d348 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	33b0      	adds	r3, #176	; 0xb0
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01a      	beq.n	800d346 <USBD_CDC_EP0_RxReady+0x6c>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d316:	2bff      	cmp	r3, #255	; 0xff
 800d318:	d015      	beq.n	800d346 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	33b0      	adds	r3, #176	; 0xb0
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d332:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d334:	68fa      	ldr	r2, [r7, #12]
 800d336:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d33a:	b292      	uxth	r2, r2
 800d33c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	22ff      	movs	r2, #255	; 0xff
 800d342:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d358:	2182      	movs	r1, #130	; 0x82
 800d35a:	4818      	ldr	r0, [pc, #96]	; (800d3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d35c:	f000 fd4f 	bl	800ddfe <USBD_GetEpDesc>
 800d360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d362:	2101      	movs	r1, #1
 800d364:	4815      	ldr	r0, [pc, #84]	; (800d3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d366:	f000 fd4a 	bl	800ddfe <USBD_GetEpDesc>
 800d36a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d36c:	2181      	movs	r1, #129	; 0x81
 800d36e:	4813      	ldr	r0, [pc, #76]	; (800d3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d370:	f000 fd45 	bl	800ddfe <USBD_GetEpDesc>
 800d374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2210      	movs	r2, #16
 800d380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d006      	beq.n	800d396 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d390:	711a      	strb	r2, [r3, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d006      	beq.n	800d3aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3a4:	711a      	strb	r2, [r3, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2243      	movs	r2, #67	; 0x43
 800d3ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3b0:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000050 	.word	0x20000050

0800d3c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3c8:	2182      	movs	r1, #130	; 0x82
 800d3ca:	4818      	ldr	r0, [pc, #96]	; (800d42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3cc:	f000 fd17 	bl	800ddfe <USBD_GetEpDesc>
 800d3d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	4815      	ldr	r0, [pc, #84]	; (800d42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3d6:	f000 fd12 	bl	800ddfe <USBD_GetEpDesc>
 800d3da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3dc:	2181      	movs	r1, #129	; 0x81
 800d3de:	4813      	ldr	r0, [pc, #76]	; (800d42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d3e0:	f000 fd0d 	bl	800ddfe <USBD_GetEpDesc>
 800d3e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	2210      	movs	r2, #16
 800d3f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d006      	beq.n	800d406 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	711a      	strb	r2, [r3, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f042 0202 	orr.w	r2, r2, #2
 800d404:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d006      	beq.n	800d41a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	711a      	strb	r2, [r3, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	f042 0202 	orr.w	r2, r2, #2
 800d418:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2243      	movs	r2, #67	; 0x43
 800d41e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d420:	4b02      	ldr	r3, [pc, #8]	; (800d42c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d422:	4618      	mov	r0, r3
 800d424:	3718      	adds	r7, #24
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20000050 	.word	0x20000050

0800d430 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d438:	2182      	movs	r1, #130	; 0x82
 800d43a:	4818      	ldr	r0, [pc, #96]	; (800d49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d43c:	f000 fcdf 	bl	800ddfe <USBD_GetEpDesc>
 800d440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d442:	2101      	movs	r1, #1
 800d444:	4815      	ldr	r0, [pc, #84]	; (800d49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d446:	f000 fcda 	bl	800ddfe <USBD_GetEpDesc>
 800d44a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d44c:	2181      	movs	r1, #129	; 0x81
 800d44e:	4813      	ldr	r0, [pc, #76]	; (800d49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d450:	f000 fcd5 	bl	800ddfe <USBD_GetEpDesc>
 800d454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2210      	movs	r2, #16
 800d460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d006      	beq.n	800d476 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d470:	711a      	strb	r2, [r3, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d006      	beq.n	800d48a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2200      	movs	r2, #0
 800d480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d484:	711a      	strb	r2, [r3, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2243      	movs	r2, #67	; 0x43
 800d48e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d490:	4b02      	ldr	r3, [pc, #8]	; (800d49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20000050 	.word	0x20000050

0800d4a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	220a      	movs	r2, #10
 800d4ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d4ae:	4b03      	ldr	r3, [pc, #12]	; (800d4bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	2000000c 	.word	0x2000000c

0800d4c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e009      	b.n	800d4e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	33b0      	adds	r3, #176	; 0xb0
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	683a      	ldr	r2, [r7, #0]
 800d4e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b087      	sub	sp, #28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	32b0      	adds	r2, #176	; 0xb0
 800d50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d516:	2303      	movs	r3, #3
 800d518:	e008      	b.n	800d52c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	68ba      	ldr	r2, [r7, #8]
 800d51e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	371c      	adds	r7, #28
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	32b0      	adds	r2, #176	; 0xb0
 800d54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d550:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d558:	2303      	movs	r3, #3
 800d55a:	e004      	b.n	800d566 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3714      	adds	r7, #20
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
	...

0800d574 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	32b0      	adds	r2, #176	; 0xb0
 800d586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d58c:	2301      	movs	r3, #1
 800d58e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	32b0      	adds	r2, #176	; 0xb0
 800d59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d5a2:	2303      	movs	r3, #3
 800d5a4:	e025      	b.n	800d5f2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d11f      	bne.n	800d5f0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d5b8:	4b10      	ldr	r3, [pc, #64]	; (800d5fc <USBD_CDC_TransmitPacket+0x88>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 020f 	and.w	r2, r3, #15
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4403      	add	r3, r0
 800d5d2:	3318      	adds	r3, #24
 800d5d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <USBD_CDC_TransmitPacket+0x88>)
 800d5d8:	7819      	ldrb	r1, [r3, #0]
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f003 fefd 	bl	80113e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20000093 	.word	0x20000093

0800d600 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	32b0      	adds	r2, #176	; 0xb0
 800d612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d616:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	32b0      	adds	r2, #176	; 0xb0
 800d622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d101      	bne.n	800d62e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e018      	b.n	800d660 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7c1b      	ldrb	r3, [r3, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10a      	bne.n	800d64c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <USBD_CDC_ReceivePacket+0x68>)
 800d638:	7819      	ldrb	r1, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d640:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f003 feef 	bl	8011428 <USBD_LL_PrepareReceive>
 800d64a:	e008      	b.n	800d65e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <USBD_CDC_ReceivePacket+0x68>)
 800d64e:	7819      	ldrb	r1, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d656:	2340      	movs	r3, #64	; 0x40
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f003 fee5 	bl	8011428 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20000094 	.word	0x20000094

0800d66c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b086      	sub	sp, #24
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d680:	2303      	movs	r3, #3
 800d682:	e01f      	b.n	800d6c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2200      	movs	r2, #0
 800d690:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d003      	beq.n	800d6aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	79fa      	ldrb	r2, [r7, #7]
 800d6b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f003 fd5f 	bl	801117c <USBD_LL_Init>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e025      	b.n	800d730 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	32ae      	adds	r2, #174	; 0xae
 800d6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00f      	beq.n	800d720 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	32ae      	adds	r2, #174	; 0xae
 800d70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d710:	f107 020e 	add.w	r2, r7, #14
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d726:	1c5a      	adds	r2, r3, #1
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f003 fd67 	bl	8011214 <USBD_LL_Start>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d758:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d009      	beq.n	800d794 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	78fa      	ldrb	r2, [r7, #3]
 800d78a:	4611      	mov	r1, r2
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4798      	blx	r3
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	78fa      	ldrb	r2, [r7, #3]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	4798      	blx	r3
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 f908 	bl	800e9fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d01a      	beq.n	800d844 <USBD_LL_SetupStage+0x72>
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d822      	bhi.n	800d858 <USBD_LL_SetupStage+0x86>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <USBD_LL_SetupStage+0x4a>
 800d816:	2b01      	cmp	r3, #1
 800d818:	d00a      	beq.n	800d830 <USBD_LL_SetupStage+0x5e>
 800d81a:	e01d      	b.n	800d858 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fb5f 	bl	800dee8 <USBD_StdDevReq>
 800d82a:	4603      	mov	r3, r0
 800d82c:	73fb      	strb	r3, [r7, #15]
      break;
 800d82e:	e020      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fbc7 	bl	800dfcc <USBD_StdItfReq>
 800d83e:	4603      	mov	r3, r0
 800d840:	73fb      	strb	r3, [r7, #15]
      break;
 800d842:	e016      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d84a:	4619      	mov	r1, r3
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 fc29 	bl	800e0a4 <USBD_StdEPReq>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]
      break;
 800d856:	e00c      	b.n	800d872 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d85e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d862:	b2db      	uxtb	r3, r3
 800d864:	4619      	mov	r1, r3
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f003 fd34 	bl	80112d4 <USBD_LL_StallEP>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
      break;
 800d870:	bf00      	nop
  }

  return ret;
 800d872:	7bfb      	ldrb	r3, [r7, #15]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	460b      	mov	r3, r1
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d88e:	7afb      	ldrb	r3, [r7, #11]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d16e      	bne.n	800d972 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d89a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	f040 8098 	bne.w	800d9d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	689a      	ldr	r2, [r3, #8]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d913      	bls.n	800d8dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	689a      	ldr	r2, [r3, #8]
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	1ad2      	subs	r2, r2, r3
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	bf28      	it	cs
 800d8ce:	4613      	movcs	r3, r2
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f001 f984 	bl	800ebe2 <USBD_CtlContinueRx>
 800d8da:	e07d      	b.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8e2:	f003 031f 	and.w	r3, r3, #31
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d014      	beq.n	800d914 <USBD_LL_DataOutStage+0x98>
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d81d      	bhi.n	800d92a <USBD_LL_DataOutStage+0xae>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <USBD_LL_DataOutStage+0x7c>
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d003      	beq.n	800d8fe <USBD_LL_DataOutStage+0x82>
 800d8f6:	e018      	b.n	800d92a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	75bb      	strb	r3, [r7, #22]
            break;
 800d8fc:	e018      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d904:	b2db      	uxtb	r3, r3
 800d906:	4619      	mov	r1, r3
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 fa5e 	bl	800ddca <USBD_CoreFindIF>
 800d90e:	4603      	mov	r3, r0
 800d910:	75bb      	strb	r3, [r7, #22]
            break;
 800d912:	e00d      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	4619      	mov	r1, r3
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 fa60 	bl	800dde4 <USBD_CoreFindEP>
 800d924:	4603      	mov	r3, r0
 800d926:	75bb      	strb	r3, [r7, #22]
            break;
 800d928:	e002      	b.n	800d930 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d92a:	2300      	movs	r3, #0
 800d92c:	75bb      	strb	r3, [r7, #22]
            break;
 800d92e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d930:	7dbb      	ldrb	r3, [r7, #22]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d119      	bne.n	800d96a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d113      	bne.n	800d96a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d942:	7dba      	ldrb	r2, [r7, #22]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	32ae      	adds	r2, #174	; 0xae
 800d948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00b      	beq.n	800d96a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d952:	7dba      	ldrb	r2, [r7, #22]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d95a:	7dba      	ldrb	r2, [r7, #22]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	32ae      	adds	r2, #174	; 0xae
 800d960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f001 f94a 	bl	800ec04 <USBD_CtlSendStatus>
 800d970:	e032      	b.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d972:	7afb      	ldrb	r3, [r7, #11]
 800d974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 fa31 	bl	800dde4 <USBD_CoreFindEP>
 800d982:	4603      	mov	r3, r0
 800d984:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d986:	7dbb      	ldrb	r3, [r7, #22]
 800d988:	2bff      	cmp	r3, #255	; 0xff
 800d98a:	d025      	beq.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
 800d98c:	7dbb      	ldrb	r3, [r7, #22]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d122      	bne.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d117      	bne.n	800d9ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d99e:	7dba      	ldrb	r2, [r7, #22]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	32ae      	adds	r2, #174	; 0xae
 800d9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00f      	beq.n	800d9ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9ae:	7dba      	ldrb	r2, [r7, #22]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d9b6:	7dba      	ldrb	r2, [r7, #22]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	32ae      	adds	r2, #174	; 0xae
 800d9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	7afa      	ldrb	r2, [r7, #11]
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	4798      	blx	r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	e000      	b.n	800d9da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3718      	adds	r7, #24
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b086      	sub	sp, #24
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	60f8      	str	r0, [r7, #12]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d9f0:	7afb      	ldrb	r3, [r7, #11]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d16f      	bne.n	800dad6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	3314      	adds	r3, #20
 800d9fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da02:	2b02      	cmp	r3, #2
 800da04:	d15a      	bne.n	800dabc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	689a      	ldr	r2, [r3, #8]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d914      	bls.n	800da3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	689a      	ldr	r2, [r3, #8]
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	1ad2      	subs	r2, r2, r3
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	461a      	mov	r2, r3
 800da26:	6879      	ldr	r1, [r7, #4]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f001 f8ac 	bl	800eb86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da2e:	2300      	movs	r3, #0
 800da30:	2200      	movs	r2, #0
 800da32:	2100      	movs	r1, #0
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f003 fcf7 	bl	8011428 <USBD_LL_PrepareReceive>
 800da3a:	e03f      	b.n	800dabc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	68da      	ldr	r2, [r3, #12]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	429a      	cmp	r2, r3
 800da46:	d11c      	bne.n	800da82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da50:	429a      	cmp	r2, r3
 800da52:	d316      	bcc.n	800da82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	685a      	ldr	r2, [r3, #4]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da5e:	429a      	cmp	r2, r3
 800da60:	d20f      	bcs.n	800da82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f001 f88d 	bl	800eb86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2200      	movs	r2, #0
 800da70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da74:	2300      	movs	r3, #0
 800da76:	2200      	movs	r2, #0
 800da78:	2100      	movs	r1, #0
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f003 fcd4 	bl	8011428 <USBD_LL_PrepareReceive>
 800da80:	e01c      	b.n	800dabc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d10f      	bne.n	800daae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d009      	beq.n	800daae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800daae:	2180      	movs	r1, #128	; 0x80
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f003 fc0f 	bl	80112d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f001 f8b7 	bl	800ec2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d03a      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f7ff fe42 	bl	800d750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dad4:	e032      	b.n	800db3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dad6:	7afb      	ldrb	r3, [r7, #11]
 800dad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	4619      	mov	r1, r3
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 f97f 	bl	800dde4 <USBD_CoreFindEP>
 800dae6:	4603      	mov	r3, r0
 800dae8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	2bff      	cmp	r3, #255	; 0xff
 800daee:	d025      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d122      	bne.n	800db3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d11c      	bne.n	800db3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db02:	7dfa      	ldrb	r2, [r7, #23]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	32ae      	adds	r2, #174	; 0xae
 800db08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d014      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db12:	7dfa      	ldrb	r2, [r7, #23]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db1a:	7dfa      	ldrb	r2, [r7, #23]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	32ae      	adds	r2, #174	; 0xae
 800db20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	7afa      	ldrb	r2, [r7, #11]
 800db28:	4611      	mov	r1, r2
 800db2a:	68f8      	ldr	r0, [r7, #12]
 800db2c:	4798      	blx	r3
 800db2e:	4603      	mov	r3, r0
 800db30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db32:	7dbb      	ldrb	r3, [r7, #22]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d001      	beq.n	800db3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db38:	7dbb      	ldrb	r3, [r7, #22]
 800db3a:	e000      	b.n	800db3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3718      	adds	r7, #24
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b084      	sub	sp, #16
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db4e:	2300      	movs	r3, #0
 800db50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d014      	beq.n	800dbac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	6852      	ldr	r2, [r2, #4]
 800db9a:	b2d2      	uxtb	r2, r2
 800db9c:	4611      	mov	r1, r2
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	4798      	blx	r3
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbac:	2340      	movs	r3, #64	; 0x40
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f003 fb49 	bl	801124a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2240      	movs	r2, #64	; 0x40
 800dbc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbc8:	2340      	movs	r3, #64	; 0x40
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2180      	movs	r1, #128	; 0x80
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f003 fb3b 	bl	801124a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2240      	movs	r2, #64	; 0x40
 800dbde:	621a      	str	r2, [r3, #32]

  return ret;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	78fa      	ldrb	r2, [r7, #3]
 800dbfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2204      	movs	r2, #4
 800dc24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b083      	sub	sp, #12
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b04      	cmp	r3, #4
 800dc48:	d106      	bne.n	800dc58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d110      	bne.n	800dc9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00b      	beq.n	800dc9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	32ae      	adds	r2, #174	; 0xae
 800dcbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d101      	bne.n	800dcc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dcc4:	2303      	movs	r3, #3
 800dcc6:	e01c      	b.n	800dd02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d115      	bne.n	800dd00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	32ae      	adds	r2, #174	; 0xae
 800dcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00b      	beq.n	800dd00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	32ae      	adds	r2, #174	; 0xae
 800dcf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf6:	6a1b      	ldr	r3, [r3, #32]
 800dcf8:	78fa      	ldrb	r2, [r7, #3]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	32ae      	adds	r2, #174	; 0xae
 800dd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e01c      	b.n	800dd66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d115      	bne.n	800dd64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	32ae      	adds	r2, #174	; 0xae
 800dd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00b      	beq.n	800dd64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32ae      	adds	r2, #174	; 0xae
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5c:	78fa      	ldrb	r2, [r7, #3]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b083      	sub	sp, #12
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00e      	beq.n	800ddc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	6852      	ldr	r2, [r2, #4]
 800ddae:	b2d2      	uxtb	r2, r2
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	4798      	blx	r3
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b086      	sub	sp, #24
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	460b      	mov	r3, r1
 800de08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	885b      	ldrh	r3, [r3, #2]
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	429a      	cmp	r2, r3
 800de24:	d920      	bls.n	800de68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de2e:	e013      	b.n	800de58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de30:	f107 030a 	add.w	r3, r7, #10
 800de34:	4619      	mov	r1, r3
 800de36:	6978      	ldr	r0, [r7, #20]
 800de38:	f000 f81b 	bl	800de72 <USBD_GetNextDesc>
 800de3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	785b      	ldrb	r3, [r3, #1]
 800de42:	2b05      	cmp	r3, #5
 800de44:	d108      	bne.n	800de58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	789b      	ldrb	r3, [r3, #2]
 800de4e:	78fa      	ldrb	r2, [r7, #3]
 800de50:	429a      	cmp	r2, r3
 800de52:	d008      	beq.n	800de66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de54:	2300      	movs	r3, #0
 800de56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	885b      	ldrh	r3, [r3, #2]
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	897b      	ldrh	r3, [r7, #10]
 800de60:	429a      	cmp	r2, r3
 800de62:	d8e5      	bhi.n	800de30 <USBD_GetEpDesc+0x32>
 800de64:	e000      	b.n	800de68 <USBD_GetEpDesc+0x6a>
          break;
 800de66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de68:	693b      	ldr	r3, [r7, #16]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de72:	b480      	push	{r7}
 800de74:	b085      	sub	sp, #20
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	881a      	ldrh	r2, [r3, #0]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	4413      	add	r3, r2
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	461a      	mov	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de9e:	68fb      	ldr	r3, [r7, #12]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800deac:	b480      	push	{r7}
 800deae:	b087      	sub	sp, #28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	3301      	adds	r3, #1
 800dec2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800deca:	8a3b      	ldrh	r3, [r7, #16]
 800decc:	021b      	lsls	r3, r3, #8
 800dece:	b21a      	sxth	r2, r3
 800ded0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	b21b      	sxth	r3, r3
 800ded8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800deda:	89fb      	ldrh	r3, [r7, #14]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	371c      	adds	r7, #28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800defe:	2b40      	cmp	r3, #64	; 0x40
 800df00:	d005      	beq.n	800df0e <USBD_StdDevReq+0x26>
 800df02:	2b40      	cmp	r3, #64	; 0x40
 800df04:	d857      	bhi.n	800dfb6 <USBD_StdDevReq+0xce>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00f      	beq.n	800df2a <USBD_StdDevReq+0x42>
 800df0a:	2b20      	cmp	r3, #32
 800df0c:	d153      	bne.n	800dfb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	32ae      	adds	r2, #174	; 0xae
 800df18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	4798      	blx	r3
 800df24:	4603      	mov	r3, r0
 800df26:	73fb      	strb	r3, [r7, #15]
      break;
 800df28:	e04a      	b.n	800dfc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	785b      	ldrb	r3, [r3, #1]
 800df2e:	2b09      	cmp	r3, #9
 800df30:	d83b      	bhi.n	800dfaa <USBD_StdDevReq+0xc2>
 800df32:	a201      	add	r2, pc, #4	; (adr r2, 800df38 <USBD_StdDevReq+0x50>)
 800df34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df38:	0800df8d 	.word	0x0800df8d
 800df3c:	0800dfa1 	.word	0x0800dfa1
 800df40:	0800dfab 	.word	0x0800dfab
 800df44:	0800df97 	.word	0x0800df97
 800df48:	0800dfab 	.word	0x0800dfab
 800df4c:	0800df6b 	.word	0x0800df6b
 800df50:	0800df61 	.word	0x0800df61
 800df54:	0800dfab 	.word	0x0800dfab
 800df58:	0800df83 	.word	0x0800df83
 800df5c:	0800df75 	.word	0x0800df75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fa3c 	bl	800e3e0 <USBD_GetDescriptor>
          break;
 800df68:	e024      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df6a:	6839      	ldr	r1, [r7, #0]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 fba1 	bl	800e6b4 <USBD_SetAddress>
          break;
 800df72:	e01f      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 fbe0 	bl	800e73c <USBD_SetConfig>
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
          break;
 800df80:	e018      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fc83 	bl	800e890 <USBD_GetConfig>
          break;
 800df8a:	e013      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fcb4 	bl	800e8fc <USBD_GetStatus>
          break;
 800df94:	e00e      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fce3 	bl	800e964 <USBD_SetFeature>
          break;
 800df9e:	e009      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fd07 	bl	800e9b6 <USBD_ClrFeature>
          break;
 800dfa8:	e004      	b.n	800dfb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fd5e 	bl	800ea6e <USBD_CtlError>
          break;
 800dfb2:	bf00      	nop
      }
      break;
 800dfb4:	e004      	b.n	800dfc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dfb6:	6839      	ldr	r1, [r7, #0]
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fd58 	bl	800ea6e <USBD_CtlError>
      break;
 800dfbe:	bf00      	nop
  }

  return ret;
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop

0800dfcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfe2:	2b40      	cmp	r3, #64	; 0x40
 800dfe4:	d005      	beq.n	800dff2 <USBD_StdItfReq+0x26>
 800dfe6:	2b40      	cmp	r3, #64	; 0x40
 800dfe8:	d852      	bhi.n	800e090 <USBD_StdItfReq+0xc4>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <USBD_StdItfReq+0x26>
 800dfee:	2b20      	cmp	r3, #32
 800dff0:	d14e      	bne.n	800e090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d840      	bhi.n	800e082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	889b      	ldrh	r3, [r3, #4]
 800e004:	b2db      	uxtb	r3, r3
 800e006:	2b01      	cmp	r3, #1
 800e008:	d836      	bhi.n	800e078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	889b      	ldrh	r3, [r3, #4]
 800e00e:	b2db      	uxtb	r3, r3
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fed9 	bl	800ddca <USBD_CoreFindIF>
 800e018:	4603      	mov	r3, r0
 800e01a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
 800e01e:	2bff      	cmp	r3, #255	; 0xff
 800e020:	d01d      	beq.n	800e05e <USBD_StdItfReq+0x92>
 800e022:	7bbb      	ldrb	r3, [r7, #14]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d11a      	bne.n	800e05e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e028:	7bba      	ldrb	r2, [r7, #14]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	32ae      	adds	r2, #174	; 0xae
 800e02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00f      	beq.n	800e058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e038:	7bba      	ldrb	r2, [r7, #14]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e040:	7bba      	ldrb	r2, [r7, #14]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	32ae      	adds	r2, #174	; 0xae
 800e046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	4798      	blx	r3
 800e052:	4603      	mov	r3, r0
 800e054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e056:	e004      	b.n	800e062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e058:	2303      	movs	r3, #3
 800e05a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e05c:	e001      	b.n	800e062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e05e:	2303      	movs	r3, #3
 800e060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d110      	bne.n	800e08c <USBD_StdItfReq+0xc0>
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10d      	bne.n	800e08c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fdc7 	bl	800ec04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e076:	e009      	b.n	800e08c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fcf7 	bl	800ea6e <USBD_CtlError>
          break;
 800e080:	e004      	b.n	800e08c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fcf2 	bl	800ea6e <USBD_CtlError>
          break;
 800e08a:	e000      	b.n	800e08e <USBD_StdItfReq+0xc2>
          break;
 800e08c:	bf00      	nop
      }
      break;
 800e08e:	e004      	b.n	800e09a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fceb 	bl	800ea6e <USBD_CtlError>
      break;
 800e098:	bf00      	nop
  }

  return ret;
 800e09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	889b      	ldrh	r3, [r3, #4]
 800e0b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0c0:	2b40      	cmp	r3, #64	; 0x40
 800e0c2:	d007      	beq.n	800e0d4 <USBD_StdEPReq+0x30>
 800e0c4:	2b40      	cmp	r3, #64	; 0x40
 800e0c6:	f200 817f 	bhi.w	800e3c8 <USBD_StdEPReq+0x324>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d02a      	beq.n	800e124 <USBD_StdEPReq+0x80>
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	f040 817a 	bne.w	800e3c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e0d4:	7bbb      	ldrb	r3, [r7, #14]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff fe83 	bl	800dde4 <USBD_CoreFindEP>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e0e2:	7b7b      	ldrb	r3, [r7, #13]
 800e0e4:	2bff      	cmp	r3, #255	; 0xff
 800e0e6:	f000 8174 	beq.w	800e3d2 <USBD_StdEPReq+0x32e>
 800e0ea:	7b7b      	ldrb	r3, [r7, #13]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f040 8170 	bne.w	800e3d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e0f2:	7b7a      	ldrb	r2, [r7, #13]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e0fa:	7b7a      	ldrb	r2, [r7, #13]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	32ae      	adds	r2, #174	; 0xae
 800e100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 8163 	beq.w	800e3d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e10c:	7b7a      	ldrb	r2, [r7, #13]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	32ae      	adds	r2, #174	; 0xae
 800e112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	4798      	blx	r3
 800e11e:	4603      	mov	r3, r0
 800e120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e122:	e156      	b.n	800e3d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	785b      	ldrb	r3, [r3, #1]
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d008      	beq.n	800e13e <USBD_StdEPReq+0x9a>
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	f300 8145 	bgt.w	800e3bc <USBD_StdEPReq+0x318>
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 809b 	beq.w	800e26e <USBD_StdEPReq+0x1ca>
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d03c      	beq.n	800e1b6 <USBD_StdEPReq+0x112>
 800e13c:	e13e      	b.n	800e3bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b02      	cmp	r3, #2
 800e148:	d002      	beq.n	800e150 <USBD_StdEPReq+0xac>
 800e14a:	2b03      	cmp	r3, #3
 800e14c:	d016      	beq.n	800e17c <USBD_StdEPReq+0xd8>
 800e14e:	e02c      	b.n	800e1aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e150:	7bbb      	ldrb	r3, [r7, #14]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <USBD_StdEPReq+0xce>
 800e156:	7bbb      	ldrb	r3, [r7, #14]
 800e158:	2b80      	cmp	r3, #128	; 0x80
 800e15a:	d00a      	beq.n	800e172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e15c:	7bbb      	ldrb	r3, [r7, #14]
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f003 f8b7 	bl	80112d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e166:	2180      	movs	r1, #128	; 0x80
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f003 f8b3 	bl	80112d4 <USBD_LL_StallEP>
 800e16e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e170:	e020      	b.n	800e1b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fc7a 	bl	800ea6e <USBD_CtlError>
              break;
 800e17a:	e01b      	b.n	800e1b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	885b      	ldrh	r3, [r3, #2]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10e      	bne.n	800e1a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00b      	beq.n	800e1a2 <USBD_StdEPReq+0xfe>
 800e18a:	7bbb      	ldrb	r3, [r7, #14]
 800e18c:	2b80      	cmp	r3, #128	; 0x80
 800e18e:	d008      	beq.n	800e1a2 <USBD_StdEPReq+0xfe>
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	88db      	ldrh	r3, [r3, #6]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d104      	bne.n	800e1a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e198:	7bbb      	ldrb	r3, [r7, #14]
 800e19a:	4619      	mov	r1, r3
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f003 f899 	bl	80112d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fd2e 	bl	800ec04 <USBD_CtlSendStatus>

              break;
 800e1a8:	e004      	b.n	800e1b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e1aa:	6839      	ldr	r1, [r7, #0]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fc5e 	bl	800ea6e <USBD_CtlError>
              break;
 800e1b2:	bf00      	nop
          }
          break;
 800e1b4:	e107      	b.n	800e3c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d002      	beq.n	800e1c8 <USBD_StdEPReq+0x124>
 800e1c2:	2b03      	cmp	r3, #3
 800e1c4:	d016      	beq.n	800e1f4 <USBD_StdEPReq+0x150>
 800e1c6:	e04b      	b.n	800e260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1c8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00d      	beq.n	800e1ea <USBD_StdEPReq+0x146>
 800e1ce:	7bbb      	ldrb	r3, [r7, #14]
 800e1d0:	2b80      	cmp	r3, #128	; 0x80
 800e1d2:	d00a      	beq.n	800e1ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f003 f87b 	bl	80112d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1de:	2180      	movs	r1, #128	; 0x80
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f003 f877 	bl	80112d4 <USBD_LL_StallEP>
 800e1e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1e8:	e040      	b.n	800e26c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fc3e 	bl	800ea6e <USBD_CtlError>
              break;
 800e1f2:	e03b      	b.n	800e26c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	885b      	ldrh	r3, [r3, #2]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d136      	bne.n	800e26a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1fc:	7bbb      	ldrb	r3, [r7, #14]
 800e1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e206:	7bbb      	ldrb	r3, [r7, #14]
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f003 f881 	bl	8011312 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fcf7 	bl	800ec04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e216:	7bbb      	ldrb	r3, [r7, #14]
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff fde2 	bl	800dde4 <USBD_CoreFindEP>
 800e220:	4603      	mov	r3, r0
 800e222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e224:	7b7b      	ldrb	r3, [r7, #13]
 800e226:	2bff      	cmp	r3, #255	; 0xff
 800e228:	d01f      	beq.n	800e26a <USBD_StdEPReq+0x1c6>
 800e22a:	7b7b      	ldrb	r3, [r7, #13]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d11c      	bne.n	800e26a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e230:	7b7a      	ldrb	r2, [r7, #13]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e238:	7b7a      	ldrb	r2, [r7, #13]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	32ae      	adds	r2, #174	; 0xae
 800e23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d010      	beq.n	800e26a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e248:	7b7a      	ldrb	r2, [r7, #13]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	32ae      	adds	r2, #174	; 0xae
 800e24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	4798      	blx	r3
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e25e:	e004      	b.n	800e26a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fc03 	bl	800ea6e <USBD_CtlError>
              break;
 800e268:	e000      	b.n	800e26c <USBD_StdEPReq+0x1c8>
              break;
 800e26a:	bf00      	nop
          }
          break;
 800e26c:	e0ab      	b.n	800e3c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b02      	cmp	r3, #2
 800e278:	d002      	beq.n	800e280 <USBD_StdEPReq+0x1dc>
 800e27a:	2b03      	cmp	r3, #3
 800e27c:	d032      	beq.n	800e2e4 <USBD_StdEPReq+0x240>
 800e27e:	e097      	b.n	800e3b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d007      	beq.n	800e296 <USBD_StdEPReq+0x1f2>
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	2b80      	cmp	r3, #128	; 0x80
 800e28a:	d004      	beq.n	800e296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fbed 	bl	800ea6e <USBD_CtlError>
                break;
 800e294:	e091      	b.n	800e3ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	da0b      	bge.n	800e2b6 <USBD_StdEPReq+0x212>
 800e29e:	7bbb      	ldrb	r3, [r7, #14]
 800e2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4413      	add	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	3310      	adds	r3, #16
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	e00b      	b.n	800e2ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2b6:	7bbb      	ldrb	r3, [r7, #14]
 800e2b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2202      	movs	r2, #2
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fc37 	bl	800eb50 <USBD_CtlSendData>
              break;
 800e2e2:	e06a      	b.n	800e3ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e2e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da11      	bge.n	800e310 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2ec:	7bbb      	ldrb	r3, [r7, #14]
 800e2ee:	f003 020f 	and.w	r2, r3, #15
 800e2f2:	6879      	ldr	r1, [r7, #4]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	440b      	add	r3, r1
 800e2fe:	3324      	adds	r3, #36	; 0x24
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d117      	bne.n	800e336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fbb0 	bl	800ea6e <USBD_CtlError>
                  break;
 800e30e:	e054      	b.n	800e3ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e310:	7bbb      	ldrb	r3, [r7, #14]
 800e312:	f003 020f 	and.w	r2, r3, #15
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	440b      	add	r3, r1
 800e322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fb9d 	bl	800ea6e <USBD_CtlError>
                  break;
 800e334:	e041      	b.n	800e3ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	da0b      	bge.n	800e356 <USBD_StdEPReq+0x2b2>
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	3310      	adds	r3, #16
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	4413      	add	r3, r2
 800e352:	3304      	adds	r3, #4
 800e354:	e00b      	b.n	800e36e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e356:	7bbb      	ldrb	r3, [r7, #14]
 800e358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e35c:	4613      	mov	r3, r2
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	4413      	add	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	4413      	add	r3, r2
 800e36c:	3304      	adds	r3, #4
 800e36e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e370:	7bbb      	ldrb	r3, [r7, #14]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <USBD_StdEPReq+0x2d8>
 800e376:	7bbb      	ldrb	r3, [r7, #14]
 800e378:	2b80      	cmp	r3, #128	; 0x80
 800e37a:	d103      	bne.n	800e384 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2200      	movs	r2, #0
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	e00e      	b.n	800e3a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	4619      	mov	r1, r3
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f002 ffe1 	bl	8011350 <USBD_LL_IsStallEP>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	e002      	b.n	800e3a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fbd1 	bl	800eb50 <USBD_CtlSendData>
              break;
 800e3ae:	e004      	b.n	800e3ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e3b0:	6839      	ldr	r1, [r7, #0]
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 fb5b 	bl	800ea6e <USBD_CtlError>
              break;
 800e3b8:	bf00      	nop
          }
          break;
 800e3ba:	e004      	b.n	800e3c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fb55 	bl	800ea6e <USBD_CtlError>
          break;
 800e3c4:	bf00      	nop
      }
      break;
 800e3c6:	e005      	b.n	800e3d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fb4f 	bl	800ea6e <USBD_CtlError>
      break;
 800e3d0:	e000      	b.n	800e3d4 <USBD_StdEPReq+0x330>
      break;
 800e3d2:	bf00      	nop
  }

  return ret;
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
	...

0800e3e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	885b      	ldrh	r3, [r3, #2]
 800e3fa:	0a1b      	lsrs	r3, r3, #8
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	3b01      	subs	r3, #1
 800e400:	2b06      	cmp	r3, #6
 800e402:	f200 8128 	bhi.w	800e656 <USBD_GetDescriptor+0x276>
 800e406:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <USBD_GetDescriptor+0x2c>)
 800e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40c:	0800e429 	.word	0x0800e429
 800e410:	0800e441 	.word	0x0800e441
 800e414:	0800e481 	.word	0x0800e481
 800e418:	0800e657 	.word	0x0800e657
 800e41c:	0800e657 	.word	0x0800e657
 800e420:	0800e5f7 	.word	0x0800e5f7
 800e424:	0800e623 	.word	0x0800e623
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	7c12      	ldrb	r2, [r2, #16]
 800e434:	f107 0108 	add.w	r1, r7, #8
 800e438:	4610      	mov	r0, r2
 800e43a:	4798      	blx	r3
 800e43c:	60f8      	str	r0, [r7, #12]
      break;
 800e43e:	e112      	b.n	800e666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	7c1b      	ldrb	r3, [r3, #16]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10d      	bne.n	800e464 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e450:	f107 0208 	add.w	r2, r7, #8
 800e454:	4610      	mov	r0, r2
 800e456:	4798      	blx	r3
 800e458:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	3301      	adds	r3, #1
 800e45e:	2202      	movs	r2, #2
 800e460:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e462:	e100      	b.n	800e666 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46c:	f107 0208 	add.w	r2, r7, #8
 800e470:	4610      	mov	r0, r2
 800e472:	4798      	blx	r3
 800e474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3301      	adds	r3, #1
 800e47a:	2202      	movs	r2, #2
 800e47c:	701a      	strb	r2, [r3, #0]
      break;
 800e47e:	e0f2      	b.n	800e666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	885b      	ldrh	r3, [r3, #2]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b05      	cmp	r3, #5
 800e488:	f200 80ac 	bhi.w	800e5e4 <USBD_GetDescriptor+0x204>
 800e48c:	a201      	add	r2, pc, #4	; (adr r2, 800e494 <USBD_GetDescriptor+0xb4>)
 800e48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e492:	bf00      	nop
 800e494:	0800e4ad 	.word	0x0800e4ad
 800e498:	0800e4e1 	.word	0x0800e4e1
 800e49c:	0800e515 	.word	0x0800e515
 800e4a0:	0800e549 	.word	0x0800e549
 800e4a4:	0800e57d 	.word	0x0800e57d
 800e4a8:	0800e5b1 	.word	0x0800e5b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00b      	beq.n	800e4d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	7c12      	ldrb	r2, [r2, #16]
 800e4c4:	f107 0108 	add.w	r1, r7, #8
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	4798      	blx	r3
 800e4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ce:	e091      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 facb 	bl	800ea6e <USBD_CtlError>
            err++;
 800e4d8:	7afb      	ldrb	r3, [r7, #11]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4de:	e089      	b.n	800e5f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00b      	beq.n	800e504 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	7c12      	ldrb	r2, [r2, #16]
 800e4f8:	f107 0108 	add.w	r1, r7, #8
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	4798      	blx	r3
 800e500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e502:	e077      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fab1 	bl	800ea6e <USBD_CtlError>
            err++;
 800e50c:	7afb      	ldrb	r3, [r7, #11]
 800e50e:	3301      	adds	r3, #1
 800e510:	72fb      	strb	r3, [r7, #11]
          break;
 800e512:	e06f      	b.n	800e5f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00b      	beq.n	800e538 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	7c12      	ldrb	r2, [r2, #16]
 800e52c:	f107 0108 	add.w	r1, r7, #8
 800e530:	4610      	mov	r0, r2
 800e532:	4798      	blx	r3
 800e534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e536:	e05d      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 fa97 	bl	800ea6e <USBD_CtlError>
            err++;
 800e540:	7afb      	ldrb	r3, [r7, #11]
 800e542:	3301      	adds	r3, #1
 800e544:	72fb      	strb	r3, [r7, #11]
          break;
 800e546:	e055      	b.n	800e5f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00b      	beq.n	800e56c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	7c12      	ldrb	r2, [r2, #16]
 800e560:	f107 0108 	add.w	r1, r7, #8
 800e564:	4610      	mov	r0, r2
 800e566:	4798      	blx	r3
 800e568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e56a:	e043      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 fa7d 	bl	800ea6e <USBD_CtlError>
            err++;
 800e574:	7afb      	ldrb	r3, [r7, #11]
 800e576:	3301      	adds	r3, #1
 800e578:	72fb      	strb	r3, [r7, #11]
          break;
 800e57a:	e03b      	b.n	800e5f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e582:	695b      	ldr	r3, [r3, #20]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	7c12      	ldrb	r2, [r2, #16]
 800e594:	f107 0108 	add.w	r1, r7, #8
 800e598:	4610      	mov	r0, r2
 800e59a:	4798      	blx	r3
 800e59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e59e:	e029      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa63 	bl	800ea6e <USBD_CtlError>
            err++;
 800e5a8:	7afb      	ldrb	r3, [r7, #11]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ae:	e021      	b.n	800e5f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b6:	699b      	ldr	r3, [r3, #24]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00b      	beq.n	800e5d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5c2:	699b      	ldr	r3, [r3, #24]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	7c12      	ldrb	r2, [r2, #16]
 800e5c8:	f107 0108 	add.w	r1, r7, #8
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	4798      	blx	r3
 800e5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5d2:	e00f      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fa49 	bl	800ea6e <USBD_CtlError>
            err++;
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5e2:	e007      	b.n	800e5f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 fa41 	bl	800ea6e <USBD_CtlError>
          err++;
 800e5ec:	7afb      	ldrb	r3, [r7, #11]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e5f2:	bf00      	nop
      }
      break;
 800e5f4:	e037      	b.n	800e666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	7c1b      	ldrb	r3, [r3, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d109      	bne.n	800e612 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e606:	f107 0208 	add.w	r2, r7, #8
 800e60a:	4610      	mov	r0, r2
 800e60c:	4798      	blx	r3
 800e60e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e610:	e029      	b.n	800e666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fa2a 	bl	800ea6e <USBD_CtlError>
        err++;
 800e61a:	7afb      	ldrb	r3, [r7, #11]
 800e61c:	3301      	adds	r3, #1
 800e61e:	72fb      	strb	r3, [r7, #11]
      break;
 800e620:	e021      	b.n	800e666 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7c1b      	ldrb	r3, [r3, #16]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d10d      	bne.n	800e646 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e632:	f107 0208 	add.w	r2, r7, #8
 800e636:	4610      	mov	r0, r2
 800e638:	4798      	blx	r3
 800e63a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	3301      	adds	r3, #1
 800e640:	2207      	movs	r2, #7
 800e642:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e644:	e00f      	b.n	800e666 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 fa10 	bl	800ea6e <USBD_CtlError>
        err++;
 800e64e:	7afb      	ldrb	r3, [r7, #11]
 800e650:	3301      	adds	r3, #1
 800e652:	72fb      	strb	r3, [r7, #11]
      break;
 800e654:	e007      	b.n	800e666 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fa08 	bl	800ea6e <USBD_CtlError>
      err++;
 800e65e:	7afb      	ldrb	r3, [r7, #11]
 800e660:	3301      	adds	r3, #1
 800e662:	72fb      	strb	r3, [r7, #11]
      break;
 800e664:	bf00      	nop
  }

  if (err != 0U)
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d11e      	bne.n	800e6aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	88db      	ldrh	r3, [r3, #6]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d016      	beq.n	800e6a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e674:	893b      	ldrh	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00e      	beq.n	800e698 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	88da      	ldrh	r2, [r3, #6]
 800e67e:	893b      	ldrh	r3, [r7, #8]
 800e680:	4293      	cmp	r3, r2
 800e682:	bf28      	it	cs
 800e684:	4613      	movcs	r3, r2
 800e686:	b29b      	uxth	r3, r3
 800e688:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e68a:	893b      	ldrh	r3, [r7, #8]
 800e68c:	461a      	mov	r2, r3
 800e68e:	68f9      	ldr	r1, [r7, #12]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f000 fa5d 	bl	800eb50 <USBD_CtlSendData>
 800e696:	e009      	b.n	800e6ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f9e7 	bl	800ea6e <USBD_CtlError>
 800e6a0:	e004      	b.n	800e6ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 faae 	bl	800ec04 <USBD_CtlSendStatus>
 800e6a8:	e000      	b.n	800e6ac <USBD_GetDescriptor+0x2cc>
    return;
 800e6aa:	bf00      	nop
  }
}
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop

0800e6b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	889b      	ldrh	r3, [r3, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d131      	bne.n	800e72a <USBD_SetAddress+0x76>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	88db      	ldrh	r3, [r3, #6]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d12d      	bne.n	800e72a <USBD_SetAddress+0x76>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	885b      	ldrh	r3, [r3, #2]
 800e6d2:	2b7f      	cmp	r3, #127	; 0x7f
 800e6d4:	d829      	bhi.n	800e72a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	885b      	ldrh	r3, [r3, #2]
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b03      	cmp	r3, #3
 800e6ec:	d104      	bne.n	800e6f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e6ee:	6839      	ldr	r1, [r7, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f9bc 	bl	800ea6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6f6:	e01d      	b.n	800e734 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	7bfa      	ldrb	r2, [r7, #15]
 800e6fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e700:	7bfb      	ldrb	r3, [r7, #15]
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f002 fe4f 	bl	80113a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 fa7a 	bl	800ec04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e710:	7bfb      	ldrb	r3, [r7, #15]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d004      	beq.n	800e720 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2202      	movs	r2, #2
 800e71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e71e:	e009      	b.n	800e734 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e728:	e004      	b.n	800e734 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f99e 	bl	800ea6e <USBD_CtlError>
  }
}
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	885b      	ldrh	r3, [r3, #2]
 800e74e:	b2da      	uxtb	r2, r3
 800e750:	4b4e      	ldr	r3, [pc, #312]	; (800e88c <USBD_SetConfig+0x150>)
 800e752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e754:	4b4d      	ldr	r3, [pc, #308]	; (800e88c <USBD_SetConfig+0x150>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d905      	bls.n	800e768 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f985 	bl	800ea6e <USBD_CtlError>
    return USBD_FAIL;
 800e764:	2303      	movs	r3, #3
 800e766:	e08c      	b.n	800e882 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b02      	cmp	r3, #2
 800e772:	d002      	beq.n	800e77a <USBD_SetConfig+0x3e>
 800e774:	2b03      	cmp	r3, #3
 800e776:	d029      	beq.n	800e7cc <USBD_SetConfig+0x90>
 800e778:	e075      	b.n	800e866 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e77a:	4b44      	ldr	r3, [pc, #272]	; (800e88c <USBD_SetConfig+0x150>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d020      	beq.n	800e7c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e782:	4b42      	ldr	r3, [pc, #264]	; (800e88c <USBD_SetConfig+0x150>)
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e78c:	4b3f      	ldr	r3, [pc, #252]	; (800e88c <USBD_SetConfig+0x150>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7fe ffe7 	bl	800d766 <USBD_SetClassConfig>
 800e798:	4603      	mov	r3, r0
 800e79a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d008      	beq.n	800e7b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 f962 	bl	800ea6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7b2:	e065      	b.n	800e880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fa25 	bl	800ec04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2203      	movs	r2, #3
 800e7be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7c2:	e05d      	b.n	800e880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fa1d 	bl	800ec04 <USBD_CtlSendStatus>
      break;
 800e7ca:	e059      	b.n	800e880 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e7cc:	4b2f      	ldr	r3, [pc, #188]	; (800e88c <USBD_SetConfig+0x150>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d112      	bne.n	800e7fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e7dc:	4b2b      	ldr	r3, [pc, #172]	; (800e88c <USBD_SetConfig+0x150>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7e6:	4b29      	ldr	r3, [pc, #164]	; (800e88c <USBD_SetConfig+0x150>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fe ffd6 	bl	800d79e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fa06 	bl	800ec04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7f8:	e042      	b.n	800e880 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e7fa:	4b24      	ldr	r3, [pc, #144]	; (800e88c <USBD_SetConfig+0x150>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	461a      	mov	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	429a      	cmp	r2, r3
 800e806:	d02a      	beq.n	800e85e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7fe ffc4 	bl	800d79e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e816:	4b1d      	ldr	r3, [pc, #116]	; (800e88c <USBD_SetConfig+0x150>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	461a      	mov	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e820:	4b1a      	ldr	r3, [pc, #104]	; (800e88c <USBD_SetConfig+0x150>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	4619      	mov	r1, r3
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f7fe ff9d 	bl	800d766 <USBD_SetClassConfig>
 800e82c:	4603      	mov	r3, r0
 800e82e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00f      	beq.n	800e856 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f918 	bl	800ea6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7fe ffa9 	bl	800d79e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2202      	movs	r2, #2
 800e850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e854:	e014      	b.n	800e880 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f9d4 	bl	800ec04 <USBD_CtlSendStatus>
      break;
 800e85c:	e010      	b.n	800e880 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 f9d0 	bl	800ec04 <USBD_CtlSendStatus>
      break;
 800e864:	e00c      	b.n	800e880 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e866:	6839      	ldr	r1, [r7, #0]
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f900 	bl	800ea6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e86e:	4b07      	ldr	r3, [pc, #28]	; (800e88c <USBD_SetConfig+0x150>)
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7fe ff92 	bl	800d79e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e87a:	2303      	movs	r3, #3
 800e87c:	73fb      	strb	r3, [r7, #15]
      break;
 800e87e:	bf00      	nop
  }

  return ret;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	20004ae8 	.word	0x20004ae8

0800e890 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	88db      	ldrh	r3, [r3, #6]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d004      	beq.n	800e8ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f000 f8e2 	bl	800ea6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e8aa:	e023      	b.n	800e8f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	dc02      	bgt.n	800e8be <USBD_GetConfig+0x2e>
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dc03      	bgt.n	800e8c4 <USBD_GetConfig+0x34>
 800e8bc:	e015      	b.n	800e8ea <USBD_GetConfig+0x5a>
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	d00b      	beq.n	800e8da <USBD_GetConfig+0x4a>
 800e8c2:	e012      	b.n	800e8ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3308      	adds	r3, #8
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f93c 	bl	800eb50 <USBD_CtlSendData>
        break;
 800e8d8:	e00c      	b.n	800e8f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 f934 	bl	800eb50 <USBD_CtlSendData>
        break;
 800e8e8:	e004      	b.n	800e8f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e8ea:	6839      	ldr	r1, [r7, #0]
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 f8be 	bl	800ea6e <USBD_CtlError>
        break;
 800e8f2:	bf00      	nop
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	3b01      	subs	r3, #1
 800e910:	2b02      	cmp	r3, #2
 800e912:	d81e      	bhi.n	800e952 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	88db      	ldrh	r3, [r3, #6]
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d004      	beq.n	800e926 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e91c:	6839      	ldr	r1, [r7, #0]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f8a5 	bl	800ea6e <USBD_CtlError>
        break;
 800e924:	e01a      	b.n	800e95c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e932:	2b00      	cmp	r3, #0
 800e934:	d005      	beq.n	800e942 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	f043 0202 	orr.w	r2, r3, #2
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	330c      	adds	r3, #12
 800e946:	2202      	movs	r2, #2
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f900 	bl	800eb50 <USBD_CtlSendData>
      break;
 800e950:	e004      	b.n	800e95c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 f88a 	bl	800ea6e <USBD_CtlError>
      break;
 800e95a:	bf00      	nop
  }
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	885b      	ldrh	r3, [r3, #2]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d107      	bne.n	800e986 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2201      	movs	r2, #1
 800e97a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 f940 	bl	800ec04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e984:	e013      	b.n	800e9ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	885b      	ldrh	r3, [r3, #2]
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d10b      	bne.n	800e9a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	889b      	ldrh	r3, [r3, #4]
 800e992:	0a1b      	lsrs	r3, r3, #8
 800e994:	b29b      	uxth	r3, r3
 800e996:	b2da      	uxtb	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f930 	bl	800ec04 <USBD_CtlSendStatus>
}
 800e9a4:	e003      	b.n	800e9ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f860 	bl	800ea6e <USBD_CtlError>
}
 800e9ae:	bf00      	nop
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b082      	sub	sp, #8
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9c6:	b2db      	uxtb	r3, r3
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d80b      	bhi.n	800e9e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	885b      	ldrh	r3, [r3, #2]
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	d10c      	bne.n	800e9f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 f910 	bl	800ec04 <USBD_CtlSendStatus>
      }
      break;
 800e9e4:	e004      	b.n	800e9f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e9e6:	6839      	ldr	r1, [r7, #0]
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f840 	bl	800ea6e <USBD_CtlError>
      break;
 800e9ee:	e000      	b.n	800e9f2 <USBD_ClrFeature+0x3c>
      break;
 800e9f0:	bf00      	nop
  }
}
 800e9f2:	bf00      	nop
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	781a      	ldrb	r2, [r3, #0]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	3301      	adds	r3, #1
 800ea14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	781a      	ldrb	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3301      	adds	r3, #1
 800ea22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f7ff fa41 	bl	800deac <SWAPBYTE>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3301      	adds	r3, #1
 800ea36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f7ff fa34 	bl	800deac <SWAPBYTE>
 800ea44:	4603      	mov	r3, r0
 800ea46:	461a      	mov	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	3301      	adds	r3, #1
 800ea56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff fa27 	bl	800deac <SWAPBYTE>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	461a      	mov	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	80da      	strh	r2, [r3, #6]
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b082      	sub	sp, #8
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea78:	2180      	movs	r1, #128	; 0x80
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f002 fc2a 	bl	80112d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea80:	2100      	movs	r1, #0
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f002 fc26 	bl	80112d4 <USBD_LL_StallEP>
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d036      	beq.n	800eb14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eaaa:	6938      	ldr	r0, [r7, #16]
 800eaac:	f000 f836 	bl	800eb1c <USBD_GetLen>
 800eab0:	4603      	mov	r3, r0
 800eab2:	3301      	adds	r3, #1
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	b29a      	uxth	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	4413      	add	r3, r2
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	7812      	ldrb	r2, [r2, #0]
 800eac8:	701a      	strb	r2, [r3, #0]
  idx++;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	3301      	adds	r3, #1
 800eace:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	4413      	add	r3, r2
 800ead6:	2203      	movs	r2, #3
 800ead8:	701a      	strb	r2, [r3, #0]
  idx++;
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	3301      	adds	r3, #1
 800eade:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eae0:	e013      	b.n	800eb0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
 800eae4:	68ba      	ldr	r2, [r7, #8]
 800eae6:	4413      	add	r3, r2
 800eae8:	693a      	ldr	r2, [r7, #16]
 800eaea:	7812      	ldrb	r2, [r2, #0]
 800eaec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	613b      	str	r3, [r7, #16]
    idx++;
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	4413      	add	r3, r2
 800eb00:	2200      	movs	r2, #0
 800eb02:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	3301      	adds	r3, #1
 800eb08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1e7      	bne.n	800eae2 <USBD_GetString+0x52>
 800eb12:	e000      	b.n	800eb16 <USBD_GetString+0x86>
    return;
 800eb14:	bf00      	nop
  }
}
 800eb16:	3718      	adds	r7, #24
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b085      	sub	sp, #20
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb2c:	e005      	b.n	800eb3a <USBD_GetLen+0x1e>
  {
    len++;
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
 800eb30:	3301      	adds	r3, #1
 800eb32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	3301      	adds	r3, #1
 800eb38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1f5      	bne.n	800eb2e <USBD_GetLen+0x12>
  }

  return len;
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3714      	adds	r7, #20
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	2100      	movs	r1, #0
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f002 fc35 	bl	80113e6 <USBD_LL_Transmit>

  return USBD_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	60b9      	str	r1, [r7, #8]
 800eb90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	2100      	movs	r1, #0
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	f002 fc24 	bl	80113e6 <USBD_LL_Transmit>

  return USBD_OK;
 800eb9e:	2300      	movs	r3, #0
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3710      	adds	r7, #16
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2203      	movs	r2, #3
 800ebb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f002 fc28 	bl	8011428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	60f8      	str	r0, [r7, #12]
 800ebea:	60b9      	str	r1, [r7, #8]
 800ebec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f002 fc17 	bl	8011428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2204      	movs	r2, #4
 800ec10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec14:	2300      	movs	r3, #0
 800ec16:	2200      	movs	r2, #0
 800ec18:	2100      	movs	r1, #0
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f002 fbe3 	bl	80113e6 <USBD_LL_Transmit>

  return USBD_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2205      	movs	r2, #5
 800ec36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2100      	movs	r1, #0
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f002 fbf1 	bl	8011428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec46:	2300      	movs	r3, #0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	4603      	mov	r3, r0
 800ec58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ec5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec62:	2b84      	cmp	r3, #132	; 0x84
 800ec64:	d005      	beq.n	800ec72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ec66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	3303      	adds	r3, #3
 800ec70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ec72:	68fb      	ldr	r3, [r7, #12]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ec84:	f000 fe1e 	bl	800f8c4 <vTaskStartScheduler>
  
  return osOK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ec8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec90:	b089      	sub	sp, #36	; 0x24
 800ec92:	af04      	add	r7, sp, #16
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d020      	beq.n	800ece2 <osThreadCreate+0x54>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01c      	beq.n	800ece2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	685c      	ldr	r4, [r3, #4]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681d      	ldr	r5, [r3, #0]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	691e      	ldr	r6, [r3, #16]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff ffc8 	bl	800ec50 <makeFreeRtosPriority>
 800ecc0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecca:	9202      	str	r2, [sp, #8]
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	9100      	str	r1, [sp, #0]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f000 fc2c 	bl	800f534 <xTaskCreateStatic>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e01c      	b.n	800ed1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	685c      	ldr	r4, [r3, #4]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecee:	b29e      	uxth	r6, r3
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7ff ffaa 	bl	800ec50 <makeFreeRtosPriority>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	f107 030c 	add.w	r3, r7, #12
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	9200      	str	r2, [sp, #0]
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	4632      	mov	r2, r6
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f000 fc6e 	bl	800f5ee <xTaskCreate>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d001      	beq.n	800ed1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e000      	b.n	800ed1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <osDelay+0x16>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	e000      	b.n	800ed3e <osDelay+0x18>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 fd8c 	bl	800f85c <vTaskDelay>
  
  return osOK;
 800ed44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b086      	sub	sp, #24
 800ed52:	af02      	add	r7, sp, #8
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00f      	beq.n	800ed80 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d10a      	bne.n	800ed7c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	2203      	movs	r2, #3
 800ed6c:	9200      	str	r2, [sp, #0]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	2100      	movs	r1, #0
 800ed72:	2001      	movs	r0, #1
 800ed74:	f000 f93a 	bl	800efec <xQueueGenericCreateStatic>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	e016      	b.n	800edaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e014      	b.n	800edaa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2b01      	cmp	r3, #1
 800ed84:	d110      	bne.n	800eda8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ed86:	2203      	movs	r2, #3
 800ed88:	2100      	movs	r1, #0
 800ed8a:	2001      	movs	r0, #1
 800ed8c:	f000 f9a6 	bl	800f0dc <xQueueGenericCreate>
 800ed90:	60f8      	str	r0, [r7, #12]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d005      	beq.n	800eda4 <osSemaphoreCreate+0x56>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f000 f9f6 	bl	800f190 <xQueueGenericSend>
      return sema;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	e000      	b.n	800edaa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800eda8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800edb2:	b480      	push	{r7}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f103 0208 	add.w	r2, r3, #8
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f04f 32ff 	mov.w	r2, #4294967295
 800edca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f103 0208 	add.w	r2, r3, #8
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f103 0208 	add.w	r2, r3, #8
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ede6:	bf00      	nop
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee00:	bf00      	nop
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	689a      	ldr	r2, [r3, #8]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	683a      	ldr	r2, [r7, #0]
 800ee30:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]
}
 800ee48:	bf00      	nop
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6a:	d103      	bne.n	800ee74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	60fb      	str	r3, [r7, #12]
 800ee72:	e00c      	b.n	800ee8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3308      	adds	r3, #8
 800ee78:	60fb      	str	r3, [r7, #12]
 800ee7a:	e002      	b.n	800ee82 <vListInsert+0x2e>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68ba      	ldr	r2, [r7, #8]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d2f6      	bcs.n	800ee7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	601a      	str	r2, [r3, #0]
}
 800eeba:	bf00      	nop
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eec6:	b480      	push	{r7}
 800eec8:	b085      	sub	sp, #20
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	691b      	ldr	r3, [r3, #16]
 800eed2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6892      	ldr	r2, [r2, #8]
 800eedc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	6852      	ldr	r2, [r2, #4]
 800eee6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d103      	bne.n	800eefa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	1e5a      	subs	r2, r3, #1
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3714      	adds	r7, #20
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
	...

0800ef1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ef42:	bf00      	nop
 800ef44:	e7fe      	b.n	800ef44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ef46:	f001 faf5 	bl	8010534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef52:	68f9      	ldr	r1, [r7, #12]
 800ef54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef56:	fb01 f303 	mul.w	r3, r1, r3
 800ef5a:	441a      	add	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef76:	3b01      	subs	r3, #1
 800ef78:	68f9      	ldr	r1, [r7, #12]
 800ef7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef7c:	fb01 f303 	mul.w	r3, r1, r3
 800ef80:	441a      	add	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	22ff      	movs	r2, #255	; 0xff
 800ef8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	22ff      	movs	r2, #255	; 0xff
 800ef92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d114      	bne.n	800efc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d01a      	beq.n	800efda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3310      	adds	r3, #16
 800efa8:	4618      	mov	r0, r3
 800efaa:	f000 fecd 	bl	800fd48 <xTaskRemoveFromEventList>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d012      	beq.n	800efda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800efb4:	4b0c      	ldr	r3, [pc, #48]	; (800efe8 <xQueueGenericReset+0xcc>)
 800efb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efba:	601a      	str	r2, [r3, #0]
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	e009      	b.n	800efda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3310      	adds	r3, #16
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fef1 	bl	800edb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	3324      	adds	r3, #36	; 0x24
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff feec 	bl	800edb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800efda:	f001 fadb 	bl	8010594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800efde:	2301      	movs	r3, #1
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	e000ed04 	.word	0xe000ed04

0800efec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800efec:	b580      	push	{r7, lr}
 800efee:	b08e      	sub	sp, #56	; 0x38
 800eff0:	af02      	add	r7, sp, #8
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
 800eff8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10a      	bne.n	800f016 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f004:	f383 8811 	msr	BASEPRI, r3
 800f008:	f3bf 8f6f 	isb	sy
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f012:	bf00      	nop
 800f014:	e7fe      	b.n	800f014 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10a      	bne.n	800f032 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d002      	beq.n	800f03e <xQueueGenericCreateStatic+0x52>
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d001      	beq.n	800f042 <xQueueGenericCreateStatic+0x56>
 800f03e:	2301      	movs	r3, #1
 800f040:	e000      	b.n	800f044 <xQueueGenericCreateStatic+0x58>
 800f042:	2300      	movs	r3, #0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10a      	bne.n	800f05e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	623b      	str	r3, [r7, #32]
}
 800f05a:	bf00      	nop
 800f05c:	e7fe      	b.n	800f05c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d102      	bne.n	800f06a <xQueueGenericCreateStatic+0x7e>
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d101      	bne.n	800f06e <xQueueGenericCreateStatic+0x82>
 800f06a:	2301      	movs	r3, #1
 800f06c:	e000      	b.n	800f070 <xQueueGenericCreateStatic+0x84>
 800f06e:	2300      	movs	r3, #0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d10a      	bne.n	800f08a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f078:	f383 8811 	msr	BASEPRI, r3
 800f07c:	f3bf 8f6f 	isb	sy
 800f080:	f3bf 8f4f 	dsb	sy
 800f084:	61fb      	str	r3, [r7, #28]
}
 800f086:	bf00      	nop
 800f088:	e7fe      	b.n	800f088 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f08a:	2348      	movs	r3, #72	; 0x48
 800f08c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	2b48      	cmp	r3, #72	; 0x48
 800f092:	d00a      	beq.n	800f0aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f098:	f383 8811 	msr	BASEPRI, r3
 800f09c:	f3bf 8f6f 	isb	sy
 800f0a0:	f3bf 8f4f 	dsb	sy
 800f0a4:	61bb      	str	r3, [r7, #24]
}
 800f0a6:	bf00      	nop
 800f0a8:	e7fe      	b.n	800f0a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f0aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00d      	beq.n	800f0d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	9300      	str	r3, [sp, #0]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	68b9      	ldr	r1, [r7, #8]
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f000 f83f 	bl	800f150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3730      	adds	r7, #48	; 0x30
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08a      	sub	sp, #40	; 0x28
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	4613      	mov	r3, r2
 800f0e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	613b      	str	r3, [r7, #16]
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	fb02 f303 	mul.w	r3, r2, r3
 800f10e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	3348      	adds	r3, #72	; 0x48
 800f114:	4618      	mov	r0, r3
 800f116:	f001 faef 	bl	80106f8 <pvPortMalloc>
 800f11a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d011      	beq.n	800f146 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	3348      	adds	r3, #72	; 0x48
 800f12a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f134:	79fa      	ldrb	r2, [r7, #7]
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4613      	mov	r3, r2
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 f805 	bl	800f150 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f146:	69bb      	ldr	r3, [r7, #24]
	}
 800f148:	4618      	mov	r0, r3
 800f14a:	3720      	adds	r7, #32
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
 800f15c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d103      	bne.n	800f16c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	69ba      	ldr	r2, [r7, #24]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	e002      	b.n	800f172 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f172:	69bb      	ldr	r3, [r7, #24]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f17e:	2101      	movs	r1, #1
 800f180:	69b8      	ldr	r0, [r7, #24]
 800f182:	f7ff fecb 	bl	800ef1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f186:	bf00      	nop
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b08e      	sub	sp, #56	; 0x38
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <xQueueGenericSend+0x32>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d103      	bne.n	800f1d0 <xQueueGenericSend+0x40>
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d101      	bne.n	800f1d4 <xQueueGenericSend+0x44>
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e000      	b.n	800f1d6 <xQueueGenericSend+0x46>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10a      	bne.n	800f1f0 <xQueueGenericSend+0x60>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f1ec:	bf00      	nop
 800f1ee:	e7fe      	b.n	800f1ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d103      	bne.n	800f1fe <xQueueGenericSend+0x6e>
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d101      	bne.n	800f202 <xQueueGenericSend+0x72>
 800f1fe:	2301      	movs	r3, #1
 800f200:	e000      	b.n	800f204 <xQueueGenericSend+0x74>
 800f202:	2300      	movs	r3, #0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10a      	bne.n	800f21e <xQueueGenericSend+0x8e>
	__asm volatile
 800f208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	623b      	str	r3, [r7, #32]
}
 800f21a:	bf00      	nop
 800f21c:	e7fe      	b.n	800f21c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f21e:	f000 ff4f 	bl	80100c0 <xTaskGetSchedulerState>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d102      	bne.n	800f22e <xQueueGenericSend+0x9e>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d101      	bne.n	800f232 <xQueueGenericSend+0xa2>
 800f22e:	2301      	movs	r3, #1
 800f230:	e000      	b.n	800f234 <xQueueGenericSend+0xa4>
 800f232:	2300      	movs	r3, #0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10a      	bne.n	800f24e <xQueueGenericSend+0xbe>
	__asm volatile
 800f238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23c:	f383 8811 	msr	BASEPRI, r3
 800f240:	f3bf 8f6f 	isb	sy
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	61fb      	str	r3, [r7, #28]
}
 800f24a:	bf00      	nop
 800f24c:	e7fe      	b.n	800f24c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f24e:	f001 f971 	bl	8010534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d302      	bcc.n	800f264 <xQueueGenericSend+0xd4>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	2b02      	cmp	r3, #2
 800f262:	d129      	bne.n	800f2b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	68b9      	ldr	r1, [r7, #8]
 800f268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f26a:	f000 f88f 	bl	800f38c <prvCopyDataToQueue>
 800f26e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f274:	2b00      	cmp	r3, #0
 800f276:	d010      	beq.n	800f29a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27a:	3324      	adds	r3, #36	; 0x24
 800f27c:	4618      	mov	r0, r3
 800f27e:	f000 fd63 	bl	800fd48 <xTaskRemoveFromEventList>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d013      	beq.n	800f2b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f288:	4b3f      	ldr	r3, [pc, #252]	; (800f388 <xQueueGenericSend+0x1f8>)
 800f28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f28e:	601a      	str	r2, [r3, #0]
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	e00a      	b.n	800f2b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d007      	beq.n	800f2b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f2a0:	4b39      	ldr	r3, [pc, #228]	; (800f388 <xQueueGenericSend+0x1f8>)
 800f2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2a6:	601a      	str	r2, [r3, #0]
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f2b0:	f001 f970 	bl	8010594 <vPortExitCritical>
				return pdPASS;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e063      	b.n	800f380 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d103      	bne.n	800f2c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f2be:	f001 f969 	bl	8010594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	e05c      	b.n	800f380 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2cc:	f107 0314 	add.w	r3, r7, #20
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 fd9b 	bl	800fe0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2da:	f001 f95b 	bl	8010594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2de:	f000 fb51 	bl	800f984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2e2:	f001 f927 	bl	8010534 <vPortEnterCritical>
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2ec:	b25b      	sxtb	r3, r3
 800f2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2f2:	d103      	bne.n	800f2fc <xQueueGenericSend+0x16c>
 800f2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f302:	b25b      	sxtb	r3, r3
 800f304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f308:	d103      	bne.n	800f312 <xQueueGenericSend+0x182>
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f312:	f001 f93f 	bl	8010594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f316:	1d3a      	adds	r2, r7, #4
 800f318:	f107 0314 	add.w	r3, r7, #20
 800f31c:	4611      	mov	r1, r2
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fd8a 	bl	800fe38 <xTaskCheckForTimeOut>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d124      	bne.n	800f374 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f32a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f32c:	f000 f8ea 	bl	800f504 <prvIsQueueFull>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d018      	beq.n	800f368 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f338:	3310      	adds	r3, #16
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fcde 	bl	800fd00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f346:	f000 f88b 	bl	800f460 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f34a:	f000 fb29 	bl	800f9a0 <xTaskResumeAll>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	f47f af7c 	bne.w	800f24e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <xQueueGenericSend+0x1f8>)
 800f358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	e772      	b.n	800f24e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f36a:	f000 f879 	bl	800f460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f36e:	f000 fb17 	bl	800f9a0 <xTaskResumeAll>
 800f372:	e76c      	b.n	800f24e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f376:	f000 f873 	bl	800f460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f37a:	f000 fb11 	bl	800f9a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f37e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f380:	4618      	mov	r0, r3
 800f382:	3738      	adds	r7, #56	; 0x38
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	e000ed04 	.word	0xe000ed04

0800f38c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f398:	2300      	movs	r3, #0
 800f39a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d10d      	bne.n	800f3c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d14d      	bne.n	800f44e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 fea0 	bl	80100fc <xTaskPriorityDisinherit>
 800f3bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	609a      	str	r2, [r3, #8]
 800f3c4:	e043      	b.n	800f44e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d119      	bne.n	800f400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6858      	ldr	r0, [r3, #4]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	68b9      	ldr	r1, [r7, #8]
 800f3d8:	f004 fb9a 	bl	8013b10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e4:	441a      	add	r2, r3
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d32b      	bcc.n	800f44e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	605a      	str	r2, [r3, #4]
 800f3fe:	e026      	b.n	800f44e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	68d8      	ldr	r0, [r3, #12]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f408:	461a      	mov	r2, r3
 800f40a:	68b9      	ldr	r1, [r7, #8]
 800f40c:	f004 fb80 	bl	8013b10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f418:	425b      	negs	r3, r3
 800f41a:	441a      	add	r2, r3
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	68da      	ldr	r2, [r3, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d207      	bcs.n	800f43c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	689a      	ldr	r2, [r3, #8]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f434:	425b      	negs	r3, r3
 800f436:	441a      	add	r2, r3
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d105      	bne.n	800f44e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	1c5a      	adds	r2, r3, #1
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f456:	697b      	ldr	r3, [r7, #20]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f468:	f001 f864 	bl	8010534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f472:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f474:	e011      	b.n	800f49a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d012      	beq.n	800f4a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3324      	adds	r3, #36	; 0x24
 800f482:	4618      	mov	r0, r3
 800f484:	f000 fc60 	bl	800fd48 <xTaskRemoveFromEventList>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d001      	beq.n	800f492 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f48e:	f000 fd35 	bl	800fefc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f492:	7bfb      	ldrb	r3, [r7, #15]
 800f494:	3b01      	subs	r3, #1
 800f496:	b2db      	uxtb	r3, r3
 800f498:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	dce9      	bgt.n	800f476 <prvUnlockQueue+0x16>
 800f4a2:	e000      	b.n	800f4a6 <prvUnlockQueue+0x46>
					break;
 800f4a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	22ff      	movs	r2, #255	; 0xff
 800f4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f4ae:	f001 f871 	bl	8010594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f4b2:	f001 f83f 	bl	8010534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4be:	e011      	b.n	800f4e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	691b      	ldr	r3, [r3, #16]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d012      	beq.n	800f4ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3310      	adds	r3, #16
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 fc3b 	bl	800fd48 <xTaskRemoveFromEventList>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d001      	beq.n	800f4dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4d8:	f000 fd10 	bl	800fefc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	dce9      	bgt.n	800f4c0 <prvUnlockQueue+0x60>
 800f4ec:	e000      	b.n	800f4f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	22ff      	movs	r2, #255	; 0xff
 800f4f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4f8:	f001 f84c 	bl	8010594 <vPortExitCritical>
}
 800f4fc:	bf00      	nop
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f50c:	f001 f812 	bl	8010534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f518:	429a      	cmp	r2, r3
 800f51a:	d102      	bne.n	800f522 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f51c:	2301      	movs	r3, #1
 800f51e:	60fb      	str	r3, [r7, #12]
 800f520:	e001      	b.n	800f526 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f522:	2300      	movs	r3, #0
 800f524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f526:	f001 f835 	bl	8010594 <vPortExitCritical>

	return xReturn;
 800f52a:	68fb      	ldr	r3, [r7, #12]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f534:	b580      	push	{r7, lr}
 800f536:	b08e      	sub	sp, #56	; 0x38
 800f538:	af04      	add	r7, sp, #16
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
 800f540:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10a      	bne.n	800f55e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	623b      	str	r3, [r7, #32]
}
 800f55a:	bf00      	nop
 800f55c:	e7fe      	b.n	800f55c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10a      	bne.n	800f57a <xTaskCreateStatic+0x46>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	61fb      	str	r3, [r7, #28]
}
 800f576:	bf00      	nop
 800f578:	e7fe      	b.n	800f578 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f57a:	2354      	movs	r3, #84	; 0x54
 800f57c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	2b54      	cmp	r3, #84	; 0x54
 800f582:	d00a      	beq.n	800f59a <xTaskCreateStatic+0x66>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	61bb      	str	r3, [r7, #24]
}
 800f596:	bf00      	nop
 800f598:	e7fe      	b.n	800f598 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f59a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d01e      	beq.n	800f5e0 <xTaskCreateStatic+0xac>
 800f5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d01b      	beq.n	800f5e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	9303      	str	r3, [sp, #12]
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	9302      	str	r3, [sp, #8]
 800f5c2:	f107 0314 	add.w	r3, r7, #20
 800f5c6:	9301      	str	r3, [sp, #4]
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	68b9      	ldr	r1, [r7, #8]
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 f850 	bl	800f678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5da:	f000 f8d5 	bl	800f788 <prvAddNewTaskToReadyList>
 800f5de:	e001      	b.n	800f5e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f5e4:	697b      	ldr	r3, [r7, #20]
	}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3728      	adds	r7, #40	; 0x28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b08c      	sub	sp, #48	; 0x30
 800f5f2:	af04      	add	r7, sp, #16
 800f5f4:	60f8      	str	r0, [r7, #12]
 800f5f6:	60b9      	str	r1, [r7, #8]
 800f5f8:	603b      	str	r3, [r7, #0]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f5fe:	88fb      	ldrh	r3, [r7, #6]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	4618      	mov	r0, r3
 800f604:	f001 f878 	bl	80106f8 <pvPortMalloc>
 800f608:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00e      	beq.n	800f62e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f610:	2054      	movs	r0, #84	; 0x54
 800f612:	f001 f871 	bl	80106f8 <pvPortMalloc>
 800f616:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	631a      	str	r2, [r3, #48]	; 0x30
 800f624:	e005      	b.n	800f632 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f626:	6978      	ldr	r0, [r7, #20]
 800f628:	f001 f932 	bl	8010890 <vPortFree>
 800f62c:	e001      	b.n	800f632 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f62e:	2300      	movs	r3, #0
 800f630:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d017      	beq.n	800f668 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f638:	69fb      	ldr	r3, [r7, #28]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f640:	88fa      	ldrh	r2, [r7, #6]
 800f642:	2300      	movs	r3, #0
 800f644:	9303      	str	r3, [sp, #12]
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	9302      	str	r3, [sp, #8]
 800f64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	9300      	str	r3, [sp, #0]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	f000 f80e 	bl	800f678 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f65c:	69f8      	ldr	r0, [r7, #28]
 800f65e:	f000 f893 	bl	800f788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f662:	2301      	movs	r3, #1
 800f664:	61bb      	str	r3, [r7, #24]
 800f666:	e002      	b.n	800f66e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f668:	f04f 33ff 	mov.w	r3, #4294967295
 800f66c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f66e:	69bb      	ldr	r3, [r7, #24]
	}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b088      	sub	sp, #32
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
 800f684:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f690:	3b01      	subs	r3, #1
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	f023 0307 	bic.w	r3, r3, #7
 800f69e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f6a0:	69bb      	ldr	r3, [r7, #24]
 800f6a2:	f003 0307 	and.w	r3, r3, #7
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00a      	beq.n	800f6c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	617b      	str	r3, [r7, #20]
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d01f      	beq.n	800f706 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	61fb      	str	r3, [r7, #28]
 800f6ca:	e012      	b.n	800f6f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	7819      	ldrb	r1, [r3, #0]
 800f6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	4413      	add	r3, r2
 800f6da:	3334      	adds	r3, #52	; 0x34
 800f6dc:	460a      	mov	r2, r1
 800f6de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d006      	beq.n	800f6fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	61fb      	str	r3, [r7, #28]
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	2b0f      	cmp	r3, #15
 800f6f6:	d9e9      	bls.n	800f6cc <prvInitialiseNewTask+0x54>
 800f6f8:	e000      	b.n	800f6fc <prvInitialiseNewTask+0x84>
			{
				break;
 800f6fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f704:	e003      	b.n	800f70e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f710:	2b06      	cmp	r3, #6
 800f712:	d901      	bls.n	800f718 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f714:	2306      	movs	r3, #6
 800f716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f71c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f722:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f726:	2200      	movs	r2, #0
 800f728:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	3304      	adds	r3, #4
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff fb5f 	bl	800edf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	3318      	adds	r3, #24
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fb5a 	bl	800edf2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f746:	f1c3 0207 	rsb	r2, r3, #7
 800f74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f756:	2200      	movs	r2, #0
 800f758:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	2200      	movs	r2, #0
 800f75e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f762:	683a      	ldr	r2, [r7, #0]
 800f764:	68f9      	ldr	r1, [r7, #12]
 800f766:	69b8      	ldr	r0, [r7, #24]
 800f768:	f000 fdb4 	bl	80102d4 <pxPortInitialiseStack>
 800f76c:	4602      	mov	r2, r0
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f77c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f77e:	bf00      	nop
 800f780:	3720      	adds	r7, #32
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
	...

0800f788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f790:	f000 fed0 	bl	8010534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f794:	4b2a      	ldr	r3, [pc, #168]	; (800f840 <prvAddNewTaskToReadyList+0xb8>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	3301      	adds	r3, #1
 800f79a:	4a29      	ldr	r2, [pc, #164]	; (800f840 <prvAddNewTaskToReadyList+0xb8>)
 800f79c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f79e:	4b29      	ldr	r3, [pc, #164]	; (800f844 <prvAddNewTaskToReadyList+0xbc>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f7a6:	4a27      	ldr	r2, [pc, #156]	; (800f844 <prvAddNewTaskToReadyList+0xbc>)
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7ac:	4b24      	ldr	r3, [pc, #144]	; (800f840 <prvAddNewTaskToReadyList+0xb8>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d110      	bne.n	800f7d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f7b4:	f000 fbc6 	bl	800ff44 <prvInitialiseTaskLists>
 800f7b8:	e00d      	b.n	800f7d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f7ba:	4b23      	ldr	r3, [pc, #140]	; (800f848 <prvAddNewTaskToReadyList+0xc0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d109      	bne.n	800f7d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f7c2:	4b20      	ldr	r3, [pc, #128]	; (800f844 <prvAddNewTaskToReadyList+0xbc>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d802      	bhi.n	800f7d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f7d0:	4a1c      	ldr	r2, [pc, #112]	; (800f844 <prvAddNewTaskToReadyList+0xbc>)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f7d6:	4b1d      	ldr	r3, [pc, #116]	; (800f84c <prvAddNewTaskToReadyList+0xc4>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	4a1b      	ldr	r2, [pc, #108]	; (800f84c <prvAddNewTaskToReadyList+0xc4>)
 800f7de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	409a      	lsls	r2, r3
 800f7e8:	4b19      	ldr	r3, [pc, #100]	; (800f850 <prvAddNewTaskToReadyList+0xc8>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	4a18      	ldr	r2, [pc, #96]	; (800f850 <prvAddNewTaskToReadyList+0xc8>)
 800f7f0:	6013      	str	r3, [r2, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4a15      	ldr	r2, [pc, #84]	; (800f854 <prvAddNewTaskToReadyList+0xcc>)
 800f800:	441a      	add	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3304      	adds	r3, #4
 800f806:	4619      	mov	r1, r3
 800f808:	4610      	mov	r0, r2
 800f80a:	f7ff faff 	bl	800ee0c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f80e:	f000 fec1 	bl	8010594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f812:	4b0d      	ldr	r3, [pc, #52]	; (800f848 <prvAddNewTaskToReadyList+0xc0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00e      	beq.n	800f838 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f81a:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <prvAddNewTaskToReadyList+0xbc>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f824:	429a      	cmp	r2, r3
 800f826:	d207      	bcs.n	800f838 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f828:	4b0b      	ldr	r3, [pc, #44]	; (800f858 <prvAddNewTaskToReadyList+0xd0>)
 800f82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f838:	bf00      	nop
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	20004bec 	.word	0x20004bec
 800f844:	20004aec 	.word	0x20004aec
 800f848:	20004bf8 	.word	0x20004bf8
 800f84c:	20004c08 	.word	0x20004c08
 800f850:	20004bf4 	.word	0x20004bf4
 800f854:	20004af0 	.word	0x20004af0
 800f858:	e000ed04 	.word	0xe000ed04

0800f85c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f864:	2300      	movs	r3, #0
 800f866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d017      	beq.n	800f89e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f86e:	4b13      	ldr	r3, [pc, #76]	; (800f8bc <vTaskDelay+0x60>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00a      	beq.n	800f88c <vTaskDelay+0x30>
	__asm volatile
 800f876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87a:	f383 8811 	msr	BASEPRI, r3
 800f87e:	f3bf 8f6f 	isb	sy
 800f882:	f3bf 8f4f 	dsb	sy
 800f886:	60bb      	str	r3, [r7, #8]
}
 800f888:	bf00      	nop
 800f88a:	e7fe      	b.n	800f88a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f88c:	f000 f87a 	bl	800f984 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f890:	2100      	movs	r1, #0
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fcb8 	bl	8010208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f898:	f000 f882 	bl	800f9a0 <xTaskResumeAll>
 800f89c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d107      	bne.n	800f8b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8a4:	4b06      	ldr	r3, [pc, #24]	; (800f8c0 <vTaskDelay+0x64>)
 800f8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8b4:	bf00      	nop
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20004c14 	.word	0x20004c14
 800f8c0:	e000ed04 	.word	0xe000ed04

0800f8c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b08a      	sub	sp, #40	; 0x28
 800f8c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8d2:	463a      	mov	r2, r7
 800f8d4:	1d39      	adds	r1, r7, #4
 800f8d6:	f107 0308 	add.w	r3, r7, #8
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7f0 fe88 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f8e0:	6839      	ldr	r1, [r7, #0]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	9202      	str	r2, [sp, #8]
 800f8e8:	9301      	str	r3, [sp, #4]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	460a      	mov	r2, r1
 800f8f2:	491e      	ldr	r1, [pc, #120]	; (800f96c <vTaskStartScheduler+0xa8>)
 800f8f4:	481e      	ldr	r0, [pc, #120]	; (800f970 <vTaskStartScheduler+0xac>)
 800f8f6:	f7ff fe1d 	bl	800f534 <xTaskCreateStatic>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	4a1d      	ldr	r2, [pc, #116]	; (800f974 <vTaskStartScheduler+0xb0>)
 800f8fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f900:	4b1c      	ldr	r3, [pc, #112]	; (800f974 <vTaskStartScheduler+0xb0>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d002      	beq.n	800f90e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f908:	2301      	movs	r3, #1
 800f90a:	617b      	str	r3, [r7, #20]
 800f90c:	e001      	b.n	800f912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f90e:	2300      	movs	r3, #0
 800f910:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	2b01      	cmp	r3, #1
 800f916:	d116      	bne.n	800f946 <vTaskStartScheduler+0x82>
	__asm volatile
 800f918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	613b      	str	r3, [r7, #16]
}
 800f92a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f92c:	4b12      	ldr	r3, [pc, #72]	; (800f978 <vTaskStartScheduler+0xb4>)
 800f92e:	f04f 32ff 	mov.w	r2, #4294967295
 800f932:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f934:	4b11      	ldr	r3, [pc, #68]	; (800f97c <vTaskStartScheduler+0xb8>)
 800f936:	2201      	movs	r2, #1
 800f938:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f93a:	4b11      	ldr	r3, [pc, #68]	; (800f980 <vTaskStartScheduler+0xbc>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f940:	f000 fd56 	bl	80103f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f944:	e00e      	b.n	800f964 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f94c:	d10a      	bne.n	800f964 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	60fb      	str	r3, [r7, #12]
}
 800f960:	bf00      	nop
 800f962:	e7fe      	b.n	800f962 <vTaskStartScheduler+0x9e>
}
 800f964:	bf00      	nop
 800f966:	3718      	adds	r7, #24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	08013ba8 	.word	0x08013ba8
 800f970:	0800ff15 	.word	0x0800ff15
 800f974:	20004c10 	.word	0x20004c10
 800f978:	20004c0c 	.word	0x20004c0c
 800f97c:	20004bf8 	.word	0x20004bf8
 800f980:	20004bf0 	.word	0x20004bf0

0800f984 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f984:	b480      	push	{r7}
 800f986:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f988:	4b04      	ldr	r3, [pc, #16]	; (800f99c <vTaskSuspendAll+0x18>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	3301      	adds	r3, #1
 800f98e:	4a03      	ldr	r2, [pc, #12]	; (800f99c <vTaskSuspendAll+0x18>)
 800f990:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f992:	bf00      	nop
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr
 800f99c:	20004c14 	.word	0x20004c14

0800f9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9ae:	4b41      	ldr	r3, [pc, #260]	; (800fab4 <xTaskResumeAll+0x114>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10a      	bne.n	800f9cc <xTaskResumeAll+0x2c>
	__asm volatile
 800f9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ba:	f383 8811 	msr	BASEPRI, r3
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	f3bf 8f4f 	dsb	sy
 800f9c6:	603b      	str	r3, [r7, #0]
}
 800f9c8:	bf00      	nop
 800f9ca:	e7fe      	b.n	800f9ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f9cc:	f000 fdb2 	bl	8010534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f9d0:	4b38      	ldr	r3, [pc, #224]	; (800fab4 <xTaskResumeAll+0x114>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	3b01      	subs	r3, #1
 800f9d6:	4a37      	ldr	r2, [pc, #220]	; (800fab4 <xTaskResumeAll+0x114>)
 800f9d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9da:	4b36      	ldr	r3, [pc, #216]	; (800fab4 <xTaskResumeAll+0x114>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d161      	bne.n	800faa6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9e2:	4b35      	ldr	r3, [pc, #212]	; (800fab8 <xTaskResumeAll+0x118>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d05d      	beq.n	800faa6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9ea:	e02e      	b.n	800fa4a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ec:	4b33      	ldr	r3, [pc, #204]	; (800fabc <xTaskResumeAll+0x11c>)
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	3318      	adds	r3, #24
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff fa64 	bl	800eec6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3304      	adds	r3, #4
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff fa5f 	bl	800eec6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	409a      	lsls	r2, r3
 800fa10:	4b2b      	ldr	r3, [pc, #172]	; (800fac0 <xTaskResumeAll+0x120>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	4a2a      	ldr	r2, [pc, #168]	; (800fac0 <xTaskResumeAll+0x120>)
 800fa18:	6013      	str	r3, [r2, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa1e:	4613      	mov	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4a27      	ldr	r2, [pc, #156]	; (800fac4 <xTaskResumeAll+0x124>)
 800fa28:	441a      	add	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4610      	mov	r0, r2
 800fa32:	f7ff f9eb 	bl	800ee0c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa3a:	4b23      	ldr	r3, [pc, #140]	; (800fac8 <xTaskResumeAll+0x128>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d302      	bcc.n	800fa4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fa44:	4b21      	ldr	r3, [pc, #132]	; (800facc <xTaskResumeAll+0x12c>)
 800fa46:	2201      	movs	r2, #1
 800fa48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa4a:	4b1c      	ldr	r3, [pc, #112]	; (800fabc <xTaskResumeAll+0x11c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1cc      	bne.n	800f9ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa58:	f000 fb12 	bl	8010080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa5c:	4b1c      	ldr	r3, [pc, #112]	; (800fad0 <xTaskResumeAll+0x130>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d010      	beq.n	800fa8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fa68:	f000 f836 	bl	800fad8 <xTaskIncrementTick>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fa72:	4b16      	ldr	r3, [pc, #88]	; (800facc <xTaskResumeAll+0x12c>)
 800fa74:	2201      	movs	r2, #1
 800fa76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d1f1      	bne.n	800fa68 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fa84:	4b12      	ldr	r3, [pc, #72]	; (800fad0 <xTaskResumeAll+0x130>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa8a:	4b10      	ldr	r3, [pc, #64]	; (800facc <xTaskResumeAll+0x12c>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa92:	2301      	movs	r3, #1
 800fa94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa96:	4b0f      	ldr	r3, [pc, #60]	; (800fad4 <xTaskResumeAll+0x134>)
 800fa98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800faa6:	f000 fd75 	bl	8010594 <vPortExitCritical>

	return xAlreadyYielded;
 800faaa:	68bb      	ldr	r3, [r7, #8]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20004c14 	.word	0x20004c14
 800fab8:	20004bec 	.word	0x20004bec
 800fabc:	20004bac 	.word	0x20004bac
 800fac0:	20004bf4 	.word	0x20004bf4
 800fac4:	20004af0 	.word	0x20004af0
 800fac8:	20004aec 	.word	0x20004aec
 800facc:	20004c00 	.word	0x20004c00
 800fad0:	20004bfc 	.word	0x20004bfc
 800fad4:	e000ed04 	.word	0xe000ed04

0800fad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fade:	2300      	movs	r3, #0
 800fae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae2:	4b4e      	ldr	r3, [pc, #312]	; (800fc1c <xTaskIncrementTick+0x144>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f040 808e 	bne.w	800fc08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800faec:	4b4c      	ldr	r3, [pc, #304]	; (800fc20 <xTaskIncrementTick+0x148>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800faf4:	4a4a      	ldr	r2, [pc, #296]	; (800fc20 <xTaskIncrementTick+0x148>)
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d120      	bne.n	800fb42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb00:	4b48      	ldr	r3, [pc, #288]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00a      	beq.n	800fb20 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	603b      	str	r3, [r7, #0]
}
 800fb1c:	bf00      	nop
 800fb1e:	e7fe      	b.n	800fb1e <xTaskIncrementTick+0x46>
 800fb20:	4b40      	ldr	r3, [pc, #256]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	60fb      	str	r3, [r7, #12]
 800fb26:	4b40      	ldr	r3, [pc, #256]	; (800fc28 <xTaskIncrementTick+0x150>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4a3e      	ldr	r2, [pc, #248]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	4a3e      	ldr	r2, [pc, #248]	; (800fc28 <xTaskIncrementTick+0x150>)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6013      	str	r3, [r2, #0]
 800fb34:	4b3d      	ldr	r3, [pc, #244]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	4a3c      	ldr	r2, [pc, #240]	; (800fc2c <xTaskIncrementTick+0x154>)
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	f000 fa9f 	bl	8010080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fb42:	4b3b      	ldr	r3, [pc, #236]	; (800fc30 <xTaskIncrementTick+0x158>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d348      	bcc.n	800fbde <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb4c:	4b35      	ldr	r3, [pc, #212]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d104      	bne.n	800fb60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb56:	4b36      	ldr	r3, [pc, #216]	; (800fc30 <xTaskIncrementTick+0x158>)
 800fb58:	f04f 32ff 	mov.w	r2, #4294967295
 800fb5c:	601a      	str	r2, [r3, #0]
					break;
 800fb5e:	e03e      	b.n	800fbde <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb60:	4b30      	ldr	r3, [pc, #192]	; (800fc24 <xTaskIncrementTick+0x14c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	68db      	ldr	r3, [r3, #12]
 800fb68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb70:	693a      	ldr	r2, [r7, #16]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d203      	bcs.n	800fb80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb78:	4a2d      	ldr	r2, [pc, #180]	; (800fc30 <xTaskIncrementTick+0x158>)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb7e:	e02e      	b.n	800fbde <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	3304      	adds	r3, #4
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff f99e 	bl	800eec6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	3318      	adds	r3, #24
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7ff f995 	bl	800eec6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	2201      	movs	r2, #1
 800fba2:	409a      	lsls	r2, r3
 800fba4:	4b23      	ldr	r3, [pc, #140]	; (800fc34 <xTaskIncrementTick+0x15c>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	4a22      	ldr	r2, [pc, #136]	; (800fc34 <xTaskIncrementTick+0x15c>)
 800fbac:	6013      	str	r3, [r2, #0]
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb2:	4613      	mov	r3, r2
 800fbb4:	009b      	lsls	r3, r3, #2
 800fbb6:	4413      	add	r3, r2
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	4a1f      	ldr	r2, [pc, #124]	; (800fc38 <xTaskIncrementTick+0x160>)
 800fbbc:	441a      	add	r2, r3
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	3304      	adds	r3, #4
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	4610      	mov	r0, r2
 800fbc6:	f7ff f921 	bl	800ee0c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbce:	4b1b      	ldr	r3, [pc, #108]	; (800fc3c <xTaskIncrementTick+0x164>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d3b9      	bcc.n	800fb4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fbd8:	2301      	movs	r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbdc:	e7b6      	b.n	800fb4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fbde:	4b17      	ldr	r3, [pc, #92]	; (800fc3c <xTaskIncrementTick+0x164>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe4:	4914      	ldr	r1, [pc, #80]	; (800fc38 <xTaskIncrementTick+0x160>)
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4413      	add	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	440b      	add	r3, r1
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d901      	bls.n	800fbfa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fbfa:	4b11      	ldr	r3, [pc, #68]	; (800fc40 <xTaskIncrementTick+0x168>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d007      	beq.n	800fc12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fc02:	2301      	movs	r3, #1
 800fc04:	617b      	str	r3, [r7, #20]
 800fc06:	e004      	b.n	800fc12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc08:	4b0e      	ldr	r3, [pc, #56]	; (800fc44 <xTaskIncrementTick+0x16c>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	4a0d      	ldr	r2, [pc, #52]	; (800fc44 <xTaskIncrementTick+0x16c>)
 800fc10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc12:	697b      	ldr	r3, [r7, #20]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3718      	adds	r7, #24
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	20004c14 	.word	0x20004c14
 800fc20:	20004bf0 	.word	0x20004bf0
 800fc24:	20004ba4 	.word	0x20004ba4
 800fc28:	20004ba8 	.word	0x20004ba8
 800fc2c:	20004c04 	.word	0x20004c04
 800fc30:	20004c0c 	.word	0x20004c0c
 800fc34:	20004bf4 	.word	0x20004bf4
 800fc38:	20004af0 	.word	0x20004af0
 800fc3c:	20004aec 	.word	0x20004aec
 800fc40:	20004c00 	.word	0x20004c00
 800fc44:	20004bfc 	.word	0x20004bfc

0800fc48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b087      	sub	sp, #28
 800fc4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fc4e:	4b27      	ldr	r3, [pc, #156]	; (800fcec <vTaskSwitchContext+0xa4>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d003      	beq.n	800fc5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fc56:	4b26      	ldr	r3, [pc, #152]	; (800fcf0 <vTaskSwitchContext+0xa8>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc5c:	e03f      	b.n	800fcde <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fc5e:	4b24      	ldr	r3, [pc, #144]	; (800fcf0 <vTaskSwitchContext+0xa8>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc64:	4b23      	ldr	r3, [pc, #140]	; (800fcf4 <vTaskSwitchContext+0xac>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	fab3 f383 	clz	r3, r3
 800fc70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fc72:	7afb      	ldrb	r3, [r7, #11]
 800fc74:	f1c3 031f 	rsb	r3, r3, #31
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	491f      	ldr	r1, [pc, #124]	; (800fcf8 <vTaskSwitchContext+0xb0>)
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	4613      	mov	r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	4413      	add	r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	440b      	add	r3, r1
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10a      	bne.n	800fca4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	607b      	str	r3, [r7, #4]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <vTaskSwitchContext+0x5a>
 800fca4:	697a      	ldr	r2, [r7, #20]
 800fca6:	4613      	mov	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4a12      	ldr	r2, [pc, #72]	; (800fcf8 <vTaskSwitchContext+0xb0>)
 800fcb0:	4413      	add	r3, r2
 800fcb2:	613b      	str	r3, [r7, #16]
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	685a      	ldr	r2, [r3, #4]
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	605a      	str	r2, [r3, #4]
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	3308      	adds	r3, #8
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d104      	bne.n	800fcd4 <vTaskSwitchContext+0x8c>
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	685a      	ldr	r2, [r3, #4]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	605a      	str	r2, [r3, #4]
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	68db      	ldr	r3, [r3, #12]
 800fcda:	4a08      	ldr	r2, [pc, #32]	; (800fcfc <vTaskSwitchContext+0xb4>)
 800fcdc:	6013      	str	r3, [r2, #0]
}
 800fcde:	bf00      	nop
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	20004c14 	.word	0x20004c14
 800fcf0:	20004c00 	.word	0x20004c00
 800fcf4:	20004bf4 	.word	0x20004bf4
 800fcf8:	20004af0 	.word	0x20004af0
 800fcfc:	20004aec 	.word	0x20004aec

0800fd00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10a      	bne.n	800fd26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	60fb      	str	r3, [r7, #12]
}
 800fd22:	bf00      	nop
 800fd24:	e7fe      	b.n	800fd24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd26:	4b07      	ldr	r3, [pc, #28]	; (800fd44 <vTaskPlaceOnEventList+0x44>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3318      	adds	r3, #24
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f7ff f890 	bl	800ee54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd34:	2101      	movs	r1, #1
 800fd36:	6838      	ldr	r0, [r7, #0]
 800fd38:	f000 fa66 	bl	8010208 <prvAddCurrentTaskToDelayedList>
}
 800fd3c:	bf00      	nop
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	20004aec 	.word	0x20004aec

0800fd48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b086      	sub	sp, #24
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d10a      	bne.n	800fd74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	60fb      	str	r3, [r7, #12]
}
 800fd70:	bf00      	nop
 800fd72:	e7fe      	b.n	800fd72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	3318      	adds	r3, #24
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7ff f8a4 	bl	800eec6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd7e:	4b1d      	ldr	r3, [pc, #116]	; (800fdf4 <xTaskRemoveFromEventList+0xac>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d11c      	bne.n	800fdc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	3304      	adds	r3, #4
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff f89b 	bl	800eec6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd94:	2201      	movs	r2, #1
 800fd96:	409a      	lsls	r2, r3
 800fd98:	4b17      	ldr	r3, [pc, #92]	; (800fdf8 <xTaskRemoveFromEventList+0xb0>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	4a16      	ldr	r2, [pc, #88]	; (800fdf8 <xTaskRemoveFromEventList+0xb0>)
 800fda0:	6013      	str	r3, [r2, #0]
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda6:	4613      	mov	r3, r2
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	4a13      	ldr	r2, [pc, #76]	; (800fdfc <xTaskRemoveFromEventList+0xb4>)
 800fdb0:	441a      	add	r2, r3
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	4610      	mov	r0, r2
 800fdba:	f7ff f827 	bl	800ee0c <vListInsertEnd>
 800fdbe:	e005      	b.n	800fdcc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	3318      	adds	r3, #24
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	480e      	ldr	r0, [pc, #56]	; (800fe00 <xTaskRemoveFromEventList+0xb8>)
 800fdc8:	f7ff f820 	bl	800ee0c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4b0c      	ldr	r3, [pc, #48]	; (800fe04 <xTaskRemoveFromEventList+0xbc>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d905      	bls.n	800fde6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fdda:	2301      	movs	r3, #1
 800fddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fdde:	4b0a      	ldr	r3, [pc, #40]	; (800fe08 <xTaskRemoveFromEventList+0xc0>)
 800fde0:	2201      	movs	r2, #1
 800fde2:	601a      	str	r2, [r3, #0]
 800fde4:	e001      	b.n	800fdea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fde6:	2300      	movs	r3, #0
 800fde8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fdea:	697b      	ldr	r3, [r7, #20]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3718      	adds	r7, #24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	20004c14 	.word	0x20004c14
 800fdf8:	20004bf4 	.word	0x20004bf4
 800fdfc:	20004af0 	.word	0x20004af0
 800fe00:	20004bac 	.word	0x20004bac
 800fe04:	20004aec 	.word	0x20004aec
 800fe08:	20004c00 	.word	0x20004c00

0800fe0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe14:	4b06      	ldr	r3, [pc, #24]	; (800fe30 <vTaskInternalSetTimeOutState+0x24>)
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fe1c:	4b05      	ldr	r3, [pc, #20]	; (800fe34 <vTaskInternalSetTimeOutState+0x28>)
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	605a      	str	r2, [r3, #4]
}
 800fe24:	bf00      	nop
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	20004c04 	.word	0x20004c04
 800fe34:	20004bf0 	.word	0x20004bf0

0800fe38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b088      	sub	sp, #32
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d10a      	bne.n	800fe5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fe48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4c:	f383 8811 	msr	BASEPRI, r3
 800fe50:	f3bf 8f6f 	isb	sy
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	613b      	str	r3, [r7, #16]
}
 800fe5a:	bf00      	nop
 800fe5c:	e7fe      	b.n	800fe5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d10a      	bne.n	800fe7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fe64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe68:	f383 8811 	msr	BASEPRI, r3
 800fe6c:	f3bf 8f6f 	isb	sy
 800fe70:	f3bf 8f4f 	dsb	sy
 800fe74:	60fb      	str	r3, [r7, #12]
}
 800fe76:	bf00      	nop
 800fe78:	e7fe      	b.n	800fe78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fe7a:	f000 fb5b 	bl	8010534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fe7e:	4b1d      	ldr	r3, [pc, #116]	; (800fef4 <xTaskCheckForTimeOut+0xbc>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	69ba      	ldr	r2, [r7, #24]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe96:	d102      	bne.n	800fe9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	e023      	b.n	800fee6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	4b15      	ldr	r3, [pc, #84]	; (800fef8 <xTaskCheckForTimeOut+0xc0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d007      	beq.n	800feba <xTaskCheckForTimeOut+0x82>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d302      	bcc.n	800feba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800feb4:	2301      	movs	r3, #1
 800feb6:	61fb      	str	r3, [r7, #28]
 800feb8:	e015      	b.n	800fee6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d20b      	bcs.n	800fedc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	1ad2      	subs	r2, r2, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7ff ff9b 	bl	800fe0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fed6:	2300      	movs	r3, #0
 800fed8:	61fb      	str	r3, [r7, #28]
 800feda:	e004      	b.n	800fee6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2200      	movs	r2, #0
 800fee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fee2:	2301      	movs	r3, #1
 800fee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fee6:	f000 fb55 	bl	8010594 <vPortExitCritical>

	return xReturn;
 800feea:	69fb      	ldr	r3, [r7, #28]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3720      	adds	r7, #32
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	20004bf0 	.word	0x20004bf0
 800fef8:	20004c04 	.word	0x20004c04

0800fefc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fefc:	b480      	push	{r7}
 800fefe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff00:	4b03      	ldr	r3, [pc, #12]	; (800ff10 <vTaskMissedYield+0x14>)
 800ff02:	2201      	movs	r2, #1
 800ff04:	601a      	str	r2, [r3, #0]
}
 800ff06:	bf00      	nop
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr
 800ff10:	20004c00 	.word	0x20004c00

0800ff14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ff1c:	f000 f852 	bl	800ffc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ff20:	4b06      	ldr	r3, [pc, #24]	; (800ff3c <prvIdleTask+0x28>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d9f9      	bls.n	800ff1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ff28:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <prvIdleTask+0x2c>)
 800ff2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ff38:	e7f0      	b.n	800ff1c <prvIdleTask+0x8>
 800ff3a:	bf00      	nop
 800ff3c:	20004af0 	.word	0x20004af0
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	607b      	str	r3, [r7, #4]
 800ff4e:	e00c      	b.n	800ff6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	4613      	mov	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4413      	add	r3, r2
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4a12      	ldr	r2, [pc, #72]	; (800ffa4 <prvInitialiseTaskLists+0x60>)
 800ff5c:	4413      	add	r3, r2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe ff27 	bl	800edb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3301      	adds	r3, #1
 800ff68:	607b      	str	r3, [r7, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2b06      	cmp	r3, #6
 800ff6e:	d9ef      	bls.n	800ff50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ff70:	480d      	ldr	r0, [pc, #52]	; (800ffa8 <prvInitialiseTaskLists+0x64>)
 800ff72:	f7fe ff1e 	bl	800edb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ff76:	480d      	ldr	r0, [pc, #52]	; (800ffac <prvInitialiseTaskLists+0x68>)
 800ff78:	f7fe ff1b 	bl	800edb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ff7c:	480c      	ldr	r0, [pc, #48]	; (800ffb0 <prvInitialiseTaskLists+0x6c>)
 800ff7e:	f7fe ff18 	bl	800edb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ff82:	480c      	ldr	r0, [pc, #48]	; (800ffb4 <prvInitialiseTaskLists+0x70>)
 800ff84:	f7fe ff15 	bl	800edb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ff88:	480b      	ldr	r0, [pc, #44]	; (800ffb8 <prvInitialiseTaskLists+0x74>)
 800ff8a:	f7fe ff12 	bl	800edb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <prvInitialiseTaskLists+0x78>)
 800ff90:	4a05      	ldr	r2, [pc, #20]	; (800ffa8 <prvInitialiseTaskLists+0x64>)
 800ff92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ff94:	4b0a      	ldr	r3, [pc, #40]	; (800ffc0 <prvInitialiseTaskLists+0x7c>)
 800ff96:	4a05      	ldr	r2, [pc, #20]	; (800ffac <prvInitialiseTaskLists+0x68>)
 800ff98:	601a      	str	r2, [r3, #0]
}
 800ff9a:	bf00      	nop
 800ff9c:	3708      	adds	r7, #8
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20004af0 	.word	0x20004af0
 800ffa8:	20004b7c 	.word	0x20004b7c
 800ffac:	20004b90 	.word	0x20004b90
 800ffb0:	20004bac 	.word	0x20004bac
 800ffb4:	20004bc0 	.word	0x20004bc0
 800ffb8:	20004bd8 	.word	0x20004bd8
 800ffbc:	20004ba4 	.word	0x20004ba4
 800ffc0:	20004ba8 	.word	0x20004ba8

0800ffc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ffca:	e019      	b.n	8010000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ffcc:	f000 fab2 	bl	8010534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffd0:	4b10      	ldr	r3, [pc, #64]	; (8010014 <prvCheckTasksWaitingTermination+0x50>)
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7fe ff72 	bl	800eec6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ffe2:	4b0d      	ldr	r3, [pc, #52]	; (8010018 <prvCheckTasksWaitingTermination+0x54>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	4a0b      	ldr	r2, [pc, #44]	; (8010018 <prvCheckTasksWaitingTermination+0x54>)
 800ffea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ffec:	4b0b      	ldr	r3, [pc, #44]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3b01      	subs	r3, #1
 800fff2:	4a0a      	ldr	r2, [pc, #40]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 800fff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fff6:	f000 facd 	bl	8010594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f810 	bl	8010020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010000:	4b06      	ldr	r3, [pc, #24]	; (801001c <prvCheckTasksWaitingTermination+0x58>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e1      	bne.n	800ffcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010008:	bf00      	nop
 801000a:	bf00      	nop
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20004bc0 	.word	0x20004bc0
 8010018:	20004bec 	.word	0x20004bec
 801001c:	20004bd4 	.word	0x20004bd4

08010020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801002e:	2b00      	cmp	r3, #0
 8010030:	d108      	bne.n	8010044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fc2a 	bl	8010890 <vPortFree>
				vPortFree( pxTCB );
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 fc27 	bl	8010890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010042:	e018      	b.n	8010076 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801004a:	2b01      	cmp	r3, #1
 801004c:	d103      	bne.n	8010056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fc1e 	bl	8010890 <vPortFree>
	}
 8010054:	e00f      	b.n	8010076 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801005c:	2b02      	cmp	r3, #2
 801005e:	d00a      	beq.n	8010076 <prvDeleteTCB+0x56>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	60fb      	str	r3, [r7, #12]
}
 8010072:	bf00      	nop
 8010074:	e7fe      	b.n	8010074 <prvDeleteTCB+0x54>
	}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
	...

08010080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010086:	4b0c      	ldr	r3, [pc, #48]	; (80100b8 <prvResetNextTaskUnblockTime+0x38>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d104      	bne.n	801009a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010090:	4b0a      	ldr	r3, [pc, #40]	; (80100bc <prvResetNextTaskUnblockTime+0x3c>)
 8010092:	f04f 32ff 	mov.w	r2, #4294967295
 8010096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010098:	e008      	b.n	80100ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801009a:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <prvResetNextTaskUnblockTime+0x38>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	4a04      	ldr	r2, [pc, #16]	; (80100bc <prvResetNextTaskUnblockTime+0x3c>)
 80100aa:	6013      	str	r3, [r2, #0]
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	20004ba4 	.word	0x20004ba4
 80100bc:	20004c0c 	.word	0x20004c0c

080100c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80100c6:	4b0b      	ldr	r3, [pc, #44]	; (80100f4 <xTaskGetSchedulerState+0x34>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d102      	bne.n	80100d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80100ce:	2301      	movs	r3, #1
 80100d0:	607b      	str	r3, [r7, #4]
 80100d2:	e008      	b.n	80100e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100d4:	4b08      	ldr	r3, [pc, #32]	; (80100f8 <xTaskGetSchedulerState+0x38>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d102      	bne.n	80100e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80100dc:	2302      	movs	r3, #2
 80100de:	607b      	str	r3, [r7, #4]
 80100e0:	e001      	b.n	80100e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80100e2:	2300      	movs	r3, #0
 80100e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80100e6:	687b      	ldr	r3, [r7, #4]
	}
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr
 80100f4:	20004bf8 	.word	0x20004bf8
 80100f8:	20004c14 	.word	0x20004c14

080100fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010108:	2300      	movs	r3, #0
 801010a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d06e      	beq.n	80101f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010112:	4b3a      	ldr	r3, [pc, #232]	; (80101fc <xTaskPriorityDisinherit+0x100>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	429a      	cmp	r2, r3
 801011a:	d00a      	beq.n	8010132 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801011c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	60fb      	str	r3, [r7, #12]
}
 801012e:	bf00      	nop
 8010130:	e7fe      	b.n	8010130 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010136:	2b00      	cmp	r3, #0
 8010138:	d10a      	bne.n	8010150 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	60bb      	str	r3, [r7, #8]
}
 801014c:	bf00      	nop
 801014e:	e7fe      	b.n	801014e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010154:	1e5a      	subs	r2, r3, #1
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010162:	429a      	cmp	r2, r3
 8010164:	d044      	beq.n	80101f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801016a:	2b00      	cmp	r3, #0
 801016c:	d140      	bne.n	80101f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	3304      	adds	r3, #4
 8010172:	4618      	mov	r0, r3
 8010174:	f7fe fea7 	bl	800eec6 <uxListRemove>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d115      	bne.n	80101aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010182:	491f      	ldr	r1, [pc, #124]	; (8010200 <xTaskPriorityDisinherit+0x104>)
 8010184:	4613      	mov	r3, r2
 8010186:	009b      	lsls	r3, r3, #2
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	440b      	add	r3, r1
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d10a      	bne.n	80101aa <xTaskPriorityDisinherit+0xae>
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010198:	2201      	movs	r2, #1
 801019a:	fa02 f303 	lsl.w	r3, r2, r3
 801019e:	43da      	mvns	r2, r3
 80101a0:	4b18      	ldr	r3, [pc, #96]	; (8010204 <xTaskPriorityDisinherit+0x108>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4013      	ands	r3, r2
 80101a6:	4a17      	ldr	r2, [pc, #92]	; (8010204 <xTaskPriorityDisinherit+0x108>)
 80101a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b6:	f1c3 0207 	rsb	r2, r3, #7
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c2:	2201      	movs	r2, #1
 80101c4:	409a      	lsls	r2, r3
 80101c6:	4b0f      	ldr	r3, [pc, #60]	; (8010204 <xTaskPriorityDisinherit+0x108>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4313      	orrs	r3, r2
 80101cc:	4a0d      	ldr	r2, [pc, #52]	; (8010204 <xTaskPriorityDisinherit+0x108>)
 80101ce:	6013      	str	r3, [r2, #0]
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d4:	4613      	mov	r3, r2
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	4413      	add	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4a08      	ldr	r2, [pc, #32]	; (8010200 <xTaskPriorityDisinherit+0x104>)
 80101de:	441a      	add	r2, r3
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	3304      	adds	r3, #4
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f7fe fe10 	bl	800ee0c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80101ec:	2301      	movs	r3, #1
 80101ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80101f0:	697b      	ldr	r3, [r7, #20]
	}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3718      	adds	r7, #24
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
 80101fa:	bf00      	nop
 80101fc:	20004aec 	.word	0x20004aec
 8010200:	20004af0 	.word	0x20004af0
 8010204:	20004bf4 	.word	0x20004bf4

08010208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010212:	4b29      	ldr	r3, [pc, #164]	; (80102b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010218:	4b28      	ldr	r3, [pc, #160]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	3304      	adds	r3, #4
 801021e:	4618      	mov	r0, r3
 8010220:	f7fe fe51 	bl	800eec6 <uxListRemove>
 8010224:	4603      	mov	r3, r0
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10b      	bne.n	8010242 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801022a:	4b24      	ldr	r3, [pc, #144]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010230:	2201      	movs	r2, #1
 8010232:	fa02 f303 	lsl.w	r3, r2, r3
 8010236:	43da      	mvns	r2, r3
 8010238:	4b21      	ldr	r3, [pc, #132]	; (80102c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	4013      	ands	r3, r2
 801023e:	4a20      	ldr	r2, [pc, #128]	; (80102c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010240:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010248:	d10a      	bne.n	8010260 <prvAddCurrentTaskToDelayedList+0x58>
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d007      	beq.n	8010260 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010250:	4b1a      	ldr	r3, [pc, #104]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	3304      	adds	r3, #4
 8010256:	4619      	mov	r1, r3
 8010258:	481a      	ldr	r0, [pc, #104]	; (80102c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801025a:	f7fe fdd7 	bl	800ee0c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801025e:	e026      	b.n	80102ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	4413      	add	r3, r2
 8010266:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010268:	4b14      	ldr	r3, [pc, #80]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	429a      	cmp	r2, r3
 8010276:	d209      	bcs.n	801028c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010278:	4b13      	ldr	r3, [pc, #76]	; (80102c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	3304      	adds	r3, #4
 8010282:	4619      	mov	r1, r3
 8010284:	4610      	mov	r0, r2
 8010286:	f7fe fde5 	bl	800ee54 <vListInsert>
}
 801028a:	e010      	b.n	80102ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801028c:	4b0f      	ldr	r3, [pc, #60]	; (80102cc <prvAddCurrentTaskToDelayedList+0xc4>)
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	4b0a      	ldr	r3, [pc, #40]	; (80102bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	3304      	adds	r3, #4
 8010296:	4619      	mov	r1, r3
 8010298:	4610      	mov	r0, r2
 801029a:	f7fe fddb 	bl	800ee54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801029e:	4b0c      	ldr	r3, [pc, #48]	; (80102d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	68ba      	ldr	r2, [r7, #8]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d202      	bcs.n	80102ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80102a8:	4a09      	ldr	r2, [pc, #36]	; (80102d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	6013      	str	r3, [r2, #0]
}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20004bf0 	.word	0x20004bf0
 80102bc:	20004aec 	.word	0x20004aec
 80102c0:	20004bf4 	.word	0x20004bf4
 80102c4:	20004bd8 	.word	0x20004bd8
 80102c8:	20004ba8 	.word	0x20004ba8
 80102cc:	20004ba4 	.word	0x20004ba4
 80102d0:	20004c0c 	.word	0x20004c0c

080102d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	3b04      	subs	r3, #4
 80102e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80102ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	3b04      	subs	r3, #4
 80102f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	f023 0201 	bic.w	r2, r3, #1
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	3b04      	subs	r3, #4
 8010302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010304:	4a0c      	ldr	r2, [pc, #48]	; (8010338 <pxPortInitialiseStack+0x64>)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3b14      	subs	r3, #20
 801030e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	3b04      	subs	r3, #4
 801031a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f06f 0202 	mvn.w	r2, #2
 8010322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3b20      	subs	r3, #32
 8010328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801032a:	68fb      	ldr	r3, [r7, #12]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	0801033d 	.word	0x0801033d

0801033c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010346:	4b12      	ldr	r3, [pc, #72]	; (8010390 <prvTaskExitError+0x54>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034e:	d00a      	beq.n	8010366 <prvTaskExitError+0x2a>
	__asm volatile
 8010350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010354:	f383 8811 	msr	BASEPRI, r3
 8010358:	f3bf 8f6f 	isb	sy
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	60fb      	str	r3, [r7, #12]
}
 8010362:	bf00      	nop
 8010364:	e7fe      	b.n	8010364 <prvTaskExitError+0x28>
	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	60bb      	str	r3, [r7, #8]
}
 8010378:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801037a:	bf00      	nop
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d0fc      	beq.n	801037c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010382:	bf00      	nop
 8010384:	bf00      	nop
 8010386:	3714      	adds	r7, #20
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr
 8010390:	20000098 	.word	0x20000098
	...

080103a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103a0:	4b07      	ldr	r3, [pc, #28]	; (80103c0 <pxCurrentTCBConst2>)
 80103a2:	6819      	ldr	r1, [r3, #0]
 80103a4:	6808      	ldr	r0, [r1, #0]
 80103a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103aa:	f380 8809 	msr	PSP, r0
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f04f 0000 	mov.w	r0, #0
 80103b6:	f380 8811 	msr	BASEPRI, r0
 80103ba:	4770      	bx	lr
 80103bc:	f3af 8000 	nop.w

080103c0 <pxCurrentTCBConst2>:
 80103c0:	20004aec 	.word	0x20004aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80103c4:	bf00      	nop
 80103c6:	bf00      	nop

080103c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80103c8:	4808      	ldr	r0, [pc, #32]	; (80103ec <prvPortStartFirstTask+0x24>)
 80103ca:	6800      	ldr	r0, [r0, #0]
 80103cc:	6800      	ldr	r0, [r0, #0]
 80103ce:	f380 8808 	msr	MSP, r0
 80103d2:	f04f 0000 	mov.w	r0, #0
 80103d6:	f380 8814 	msr	CONTROL, r0
 80103da:	b662      	cpsie	i
 80103dc:	b661      	cpsie	f
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	df00      	svc	0
 80103e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80103ea:	bf00      	nop
 80103ec:	e000ed08 	.word	0xe000ed08

080103f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80103f6:	4b46      	ldr	r3, [pc, #280]	; (8010510 <xPortStartScheduler+0x120>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4a46      	ldr	r2, [pc, #280]	; (8010514 <xPortStartScheduler+0x124>)
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d10a      	bne.n	8010416 <xPortStartScheduler+0x26>
	__asm volatile
 8010400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010404:	f383 8811 	msr	BASEPRI, r3
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	f3bf 8f4f 	dsb	sy
 8010410:	613b      	str	r3, [r7, #16]
}
 8010412:	bf00      	nop
 8010414:	e7fe      	b.n	8010414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010416:	4b3e      	ldr	r3, [pc, #248]	; (8010510 <xPortStartScheduler+0x120>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a3f      	ldr	r2, [pc, #252]	; (8010518 <xPortStartScheduler+0x128>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d10a      	bne.n	8010436 <xPortStartScheduler+0x46>
	__asm volatile
 8010420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	60fb      	str	r3, [r7, #12]
}
 8010432:	bf00      	nop
 8010434:	e7fe      	b.n	8010434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010436:	4b39      	ldr	r3, [pc, #228]	; (801051c <xPortStartScheduler+0x12c>)
 8010438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	b2db      	uxtb	r3, r3
 8010440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	22ff      	movs	r2, #255	; 0xff
 8010446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	b2db      	uxtb	r3, r3
 801044e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010450:	78fb      	ldrb	r3, [r7, #3]
 8010452:	b2db      	uxtb	r3, r3
 8010454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010458:	b2da      	uxtb	r2, r3
 801045a:	4b31      	ldr	r3, [pc, #196]	; (8010520 <xPortStartScheduler+0x130>)
 801045c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801045e:	4b31      	ldr	r3, [pc, #196]	; (8010524 <xPortStartScheduler+0x134>)
 8010460:	2207      	movs	r2, #7
 8010462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010464:	e009      	b.n	801047a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010466:	4b2f      	ldr	r3, [pc, #188]	; (8010524 <xPortStartScheduler+0x134>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	3b01      	subs	r3, #1
 801046c:	4a2d      	ldr	r2, [pc, #180]	; (8010524 <xPortStartScheduler+0x134>)
 801046e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010470:	78fb      	ldrb	r3, [r7, #3]
 8010472:	b2db      	uxtb	r3, r3
 8010474:	005b      	lsls	r3, r3, #1
 8010476:	b2db      	uxtb	r3, r3
 8010478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801047a:	78fb      	ldrb	r3, [r7, #3]
 801047c:	b2db      	uxtb	r3, r3
 801047e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010482:	2b80      	cmp	r3, #128	; 0x80
 8010484:	d0ef      	beq.n	8010466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010486:	4b27      	ldr	r3, [pc, #156]	; (8010524 <xPortStartScheduler+0x134>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f1c3 0307 	rsb	r3, r3, #7
 801048e:	2b04      	cmp	r3, #4
 8010490:	d00a      	beq.n	80104a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010496:	f383 8811 	msr	BASEPRI, r3
 801049a:	f3bf 8f6f 	isb	sy
 801049e:	f3bf 8f4f 	dsb	sy
 80104a2:	60bb      	str	r3, [r7, #8]
}
 80104a4:	bf00      	nop
 80104a6:	e7fe      	b.n	80104a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104a8:	4b1e      	ldr	r3, [pc, #120]	; (8010524 <xPortStartScheduler+0x134>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	021b      	lsls	r3, r3, #8
 80104ae:	4a1d      	ldr	r2, [pc, #116]	; (8010524 <xPortStartScheduler+0x134>)
 80104b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104b2:	4b1c      	ldr	r3, [pc, #112]	; (8010524 <xPortStartScheduler+0x134>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104ba:	4a1a      	ldr	r2, [pc, #104]	; (8010524 <xPortStartScheduler+0x134>)
 80104bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	b2da      	uxtb	r2, r3
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80104c6:	4b18      	ldr	r3, [pc, #96]	; (8010528 <xPortStartScheduler+0x138>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a17      	ldr	r2, [pc, #92]	; (8010528 <xPortStartScheduler+0x138>)
 80104cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80104d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80104d2:	4b15      	ldr	r3, [pc, #84]	; (8010528 <xPortStartScheduler+0x138>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a14      	ldr	r2, [pc, #80]	; (8010528 <xPortStartScheduler+0x138>)
 80104d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80104dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80104de:	f000 f8dd 	bl	801069c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80104e2:	4b12      	ldr	r3, [pc, #72]	; (801052c <xPortStartScheduler+0x13c>)
 80104e4:	2200      	movs	r2, #0
 80104e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80104e8:	f000 f8fc 	bl	80106e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80104ec:	4b10      	ldr	r3, [pc, #64]	; (8010530 <xPortStartScheduler+0x140>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4a0f      	ldr	r2, [pc, #60]	; (8010530 <xPortStartScheduler+0x140>)
 80104f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80104f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80104f8:	f7ff ff66 	bl	80103c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80104fc:	f7ff fba4 	bl	800fc48 <vTaskSwitchContext>
	prvTaskExitError();
 8010500:	f7ff ff1c 	bl	801033c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	e000ed00 	.word	0xe000ed00
 8010514:	410fc271 	.word	0x410fc271
 8010518:	410fc270 	.word	0x410fc270
 801051c:	e000e400 	.word	0xe000e400
 8010520:	20004c18 	.word	0x20004c18
 8010524:	20004c1c 	.word	0x20004c1c
 8010528:	e000ed20 	.word	0xe000ed20
 801052c:	20000098 	.word	0x20000098
 8010530:	e000ef34 	.word	0xe000ef34

08010534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010534:	b480      	push	{r7}
 8010536:	b083      	sub	sp, #12
 8010538:	af00      	add	r7, sp, #0
	__asm volatile
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	607b      	str	r3, [r7, #4]
}
 801054c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801054e:	4b0f      	ldr	r3, [pc, #60]	; (801058c <vPortEnterCritical+0x58>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	3301      	adds	r3, #1
 8010554:	4a0d      	ldr	r2, [pc, #52]	; (801058c <vPortEnterCritical+0x58>)
 8010556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010558:	4b0c      	ldr	r3, [pc, #48]	; (801058c <vPortEnterCritical+0x58>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b01      	cmp	r3, #1
 801055e:	d10f      	bne.n	8010580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010560:	4b0b      	ldr	r3, [pc, #44]	; (8010590 <vPortEnterCritical+0x5c>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	b2db      	uxtb	r3, r3
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <vPortEnterCritical+0x4c>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	603b      	str	r3, [r7, #0]
}
 801057c:	bf00      	nop
 801057e:	e7fe      	b.n	801057e <vPortEnterCritical+0x4a>
	}
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr
 801058c:	20000098 	.word	0x20000098
 8010590:	e000ed04 	.word	0xe000ed04

08010594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801059a:	4b12      	ldr	r3, [pc, #72]	; (80105e4 <vPortExitCritical+0x50>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d10a      	bne.n	80105b8 <vPortExitCritical+0x24>
	__asm volatile
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	607b      	str	r3, [r7, #4]
}
 80105b4:	bf00      	nop
 80105b6:	e7fe      	b.n	80105b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80105b8:	4b0a      	ldr	r3, [pc, #40]	; (80105e4 <vPortExitCritical+0x50>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	3b01      	subs	r3, #1
 80105be:	4a09      	ldr	r2, [pc, #36]	; (80105e4 <vPortExitCritical+0x50>)
 80105c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80105c2:	4b08      	ldr	r3, [pc, #32]	; (80105e4 <vPortExitCritical+0x50>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d105      	bne.n	80105d6 <vPortExitCritical+0x42>
 80105ca:	2300      	movs	r3, #0
 80105cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80105d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80105d6:	bf00      	nop
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20000098 	.word	0x20000098
	...

080105f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80105f0:	f3ef 8009 	mrs	r0, PSP
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	4b15      	ldr	r3, [pc, #84]	; (8010650 <pxCurrentTCBConst>)
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	f01e 0f10 	tst.w	lr, #16
 8010600:	bf08      	it	eq
 8010602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	6010      	str	r0, [r2, #0]
 801060c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010614:	f380 8811 	msr	BASEPRI, r0
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f7ff fb12 	bl	800fc48 <vTaskSwitchContext>
 8010624:	f04f 0000 	mov.w	r0, #0
 8010628:	f380 8811 	msr	BASEPRI, r0
 801062c:	bc09      	pop	{r0, r3}
 801062e:	6819      	ldr	r1, [r3, #0]
 8010630:	6808      	ldr	r0, [r1, #0]
 8010632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010636:	f01e 0f10 	tst.w	lr, #16
 801063a:	bf08      	it	eq
 801063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010640:	f380 8809 	msr	PSP, r0
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	f3af 8000 	nop.w

08010650 <pxCurrentTCBConst>:
 8010650:	20004aec 	.word	0x20004aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010654:	bf00      	nop
 8010656:	bf00      	nop

08010658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
	__asm volatile
 801065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010662:	f383 8811 	msr	BASEPRI, r3
 8010666:	f3bf 8f6f 	isb	sy
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	607b      	str	r3, [r7, #4]
}
 8010670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010672:	f7ff fa31 	bl	800fad8 <xTaskIncrementTick>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801067c:	4b06      	ldr	r3, [pc, #24]	; (8010698 <SysTick_Handler+0x40>)
 801067e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	2300      	movs	r3, #0
 8010686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	f383 8811 	msr	BASEPRI, r3
}
 801068e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010690:	bf00      	nop
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	e000ed04 	.word	0xe000ed04

0801069c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801069c:	b480      	push	{r7}
 801069e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80106a0:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <vPortSetupTimerInterrupt+0x34>)
 80106a2:	2200      	movs	r2, #0
 80106a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80106a6:	4b0b      	ldr	r3, [pc, #44]	; (80106d4 <vPortSetupTimerInterrupt+0x38>)
 80106a8:	2200      	movs	r2, #0
 80106aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80106ac:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <vPortSetupTimerInterrupt+0x3c>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a0a      	ldr	r2, [pc, #40]	; (80106dc <vPortSetupTimerInterrupt+0x40>)
 80106b2:	fba2 2303 	umull	r2, r3, r2, r3
 80106b6:	099b      	lsrs	r3, r3, #6
 80106b8:	4a09      	ldr	r2, [pc, #36]	; (80106e0 <vPortSetupTimerInterrupt+0x44>)
 80106ba:	3b01      	subs	r3, #1
 80106bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80106be:	4b04      	ldr	r3, [pc, #16]	; (80106d0 <vPortSetupTimerInterrupt+0x34>)
 80106c0:	2207      	movs	r2, #7
 80106c2:	601a      	str	r2, [r3, #0]
}
 80106c4:	bf00      	nop
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	e000e010 	.word	0xe000e010
 80106d4:	e000e018 	.word	0xe000e018
 80106d8:	20000000 	.word	0x20000000
 80106dc:	10624dd3 	.word	0x10624dd3
 80106e0:	e000e014 	.word	0xe000e014

080106e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80106e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80106f4 <vPortEnableVFP+0x10>
 80106e8:	6801      	ldr	r1, [r0, #0]
 80106ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80106ee:	6001      	str	r1, [r0, #0]
 80106f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80106f2:	bf00      	nop
 80106f4:	e000ed88 	.word	0xe000ed88

080106f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b08a      	sub	sp, #40	; 0x28
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010700:	2300      	movs	r3, #0
 8010702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010704:	f7ff f93e 	bl	800f984 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010708:	4b5b      	ldr	r3, [pc, #364]	; (8010878 <pvPortMalloc+0x180>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010710:	f000 f920 	bl	8010954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010714:	4b59      	ldr	r3, [pc, #356]	; (801087c <pvPortMalloc+0x184>)
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4013      	ands	r3, r2
 801071c:	2b00      	cmp	r3, #0
 801071e:	f040 8093 	bne.w	8010848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d01d      	beq.n	8010764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010728:	2208      	movs	r2, #8
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	4413      	add	r3, r2
 801072e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f003 0307 	and.w	r3, r3, #7
 8010736:	2b00      	cmp	r3, #0
 8010738:	d014      	beq.n	8010764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f023 0307 	bic.w	r3, r3, #7
 8010740:	3308      	adds	r3, #8
 8010742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f003 0307 	and.w	r3, r3, #7
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00a      	beq.n	8010764 <pvPortMalloc+0x6c>
	__asm volatile
 801074e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010752:	f383 8811 	msr	BASEPRI, r3
 8010756:	f3bf 8f6f 	isb	sy
 801075a:	f3bf 8f4f 	dsb	sy
 801075e:	617b      	str	r3, [r7, #20]
}
 8010760:	bf00      	nop
 8010762:	e7fe      	b.n	8010762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d06e      	beq.n	8010848 <pvPortMalloc+0x150>
 801076a:	4b45      	ldr	r3, [pc, #276]	; (8010880 <pvPortMalloc+0x188>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d869      	bhi.n	8010848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010774:	4b43      	ldr	r3, [pc, #268]	; (8010884 <pvPortMalloc+0x18c>)
 8010776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010778:	4b42      	ldr	r3, [pc, #264]	; (8010884 <pvPortMalloc+0x18c>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801077e:	e004      	b.n	801078a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	429a      	cmp	r2, r3
 8010792:	d903      	bls.n	801079c <pvPortMalloc+0xa4>
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1f1      	bne.n	8010780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801079c:	4b36      	ldr	r3, [pc, #216]	; (8010878 <pvPortMalloc+0x180>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d050      	beq.n	8010848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2208      	movs	r2, #8
 80107ac:	4413      	add	r3, r2
 80107ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	685a      	ldr	r2, [r3, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	1ad2      	subs	r2, r2, r3
 80107c0:	2308      	movs	r3, #8
 80107c2:	005b      	lsls	r3, r3, #1
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d91f      	bls.n	8010808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80107c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	4413      	add	r3, r2
 80107ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	f003 0307 	and.w	r3, r3, #7
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00a      	beq.n	80107f0 <pvPortMalloc+0xf8>
	__asm volatile
 80107da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107de:	f383 8811 	msr	BASEPRI, r3
 80107e2:	f3bf 8f6f 	isb	sy
 80107e6:	f3bf 8f4f 	dsb	sy
 80107ea:	613b      	str	r3, [r7, #16]
}
 80107ec:	bf00      	nop
 80107ee:	e7fe      	b.n	80107ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	685a      	ldr	r2, [r3, #4]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	1ad2      	subs	r2, r2, r3
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80107fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010802:	69b8      	ldr	r0, [r7, #24]
 8010804:	f000 f908 	bl	8010a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010808:	4b1d      	ldr	r3, [pc, #116]	; (8010880 <pvPortMalloc+0x188>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	1ad3      	subs	r3, r2, r3
 8010812:	4a1b      	ldr	r2, [pc, #108]	; (8010880 <pvPortMalloc+0x188>)
 8010814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010816:	4b1a      	ldr	r3, [pc, #104]	; (8010880 <pvPortMalloc+0x188>)
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	4b1b      	ldr	r3, [pc, #108]	; (8010888 <pvPortMalloc+0x190>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	429a      	cmp	r2, r3
 8010820:	d203      	bcs.n	801082a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010822:	4b17      	ldr	r3, [pc, #92]	; (8010880 <pvPortMalloc+0x188>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a18      	ldr	r2, [pc, #96]	; (8010888 <pvPortMalloc+0x190>)
 8010828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082c:	685a      	ldr	r2, [r3, #4]
 801082e:	4b13      	ldr	r3, [pc, #76]	; (801087c <pvPortMalloc+0x184>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	431a      	orrs	r2, r3
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	2200      	movs	r2, #0
 801083c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801083e:	4b13      	ldr	r3, [pc, #76]	; (801088c <pvPortMalloc+0x194>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3301      	adds	r3, #1
 8010844:	4a11      	ldr	r2, [pc, #68]	; (801088c <pvPortMalloc+0x194>)
 8010846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010848:	f7ff f8aa 	bl	800f9a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	f003 0307 	and.w	r3, r3, #7
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00a      	beq.n	801086c <pvPortMalloc+0x174>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	60fb      	str	r3, [r7, #12]
}
 8010868:	bf00      	nop
 801086a:	e7fe      	b.n	801086a <pvPortMalloc+0x172>
	return pvReturn;
 801086c:	69fb      	ldr	r3, [r7, #28]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3728      	adds	r7, #40	; 0x28
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	20008828 	.word	0x20008828
 801087c:	2000883c 	.word	0x2000883c
 8010880:	2000882c 	.word	0x2000882c
 8010884:	20008820 	.word	0x20008820
 8010888:	20008830 	.word	0x20008830
 801088c:	20008834 	.word	0x20008834

08010890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b086      	sub	sp, #24
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d04d      	beq.n	801093e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80108a2:	2308      	movs	r3, #8
 80108a4:	425b      	negs	r3, r3
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	4413      	add	r3, r2
 80108aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	685a      	ldr	r2, [r3, #4]
 80108b4:	4b24      	ldr	r3, [pc, #144]	; (8010948 <vPortFree+0xb8>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4013      	ands	r3, r2
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10a      	bne.n	80108d4 <vPortFree+0x44>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	60fb      	str	r3, [r7, #12]
}
 80108d0:	bf00      	nop
 80108d2:	e7fe      	b.n	80108d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00a      	beq.n	80108f2 <vPortFree+0x62>
	__asm volatile
 80108dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e0:	f383 8811 	msr	BASEPRI, r3
 80108e4:	f3bf 8f6f 	isb	sy
 80108e8:	f3bf 8f4f 	dsb	sy
 80108ec:	60bb      	str	r3, [r7, #8]
}
 80108ee:	bf00      	nop
 80108f0:	e7fe      	b.n	80108f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	685a      	ldr	r2, [r3, #4]
 80108f6:	4b14      	ldr	r3, [pc, #80]	; (8010948 <vPortFree+0xb8>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4013      	ands	r3, r2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d01e      	beq.n	801093e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d11a      	bne.n	801093e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	4b0e      	ldr	r3, [pc, #56]	; (8010948 <vPortFree+0xb8>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	43db      	mvns	r3, r3
 8010912:	401a      	ands	r2, r3
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010918:	f7ff f834 	bl	800f984 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	4b0a      	ldr	r3, [pc, #40]	; (801094c <vPortFree+0xbc>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4413      	add	r3, r2
 8010926:	4a09      	ldr	r2, [pc, #36]	; (801094c <vPortFree+0xbc>)
 8010928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801092a:	6938      	ldr	r0, [r7, #16]
 801092c:	f000 f874 	bl	8010a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010930:	4b07      	ldr	r3, [pc, #28]	; (8010950 <vPortFree+0xc0>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	3301      	adds	r3, #1
 8010936:	4a06      	ldr	r2, [pc, #24]	; (8010950 <vPortFree+0xc0>)
 8010938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801093a:	f7ff f831 	bl	800f9a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801093e:	bf00      	nop
 8010940:	3718      	adds	r7, #24
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	2000883c 	.word	0x2000883c
 801094c:	2000882c 	.word	0x2000882c
 8010950:	20008838 	.word	0x20008838

08010954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801095a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801095e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010960:	4b27      	ldr	r3, [pc, #156]	; (8010a00 <prvHeapInit+0xac>)
 8010962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00c      	beq.n	8010988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	3307      	adds	r3, #7
 8010972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	f023 0307 	bic.w	r3, r3, #7
 801097a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801097c:	68ba      	ldr	r2, [r7, #8]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	1ad3      	subs	r3, r2, r3
 8010982:	4a1f      	ldr	r2, [pc, #124]	; (8010a00 <prvHeapInit+0xac>)
 8010984:	4413      	add	r3, r2
 8010986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801098c:	4a1d      	ldr	r2, [pc, #116]	; (8010a04 <prvHeapInit+0xb0>)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010992:	4b1c      	ldr	r3, [pc, #112]	; (8010a04 <prvHeapInit+0xb0>)
 8010994:	2200      	movs	r2, #0
 8010996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	4413      	add	r3, r2
 801099e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80109a0:	2208      	movs	r2, #8
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	1a9b      	subs	r3, r3, r2
 80109a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f023 0307 	bic.w	r3, r3, #7
 80109ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4a15      	ldr	r2, [pc, #84]	; (8010a08 <prvHeapInit+0xb4>)
 80109b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80109b6:	4b14      	ldr	r3, [pc, #80]	; (8010a08 <prvHeapInit+0xb4>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2200      	movs	r2, #0
 80109bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80109be:	4b12      	ldr	r3, [pc, #72]	; (8010a08 <prvHeapInit+0xb4>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	1ad2      	subs	r2, r2, r3
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109d4:	4b0c      	ldr	r3, [pc, #48]	; (8010a08 <prvHeapInit+0xb4>)
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	4a0a      	ldr	r2, [pc, #40]	; (8010a0c <prvHeapInit+0xb8>)
 80109e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	4a09      	ldr	r2, [pc, #36]	; (8010a10 <prvHeapInit+0xbc>)
 80109ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109ec:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <prvHeapInit+0xc0>)
 80109ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80109f2:	601a      	str	r2, [r3, #0]
}
 80109f4:	bf00      	nop
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	20004c20 	.word	0x20004c20
 8010a04:	20008820 	.word	0x20008820
 8010a08:	20008828 	.word	0x20008828
 8010a0c:	20008830 	.word	0x20008830
 8010a10:	2000882c 	.word	0x2000882c
 8010a14:	2000883c 	.word	0x2000883c

08010a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010a20:	4b28      	ldr	r3, [pc, #160]	; (8010ac4 <prvInsertBlockIntoFreeList+0xac>)
 8010a22:	60fb      	str	r3, [r7, #12]
 8010a24:	e002      	b.n	8010a2c <prvInsertBlockIntoFreeList+0x14>
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	60fb      	str	r3, [r7, #12]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d8f7      	bhi.n	8010a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	4413      	add	r3, r2
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d108      	bne.n	8010a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	685a      	ldr	r2, [r3, #4]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	441a      	add	r2, r3
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	441a      	add	r2, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d118      	bne.n	8010aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	4b15      	ldr	r3, [pc, #84]	; (8010ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d00d      	beq.n	8010a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	685a      	ldr	r2, [r3, #4]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	441a      	add	r2, r3
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	601a      	str	r2, [r3, #0]
 8010a94:	e008      	b.n	8010aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010a96:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	e003      	b.n	8010aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d002      	beq.n	8010ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ab6:	bf00      	nop
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr
 8010ac2:	bf00      	nop
 8010ac4:	20008820 	.word	0x20008820
 8010ac8:	20008828 	.word	0x20008828

08010acc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4912      	ldr	r1, [pc, #72]	; (8010b1c <MX_USB_DEVICE_Init+0x50>)
 8010ad4:	4812      	ldr	r0, [pc, #72]	; (8010b20 <MX_USB_DEVICE_Init+0x54>)
 8010ad6:	f7fc fdc9 	bl	800d66c <USBD_Init>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010ae0:	f7f0 f870 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010ae4:	490f      	ldr	r1, [pc, #60]	; (8010b24 <MX_USB_DEVICE_Init+0x58>)
 8010ae6:	480e      	ldr	r0, [pc, #56]	; (8010b20 <MX_USB_DEVICE_Init+0x54>)
 8010ae8:	f7fc fdf0 	bl	800d6cc <USBD_RegisterClass>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010af2:	f7f0 f867 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010af6:	490c      	ldr	r1, [pc, #48]	; (8010b28 <MX_USB_DEVICE_Init+0x5c>)
 8010af8:	4809      	ldr	r0, [pc, #36]	; (8010b20 <MX_USB_DEVICE_Init+0x54>)
 8010afa:	f7fc fce1 	bl	800d4c0 <USBD_CDC_RegisterInterface>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010b04:	f7f0 f85e 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010b08:	4805      	ldr	r0, [pc, #20]	; (8010b20 <MX_USB_DEVICE_Init+0x54>)
 8010b0a:	f7fc fe15 	bl	800d738 <USBD_Start>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010b14:	f7f0 f856 	bl	8000bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010b18:	bf00      	nop
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	200000b0 	.word	0x200000b0
 8010b20:	20008840 	.word	0x20008840
 8010b24:	20000018 	.word	0x20000018
 8010b28:	2000009c 	.word	0x2000009c

08010b2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010b30:	2200      	movs	r2, #0
 8010b32:	4905      	ldr	r1, [pc, #20]	; (8010b48 <CDC_Init_FS+0x1c>)
 8010b34:	4805      	ldr	r0, [pc, #20]	; (8010b4c <CDC_Init_FS+0x20>)
 8010b36:	f7fc fcdd 	bl	800d4f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010b3a:	4905      	ldr	r1, [pc, #20]	; (8010b50 <CDC_Init_FS+0x24>)
 8010b3c:	4803      	ldr	r0, [pc, #12]	; (8010b4c <CDC_Init_FS+0x20>)
 8010b3e:	f7fc fcfb 	bl	800d538 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010b42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	bd80      	pop	{r7, pc}
 8010b48:	20008f48 	.word	0x20008f48
 8010b4c:	20008840 	.word	0x20008840
 8010b50:	20008b60 	.word	0x20008b60

08010b54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010b54:	b480      	push	{r7}
 8010b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010b58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	6039      	str	r1, [r7, #0]
 8010b6e:	71fb      	strb	r3, [r7, #7]
 8010b70:	4613      	mov	r3, r2
 8010b72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010b74:	79fb      	ldrb	r3, [r7, #7]
 8010b76:	2b23      	cmp	r3, #35	; 0x23
 8010b78:	d84a      	bhi.n	8010c10 <CDC_Control_FS+0xac>
 8010b7a:	a201      	add	r2, pc, #4	; (adr r2, 8010b80 <CDC_Control_FS+0x1c>)
 8010b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b80:	08010c11 	.word	0x08010c11
 8010b84:	08010c11 	.word	0x08010c11
 8010b88:	08010c11 	.word	0x08010c11
 8010b8c:	08010c11 	.word	0x08010c11
 8010b90:	08010c11 	.word	0x08010c11
 8010b94:	08010c11 	.word	0x08010c11
 8010b98:	08010c11 	.word	0x08010c11
 8010b9c:	08010c11 	.word	0x08010c11
 8010ba0:	08010c11 	.word	0x08010c11
 8010ba4:	08010c11 	.word	0x08010c11
 8010ba8:	08010c11 	.word	0x08010c11
 8010bac:	08010c11 	.word	0x08010c11
 8010bb0:	08010c11 	.word	0x08010c11
 8010bb4:	08010c11 	.word	0x08010c11
 8010bb8:	08010c11 	.word	0x08010c11
 8010bbc:	08010c11 	.word	0x08010c11
 8010bc0:	08010c11 	.word	0x08010c11
 8010bc4:	08010c11 	.word	0x08010c11
 8010bc8:	08010c11 	.word	0x08010c11
 8010bcc:	08010c11 	.word	0x08010c11
 8010bd0:	08010c11 	.word	0x08010c11
 8010bd4:	08010c11 	.word	0x08010c11
 8010bd8:	08010c11 	.word	0x08010c11
 8010bdc:	08010c11 	.word	0x08010c11
 8010be0:	08010c11 	.word	0x08010c11
 8010be4:	08010c11 	.word	0x08010c11
 8010be8:	08010c11 	.word	0x08010c11
 8010bec:	08010c11 	.word	0x08010c11
 8010bf0:	08010c11 	.word	0x08010c11
 8010bf4:	08010c11 	.word	0x08010c11
 8010bf8:	08010c11 	.word	0x08010c11
 8010bfc:	08010c11 	.word	0x08010c11
 8010c00:	08010c11 	.word	0x08010c11
 8010c04:	08010c11 	.word	0x08010c11
 8010c08:	08010c11 	.word	0x08010c11
 8010c0c:	08010c11 	.word	0x08010c11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010c10:	bf00      	nop
  }

  return (USBD_OK);
 8010c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	370c      	adds	r7, #12
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr

08010c20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	480e      	ldr	r0, [pc, #56]	; (8010c68 <CDC_Receive_FS+0x48>)
 8010c2e:	f7fc fc83 	bl	800d538 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010c32:	480d      	ldr	r0, [pc, #52]	; (8010c68 <CDC_Receive_FS+0x48>)
 8010c34:	f7fc fce4 	bl	800d600 <USBD_CDC_ReceivePacket>

  dataUsb_rxlength =  (uint16_t)* Len;
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	4b0b      	ldr	r3, [pc, #44]	; (8010c6c <CDC_Receive_FS+0x4c>)
 8010c40:	801a      	strh	r2, [r3, #0]
  memcpy(dataUsb_rx,Buf,dataUsb_rxlength);
 8010c42:	4b0a      	ldr	r3, [pc, #40]	; (8010c6c <CDC_Receive_FS+0x4c>)
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	461a      	mov	r2, r3
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	4809      	ldr	r0, [pc, #36]	; (8010c70 <CDC_Receive_FS+0x50>)
 8010c4c:	f002 ff60 	bl	8013b10 <memcpy>
  AnalyserCMD(dataUsb_rx,dataUsb_rxlength, USB);
 8010c50:	4b06      	ldr	r3, [pc, #24]	; (8010c6c <CDC_Receive_FS+0x4c>)
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	2201      	movs	r2, #1
 8010c56:	4619      	mov	r1, r3
 8010c58:	4805      	ldr	r0, [pc, #20]	; (8010c70 <CDC_Receive_FS+0x50>)
 8010c5a:	f002 fa49 	bl	80130f0 <AnalyserCMD>

  return (USBD_OK);
 8010c5e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	20008840 	.word	0x20008840
 8010c6c:	20008b1c 	.word	0x20008b1c
 8010c70:	20008b20 	.word	0x20008b20

08010c74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010c80:	2300      	movs	r3, #0
 8010c82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010c84:	4b0d      	ldr	r3, [pc, #52]	; (8010cbc <CDC_Transmit_FS+0x48>)
 8010c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d001      	beq.n	8010c9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010c96:	2301      	movs	r3, #1
 8010c98:	e00b      	b.n	8010cb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010c9a:	887b      	ldrh	r3, [r7, #2]
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	6879      	ldr	r1, [r7, #4]
 8010ca0:	4806      	ldr	r0, [pc, #24]	; (8010cbc <CDC_Transmit_FS+0x48>)
 8010ca2:	f7fc fc27 	bl	800d4f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010ca6:	4805      	ldr	r0, [pc, #20]	; (8010cbc <CDC_Transmit_FS+0x48>)
 8010ca8:	f7fc fc64 	bl	800d574 <USBD_CDC_TransmitPacket>
 8010cac:	4603      	mov	r3, r0
 8010cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	20008840 	.word	0x20008840

08010cc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b087      	sub	sp, #28
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	4613      	mov	r3, r2
 8010ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	371c      	adds	r7, #28
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
	...

08010ce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	6039      	str	r1, [r7, #0]
 8010cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2212      	movs	r2, #18
 8010cf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010cf6:	4b03      	ldr	r3, [pc, #12]	; (8010d04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	200000cc 	.word	0x200000cc

08010d08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b083      	sub	sp, #12
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	6039      	str	r1, [r7, #0]
 8010d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	2204      	movs	r2, #4
 8010d18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010d1a:	4b03      	ldr	r3, [pc, #12]	; (8010d28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	200000e0 	.word	0x200000e0

08010d2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	4603      	mov	r3, r0
 8010d34:	6039      	str	r1, [r7, #0]
 8010d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d38:	79fb      	ldrb	r3, [r7, #7]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d105      	bne.n	8010d4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	4907      	ldr	r1, [pc, #28]	; (8010d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d42:	4808      	ldr	r0, [pc, #32]	; (8010d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d44:	f7fd fea4 	bl	800ea90 <USBD_GetString>
 8010d48:	e004      	b.n	8010d54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010d4a:	683a      	ldr	r2, [r7, #0]
 8010d4c:	4904      	ldr	r1, [pc, #16]	; (8010d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8010d4e:	4805      	ldr	r0, [pc, #20]	; (8010d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8010d50:	f7fd fe9e 	bl	800ea90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d54:	4b02      	ldr	r3, [pc, #8]	; (8010d60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20009330 	.word	0x20009330
 8010d64:	08013bb0 	.word	0x08013bb0

08010d68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b082      	sub	sp, #8
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	4603      	mov	r3, r0
 8010d70:	6039      	str	r1, [r7, #0]
 8010d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	4904      	ldr	r1, [pc, #16]	; (8010d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d78:	4804      	ldr	r0, [pc, #16]	; (8010d8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d7a:	f7fd fe89 	bl	800ea90 <USBD_GetString>
  return USBD_StrDesc;
 8010d7e:	4b02      	ldr	r3, [pc, #8]	; (8010d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	20009330 	.word	0x20009330
 8010d8c:	08013bc0 	.word	0x08013bc0

08010d90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	6039      	str	r1, [r7, #0]
 8010d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	221a      	movs	r2, #26
 8010da0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010da2:	f000 f843 	bl	8010e2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010da6:	4b02      	ldr	r3, [pc, #8]	; (8010db0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3708      	adds	r7, #8
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	200000e4 	.word	0x200000e4

08010db4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	6039      	str	r1, [r7, #0]
 8010dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010dc0:	79fb      	ldrb	r3, [r7, #7]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d105      	bne.n	8010dd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dc6:	683a      	ldr	r2, [r7, #0]
 8010dc8:	4907      	ldr	r1, [pc, #28]	; (8010de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dca:	4808      	ldr	r0, [pc, #32]	; (8010dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dcc:	f7fd fe60 	bl	800ea90 <USBD_GetString>
 8010dd0:	e004      	b.n	8010ddc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010dd2:	683a      	ldr	r2, [r7, #0]
 8010dd4:	4904      	ldr	r1, [pc, #16]	; (8010de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010dd6:	4805      	ldr	r0, [pc, #20]	; (8010dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8010dd8:	f7fd fe5a 	bl	800ea90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ddc:	4b02      	ldr	r3, [pc, #8]	; (8010de8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3708      	adds	r7, #8
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	20009330 	.word	0x20009330
 8010dec:	08013bc8 	.word	0x08013bc8

08010df0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	6039      	str	r1, [r7, #0]
 8010dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d105      	bne.n	8010e0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	4907      	ldr	r1, [pc, #28]	; (8010e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e06:	4808      	ldr	r0, [pc, #32]	; (8010e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e08:	f7fd fe42 	bl	800ea90 <USBD_GetString>
 8010e0c:	e004      	b.n	8010e18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	4904      	ldr	r1, [pc, #16]	; (8010e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e12:	4805      	ldr	r0, [pc, #20]	; (8010e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e14:	f7fd fe3c 	bl	800ea90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	20009330 	.word	0x20009330
 8010e28:	08013bd4 	.word	0x08013bd4

08010e2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010e32:	4b0f      	ldr	r3, [pc, #60]	; (8010e70 <Get_SerialNum+0x44>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010e38:	4b0e      	ldr	r3, [pc, #56]	; (8010e74 <Get_SerialNum+0x48>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010e3e:	4b0e      	ldr	r3, [pc, #56]	; (8010e78 <Get_SerialNum+0x4c>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4413      	add	r3, r2
 8010e4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d009      	beq.n	8010e66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010e52:	2208      	movs	r2, #8
 8010e54:	4909      	ldr	r1, [pc, #36]	; (8010e7c <Get_SerialNum+0x50>)
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f000 f814 	bl	8010e84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010e5c:	2204      	movs	r2, #4
 8010e5e:	4908      	ldr	r1, [pc, #32]	; (8010e80 <Get_SerialNum+0x54>)
 8010e60:	68b8      	ldr	r0, [r7, #8]
 8010e62:	f000 f80f 	bl	8010e84 <IntToUnicode>
  }
}
 8010e66:	bf00      	nop
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	1fff7a10 	.word	0x1fff7a10
 8010e74:	1fff7a14 	.word	0x1fff7a14
 8010e78:	1fff7a18 	.word	0x1fff7a18
 8010e7c:	200000e6 	.word	0x200000e6
 8010e80:	200000f6 	.word	0x200000f6

08010e84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e84:	b480      	push	{r7}
 8010e86:	b087      	sub	sp, #28
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	4613      	mov	r3, r2
 8010e90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e92:	2300      	movs	r3, #0
 8010e94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e96:	2300      	movs	r3, #0
 8010e98:	75fb      	strb	r3, [r7, #23]
 8010e9a:	e027      	b.n	8010eec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	0f1b      	lsrs	r3, r3, #28
 8010ea0:	2b09      	cmp	r3, #9
 8010ea2:	d80b      	bhi.n	8010ebc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	0f1b      	lsrs	r3, r3, #28
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	7dfb      	ldrb	r3, [r7, #23]
 8010eac:	005b      	lsls	r3, r3, #1
 8010eae:	4619      	mov	r1, r3
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	440b      	add	r3, r1
 8010eb4:	3230      	adds	r2, #48	; 0x30
 8010eb6:	b2d2      	uxtb	r2, r2
 8010eb8:	701a      	strb	r2, [r3, #0]
 8010eba:	e00a      	b.n	8010ed2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	0f1b      	lsrs	r3, r3, #28
 8010ec0:	b2da      	uxtb	r2, r3
 8010ec2:	7dfb      	ldrb	r3, [r7, #23]
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	440b      	add	r3, r1
 8010ecc:	3237      	adds	r2, #55	; 0x37
 8010ece:	b2d2      	uxtb	r2, r2
 8010ed0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	011b      	lsls	r3, r3, #4
 8010ed6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ed8:	7dfb      	ldrb	r3, [r7, #23]
 8010eda:	005b      	lsls	r3, r3, #1
 8010edc:	3301      	adds	r3, #1
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	75fb      	strb	r3, [r7, #23]
 8010eec:	7dfa      	ldrb	r2, [r7, #23]
 8010eee:	79fb      	ldrb	r3, [r7, #7]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d3d3      	bcc.n	8010e9c <IntToUnicode+0x18>
  }
}
 8010ef4:	bf00      	nop
 8010ef6:	bf00      	nop
 8010ef8:	371c      	adds	r7, #28
 8010efa:	46bd      	mov	sp, r7
 8010efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f00:	4770      	bx	lr
	...

08010f04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b08a      	sub	sp, #40	; 0x28
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f0c:	f107 0314 	add.w	r3, r7, #20
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]
 8010f14:	605a      	str	r2, [r3, #4]
 8010f16:	609a      	str	r2, [r3, #8]
 8010f18:	60da      	str	r2, [r3, #12]
 8010f1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f24:	d13a      	bne.n	8010f9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f26:	2300      	movs	r3, #0
 8010f28:	613b      	str	r3, [r7, #16]
 8010f2a:	4b1e      	ldr	r3, [pc, #120]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f2e:	4a1d      	ldr	r2, [pc, #116]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f30:	f043 0301 	orr.w	r3, r3, #1
 8010f34:	6313      	str	r3, [r2, #48]	; 0x30
 8010f36:	4b1b      	ldr	r3, [pc, #108]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f3a:	f003 0301 	and.w	r3, r3, #1
 8010f3e:	613b      	str	r3, [r7, #16]
 8010f40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010f42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f48:	2302      	movs	r3, #2
 8010f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f50:	2303      	movs	r3, #3
 8010f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f54:	230a      	movs	r3, #10
 8010f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f58:	f107 0314 	add.w	r3, r7, #20
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4812      	ldr	r0, [pc, #72]	; (8010fa8 <HAL_PCD_MspInit+0xa4>)
 8010f60:	f7f1 fd7a 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010f64:	4b0f      	ldr	r3, [pc, #60]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f68:	4a0e      	ldr	r2, [pc, #56]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8010f70:	2300      	movs	r3, #0
 8010f72:	60fb      	str	r3, [r7, #12]
 8010f74:	4b0b      	ldr	r3, [pc, #44]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f78:	4a0a      	ldr	r2, [pc, #40]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8010f80:	4b08      	ldr	r3, [pc, #32]	; (8010fa4 <HAL_PCD_MspInit+0xa0>)
 8010f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f88:	60fb      	str	r3, [r7, #12]
 8010f8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	2105      	movs	r1, #5
 8010f90:	2043      	movs	r0, #67	; 0x43
 8010f92:	f7f1 f916 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010f96:	2043      	movs	r0, #67	; 0x43
 8010f98:	f7f1 f92f 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f9c:	bf00      	nop
 8010f9e:	3728      	adds	r7, #40	; 0x28
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	40023800 	.word	0x40023800
 8010fa8:	40020000 	.word	0x40020000

08010fac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	4610      	mov	r0, r2
 8010fc4:	f7fc fc05 	bl	800d7d2 <USBD_LL_SetupStage>
}
 8010fc8:	bf00      	nop
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
 8010fd8:	460b      	mov	r3, r1
 8010fda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010fe2:	78fa      	ldrb	r2, [r7, #3]
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	00db      	lsls	r3, r3, #3
 8010fea:	4413      	add	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	440b      	add	r3, r1
 8010ff0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	78fb      	ldrb	r3, [r7, #3]
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	f7fc fc3f 	bl	800d87c <USBD_LL_DataOutStage>
}
 8010ffe:	bf00      	nop
 8011000:	3708      	adds	r7, #8
 8011002:	46bd      	mov	sp, r7
 8011004:	bd80      	pop	{r7, pc}

08011006 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	460b      	mov	r3, r1
 8011010:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011018:	78fa      	ldrb	r2, [r7, #3]
 801101a:	6879      	ldr	r1, [r7, #4]
 801101c:	4613      	mov	r3, r2
 801101e:	00db      	lsls	r3, r3, #3
 8011020:	4413      	add	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	440b      	add	r3, r1
 8011026:	334c      	adds	r3, #76	; 0x4c
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	78fb      	ldrb	r3, [r7, #3]
 801102c:	4619      	mov	r1, r3
 801102e:	f7fc fcd8 	bl	800d9e2 <USBD_LL_DataInStage>
}
 8011032:	bf00      	nop
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}

0801103a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801103a:	b580      	push	{r7, lr}
 801103c:	b082      	sub	sp, #8
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011048:	4618      	mov	r0, r3
 801104a:	f7fc fe0c 	bl	800dc66 <USBD_LL_SOF>
}
 801104e:	bf00      	nop
 8011050:	3708      	adds	r7, #8
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b084      	sub	sp, #16
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801105e:	2301      	movs	r3, #1
 8011060:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	2b02      	cmp	r3, #2
 8011068:	d001      	beq.n	801106e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801106a:	f7ef fdab 	bl	8000bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011074:	7bfa      	ldrb	r2, [r7, #15]
 8011076:	4611      	mov	r1, r2
 8011078:	4618      	mov	r0, r3
 801107a:	f7fc fdb6 	bl	800dbea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011084:	4618      	mov	r0, r3
 8011086:	f7fc fd5e 	bl	800db46 <USBD_LL_Reset>
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fc fdb1 	bl	800dc0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	6812      	ldr	r2, [r2, #0]
 80110b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80110ba:	f043 0301 	orr.w	r3, r3, #1
 80110be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a1b      	ldr	r3, [r3, #32]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d005      	beq.n	80110d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <HAL_PCD_SuspendCallback+0x48>)
 80110ca:	691b      	ldr	r3, [r3, #16]
 80110cc:	4a03      	ldr	r2, [pc, #12]	; (80110dc <HAL_PCD_SuspendCallback+0x48>)
 80110ce:	f043 0306 	orr.w	r3, r3, #6
 80110d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80110d4:	bf00      	nop
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	e000ed00 	.word	0xe000ed00

080110e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fc fda1 	bl	800dc36 <USBD_LL_Resume>
}
 80110f4:	bf00      	nop
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	460b      	mov	r3, r1
 8011106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801110e:	78fa      	ldrb	r2, [r7, #3]
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7fc fdf9 	bl	800dd0a <USBD_LL_IsoOUTIncomplete>
}
 8011118:	bf00      	nop
 801111a:	3708      	adds	r7, #8
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	460b      	mov	r3, r1
 801112a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011132:	78fa      	ldrb	r2, [r7, #3]
 8011134:	4611      	mov	r1, r2
 8011136:	4618      	mov	r0, r3
 8011138:	f7fc fdb5 	bl	800dca6 <USBD_LL_IsoINIncomplete>
}
 801113c:	bf00      	nop
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011152:	4618      	mov	r0, r3
 8011154:	f7fc fe0b 	bl	800dd6e <USBD_LL_DevConnected>
}
 8011158:	bf00      	nop
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801116e:	4618      	mov	r0, r3
 8011170:	f7fc fe08 	bl	800dd84 <USBD_LL_DevDisconnected>
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d13c      	bne.n	8011206 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801118c:	4a20      	ldr	r2, [pc, #128]	; (8011210 <USBD_LL_Init+0x94>)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4a1e      	ldr	r2, [pc, #120]	; (8011210 <USBD_LL_Init+0x94>)
 8011198:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801119c:	4b1c      	ldr	r3, [pc, #112]	; (8011210 <USBD_LL_Init+0x94>)
 801119e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80111a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80111a4:	4b1a      	ldr	r3, [pc, #104]	; (8011210 <USBD_LL_Init+0x94>)
 80111a6:	2204      	movs	r2, #4
 80111a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80111aa:	4b19      	ldr	r3, [pc, #100]	; (8011210 <USBD_LL_Init+0x94>)
 80111ac:	2202      	movs	r2, #2
 80111ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80111b0:	4b17      	ldr	r3, [pc, #92]	; (8011210 <USBD_LL_Init+0x94>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80111b6:	4b16      	ldr	r3, [pc, #88]	; (8011210 <USBD_LL_Init+0x94>)
 80111b8:	2202      	movs	r2, #2
 80111ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80111bc:	4b14      	ldr	r3, [pc, #80]	; (8011210 <USBD_LL_Init+0x94>)
 80111be:	2200      	movs	r2, #0
 80111c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80111c2:	4b13      	ldr	r3, [pc, #76]	; (8011210 <USBD_LL_Init+0x94>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80111c8:	4b11      	ldr	r3, [pc, #68]	; (8011210 <USBD_LL_Init+0x94>)
 80111ca:	2200      	movs	r2, #0
 80111cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80111ce:	4b10      	ldr	r3, [pc, #64]	; (8011210 <USBD_LL_Init+0x94>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80111d4:	4b0e      	ldr	r3, [pc, #56]	; (8011210 <USBD_LL_Init+0x94>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80111da:	480d      	ldr	r0, [pc, #52]	; (8011210 <USBD_LL_Init+0x94>)
 80111dc:	f7f3 fe9d 	bl	8004f1a <HAL_PCD_Init>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d001      	beq.n	80111ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80111e6:	f7ef fced 	bl	8000bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80111ea:	2180      	movs	r1, #128	; 0x80
 80111ec:	4808      	ldr	r0, [pc, #32]	; (8011210 <USBD_LL_Init+0x94>)
 80111ee:	f7f5 f8f4 	bl	80063da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80111f2:	2240      	movs	r2, #64	; 0x40
 80111f4:	2100      	movs	r1, #0
 80111f6:	4806      	ldr	r0, [pc, #24]	; (8011210 <USBD_LL_Init+0x94>)
 80111f8:	f7f5 f8a8 	bl	800634c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80111fc:	2280      	movs	r2, #128	; 0x80
 80111fe:	2101      	movs	r1, #1
 8011200:	4803      	ldr	r0, [pc, #12]	; (8011210 <USBD_LL_Init+0x94>)
 8011202:	f7f5 f8a3 	bl	800634c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011206:	2300      	movs	r3, #0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20009530 	.word	0x20009530

08011214 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801121c:	2300      	movs	r3, #0
 801121e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801122a:	4618      	mov	r0, r3
 801122c:	f7f3 ff92 	bl	8005154 <HAL_PCD_Start>
 8011230:	4603      	mov	r3, r0
 8011232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011234:	7bfb      	ldrb	r3, [r7, #15]
 8011236:	4618      	mov	r0, r3
 8011238:	f000 f942 	bl	80114c0 <USBD_Get_USB_Status>
 801123c:	4603      	mov	r3, r0
 801123e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011240:	7bbb      	ldrb	r3, [r7, #14]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b084      	sub	sp, #16
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	4608      	mov	r0, r1
 8011254:	4611      	mov	r1, r2
 8011256:	461a      	mov	r2, r3
 8011258:	4603      	mov	r3, r0
 801125a:	70fb      	strb	r3, [r7, #3]
 801125c:	460b      	mov	r3, r1
 801125e:	70bb      	strb	r3, [r7, #2]
 8011260:	4613      	mov	r3, r2
 8011262:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011264:	2300      	movs	r3, #0
 8011266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011272:	78bb      	ldrb	r3, [r7, #2]
 8011274:	883a      	ldrh	r2, [r7, #0]
 8011276:	78f9      	ldrb	r1, [r7, #3]
 8011278:	f7f4 fc63 	bl	8005b42 <HAL_PCD_EP_Open>
 801127c:	4603      	mov	r3, r0
 801127e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011280:	7bfb      	ldrb	r3, [r7, #15]
 8011282:	4618      	mov	r0, r3
 8011284:	f000 f91c 	bl	80114c0 <USBD_Get_USB_Status>
 8011288:	4603      	mov	r3, r0
 801128a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801128c:	7bbb      	ldrb	r3, [r7, #14]
}
 801128e:	4618      	mov	r0, r3
 8011290:	3710      	adds	r7, #16
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}

08011296 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011296:	b580      	push	{r7, lr}
 8011298:	b084      	sub	sp, #16
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	460b      	mov	r3, r1
 80112a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a6:	2300      	movs	r3, #0
 80112a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112b0:	78fa      	ldrb	r2, [r7, #3]
 80112b2:	4611      	mov	r1, r2
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f4 fcac 	bl	8005c12 <HAL_PCD_EP_Close>
 80112ba:	4603      	mov	r3, r0
 80112bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112be:	7bfb      	ldrb	r3, [r7, #15]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f000 f8fd 	bl	80114c0 <USBD_Get_USB_Status>
 80112c6:	4603      	mov	r3, r0
 80112c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ee:	78fa      	ldrb	r2, [r7, #3]
 80112f0:	4611      	mov	r1, r2
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7f4 fd84 	bl	8005e00 <HAL_PCD_EP_SetStall>
 80112f8:	4603      	mov	r3, r0
 80112fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112fc:	7bfb      	ldrb	r3, [r7, #15]
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 f8de 	bl	80114c0 <USBD_Get_USB_Status>
 8011304:	4603      	mov	r3, r0
 8011306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011308:	7bbb      	ldrb	r3, [r7, #14]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011312:	b580      	push	{r7, lr}
 8011314:	b084      	sub	sp, #16
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
 801131a:	460b      	mov	r3, r1
 801131c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011322:	2300      	movs	r3, #0
 8011324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801132c:	78fa      	ldrb	r2, [r7, #3]
 801132e:	4611      	mov	r1, r2
 8011330:	4618      	mov	r0, r3
 8011332:	f7f4 fdc9 	bl	8005ec8 <HAL_PCD_EP_ClrStall>
 8011336:	4603      	mov	r3, r0
 8011338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	4618      	mov	r0, r3
 801133e:	f000 f8bf 	bl	80114c0 <USBD_Get_USB_Status>
 8011342:	4603      	mov	r3, r0
 8011344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011346:	7bbb      	ldrb	r3, [r7, #14]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	460b      	mov	r3, r1
 801135a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011362:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011368:	2b00      	cmp	r3, #0
 801136a:	da0b      	bge.n	8011384 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801136c:	78fb      	ldrb	r3, [r7, #3]
 801136e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011372:	68f9      	ldr	r1, [r7, #12]
 8011374:	4613      	mov	r3, r2
 8011376:	00db      	lsls	r3, r3, #3
 8011378:	4413      	add	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	440b      	add	r3, r1
 801137e:	333e      	adds	r3, #62	; 0x3e
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	e00b      	b.n	801139c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011384:	78fb      	ldrb	r3, [r7, #3]
 8011386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801138a:	68f9      	ldr	r1, [r7, #12]
 801138c:	4613      	mov	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	4413      	add	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	440b      	add	r3, r1
 8011396:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801139a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801139c:	4618      	mov	r0, r3
 801139e:	3714      	adds	r7, #20
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr

080113a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	460b      	mov	r3, r1
 80113b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113b4:	2300      	movs	r3, #0
 80113b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113b8:	2300      	movs	r3, #0
 80113ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113c2:	78fa      	ldrb	r2, [r7, #3]
 80113c4:	4611      	mov	r1, r2
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7f4 fb96 	bl	8005af8 <HAL_PCD_SetAddress>
 80113cc:	4603      	mov	r3, r0
 80113ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113d0:	7bfb      	ldrb	r3, [r7, #15]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 f874 	bl	80114c0 <USBD_Get_USB_Status>
 80113d8:	4603      	mov	r3, r0
 80113da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3710      	adds	r7, #16
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}

080113e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80113e6:	b580      	push	{r7, lr}
 80113e8:	b086      	sub	sp, #24
 80113ea:	af00      	add	r7, sp, #0
 80113ec:	60f8      	str	r0, [r7, #12]
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	603b      	str	r3, [r7, #0]
 80113f2:	460b      	mov	r3, r1
 80113f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113f6:	2300      	movs	r3, #0
 80113f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113fa:	2300      	movs	r3, #0
 80113fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011404:	7af9      	ldrb	r1, [r7, #11]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	f7f4 fcaf 	bl	8005d6c <HAL_PCD_EP_Transmit>
 801140e:	4603      	mov	r3, r0
 8011410:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	4618      	mov	r0, r3
 8011416:	f000 f853 	bl	80114c0 <USBD_Get_USB_Status>
 801141a:	4603      	mov	r3, r0
 801141c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801141e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3718      	adds	r7, #24
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b086      	sub	sp, #24
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	607a      	str	r2, [r7, #4]
 8011432:	603b      	str	r3, [r7, #0]
 8011434:	460b      	mov	r3, r1
 8011436:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801143c:	2300      	movs	r3, #0
 801143e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011446:	7af9      	ldrb	r1, [r7, #11]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	f7f4 fc2b 	bl	8005ca6 <HAL_PCD_EP_Receive>
 8011450:	4603      	mov	r3, r0
 8011452:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011454:	7dfb      	ldrb	r3, [r7, #23]
 8011456:	4618      	mov	r0, r3
 8011458:	f000 f832 	bl	80114c0 <USBD_Get_USB_Status>
 801145c:	4603      	mov	r3, r0
 801145e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011460:	7dbb      	ldrb	r3, [r7, #22]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3718      	adds	r7, #24
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801147c:	78fa      	ldrb	r2, [r7, #3]
 801147e:	4611      	mov	r1, r2
 8011480:	4618      	mov	r0, r3
 8011482:	f7f4 fc5b 	bl	8005d3c <HAL_PCD_EP_GetRxCount>
 8011486:	4603      	mov	r3, r0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011498:	4b03      	ldr	r3, [pc, #12]	; (80114a8 <USBD_static_malloc+0x18>)
}
 801149a:	4618      	mov	r0, r3
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	20009a3c 	.word	0x20009a3c

080114ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]

}
 80114b4:	bf00      	nop
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr

080114c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b085      	sub	sp, #20
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	4603      	mov	r3, r0
 80114c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80114ce:	79fb      	ldrb	r3, [r7, #7]
 80114d0:	2b03      	cmp	r3, #3
 80114d2:	d817      	bhi.n	8011504 <USBD_Get_USB_Status+0x44>
 80114d4:	a201      	add	r2, pc, #4	; (adr r2, 80114dc <USBD_Get_USB_Status+0x1c>)
 80114d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114da:	bf00      	nop
 80114dc:	080114ed 	.word	0x080114ed
 80114e0:	080114f3 	.word	0x080114f3
 80114e4:	080114f9 	.word	0x080114f9
 80114e8:	080114ff 	.word	0x080114ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	73fb      	strb	r3, [r7, #15]
    break;
 80114f0:	e00b      	b.n	801150a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80114f2:	2303      	movs	r3, #3
 80114f4:	73fb      	strb	r3, [r7, #15]
    break;
 80114f6:	e008      	b.n	801150a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80114f8:	2301      	movs	r3, #1
 80114fa:	73fb      	strb	r3, [r7, #15]
    break;
 80114fc:	e005      	b.n	801150a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80114fe:	2303      	movs	r3, #3
 8011500:	73fb      	strb	r3, [r7, #15]
    break;
 8011502:	e002      	b.n	801150a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011504:	2303      	movs	r3, #3
 8011506:	73fb      	strb	r3, [r7, #15]
    break;
 8011508:	bf00      	nop
  }
  return usb_status;
 801150a:	7bfb      	ldrb	r3, [r7, #15]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3714      	adds	r7, #20
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <Checksum>:
 * 	chu kỳ chessclock gửi tín hiệu về là 5s */
uint8_t ping_chessclock=7;
extern uint8_t sys_error;

uint8_t Checksum(uint8_t *data, uint8_t length)
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	460b      	mov	r3, r1
 8011522:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t Sum = 0;
 8011524:	2300      	movs	r3, #0
 8011526:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 8011528:	2300      	movs	r3, #0
 801152a:	73fb      	strb	r3, [r7, #15]
 801152c:	e009      	b.n	8011542 <Checksum+0x2a>
		Sum = Sum + data[count];
 801152e:	7bfb      	ldrb	r3, [r7, #15]
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	4413      	add	r3, r2
 8011534:	781a      	ldrb	r2, [r3, #0]
 8011536:	7bbb      	ldrb	r3, [r7, #14]
 8011538:	4413      	add	r3, r2
 801153a:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 801153c:	7bfb      	ldrb	r3, [r7, #15]
 801153e:	3301      	adds	r3, #1
 8011540:	73fb      	strb	r3, [r7, #15]
 8011542:	7bfa      	ldrb	r2, [r7, #15]
 8011544:	78fb      	ldrb	r3, [r7, #3]
 8011546:	429a      	cmp	r2, r3
 8011548:	d3f1      	bcc.n	801152e <Checksum+0x16>
	Sum = -Sum;
 801154a:	7bbb      	ldrb	r3, [r7, #14]
 801154c:	425b      	negs	r3, r3
 801154e:	73bb      	strb	r3, [r7, #14]
	return (Sum & 0xFF);
 8011550:	7bbb      	ldrb	r3, [r7, #14]
}
 8011552:	4618      	mov	r0, r3
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
	...

08011560 <HAL_I2C_AddrCallback>:

// I2C-Interface , callback khi co  read/write i2c
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	460b      	mov	r3, r1
 801156a:	70fb      	strb	r3, [r7, #3]
 801156c:	4613      	mov	r3, r2
 801156e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C1)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4a07      	ldr	r2, [pc, #28]	; (8011594 <HAL_I2C_AddrCallback+0x34>)
 8011576:	4293      	cmp	r3, r2
 8011578:	d108      	bne.n	801158c <HAL_I2C_AddrCallback+0x2c>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // neu i2c master write to slave
 801157a:	78fb      	ldrb	r3, [r7, #3]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d105      	bne.n	801158c <HAL_I2C_AddrCallback+0x2c>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1,data_chessclock,15,I2C_FIRST_AND_LAST_FRAME); // thi luu data bang dma
 8011580:	2308      	movs	r3, #8
 8011582:	220f      	movs	r2, #15
 8011584:	4904      	ldr	r1, [pc, #16]	; (8011598 <HAL_I2C_AddrCallback+0x38>)
 8011586:	4805      	ldr	r0, [pc, #20]	; (801159c <HAL_I2C_AddrCallback+0x3c>)
 8011588:	f7f1 fd48 	bl	800301c <HAL_I2C_Slave_Seq_Receive_DMA>
		}
	}
}
 801158c:	bf00      	nop
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	40005400 	.word	0x40005400
 8011598:	20009c60 	.word	0x20009c60
 801159c:	200043dc 	.word	0x200043dc

080115a0 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);  // bat laij ngat
 80115a8:	4803      	ldr	r0, [pc, #12]	; (80115b8 <HAL_I2C_ListenCpltCallback+0x18>)
 80115aa:	f7f1 fe71 	bl	8003290 <HAL_I2C_EnableListen_IT>
}
 80115ae:	bf00      	nop
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	200043dc 	.word	0x200043dc

080115bc <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1)
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	4a0d      	ldr	r2, [pc, #52]	; (8011600 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d113      	bne.n	80115f6 <HAL_I2C_SlaveRxCpltCallback+0x3a>
	{
		crcval = Checksum(data_chessclock, 14);
 80115ce:	210e      	movs	r1, #14
 80115d0:	480c      	ldr	r0, [pc, #48]	; (8011604 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80115d2:	f7ff ffa1 	bl	8011518 <Checksum>
 80115d6:	4603      	mov	r3, r0
 80115d8:	461a      	mov	r2, r3
 80115da:	4b0b      	ldr	r3, [pc, #44]	; (8011608 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80115dc:	701a      	strb	r2, [r3, #0]
		if(crcval == data_chessclock[14]){
 80115de:	4b09      	ldr	r3, [pc, #36]	; (8011604 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80115e0:	7b9a      	ldrb	r2, [r3, #14]
 80115e2:	4b09      	ldr	r3, [pc, #36]	; (8011608 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d105      	bne.n	80115f6 <HAL_I2C_SlaveRxCpltCallback+0x3a>
			chessclock_interrup = true; // bat flag khi co data clock
 80115ea:	4b08      	ldr	r3, [pc, #32]	; (801160c <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80115ec:	2201      	movs	r2, #1
 80115ee:	701a      	strb	r2, [r3, #0]
			ping_chessclock = 7;
 80115f0:	4b07      	ldr	r3, [pc, #28]	; (8011610 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 80115f2:	2207      	movs	r2, #7
 80115f4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80115f6:	bf00      	nop
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	40005400 	.word	0x40005400
 8011604:	20009c60 	.word	0x20009c60
 8011608:	20009c6f 	.word	0x20009c6f
 801160c:	20009c5c 	.word	0x20009c5c
 8011610:	200000fe 	.word	0x200000fe

08011614 <HAL_I2C_ErrorCallback>:
// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	4a4e      	ldr	r2, [pc, #312]	; (801175c <HAL_I2C_ErrorCallback+0x148>)
 8011622:	4293      	cmp	r3, r2
 8011624:	f040 8096 	bne.w	8011754 <HAL_I2C_ErrorCallback+0x140>
		//HAL_NVIC_SystemReset();
		uint32_t i2c_error = HAL_I2C_GetError(&hi2c1);
 8011628:	484d      	ldr	r0, [pc, #308]	; (8011760 <HAL_I2C_ErrorCallback+0x14c>)
 801162a:	f7f2 f8bb 	bl	80037a4 <HAL_I2C_GetError>
 801162e:	60f8      	str	r0, [r7, #12]
		switch(i2c_error){
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011636:	d07b      	beq.n	8011730 <HAL_I2C_ErrorCallback+0x11c>
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801163e:	d87b      	bhi.n	8011738 <HAL_I2C_ErrorCallback+0x124>
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2b80      	cmp	r3, #128	; 0x80
 8011644:	d070      	beq.n	8011728 <HAL_I2C_ErrorCallback+0x114>
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b80      	cmp	r3, #128	; 0x80
 801164a:	d875      	bhi.n	8011738 <HAL_I2C_ErrorCallback+0x124>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2b20      	cmp	r3, #32
 8011650:	d84a      	bhi.n	80116e8 <HAL_I2C_ErrorCallback+0xd4>
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d06f      	beq.n	8011738 <HAL_I2C_ErrorCallback+0x124>
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	3b01      	subs	r3, #1
 801165c:	2b1f      	cmp	r3, #31
 801165e:	d86b      	bhi.n	8011738 <HAL_I2C_ErrorCallback+0x124>
 8011660:	a201      	add	r2, pc, #4	; (adr r2, 8011668 <HAL_I2C_ErrorCallback+0x54>)
 8011662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011666:	bf00      	nop
 8011668:	080116f1 	.word	0x080116f1
 801166c:	080116f9 	.word	0x080116f9
 8011670:	08011739 	.word	0x08011739
 8011674:	08011701 	.word	0x08011701
 8011678:	08011739 	.word	0x08011739
 801167c:	08011739 	.word	0x08011739
 8011680:	08011739 	.word	0x08011739
 8011684:	08011709 	.word	0x08011709
 8011688:	08011739 	.word	0x08011739
 801168c:	08011739 	.word	0x08011739
 8011690:	08011739 	.word	0x08011739
 8011694:	08011739 	.word	0x08011739
 8011698:	08011739 	.word	0x08011739
 801169c:	08011739 	.word	0x08011739
 80116a0:	08011739 	.word	0x08011739
 80116a4:	08011711 	.word	0x08011711
 80116a8:	08011739 	.word	0x08011739
 80116ac:	08011739 	.word	0x08011739
 80116b0:	08011739 	.word	0x08011739
 80116b4:	08011739 	.word	0x08011739
 80116b8:	08011739 	.word	0x08011739
 80116bc:	08011739 	.word	0x08011739
 80116c0:	08011739 	.word	0x08011739
 80116c4:	08011739 	.word	0x08011739
 80116c8:	08011739 	.word	0x08011739
 80116cc:	08011739 	.word	0x08011739
 80116d0:	08011739 	.word	0x08011739
 80116d4:	08011739 	.word	0x08011739
 80116d8:	08011739 	.word	0x08011739
 80116dc:	08011739 	.word	0x08011739
 80116e0:	08011739 	.word	0x08011739
 80116e4:	08011719 	.word	0x08011719
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b40      	cmp	r3, #64	; 0x40
 80116ec:	d018      	beq.n	8011720 <HAL_I2C_ErrorCallback+0x10c>
 80116ee:	e023      	b.n	8011738 <HAL_I2C_ErrorCallback+0x124>
		case HAL_I2C_ERROR_BERR: sys_error = BOARD_I2C_ERROR_BERR;	break;
 80116f0:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 80116f2:	2201      	movs	r2, #1
 80116f4:	701a      	strb	r2, [r3, #0]
 80116f6:	e023      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_ARLO: sys_error = BOARD_I2C_ERROR_ARLO;	break;
 80116f8:	4b1a      	ldr	r3, [pc, #104]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 80116fa:	2202      	movs	r2, #2
 80116fc:	701a      	strb	r2, [r3, #0]
 80116fe:	e01f      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_AF:	 sys_error = BOARD_I2C_ERROR_AF;	break;
 8011700:	4b18      	ldr	r3, [pc, #96]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 8011702:	2203      	movs	r2, #3
 8011704:	701a      	strb	r2, [r3, #0]
 8011706:	e01b      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_OVR:	 sys_error = BOARD_I2C_ERROR_OVR;	break;
 8011708:	4b16      	ldr	r3, [pc, #88]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 801170a:	2204      	movs	r2, #4
 801170c:	701a      	strb	r2, [r3, #0]
 801170e:	e017      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_DMA:	 sys_error = BOARD_I2C_ERROR_DMA;	break;
 8011710:	4b14      	ldr	r3, [pc, #80]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 8011712:	2205      	movs	r2, #5
 8011714:	701a      	strb	r2, [r3, #0]
 8011716:	e013      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_TIMEOUT: sys_error = BOARD_I2C_ERROR_TIMEOUT;	break;
 8011718:	4b12      	ldr	r3, [pc, #72]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 801171a:	2206      	movs	r2, #6
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	e00f      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_SIZE:	sys_error = BOARD_I2C_ERROR_SIZE;	break;
 8011720:	4b10      	ldr	r3, [pc, #64]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 8011722:	2207      	movs	r2, #7
 8011724:	701a      	strb	r2, [r3, #0]
 8011726:	e00b      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_ERROR_DMA_PARAM: sys_error = BOARD_I2C_ERROR_DMA_PARAM; break;
 8011728:	4b0e      	ldr	r3, [pc, #56]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 801172a:	2208      	movs	r2, #8
 801172c:	701a      	strb	r2, [r3, #0]
 801172e:	e007      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		case HAL_I2C_WRONG_START:	sys_error = BOARD_I2C_WRONG_START; break;
 8011730:	4b0c      	ldr	r3, [pc, #48]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 8011732:	2209      	movs	r2, #9
 8011734:	701a      	strb	r2, [r3, #0]
 8011736:	e003      	b.n	8011740 <HAL_I2C_ErrorCallback+0x12c>
		default: sys_error = BOARD_SYS_ERROR; break;
 8011738:	4b0a      	ldr	r3, [pc, #40]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 801173a:	2210      	movs	r2, #16
 801173c:	701a      	strb	r2, [r3, #0]
 801173e:	bf00      	nop
		}
		BackupError_write(sys_error);
 8011740:	4b08      	ldr	r3, [pc, #32]	; (8011764 <HAL_I2C_ErrorCallback+0x150>)
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	f000 fb65 	bl	8011e14 <BackupError_write>
		HAL_Delay(100);
 801174a:	2064      	movs	r0, #100	; 0x64
 801174c:	f7f0 fc46 	bl	8001fdc <HAL_Delay>
		HAL_NVIC_SystemReset();
 8011750:	f7f0 fd61 	bl	8002216 <HAL_NVIC_SystemReset>
	}
}
 8011754:	bf00      	nop
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	40005400 	.word	0x40005400
 8011760:	200043dc 	.word	0x200043dc
 8011764:	2000449c 	.word	0x2000449c

08011768 <ChessClock_Init>:

void ChessClock_Init()
{
 8011768:	b580      	push	{r7, lr}
 801176a:	af00      	add	r7, sp, #0
	HAL_I2C_EnableListen_IT(&hi2c1);   // bat ngat I2C, khi co thao tac read/write
 801176c:	4802      	ldr	r0, [pc, #8]	; (8011778 <ChessClock_Init+0x10>)
 801176e:	f7f1 fd8f 	bl	8003290 <HAL_I2C_EnableListen_IT>
}
 8011772:	bf00      	nop
 8011774:	bd80      	pop	{r7, pc}
 8011776:	bf00      	nop
 8011778:	200043dc 	.word	0x200043dc

0801177c <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 801177c:	b580      	push	{r7, lr}
 801177e:	b082      	sub	sp, #8
 8011780:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 8011782:	2304      	movs	r3, #4
 8011784:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 8011786:	2200      	movs	r2, #0
 8011788:	2110      	movs	r1, #16
 801178a:	480b      	ldr	r0, [pc, #44]	; (80117b8 <WriteProtect+0x3c>)
 801178c:	f7f1 fae8 	bl	8002d60 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011790:	1d39      	adds	r1, r7, #4
 8011792:	2301      	movs	r3, #1
 8011794:	2201      	movs	r2, #1
 8011796:	4809      	ldr	r0, [pc, #36]	; (80117bc <WriteProtect+0x40>)
 8011798:	f7f5 ffeb 	bl	8007772 <HAL_SPI_Transmit>
 801179c:	4603      	mov	r3, r0
 801179e:	461a      	mov	r2, r3
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <WriteProtect+0x44>)
 80117a2:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80117a4:	2201      	movs	r2, #1
 80117a6:	2110      	movs	r1, #16
 80117a8:	4803      	ldr	r0, [pc, #12]	; (80117b8 <WriteProtect+0x3c>)
 80117aa:	f7f1 fad9 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80117ae:	bf00      	nop
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	40020000 	.word	0x40020000
 80117bc:	200044c0 	.word	0x200044c0
 80117c0:	20009ca6 	.word	0x20009ca6

080117c4 <WriteEnable>:
	MB85RS_CS_LOW;
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
	MB85RS_CS_HIGH;
	return reg[1];
}
void WriteEnable(){
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 80117ca:	2306      	movs	r3, #6
 80117cc:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 80117ce:	2200      	movs	r2, #0
 80117d0:	2110      	movs	r1, #16
 80117d2:	480b      	ldr	r0, [pc, #44]	; (8011800 <WriteEnable+0x3c>)
 80117d4:	f7f1 fac4 	bl	8002d60 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 80117d8:	1d39      	adds	r1, r7, #4
 80117da:	2301      	movs	r3, #1
 80117dc:	2201      	movs	r2, #1
 80117de:	4809      	ldr	r0, [pc, #36]	; (8011804 <WriteEnable+0x40>)
 80117e0:	f7f5 ffc7 	bl	8007772 <HAL_SPI_Transmit>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	4b07      	ldr	r3, [pc, #28]	; (8011808 <WriteEnable+0x44>)
 80117ea:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80117ec:	2201      	movs	r2, #1
 80117ee:	2110      	movs	r1, #16
 80117f0:	4803      	ldr	r0, [pc, #12]	; (8011800 <WriteEnable+0x3c>)
 80117f2:	f7f1 fab5 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80117f6:	bf00      	nop
 80117f8:	3708      	adds	r7, #8
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	40020000 	.word	0x40020000
 8011804:	200044c0 	.word	0x200044c0
 8011808:	20009ca6 	.word	0x20009ca6

0801180c <MB85RS_write>:

void MB85RS_write(unsigned int address, unsigned char *buffer, unsigned int size)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b086      	sub	sp, #24
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
	Mb85rs_dataTx[0] = WRITE;
 8011818:	4b1c      	ldr	r3, [pc, #112]	; (801188c <MB85RS_write+0x80>)
 801181a:	2202      	movs	r2, #2
 801181c:	701a      	strb	r2, [r3, #0]
	Mb85rs_dataTx[1] = (char)(address >> 8);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	0a1b      	lsrs	r3, r3, #8
 8011822:	b2da      	uxtb	r2, r3
 8011824:	4b19      	ldr	r3, [pc, #100]	; (801188c <MB85RS_write+0x80>)
 8011826:	705a      	strb	r2, [r3, #1]
	Mb85rs_dataTx[2] = (char)(address);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	b2da      	uxtb	r2, r3
 801182c:	4b17      	ldr	r3, [pc, #92]	; (801188c <MB85RS_write+0x80>)
 801182e:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<size;i++){
 8011830:	2300      	movs	r3, #0
 8011832:	617b      	str	r3, [r7, #20]
 8011834:	e00a      	b.n	801184c <MB85RS_write+0x40>
		Mb85rs_dataTx[3+i] = buffer[i];
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	68ba      	ldr	r2, [r7, #8]
 801183a:	441a      	add	r2, r3
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3303      	adds	r3, #3
 8011840:	7811      	ldrb	r1, [r2, #0]
 8011842:	4a12      	ldr	r2, [pc, #72]	; (801188c <MB85RS_write+0x80>)
 8011844:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<size;i++){
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	3301      	adds	r3, #1
 801184a:	617b      	str	r3, [r7, #20]
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	687a      	ldr	r2, [r7, #4]
 8011850:	429a      	cmp	r2, r3
 8011852:	d8f0      	bhi.n	8011836 <MB85RS_write+0x2a>
	}
	WriteEnable();
 8011854:	f7ff ffb6 	bl	80117c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011858:	2200      	movs	r2, #0
 801185a:	2110      	movs	r1, #16
 801185c:	480c      	ldr	r0, [pc, #48]	; (8011890 <MB85RS_write+0x84>)
 801185e:	f7f1 fa7f 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Mb85rs_dataTx, size+3, 10);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	b29b      	uxth	r3, r3
 8011866:	3303      	adds	r3, #3
 8011868:	b29a      	uxth	r2, r3
 801186a:	230a      	movs	r3, #10
 801186c:	4907      	ldr	r1, [pc, #28]	; (801188c <MB85RS_write+0x80>)
 801186e:	4809      	ldr	r0, [pc, #36]	; (8011894 <MB85RS_write+0x88>)
 8011870:	f7f5 ff7f 	bl	8007772 <HAL_SPI_Transmit>
	MB85RS_CS_HIGH;
 8011874:	2201      	movs	r2, #1
 8011876:	2110      	movs	r1, #16
 8011878:	4805      	ldr	r0, [pc, #20]	; (8011890 <MB85RS_write+0x84>)
 801187a:	f7f1 fa71 	bl	8002d60 <HAL_GPIO_WritePin>
	WriteProtect();
 801187e:	f7ff ff7d 	bl	801177c <WriteProtect>
}
 8011882:	bf00      	nop
 8011884:	3718      	adds	r7, #24
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	20009c74 	.word	0x20009c74
 8011890:	40020000 	.word	0x40020000
 8011894:	200044c0 	.word	0x200044c0

08011898 <MB85RS_read>:
void MB85RS_read(unsigned int address, unsigned char *buffer, unsigned int size)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b086      	sub	sp, #24
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[3];
	cmd[0]=READ;
 80118a4:	2303      	movs	r3, #3
 80118a6:	753b      	strb	r3, [r7, #20]
	cmd[1]=(char)(address >> 8);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	0a1b      	lsrs	r3, r3, #8
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	757b      	strb	r3, [r7, #21]
	cmd[2] = (char)(address);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	75bb      	strb	r3, [r7, #22]
	MB85RS_CS_LOW;
 80118b6:	2200      	movs	r2, #0
 80118b8:	2110      	movs	r1, #16
 80118ba:	480d      	ldr	r0, [pc, #52]	; (80118f0 <MB85RS_read+0x58>)
 80118bc:	f7f1 fa50 	bl	8002d60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 3, 10);
 80118c0:	f107 0114 	add.w	r1, r7, #20
 80118c4:	230a      	movs	r3, #10
 80118c6:	2203      	movs	r2, #3
 80118c8:	480a      	ldr	r0, [pc, #40]	; (80118f4 <MB85RS_read+0x5c>)
 80118ca:	f7f5 ff52 	bl	8007772 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	230a      	movs	r3, #10
 80118d4:	68b9      	ldr	r1, [r7, #8]
 80118d6:	4807      	ldr	r0, [pc, #28]	; (80118f4 <MB85RS_read+0x5c>)
 80118d8:	f7f6 f887 	bl	80079ea <HAL_SPI_Receive>
	MB85RS_CS_HIGH;
 80118dc:	2201      	movs	r2, #1
 80118de:	2110      	movs	r1, #16
 80118e0:	4803      	ldr	r0, [pc, #12]	; (80118f0 <MB85RS_read+0x58>)
 80118e2:	f7f1 fa3d 	bl	8002d60 <HAL_GPIO_WritePin>
}
 80118e6:	bf00      	nop
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	40020000 	.word	0x40020000
 80118f4:	200044c0 	.word	0x200044c0

080118f8 <MB85RS_erase>:

void MB85RS_erase()
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b0a4      	sub	sp, #144	; 0x90
 80118fc:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80118fe:	2302      	movs	r3, #2
 8011900:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 8011904:	2300      	movs	r3, #0
 8011906:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 8011910:	f7ff ff58 	bl	80117c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011914:	2200      	movs	r2, #0
 8011916:	2110      	movs	r1, #16
 8011918:	481d      	ldr	r0, [pc, #116]	; (8011990 <MB85RS_erase+0x98>)
 801191a:	f7f1 fa21 	bl	8002d60 <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 801191e:	2300      	movs	r3, #0
 8011920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011924:	e00a      	b.n	801193c <MB85RS_erase+0x44>
		datanull[i]=0;
 8011926:	1d3a      	adds	r2, r7, #4
 8011928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801192c:	4413      	add	r3, r2
 801192e:	2200      	movs	r2, #0
 8011930:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 8011932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011936:	3301      	adds	r3, #1
 8011938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801193c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011940:	2b7f      	cmp	r3, #127	; 0x7f
 8011942:	ddf0      	ble.n	8011926 <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8011944:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8011948:	2364      	movs	r3, #100	; 0x64
 801194a:	2203      	movs	r2, #3
 801194c:	4811      	ldr	r0, [pc, #68]	; (8011994 <MB85RS_erase+0x9c>)
 801194e:	f7f5 ff10 	bl	8007772 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011952:	2300      	movs	r3, #0
 8011954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011958:	e00a      	b.n	8011970 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 801195a:	1d39      	adds	r1, r7, #4
 801195c:	2364      	movs	r3, #100	; 0x64
 801195e:	2280      	movs	r2, #128	; 0x80
 8011960:	480c      	ldr	r0, [pc, #48]	; (8011994 <MB85RS_erase+0x9c>)
 8011962:	f7f5 ff06 	bl	8007772 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801196a:	3301      	adds	r3, #1
 801196c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011978:	ddef      	ble.n	801195a <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 801197a:	2201      	movs	r2, #1
 801197c:	2110      	movs	r1, #16
 801197e:	4804      	ldr	r0, [pc, #16]	; (8011990 <MB85RS_erase+0x98>)
 8011980:	f7f1 f9ee 	bl	8002d60 <HAL_GPIO_WritePin>
	WriteProtect();
 8011984:	f7ff fefa 	bl	801177c <WriteProtect>
}
 8011988:	bf00      	nop
 801198a:	3790      	adds	r7, #144	; 0x90
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	40020000 	.word	0x40020000
 8011994:	200044c0 	.word	0x200044c0

08011998 <MB85RS_getPointSave>:


// get Điểm lưu FEN gần nhất ( thông tin được lưu ở Address cuối cùng)
void MB85RS_getPointSave(){
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
	uint8_t point[2];
	MB85RS_read(32766, point, 2);
 801199e:	1d3b      	adds	r3, r7, #4
 80119a0:	2202      	movs	r2, #2
 80119a2:	4619      	mov	r1, r3
 80119a4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80119a8:	f7ff ff76 	bl	8011898 <MB85RS_read>
	pointsave = point[0]*255 +point[1];
 80119ac:	793b      	ldrb	r3, [r7, #4]
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	461a      	mov	r2, r3
 80119b2:	0212      	lsls	r2, r2, #8
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	797b      	ldrb	r3, [r7, #5]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	4413      	add	r3, r2
 80119be:	b29a      	uxth	r2, r3
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <MB85RS_getPointSave+0x34>)
 80119c2:	801a      	strh	r2, [r3, #0]
}
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	20009c70 	.word	0x20009c70

080119d0 <MB85RS_WritePointSave>:
void MB85RS_WritePointSave(){
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
	if(pointsave >712) pointsave=0;
 80119d6:	4b14      	ldr	r3, [pc, #80]	; (8011a28 <MB85RS_WritePointSave+0x58>)
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 80119de:	d902      	bls.n	80119e6 <MB85RS_WritePointSave+0x16>
 80119e0:	4b11      	ldr	r3, [pc, #68]	; (8011a28 <MB85RS_WritePointSave+0x58>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	801a      	strh	r2, [r3, #0]
	uint8_t point[2];
	point[0] = pointsave/255;
 80119e6:	4b10      	ldr	r3, [pc, #64]	; (8011a28 <MB85RS_WritePointSave+0x58>)
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	4a10      	ldr	r2, [pc, #64]	; (8011a2c <MB85RS_WritePointSave+0x5c>)
 80119ec:	fba2 2303 	umull	r2, r3, r2, r3
 80119f0:	09db      	lsrs	r3, r3, #7
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	713b      	strb	r3, [r7, #4]
	point[1] = pointsave%255;
 80119f8:	4b0b      	ldr	r3, [pc, #44]	; (8011a28 <MB85RS_WritePointSave+0x58>)
 80119fa:	881a      	ldrh	r2, [r3, #0]
 80119fc:	4b0b      	ldr	r3, [pc, #44]	; (8011a2c <MB85RS_WritePointSave+0x5c>)
 80119fe:	fba3 1302 	umull	r1, r3, r3, r2
 8011a02:	09d9      	lsrs	r1, r3, #7
 8011a04:	460b      	mov	r3, r1
 8011a06:	021b      	lsls	r3, r3, #8
 8011a08:	1a5b      	subs	r3, r3, r1
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	717b      	strb	r3, [r7, #5]
	MB85RS_write(32766,point, 2);
 8011a12:	1d3b      	adds	r3, r7, #4
 8011a14:	2202      	movs	r2, #2
 8011a16:	4619      	mov	r1, r3
 8011a18:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8011a1c:	f7ff fef6 	bl	801180c <MB85RS_write>
}
 8011a20:	bf00      	nop
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	20009c70 	.word	0x20009c70
 8011a2c:	80808081 	.word	0x80808081

08011a30 <MB85RS_WriteNewGame>:

void MB85RS_WriteNewGame(){
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b094      	sub	sp, #80	; 0x50
 8011a34:	af00      	add	r7, sp, #0
	uint8_t dat[46];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8011a36:	f107 0308 	add.w	r3, r7, #8
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	4821      	ldr	r0, [pc, #132]	; (8011ac4 <MB85RS_WriteNewGame+0x94>)
 8011a40:	f7f5 fbee 	bl	8007220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011a44:	1d3b      	adds	r3, r7, #4
 8011a46:	2200      	movs	r2, #0
 8011a48:	4619      	mov	r1, r3
 8011a4a:	481e      	ldr	r0, [pc, #120]	; (8011ac4 <MB85RS_WriteNewGame+0x94>)
 8011a4c:	f7f5 fcca 	bl	80073e4 <HAL_RTC_GetDate>
	dat[0]=254; // code for HeaderGame
 8011a50:	23fe      	movs	r3, #254	; 0xfe
 8011a52:	773b      	strb	r3, [r7, #28]
	dat[1] = sTime.Seconds;
 8011a54:	7abb      	ldrb	r3, [r7, #10]
 8011a56:	777b      	strb	r3, [r7, #29]
	dat[2] = sTime.Minutes;
 8011a58:	7a7b      	ldrb	r3, [r7, #9]
 8011a5a:	77bb      	strb	r3, [r7, #30]
	dat[3] = sTime.Hours;
 8011a5c:	7a3b      	ldrb	r3, [r7, #8]
 8011a5e:	77fb      	strb	r3, [r7, #31]
	dat[4] = sDate.Date;
 8011a60:	79bb      	ldrb	r3, [r7, #6]
 8011a62:	f887 3020 	strb.w	r3, [r7, #32]
	dat[5] = sDate.Month;
 8011a66:	797b      	ldrb	r3, [r7, #5]
 8011a68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dat[6] = sDate.Year;
 8011a6c:	79fb      	ldrb	r3, [r7, #7]
 8011a6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(int i=7;i<46;i++){
 8011a72:	2307      	movs	r3, #7
 8011a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a76:	e008      	b.n	8011a8a <MB85RS_WriteNewGame+0x5a>
		dat[i]=0;
 8011a78:	f107 021c 	add.w	r2, r7, #28
 8011a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a7e:	4413      	add	r3, r2
 8011a80:	2200      	movs	r2, #0
 8011a82:	701a      	strb	r2, [r3, #0]
	for(int i=7;i<46;i++){
 8011a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a86:	3301      	adds	r3, #1
 8011a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a8c:	2b2d      	cmp	r3, #45	; 0x2d
 8011a8e:	ddf3      	ble.n	8011a78 <MB85RS_WriteNewGame+0x48>
	}
	MB85RS_write(pointsave*46, dat, 46);
 8011a90:	4b0d      	ldr	r3, [pc, #52]	; (8011ac8 <MB85RS_WriteNewGame+0x98>)
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	461a      	mov	r2, r3
 8011a96:	232e      	movs	r3, #46	; 0x2e
 8011a98:	fb02 f303 	mul.w	r3, r2, r3
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f107 031c 	add.w	r3, r7, #28
 8011aa2:	222e      	movs	r2, #46	; 0x2e
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	f7ff feb1 	bl	801180c <MB85RS_write>
	pointsave++;
 8011aaa:	4b07      	ldr	r3, [pc, #28]	; (8011ac8 <MB85RS_WriteNewGame+0x98>)
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <MB85RS_WriteNewGame+0x98>)
 8011ab4:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 8011ab6:	f7ff ff8b 	bl	80119d0 <MB85RS_WritePointSave>
}
 8011aba:	bf00      	nop
 8011abc:	3750      	adds	r7, #80	; 0x50
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	200044a0 	.word	0x200044a0
 8011ac8:	20009c70 	.word	0x20009c70

08011acc <MB85RS_saveFen>:

// 32bytePiece + 14byteClock
void MB85RS_saveFen(){
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b090      	sub	sp, #64	; 0x40
 8011ad0:	af00      	add	r7, sp, #0
	uint8_t data[46];
	uint8_t pieceA,pieceB,pie=0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 8011ad8:	2300      	movs	r3, #0
 8011ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8011adc:	e02d      	b.n	8011b3a <MB85RS_saveFen+0x6e>
		pieceA = byteToPiece(datamain_old[pie]);
 8011ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ae2:	4a2d      	ldr	r2, [pc, #180]	; (8011b98 <MB85RS_saveFen+0xcc>)
 8011ae4:	5cd3      	ldrb	r3, [r2, r3]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f001 fa90 	bl	801300c <byteToPiece>
 8011aec:	4603      	mov	r3, r0
 8011aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		pie++;
 8011af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011af6:	3301      	adds	r3, #1
 8011af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		pieceB = byteToPiece(datamain_old[pie]);
 8011afc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b00:	4a25      	ldr	r2, [pc, #148]	; (8011b98 <MB85RS_saveFen+0xcc>)
 8011b02:	5cd3      	ldrb	r3, [r2, r3]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f001 fa81 	bl	801300c <byteToPiece>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		pie++;
 8011b10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b14:	3301      	adds	r3, #1
 8011b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		data[i] = (pieceA << 4) + pieceB;
 8011b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011b1e:	011b      	lsls	r3, r3, #4
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011b26:	4413      	add	r3, r2
 8011b28:	b2d9      	uxtb	r1, r3
 8011b2a:	1d3a      	adds	r2, r7, #4
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2e:	4413      	add	r3, r2
 8011b30:	460a      	mov	r2, r1
 8011b32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	3301      	adds	r3, #1
 8011b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3c:	2b1f      	cmp	r3, #31
 8011b3e:	ddce      	ble.n	8011ade <MB85RS_saveFen+0x12>
	}
	for (int i = 0; i < 14; i++) {
 8011b40:	2300      	movs	r3, #0
 8011b42:	637b      	str	r3, [r7, #52]	; 0x34
 8011b44:	e00c      	b.n	8011b60 <MB85RS_saveFen+0x94>
		data[32 + i] = data_chessclock[i];
 8011b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b48:	3320      	adds	r3, #32
 8011b4a:	4914      	ldr	r1, [pc, #80]	; (8011b9c <MB85RS_saveFen+0xd0>)
 8011b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b4e:	440a      	add	r2, r1
 8011b50:	7812      	ldrb	r2, [r2, #0]
 8011b52:	3340      	adds	r3, #64	; 0x40
 8011b54:	443b      	add	r3, r7
 8011b56:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (int i = 0; i < 14; i++) {
 8011b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8011b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b62:	2b0d      	cmp	r3, #13
 8011b64:	ddef      	ble.n	8011b46 <MB85RS_saveFen+0x7a>
	}
	MB85RS_write(pointsave*46,data, 46);
 8011b66:	4b0e      	ldr	r3, [pc, #56]	; (8011ba0 <MB85RS_saveFen+0xd4>)
 8011b68:	881b      	ldrh	r3, [r3, #0]
 8011b6a:	461a      	mov	r2, r3
 8011b6c:	232e      	movs	r3, #46	; 0x2e
 8011b6e:	fb02 f303 	mul.w	r3, r2, r3
 8011b72:	4618      	mov	r0, r3
 8011b74:	1d3b      	adds	r3, r7, #4
 8011b76:	222e      	movs	r2, #46	; 0x2e
 8011b78:	4619      	mov	r1, r3
 8011b7a:	f7ff fe47 	bl	801180c <MB85RS_write>
	pointsave++;
 8011b7e:	4b08      	ldr	r3, [pc, #32]	; (8011ba0 <MB85RS_saveFen+0xd4>)
 8011b80:	881b      	ldrh	r3, [r3, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	4b06      	ldr	r3, [pc, #24]	; (8011ba0 <MB85RS_saveFen+0xd4>)
 8011b88:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 8011b8a:	f7ff ff21 	bl	80119d0 <MB85RS_WritePointSave>
}
 8011b8e:	bf00      	nop
 8011b90:	3740      	adds	r7, #64	; 0x40
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	2000aef0 	.word	0x2000aef0
 8011b9c:	20009c60 	.word	0x20009c60
 8011ba0:	20009c70 	.word	0x20009c70

08011ba4 <handlerMb85rs>:

uint8_t oldSide = SIDE_WHITE;
uint16_t recorded = 0;

void handlerMb85rs() {
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
	/* Do chessclock cập nhật trạng thái mỗi 5s nên cần bỏ qua trạng thái này  */
	 //CLOCKSTATUS { READY=0,BEGIN_PLAY=1,PLAYING=2,PLAY_TO_PAUSE=3,PAUSE_TO_PLAY=4,ONE_SIDE_OVER_TIME=5,ALL_SIDE_OVER_TIME=6 };
	if (data_chessclock[9] == 1) {
 8011baa:	4b1b      	ldr	r3, [pc, #108]	; (8011c18 <handlerMb85rs+0x74>)
 8011bac:	7a5b      	ldrb	r3, [r3, #9]
 8011bae:	2b01      	cmp	r3, #1
 8011bb0:	d109      	bne.n	8011bc6 <handlerMb85rs+0x22>
		MB85RS_WriteNewGame();
 8011bb2:	f7ff ff3d 	bl	8011a30 <MB85RS_WriteNewGame>
		oldSide = data_chessclock[8] & 0x01;
 8011bb6:	4b18      	ldr	r3, [pc, #96]	; (8011c18 <handlerMb85rs+0x74>)
 8011bb8:	7a1b      	ldrb	r3, [r3, #8]
 8011bba:	f003 0301 	and.w	r3, r3, #1
 8011bbe:	b2da      	uxtb	r2, r3
 8011bc0:	4b16      	ldr	r3, [pc, #88]	; (8011c1c <handlerMb85rs+0x78>)
 8011bc2:	701a      	strb	r2, [r3, #0]
			recorded++;
			oldSide = newSide;
			MB85RS_saveFen();
		}
	}
}
 8011bc4:	e024      	b.n	8011c10 <handlerMb85rs+0x6c>
	} else if (data_chessclock[9] == 2 || data_chessclock[9] ==4 || data_chessclock[9] == 5 || data_chessclock[9]==6) {
 8011bc6:	4b14      	ldr	r3, [pc, #80]	; (8011c18 <handlerMb85rs+0x74>)
 8011bc8:	7a5b      	ldrb	r3, [r3, #9]
 8011bca:	2b02      	cmp	r3, #2
 8011bcc:	d00b      	beq.n	8011be6 <handlerMb85rs+0x42>
 8011bce:	4b12      	ldr	r3, [pc, #72]	; (8011c18 <handlerMb85rs+0x74>)
 8011bd0:	7a5b      	ldrb	r3, [r3, #9]
 8011bd2:	2b04      	cmp	r3, #4
 8011bd4:	d007      	beq.n	8011be6 <handlerMb85rs+0x42>
 8011bd6:	4b10      	ldr	r3, [pc, #64]	; (8011c18 <handlerMb85rs+0x74>)
 8011bd8:	7a5b      	ldrb	r3, [r3, #9]
 8011bda:	2b05      	cmp	r3, #5
 8011bdc:	d003      	beq.n	8011be6 <handlerMb85rs+0x42>
 8011bde:	4b0e      	ldr	r3, [pc, #56]	; (8011c18 <handlerMb85rs+0x74>)
 8011be0:	7a5b      	ldrb	r3, [r3, #9]
 8011be2:	2b06      	cmp	r3, #6
 8011be4:	d114      	bne.n	8011c10 <handlerMb85rs+0x6c>
		uint8_t newSide = data_chessclock[8] & 0x01;
 8011be6:	4b0c      	ldr	r3, [pc, #48]	; (8011c18 <handlerMb85rs+0x74>)
 8011be8:	7a1b      	ldrb	r3, [r3, #8]
 8011bea:	f003 0301 	and.w	r3, r3, #1
 8011bee:	71fb      	strb	r3, [r7, #7]
		if(newSide != oldSide){
 8011bf0:	4b0a      	ldr	r3, [pc, #40]	; (8011c1c <handlerMb85rs+0x78>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	79fa      	ldrb	r2, [r7, #7]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d00a      	beq.n	8011c10 <handlerMb85rs+0x6c>
			recorded++;
 8011bfa:	4b09      	ldr	r3, [pc, #36]	; (8011c20 <handlerMb85rs+0x7c>)
 8011bfc:	881b      	ldrh	r3, [r3, #0]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	4b07      	ldr	r3, [pc, #28]	; (8011c20 <handlerMb85rs+0x7c>)
 8011c04:	801a      	strh	r2, [r3, #0]
			oldSide = newSide;
 8011c06:	4a05      	ldr	r2, [pc, #20]	; (8011c1c <handlerMb85rs+0x78>)
 8011c08:	79fb      	ldrb	r3, [r7, #7]
 8011c0a:	7013      	strb	r3, [r2, #0]
			MB85RS_saveFen();
 8011c0c:	f7ff ff5e 	bl	8011acc <MB85RS_saveFen>
}
 8011c10:	bf00      	nop
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	20009c60 	.word	0x20009c60
 8011c1c:	200000ff 	.word	0x200000ff
 8011c20:	20009ca8 	.word	0x20009ca8

08011c24 <HAL_PWR_PVDCallback>:

extern uint8_t sys_error;

// hàm được gọi khi điện áp xuống dưới 2.8V sau đó lên trên 2.8V
void HAL_PWR_PVDCallback()
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	af00      	add	r7, sp, #0
	sys_error = BOARD_PVD_ERROR;
 8011c28:	4b04      	ldr	r3, [pc, #16]	; (8011c3c <HAL_PWR_PVDCallback+0x18>)
 8011c2a:	220f      	movs	r2, #15
 8011c2c:	701a      	strb	r2, [r3, #0]
	BackupError_write(sys_error);
 8011c2e:	4b03      	ldr	r3, [pc, #12]	; (8011c3c <HAL_PWR_PVDCallback+0x18>)
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f000 f8ee 	bl	8011e14 <BackupError_write>
}
 8011c38:	bf00      	nop
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	2000449c 	.word	0x2000449c

08011c40 <PVD_Config>:

void PVD_Config(void) {
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
	PWR_PVDTypeDef pvdConfig;
	pvdConfig.PVDLevel = PWR_PVDLEVEL_6; // ngưỡng 6 = 2.8V
 8011c46:	23c0      	movs	r3, #192	; 0xc0
 8011c48:	603b      	str	r3, [r7, #0]
	pvdConfig.Mode = PWR_PVD_MODE_IT_FALLING; // chế độ ngắt là thời điểm dưới 2.8V lên trên 2.8V
 8011c4a:	4b0a      	ldr	r3, [pc, #40]	; (8011c74 <PVD_Config+0x34>)
 8011c4c:	607b      	str	r3, [r7, #4]
	HAL_PWR_ConfigPVD(&pvdConfig);
 8011c4e:	463b      	mov	r3, r7
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7f4 fbdf 	bl	8006414 <HAL_PWR_ConfigPVD>
	/* Configure the NVIC for PVD */
	HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8011c56:	2200      	movs	r2, #0
 8011c58:	2100      	movs	r1, #0
 8011c5a:	2001      	movs	r0, #1
 8011c5c:	f7f0 fab1 	bl	80021c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 8011c60:	2001      	movs	r0, #1
 8011c62:	f7f0 faca 	bl	80021fa <HAL_NVIC_EnableIRQ>
	/* Enable the PVD Output */
	HAL_PWR_EnablePVD();
 8011c66:	f7f4 fc35 	bl	80064d4 <HAL_PWR_EnablePVD>
}
 8011c6a:	bf00      	nop
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	00010002 	.word	0x00010002

08011c78 <QueueGetRear>:
int8_t 		qrear =-1;
uint8_t 	qcount =0;

/* trả về rear mà sau đó sẽ push data vào nó ( data[rear] ) */
int8_t QueueGetRear()
{
 8011c78:	b480      	push	{r7}
 8011c7a:	af00      	add	r7, sp, #0
	if (qcount == QUEUE_MAX)  // nếu queue đầy thì xóa phần tử đầu front
 8011c7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ce8 <QueueGetRear+0x70>)
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	2b14      	cmp	r3, #20
 8011c82:	d112      	bne.n	8011caa <QueueGetRear+0x32>
	{
		qfront++;						 // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 8011c84:	4b19      	ldr	r3, [pc, #100]	; (8011cec <QueueGetRear+0x74>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	4b17      	ldr	r3, [pc, #92]	; (8011cec <QueueGetRear+0x74>)
 8011c8e:	701a      	strb	r2, [r3, #0]
		if(qfront ==QUEUE_MAX) qfront=0;
 8011c90:	4b16      	ldr	r3, [pc, #88]	; (8011cec <QueueGetRear+0x74>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	2b14      	cmp	r3, #20
 8011c96:	d102      	bne.n	8011c9e <QueueGetRear+0x26>
 8011c98:	4b14      	ldr	r3, [pc, #80]	; (8011cec <QueueGetRear+0x74>)
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	701a      	strb	r2, [r3, #0]
		qcount--;
 8011c9e:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <QueueGetRear+0x70>)
 8011ca0:	781b      	ldrb	r3, [r3, #0]
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	4b10      	ldr	r3, [pc, #64]	; (8011ce8 <QueueGetRear+0x70>)
 8011ca8:	701a      	strb	r2, [r3, #0]
	}
	//tang Rear len va gan phan tu vao, Neu Rear dang o vi tri Max-1 thi tang ve vi tri 0
	qrear++;
 8011caa:	4b11      	ldr	r3, [pc, #68]	; (8011cf0 <QueueGetRear+0x78>)
 8011cac:	f993 3000 	ldrsb.w	r3, [r3]
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	b25a      	sxtb	r2, r3
 8011cb8:	4b0d      	ldr	r3, [pc, #52]	; (8011cf0 <QueueGetRear+0x78>)
 8011cba:	701a      	strb	r2, [r3, #0]
	if(qrear==QUEUE_MAX) qrear=0;
 8011cbc:	4b0c      	ldr	r3, [pc, #48]	; (8011cf0 <QueueGetRear+0x78>)
 8011cbe:	f993 3000 	ldrsb.w	r3, [r3]
 8011cc2:	2b14      	cmp	r3, #20
 8011cc4:	d102      	bne.n	8011ccc <QueueGetRear+0x54>
 8011cc6:	4b0a      	ldr	r3, [pc, #40]	; (8011cf0 <QueueGetRear+0x78>)
 8011cc8:	2200      	movs	r2, #0
 8011cca:	701a      	strb	r2, [r3, #0]
	qcount++; //tang so phan tu len
 8011ccc:	4b06      	ldr	r3, [pc, #24]	; (8011ce8 <QueueGetRear+0x70>)
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	4b04      	ldr	r3, [pc, #16]	; (8011ce8 <QueueGetRear+0x70>)
 8011cd6:	701a      	strb	r2, [r3, #0]
	return qrear;
 8011cd8:	4b05      	ldr	r3, [pc, #20]	; (8011cf0 <QueueGetRear+0x78>)
 8011cda:	f993 3000 	ldrsb.w	r3, [r3]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr
 8011ce8:	20009cab 	.word	0x20009cab
 8011cec:	20009caa 	.word	0x20009caa
 8011cf0:	20000100 	.word	0x20000100

08011cf4 <QueueGetFront>:
/* trả về front, mà sau đó sẽ lấy data ra ( data[front] ) */
int8_t QueueGetFront()
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	af00      	add	r7, sp, #0
	return qfront;
 8011cf8:	4b03      	ldr	r3, [pc, #12]	; (8011d08 <QueueGetFront+0x14>)
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	b25b      	sxtb	r3, r3

}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr
 8011d08:	20009caa 	.word	0x20009caa

08011d0c <QueueGetFrontAfter>:
/* sau khi lấy dữ liệu từ front thì cần thay đổi qfront và qcount  */
void QueueGetFrontAfter()
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	af00      	add	r7, sp, #0
	qfront++;
 8011d10:	4b0b      	ldr	r3, [pc, #44]	; (8011d40 <QueueGetFrontAfter+0x34>)
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	3301      	adds	r3, #1
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <QueueGetFrontAfter+0x34>)
 8011d1a:	701a      	strb	r2, [r3, #0]
	if(qfront==QUEUE_MAX)qfront = 0; // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 8011d1c:	4b08      	ldr	r3, [pc, #32]	; (8011d40 <QueueGetFrontAfter+0x34>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b14      	cmp	r3, #20
 8011d22:	d102      	bne.n	8011d2a <QueueGetFrontAfter+0x1e>
 8011d24:	4b06      	ldr	r3, [pc, #24]	; (8011d40 <QueueGetFrontAfter+0x34>)
 8011d26:	2200      	movs	r2, #0
 8011d28:	701a      	strb	r2, [r3, #0]
	qcount--;//giam so phan tu xuong
 8011d2a:	4b06      	ldr	r3, [pc, #24]	; (8011d44 <QueueGetFrontAfter+0x38>)
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	b2da      	uxtb	r2, r3
 8011d32:	4b04      	ldr	r3, [pc, #16]	; (8011d44 <QueueGetFrontAfter+0x38>)
 8011d34:	701a      	strb	r2, [r3, #0]
}
 8011d36:	bf00      	nop
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	20009caa 	.word	0x20009caa
 8011d44:	20009cab 	.word	0x20009cab

08011d48 <QueueGetCount>:

uint8_t QueueGetCount()
{
 8011d48:	b480      	push	{r7}
 8011d4a:	af00      	add	r7, sp, #0
	return qcount;
 8011d4c:	4b03      	ldr	r3, [pc, #12]	; (8011d5c <QueueGetCount+0x14>)
 8011d4e:	781b      	ldrb	r3, [r3, #0]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	20009cab 	.word	0x20009cab

08011d60 <QueueClear>:
void QueueClear()
{
 8011d60:	b480      	push	{r7}
 8011d62:	af00      	add	r7, sp, #0
	qfront=0;
 8011d64:	4b06      	ldr	r3, [pc, #24]	; (8011d80 <QueueClear+0x20>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	701a      	strb	r2, [r3, #0]
	qrear=-1;
 8011d6a:	4b06      	ldr	r3, [pc, #24]	; (8011d84 <QueueClear+0x24>)
 8011d6c:	22ff      	movs	r2, #255	; 0xff
 8011d6e:	701a      	strb	r2, [r3, #0]
	qcount=0;
 8011d70:	4b05      	ldr	r3, [pc, #20]	; (8011d88 <QueueClear+0x28>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	701a      	strb	r2, [r3, #0]
}
 8011d76:	bf00      	nop
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr
 8011d80:	20009caa 	.word	0x20009caa
 8011d84:	20000100 	.word	0x20000100
 8011d88:	20009cab 	.word	0x20009cab

08011d8c <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;


/* data=6byte /second/minute/hour/day/month/year */
void RTC_SetTime(uint8_t* datatime)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b088      	sub	sp, #32
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime = {0};
 8011d94:	f107 030c 	add.w	r3, r7, #12
 8011d98:	2200      	movs	r2, #0
 8011d9a:	601a      	str	r2, [r3, #0]
 8011d9c:	605a      	str	r2, [r3, #4]
 8011d9e:	609a      	str	r2, [r3, #8]
 8011da0:	60da      	str	r2, [r3, #12]
 8011da2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011da4:	2300      	movs	r3, #0
 8011da6:	60bb      	str	r3, [r7, #8]
  sTime.Hours = datatime[2];
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	789b      	ldrb	r3, [r3, #2]
 8011dac:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = datatime[1];
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	785b      	ldrb	r3, [r3, #1]
 8011db2:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = datatime[0];
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8011dc2:	f107 030c 	add.w	r3, r7, #12
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4811      	ldr	r0, [pc, #68]	; (8011e10 <RTC_SetTime+0x84>)
 8011dcc:	f7f5 f98e 	bl	80070ec <HAL_RTC_SetTime>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d001      	beq.n	8011dda <RTC_SetTime+0x4e>
  {
    Error_Handler();
 8011dd6:	f7ee fef5 	bl	8000bc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	723b      	strb	r3, [r7, #8]
  sDate.Month = datatime[4];
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	791b      	ldrb	r3, [r3, #4]
 8011de2:	727b      	strb	r3, [r7, #9]
  sDate.Date = datatime[3];
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	78db      	ldrb	r3, [r3, #3]
 8011de8:	72bb      	strb	r3, [r7, #10]
  sDate.Year = datatime[5];
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	795b      	ldrb	r3, [r3, #5]
 8011dee:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8011df0:	f107 0308 	add.w	r3, r7, #8
 8011df4:	2200      	movs	r2, #0
 8011df6:	4619      	mov	r1, r3
 8011df8:	4805      	ldr	r0, [pc, #20]	; (8011e10 <RTC_SetTime+0x84>)
 8011dfa:	f7f5 fa6f 	bl	80072dc <HAL_RTC_SetDate>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <RTC_SetTime+0x7c>
  {
    Error_Handler();
 8011e04:	f7ee fede 	bl	8000bc4 <Error_Handler>
  }
}
 8011e08:	bf00      	nop
 8011e0a:	3720      	adds	r7, #32
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}
 8011e10:	200044a0 	.word	0x200044a0

08011e14 <BackupError_write>:

void BackupError_write(uint8_t error)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	71fb      	strb	r3, [r7, #7]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR11, (uint32_t)error);
 8011e1e:	79fb      	ldrb	r3, [r7, #7]
 8011e20:	461a      	mov	r2, r3
 8011e22:	210b      	movs	r1, #11
 8011e24:	4803      	ldr	r0, [pc, #12]	; (8011e34 <BackupError_write+0x20>)
 8011e26:	f7f5 fbe9 	bl	80075fc <HAL_RTCEx_BKUPWrite>
}
 8011e2a:	bf00      	nop
 8011e2c:	3708      	adds	r7, #8
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	200044a0 	.word	0x200044a0

08011e38 <BackupError_read>:

uint8_t BackupError_read()
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
	uint32_t error = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR11);
 8011e3e:	210b      	movs	r1, #11
 8011e40:	4804      	ldr	r0, [pc, #16]	; (8011e54 <BackupError_read+0x1c>)
 8011e42:	f7f5 fbf5 	bl	8007630 <HAL_RTCEx_BKUPRead>
 8011e46:	6078      	str	r0, [r7, #4]
	return (uint8_t)error;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	b2db      	uxtb	r3, r3
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3708      	adds	r7, #8
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	200044a0 	.word	0x200044a0

08011e58 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t  responce_length;
uint16_t responce_period;
// debug
uint8_t firstlengg = 0;
/* hàm callback khi phát pulse hoàn thành */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8011e58:	b480      	push	{r7}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
	if(is_start_measure ==true){
 8011e60:	4b07      	ldr	r3, [pc, #28]	; (8011e80 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d004      	beq.n	8011e74 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		point_start_measure = TIM4->CNT;  // điểm bắt đầu đo đạc là giá trị TIM4->CNT hiện tại
 8011e6a:	4b06      	ldr	r3, [pc, #24]	; (8011e84 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	4b05      	ldr	r3, [pc, #20]	; (8011e88 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8011e72:	801a      	strh	r2, [r3, #0]
	}
}
 8011e74:	bf00      	nop
 8011e76:	370c      	adds	r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7e:	4770      	bx	lr
 8011e80:	20009cae 	.word	0x20009cae
 8011e84:	40000800 	.word	0x40000800
 8011e88:	20009cac 	.word	0x20009cac

08011e8c <ScanPiecesInit>:

void ScanPiecesInit()
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
	/*	mặc định kênh TIM_CCxN bị tắt, cần phải bật nó lên để có thể xuất xung PWM trên nó	*/
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8011e90:	4b09      	ldr	r3, [pc, #36]	; (8011eb8 <ScanPiecesInit+0x2c>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2204      	movs	r2, #4
 8011e96:	2108      	movs	r1, #8
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7f7 ff93 	bl	8009dc4 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 8011e9e:	4b06      	ldr	r3, [pc, #24]	; (8011eb8 <ScanPiecesInit+0x2c>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	2204      	movs	r2, #4
 8011ea4:	2104      	movs	r1, #4
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7f7 ff8c 	bl	8009dc4 <TIM_CCxChannelCmd>
	HAL_TIM_Base_Start_IT(&htim4);
 8011eac:	4803      	ldr	r0, [pc, #12]	; (8011ebc <ScanPiecesInit+0x30>)
 8011eae:	f7f6 f9cf 	bl	8008250 <HAL_TIM_Base_Start_IT>
}
 8011eb2:	bf00      	nop
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20004560 	.word	0x20004560
 8011ebc:	20004638 	.word	0x20004638

08011ec0 <PulseOut>:
// độ dài tối đa của length=20
void PulseOut(uint8_t type,uint8_t length,uint8_t outCoil)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	71fb      	strb	r3, [r7, #7]
 8011eca:	460b      	mov	r3, r1
 8011ecc:	71bb      	strb	r3, [r7, #6]
 8011ece:	4613      	mov	r3, r2
 8011ed0:	717b      	strb	r3, [r7, #5]
	uint16_t _length = length;
 8011ed2:	79bb      	ldrb	r3, [r7, #6]
 8011ed4:	827b      	strh	r3, [r7, #18]
	uint16_t period = 84000/ListFrequency[type]; // tính toán chu kỳ
 8011ed6:	79fb      	ldrb	r3, [r7, #7]
 8011ed8:	4a52      	ldr	r2, [pc, #328]	; (8012024 <PulseOut+0x164>)
 8011eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ede:	461a      	mov	r2, r3
 8011ee0:	4b51      	ldr	r3, [pc, #324]	; (8012028 <PulseOut+0x168>)
 8011ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ee6:	823b      	strh	r3, [r7, #16]
	uint16_t duty	 = period/2;
 8011ee8:	8a3b      	ldrh	r3, [r7, #16]
 8011eea:	085b      	lsrs	r3, r3, #1
 8011eec:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<_length;i++)
 8011eee:	2300      	movs	r3, #0
 8011ef0:	617b      	str	r3, [r7, #20]
 8011ef2:	e00c      	b.n	8011f0e <PulseOut+0x4e>
	{
		pwmdata[i] = duty;
 8011ef4:	494d      	ldr	r1, [pc, #308]	; (801202c <PulseOut+0x16c>)
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	89fa      	ldrh	r2, [r7, #14]
 8011efa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		pwmdata32[i] = (uint32_t)duty;
 8011efe:	89fa      	ldrh	r2, [r7, #14]
 8011f00:	494b      	ldr	r1, [pc, #300]	; (8012030 <PulseOut+0x170>)
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<_length;i++)
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	617b      	str	r3, [r7, #20]
 8011f0e:	8a7b      	ldrh	r3, [r7, #18]
 8011f10:	697a      	ldr	r2, [r7, #20]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	dbee      	blt.n	8011ef4 <PulseOut+0x34>
	}
	pwmdata[_length] =0;
 8011f16:	8a7b      	ldrh	r3, [r7, #18]
 8011f18:	4a44      	ldr	r2, [pc, #272]	; (801202c <PulseOut+0x16c>)
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pwmdata32[_length]=0;
 8011f20:	8a7b      	ldrh	r3, [r7, #18]
 8011f22:	4a43      	ldr	r2, [pc, #268]	; (8012030 <PulseOut+0x170>)
 8011f24:	2100      	movs	r1, #0
 8011f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	switch(outCoil){
 8011f2a:	797b      	ldrb	r3, [r7, #5]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	2b07      	cmp	r3, #7
 8011f30:	d874      	bhi.n	801201c <PulseOut+0x15c>
 8011f32:	a201      	add	r2, pc, #4	; (adr r2, 8011f38 <PulseOut+0x78>)
 8011f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f38:	08011f59 	.word	0x08011f59
 8011f3c:	08011f71 	.word	0x08011f71
 8011f40:	08011f8b 	.word	0x08011f8b
 8011f44:	08011fa3 	.word	0x08011fa3
 8011f48:	08011fbb 	.word	0x08011fbb
 8011f4c:	08011fd3 	.word	0x08011fd3
 8011f50:	08011fed 	.word	0x08011fed
 8011f54:	08012005 	.word	0x08012005
	case 1:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011f58:	4a36      	ldr	r2, [pc, #216]	; (8012034 <PulseOut+0x174>)
 8011f5a:	8a3b      	ldrh	r3, [r7, #16]
 8011f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011f5e:	8a7b      	ldrh	r3, [r7, #18]
 8011f60:	3301      	adds	r3, #1
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	4a31      	ldr	r2, [pc, #196]	; (801202c <PulseOut+0x16c>)
 8011f66:	2100      	movs	r1, #0
 8011f68:	4833      	ldr	r0, [pc, #204]	; (8012038 <PulseOut+0x178>)
 8011f6a:	f7f6 fa2d 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011f6e:	e055      	b.n	801201c <PulseOut+0x15c>
	case 2:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *)pwmdata32, _length+1); 	break;
 8011f70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011f74:	8a3b      	ldrh	r3, [r7, #16]
 8011f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011f78:	8a7b      	ldrh	r3, [r7, #18]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	4a2c      	ldr	r2, [pc, #176]	; (8012030 <PulseOut+0x170>)
 8011f80:	2104      	movs	r1, #4
 8011f82:	482e      	ldr	r0, [pc, #184]	; (801203c <PulseOut+0x17c>)
 8011f84:	f7f6 fa20 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011f88:	e048      	b.n	801201c <PulseOut+0x15c>
	case 3:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011f8a:	4a2d      	ldr	r2, [pc, #180]	; (8012040 <PulseOut+0x180>)
 8011f8c:	8a3b      	ldrh	r3, [r7, #16]
 8011f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011f90:	8a7b      	ldrh	r3, [r7, #18]
 8011f92:	3301      	adds	r3, #1
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	4a25      	ldr	r2, [pc, #148]	; (801202c <PulseOut+0x16c>)
 8011f98:	2100      	movs	r1, #0
 8011f9a:	482a      	ldr	r0, [pc, #168]	; (8012044 <PulseOut+0x184>)
 8011f9c:	f7f6 fa14 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011fa0:	e03c      	b.n	801201c <PulseOut+0x15c>
	case 4: TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011fa2:	4a27      	ldr	r2, [pc, #156]	; (8012040 <PulseOut+0x180>)
 8011fa4:	8a3b      	ldrh	r3, [r7, #16]
 8011fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011fa8:	8a7b      	ldrh	r3, [r7, #18]
 8011faa:	3301      	adds	r3, #1
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	4a1f      	ldr	r2, [pc, #124]	; (801202c <PulseOut+0x16c>)
 8011fb0:	2108      	movs	r1, #8
 8011fb2:	4824      	ldr	r0, [pc, #144]	; (8012044 <PulseOut+0x184>)
 8011fb4:	f7f6 fa08 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011fb8:	e030      	b.n	801201c <PulseOut+0x15c>
	case 5:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,(uint32_t *)pwmdata, _length+1); 	break;
 8011fba:	4a21      	ldr	r2, [pc, #132]	; (8012040 <PulseOut+0x180>)
 8011fbc:	8a3b      	ldrh	r3, [r7, #16]
 8011fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011fc0:	8a7b      	ldrh	r3, [r7, #18]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	b29b      	uxth	r3, r3
 8011fc6:	4a19      	ldr	r2, [pc, #100]	; (801202c <PulseOut+0x16c>)
 8011fc8:	2104      	movs	r1, #4
 8011fca:	481e      	ldr	r0, [pc, #120]	; (8012044 <PulseOut+0x184>)
 8011fcc:	f7f6 f9fc 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011fd0:	e024      	b.n	801201c <PulseOut+0x15c>
	case 6:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3,(uint32_t *)pwmdata32, _length+1); 	break;
 8011fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011fd6:	8a3b      	ldrh	r3, [r7, #16]
 8011fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011fda:	8a7b      	ldrh	r3, [r7, #18]
 8011fdc:	3301      	adds	r3, #1
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	4a13      	ldr	r2, [pc, #76]	; (8012030 <PulseOut+0x170>)
 8011fe2:	2108      	movs	r1, #8
 8011fe4:	4815      	ldr	r0, [pc, #84]	; (801203c <PulseOut+0x17c>)
 8011fe6:	f7f6 f9ef 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8011fea:	e017      	b.n	801201c <PulseOut+0x15c>
	case 7:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,(uint32_t *)pwmdata, _length+1); 	break;
 8011fec:	4a11      	ldr	r2, [pc, #68]	; (8012034 <PulseOut+0x174>)
 8011fee:	8a3b      	ldrh	r3, [r7, #16]
 8011ff0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ff2:	8a7b      	ldrh	r3, [r7, #18]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	4a0c      	ldr	r2, [pc, #48]	; (801202c <PulseOut+0x16c>)
 8011ffa:	210c      	movs	r1, #12
 8011ffc:	480e      	ldr	r0, [pc, #56]	; (8012038 <PulseOut+0x178>)
 8011ffe:	f7f6 f9e3 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 8012002:	e00b      	b.n	801201c <PulseOut+0x15c>
	case 8:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8012004:	4a0b      	ldr	r2, [pc, #44]	; (8012034 <PulseOut+0x174>)
 8012006:	8a3b      	ldrh	r3, [r7, #16]
 8012008:	62d3      	str	r3, [r2, #44]	; 0x2c
 801200a:	8a7b      	ldrh	r3, [r7, #18]
 801200c:	3301      	adds	r3, #1
 801200e:	b29b      	uxth	r3, r3
 8012010:	4a06      	ldr	r2, [pc, #24]	; (801202c <PulseOut+0x16c>)
 8012012:	2108      	movs	r1, #8
 8012014:	4808      	ldr	r0, [pc, #32]	; (8012038 <PulseOut+0x178>)
 8012016:	f7f6 f9d7 	bl	80083c8 <HAL_TIM_PWM_Start_DMA>
 801201a:	bf00      	nop
	}
}
 801201c:	bf00      	nop
 801201e:	3718      	adds	r7, #24
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	08013c10 	.word	0x08013c10
 8012028:	00014820 	.word	0x00014820
 801202c:	2000af30 	.word	0x2000af30
 8012030:	2000af80 	.word	0x2000af80
 8012034:	40000400 	.word	0x40000400
 8012038:	200045f0 	.word	0x200045f0
 801203c:	200045a8 	.word	0x200045a8
 8012040:	40010000 	.word	0x40010000
 8012044:	20004560 	.word	0x20004560

08012048 <SelectReadCoil>:
void SelectReadCoil(uint8_t readCoil)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	4603      	mov	r3, r0
 8012050:	71fb      	strb	r3, [r7, #7]
	switch(readCoil){
 8012052:	79fb      	ldrb	r3, [r7, #7]
 8012054:	3b01      	subs	r3, #1
 8012056:	2b07      	cmp	r3, #7
 8012058:	f200 809c 	bhi.w	8012194 <SelectReadCoil+0x14c>
 801205c:	a201      	add	r2, pc, #4	; (adr r2, 8012064 <SelectReadCoil+0x1c>)
 801205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012062:	bf00      	nop
 8012064:	08012085 	.word	0x08012085
 8012068:	080120a7 	.word	0x080120a7
 801206c:	080120c9 	.word	0x080120c9
 8012070:	080120eb 	.word	0x080120eb
 8012074:	0801210d 	.word	0x0801210d
 8012078:	0801212f 	.word	0x0801212f
 801207c:	08012151 	.word	0x08012151
 8012080:	08012173 	.word	0x08012173
		case 1: CD4051_A_1; CD4051_B_0; CD4051_C_1;break; //coil_1 <-> X5
 8012084:	2201      	movs	r2, #1
 8012086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801208a:	4844      	ldr	r0, [pc, #272]	; (801219c <SelectReadCoil+0x154>)
 801208c:	f7f0 fe68 	bl	8002d60 <HAL_GPIO_WritePin>
 8012090:	2200      	movs	r2, #0
 8012092:	2120      	movs	r1, #32
 8012094:	4842      	ldr	r0, [pc, #264]	; (80121a0 <SelectReadCoil+0x158>)
 8012096:	f7f0 fe63 	bl	8002d60 <HAL_GPIO_WritePin>
 801209a:	2201      	movs	r2, #1
 801209c:	2140      	movs	r1, #64	; 0x40
 801209e:	4840      	ldr	r0, [pc, #256]	; (80121a0 <SelectReadCoil+0x158>)
 80120a0:	f7f0 fe5e 	bl	8002d60 <HAL_GPIO_WritePin>
 80120a4:	e076      	b.n	8012194 <SelectReadCoil+0x14c>
		case 2: CD4051_A_1; CD4051_B_1; CD4051_C_1;break; //coil_2 <-> X7
 80120a6:	2201      	movs	r2, #1
 80120a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80120ac:	483b      	ldr	r0, [pc, #236]	; (801219c <SelectReadCoil+0x154>)
 80120ae:	f7f0 fe57 	bl	8002d60 <HAL_GPIO_WritePin>
 80120b2:	2201      	movs	r2, #1
 80120b4:	2120      	movs	r1, #32
 80120b6:	483a      	ldr	r0, [pc, #232]	; (80121a0 <SelectReadCoil+0x158>)
 80120b8:	f7f0 fe52 	bl	8002d60 <HAL_GPIO_WritePin>
 80120bc:	2201      	movs	r2, #1
 80120be:	2140      	movs	r1, #64	; 0x40
 80120c0:	4837      	ldr	r0, [pc, #220]	; (80121a0 <SelectReadCoil+0x158>)
 80120c2:	f7f0 fe4d 	bl	8002d60 <HAL_GPIO_WritePin>
 80120c6:	e065      	b.n	8012194 <SelectReadCoil+0x14c>
		case 3: CD4051_A_0; CD4051_B_1; CD4051_C_1;break; //coil_3 <-> X6
 80120c8:	2200      	movs	r2, #0
 80120ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80120ce:	4833      	ldr	r0, [pc, #204]	; (801219c <SelectReadCoil+0x154>)
 80120d0:	f7f0 fe46 	bl	8002d60 <HAL_GPIO_WritePin>
 80120d4:	2201      	movs	r2, #1
 80120d6:	2120      	movs	r1, #32
 80120d8:	4831      	ldr	r0, [pc, #196]	; (80121a0 <SelectReadCoil+0x158>)
 80120da:	f7f0 fe41 	bl	8002d60 <HAL_GPIO_WritePin>
 80120de:	2201      	movs	r2, #1
 80120e0:	2140      	movs	r1, #64	; 0x40
 80120e2:	482f      	ldr	r0, [pc, #188]	; (80121a0 <SelectReadCoil+0x158>)
 80120e4:	f7f0 fe3c 	bl	8002d60 <HAL_GPIO_WritePin>
 80120e8:	e054      	b.n	8012194 <SelectReadCoil+0x14c>
		case 4: CD4051_A_0; CD4051_B_0; CD4051_C_1;break; //coil_4 <-> X4
 80120ea:	2200      	movs	r2, #0
 80120ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80120f0:	482a      	ldr	r0, [pc, #168]	; (801219c <SelectReadCoil+0x154>)
 80120f2:	f7f0 fe35 	bl	8002d60 <HAL_GPIO_WritePin>
 80120f6:	2200      	movs	r2, #0
 80120f8:	2120      	movs	r1, #32
 80120fa:	4829      	ldr	r0, [pc, #164]	; (80121a0 <SelectReadCoil+0x158>)
 80120fc:	f7f0 fe30 	bl	8002d60 <HAL_GPIO_WritePin>
 8012100:	2201      	movs	r2, #1
 8012102:	2140      	movs	r1, #64	; 0x40
 8012104:	4826      	ldr	r0, [pc, #152]	; (80121a0 <SelectReadCoil+0x158>)
 8012106:	f7f0 fe2b 	bl	8002d60 <HAL_GPIO_WritePin>
 801210a:	e043      	b.n	8012194 <SelectReadCoil+0x14c>
		case 5: CD4051_A_0; CD4051_B_1; CD4051_C_0;break; //coil_5 <-> X2
 801210c:	2200      	movs	r2, #0
 801210e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012112:	4822      	ldr	r0, [pc, #136]	; (801219c <SelectReadCoil+0x154>)
 8012114:	f7f0 fe24 	bl	8002d60 <HAL_GPIO_WritePin>
 8012118:	2201      	movs	r2, #1
 801211a:	2120      	movs	r1, #32
 801211c:	4820      	ldr	r0, [pc, #128]	; (80121a0 <SelectReadCoil+0x158>)
 801211e:	f7f0 fe1f 	bl	8002d60 <HAL_GPIO_WritePin>
 8012122:	2200      	movs	r2, #0
 8012124:	2140      	movs	r1, #64	; 0x40
 8012126:	481e      	ldr	r0, [pc, #120]	; (80121a0 <SelectReadCoil+0x158>)
 8012128:	f7f0 fe1a 	bl	8002d60 <HAL_GPIO_WritePin>
 801212c:	e032      	b.n	8012194 <SelectReadCoil+0x14c>
		case 6: CD4051_A_1; CD4051_B_0; CD4051_C_0;break; //coil_6 <-> X1
 801212e:	2201      	movs	r2, #1
 8012130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012134:	4819      	ldr	r0, [pc, #100]	; (801219c <SelectReadCoil+0x154>)
 8012136:	f7f0 fe13 	bl	8002d60 <HAL_GPIO_WritePin>
 801213a:	2200      	movs	r2, #0
 801213c:	2120      	movs	r1, #32
 801213e:	4818      	ldr	r0, [pc, #96]	; (80121a0 <SelectReadCoil+0x158>)
 8012140:	f7f0 fe0e 	bl	8002d60 <HAL_GPIO_WritePin>
 8012144:	2200      	movs	r2, #0
 8012146:	2140      	movs	r1, #64	; 0x40
 8012148:	4815      	ldr	r0, [pc, #84]	; (80121a0 <SelectReadCoil+0x158>)
 801214a:	f7f0 fe09 	bl	8002d60 <HAL_GPIO_WritePin>
 801214e:	e021      	b.n	8012194 <SelectReadCoil+0x14c>
		case 7: CD4051_A_0; CD4051_B_0; CD4051_C_0;break; //coil_7 <-> X0
 8012150:	2200      	movs	r2, #0
 8012152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012156:	4811      	ldr	r0, [pc, #68]	; (801219c <SelectReadCoil+0x154>)
 8012158:	f7f0 fe02 	bl	8002d60 <HAL_GPIO_WritePin>
 801215c:	2200      	movs	r2, #0
 801215e:	2120      	movs	r1, #32
 8012160:	480f      	ldr	r0, [pc, #60]	; (80121a0 <SelectReadCoil+0x158>)
 8012162:	f7f0 fdfd 	bl	8002d60 <HAL_GPIO_WritePin>
 8012166:	2200      	movs	r2, #0
 8012168:	2140      	movs	r1, #64	; 0x40
 801216a:	480d      	ldr	r0, [pc, #52]	; (80121a0 <SelectReadCoil+0x158>)
 801216c:	f7f0 fdf8 	bl	8002d60 <HAL_GPIO_WritePin>
 8012170:	e010      	b.n	8012194 <SelectReadCoil+0x14c>
		case 8: CD4051_A_1; CD4051_B_1; CD4051_C_0;break; //coil_8 <-> X3
 8012172:	2201      	movs	r2, #1
 8012174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012178:	4808      	ldr	r0, [pc, #32]	; (801219c <SelectReadCoil+0x154>)
 801217a:	f7f0 fdf1 	bl	8002d60 <HAL_GPIO_WritePin>
 801217e:	2201      	movs	r2, #1
 8012180:	2120      	movs	r1, #32
 8012182:	4807      	ldr	r0, [pc, #28]	; (80121a0 <SelectReadCoil+0x158>)
 8012184:	f7f0 fdec 	bl	8002d60 <HAL_GPIO_WritePin>
 8012188:	2200      	movs	r2, #0
 801218a:	2140      	movs	r1, #64	; 0x40
 801218c:	4804      	ldr	r0, [pc, #16]	; (80121a0 <SelectReadCoil+0x158>)
 801218e:	f7f0 fde7 	bl	8002d60 <HAL_GPIO_WritePin>
 8012192:	bf00      	nop
	}
}
 8012194:	bf00      	nop
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	40020000 	.word	0x40020000
 80121a0:	40020400 	.word	0x40020400

080121a4 <Measure>:


void Measure(uint8_t type,uint8_t outCoil,uint8_t readCoil)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b086      	sub	sp, #24
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	4603      	mov	r3, r0
 80121ac:	71fb      	strb	r3, [r7, #7]
 80121ae:	460b      	mov	r3, r1
 80121b0:	71bb      	strb	r3, [r7, #6]
 80121b2:	4613      	mov	r3, r2
 80121b4:	717b      	strb	r3, [r7, #5]
	/* Phát xung và thiết lập Cuộn cảm nhận tín hiệu */
	PulseOut(type,ListLengthOut[type], outCoil);
 80121b6:	79fb      	ldrb	r3, [r7, #7]
 80121b8:	4a73      	ldr	r2, [pc, #460]	; (8012388 <Measure+0x1e4>)
 80121ba:	5cd1      	ldrb	r1, [r2, r3]
 80121bc:	79ba      	ldrb	r2, [r7, #6]
 80121be:	79fb      	ldrb	r3, [r7, #7]
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff fe7d 	bl	8011ec0 <PulseOut>
	SelectReadCoil(readCoil);
 80121c6:	797b      	ldrb	r3, [r7, #5]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7ff ff3d 	bl	8012048 <SelectReadCoil>
	/* Đưa các biến sử dụng trong đo đạc về giá trị ban đầu */

	point_start_measure=0;
 80121ce:	4b6f      	ldr	r3, [pc, #444]	; (801238c <Measure+0x1e8>)
 80121d0:	2200      	movs	r2, #0
 80121d2:	801a      	strh	r2, [r3, #0]
	startmeasure=0;
 80121d4:	4b6e      	ldr	r3, [pc, #440]	; (8012390 <Measure+0x1ec>)
 80121d6:	2200      	movs	r2, #0
 80121d8:	801a      	strh	r2, [r3, #0]
	stopmeasure=0;
 80121da:	4b6e      	ldr	r3, [pc, #440]	; (8012394 <Measure+0x1f0>)
 80121dc:	2200      	movs	r2, #0
 80121de:	801a      	strh	r2, [r3, #0]
	responce_length=0;
 80121e0:	4b6d      	ldr	r3, [pc, #436]	; (8012398 <Measure+0x1f4>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	701a      	strb	r2, [r3, #0]
	responce_period=0;
 80121e6:	4b6d      	ldr	r3, [pc, #436]	; (801239c <Measure+0x1f8>)
 80121e8:	2200      	movs	r2, #0
 80121ea:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<IC_MAX;i++){
 80121ec:	2300      	movs	r3, #0
 80121ee:	617b      	str	r3, [r7, #20]
 80121f0:	e007      	b.n	8012202 <Measure+0x5e>
		inputCapture_data[i]=0;	// Clear ic_data
 80121f2:	4a6b      	ldr	r2, [pc, #428]	; (80123a0 <Measure+0x1fc>)
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2100      	movs	r1, #0
 80121f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<IC_MAX;i++){
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	3301      	adds	r3, #1
 8012200:	617b      	str	r3, [r7, #20]
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	2b31      	cmp	r3, #49	; 0x31
 8012206:	ddf4      	ble.n	80121f2 <Measure+0x4e>
	}
	uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8012208:	797a      	ldrb	r2, [r7, #5]
 801220a:	79bb      	ldrb	r3, [r7, #6]
 801220c:	4611      	mov	r1, r2
 801220e:	4618      	mov	r0, r3
 8012210:	f000 fae8 	bl	80127e4 <FileRankToSquare>
 8012214:	4603      	mov	r3, r0
 8012216:	72fb      	strb	r3, [r7, #11]
	bool firstcheck=true;
 8012218:	2301      	movs	r3, #1
 801221a:	72bb      	strb	r3, [r7, #10]
	uint16_t period = 84000/ListFrequency[type]; 	// tính toán chu kỳ
 801221c:	79fb      	ldrb	r3, [r7, #7]
 801221e:	4a61      	ldr	r2, [pc, #388]	; (80123a4 <Measure+0x200>)
 8012220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012224:	461a      	mov	r2, r3
 8012226:	4b60      	ldr	r3, [pc, #384]	; (80123a8 <Measure+0x204>)
 8012228:	fb93 f3f2 	sdiv	r3, r3, r2
 801222c:	813b      	strh	r3, [r7, #8]

	/*	Thiết lập Timer để đo đạc tín hiệu trả về	*/
	if(outCoil==sttInOut[7] && readCoil==sttInOut[7]){
 801222e:	2206      	movs	r2, #6
 8012230:	79bb      	ldrb	r3, [r7, #6]
 8012232:	4293      	cmp	r3, r2
 8012234:	d108      	bne.n	8012248 <Measure+0xa4>
 8012236:	2206      	movs	r2, #6
 8012238:	797b      	ldrb	r3, [r7, #5]
 801223a:	4293      	cmp	r3, r2
 801223c:	d104      	bne.n	8012248 <Measure+0xa4>
		TIM4->ARR = 65000;// điểm cuối scan cần có khoảng thời gian đo lớn
 801223e:	4b5b      	ldr	r3, [pc, #364]	; (80123ac <Measure+0x208>)
 8012240:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8012244:	62da      	str	r2, [r3, #44]	; 0x2c
 8012246:	e005      	b.n	8012254 <Measure+0xb0>
	}else{
		TIM4->ARR = ListIC_measure[type];	// xác định khoảng đo tối đa
 8012248:	79fb      	ldrb	r3, [r7, #7]
 801224a:	4a59      	ldr	r2, [pc, #356]	; (80123b0 <Measure+0x20c>)
 801224c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012250:	4b56      	ldr	r3, [pc, #344]	; (80123ac <Measure+0x208>)
 8012252:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
 8012254:	2332      	movs	r3, #50	; 0x32
 8012256:	4a52      	ldr	r2, [pc, #328]	; (80123a0 <Measure+0x1fc>)
 8012258:	2104      	movs	r1, #4
 801225a:	4856      	ldr	r0, [pc, #344]	; (80123b4 <Measure+0x210>)
 801225c:	f7f6 fabe 	bl	80087dc <HAL_TIM_IC_Start_DMA>

	is_start_measure = true;
 8012260:	4b55      	ldr	r3, [pc, #340]	; (80123b8 <Measure+0x214>)
 8012262:	2201      	movs	r2, #1
 8012264:	701a      	strb	r2, [r3, #0]
    /* chờ cho quá trình đo PWM hoàn thành */
	while(is_start_measure){
 8012266:	e03b      	b.n	80122e0 <Measure+0x13c>
		/*	Kiểm tra liên tục xem có xung phản hồi hay không? nếu không thì dừng quá trình đo lại luôn để tiết kiệm thời gian
		 * khi quét ô cuối cùng thì không bỏ qua quá trình scan vì nó sẽ gây nhiễu đến piece type sau đó */
		if(firstcheck && outCoil!=sttInOut[7] && readCoil!=sttInOut[7]){
 8012268:	7abb      	ldrb	r3, [r7, #10]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d038      	beq.n	80122e0 <Measure+0x13c>
 801226e:	2206      	movs	r2, #6
 8012270:	79bb      	ldrb	r3, [r7, #6]
 8012272:	4293      	cmp	r3, r2
 8012274:	d034      	beq.n	80122e0 <Measure+0x13c>
 8012276:	2206      	movs	r2, #6
 8012278:	797b      	ldrb	r3, [r7, #5]
 801227a:	4293      	cmp	r3, r2
 801227c:	d030      	beq.n	80122e0 <Measure+0x13c>

			if(TIM4->CNT > (period*18)){
 801227e:	4b4b      	ldr	r3, [pc, #300]	; (80123ac <Measure+0x208>)
 8012280:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012282:	893a      	ldrh	r2, [r7, #8]
 8012284:	4613      	mov	r3, r2
 8012286:	00db      	lsls	r3, r3, #3
 8012288:	4413      	add	r3, r2
 801228a:	005b      	lsls	r3, r3, #1
 801228c:	4299      	cmp	r1, r3
 801228e:	d927      	bls.n	80122e0 <Measure+0x13c>
				if(inputCapture_data[10]==0){
 8012290:	4b43      	ldr	r3, [pc, #268]	; (80123a0 <Measure+0x1fc>)
 8012292:	8a9b      	ldrh	r3, [r3, #20]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d123      	bne.n	80122e0 <Measure+0x13c>
					/* Nếu không có xung phản hồi thì reset biến và đặt lại timer */
					firstcheck=false;
 8012298:	2300      	movs	r3, #0
 801229a:	72bb      	strb	r3, [r7, #10]
					responce_length=0;
 801229c:	4b3e      	ldr	r3, [pc, #248]	; (8012398 <Measure+0x1f4>)
 801229e:	2200      	movs	r2, #0
 80122a0:	701a      	strb	r2, [r3, #0]
					responce_period=0;
 80122a2:	4b3e      	ldr	r3, [pc, #248]	; (801239c <Measure+0x1f8>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	801a      	strh	r2, [r3, #0]
					datapieces[type][sq][PULSES]=0;
 80122a8:	79fa      	ldrb	r2, [r7, #7]
 80122aa:	7afb      	ldrb	r3, [r7, #11]
 80122ac:	4943      	ldr	r1, [pc, #268]	; (80123bc <Measure+0x218>)
 80122ae:	0192      	lsls	r2, r2, #6
 80122b0:	4413      	add	r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	440b      	add	r3, r1
 80122b6:	2200      	movs	r2, #0
 80122b8:	805a      	strh	r2, [r3, #2]
					datapieces[type][sq][PERIOD]=0;
 80122ba:	79fa      	ldrb	r2, [r7, #7]
 80122bc:	7afb      	ldrb	r3, [r7, #11]
 80122be:	493f      	ldr	r1, [pc, #252]	; (80123bc <Measure+0x218>)
 80122c0:	0192      	lsls	r2, r2, #6
 80122c2:	4413      	add	r3, r2
 80122c4:	2200      	movs	r2, #0
 80122c6:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
					TIM4->CNT=0;
 80122ca:	4b38      	ldr	r3, [pc, #224]	; (80123ac <Measure+0x208>)
 80122cc:	2200      	movs	r2, #0
 80122ce:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 80122d0:	2104      	movs	r1, #4
 80122d2:	4838      	ldr	r0, [pc, #224]	; (80123b4 <Measure+0x210>)
 80122d4:	f7f6 fc1e 	bl	8008b14 <HAL_TIM_IC_Stop_DMA>
					is_start_measure=false;
 80122d8:	4b37      	ldr	r3, [pc, #220]	; (80123b8 <Measure+0x214>)
 80122da:	2200      	movs	r2, #0
 80122dc:	701a      	strb	r2, [r3, #0]
					return;
 80122de:	e0cc      	b.n	801247a <Measure+0x2d6>
	while(is_start_measure){
 80122e0:	4b35      	ldr	r3, [pc, #212]	; (80123b8 <Measure+0x214>)
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1be      	bne.n	8012268 <Measure+0xc4>
	 *
	 *  */


	/* xác định điểm đầu Measure */
	for(int i=0;i<IC_MAX;i++){
 80122ea:	2300      	movs	r3, #0
 80122ec:	613b      	str	r3, [r7, #16]
 80122ee:	e02e      	b.n	801234e <Measure+0x1aa>
		if(inputCapture_data[i] >point_start_measure){
 80122f0:	4a2b      	ldr	r2, [pc, #172]	; (80123a0 <Measure+0x1fc>)
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80122f8:	4b24      	ldr	r3, [pc, #144]	; (801238c <Measure+0x1e8>)
 80122fa:	881b      	ldrh	r3, [r3, #0]
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	429a      	cmp	r2, r3
 8012300:	d904      	bls.n	801230c <Measure+0x168>
			startmeasure=i;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	b29a      	uxth	r2, r3
 8012306:	4b22      	ldr	r3, [pc, #136]	; (8012390 <Measure+0x1ec>)
 8012308:	801a      	strh	r2, [r3, #0]
			break;
 801230a:	e023      	b.n	8012354 <Measure+0x1b0>
		}else if(inputCapture_data[i]==0){ // nếu ko có xung nào nhận được
 801230c:	4a24      	ldr	r2, [pc, #144]	; (80123a0 <Measure+0x1fc>)
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d117      	bne.n	8012348 <Measure+0x1a4>
			responce_length=0;
 8012318:	4b1f      	ldr	r3, [pc, #124]	; (8012398 <Measure+0x1f4>)
 801231a:	2200      	movs	r2, #0
 801231c:	701a      	strb	r2, [r3, #0]
			responce_period=0;
 801231e:	4b1f      	ldr	r3, [pc, #124]	; (801239c <Measure+0x1f8>)
 8012320:	2200      	movs	r2, #0
 8012322:	801a      	strh	r2, [r3, #0]
			datapieces[type][sq][PULSES]=0;
 8012324:	79fa      	ldrb	r2, [r7, #7]
 8012326:	7afb      	ldrb	r3, [r7, #11]
 8012328:	4924      	ldr	r1, [pc, #144]	; (80123bc <Measure+0x218>)
 801232a:	0192      	lsls	r2, r2, #6
 801232c:	4413      	add	r3, r2
 801232e:	009b      	lsls	r3, r3, #2
 8012330:	440b      	add	r3, r1
 8012332:	2200      	movs	r2, #0
 8012334:	805a      	strh	r2, [r3, #2]
			datapieces[type][sq][PERIOD]=0;
 8012336:	79fa      	ldrb	r2, [r7, #7]
 8012338:	7afb      	ldrb	r3, [r7, #11]
 801233a:	4920      	ldr	r1, [pc, #128]	; (80123bc <Measure+0x218>)
 801233c:	0192      	lsls	r2, r2, #6
 801233e:	4413      	add	r3, r2
 8012340:	2200      	movs	r2, #0
 8012342:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			return;
 8012346:	e098      	b.n	801247a <Measure+0x2d6>
	for(int i=0;i<IC_MAX;i++){
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	3301      	adds	r3, #1
 801234c:	613b      	str	r3, [r7, #16]
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	2b31      	cmp	r3, #49	; 0x31
 8012352:	ddcd      	ble.n	80122f0 <Measure+0x14c>
		}
	}

	/* xác định điểm cuối Measure */
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8012354:	4b0e      	ldr	r3, [pc, #56]	; (8012390 <Measure+0x1ec>)
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	60fb      	str	r3, [r7, #12]
 801235a:	e011      	b.n	8012380 <Measure+0x1dc>
		stopmeasure=i;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	b29a      	uxth	r2, r3
 8012360:	4b0c      	ldr	r3, [pc, #48]	; (8012394 <Measure+0x1f0>)
 8012362:	801a      	strh	r2, [r3, #0]
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	3301      	adds	r3, #1
 8012368:	4a0d      	ldr	r2, [pc, #52]	; (80123a0 <Measure+0x1fc>)
 801236a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801236e:	490c      	ldr	r1, [pc, #48]	; (80123a0 <Measure+0x1fc>)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012376:	429a      	cmp	r2, r3
 8012378:	d322      	bcc.n	80123c0 <Measure+0x21c>
	for(int i=startmeasure;i<IC_MAX-1;i++){
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3301      	adds	r3, #1
 801237e:	60fb      	str	r3, [r7, #12]
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2b30      	cmp	r3, #48	; 0x30
 8012384:	ddea      	ble.n	801235c <Measure+0x1b8>
 8012386:	e01c      	b.n	80123c2 <Measure+0x21e>
 8012388:	08013c34 	.word	0x08013c34
 801238c:	20009cac 	.word	0x20009cac
 8012390:	2000b084 	.word	0x2000b084
 8012394:	2000b086 	.word	0x2000b086
 8012398:	2000b088 	.word	0x2000b088
 801239c:	2000b08a 	.word	0x2000b08a
 80123a0:	2000b020 	.word	0x2000b020
 80123a4:	08013c10 	.word	0x08013c10
 80123a8:	00014820 	.word	0x00014820
 80123ac:	40000800 	.word	0x40000800
 80123b0:	08013c90 	.word	0x08013c90
 80123b4:	20004638 	.word	0x20004638
 80123b8:	20009cae 	.word	0x20009cae
 80123bc:	20009cb0 	.word	0x20009cb0
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 80123c0:	bf00      	nop
	}
	if(inputCapture_data[IC_MAX-1]!=0) stopmeasure=IC_MAX;
 80123c2:	4b2f      	ldr	r3, [pc, #188]	; (8012480 <Measure+0x2dc>)
 80123c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <Measure+0x22e>
 80123cc:	4b2d      	ldr	r3, [pc, #180]	; (8012484 <Measure+0x2e0>)
 80123ce:	2232      	movs	r2, #50	; 0x32
 80123d0:	801a      	strh	r2, [r3, #0]

	/* tính toán số lượng Pulses phản hồi */
	responce_length = stopmeasure-startmeasure;
 80123d2:	4b2c      	ldr	r3, [pc, #176]	; (8012484 <Measure+0x2e0>)
 80123d4:	881b      	ldrh	r3, [r3, #0]
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	4b2b      	ldr	r3, [pc, #172]	; (8012488 <Measure+0x2e4>)
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	b2da      	uxtb	r2, r3
 80123e2:	4b2a      	ldr	r3, [pc, #168]	; (801248c <Measure+0x2e8>)
 80123e4:	701a      	strb	r2, [r3, #0]

	//debug
	if(type==0 && outCoil==1 && readCoil==1){
 80123e6:	79fb      	ldrb	r3, [r7, #7]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d109      	bne.n	8012400 <Measure+0x25c>
 80123ec:	79bb      	ldrb	r3, [r7, #6]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d106      	bne.n	8012400 <Measure+0x25c>
 80123f2:	797b      	ldrb	r3, [r7, #5]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d103      	bne.n	8012400 <Measure+0x25c>
		firstlengg = responce_length;
 80123f8:	4b24      	ldr	r3, [pc, #144]	; (801248c <Measure+0x2e8>)
 80123fa:	781a      	ldrb	r2, [r3, #0]
 80123fc:	4b24      	ldr	r3, [pc, #144]	; (8012490 <Measure+0x2ec>)
 80123fe:	701a      	strb	r2, [r3, #0]
	}

	// tính period phản hồi
	if(responce_length > offsetMeasure[type]+RANGE_MEASURE){
 8012400:	4b22      	ldr	r3, [pc, #136]	; (801248c <Measure+0x2e8>)
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	4619      	mov	r1, r3
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	4a22      	ldr	r2, [pc, #136]	; (8012494 <Measure+0x2f0>)
 801240a:	5cd3      	ldrb	r3, [r2, r3]
 801240c:	3304      	adds	r3, #4
 801240e:	4299      	cmp	r1, r3
 8012410:	dd1d      	ble.n	801244e <Measure+0x2aa>
		responce_period = (inputCapture_data[startmeasure+offsetMeasure[type]+RANGE_MEASURE] - inputCapture_data[startmeasure + offsetMeasure[type]]) / RANGE_MEASURE;
 8012412:	4b1d      	ldr	r3, [pc, #116]	; (8012488 <Measure+0x2e4>)
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	4619      	mov	r1, r3
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	4a1e      	ldr	r2, [pc, #120]	; (8012494 <Measure+0x2f0>)
 801241c:	5cd3      	ldrb	r3, [r2, r3]
 801241e:	440b      	add	r3, r1
 8012420:	3304      	adds	r3, #4
 8012422:	4a17      	ldr	r2, [pc, #92]	; (8012480 <Measure+0x2dc>)
 8012424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012428:	4619      	mov	r1, r3
 801242a:	4b17      	ldr	r3, [pc, #92]	; (8012488 <Measure+0x2e4>)
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	4618      	mov	r0, r3
 8012430:	79fb      	ldrb	r3, [r7, #7]
 8012432:	4a18      	ldr	r2, [pc, #96]	; (8012494 <Measure+0x2f0>)
 8012434:	5cd3      	ldrb	r3, [r2, r3]
 8012436:	4403      	add	r3, r0
 8012438:	4a11      	ldr	r2, [pc, #68]	; (8012480 <Measure+0x2dc>)
 801243a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801243e:	1acb      	subs	r3, r1, r3
 8012440:	2b00      	cmp	r3, #0
 8012442:	da00      	bge.n	8012446 <Measure+0x2a2>
 8012444:	3303      	adds	r3, #3
 8012446:	109b      	asrs	r3, r3, #2
 8012448:	b29a      	uxth	r2, r3
 801244a:	4b13      	ldr	r3, [pc, #76]	; (8012498 <Measure+0x2f4>)
 801244c:	801a      	strh	r2, [r3, #0]
	}else{
		datapieces[type][sq][PULSES]=0;
		datapieces[type][sq][PERIOD]=0;
	}
#else
	datapieces[type][sq][PULSES]=responce_length;
 801244e:	4b0f      	ldr	r3, [pc, #60]	; (801248c <Measure+0x2e8>)
 8012450:	7819      	ldrb	r1, [r3, #0]
 8012452:	79fa      	ldrb	r2, [r7, #7]
 8012454:	7afb      	ldrb	r3, [r7, #11]
 8012456:	b288      	uxth	r0, r1
 8012458:	4910      	ldr	r1, [pc, #64]	; (801249c <Measure+0x2f8>)
 801245a:	0192      	lsls	r2, r2, #6
 801245c:	4413      	add	r3, r2
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	440b      	add	r3, r1
 8012462:	4602      	mov	r2, r0
 8012464:	805a      	strh	r2, [r3, #2]
	datapieces[type][sq][PERIOD]=responce_period;
 8012466:	79fa      	ldrb	r2, [r7, #7]
 8012468:	7afb      	ldrb	r3, [r7, #11]
 801246a:	490b      	ldr	r1, [pc, #44]	; (8012498 <Measure+0x2f4>)
 801246c:	8808      	ldrh	r0, [r1, #0]
 801246e:	490b      	ldr	r1, [pc, #44]	; (801249c <Measure+0x2f8>)
 8012470:	0192      	lsls	r2, r2, #6
 8012472:	4413      	add	r3, r2
 8012474:	4602      	mov	r2, r0
 8012476:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
#endif
}
 801247a:	3718      	adds	r7, #24
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}
 8012480:	2000b020 	.word	0x2000b020
 8012484:	2000b086 	.word	0x2000b086
 8012488:	2000b084 	.word	0x2000b084
 801248c:	2000b088 	.word	0x2000b088
 8012490:	2000b08c 	.word	0x2000b08c
 8012494:	08013cb4 	.word	0x08013cb4
 8012498:	2000b08a 	.word	0x2000b08a
 801249c:	20009cb0 	.word	0x20009cb0

080124a0 <Scan>:
 * Return 0: quá trình quét hoàn tất và không phát hiện sự thay đổi của FEN
 * Return 1: quá trình quét hoàn tất và phát hiện có sự thay đổi FEN
 * Return 2: quá trình quét có xảy ra ChessClock Side Thay đổi
 *  enableClockSideInterrupt: có cho phép return lại khi chessclock thay đổi hay không */
SCANRESULT Scan(bool enableClockSideInterrup)
{
 80124a0:	b590      	push	{r4, r7, lr}
 80124a2:	b091      	sub	sp, #68	; 0x44
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	4603      	mov	r3, r0
 80124a8:	71fb      	strb	r3, [r7, #7]
	/* Reset lại các biến */
	for(int i=0;i<64;i++){
 80124aa:	2300      	movs	r3, #0
 80124ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124ae:	e007      	b.n	80124c0 <Scan+0x20>
		datamain[i]=0;
 80124b0:	4ab1      	ldr	r2, [pc, #708]	; (8012778 <Scan+0x2d8>)
 80124b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124b4:	4413      	add	r3, r2
 80124b6:	2200      	movs	r2, #0
 80124b8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 80124ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124bc:	3301      	adds	r3, #1
 80124be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c2:	2b3f      	cmp	r3, #63	; 0x3f
 80124c4:	ddf4      	ble.n	80124b0 <Scan+0x10>
	}
	for(int t=0;t<18;t++){
 80124c6:	2300      	movs	r3, #0
 80124c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80124ca:	e01c      	b.n	8012506 <Scan+0x66>
		for(int s =0;s<64;s++){
 80124cc:	2300      	movs	r3, #0
 80124ce:	637b      	str	r3, [r7, #52]	; 0x34
 80124d0:	e013      	b.n	80124fa <Scan+0x5a>
			datapieces[t][s][PULSES]=0;
 80124d2:	49aa      	ldr	r1, [pc, #680]	; (801277c <Scan+0x2dc>)
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	019a      	lsls	r2, r3, #6
 80124d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124da:	4413      	add	r3, r2
 80124dc:	009b      	lsls	r3, r3, #2
 80124de:	440b      	add	r3, r1
 80124e0:	2200      	movs	r2, #0
 80124e2:	805a      	strh	r2, [r3, #2]
			datapieces[t][s][PERIOD]=0;
 80124e4:	49a5      	ldr	r1, [pc, #660]	; (801277c <Scan+0x2dc>)
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	019a      	lsls	r2, r3, #6
 80124ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ec:	4413      	add	r3, r2
 80124ee:	2200      	movs	r2, #0
 80124f0:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
		for(int s =0;s<64;s++){
 80124f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124f6:	3301      	adds	r3, #1
 80124f8:	637b      	str	r3, [r7, #52]	; 0x34
 80124fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fc:	2b3f      	cmp	r3, #63	; 0x3f
 80124fe:	dde8      	ble.n	80124d2 <Scan+0x32>
	for(int t=0;t<18;t++){
 8012500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012502:	3301      	adds	r3, #1
 8012504:	63bb      	str	r3, [r7, #56]	; 0x38
 8012506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012508:	2b11      	cmp	r3, #17
 801250a:	dddf      	ble.n	80124cc <Scan+0x2c>
		}
	}
	/* Quét tất cả các Piece */
	for(int i=0;i<18;i++){
 801250c:	2300      	movs	r3, #0
 801250e:	633b      	str	r3, [r7, #48]	; 0x30
 8012510:	e155      	b.n	80127be <Scan+0x31e>
		uint8_t type = sttscan[i];
 8012512:	4a9b      	ldr	r2, [pc, #620]	; (8012780 <Scan+0x2e0>)
 8012514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012516:	4413      	add	r3, r2
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	77fb      	strb	r3, [r7, #31]
		uint8_t outCoil =0;
 801251c:	2300      	movs	r3, #0
 801251e:	77bb      	strb	r3, [r7, #30]
		uint8_t readCoil =0;
 8012520:	2300      	movs	r3, #0
 8012522:	777b      	strb	r3, [r7, #29]
		for(int j=0;j<8;j++){
 8012524:	2300      	movs	r3, #0
 8012526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012528:	e034      	b.n	8012594 <Scan+0xf4>
			outCoil = sttInOut[j];
 801252a:	4a96      	ldr	r2, [pc, #600]	; (8012784 <Scan+0x2e4>)
 801252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252e:	4413      	add	r3, r2
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	77bb      	strb	r3, [r7, #30]
			for(int k=0;k<8;k++){
 8012534:	2300      	movs	r3, #0
 8012536:	62bb      	str	r3, [r7, #40]	; 0x28
 8012538:	e026      	b.n	8012588 <Scan+0xe8>
				readCoil =sttInOut[k];
 801253a:	4a92      	ldr	r2, [pc, #584]	; (8012784 <Scan+0x2e4>)
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253e:	4413      	add	r3, r2
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	777b      	strb	r3, [r7, #29]
				if(chessclock_interrup==true && enableClockSideInterrup==true){
 8012544:	4b90      	ldr	r3, [pc, #576]	; (8012788 <Scan+0x2e8>)
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d007      	beq.n	801255c <Scan+0xbc>
 801254c:	79fb      	ldrb	r3, [r7, #7]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <Scan+0xbc>
					chessclock_interrup=false;
 8012552:	4b8d      	ldr	r3, [pc, #564]	; (8012788 <Scan+0x2e8>)
 8012554:	2200      	movs	r2, #0
 8012556:	701a      	strb	r2, [r3, #0]
					return SCAN_SIDE_CHANGED;
 8012558:	2302      	movs	r3, #2
 801255a:	e13c      	b.n	80127d6 <Scan+0x336>
				}
				uint8_t sq = FileRankToSquare(outCoil, readCoil);
 801255c:	7f7a      	ldrb	r2, [r7, #29]
 801255e:	7fbb      	ldrb	r3, [r7, #30]
 8012560:	4611      	mov	r1, r2
 8012562:	4618      	mov	r0, r3
 8012564:	f000 f93e 	bl	80127e4 <FileRankToSquare>
 8012568:	4603      	mov	r3, r0
 801256a:	773b      	strb	r3, [r7, #28]
				if(datamain[sq]==0){  // nếu ô quét chưa thấy piece nào thì tiến hành đo đạc
 801256c:	7f3b      	ldrb	r3, [r7, #28]
 801256e:	4a82      	ldr	r2, [pc, #520]	; (8012778 <Scan+0x2d8>)
 8012570:	5cd3      	ldrb	r3, [r2, r3]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d105      	bne.n	8012582 <Scan+0xe2>
					Measure(type,outCoil,readCoil);
 8012576:	7f7a      	ldrb	r2, [r7, #29]
 8012578:	7fb9      	ldrb	r1, [r7, #30]
 801257a:	7ffb      	ldrb	r3, [r7, #31]
 801257c:	4618      	mov	r0, r3
 801257e:	f7ff fe11 	bl	80121a4 <Measure>
			for(int k=0;k<8;k++){
 8012582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012584:	3301      	adds	r3, #1
 8012586:	62bb      	str	r3, [r7, #40]	; 0x28
 8012588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801258a:	2b07      	cmp	r3, #7
 801258c:	ddd5      	ble.n	801253a <Scan+0x9a>
		for(int j=0;j<8;j++){
 801258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012590:	3301      	adds	r3, #1
 8012592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012596:	2b07      	cmp	r3, #7
 8012598:	ddc7      	ble.n	801252a <Scan+0x8a>

				}
			}
		}
		// edit new
		int8_t sqDetects[10]={-5,-5,-5,-5,-5,-5,-5,-5,-5,-5}; // mảng các ô có pulseLength > MinValue và có period nằm trong ngưỡng detect
 801259a:	4a7c      	ldr	r2, [pc, #496]	; (801278c <Scan+0x2ec>)
 801259c:	f107 0310 	add.w	r3, r7, #16
 80125a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80125a2:	c303      	stmia	r3!, {r0, r1}
 80125a4:	801a      	strh	r2, [r3, #0]
		uint8_t lengthValid =0; // số lượng các ô hợp lệ
 80125a6:	2300      	movs	r3, #0
 80125a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		/* tìm các ô có pulseLength và period hợp lệ  */
		for (int8_t sq = 0; sq < 64; sq++) {
 80125ac:	2300      	movs	r3, #0
 80125ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80125b2:	e047      	b.n	8012644 <Scan+0x1a4>
			// số xung phải lớn hơn ngưỡng calibase
			if (datapieces[type][sq][PULSES] >= getMarkSq(type, sq)) {// period phải nằm trong khoảng của type piece
 80125b4:	7ffa      	ldrb	r2, [r7, #31]
 80125b6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80125ba:	4970      	ldr	r1, [pc, #448]	; (801277c <Scan+0x2dc>)
 80125bc:	0192      	lsls	r2, r2, #6
 80125be:	4413      	add	r3, r2
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	440b      	add	r3, r1
 80125c4:	885c      	ldrh	r4, [r3, #2]
 80125c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80125ca:	7ffb      	ldrb	r3, [r7, #31]
 80125cc:	4611      	mov	r1, r2
 80125ce:	4618      	mov	r0, r3
 80125d0:	f000 fb00 	bl	8012bd4 <getMarkSq>
 80125d4:	4603      	mov	r3, r0
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	429c      	cmp	r4, r3
 80125da:	d32c      	bcc.n	8012636 <Scan+0x196>
				if (datapieces[type][sq][PERIOD] <= mark_period_max[type] && datapieces[type][sq][PERIOD] > mark_period_min[type])
 80125dc:	7ffa      	ldrb	r2, [r7, #31]
 80125de:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80125e2:	4966      	ldr	r1, [pc, #408]	; (801277c <Scan+0x2dc>)
 80125e4:	0192      	lsls	r2, r2, #6
 80125e6:	4413      	add	r3, r2
 80125e8:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 80125ec:	7ffb      	ldrb	r3, [r7, #31]
 80125ee:	4968      	ldr	r1, [pc, #416]	; (8012790 <Scan+0x2f0>)
 80125f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d81e      	bhi.n	8012636 <Scan+0x196>
 80125f8:	7ffa      	ldrb	r2, [r7, #31]
 80125fa:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80125fe:	495f      	ldr	r1, [pc, #380]	; (801277c <Scan+0x2dc>)
 8012600:	0192      	lsls	r2, r2, #6
 8012602:	4413      	add	r3, r2
 8012604:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8012608:	7ffb      	ldrb	r3, [r7, #31]
 801260a:	4962      	ldr	r1, [pc, #392]	; (8012794 <Scan+0x2f4>)
 801260c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012610:	429a      	cmp	r2, r3
 8012612:	d910      	bls.n	8012636 <Scan+0x196>
				{
					sqDetects[lengthValid] = sq;
 8012614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012618:	3340      	adds	r3, #64	; 0x40
 801261a:	443b      	add	r3, r7
 801261c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012620:	f803 2c30 	strb.w	r2, [r3, #-48]
					lengthValid++;
 8012624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012628:	3301      	adds	r3, #1
 801262a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 801262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012632:	2b0a      	cmp	r3, #10
 8012634:	d80b      	bhi.n	801264e <Scan+0x1ae>
		for (int8_t sq = 0; sq < 64; sq++) {
 8012636:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 801263a:	b2db      	uxtb	r3, r3
 801263c:	3301      	adds	r3, #1
 801263e:	b2db      	uxtb	r3, r3
 8012640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012644:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8012648:	2b3f      	cmp	r3, #63	; 0x3f
 801264a:	ddb3      	ble.n	80125b4 <Scan+0x114>
 801264c:	e000      	b.n	8012650 <Scan+0x1b0>
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 801264e:	bf00      	nop
				}
			}
		}
		/* nếu có 1 ô hợp lệ thì đó là piece  */
		if(lengthValid==1)
 8012650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012654:	2b01      	cmp	r3, #1
 8012656:	d108      	bne.n	801266a <Scan+0x1ca>
		{
			datamain[sqDetects[0]]=type+1;
 8012658:	f997 3010 	ldrsb.w	r3, [r7, #16]
 801265c:	461a      	mov	r2, r3
 801265e:	7ffb      	ldrb	r3, [r7, #31]
 8012660:	3301      	adds	r3, #1
 8012662:	b2d9      	uxtb	r1, r3
 8012664:	4b44      	ldr	r3, [pc, #272]	; (8012778 <Scan+0x2d8>)
 8012666:	5499      	strb	r1, [r3, r2]
 8012668:	e0a6      	b.n	80127b8 <Scan+0x318>
		}else if(lengthValid > 1)	// tìm ra 2 ô có giá trị lớn nhất
 801266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801266e:	2b01      	cmp	r3, #1
 8012670:	f240 80a2 	bls.w	80127b8 <Scan+0x318>
		{
			SQData firstMax,secondMax;
			firstMax.pulses=-1;firstMax.square=-1;
 8012674:	23ff      	movs	r3, #255	; 0xff
 8012676:	733b      	strb	r3, [r7, #12]
 8012678:	23ff      	movs	r3, #255	; 0xff
 801267a:	737b      	strb	r3, [r7, #13]
			secondMax.pulses=-2;secondMax.square=-2;
 801267c:	23fe      	movs	r3, #254	; 0xfe
 801267e:	723b      	strb	r3, [r7, #8]
 8012680:	23fe      	movs	r3, #254	; 0xfe
 8012682:	727b      	strb	r3, [r7, #9]

			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 8012684:	2300      	movs	r3, #0
 8012686:	623b      	str	r3, [r7, #32]
 8012688:	e05d      	b.n	8012746 <Scan+0x2a6>
			{
				if(datapieces[type][sqDetects[v]][PULSES] >= firstMax.pulses)
 801268a:	7ffb      	ldrb	r3, [r7, #31]
 801268c:	f107 0110 	add.w	r1, r7, #16
 8012690:	6a3a      	ldr	r2, [r7, #32]
 8012692:	440a      	add	r2, r1
 8012694:	f992 2000 	ldrsb.w	r2, [r2]
 8012698:	4611      	mov	r1, r2
 801269a:	4a38      	ldr	r2, [pc, #224]	; (801277c <Scan+0x2dc>)
 801269c:	019b      	lsls	r3, r3, #6
 801269e:	440b      	add	r3, r1
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4413      	add	r3, r2
 80126a4:	885b      	ldrh	r3, [r3, #2]
 80126a6:	461a      	mov	r2, r3
 80126a8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	db1d      	blt.n	80126ec <Scan+0x24c>
				{
					secondMax.pulses = firstMax.pulses;
 80126b0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80126b4:	723b      	strb	r3, [r7, #8]
					secondMax.square = firstMax.square;
 80126b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80126ba:	727b      	strb	r3, [r7, #9]
					firstMax.pulses  = datapieces[type][sqDetects[v]][PULSES];
 80126bc:	7ffb      	ldrb	r3, [r7, #31]
 80126be:	f107 0110 	add.w	r1, r7, #16
 80126c2:	6a3a      	ldr	r2, [r7, #32]
 80126c4:	440a      	add	r2, r1
 80126c6:	f992 2000 	ldrsb.w	r2, [r2]
 80126ca:	4611      	mov	r1, r2
 80126cc:	4a2b      	ldr	r2, [pc, #172]	; (801277c <Scan+0x2dc>)
 80126ce:	019b      	lsls	r3, r3, #6
 80126d0:	440b      	add	r3, r1
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	885b      	ldrh	r3, [r3, #2]
 80126d8:	b25b      	sxtb	r3, r3
 80126da:	733b      	strb	r3, [r7, #12]
					firstMax.square = sqDetects[v];
 80126dc:	f107 0210 	add.w	r2, r7, #16
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	4413      	add	r3, r2
 80126e4:	f993 3000 	ldrsb.w	r3, [r3]
 80126e8:	737b      	strb	r3, [r7, #13]
 80126ea:	e029      	b.n	8012740 <Scan+0x2a0>
				}else if(datapieces[type][sqDetects[v]][PULSES] >= secondMax.pulses){
 80126ec:	7ffb      	ldrb	r3, [r7, #31]
 80126ee:	f107 0110 	add.w	r1, r7, #16
 80126f2:	6a3a      	ldr	r2, [r7, #32]
 80126f4:	440a      	add	r2, r1
 80126f6:	f992 2000 	ldrsb.w	r2, [r2]
 80126fa:	4611      	mov	r1, r2
 80126fc:	4a1f      	ldr	r2, [pc, #124]	; (801277c <Scan+0x2dc>)
 80126fe:	019b      	lsls	r3, r3, #6
 8012700:	440b      	add	r3, r1
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4413      	add	r3, r2
 8012706:	885b      	ldrh	r3, [r3, #2]
 8012708:	461a      	mov	r2, r3
 801270a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 801270e:	429a      	cmp	r2, r3
 8012710:	db16      	blt.n	8012740 <Scan+0x2a0>
					secondMax.pulses = datapieces[type][sqDetects[v]][PULSES];
 8012712:	7ffb      	ldrb	r3, [r7, #31]
 8012714:	f107 0110 	add.w	r1, r7, #16
 8012718:	6a3a      	ldr	r2, [r7, #32]
 801271a:	440a      	add	r2, r1
 801271c:	f992 2000 	ldrsb.w	r2, [r2]
 8012720:	4611      	mov	r1, r2
 8012722:	4a16      	ldr	r2, [pc, #88]	; (801277c <Scan+0x2dc>)
 8012724:	019b      	lsls	r3, r3, #6
 8012726:	440b      	add	r3, r1
 8012728:	009b      	lsls	r3, r3, #2
 801272a:	4413      	add	r3, r2
 801272c:	885b      	ldrh	r3, [r3, #2]
 801272e:	b25b      	sxtb	r3, r3
 8012730:	723b      	strb	r3, [r7, #8]
					secondMax.square = sqDetects[v];
 8012732:	f107 0210 	add.w	r2, r7, #16
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	4413      	add	r3, r2
 801273a:	f993 3000 	ldrsb.w	r3, [r3]
 801273e:	727b      	strb	r3, [r7, #9]
			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 8012740:	6a3b      	ldr	r3, [r7, #32]
 8012742:	3301      	adds	r3, #1
 8012744:	623b      	str	r3, [r7, #32]
 8012746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801274a:	6a3a      	ldr	r2, [r7, #32]
 801274c:	429a      	cmp	r2, r3
 801274e:	db9c      	blt.n	801268a <Scan+0x1ea>
				}
			}
			/* nếu type là King thì chỉ chọn firstMax là ô có piece */
			/* nếu không thì kiểm tra xem 2 ô có phải là 2 ô liền kề hay không
			 * 4 ô liền kề với ô firstMax là : (sq+1;sq-1;sq+8;sq-8) */
			if(type == 0 || type==5)
 8012750:	7ffb      	ldrb	r3, [r7, #31]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d002      	beq.n	801275c <Scan+0x2bc>
 8012756:	7ffb      	ldrb	r3, [r7, #31]
 8012758:	2b05      	cmp	r3, #5
 801275a:	d11d      	bne.n	8012798 <Scan+0x2f8>
			{
				if(firstMax.square >=0)
 801275c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012760:	2b00      	cmp	r3, #0
 8012762:	db29      	blt.n	80127b8 <Scan+0x318>
				{
					datamain[firstMax.square] = type+1;
 8012764:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012768:	461a      	mov	r2, r3
 801276a:	7ffb      	ldrb	r3, [r7, #31]
 801276c:	3301      	adds	r3, #1
 801276e:	b2d9      	uxtb	r1, r3
 8012770:	4b01      	ldr	r3, [pc, #4]	; (8012778 <Scan+0x2d8>)
 8012772:	5499      	strb	r1, [r3, r2]
				if(firstMax.square >=0)
 8012774:	e020      	b.n	80127b8 <Scan+0x318>
 8012776:	bf00      	nop
 8012778:	2000aeb0 	.word	0x2000aeb0
 801277c:	20009cb0 	.word	0x20009cb0
 8012780:	08013cc8 	.word	0x08013cc8
 8012784:	08013cdc 	.word	0x08013cdc
 8012788:	20009c5c 	.word	0x20009c5c
 801278c:	08013be4 	.word	0x08013be4
 8012790:	08013c48 	.word	0x08013c48
 8012794:	08013c6c 	.word	0x08013c6c
				}
			}
#endif
			else	// nếu không phải là 2 ô liền kề thì cả 2 ô đều là Piece
			{
				datamain[firstMax.square] = type+1;
 8012798:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801279c:	461a      	mov	r2, r3
 801279e:	7ffb      	ldrb	r3, [r7, #31]
 80127a0:	3301      	adds	r3, #1
 80127a2:	b2d9      	uxtb	r1, r3
 80127a4:	4b0e      	ldr	r3, [pc, #56]	; (80127e0 <Scan+0x340>)
 80127a6:	5499      	strb	r1, [r3, r2]
				datamain[secondMax.square] = type+1;
 80127a8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80127ac:	461a      	mov	r2, r3
 80127ae:	7ffb      	ldrb	r3, [r7, #31]
 80127b0:	3301      	adds	r3, #1
 80127b2:	b2d9      	uxtb	r1, r3
 80127b4:	4b0a      	ldr	r3, [pc, #40]	; (80127e0 <Scan+0x340>)
 80127b6:	5499      	strb	r1, [r3, r2]
	for(int i=0;i<18;i++){
 80127b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ba:	3301      	adds	r3, #1
 80127bc:	633b      	str	r3, [r7, #48]	; 0x30
 80127be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c0:	2b11      	cmp	r3, #17
 80127c2:	f77f aea6 	ble.w	8012512 <Scan+0x72>
			}
		}
	}
	if(DetectFenChange()) return SCAN_FEN_CHANGE;
 80127c6:	f000 f827 	bl	8012818 <DetectFenChange>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d001      	beq.n	80127d4 <Scan+0x334>
 80127d0:	2301      	movs	r3, #1
 80127d2:	e000      	b.n	80127d6 <Scan+0x336>
	return SCAN_NO_FEN_CHANGE;
 80127d4:	2300      	movs	r3, #0
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3744      	adds	r7, #68	; 0x44
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd90      	pop	{r4, r7, pc}
 80127de:	bf00      	nop
 80127e0:	2000aeb0 	.word	0x2000aeb0

080127e4 <FileRankToSquare>:


// file:1->8 rank:1->8 (file=outCoil , rank=readCoil)
uint8_t FileRankToSquare(uint8_t file,uint8_t rank)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	4603      	mov	r3, r0
 80127ec:	460a      	mov	r2, r1
 80127ee:	71fb      	strb	r3, [r7, #7]
 80127f0:	4613      	mov	r3, r2
 80127f2:	71bb      	strb	r3, [r7, #6]
	return (8-file)*8 + rank-1;
 80127f4:	79fb      	ldrb	r3, [r7, #7]
 80127f6:	f1c3 0308 	rsb	r3, r3, #8
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	79bb      	ldrb	r3, [r7, #6]
 8012802:	4413      	add	r3, r2
 8012804:	b2db      	uxtb	r3, r3
 8012806:	3b01      	subs	r3, #1
 8012808:	b2db      	uxtb	r3, r3
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
	...

08012818 <DetectFenChange>:

/* Tìm sự thay đổi của FEN */
bool DetectFenChange()
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
	bool resuft=false;
 801281e:	2300      	movs	r3, #0
 8012820:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<64;i++){
 8012822:	2300      	movs	r3, #0
 8012824:	603b      	str	r3, [r7, #0]
 8012826:	e017      	b.n	8012858 <DetectFenChange+0x40>
		if(datamain[i] != datamain_old[i]){
 8012828:	4a10      	ldr	r2, [pc, #64]	; (801286c <DetectFenChange+0x54>)
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	4413      	add	r3, r2
 801282e:	781a      	ldrb	r2, [r3, #0]
 8012830:	490f      	ldr	r1, [pc, #60]	; (8012870 <DetectFenChange+0x58>)
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	440b      	add	r3, r1
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	429a      	cmp	r2, r3
 801283a:	d00a      	beq.n	8012852 <DetectFenChange+0x3a>
			resuft = true;
 801283c:	2301      	movs	r3, #1
 801283e:	71fb      	strb	r3, [r7, #7]
			datamain_old[i] = datamain[i];
 8012840:	4a0a      	ldr	r2, [pc, #40]	; (801286c <DetectFenChange+0x54>)
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	4413      	add	r3, r2
 8012846:	7819      	ldrb	r1, [r3, #0]
 8012848:	4a09      	ldr	r2, [pc, #36]	; (8012870 <DetectFenChange+0x58>)
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	4413      	add	r3, r2
 801284e:	460a      	mov	r2, r1
 8012850:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	603b      	str	r3, [r7, #0]
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	2b3f      	cmp	r3, #63	; 0x3f
 801285c:	dde4      	ble.n	8012828 <DetectFenChange+0x10>
		}
	}
	return resuft;
 801285e:	79fb      	ldrb	r3, [r7, #7]
}
 8012860:	4618      	mov	r0, r3
 8012862:	370c      	adds	r7, #12
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	2000aeb0 	.word	0x2000aeb0
 8012870:	2000aef0 	.word	0x2000aef0

08012874 <StartTaskScanPiece>:
 * 		- các lệnh được gửi theo chu kỳ khoảng 500ms, nếu quá thời gian này (khoảng 1000ms) thì
 * 		   coi như đó là lệnh đầu tiên( trả về fulldata và scanpiece 1 lần sau đó)
 * 3_Review: mỗi lần nhận review
 * 		- board sẽ chỉ scan khi chessclock_side thay đổi sau đó trả về fulldata */

void StartTaskScanPiece(void const *argument) {
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
	ScanPiecesInit();
 801287c:	f7ff fb06 	bl	8011e8c <ScanPiecesInit>
	MB85RS_getPointSave();
 8012880:	f7ff f88a 	bl	8011998 <MB85RS_getPointSave>
	Thresholdinit();
 8012884:	f000 f9c6 	bl	8012c14 <Thresholdinit>
		//RoamingData();

		osDelay(1);
#else
#ifdef CALIBASE
		if (isCalibaseMode == true) {
 8012888:	4b47      	ldr	r3, [pc, #284]	; (80129a8 <StartTaskScanPiece+0x134>)
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00c      	beq.n	80128aa <StartTaskScanPiece+0x36>
			Scan(false);
 8012890:	2000      	movs	r0, #0
 8012892:	f7ff fe05 	bl	80124a0 <Scan>
			UsbSendDataCalibase();
 8012896:	f001 f839 	bl	801390c <UsbSendDataCalibase>
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 801289a:	4b44      	ldr	r3, [pc, #272]	; (80129ac <StartTaskScanPiece+0x138>)
 801289c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80128a0:	601a      	str	r2, [r3, #0]
			osDelay(1);
 80128a2:	2001      	movs	r0, #1
 80128a4:	f7fc fa3f 	bl	800ed26 <osDelay>
 80128a8:	e079      	b.n	801299e <StartTaskScanPiece+0x12a>
		} else
#endif
		if (globalMode == MODE_REVIEW) {
 80128aa:	4b41      	ldr	r3, [pc, #260]	; (80129b0 <StartTaskScanPiece+0x13c>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d130      	bne.n	8012914 <StartTaskScanPiece+0xa0>
			SCANRESULT result = Scan(true);
 80128b2:	2001      	movs	r0, #1
 80128b4:	f7ff fdf4 	bl	80124a0 <Scan>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]
			if (result == SCAN_FEN_CHANGE) {
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d103      	bne.n	80128ca <StartTaskScanPiece+0x56>
				flagReviewFullData = true;
 80128c2:	4b3c      	ldr	r3, [pc, #240]	; (80129b4 <StartTaskScanPiece+0x140>)
 80128c4:	2201      	movs	r2, #1
 80128c6:	701a      	strb	r2, [r3, #0]
 80128c8:	e01b      	b.n	8012902 <StartTaskScanPiece+0x8e>
			} else if (result == SCAN_NO_FEN_CHANGE) {
 80128ca:	7bbb      	ldrb	r3, [r7, #14]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d103      	bne.n	80128d8 <StartTaskScanPiece+0x64>
				flagReviewFullData = false;
 80128d0:	4b38      	ldr	r3, [pc, #224]	; (80129b4 <StartTaskScanPiece+0x140>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	701a      	strb	r2, [r3, #0]
 80128d6:	e014      	b.n	8012902 <StartTaskScanPiece+0x8e>
			} else if (result == SCAN_SIDE_CHANGED) {
 80128d8:	7bbb      	ldrb	r3, [r7, #14]
 80128da:	2b02      	cmp	r3, #2
 80128dc:	d111      	bne.n	8012902 <StartTaskScanPiece+0x8e>
				LED_ON;
 80128de:	2201      	movs	r2, #1
 80128e0:	2104      	movs	r1, #4
 80128e2:	4835      	ldr	r0, [pc, #212]	; (80129b8 <StartTaskScanPiece+0x144>)
 80128e4:	f7f0 fa3c 	bl	8002d60 <HAL_GPIO_WritePin>
				Scan(false); // scanpiece không ngắt bởi clockside
 80128e8:	2000      	movs	r0, #0
 80128ea:	f7ff fdd9 	bl	80124a0 <Scan>
				flagReviewFullData = true;
 80128ee:	4b31      	ldr	r3, [pc, #196]	; (80129b4 <StartTaskScanPiece+0x140>)
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
				handlerMb85rs();
 80128f4:	f7ff f956 	bl	8011ba4 <handlerMb85rs>
				LED_OFF;
 80128f8:	2200      	movs	r2, #0
 80128fa:	2104      	movs	r1, #4
 80128fc:	482e      	ldr	r0, [pc, #184]	; (80129b8 <StartTaskScanPiece+0x144>)
 80128fe:	f7f0 fa2f 	bl	8002d60 <HAL_GPIO_WritePin>
			}
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 8012902:	4b2a      	ldr	r3, [pc, #168]	; (80129ac <StartTaskScanPiece+0x138>)
 8012904:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012908:	601a      	str	r2, [r3, #0]
			osDelay(500);
 801290a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801290e:	f7fc fa0a 	bl	800ed26 <osDelay>
 8012912:	e044      	b.n	801299e <StartTaskScanPiece+0x12a>
		} else if (globalMode == MODE_RECORDING) {
 8012914:	4b26      	ldr	r3, [pc, #152]	; (80129b0 <StartTaskScanPiece+0x13c>)
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2b01      	cmp	r3, #1
 801291a:	d140      	bne.n	801299e <StartTaskScanPiece+0x12a>
			if (chessclock_interrup) {
 801291c:	4b27      	ldr	r3, [pc, #156]	; (80129bc <StartTaskScanPiece+0x148>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d018      	beq.n	8012956 <StartTaskScanPiece+0xe2>
				LED_ON;
 8012924:	2201      	movs	r2, #1
 8012926:	2104      	movs	r1, #4
 8012928:	4823      	ldr	r0, [pc, #140]	; (80129b8 <StartTaskScanPiece+0x144>)
 801292a:	f7f0 fa19 	bl	8002d60 <HAL_GPIO_WritePin>
				Scan(false);
 801292e:	2000      	movs	r0, #0
 8012930:	f7ff fdb6 	bl	80124a0 <Scan>
				chessclock_interrup = false;
 8012934:	4b21      	ldr	r3, [pc, #132]	; (80129bc <StartTaskScanPiece+0x148>)
 8012936:	2200      	movs	r2, #0
 8012938:	701a      	strb	r2, [r3, #0]
				PushData(true);
 801293a:	2001      	movs	r0, #1
 801293c:	f000 f842 	bl	80129c4 <PushData>
				handlerMb85rs();
 8012940:	f7ff f930 	bl	8011ba4 <handlerMb85rs>
				LED_OFF;
 8012944:	2200      	movs	r2, #0
 8012946:	2104      	movs	r1, #4
 8012948:	481b      	ldr	r0, [pc, #108]	; (80129b8 <StartTaskScanPiece+0x144>)
 801294a:	f7f0 fa09 	bl	8002d60 <HAL_GPIO_WritePin>
				tikReviewData = 0; 		//đặt lại biến đếm
 801294e:	4b1c      	ldr	r3, [pc, #112]	; (80129c0 <StartTaskScanPiece+0x14c>)
 8012950:	2200      	movs	r2, #0
 8012952:	801a      	strh	r2, [r3, #0]
 8012954:	e01f      	b.n	8012996 <StartTaskScanPiece+0x122>
			} else {
				tikReviewData++;
 8012956:	4b1a      	ldr	r3, [pc, #104]	; (80129c0 <StartTaskScanPiece+0x14c>)
 8012958:	881b      	ldrh	r3, [r3, #0]
 801295a:	3301      	adds	r3, #1
 801295c:	b29a      	uxth	r2, r3
 801295e:	4b18      	ldr	r3, [pc, #96]	; (80129c0 <StartTaskScanPiece+0x14c>)
 8012960:	801a      	strh	r2, [r3, #0]
				if (tikReviewData > 2000) { // sau chu kỳ 1s sẽ tiến hành scan để lấy dữ liệu review
 8012962:	4b17      	ldr	r3, [pc, #92]	; (80129c0 <StartTaskScanPiece+0x14c>)
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801296a:	d914      	bls.n	8012996 <StartTaskScanPiece+0x122>
					tikReviewData = 0;
 801296c:	4b14      	ldr	r3, [pc, #80]	; (80129c0 <StartTaskScanPiece+0x14c>)
 801296e:	2200      	movs	r2, #0
 8012970:	801a      	strh	r2, [r3, #0]
					SCANRESULT result = Scan(true);
 8012972:	2001      	movs	r0, #1
 8012974:	f7ff fd94 	bl	80124a0 <Scan>
 8012978:	4603      	mov	r3, r0
 801297a:	73fb      	strb	r3, [r7, #15]
					if (result != SCAN_SIDE_CHANGED) {
 801297c:	7bfb      	ldrb	r3, [r7, #15]
 801297e:	2b02      	cmp	r3, #2
 8012980:	d003      	beq.n	801298a <StartTaskScanPiece+0x116>
						flagReviewFullData = true;
 8012982:	4b0c      	ldr	r3, [pc, #48]	; (80129b4 <StartTaskScanPiece+0x140>)
 8012984:	2201      	movs	r2, #1
 8012986:	701a      	strb	r2, [r3, #0]
 8012988:	e005      	b.n	8012996 <StartTaskScanPiece+0x122>
					}else if (result == SCAN_SIDE_CHANGED) {
 801298a:	7bfb      	ldrb	r3, [r7, #15]
 801298c:	2b02      	cmp	r3, #2
 801298e:	d102      	bne.n	8012996 <StartTaskScanPiece+0x122>
						chessclock_interrup = true;  // đặt lại biến để tiến hành scan ở phần trên
 8012990:	4b0a      	ldr	r3, [pc, #40]	; (80129bc <StartTaskScanPiece+0x148>)
 8012992:	2201      	movs	r2, #1
 8012994:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			IWDG->KR=0xAAAA;// Reload Counter Watchdog
 8012996:	4b05      	ldr	r3, [pc, #20]	; (80129ac <StartTaskScanPiece+0x138>)
 8012998:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801299c:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 801299e:	2001      	movs	r0, #1
 80129a0:	f7fc f9c1 	bl	800ed26 <osDelay>
		if (isCalibaseMode == true) {
 80129a4:	e770      	b.n	8012888 <StartTaskScanPiece+0x14>
 80129a6:	bf00      	nop
 80129a8:	2000b961 	.word	0x2000b961
 80129ac:	40003000 	.word	0x40003000
 80129b0:	2000b959 	.word	0x2000b959
 80129b4:	20000101 	.word	0x20000101
 80129b8:	40020400 	.word	0x40020400
 80129bc:	20009c5c 	.word	0x20009c5c
 80129c0:	2000b4b4 	.word	0x2000b4b4

080129c4 <PushData>:
#endif
	}
}

/* đẩy data vào queue */
void PushData(bool isClockChanged) {
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b089      	sub	sp, #36	; 0x24
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	4603      	mov	r3, r0
 80129cc:	71fb      	strb	r3, [r7, #7]
	uint8_t pieceA, pieceB, pie = 0;
 80129ce:	2300      	movs	r3, #0
 80129d0:	77fb      	strb	r3, [r7, #31]
	uint16_t crc;

	int8_t rear = QueueGetRear();
 80129d2:	f7ff f951 	bl	8011c78 <QueueGetRear>
 80129d6:	4603      	mov	r3, r0
 80129d8:	74fb      	strb	r3, [r7, #19]
	queueData[rear][0] = CMD_BEGIN;
 80129da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129de:	4a59      	ldr	r2, [pc, #356]	; (8012b44 <PushData+0x180>)
 80129e0:	2135      	movs	r1, #53	; 0x35
 80129e2:	fb01 f303 	mul.w	r3, r1, r3
 80129e6:	4413      	add	r3, r2
 80129e8:	223a      	movs	r2, #58	; 0x3a
 80129ea:	701a      	strb	r2, [r3, #0]
	queueData[rear][1] = ADDRESSBOARD_PART0;
 80129ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129f0:	4a54      	ldr	r2, [pc, #336]	; (8012b44 <PushData+0x180>)
 80129f2:	2135      	movs	r1, #53	; 0x35
 80129f4:	fb01 f303 	mul.w	r3, r1, r3
 80129f8:	4413      	add	r3, r2
 80129fa:	3301      	adds	r3, #1
 80129fc:	2200      	movs	r2, #0
 80129fe:	701a      	strb	r2, [r3, #0]
	queueData[rear][2] = ADDRESSBOARD_PART1;
 8012a00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a04:	4a4f      	ldr	r2, [pc, #316]	; (8012b44 <PushData+0x180>)
 8012a06:	2135      	movs	r1, #53	; 0x35
 8012a08:	fb01 f303 	mul.w	r3, r1, r3
 8012a0c:	4413      	add	r3, r2
 8012a0e:	3302      	adds	r3, #2
 8012a10:	2200      	movs	r2, #0
 8012a12:	701a      	strb	r2, [r3, #0]
	queueData[rear][3] = ADDRESSBOARD_PART2;
 8012a14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a18:	4a4a      	ldr	r2, [pc, #296]	; (8012b44 <PushData+0x180>)
 8012a1a:	2135      	movs	r1, #53	; 0x35
 8012a1c:	fb01 f303 	mul.w	r3, r1, r3
 8012a20:	4413      	add	r3, r2
 8012a22:	3303      	adds	r3, #3
 8012a24:	2208      	movs	r2, #8
 8012a26:	701a      	strb	r2, [r3, #0]
	if (isClockChanged) {
 8012a28:	79fb      	ldrb	r3, [r7, #7]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00a      	beq.n	8012a44 <PushData+0x80>
		queueData[rear][4] = RES_DATACLOCKCHANGE;
 8012a2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a32:	4a44      	ldr	r2, [pc, #272]	; (8012b44 <PushData+0x180>)
 8012a34:	2135      	movs	r1, #53	; 0x35
 8012a36:	fb01 f303 	mul.w	r3, r1, r3
 8012a3a:	4413      	add	r3, r2
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	2239      	movs	r2, #57	; 0x39
 8012a40:	701a      	strb	r2, [r3, #0]
 8012a42:	e009      	b.n	8012a58 <PushData+0x94>
	} else {
		queueData[rear][4] = RES_DATAFENCHANGE;
 8012a44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a48:	4a3e      	ldr	r2, [pc, #248]	; (8012b44 <PushData+0x180>)
 8012a4a:	2135      	movs	r1, #53	; 0x35
 8012a4c:	fb01 f303 	mul.w	r3, r1, r3
 8012a50:	4413      	add	r3, r2
 8012a52:	3304      	adds	r3, #4
 8012a54:	2238      	movs	r2, #56	; 0x38
 8012a56:	701a      	strb	r2, [r3, #0]
	}

	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 8012a58:	2300      	movs	r3, #0
 8012a5a:	61bb      	str	r3, [r7, #24]
 8012a5c:	e02a      	b.n	8012ab4 <PushData+0xf0>
		pieceA = byteToPiece(datamain_old[pie]);
 8012a5e:	7ffb      	ldrb	r3, [r7, #31]
 8012a60:	4a39      	ldr	r2, [pc, #228]	; (8012b48 <PushData+0x184>)
 8012a62:	5cd3      	ldrb	r3, [r2, r3]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f000 fad1 	bl	801300c <byteToPiece>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	73fb      	strb	r3, [r7, #15]
		pie++;
 8012a6e:	7ffb      	ldrb	r3, [r7, #31]
 8012a70:	3301      	adds	r3, #1
 8012a72:	77fb      	strb	r3, [r7, #31]
		pieceB = byteToPiece(datamain_old[pie]);
 8012a74:	7ffb      	ldrb	r3, [r7, #31]
 8012a76:	4a34      	ldr	r2, [pc, #208]	; (8012b48 <PushData+0x184>)
 8012a78:	5cd3      	ldrb	r3, [r2, r3]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f000 fac6 	bl	801300c <byteToPiece>
 8012a80:	4603      	mov	r3, r0
 8012a82:	73bb      	strb	r3, [r7, #14]
		pie++;
 8012a84:	7ffb      	ldrb	r3, [r7, #31]
 8012a86:	3301      	adds	r3, #1
 8012a88:	77fb      	strb	r3, [r7, #31]
		queueData[rear][i + 5] = (pieceA << 4) + pieceB;
 8012a8a:	7bfb      	ldrb	r3, [r7, #15]
 8012a8c:	011b      	lsls	r3, r3, #4
 8012a8e:	b2d8      	uxtb	r0, r3
 8012a90:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	3305      	adds	r3, #5
 8012a98:	7bb9      	ldrb	r1, [r7, #14]
 8012a9a:	4401      	add	r1, r0
 8012a9c:	b2cc      	uxtb	r4, r1
 8012a9e:	4929      	ldr	r1, [pc, #164]	; (8012b44 <PushData+0x180>)
 8012aa0:	2035      	movs	r0, #53	; 0x35
 8012aa2:	fb00 f202 	mul.w	r2, r0, r2
 8012aa6:	440a      	add	r2, r1
 8012aa8:	4413      	add	r3, r2
 8012aaa:	4622      	mov	r2, r4
 8012aac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	61bb      	str	r3, [r7, #24]
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	2b1f      	cmp	r3, #31
 8012ab8:	ddd1      	ble.n	8012a5e <PushData+0x9a>
	}
	for (int i = 0; i < 14; i++) {
 8012aba:	2300      	movs	r3, #0
 8012abc:	617b      	str	r3, [r7, #20]
 8012abe:	e012      	b.n	8012ae6 <PushData+0x122>
		queueData[rear][37 + i] = data_chessclock[i];
 8012ac0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	3325      	adds	r3, #37	; 0x25
 8012ac8:	4820      	ldr	r0, [pc, #128]	; (8012b4c <PushData+0x188>)
 8012aca:	6979      	ldr	r1, [r7, #20]
 8012acc:	4401      	add	r1, r0
 8012ace:	780c      	ldrb	r4, [r1, #0]
 8012ad0:	491c      	ldr	r1, [pc, #112]	; (8012b44 <PushData+0x180>)
 8012ad2:	2035      	movs	r0, #53	; 0x35
 8012ad4:	fb00 f202 	mul.w	r2, r0, r2
 8012ad8:	440a      	add	r2, r1
 8012ada:	4413      	add	r3, r2
 8012adc:	4622      	mov	r2, r4
 8012ade:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	617b      	str	r3, [r7, #20]
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b0d      	cmp	r3, #13
 8012aea:	dde9      	ble.n	8012ac0 <PushData+0xfc>
	}
	crc = CalculateCRC(queueData[rear], 1, 50);
 8012aec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012af0:	2235      	movs	r2, #53	; 0x35
 8012af2:	fb02 f303 	mul.w	r3, r2, r3
 8012af6:	4a13      	ldr	r2, [pc, #76]	; (8012b44 <PushData+0x180>)
 8012af8:	4413      	add	r3, r2
 8012afa:	2232      	movs	r2, #50	; 0x32
 8012afc:	2101      	movs	r1, #1
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 f826 	bl	8012b50 <CalculateCRC>
 8012b04:	4603      	mov	r3, r0
 8012b06:	823b      	strh	r3, [r7, #16]
	queueData[rear][51] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012b08:	8a3b      	ldrh	r3, [r7, #16]
 8012b0a:	0a1b      	lsrs	r3, r3, #8
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b12:	b2d0      	uxtb	r0, r2
 8012b14:	4a0b      	ldr	r2, [pc, #44]	; (8012b44 <PushData+0x180>)
 8012b16:	2135      	movs	r1, #53	; 0x35
 8012b18:	fb01 f303 	mul.w	r3, r1, r3
 8012b1c:	4413      	add	r3, r2
 8012b1e:	3333      	adds	r3, #51	; 0x33
 8012b20:	4602      	mov	r2, r0
 8012b22:	701a      	strb	r2, [r3, #0]
	queueData[rear][52] = (uint8_t) (crc & 0x00FF);
 8012b24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b28:	8a3a      	ldrh	r2, [r7, #16]
 8012b2a:	b2d0      	uxtb	r0, r2
 8012b2c:	4a05      	ldr	r2, [pc, #20]	; (8012b44 <PushData+0x180>)
 8012b2e:	2135      	movs	r1, #53	; 0x35
 8012b30:	fb01 f303 	mul.w	r3, r1, r3
 8012b34:	4413      	add	r3, r2
 8012b36:	3334      	adds	r3, #52	; 0x34
 8012b38:	4602      	mov	r2, r0
 8012b3a:	701a      	strb	r2, [r3, #0]
}
 8012b3c:	bf00      	nop
 8012b3e:	3724      	adds	r7, #36	; 0x24
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd90      	pop	{r4, r7, pc}
 8012b44:	2000b090 	.word	0x2000b090
 8012b48:	2000aef0 	.word	0x2000aef0
 8012b4c:	20009c60 	.word	0x20009c60

08012b50 <CalculateCRC>:
{
	return ((uint32_t)byteA)*64516 +  ((uint32_t)byteB)*254 +  (uint32_t)byteC;
}

uint16_t CalculateCRC(uint8_t* buffer,uint16_t offset,uint16_t count)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b085      	sub	sp, #20
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	807b      	strh	r3, [r7, #2]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	803b      	strh	r3, [r7, #0]
	uint16_t crc = 0xFFFF;
 8012b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b64:	81fb      	strh	r3, [r7, #14]

	for(uint16_t j=offset;j<(count+offset);j++)
 8012b66:	887b      	ldrh	r3, [r7, #2]
 8012b68:	81bb      	strh	r3, [r7, #12]
 8012b6a:	e026      	b.n	8012bba <CalculateCRC+0x6a>
	{
		crc ^= (uint16_t)buffer[j];
 8012b6c:	89bb      	ldrh	r3, [r7, #12]
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	4413      	add	r3, r2
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	89fb      	ldrh	r3, [r7, #14]
 8012b78:	4053      	eors	r3, r2
 8012b7a:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	60bb      	str	r3, [r7, #8]
 8012b80:	e015      	b.n	8012bae <CalculateCRC+0x5e>
		{
			if ((crc & 0x0001) != 0)
 8012b82:	89fb      	ldrh	r3, [r7, #14]
 8012b84:	f003 0301 	and.w	r3, r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d00a      	beq.n	8012ba2 <CalculateCRC+0x52>
			{
				crc >>= 1;
 8012b8c:	89fb      	ldrh	r3, [r7, #14]
 8012b8e:	085b      	lsrs	r3, r3, #1
 8012b90:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8012b92:	89fb      	ldrh	r3, [r7, #14]
 8012b94:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8012b98:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8012b9c:	43db      	mvns	r3, r3
 8012b9e:	81fb      	strh	r3, [r7, #14]
 8012ba0:	e002      	b.n	8012ba8 <CalculateCRC+0x58>
			}
			else
			{
				crc >>= 1;
 8012ba2:	89fb      	ldrh	r3, [r7, #14]
 8012ba4:	085b      	lsrs	r3, r3, #1
 8012ba6:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	3301      	adds	r3, #1
 8012bac:	60bb      	str	r3, [r7, #8]
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	2b07      	cmp	r3, #7
 8012bb2:	dde6      	ble.n	8012b82 <CalculateCRC+0x32>
	for(uint16_t j=offset;j<(count+offset);j++)
 8012bb4:	89bb      	ldrh	r3, [r7, #12]
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	81bb      	strh	r3, [r7, #12]
 8012bba:	89ba      	ldrh	r2, [r7, #12]
 8012bbc:	8839      	ldrh	r1, [r7, #0]
 8012bbe:	887b      	ldrh	r3, [r7, #2]
 8012bc0:	440b      	add	r3, r1
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	dbd2      	blt.n	8012b6c <CalculateCRC+0x1c>
			}
		}
	}
	return crc;
 8012bc6:	89fb      	ldrh	r3, [r7, #14]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3714      	adds	r7, #20
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <getMarkSq>:





uint8_t getMarkSq(uint8_t type, uint8_t squamark) {
 8012bd4:	b480      	push	{r7}
 8012bd6:	b085      	sub	sp, #20
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	4603      	mov	r3, r0
 8012bdc:	460a      	mov	r2, r1
 8012bde:	71fb      	strb	r3, [r7, #7]
 8012be0:	4613      	mov	r3, r2
 8012be2:	71bb      	strb	r3, [r7, #6]
	uint8_t pulses_mark = 0;
 8012be4:	2300      	movs	r3, #0
 8012be6:	73fb      	strb	r3, [r7, #15]
	if(squamark>=64) return 15;
 8012be8:	79bb      	ldrb	r3, [r7, #6]
 8012bea:	2b3f      	cmp	r3, #63	; 0x3f
 8012bec:	d901      	bls.n	8012bf2 <getMarkSq+0x1e>
 8012bee:	230f      	movs	r3, #15
 8012bf0:	e008      	b.n	8012c04 <getMarkSq+0x30>
	pulses_mark = threshold[type][squamark];
 8012bf2:	79fa      	ldrb	r2, [r7, #7]
 8012bf4:	79bb      	ldrb	r3, [r7, #6]
 8012bf6:	4906      	ldr	r1, [pc, #24]	; (8012c10 <getMarkSq+0x3c>)
 8012bf8:	0192      	lsls	r2, r2, #6
 8012bfa:	440a      	add	r2, r1
 8012bfc:	4413      	add	r3, r2
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	73fb      	strb	r3, [r7, #15]
//		break;
//	case 17:
//		pulses_mark = mark_pulse17[squamark];
//		break;
//	}
	return pulses_mark;
 8012c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3714      	adds	r7, #20
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	2000b4b8 	.word	0x2000b4b8

08012c14 <Thresholdinit>:

void Thresholdinit() {
 8012c14:	b480      	push	{r7}
 8012c16:	b083      	sub	sp, #12
 8012c18:	af00      	add	r7, sp, #0
	//ThresholdRead();
	/* Nếu dữ liệu lỗi thì gán ngưỡng bằng giá trị mặc định */
	//if (ThresholdCheckError() == true) {
		for (int type = 0; type < 18; type++) {
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	607b      	str	r3, [r7, #4]
 8012c1e:	e121      	b.n	8012e64 <Thresholdinit+0x250>
			for (int i = 0; i < 64; i++) {
 8012c20:	2300      	movs	r3, #0
 8012c22:	603b      	str	r3, [r7, #0]
 8012c24:	e117      	b.n	8012e56 <Thresholdinit+0x242>
				switch(type){
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b11      	cmp	r3, #17
 8012c2a:	f200 8111 	bhi.w	8012e50 <Thresholdinit+0x23c>
 8012c2e:	a201      	add	r2, pc, #4	; (adr r2, 8012c34 <Thresholdinit+0x20>)
 8012c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c34:	08012c7d 	.word	0x08012c7d
 8012c38:	08012c97 	.word	0x08012c97
 8012c3c:	08012cb1 	.word	0x08012cb1
 8012c40:	08012ccb 	.word	0x08012ccb
 8012c44:	08012ce5 	.word	0x08012ce5
 8012c48:	08012cff 	.word	0x08012cff
 8012c4c:	08012d19 	.word	0x08012d19
 8012c50:	08012d33 	.word	0x08012d33
 8012c54:	08012d4d 	.word	0x08012d4d
 8012c58:	08012d67 	.word	0x08012d67
 8012c5c:	08012d81 	.word	0x08012d81
 8012c60:	08012d9b 	.word	0x08012d9b
 8012c64:	08012db5 	.word	0x08012db5
 8012c68:	08012dcf 	.word	0x08012dcf
 8012c6c:	08012de9 	.word	0x08012de9
 8012c70:	08012e03 	.word	0x08012e03
 8012c74:	08012e1d 	.word	0x08012e1d
 8012c78:	08012e37 	.word	0x08012e37
				case 0:threshold[type][i] = mark_pulse0[i]; break;
 8012c7c:	4a7f      	ldr	r2, [pc, #508]	; (8012e7c <Thresholdinit+0x268>)
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	4413      	add	r3, r2
 8012c82:	7819      	ldrb	r1, [r3, #0]
 8012c84:	4a7e      	ldr	r2, [pc, #504]	; (8012e80 <Thresholdinit+0x26c>)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	019b      	lsls	r3, r3, #6
 8012c8a:	441a      	add	r2, r3
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	4413      	add	r3, r2
 8012c90:	460a      	mov	r2, r1
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	e0dc      	b.n	8012e50 <Thresholdinit+0x23c>
				case 1:threshold[type][i] = mark_pulse1[i]; break;
 8012c96:	4a7b      	ldr	r2, [pc, #492]	; (8012e84 <Thresholdinit+0x270>)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	7819      	ldrb	r1, [r3, #0]
 8012c9e:	4a78      	ldr	r2, [pc, #480]	; (8012e80 <Thresholdinit+0x26c>)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	019b      	lsls	r3, r3, #6
 8012ca4:	441a      	add	r2, r3
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	4413      	add	r3, r2
 8012caa:	460a      	mov	r2, r1
 8012cac:	701a      	strb	r2, [r3, #0]
 8012cae:	e0cf      	b.n	8012e50 <Thresholdinit+0x23c>
				case 2:threshold[type][i] = mark_pulse2[i]; break;
 8012cb0:	4a75      	ldr	r2, [pc, #468]	; (8012e88 <Thresholdinit+0x274>)
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	7819      	ldrb	r1, [r3, #0]
 8012cb8:	4a71      	ldr	r2, [pc, #452]	; (8012e80 <Thresholdinit+0x26c>)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	019b      	lsls	r3, r3, #6
 8012cbe:	441a      	add	r2, r3
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	460a      	mov	r2, r1
 8012cc6:	701a      	strb	r2, [r3, #0]
 8012cc8:	e0c2      	b.n	8012e50 <Thresholdinit+0x23c>
				case 3:threshold[type][i] = mark_pulse3[i]; break;
 8012cca:	4a70      	ldr	r2, [pc, #448]	; (8012e8c <Thresholdinit+0x278>)
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	4413      	add	r3, r2
 8012cd0:	7819      	ldrb	r1, [r3, #0]
 8012cd2:	4a6b      	ldr	r2, [pc, #428]	; (8012e80 <Thresholdinit+0x26c>)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	019b      	lsls	r3, r3, #6
 8012cd8:	441a      	add	r2, r3
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	4413      	add	r3, r2
 8012cde:	460a      	mov	r2, r1
 8012ce0:	701a      	strb	r2, [r3, #0]
 8012ce2:	e0b5      	b.n	8012e50 <Thresholdinit+0x23c>
				case 4:threshold[type][i] = mark_pulse4[i]; break;
 8012ce4:	4a6a      	ldr	r2, [pc, #424]	; (8012e90 <Thresholdinit+0x27c>)
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	4413      	add	r3, r2
 8012cea:	7819      	ldrb	r1, [r3, #0]
 8012cec:	4a64      	ldr	r2, [pc, #400]	; (8012e80 <Thresholdinit+0x26c>)
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	019b      	lsls	r3, r3, #6
 8012cf2:	441a      	add	r2, r3
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	460a      	mov	r2, r1
 8012cfa:	701a      	strb	r2, [r3, #0]
 8012cfc:	e0a8      	b.n	8012e50 <Thresholdinit+0x23c>
				case 5:threshold[type][i] = mark_pulse5[i]; break;
 8012cfe:	4a65      	ldr	r2, [pc, #404]	; (8012e94 <Thresholdinit+0x280>)
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	4413      	add	r3, r2
 8012d04:	7819      	ldrb	r1, [r3, #0]
 8012d06:	4a5e      	ldr	r2, [pc, #376]	; (8012e80 <Thresholdinit+0x26c>)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	019b      	lsls	r3, r3, #6
 8012d0c:	441a      	add	r2, r3
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	4413      	add	r3, r2
 8012d12:	460a      	mov	r2, r1
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	e09b      	b.n	8012e50 <Thresholdinit+0x23c>
				case 6:threshold[type][i] = mark_pulse6[i]; break;
 8012d18:	4a5f      	ldr	r2, [pc, #380]	; (8012e98 <Thresholdinit+0x284>)
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	7819      	ldrb	r1, [r3, #0]
 8012d20:	4a57      	ldr	r2, [pc, #348]	; (8012e80 <Thresholdinit+0x26c>)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	019b      	lsls	r3, r3, #6
 8012d26:	441a      	add	r2, r3
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	460a      	mov	r2, r1
 8012d2e:	701a      	strb	r2, [r3, #0]
 8012d30:	e08e      	b.n	8012e50 <Thresholdinit+0x23c>
				case 7:threshold[type][i] = mark_pulse7[i]; break;
 8012d32:	4a5a      	ldr	r2, [pc, #360]	; (8012e9c <Thresholdinit+0x288>)
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	4413      	add	r3, r2
 8012d38:	7819      	ldrb	r1, [r3, #0]
 8012d3a:	4a51      	ldr	r2, [pc, #324]	; (8012e80 <Thresholdinit+0x26c>)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	019b      	lsls	r3, r3, #6
 8012d40:	441a      	add	r2, r3
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	4413      	add	r3, r2
 8012d46:	460a      	mov	r2, r1
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e081      	b.n	8012e50 <Thresholdinit+0x23c>
				case 8:threshold[type][i] = mark_pulse8[i]; break;
 8012d4c:	4a54      	ldr	r2, [pc, #336]	; (8012ea0 <Thresholdinit+0x28c>)
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	4413      	add	r3, r2
 8012d52:	7819      	ldrb	r1, [r3, #0]
 8012d54:	4a4a      	ldr	r2, [pc, #296]	; (8012e80 <Thresholdinit+0x26c>)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	019b      	lsls	r3, r3, #6
 8012d5a:	441a      	add	r2, r3
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	4413      	add	r3, r2
 8012d60:	460a      	mov	r2, r1
 8012d62:	701a      	strb	r2, [r3, #0]
 8012d64:	e074      	b.n	8012e50 <Thresholdinit+0x23c>
				case 9:threshold[type][i] = mark_pulse9[i]; break;
 8012d66:	4a4f      	ldr	r2, [pc, #316]	; (8012ea4 <Thresholdinit+0x290>)
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	7819      	ldrb	r1, [r3, #0]
 8012d6e:	4a44      	ldr	r2, [pc, #272]	; (8012e80 <Thresholdinit+0x26c>)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	019b      	lsls	r3, r3, #6
 8012d74:	441a      	add	r2, r3
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	4413      	add	r3, r2
 8012d7a:	460a      	mov	r2, r1
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	e067      	b.n	8012e50 <Thresholdinit+0x23c>
				case 10:threshold[type][i] = mark_pulse10[i]; break;
 8012d80:	4a49      	ldr	r2, [pc, #292]	; (8012ea8 <Thresholdinit+0x294>)
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	4413      	add	r3, r2
 8012d86:	7819      	ldrb	r1, [r3, #0]
 8012d88:	4a3d      	ldr	r2, [pc, #244]	; (8012e80 <Thresholdinit+0x26c>)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	019b      	lsls	r3, r3, #6
 8012d8e:	441a      	add	r2, r3
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	4413      	add	r3, r2
 8012d94:	460a      	mov	r2, r1
 8012d96:	701a      	strb	r2, [r3, #0]
 8012d98:	e05a      	b.n	8012e50 <Thresholdinit+0x23c>
				case 11:threshold[type][i] = mark_pulse11[i]; break;
 8012d9a:	4a44      	ldr	r2, [pc, #272]	; (8012eac <Thresholdinit+0x298>)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	4413      	add	r3, r2
 8012da0:	7819      	ldrb	r1, [r3, #0]
 8012da2:	4a37      	ldr	r2, [pc, #220]	; (8012e80 <Thresholdinit+0x26c>)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	019b      	lsls	r3, r3, #6
 8012da8:	441a      	add	r2, r3
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	4413      	add	r3, r2
 8012dae:	460a      	mov	r2, r1
 8012db0:	701a      	strb	r2, [r3, #0]
 8012db2:	e04d      	b.n	8012e50 <Thresholdinit+0x23c>
				case 12:threshold[type][i] = mark_pulse12[i]; break;
 8012db4:	4a3e      	ldr	r2, [pc, #248]	; (8012eb0 <Thresholdinit+0x29c>)
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	4413      	add	r3, r2
 8012dba:	7819      	ldrb	r1, [r3, #0]
 8012dbc:	4a30      	ldr	r2, [pc, #192]	; (8012e80 <Thresholdinit+0x26c>)
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	019b      	lsls	r3, r3, #6
 8012dc2:	441a      	add	r2, r3
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	460a      	mov	r2, r1
 8012dca:	701a      	strb	r2, [r3, #0]
 8012dcc:	e040      	b.n	8012e50 <Thresholdinit+0x23c>
				case 13:threshold[type][i] = mark_pulse13[i]; break;
 8012dce:	4a39      	ldr	r2, [pc, #228]	; (8012eb4 <Thresholdinit+0x2a0>)
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	4413      	add	r3, r2
 8012dd4:	7819      	ldrb	r1, [r3, #0]
 8012dd6:	4a2a      	ldr	r2, [pc, #168]	; (8012e80 <Thresholdinit+0x26c>)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	019b      	lsls	r3, r3, #6
 8012ddc:	441a      	add	r2, r3
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	4413      	add	r3, r2
 8012de2:	460a      	mov	r2, r1
 8012de4:	701a      	strb	r2, [r3, #0]
 8012de6:	e033      	b.n	8012e50 <Thresholdinit+0x23c>
				case 14:threshold[type][i] = mark_pulse14[i]; break;
 8012de8:	4a33      	ldr	r2, [pc, #204]	; (8012eb8 <Thresholdinit+0x2a4>)
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	4413      	add	r3, r2
 8012dee:	7819      	ldrb	r1, [r3, #0]
 8012df0:	4a23      	ldr	r2, [pc, #140]	; (8012e80 <Thresholdinit+0x26c>)
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	019b      	lsls	r3, r3, #6
 8012df6:	441a      	add	r2, r3
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	460a      	mov	r2, r1
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	e026      	b.n	8012e50 <Thresholdinit+0x23c>
				case 15:threshold[type][i] = mark_pulse15[i]; break;
 8012e02:	4a2e      	ldr	r2, [pc, #184]	; (8012ebc <Thresholdinit+0x2a8>)
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	4413      	add	r3, r2
 8012e08:	7819      	ldrb	r1, [r3, #0]
 8012e0a:	4a1d      	ldr	r2, [pc, #116]	; (8012e80 <Thresholdinit+0x26c>)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	019b      	lsls	r3, r3, #6
 8012e10:	441a      	add	r2, r3
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	4413      	add	r3, r2
 8012e16:	460a      	mov	r2, r1
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	e019      	b.n	8012e50 <Thresholdinit+0x23c>
				case 16:threshold[type][i] = mark_pulse16[i]; break;
 8012e1c:	4a28      	ldr	r2, [pc, #160]	; (8012ec0 <Thresholdinit+0x2ac>)
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	4413      	add	r3, r2
 8012e22:	7819      	ldrb	r1, [r3, #0]
 8012e24:	4a16      	ldr	r2, [pc, #88]	; (8012e80 <Thresholdinit+0x26c>)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	019b      	lsls	r3, r3, #6
 8012e2a:	441a      	add	r2, r3
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	4413      	add	r3, r2
 8012e30:	460a      	mov	r2, r1
 8012e32:	701a      	strb	r2, [r3, #0]
 8012e34:	e00c      	b.n	8012e50 <Thresholdinit+0x23c>
				case 17:threshold[type][i] = mark_pulse17[i]; break;
 8012e36:	4a23      	ldr	r2, [pc, #140]	; (8012ec4 <Thresholdinit+0x2b0>)
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	7819      	ldrb	r1, [r3, #0]
 8012e3e:	4a10      	ldr	r2, [pc, #64]	; (8012e80 <Thresholdinit+0x26c>)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	019b      	lsls	r3, r3, #6
 8012e44:	441a      	add	r2, r3
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	4413      	add	r3, r2
 8012e4a:	460a      	mov	r2, r1
 8012e4c:	701a      	strb	r2, [r3, #0]
 8012e4e:	bf00      	nop
			for (int i = 0; i < 64; i++) {
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	3301      	adds	r3, #1
 8012e54:	603b      	str	r3, [r7, #0]
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	2b3f      	cmp	r3, #63	; 0x3f
 8012e5a:	f77f aee4 	ble.w	8012c26 <Thresholdinit+0x12>
		for (int type = 0; type < 18; type++) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3301      	adds	r3, #1
 8012e62:	607b      	str	r3, [r7, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2b11      	cmp	r3, #17
 8012e68:	f77f aeda 	ble.w	8012c20 <Thresholdinit+0xc>
			}
		}
		/* Lưu lại vào bộ nhớ Flash */
		//ThresholdWrite();
	//}
}
 8012e6c:	bf00      	nop
 8012e6e:	bf00      	nop
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop
 8012e7c:	08013ce4 	.word	0x08013ce4
 8012e80:	2000b4b8 	.word	0x2000b4b8
 8012e84:	08013d24 	.word	0x08013d24
 8012e88:	08013d64 	.word	0x08013d64
 8012e8c:	08013da4 	.word	0x08013da4
 8012e90:	08013de4 	.word	0x08013de4
 8012e94:	08013e24 	.word	0x08013e24
 8012e98:	08013e64 	.word	0x08013e64
 8012e9c:	08013ea4 	.word	0x08013ea4
 8012ea0:	08013ee4 	.word	0x08013ee4
 8012ea4:	08013f24 	.word	0x08013f24
 8012ea8:	08013f64 	.word	0x08013f64
 8012eac:	08013fa4 	.word	0x08013fa4
 8012eb0:	08013fe4 	.word	0x08013fe4
 8012eb4:	08014024 	.word	0x08014024
 8012eb8:	08014064 	.word	0x08014064
 8012ebc:	080140a4 	.word	0x080140a4
 8012ec0:	080140e4 	.word	0x080140e4
 8012ec4:	08014124 	.word	0x08014124

08012ec8 <HAL_UARTEx_RxEventCallback>:
uint8_t dataUsbCalibase[327];
extern uint16_t datapieces[18][64][2];  // 18-type 	64-square	2-period+length
extern uint8_t datamain[64];				// chứa dữ liệu chính của pieces
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4a0b      	ldr	r2, [pc, #44]	; (8012f08 <HAL_UARTEx_RxEventCallback+0x40>)
 8012eda:	4293      	cmp	r3, r2
 8012edc:	d110      	bne.n	8012f00 <HAL_UARTEx_RxEventCallback+0x38>
		uart1_data_length = Size;
 8012ede:	887b      	ldrh	r3, [r7, #2]
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <HAL_UARTEx_RxEventCallback+0x44>)
 8012ee4:	701a      	strb	r2, [r3, #0]
		AnalyserCMD(uart1_rx_buf, uart1_data_length, RS485);
 8012ee6:	4b09      	ldr	r3, [pc, #36]	; (8012f0c <HAL_UARTEx_RxEventCallback+0x44>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	2200      	movs	r2, #0
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4807      	ldr	r0, [pc, #28]	; (8012f10 <HAL_UARTEx_RxEventCallback+0x48>)
 8012ef2:	f000 f8fd 	bl	80130f0 <AnalyserCMD>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf,
 8012ef6:	2220      	movs	r2, #32
 8012ef8:	4905      	ldr	r1, [pc, #20]	; (8012f10 <HAL_UARTEx_RxEventCallback+0x48>)
 8012efa:	4806      	ldr	r0, [pc, #24]	; (8012f14 <HAL_UARTEx_RxEventCallback+0x4c>)
 8012efc:	f7f7 f93b 	bl	800a176 <HAL_UARTEx_ReceiveToIdle_DMA>
				UART1_BUFFER_LENGTH);
	}
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	40011000 	.word	0x40011000
 8012f0c:	2000b958 	.word	0x2000b958
 8012f10:	2000b938 	.word	0x2000b938
 8012f14:	200049e0 	.word	0x200049e0

08012f18 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4a2a      	ldr	r2, [pc, #168]	; (8012fd0 <HAL_UART_ErrorCallback+0xb8>)
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d14d      	bne.n	8012fc6 <HAL_UART_ErrorCallback+0xae>
		uint32_t uart_err = HAL_UART_GetError(&huart1);
 8012f2a:	482a      	ldr	r0, [pc, #168]	; (8012fd4 <HAL_UART_ErrorCallback+0xbc>)
 8012f2c:	f7f7 fc34 	bl	800a798 <HAL_UART_GetError>
 8012f30:	60f8      	str	r0, [r7, #12]
		switch (uart_err) {
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	2b0f      	cmp	r3, #15
 8012f38:	d836      	bhi.n	8012fa8 <HAL_UART_ErrorCallback+0x90>
 8012f3a:	a201      	add	r2, pc, #4	; (adr r2, 8012f40 <HAL_UART_ErrorCallback+0x28>)
 8012f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f40:	08012f81 	.word	0x08012f81
 8012f44:	08012f89 	.word	0x08012f89
 8012f48:	08012fa9 	.word	0x08012fa9
 8012f4c:	08012f91 	.word	0x08012f91
 8012f50:	08012fa9 	.word	0x08012fa9
 8012f54:	08012fa9 	.word	0x08012fa9
 8012f58:	08012fa9 	.word	0x08012fa9
 8012f5c:	08012f99 	.word	0x08012f99
 8012f60:	08012fa9 	.word	0x08012fa9
 8012f64:	08012fa9 	.word	0x08012fa9
 8012f68:	08012fa9 	.word	0x08012fa9
 8012f6c:	08012fa9 	.word	0x08012fa9
 8012f70:	08012fa9 	.word	0x08012fa9
 8012f74:	08012fa9 	.word	0x08012fa9
 8012f78:	08012fa9 	.word	0x08012fa9
 8012f7c:	08012fa1 	.word	0x08012fa1
		case HAL_UART_ERROR_PE:
			sys_error = BOARD_UART_ERROR_PE;
 8012f80:	4b15      	ldr	r3, [pc, #84]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012f82:	220a      	movs	r2, #10
 8012f84:	701a      	strb	r2, [r3, #0]
			break;
 8012f86:	e013      	b.n	8012fb0 <HAL_UART_ErrorCallback+0x98>
		case HAL_UART_ERROR_NE:
			sys_error = BOARD_UART_ERROR_NE;
 8012f88:	4b13      	ldr	r3, [pc, #76]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012f8a:	220b      	movs	r2, #11
 8012f8c:	701a      	strb	r2, [r3, #0]
			break;
 8012f8e:	e00f      	b.n	8012fb0 <HAL_UART_ErrorCallback+0x98>
		case HAL_UART_ERROR_FE:
			sys_error = BOARD_UART_ERROR_FE;
 8012f90:	4b11      	ldr	r3, [pc, #68]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012f92:	220c      	movs	r2, #12
 8012f94:	701a      	strb	r2, [r3, #0]
			break;
 8012f96:	e00b      	b.n	8012fb0 <HAL_UART_ErrorCallback+0x98>
		case HAL_UART_ERROR_ORE:
			sys_error = BOARD_UART_ERROR_ORE;
 8012f98:	4b0f      	ldr	r3, [pc, #60]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012f9a:	220d      	movs	r2, #13
 8012f9c:	701a      	strb	r2, [r3, #0]
			break;
 8012f9e:	e007      	b.n	8012fb0 <HAL_UART_ErrorCallback+0x98>
		case HAL_UART_ERROR_DMA:
			sys_error = BOARD_UART_ERROR_DMA;
 8012fa0:	4b0d      	ldr	r3, [pc, #52]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012fa2:	220e      	movs	r2, #14
 8012fa4:	701a      	strb	r2, [r3, #0]
			break;
 8012fa6:	e003      	b.n	8012fb0 <HAL_UART_ErrorCallback+0x98>
		default:
			sys_error = BOARD_SYS_ERROR;
 8012fa8:	4b0b      	ldr	r3, [pc, #44]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012faa:	2210      	movs	r2, #16
 8012fac:	701a      	strb	r2, [r3, #0]
			break;
 8012fae:	bf00      	nop
		}
		BackupError_write(sys_error);
 8012fb0:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <HAL_UART_ErrorCallback+0xc0>)
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7fe ff2d 	bl	8011e14 <BackupError_write>
		HAL_Delay(1000);
 8012fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012fbe:	f7ef f80d 	bl	8001fdc <HAL_Delay>
		HAL_NVIC_SystemReset();
 8012fc2:	f7ef f928 	bl	8002216 <HAL_NVIC_SystemReset>
	}
}
 8012fc6:	bf00      	nop
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	40011000 	.word	0x40011000
 8012fd4:	200049e0 	.word	0x200049e0
 8012fd8:	2000449c 	.word	0x2000449c

08012fdc <initReceiverUart>:

void initReceiverUart() {
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012fe0:	2220      	movs	r2, #32
 8012fe2:	4907      	ldr	r1, [pc, #28]	; (8013000 <initReceiverUart+0x24>)
 8012fe4:	4807      	ldr	r0, [pc, #28]	; (8013004 <initReceiverUart+0x28>)
 8012fe6:	f7f7 f8c6 	bl	800a176 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8012fea:	4b07      	ldr	r3, [pc, #28]	; (8013008 <initReceiverUart+0x2c>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	4b05      	ldr	r3, [pc, #20]	; (8013008 <initReceiverUart+0x2c>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	f022 0208 	bic.w	r2, r2, #8
 8012ff8:	601a      	str	r2, [r3, #0]
}
 8012ffa:	bf00      	nop
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	2000b938 	.word	0x2000b938
 8013004:	200049e0 	.word	0x200049e0
 8013008:	20004a24 	.word	0x20004a24

0801300c <byteToPiece>:
 *  xxxx: 0->12 piece A
 *  yyyy: 0->12 piece B
 *  0:EMTY, 1:WKING, 2:WQUEEN, 3:WBISHOP, 4:WKNIGHT, 5:WROOK, 6:WPAWN,
 *  		7:BKING, 8:BQUEEN, 9:BBISHOP,10:BKNIGHT,11:BROOK,12:BPAWN.
 * 		*/
uint8_t byteToPiece(uint8_t piece) {
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	71fb      	strb	r3, [r7, #7]
	uint8_t pi;
	switch (piece) {
 8013016:	79fb      	ldrb	r3, [r7, #7]
 8013018:	2b12      	cmp	r3, #18
 801301a:	d862      	bhi.n	80130e2 <byteToPiece+0xd6>
 801301c:	a201      	add	r2, pc, #4	; (adr r2, 8013024 <byteToPiece+0x18>)
 801301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013022:	bf00      	nop
 8013024:	08013071 	.word	0x08013071
 8013028:	08013077 	.word	0x08013077
 801302c:	0801307d 	.word	0x0801307d
 8013030:	08013083 	.word	0x08013083
 8013034:	08013089 	.word	0x08013089
 8013038:	0801308f 	.word	0x0801308f
 801303c:	08013095 	.word	0x08013095
 8013040:	0801309b 	.word	0x0801309b
 8013044:	080130a1 	.word	0x080130a1
 8013048:	080130a7 	.word	0x080130a7
 801304c:	080130ad 	.word	0x080130ad
 8013050:	080130b3 	.word	0x080130b3
 8013054:	080130b9 	.word	0x080130b9
 8013058:	080130bf 	.word	0x080130bf
 801305c:	080130c5 	.word	0x080130c5
 8013060:	080130cb 	.word	0x080130cb
 8013064:	080130d1 	.word	0x080130d1
 8013068:	080130d7 	.word	0x080130d7
 801306c:	080130dd 	.word	0x080130dd
	case 0:
		pi = EMTY;
 8013070:	2300      	movs	r3, #0
 8013072:	73fb      	strb	r3, [r7, #15]
		break;
 8013074:	e035      	b.n	80130e2 <byteToPiece+0xd6>
	case 1:
		pi = WKING;
 8013076:	2301      	movs	r3, #1
 8013078:	73fb      	strb	r3, [r7, #15]
		break;
 801307a:	e032      	b.n	80130e2 <byteToPiece+0xd6>
	case 2:
		pi = WQUEEN;
 801307c:	2302      	movs	r3, #2
 801307e:	73fb      	strb	r3, [r7, #15]
		break;
 8013080:	e02f      	b.n	80130e2 <byteToPiece+0xd6>
	case 3:
		pi = WBISHOP;
 8013082:	2303      	movs	r3, #3
 8013084:	73fb      	strb	r3, [r7, #15]
		break;
 8013086:	e02c      	b.n	80130e2 <byteToPiece+0xd6>
	case 4:
		pi = WKNIGHT;
 8013088:	2304      	movs	r3, #4
 801308a:	73fb      	strb	r3, [r7, #15]
		break;
 801308c:	e029      	b.n	80130e2 <byteToPiece+0xd6>
	case 5:
		pi = WROOK;
 801308e:	2305      	movs	r3, #5
 8013090:	73fb      	strb	r3, [r7, #15]
		break;
 8013092:	e026      	b.n	80130e2 <byteToPiece+0xd6>
	case 6:
		pi = BKING;
 8013094:	2307      	movs	r3, #7
 8013096:	73fb      	strb	r3, [r7, #15]
		break;
 8013098:	e023      	b.n	80130e2 <byteToPiece+0xd6>
	case 7:
		pi = BQUEEN;
 801309a:	2308      	movs	r3, #8
 801309c:	73fb      	strb	r3, [r7, #15]
		break;
 801309e:	e020      	b.n	80130e2 <byteToPiece+0xd6>
	case 8:
		pi = BBISHOP;
 80130a0:	2309      	movs	r3, #9
 80130a2:	73fb      	strb	r3, [r7, #15]
		break;
 80130a4:	e01d      	b.n	80130e2 <byteToPiece+0xd6>
	case 9:
		pi = BKNIGHT;
 80130a6:	230a      	movs	r3, #10
 80130a8:	73fb      	strb	r3, [r7, #15]
		break;
 80130aa:	e01a      	b.n	80130e2 <byteToPiece+0xd6>
	case 10:
		pi = BROOK;
 80130ac:	230b      	movs	r3, #11
 80130ae:	73fb      	strb	r3, [r7, #15]
		break;
 80130b0:	e017      	b.n	80130e2 <byteToPiece+0xd6>
	case 11:
		pi = BPAWN;
 80130b2:	230c      	movs	r3, #12
 80130b4:	73fb      	strb	r3, [r7, #15]
		break;
 80130b6:	e014      	b.n	80130e2 <byteToPiece+0xd6>
	case 12:
		pi = BPAWN;
 80130b8:	230c      	movs	r3, #12
 80130ba:	73fb      	strb	r3, [r7, #15]
		break;
 80130bc:	e011      	b.n	80130e2 <byteToPiece+0xd6>
	case 13:
		pi = BPAWN;
 80130be:	230c      	movs	r3, #12
 80130c0:	73fb      	strb	r3, [r7, #15]
		break;
 80130c2:	e00e      	b.n	80130e2 <byteToPiece+0xd6>
	case 14:
		pi = BPAWN;
 80130c4:	230c      	movs	r3, #12
 80130c6:	73fb      	strb	r3, [r7, #15]
		break;
 80130c8:	e00b      	b.n	80130e2 <byteToPiece+0xd6>
	case 15:
		pi = WPAWN;
 80130ca:	2306      	movs	r3, #6
 80130cc:	73fb      	strb	r3, [r7, #15]
		break;
 80130ce:	e008      	b.n	80130e2 <byteToPiece+0xd6>
	case 16:
		pi = WPAWN;
 80130d0:	2306      	movs	r3, #6
 80130d2:	73fb      	strb	r3, [r7, #15]
		break;
 80130d4:	e005      	b.n	80130e2 <byteToPiece+0xd6>
	case 17:
		pi = WPAWN;
 80130d6:	2306      	movs	r3, #6
 80130d8:	73fb      	strb	r3, [r7, #15]
		break;
 80130da:	e002      	b.n	80130e2 <byteToPiece+0xd6>
	case 18:
		pi = WPAWN;
 80130dc:	2306      	movs	r3, #6
 80130de:	73fb      	strb	r3, [r7, #15]
		break;
 80130e0:	bf00      	nop
	}
	return pi;
 80130e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3714      	adds	r7, #20
 80130e8:	46bd      	mov	sp, r7
 80130ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ee:	4770      	bx	lr

080130f0 <AnalyserCMD>:

// new

/*phân tích dữ liệu nhận được */

void AnalyserCMD(uint8_t *data, uint16_t length, TypeConnection typeconnect) {
 80130f0:	b590      	push	{r4, r7, lr}
 80130f2:	b089      	sub	sp, #36	; 0x24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	460b      	mov	r3, r1
 80130fa:	807b      	strh	r3, [r7, #2]
 80130fc:	4613      	mov	r3, r2
 80130fe:	707b      	strb	r3, [r7, #1]
	uint16_t crc;
	uint8_t crcval[2];
#ifdef CALIBASE
	if (typeconnect == USB) {
 8013100:	787b      	ldrb	r3, [r7, #1]
 8013102:	2b01      	cmp	r3, #1
 8013104:	f040 80b3 	bne.w	801326e <AnalyserCMD+0x17e>
		if (data[0] == CMD_ENABLE_CALIBASE_MODE && data[1] == CMD_ENABLE_CALIBASE_MODE) { // Enable Calibase Mode
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	2b63      	cmp	r3, #99	; 0x63
 801310e:	d115      	bne.n	801313c <AnalyserCMD+0x4c>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	3301      	adds	r3, #1
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	2b63      	cmp	r3, #99	; 0x63
 8013118:	d110      	bne.n	801313c <AnalyserCMD+0x4c>
			if(data[2] == CMD_ENABLE_CALIBASE_MODE && data[3] == CMD_ENABLE_CALIBASE_MODE)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	3302      	adds	r3, #2
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	2b63      	cmp	r3, #99	; 0x63
 8013122:	d122      	bne.n	801316a <AnalyserCMD+0x7a>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	3303      	adds	r3, #3
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	2b63      	cmp	r3, #99	; 0x63
 801312c:	d11d      	bne.n	801316a <AnalyserCMD+0x7a>
			{
				isCalibaseMode = true;
 801312e:	4b9c      	ldr	r3, [pc, #624]	; (80133a0 <AnalyserCMD+0x2b0>)
 8013130:	2201      	movs	r2, #1
 8013132:	701a      	strb	r2, [r3, #0]
				typeCalibaseConnect = typeconnect;
 8013134:	4a9b      	ldr	r2, [pc, #620]	; (80133a4 <AnalyserCMD+0x2b4>)
 8013136:	787b      	ldrb	r3, [r7, #1]
 8013138:	7013      	strb	r3, [r2, #0]
			if(data[2] == CMD_ENABLE_CALIBASE_MODE && data[3] == CMD_ENABLE_CALIBASE_MODE)
 801313a:	e016      	b.n	801316a <AnalyserCMD+0x7a>
			}
		}else if (data[0] == CMD_DISABLE_CALIBASE_MODE && data[1] == CMD_DISABLE_CALIBASE_MODE) { // Enable Calibase Mode
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	2b64      	cmp	r3, #100	; 0x64
 8013142:	d113      	bne.n	801316c <AnalyserCMD+0x7c>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3301      	adds	r3, #1
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2b64      	cmp	r3, #100	; 0x64
 801314c:	d10e      	bne.n	801316c <AnalyserCMD+0x7c>
			if(data[2] == CMD_DISABLE_CALIBASE_MODE && data[3] == CMD_DISABLE_CALIBASE_MODE)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	3302      	adds	r3, #2
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b64      	cmp	r3, #100	; 0x64
 8013156:	d109      	bne.n	801316c <AnalyserCMD+0x7c>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3303      	adds	r3, #3
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	2b64      	cmp	r3, #100	; 0x64
 8013160:	d104      	bne.n	801316c <AnalyserCMD+0x7c>
			{
				isCalibaseMode = false;
 8013162:	4b8f      	ldr	r3, [pc, #572]	; (80133a0 <AnalyserCMD+0x2b0>)
 8013164:	2200      	movs	r2, #0
 8013166:	701a      	strb	r2, [r3, #0]
 8013168:	e000      	b.n	801316c <AnalyserCMD+0x7c>
			if(data[2] == CMD_ENABLE_CALIBASE_MODE && data[3] == CMD_ENABLE_CALIBASE_MODE)
 801316a:	bf00      	nop
			}
		}
		if (isCalibaseMode) {
 801316c:	4b8c      	ldr	r3, [pc, #560]	; (80133a0 <AnalyserCMD+0x2b0>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d07c      	beq.n	801326e <AnalyserCMD+0x17e>
			if (data[0] == CMD_CALIBASE_SET_TYPE) { // Calibase Code: 'C' + 'Type'
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b43      	cmp	r3, #67	; 0x43
 801317a:	d104      	bne.n	8013186 <AnalyserCMD+0x96>
				calibase_type = data[1];
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	785a      	ldrb	r2, [r3, #1]
 8013180:	4b89      	ldr	r3, [pc, #548]	; (80133a8 <AnalyserCMD+0x2b8>)
 8013182:	701a      	strb	r2, [r3, #0]
 8013184:	e073      	b.n	801326e <AnalyserCMD+0x17e>
			} else if (data[0] == CMD_SET_REAL_TIME) {
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2b54      	cmp	r3, #84	; 0x54
 801318c:	d119      	bne.n	80131c2 <AnalyserCMD+0xd2>
				uint8_t datatime[6];
				for (int i = 0; i < 6; i++) {
 801318e:	2300      	movs	r3, #0
 8013190:	61fb      	str	r3, [r7, #28]
 8013192:	e00d      	b.n	80131b0 <AnalyserCMD+0xc0>
					datatime[i] = data[i + 1];
 8013194:	69fb      	ldr	r3, [r7, #28]
 8013196:	3301      	adds	r3, #1
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4413      	add	r3, r2
 801319c:	7819      	ldrb	r1, [r3, #0]
 801319e:	f107 0208 	add.w	r2, r7, #8
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	4413      	add	r3, r2
 80131a6:	460a      	mov	r2, r1
 80131a8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 6; i++) {
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	3301      	adds	r3, #1
 80131ae:	61fb      	str	r3, [r7, #28]
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	2b05      	cmp	r3, #5
 80131b4:	ddee      	ble.n	8013194 <AnalyserCMD+0xa4>
				}
				RTC_SetTime(datatime);
 80131b6:	f107 0308 	add.w	r3, r7, #8
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fe fde6 	bl	8011d8c <RTC_SetTime>
 80131c0:	e055      	b.n	801326e <AnalyserCMD+0x17e>
			} else if (data[0] == CMD_READ_REAL_TIME) {
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	2b74      	cmp	r3, #116	; 0x74
 80131c8:	d102      	bne.n	80131d0 <AnalyserCMD+0xe0>
				UsbSendDateTime();
 80131ca:	f000 fb75 	bl	80138b8 <UsbSendDateTime>
 80131ce:	e04e      	b.n	801326e <AnalyserCMD+0x17e>
			} else if (data[0] == CMD_FRAM_ERASE) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	2b45      	cmp	r3, #69	; 0x45
 80131d6:	d102      	bne.n	80131de <AnalyserCMD+0xee>
				MB85RS_erase();
 80131d8:	f7fe fb8e 	bl	80118f8 <MB85RS_erase>
 80131dc:	e047      	b.n	801326e <AnalyserCMD+0x17e>
			} else if (data[0] == CMD_CALIBASE_UPDATE_THRESHOLD_A) {
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b72      	cmp	r3, #114	; 0x72
 80131e4:	d11d      	bne.n	8013222 <AnalyserCMD+0x132>
				calibase_type = data[1];
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	785a      	ldrb	r2, [r3, #1]
 80131ea:	4b6f      	ldr	r3, [pc, #444]	; (80133a8 <AnalyserCMD+0x2b8>)
 80131ec:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 32; i++) {
 80131ee:	2300      	movs	r3, #0
 80131f0:	61bb      	str	r3, [r7, #24]
 80131f2:	e012      	b.n	801321a <AnalyserCMD+0x12a>
					threshold[calibase_type][i] = data[2 + i];
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	3302      	adds	r3, #2
 80131f8:	461a      	mov	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	4413      	add	r3, r2
 80131fe:	4a6a      	ldr	r2, [pc, #424]	; (80133a8 <AnalyserCMD+0x2b8>)
 8013200:	7812      	ldrb	r2, [r2, #0]
 8013202:	4610      	mov	r0, r2
 8013204:	7819      	ldrb	r1, [r3, #0]
 8013206:	4a69      	ldr	r2, [pc, #420]	; (80133ac <AnalyserCMD+0x2bc>)
 8013208:	0183      	lsls	r3, r0, #6
 801320a:	441a      	add	r2, r3
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	4413      	add	r3, r2
 8013210:	460a      	mov	r2, r1
 8013212:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 32; i++) {
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	3301      	adds	r3, #1
 8013218:	61bb      	str	r3, [r7, #24]
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	2b1f      	cmp	r3, #31
 801321e:	dde9      	ble.n	80131f4 <AnalyserCMD+0x104>
 8013220:	e025      	b.n	801326e <AnalyserCMD+0x17e>
				}
			}else if (data[0] == CMD_CALIBASE_UPDATE_THRESHOLD_B) {
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2b73      	cmp	r3, #115	; 0x73
 8013228:	d11e      	bne.n	8013268 <AnalyserCMD+0x178>
				calibase_type = data[1];
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	785a      	ldrb	r2, [r3, #1]
 801322e:	4b5e      	ldr	r3, [pc, #376]	; (80133a8 <AnalyserCMD+0x2b8>)
 8013230:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 32; i++) {
 8013232:	2300      	movs	r3, #0
 8013234:	617b      	str	r3, [r7, #20]
 8013236:	e013      	b.n	8013260 <AnalyserCMD+0x170>
					threshold[calibase_type][32+i] = data[2 + i];
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	3302      	adds	r3, #2
 801323c:	461a      	mov	r2, r3
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	441a      	add	r2, r3
 8013242:	4b59      	ldr	r3, [pc, #356]	; (80133a8 <AnalyserCMD+0x2b8>)
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	461c      	mov	r4, r3
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	3320      	adds	r3, #32
 801324c:	7810      	ldrb	r0, [r2, #0]
 801324e:	4957      	ldr	r1, [pc, #348]	; (80133ac <AnalyserCMD+0x2bc>)
 8013250:	01a2      	lsls	r2, r4, #6
 8013252:	440a      	add	r2, r1
 8013254:	4413      	add	r3, r2
 8013256:	4602      	mov	r2, r0
 8013258:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 32; i++) {
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	3301      	adds	r3, #1
 801325e:	617b      	str	r3, [r7, #20]
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	2b1f      	cmp	r3, #31
 8013264:	dde8      	ble.n	8013238 <AnalyserCMD+0x148>
 8013266:	e002      	b.n	801326e <AnalyserCMD+0x17e>
				}
			} else if (data[0] == CMD_CALIBASE_WRITE_THRESHOLD) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b52      	cmp	r3, #82	; 0x52
				}
			}
		}

	}
	if (isCalibaseMode)
 801326e:	4b4c      	ldr	r3, [pc, #304]	; (80133a0 <AnalyserCMD+0x2b0>)
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	f040 80b5 	bne.w	80133e2 <AnalyserCMD+0x2f2>
		return;
#endif

	/* kiểm tra khớp địa chỉ */
	if (data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	3301      	adds	r3, #1
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	f040 80b1 	bne.w	80133e6 <AnalyserCMD+0x2f6>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	3302      	adds	r3, #2
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	f040 80ab 	bne.w	80133e6 <AnalyserCMD+0x2f6>
			|| data[3] != ADDRESSBOARD_PART2)
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	3303      	adds	r3, #3
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b08      	cmp	r3, #8
 8013298:	f040 80a5 	bne.w	80133e6 <AnalyserCMD+0x2f6>
		return;
	/* Kiểm tra CRC */
	if (length == 7)	// các lệnh Get có độ dài 7byte
 801329c:	887b      	ldrh	r3, [r7, #2]
 801329e:	2b07      	cmp	r3, #7
 80132a0:	d11c      	bne.n	80132dc <AnalyserCMD+0x1ec>
			{
		crc = CalculateCRC(data, 1, 4);
 80132a2:	2204      	movs	r2, #4
 80132a4:	2101      	movs	r1, #1
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f7ff fc52 	bl	8012b50 <CalculateCRC>
 80132ac:	4603      	mov	r3, r0
 80132ae:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t) ((crc & 0xFF00) >> 8);
 80132b0:	8a7b      	ldrh	r3, [r7, #18]
 80132b2:	0a1b      	lsrs	r3, r3, #8
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t) (crc & 0x00FF);
 80132ba:	8a7b      	ldrh	r3, [r7, #18]
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	747b      	strb	r3, [r7, #17]
		if (crcval[0] != data[5] || crcval[1] != data[6])
 80132c0:	7c3a      	ldrb	r2, [r7, #16]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3305      	adds	r3, #5
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	f040 808e 	bne.w	80133ea <AnalyserCMD+0x2fa>
 80132ce:	7c7a      	ldrb	r2, [r7, #17]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3306      	adds	r3, #6
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d01e      	beq.n	8013318 <AnalyserCMD+0x228>
			return;
 80132da:	e086      	b.n	80133ea <AnalyserCMD+0x2fa>
	} else if (length == 13) // lệnh Set Time RTC có độ dài 13 byte
 80132dc:	887b      	ldrh	r3, [r7, #2]
 80132de:	2b0d      	cmp	r3, #13
 80132e0:	d11a      	bne.n	8013318 <AnalyserCMD+0x228>
			{
		crc = CalculateCRC(data, 1, 10);
 80132e2:	220a      	movs	r2, #10
 80132e4:	2101      	movs	r1, #1
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f7ff fc32 	bl	8012b50 <CalculateCRC>
 80132ec:	4603      	mov	r3, r0
 80132ee:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t) ((crc & 0xFF00) >> 8);
 80132f0:	8a7b      	ldrh	r3, [r7, #18]
 80132f2:	0a1b      	lsrs	r3, r3, #8
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t) (crc & 0x00FF);
 80132fa:	8a7b      	ldrh	r3, [r7, #18]
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	747b      	strb	r3, [r7, #17]
		if (crcval[0] != data[11] || crcval[1] != data[12])
 8013300:	7c3a      	ldrb	r2, [r7, #16]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	330b      	adds	r3, #11
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	429a      	cmp	r2, r3
 801330a:	d170      	bne.n	80133ee <AnalyserCMD+0x2fe>
 801330c:	7c7a      	ldrb	r2, [r7, #17]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	330c      	adds	r3, #12
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	429a      	cmp	r2, r3
 8013316:	d16a      	bne.n	80133ee <AnalyserCMD+0x2fe>
			return;
	}

	if (data[4] == CMD_CHECKBOARD) {
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	3304      	adds	r3, #4
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	2b31      	cmp	r3, #49	; 0x31
 8013320:	d104      	bne.n	801332c <AnalyserCMD+0x23c>
		Response_CheckAddress(typeconnect);
 8013322:	787b      	ldrb	r3, [r7, #1]
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f867 	bl	80133f8 <Response_CheckAddress>
 801332a:	e061      	b.n	80133f0 <AnalyserCMD+0x300>
	} else if (data[4] == CMD_GETBOARDREVIEW) {
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	3304      	adds	r3, #4
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	2b32      	cmp	r3, #50	; 0x32
 8013334:	d118      	bne.n	8013368 <AnalyserCMD+0x278>
		globalMode = MODE_REVIEW;
 8013336:	4b1e      	ldr	r3, [pc, #120]	; (80133b0 <AnalyserCMD+0x2c0>)
 8013338:	2200      	movs	r2, #0
 801333a:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - lastCmdReview > 1000) {
 801333c:	f7ee fe42 	bl	8001fc4 <HAL_GetTick>
 8013340:	4602      	mov	r2, r0
 8013342:	4b1c      	ldr	r3, [pc, #112]	; (80133b4 <AnalyserCMD+0x2c4>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801334c:	d902      	bls.n	8013354 <AnalyserCMD+0x264>
			flagReviewFullData = true;
 801334e:	4b1a      	ldr	r3, [pc, #104]	; (80133b8 <AnalyserCMD+0x2c8>)
 8013350:	2201      	movs	r2, #1
 8013352:	701a      	strb	r2, [r3, #0]
		}
		lastCmdReview = HAL_GetTick();
 8013354:	f7ee fe36 	bl	8001fc4 <HAL_GetTick>
 8013358:	4603      	mov	r3, r0
 801335a:	4a16      	ldr	r2, [pc, #88]	; (80133b4 <AnalyserCMD+0x2c4>)
 801335c:	6013      	str	r3, [r2, #0]
		Responce_GetBoardReview(typeconnect);
 801335e:	787b      	ldrb	r3, [r7, #1]
 8013360:	4618      	mov	r0, r3
 8013362:	f000 f891 	bl	8013488 <Responce_GetBoardReview>
 8013366:	e043      	b.n	80133f0 <AnalyserCMD+0x300>
	} else if (data[4] == CMD_GETBOARDRECORDING) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	3304      	adds	r3, #4
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	2b33      	cmp	r3, #51	; 0x33
 8013370:	d10d      	bne.n	801338e <AnalyserCMD+0x29e>
		if (globalMode == MODE_REVIEW) // nếu mode trước đó là review thì clear queue data
 8013372:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <AnalyserCMD+0x2c0>)
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d101      	bne.n	801337e <AnalyserCMD+0x28e>
		{
			QueueClear();
 801337a:	f7fe fcf1 	bl	8011d60 <QueueClear>
		}
		globalMode = MODE_RECORDING;
 801337e:	4b0c      	ldr	r3, [pc, #48]	; (80133b0 <AnalyserCMD+0x2c0>)
 8013380:	2201      	movs	r2, #1
 8013382:	701a      	strb	r2, [r3, #0]
		Responce_GetBoardRecording(typeconnect);
 8013384:	787b      	ldrb	r3, [r7, #1]
 8013386:	4618      	mov	r0, r3
 8013388:	f000 f970 	bl	801366c <Responce_GetBoardRecording>
 801338c:	e030      	b.n	80133f0 <AnalyserCMD+0x300>
	} else if (data[4] == CMD_SETTIMERTC) {
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	3304      	adds	r3, #4
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	2b34      	cmp	r3, #52	; 0x34
 8013396:	d111      	bne.n	80133bc <AnalyserCMD+0x2cc>
		Responce_SetTimeRTC(data);
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f000 fa0b 	bl	80137b4 <Responce_SetTimeRTC>
 801339e:	e027      	b.n	80133f0 <AnalyserCMD+0x300>
 80133a0:	2000b961 	.word	0x2000b961
 80133a4:	20000102 	.word	0x20000102
 80133a8:	2000b960 	.word	0x2000b960
 80133ac:	2000b4b8 	.word	0x2000b4b8
 80133b0:	2000b959 	.word	0x2000b959
 80133b4:	2000b95c 	.word	0x2000b95c
 80133b8:	20000101 	.word	0x20000101
	} else if (data[4] >= CMD_GETGAMESAVEBASE) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	3304      	adds	r3, #4
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	2b40      	cmp	r3, #64	; 0x40
 80133c4:	d905      	bls.n	80133d2 <AnalyserCMD+0x2e2>
		Responce_GetDataGameSave(typeconnect, -CMD_GETGAMESAVEBASE);
 80133c6:	787b      	ldrb	r3, [r7, #1]
 80133c8:	21bf      	movs	r1, #191	; 0xbf
 80133ca:	4618      	mov	r0, r3
 80133cc:	f000 fa16 	bl	80137fc <Responce_GetDataGameSave>
 80133d0:	e00e      	b.n	80133f0 <AnalyserCMD+0x300>
	} else if (data[4] == CMD_ERASEALLGAME) {
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	3304      	adds	r3, #4
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	2b37      	cmp	r3, #55	; 0x37
 80133da:	d109      	bne.n	80133f0 <AnalyserCMD+0x300>
		Responce_EraseGameSave();
 80133dc:	f000 fa66 	bl	80138ac <Responce_EraseGameSave>
 80133e0:	e006      	b.n	80133f0 <AnalyserCMD+0x300>
		return;
 80133e2:	bf00      	nop
 80133e4:	e004      	b.n	80133f0 <AnalyserCMD+0x300>
		return;
 80133e6:	bf00      	nop
 80133e8:	e002      	b.n	80133f0 <AnalyserCMD+0x300>
			return;
 80133ea:	bf00      	nop
 80133ec:	e000      	b.n	80133f0 <AnalyserCMD+0x300>
			return;
 80133ee:	bf00      	nop
	}
}
 80133f0:	3724      	adds	r7, #36	; 0x24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	bf00      	nop

080133f8 <Response_CheckAddress>:

void Response_CheckAddress(TypeConnection typeconnect) {
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b086      	sub	sp, #24
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	4603      	mov	r3, r0
 8013400:	71fb      	strb	r3, [r7, #7]
	uint8_t data[7];
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8013402:	233a      	movs	r3, #58	; 0x3a
 8013404:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 8013406:	2300      	movs	r3, #0
 8013408:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 801340a:	2300      	movs	r3, #0
 801340c:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 801340e:	2308      	movs	r3, #8
 8013410:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_CHECKBOARD;
 8013412:	2331      	movs	r3, #49	; 0x31
 8013414:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 8013416:	f107 030c 	add.w	r3, r7, #12
 801341a:	2204      	movs	r2, #4
 801341c:	2101      	movs	r1, #1
 801341e:	4618      	mov	r0, r3
 8013420:	f7ff fb96 	bl	8012b50 <CalculateCRC>
 8013424:	4603      	mov	r3, r0
 8013426:	82fb      	strh	r3, [r7, #22]
	data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 8013428:	8afb      	ldrh	r3, [r7, #22]
 801342a:	0a1b      	lsrs	r3, r3, #8
 801342c:	b29b      	uxth	r3, r3
 801342e:	b2db      	uxtb	r3, r3
 8013430:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t) (crc & 0x00FF);
 8013432:	8afb      	ldrh	r3, [r7, #22]
 8013434:	b2db      	uxtb	r3, r3
 8013436:	74bb      	strb	r3, [r7, #18]

	if (typeconnect == RS485) {
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d112      	bne.n	8013464 <Response_CheckAddress+0x6c>
		RS485_TX_ENA
 801343e:	2201      	movs	r2, #1
 8013440:	2101      	movs	r1, #1
 8013442:	480f      	ldr	r0, [pc, #60]	; (8013480 <Response_CheckAddress+0x88>)
 8013444:	f7ef fc8c 	bl	8002d60 <HAL_GPIO_WritePin>
		;
		HAL_UART_Transmit(&huart1, data, 7, 1000);
 8013448:	f107 010c 	add.w	r1, r7, #12
 801344c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013450:	2207      	movs	r2, #7
 8013452:	480c      	ldr	r0, [pc, #48]	; (8013484 <Response_CheckAddress+0x8c>)
 8013454:	f7f6 fdfd 	bl	800a052 <HAL_UART_Transmit>
		RS485_TX_DIS
 8013458:	2200      	movs	r2, #0
 801345a:	2101      	movs	r1, #1
 801345c:	4808      	ldr	r0, [pc, #32]	; (8013480 <Response_CheckAddress+0x88>)
 801345e:	f7ef fc7f 	bl	8002d60 <HAL_GPIO_WritePin>
	} else if (typeconnect == USB) {
		CDC_Transmit_FS(data, 7);
	} else if (typeconnect == BLE) {

	}
}
 8013462:	e008      	b.n	8013476 <Response_CheckAddress+0x7e>
	} else if (typeconnect == USB) {
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	2b01      	cmp	r3, #1
 8013468:	d105      	bne.n	8013476 <Response_CheckAddress+0x7e>
		CDC_Transmit_FS(data, 7);
 801346a:	f107 030c 	add.w	r3, r7, #12
 801346e:	2107      	movs	r1, #7
 8013470:	4618      	mov	r0, r3
 8013472:	f7fd fbff 	bl	8010c74 <CDC_Transmit_FS>
}
 8013476:	bf00      	nop
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	40020000 	.word	0x40020000
 8013484:	200049e0 	.word	0x200049e0

08013488 <Responce_GetBoardReview>:
void Responce_GetBoardReview(TypeConnection typeconnect) {
 8013488:	b580      	push	{r7, lr}
 801348a:	b094      	sub	sp, #80	; 0x50
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	71fb      	strb	r3, [r7, #7]
	uint8_t data[53];
	uint16_t crc;
	uint8_t pieceA, pieceB, pie = 0;
 8013492:	2300      	movs	r3, #0
 8013494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	data[0] = CMD_BEGIN;
 8013498:	233a      	movs	r3, #58	; 0x3a
 801349a:	723b      	strb	r3, [r7, #8]
	data[1] = ADDRESSBOARD_PART0;
 801349c:	2300      	movs	r3, #0
 801349e:	727b      	strb	r3, [r7, #9]
	data[2] = ADDRESSBOARD_PART1;
 80134a0:	2300      	movs	r3, #0
 80134a2:	72bb      	strb	r3, [r7, #10]
	data[3] = ADDRESSBOARD_PART2;
 80134a4:	2308      	movs	r3, #8
 80134a6:	72fb      	strb	r3, [r7, #11]
	if (data_chessclock[9] == STATUS_DISCONNECT_CLOCK) {
 80134a8:	4b6a      	ldr	r3, [pc, #424]	; (8013654 <Responce_GetBoardReview+0x1cc>)
 80134aa:	7a5b      	ldrb	r3, [r3, #9]
 80134ac:	2b37      	cmp	r3, #55	; 0x37
 80134ae:	d105      	bne.n	80134bc <Responce_GetBoardReview+0x34>
		data[4] = sys_error + BOARD_CHESSCLOCK_DISCONNECT;
 80134b0:	4b69      	ldr	r3, [pc, #420]	; (8013658 <Responce_GetBoardReview+0x1d0>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	3320      	adds	r3, #32
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	733b      	strb	r3, [r7, #12]
 80134ba:	e002      	b.n	80134c2 <Responce_GetBoardReview+0x3a>
		//data[4] = RES_CHESSCLOCK_DISCONECTED;
	} else {
		//data[4] = RES_DATAFENCHANGE;
		data[4] = sys_error;
 80134bc:	4b66      	ldr	r3, [pc, #408]	; (8013658 <Responce_GetBoardReview+0x1d0>)
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	733b      	strb	r3, [r7, #12]
	}
	if (sys_error > 0) {
 80134c2:	4b65      	ldr	r3, [pc, #404]	; (8013658 <Responce_GetBoardReview+0x1d0>)
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d007      	beq.n	80134da <Responce_GetBoardReview+0x52>
		sys_error = 0;
 80134ca:	4b63      	ldr	r3, [pc, #396]	; (8013658 <Responce_GetBoardReview+0x1d0>)
 80134cc:	2200      	movs	r2, #0
 80134ce:	701a      	strb	r2, [r3, #0]
		BackupError_write(sys_error);
 80134d0:	4b61      	ldr	r3, [pc, #388]	; (8013658 <Responce_GetBoardReview+0x1d0>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fe fc9d 	bl	8011e14 <BackupError_write>
	}

	if (flagReviewFullData == true) {
 80134da:	4b60      	ldr	r3, [pc, #384]	; (801365c <Responce_GetBoardReview+0x1d4>)
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 8081 	beq.w	80135e6 <Responce_GetBoardReview+0x15e>
		flagReviewFullData = false;
 80134e4:	4b5d      	ldr	r3, [pc, #372]	; (801365c <Responce_GetBoardReview+0x1d4>)
 80134e6:	2200      	movs	r2, #0
 80134e8:	701a      	strb	r2, [r3, #0]
		/* gắn datamain vào 32 byte tiếp theo */
		for (int i = 0; i < 32; i++) {
 80134ea:	2300      	movs	r3, #0
 80134ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80134ee:	e02e      	b.n	801354e <Responce_GetBoardReview+0xc6>
			pieceA = byteToPiece(datamain_old[pie]);
 80134f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80134f4:	4a5a      	ldr	r2, [pc, #360]	; (8013660 <Responce_GetBoardReview+0x1d8>)
 80134f6:	5cd3      	ldrb	r3, [r2, r3]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fd87 	bl	801300c <byteToPiece>
 80134fe:	4603      	mov	r3, r0
 8013500:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			pie++;
 8013504:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013508:	3301      	adds	r3, #1
 801350a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pieceB = byteToPiece(datamain_old[pie]);
 801350e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013512:	4a53      	ldr	r2, [pc, #332]	; (8013660 <Responce_GetBoardReview+0x1d8>)
 8013514:	5cd3      	ldrb	r3, [r2, r3]
 8013516:	4618      	mov	r0, r3
 8013518:	f7ff fd78 	bl	801300c <byteToPiece>
 801351c:	4603      	mov	r3, r0
 801351e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			pie++;
 8013522:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013526:	3301      	adds	r3, #1
 8013528:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			data[i + 5] = (pieceA << 4) + pieceB;
 801352c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8013530:	011b      	lsls	r3, r3, #4
 8013532:	b2d9      	uxtb	r1, r3
 8013534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013536:	3305      	adds	r3, #5
 8013538:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801353c:	440a      	add	r2, r1
 801353e:	b2d2      	uxtb	r2, r2
 8013540:	3350      	adds	r3, #80	; 0x50
 8013542:	443b      	add	r3, r7
 8013544:	f803 2c48 	strb.w	r2, [r3, #-72]
		for (int i = 0; i < 32; i++) {
 8013548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801354a:	3301      	adds	r3, #1
 801354c:	64bb      	str	r3, [r7, #72]	; 0x48
 801354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013550:	2b1f      	cmp	r3, #31
 8013552:	ddcd      	ble.n	80134f0 <Responce_GetBoardReview+0x68>
		}
		for (int i = 0; i < 14; i++) {
 8013554:	2300      	movs	r3, #0
 8013556:	647b      	str	r3, [r7, #68]	; 0x44
 8013558:	e00c      	b.n	8013574 <Responce_GetBoardReview+0xec>
			data[37 + i] = data_chessclock[i];
 801355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801355c:	3325      	adds	r3, #37	; 0x25
 801355e:	493d      	ldr	r1, [pc, #244]	; (8013654 <Responce_GetBoardReview+0x1cc>)
 8013560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013562:	440a      	add	r2, r1
 8013564:	7812      	ldrb	r2, [r2, #0]
 8013566:	3350      	adds	r3, #80	; 0x50
 8013568:	443b      	add	r3, r7
 801356a:	f803 2c48 	strb.w	r2, [r3, #-72]
		for (int i = 0; i < 14; i++) {
 801356e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013570:	3301      	adds	r3, #1
 8013572:	647b      	str	r3, [r7, #68]	; 0x44
 8013574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013576:	2b0d      	cmp	r3, #13
 8013578:	ddef      	ble.n	801355a <Responce_GetBoardReview+0xd2>
		}
		crc = CalculateCRC(data, 1, 50);
 801357a:	f107 0308 	add.w	r3, r7, #8
 801357e:	2232      	movs	r2, #50	; 0x32
 8013580:	2101      	movs	r1, #1
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fae4 	bl	8012b50 <CalculateCRC>
 8013588:	4603      	mov	r3, r0
 801358a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[51] = (uint8_t) ((crc & 0xFF00) >> 8);
 801358e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013592:	0a1b      	lsrs	r3, r3, #8
 8013594:	b29b      	uxth	r3, r3
 8013596:	b2db      	uxtb	r3, r3
 8013598:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		data[52] = (uint8_t) (crc & 0x00FF);
 801359c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		if (typeconnect == RS485) {
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d112      	bne.n	80135d2 <Responce_GetBoardReview+0x14a>
			RS485_TX_ENA
 80135ac:	2201      	movs	r2, #1
 80135ae:	2101      	movs	r1, #1
 80135b0:	482c      	ldr	r0, [pc, #176]	; (8013664 <Responce_GetBoardReview+0x1dc>)
 80135b2:	f7ef fbd5 	bl	8002d60 <HAL_GPIO_WritePin>
			;
			HAL_UART_Transmit(&huart1, data, 53, 1000);
 80135b6:	f107 0108 	add.w	r1, r7, #8
 80135ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80135be:	2235      	movs	r2, #53	; 0x35
 80135c0:	4829      	ldr	r0, [pc, #164]	; (8013668 <Responce_GetBoardReview+0x1e0>)
 80135c2:	f7f6 fd46 	bl	800a052 <HAL_UART_Transmit>
			RS485_TX_DIS
 80135c6:	2200      	movs	r2, #0
 80135c8:	2101      	movs	r1, #1
 80135ca:	4826      	ldr	r0, [pc, #152]	; (8013664 <Responce_GetBoardReview+0x1dc>)
 80135cc:	f7ef fbc8 	bl	8002d60 <HAL_GPIO_WritePin>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 80135d0:	e03c      	b.n	801364c <Responce_GetBoardReview+0x1c4>
		} else if (typeconnect == USB) {
 80135d2:	79fb      	ldrb	r3, [r7, #7]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d139      	bne.n	801364c <Responce_GetBoardReview+0x1c4>
			CDC_Transmit_FS(data, 53);
 80135d8:	f107 0308 	add.w	r3, r7, #8
 80135dc:	2135      	movs	r1, #53	; 0x35
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fd fb48 	bl	8010c74 <CDC_Transmit_FS>
}
 80135e4:	e032      	b.n	801364c <Responce_GetBoardReview+0x1c4>
		crc = CalculateCRC(data, 1, 4);
 80135e6:	f107 0308 	add.w	r3, r7, #8
 80135ea:	2204      	movs	r2, #4
 80135ec:	2101      	movs	r1, #1
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7ff faae 	bl	8012b50 <CalculateCRC>
 80135f4:	4603      	mov	r3, r0
 80135f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 80135fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135fe:	0a1b      	lsrs	r3, r3, #8
 8013600:	b29b      	uxth	r3, r3
 8013602:	b2db      	uxtb	r3, r3
 8013604:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8013606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801360a:	b2db      	uxtb	r3, r3
 801360c:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 801360e:	79fb      	ldrb	r3, [r7, #7]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d112      	bne.n	801363a <Responce_GetBoardReview+0x1b2>
			RS485_TX_ENA
 8013614:	2201      	movs	r2, #1
 8013616:	2101      	movs	r1, #1
 8013618:	4812      	ldr	r0, [pc, #72]	; (8013664 <Responce_GetBoardReview+0x1dc>)
 801361a:	f7ef fba1 	bl	8002d60 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 801361e:	f107 0108 	add.w	r1, r7, #8
 8013622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013626:	2207      	movs	r2, #7
 8013628:	480f      	ldr	r0, [pc, #60]	; (8013668 <Responce_GetBoardReview+0x1e0>)
 801362a:	f7f6 fd12 	bl	800a052 <HAL_UART_Transmit>
			RS485_TX_DIS
 801362e:	2200      	movs	r2, #0
 8013630:	2101      	movs	r1, #1
 8013632:	480c      	ldr	r0, [pc, #48]	; (8013664 <Responce_GetBoardReview+0x1dc>)
 8013634:	f7ef fb94 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8013638:	e008      	b.n	801364c <Responce_GetBoardReview+0x1c4>
		} else if (typeconnect == USB) {
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	2b01      	cmp	r3, #1
 801363e:	d105      	bne.n	801364c <Responce_GetBoardReview+0x1c4>
			CDC_Transmit_FS(data, 7);
 8013640:	f107 0308 	add.w	r3, r7, #8
 8013644:	2107      	movs	r1, #7
 8013646:	4618      	mov	r0, r3
 8013648:	f7fd fb14 	bl	8010c74 <CDC_Transmit_FS>
}
 801364c:	bf00      	nop
 801364e:	3750      	adds	r7, #80	; 0x50
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	20009c60 	.word	0x20009c60
 8013658:	2000449c 	.word	0x2000449c
 801365c:	20000101 	.word	0x20000101
 8013660:	2000aef0 	.word	0x2000aef0
 8013664:	40020000 	.word	0x40020000
 8013668:	200049e0 	.word	0x200049e0

0801366c <Responce_GetBoardRecording>:

void Responce_GetBoardRecording(TypeConnection typeconnect) {
 801366c:	b580      	push	{r7, lr}
 801366e:	b090      	sub	sp, #64	; 0x40
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	71fb      	strb	r3, [r7, #7]
	if (QueueGetCount() > 0) {
 8013676:	f7fe fb67 	bl	8011d48 <QueueGetCount>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d030      	beq.n	80136e2 <Responce_GetBoardRecording+0x76>
		uint8_t front = QueueGetFront();
 8013680:	f7fe fb38 	bl	8011cf4 <QueueGetFront>
 8013684:	4603      	mov	r3, r0
 8013686:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if (typeconnect == RS485) {
 801368a:	79fb      	ldrb	r3, [r7, #7]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d117      	bne.n	80136c0 <Responce_GetBoardRecording+0x54>
			RS485_TX_ENA
 8013690:	2201      	movs	r2, #1
 8013692:	2101      	movs	r1, #1
 8013694:	4841      	ldr	r0, [pc, #260]	; (801379c <Responce_GetBoardRecording+0x130>)
 8013696:	f7ef fb63 	bl	8002d60 <HAL_GPIO_WritePin>
			;
			HAL_UART_Transmit(&huart1, queueData[front], 53, 1000);
 801369a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801369e:	2235      	movs	r2, #53	; 0x35
 80136a0:	fb02 f303 	mul.w	r3, r2, r3
 80136a4:	4a3e      	ldr	r2, [pc, #248]	; (80137a0 <Responce_GetBoardRecording+0x134>)
 80136a6:	1899      	adds	r1, r3, r2
 80136a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80136ac:	2235      	movs	r2, #53	; 0x35
 80136ae:	483d      	ldr	r0, [pc, #244]	; (80137a4 <Responce_GetBoardRecording+0x138>)
 80136b0:	f7f6 fccf 	bl	800a052 <HAL_UART_Transmit>
			RS485_TX_DIS
 80136b4:	2200      	movs	r2, #0
 80136b6:	2101      	movs	r1, #1
 80136b8:	4838      	ldr	r0, [pc, #224]	; (801379c <Responce_GetBoardRecording+0x130>)
 80136ba:	f7ef fb51 	bl	8002d60 <HAL_GPIO_WritePin>
 80136be:	e00d      	b.n	80136dc <Responce_GetBoardRecording+0x70>
			;
		} else if (typeconnect == USB) {
 80136c0:	79fb      	ldrb	r3, [r7, #7]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d10a      	bne.n	80136dc <Responce_GetBoardRecording+0x70>
			CDC_Transmit_FS(queueData[front], 53);
 80136c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80136ca:	2235      	movs	r2, #53	; 0x35
 80136cc:	fb02 f303 	mul.w	r3, r2, r3
 80136d0:	4a33      	ldr	r2, [pc, #204]	; (80137a0 <Responce_GetBoardRecording+0x134>)
 80136d2:	4413      	add	r3, r2
 80136d4:	2135      	movs	r1, #53	; 0x35
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd facc 	bl	8010c74 <CDC_Transmit_FS>
		} else if (typeconnect == BLE) {

		}
		QueueGetFrontAfter();
 80136dc:	f7fe fb16 	bl	8011d0c <QueueGetFrontAfter>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 80136e0:	e058      	b.n	8013794 <Responce_GetBoardRecording+0x128>
	} else if (flagReviewFullData) {
 80136e2:	4b31      	ldr	r3, [pc, #196]	; (80137a8 <Responce_GetBoardRecording+0x13c>)
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d004      	beq.n	80136f4 <Responce_GetBoardRecording+0x88>
		Responce_GetBoardReview(typeconnect);
 80136ea:	79fb      	ldrb	r3, [r7, #7]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff fecb 	bl	8013488 <Responce_GetBoardReview>
}
 80136f2:	e04f      	b.n	8013794 <Responce_GetBoardRecording+0x128>
		data[0] = CMD_BEGIN;
 80136f4:	233a      	movs	r3, #58	; 0x3a
 80136f6:	723b      	strb	r3, [r7, #8]
		data[1] = ADDRESSBOARD_PART0;
 80136f8:	2300      	movs	r3, #0
 80136fa:	727b      	strb	r3, [r7, #9]
		data[2] = ADDRESSBOARD_PART1;
 80136fc:	2300      	movs	r3, #0
 80136fe:	72bb      	strb	r3, [r7, #10]
		data[3] = ADDRESSBOARD_PART2;
 8013700:	2308      	movs	r3, #8
 8013702:	72fb      	strb	r3, [r7, #11]
		data[4] = sys_error;
 8013704:	4b29      	ldr	r3, [pc, #164]	; (80137ac <Responce_GetBoardRecording+0x140>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	733b      	strb	r3, [r7, #12]
		if (data_chessclock[9] == STATUS_DISCONNECT_CLOCK) {
 801370a:	4b29      	ldr	r3, [pc, #164]	; (80137b0 <Responce_GetBoardRecording+0x144>)
 801370c:	7a5b      	ldrb	r3, [r3, #9]
 801370e:	2b37      	cmp	r3, #55	; 0x37
 8013710:	d104      	bne.n	801371c <Responce_GetBoardRecording+0xb0>
			data[4] = sys_error + BOARD_CHESSCLOCK_DISCONNECT;
 8013712:	4b26      	ldr	r3, [pc, #152]	; (80137ac <Responce_GetBoardRecording+0x140>)
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	3320      	adds	r3, #32
 8013718:	b2db      	uxtb	r3, r3
 801371a:	733b      	strb	r3, [r7, #12]
		if (sys_error > 0) {
 801371c:	4b23      	ldr	r3, [pc, #140]	; (80137ac <Responce_GetBoardRecording+0x140>)
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d007      	beq.n	8013734 <Responce_GetBoardRecording+0xc8>
			sys_error = 0;
 8013724:	4b21      	ldr	r3, [pc, #132]	; (80137ac <Responce_GetBoardRecording+0x140>)
 8013726:	2200      	movs	r2, #0
 8013728:	701a      	strb	r2, [r3, #0]
			BackupError_write(sys_error);
 801372a:	4b20      	ldr	r3, [pc, #128]	; (80137ac <Responce_GetBoardRecording+0x140>)
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	4618      	mov	r0, r3
 8013730:	f7fe fb70 	bl	8011e14 <BackupError_write>
		crc = CalculateCRC(data, 1, 4);
 8013734:	f107 0308 	add.w	r3, r7, #8
 8013738:	2204      	movs	r2, #4
 801373a:	2101      	movs	r1, #1
 801373c:	4618      	mov	r0, r3
 801373e:	f7ff fa07 	bl	8012b50 <CalculateCRC>
 8013742:	4603      	mov	r3, r0
 8013744:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 8013746:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013748:	0a1b      	lsrs	r3, r3, #8
 801374a:	b29b      	uxth	r3, r3
 801374c:	b2db      	uxtb	r3, r3
 801374e:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8013750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013752:	b2db      	uxtb	r3, r3
 8013754:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 8013756:	79fb      	ldrb	r3, [r7, #7]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d112      	bne.n	8013782 <Responce_GetBoardRecording+0x116>
			RS485_TX_ENA
 801375c:	2201      	movs	r2, #1
 801375e:	2101      	movs	r1, #1
 8013760:	480e      	ldr	r0, [pc, #56]	; (801379c <Responce_GetBoardRecording+0x130>)
 8013762:	f7ef fafd 	bl	8002d60 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 8013766:	f107 0108 	add.w	r1, r7, #8
 801376a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801376e:	2207      	movs	r2, #7
 8013770:	480c      	ldr	r0, [pc, #48]	; (80137a4 <Responce_GetBoardRecording+0x138>)
 8013772:	f7f6 fc6e 	bl	800a052 <HAL_UART_Transmit>
			RS485_TX_DIS
 8013776:	2200      	movs	r2, #0
 8013778:	2101      	movs	r1, #1
 801377a:	4808      	ldr	r0, [pc, #32]	; (801379c <Responce_GetBoardRecording+0x130>)
 801377c:	f7ef faf0 	bl	8002d60 <HAL_GPIO_WritePin>
}
 8013780:	e008      	b.n	8013794 <Responce_GetBoardRecording+0x128>
		} else if (typeconnect == USB) {
 8013782:	79fb      	ldrb	r3, [r7, #7]
 8013784:	2b01      	cmp	r3, #1
 8013786:	d105      	bne.n	8013794 <Responce_GetBoardRecording+0x128>
			CDC_Transmit_FS(data, 7);
 8013788:	f107 0308 	add.w	r3, r7, #8
 801378c:	2107      	movs	r1, #7
 801378e:	4618      	mov	r0, r3
 8013790:	f7fd fa70 	bl	8010c74 <CDC_Transmit_FS>
}
 8013794:	bf00      	nop
 8013796:	3740      	adds	r7, #64	; 0x40
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	40020000 	.word	0x40020000
 80137a0:	2000b090 	.word	0x2000b090
 80137a4:	200049e0 	.word	0x200049e0
 80137a8:	20000101 	.word	0x20000101
 80137ac:	2000449c 	.word	0x2000449c
 80137b0:	20009c60 	.word	0x20009c60

080137b4 <Responce_SetTimeRTC>:
void Responce_SetTimeRTC(uint8_t *dat) {
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
	uint8_t datatime[6];
	for (int i = 0; i < 6; i++) {
 80137bc:	2300      	movs	r3, #0
 80137be:	617b      	str	r3, [r7, #20]
 80137c0:	e00d      	b.n	80137de <Responce_SetTimeRTC+0x2a>
		datatime[i] = dat[i + 5];
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	3305      	adds	r3, #5
 80137c6:	687a      	ldr	r2, [r7, #4]
 80137c8:	4413      	add	r3, r2
 80137ca:	7819      	ldrb	r1, [r3, #0]
 80137cc:	f107 020c 	add.w	r2, r7, #12
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	4413      	add	r3, r2
 80137d4:	460a      	mov	r2, r1
 80137d6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; i++) {
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	3301      	adds	r3, #1
 80137dc:	617b      	str	r3, [r7, #20]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2b05      	cmp	r3, #5
 80137e2:	ddee      	ble.n	80137c2 <Responce_SetTimeRTC+0xe>
	}
	RTC_SetTime(datatime);
 80137e4:	f107 030c 	add.w	r3, r7, #12
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fe facf 	bl	8011d8c <RTC_SetTime>
	HAL_NVIC_SystemReset();
 80137ee:	f7ee fd12 	bl	8002216 <HAL_NVIC_SystemReset>
}
 80137f2:	bf00      	nop
 80137f4:	3718      	adds	r7, #24
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
	...

080137fc <Responce_GetDataGameSave>:

void Responce_GetDataGameSave(TypeConnection typeconnect, uint8_t part) {
 80137fc:	b580      	push	{r7, lr}
 80137fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8013802:	af00      	add	r7, sp, #0
 8013804:	4602      	mov	r2, r0
 8013806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801380a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801380e:	701a      	strb	r2, [r3, #0]
 8013810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013814:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8013818:	460a      	mov	r2, r1
 801381a:	701a      	strb	r2, [r3, #0]
	uint8_t data[GAMESAVELENGTH];
	if (part > GAMESAVEPARTS)
 801381c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013820:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	2b3e      	cmp	r3, #62	; 0x3e
 8013828:	d837      	bhi.n	801389a <Responce_GetDataGameSave+0x9e>
		return;
	MB85RS_read(part * GAMESAVELENGTH, data, GAMESAVELENGTH);
 801382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801382e:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	025b      	lsls	r3, r3, #9
 8013836:	4618      	mov	r0, r3
 8013838:	f107 0308 	add.w	r3, r7, #8
 801383c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013840:	4619      	mov	r1, r3
 8013842:	f7fe f829 	bl	8011898 <MB85RS_read>

	if (typeconnect == RS485) {
 8013846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801384a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d113      	bne.n	801387c <Responce_GetDataGameSave+0x80>
		RS485_TX_ENA
 8013854:	2201      	movs	r2, #1
 8013856:	2101      	movs	r1, #1
 8013858:	4812      	ldr	r0, [pc, #72]	; (80138a4 <Responce_GetDataGameSave+0xa8>)
 801385a:	f7ef fa81 	bl	8002d60 <HAL_GPIO_WritePin>
		;
		HAL_UART_Transmit(&huart1, data, GAMESAVELENGTH, 1000);
 801385e:	f107 0108 	add.w	r1, r7, #8
 8013862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013866:	f44f 7200 	mov.w	r2, #512	; 0x200
 801386a:	480f      	ldr	r0, [pc, #60]	; (80138a8 <Responce_GetDataGameSave+0xac>)
 801386c:	f7f6 fbf1 	bl	800a052 <HAL_UART_Transmit>
		RS485_TX_DIS
 8013870:	2200      	movs	r2, #0
 8013872:	2101      	movs	r1, #1
 8013874:	480b      	ldr	r0, [pc, #44]	; (80138a4 <Responce_GetDataGameSave+0xa8>)
 8013876:	f7ef fa73 	bl	8002d60 <HAL_GPIO_WritePin>
 801387a:	e00f      	b.n	801389c <Responce_GetDataGameSave+0xa0>
		;
	} else if (typeconnect == USB) {
 801387c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013880:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	2b01      	cmp	r3, #1
 8013888:	d108      	bne.n	801389c <Responce_GetDataGameSave+0xa0>
		CDC_Transmit_FS(data, GAMESAVELENGTH);
 801388a:	f107 0308 	add.w	r3, r7, #8
 801388e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013892:	4618      	mov	r0, r3
 8013894:	f7fd f9ee 	bl	8010c74 <CDC_Transmit_FS>
 8013898:	e000      	b.n	801389c <Responce_GetDataGameSave+0xa0>
		return;
 801389a:	bf00      	nop
	} else if (typeconnect == BLE) {

	}
}
 801389c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	40020000 	.word	0x40020000
 80138a8:	200049e0 	.word	0x200049e0

080138ac <Responce_EraseGameSave>:
void Responce_EraseGameSave() {
 80138ac:	b580      	push	{r7, lr}
 80138ae:	af00      	add	r7, sp, #0
	MB85RS_erase();
 80138b0:	f7fe f822 	bl	80118f8 <MB85RS_erase>
}
 80138b4:	bf00      	nop
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <UsbSendDateTime>:

void UsbSendDateTime() {
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b088      	sub	sp, #32
 80138bc:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	uint8_t dat[7];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80138be:	1d3b      	adds	r3, r7, #4
 80138c0:	2200      	movs	r2, #0
 80138c2:	4619      	mov	r1, r3
 80138c4:	4810      	ldr	r0, [pc, #64]	; (8013908 <UsbSendDateTime+0x50>)
 80138c6:	f7f3 fcab 	bl	8007220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80138ca:	463b      	mov	r3, r7
 80138cc:	2200      	movs	r2, #0
 80138ce:	4619      	mov	r1, r3
 80138d0:	480d      	ldr	r0, [pc, #52]	; (8013908 <UsbSendDateTime+0x50>)
 80138d2:	f7f3 fd87 	bl	80073e4 <HAL_RTC_GetDate>
	dat[0] = sTime.Seconds;
 80138d6:	79bb      	ldrb	r3, [r7, #6]
 80138d8:	763b      	strb	r3, [r7, #24]
	dat[1] = sTime.Minutes;
 80138da:	797b      	ldrb	r3, [r7, #5]
 80138dc:	767b      	strb	r3, [r7, #25]
	dat[2] = sTime.Hours;
 80138de:	793b      	ldrb	r3, [r7, #4]
 80138e0:	76bb      	strb	r3, [r7, #26]
	dat[3] = sDate.Date;
 80138e2:	78bb      	ldrb	r3, [r7, #2]
 80138e4:	76fb      	strb	r3, [r7, #27]
	dat[4] = sDate.Month;
 80138e6:	787b      	ldrb	r3, [r7, #1]
 80138e8:	773b      	strb	r3, [r7, #28]
	dat[5] = sDate.Year;
 80138ea:	78fb      	ldrb	r3, [r7, #3]
 80138ec:	777b      	strb	r3, [r7, #29]
	dat[6] = NEWLINE;
 80138ee:	23ff      	movs	r3, #255	; 0xff
 80138f0:	77bb      	strb	r3, [r7, #30]
	CDC_Transmit_FS(dat, 7);
 80138f2:	f107 0318 	add.w	r3, r7, #24
 80138f6:	2107      	movs	r1, #7
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fd f9bb 	bl	8010c74 <CDC_Transmit_FS>
#endif
}
 80138fe:	bf00      	nop
 8013900:	3720      	adds	r7, #32
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}
 8013906:	bf00      	nop
 8013908:	200044a0 	.word	0x200044a0

0801390c <UsbSendDataCalibase>:

void UsbSendDataCalibase() {
 801390c:	b580      	push	{r7, lr}
 801390e:	b08c      	sub	sp, #48	; 0x30
 8013910:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	if (isCalibaseMode == true) {
 8013912:	4b64      	ldr	r3, [pc, #400]	; (8013aa4 <UsbSendDataCalibase+0x198>)
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	f000 80bf 	beq.w	8013a9a <UsbSendDataCalibase+0x18e>
		if (calibase_type > 17)
 801391c:	4b62      	ldr	r3, [pc, #392]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b11      	cmp	r3, #17
 8013922:	d902      	bls.n	801392a <UsbSendDataCalibase+0x1e>
			calibase_type = 0;
 8013924:	4b60      	ldr	r3, [pc, #384]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 8013926:	2200      	movs	r2, #0
 8013928:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 64; i++) {
 801392a:	2300      	movs	r3, #0
 801392c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801392e:	e011      	b.n	8013954 <UsbSendDataCalibase+0x48>
			dataUsbCalibase[i] = (uint8_t) datapieces[calibase_type][i][PULSES];
 8013930:	4b5d      	ldr	r3, [pc, #372]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	495d      	ldr	r1, [pc, #372]	; (8013aac <UsbSendDataCalibase+0x1a0>)
 8013936:	019a      	lsls	r2, r3, #6
 8013938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393a:	4413      	add	r3, r2
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	440b      	add	r3, r1
 8013940:	885b      	ldrh	r3, [r3, #2]
 8013942:	b2d9      	uxtb	r1, r3
 8013944:	4a5a      	ldr	r2, [pc, #360]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013948:	4413      	add	r3, r2
 801394a:	460a      	mov	r2, r1
 801394c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 64; i++) {
 801394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013950:	3301      	adds	r3, #1
 8013952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013956:	2b3f      	cmp	r3, #63	; 0x3f
 8013958:	ddea      	ble.n	8013930 <UsbSendDataCalibase+0x24>
		}
		int inx = 0;
 801395a:	2300      	movs	r3, #0
 801395c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < 64; i++) {
 801395e:	2300      	movs	r3, #0
 8013960:	627b      	str	r3, [r7, #36]	; 0x24
 8013962:	e033      	b.n	80139cc <UsbSendDataCalibase+0xc0>
			dataUsbCalibase[64 + inx] = datapieces[calibase_type][i][PERIOD]
 8013964:	4b50      	ldr	r3, [pc, #320]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	4950      	ldr	r1, [pc, #320]	; (8013aac <UsbSendDataCalibase+0x1a0>)
 801396a:	019a      	lsls	r2, r3, #6
 801396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396e:	4413      	add	r3, r2
 8013970:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8013974:	085b      	lsrs	r3, r3, #1
 8013976:	4a4f      	ldr	r2, [pc, #316]	; (8013ab4 <UsbSendDataCalibase+0x1a8>)
 8013978:	fba2 2303 	umull	r2, r3, r2, r3
 801397c:	099b      	lsrs	r3, r3, #6
 801397e:	b29a      	uxth	r2, r3
 8013980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013982:	3340      	adds	r3, #64	; 0x40
 8013984:	b2d1      	uxtb	r1, r2
 8013986:	4a4a      	ldr	r2, [pc, #296]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013988:	54d1      	strb	r1, [r2, r3]
					/ 254;
			inx++;
 801398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398c:	3301      	adds	r3, #1
 801398e:	62bb      	str	r3, [r7, #40]	; 0x28
			dataUsbCalibase[64 + inx] = datapieces[calibase_type][i][PERIOD]
 8013990:	4b45      	ldr	r3, [pc, #276]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	4945      	ldr	r1, [pc, #276]	; (8013aac <UsbSendDataCalibase+0x1a0>)
 8013996:	019a      	lsls	r2, r3, #6
 8013998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801399a:	4413      	add	r3, r2
 801399c:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 80139a0:	0853      	lsrs	r3, r2, #1
 80139a2:	4944      	ldr	r1, [pc, #272]	; (8013ab4 <UsbSendDataCalibase+0x1a8>)
 80139a4:	fba1 1303 	umull	r1, r3, r1, r3
 80139a8:	0999      	lsrs	r1, r3, #6
 80139aa:	460b      	mov	r3, r1
 80139ac:	01db      	lsls	r3, r3, #7
 80139ae:	1a5b      	subs	r3, r3, r1
 80139b0:	005b      	lsls	r3, r3, #1
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b8:	3340      	adds	r3, #64	; 0x40
 80139ba:	b2d1      	uxtb	r1, r2
 80139bc:	4a3c      	ldr	r2, [pc, #240]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 80139be:	54d1      	strb	r1, [r2, r3]
					% 254;
			inx++;
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	3301      	adds	r3, #1
 80139c4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < 64; i++) {
 80139c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c8:	3301      	adds	r3, #1
 80139ca:	627b      	str	r3, [r7, #36]	; 0x24
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	2b3f      	cmp	r3, #63	; 0x3f
 80139d0:	ddc8      	ble.n	8013964 <UsbSendDataCalibase+0x58>
		}
		for (int i = 0; i < 64; i++) {
 80139d2:	2300      	movs	r3, #0
 80139d4:	623b      	str	r3, [r7, #32]
 80139d6:	e00a      	b.n	80139ee <UsbSendDataCalibase+0xe2>
			dataUsbCalibase[192 + i] = datamain[i];
 80139d8:	6a3b      	ldr	r3, [r7, #32]
 80139da:	33c0      	adds	r3, #192	; 0xc0
 80139dc:	4936      	ldr	r1, [pc, #216]	; (8013ab8 <UsbSendDataCalibase+0x1ac>)
 80139de:	6a3a      	ldr	r2, [r7, #32]
 80139e0:	440a      	add	r2, r1
 80139e2:	7811      	ldrb	r1, [r2, #0]
 80139e4:	4a32      	ldr	r2, [pc, #200]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 80139e6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 64; i++) {
 80139e8:	6a3b      	ldr	r3, [r7, #32]
 80139ea:	3301      	adds	r3, #1
 80139ec:	623b      	str	r3, [r7, #32]
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	2b3f      	cmp	r3, #63	; 0x3f
 80139f2:	ddf1      	ble.n	80139d8 <UsbSendDataCalibase+0xcc>
		}

		RTC_TimeTypeDef sTime = { 0 };
 80139f4:	f107 0308 	add.w	r3, r7, #8
 80139f8:	2200      	movs	r2, #0
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	605a      	str	r2, [r3, #4]
 80139fe:	609a      	str	r2, [r3, #8]
 8013a00:	60da      	str	r2, [r3, #12]
 8013a02:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = { 0 };
 8013a04:	2300      	movs	r3, #0
 8013a06:	607b      	str	r3, [r7, #4]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8013a08:	f107 0308 	add.w	r3, r7, #8
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	4619      	mov	r1, r3
 8013a10:	482a      	ldr	r0, [pc, #168]	; (8013abc <UsbSendDataCalibase+0x1b0>)
 8013a12:	f7f3 fc05 	bl	8007220 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8013a16:	1d3b      	adds	r3, r7, #4
 8013a18:	2200      	movs	r2, #0
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	4827      	ldr	r0, [pc, #156]	; (8013abc <UsbSendDataCalibase+0x1b0>)
 8013a1e:	f7f3 fce1 	bl	80073e4 <HAL_RTC_GetDate>

		dataUsbCalibase[256] = sTime.Seconds;
 8013a22:	7aba      	ldrb	r2, [r7, #10]
 8013a24:	4b22      	ldr	r3, [pc, #136]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a26:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		dataUsbCalibase[257] = sTime.Minutes;
 8013a2a:	7a7a      	ldrb	r2, [r7, #9]
 8013a2c:	4b20      	ldr	r3, [pc, #128]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a2e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		dataUsbCalibase[258] = sTime.Hours;
 8013a32:	7a3a      	ldrb	r2, [r7, #8]
 8013a34:	4b1e      	ldr	r3, [pc, #120]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a36:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		dataUsbCalibase[259] = sDate.Date;
 8013a3a:	79ba      	ldrb	r2, [r7, #6]
 8013a3c:	4b1c      	ldr	r3, [pc, #112]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a3e:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		dataUsbCalibase[260] = sDate.Month;
 8013a42:	797a      	ldrb	r2, [r7, #5]
 8013a44:	4b1a      	ldr	r3, [pc, #104]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a46:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		dataUsbCalibase[261] = sDate.Year;
 8013a4a:	79fa      	ldrb	r2, [r7, #7]
 8013a4c:	4b18      	ldr	r3, [pc, #96]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a4e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

		for (int i = 0; i < 64; i++)
 8013a52:	2300      	movs	r3, #0
 8013a54:	61fb      	str	r3, [r7, #28]
 8013a56:	e010      	b.n	8013a7a <UsbSendDataCalibase+0x16e>
		{
			dataUsbCalibase[262 + i] = threshold[calibase_type][i];
 8013a58:	4b13      	ldr	r3, [pc, #76]	; (8013aa8 <UsbSendDataCalibase+0x19c>)
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	f503 7383 	add.w	r3, r3, #262	; 0x106
 8013a64:	4916      	ldr	r1, [pc, #88]	; (8013ac0 <UsbSendDataCalibase+0x1b4>)
 8013a66:	0192      	lsls	r2, r2, #6
 8013a68:	4411      	add	r1, r2
 8013a6a:	69fa      	ldr	r2, [r7, #28]
 8013a6c:	440a      	add	r2, r1
 8013a6e:	7811      	ldrb	r1, [r2, #0]
 8013a70:	4a0f      	ldr	r2, [pc, #60]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a72:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 64; i++)
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	3301      	adds	r3, #1
 8013a78:	61fb      	str	r3, [r7, #28]
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	2b3f      	cmp	r3, #63	; 0x3f
 8013a7e:	ddeb      	ble.n	8013a58 <UsbSendDataCalibase+0x14c>
		}
		dataUsbCalibase[326] = 255;
 8013a80:	4b0b      	ldr	r3, [pc, #44]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a82:	22ff      	movs	r2, #255	; 0xff
 8013a84:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
		if (typeCalibaseConnect == USB) {
 8013a88:	4b0e      	ldr	r3, [pc, #56]	; (8013ac4 <UsbSendDataCalibase+0x1b8>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d104      	bne.n	8013a9a <UsbSendDataCalibase+0x18e>
			CDC_Transmit_FS(dataUsbCalibase, 327);
 8013a90:	f240 1147 	movw	r1, #327	; 0x147
 8013a94:	4806      	ldr	r0, [pc, #24]	; (8013ab0 <UsbSendDataCalibase+0x1a4>)
 8013a96:	f7fd f8ed 	bl	8010c74 <CDC_Transmit_FS>
		}
	}
#endif

}
 8013a9a:	bf00      	nop
 8013a9c:	3730      	adds	r7, #48	; 0x30
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	2000b961 	.word	0x2000b961
 8013aa8:	2000b960 	.word	0x2000b960
 8013aac:	20009cb0 	.word	0x20009cb0
 8013ab0:	2000b964 	.word	0x2000b964
 8013ab4:	81020409 	.word	0x81020409
 8013ab8:	2000aeb0 	.word	0x2000aeb0
 8013abc:	200044a0 	.word	0x200044a0
 8013ac0:	2000b4b8 	.word	0x2000b4b8
 8013ac4:	20000102 	.word	0x20000102

08013ac8 <__libc_init_array>:
 8013ac8:	b570      	push	{r4, r5, r6, lr}
 8013aca:	4d0d      	ldr	r5, [pc, #52]	; (8013b00 <__libc_init_array+0x38>)
 8013acc:	4c0d      	ldr	r4, [pc, #52]	; (8013b04 <__libc_init_array+0x3c>)
 8013ace:	1b64      	subs	r4, r4, r5
 8013ad0:	10a4      	asrs	r4, r4, #2
 8013ad2:	2600      	movs	r6, #0
 8013ad4:	42a6      	cmp	r6, r4
 8013ad6:	d109      	bne.n	8013aec <__libc_init_array+0x24>
 8013ad8:	4d0b      	ldr	r5, [pc, #44]	; (8013b08 <__libc_init_array+0x40>)
 8013ada:	4c0c      	ldr	r4, [pc, #48]	; (8013b0c <__libc_init_array+0x44>)
 8013adc:	f000 f82e 	bl	8013b3c <_init>
 8013ae0:	1b64      	subs	r4, r4, r5
 8013ae2:	10a4      	asrs	r4, r4, #2
 8013ae4:	2600      	movs	r6, #0
 8013ae6:	42a6      	cmp	r6, r4
 8013ae8:	d105      	bne.n	8013af6 <__libc_init_array+0x2e>
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
 8013aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013af0:	4798      	blx	r3
 8013af2:	3601      	adds	r6, #1
 8013af4:	e7ee      	b.n	8013ad4 <__libc_init_array+0xc>
 8013af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013afa:	4798      	blx	r3
 8013afc:	3601      	adds	r6, #1
 8013afe:	e7f2      	b.n	8013ae6 <__libc_init_array+0x1e>
 8013b00:	0801416c 	.word	0x0801416c
 8013b04:	0801416c 	.word	0x0801416c
 8013b08:	0801416c 	.word	0x0801416c
 8013b0c:	08014170 	.word	0x08014170

08013b10 <memcpy>:
 8013b10:	440a      	add	r2, r1
 8013b12:	4291      	cmp	r1, r2
 8013b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b18:	d100      	bne.n	8013b1c <memcpy+0xc>
 8013b1a:	4770      	bx	lr
 8013b1c:	b510      	push	{r4, lr}
 8013b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b26:	4291      	cmp	r1, r2
 8013b28:	d1f9      	bne.n	8013b1e <memcpy+0xe>
 8013b2a:	bd10      	pop	{r4, pc}

08013b2c <memset>:
 8013b2c:	4402      	add	r2, r0
 8013b2e:	4603      	mov	r3, r0
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d100      	bne.n	8013b36 <memset+0xa>
 8013b34:	4770      	bx	lr
 8013b36:	f803 1b01 	strb.w	r1, [r3], #1
 8013b3a:	e7f9      	b.n	8013b30 <memset+0x4>

08013b3c <_init>:
 8013b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3e:	bf00      	nop
 8013b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b42:	bc08      	pop	{r3}
 8013b44:	469e      	mov	lr, r3
 8013b46:	4770      	bx	lr

08013b48 <_fini>:
 8013b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b4a:	bf00      	nop
 8013b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b4e:	bc08      	pop	{r3}
 8013b50:	469e      	mov	lr, r3
 8013b52:	4770      	bx	lr
