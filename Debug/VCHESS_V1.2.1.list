
VCHESS_V1.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000130dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0801327c  0801327c  0002327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801386c  0801386c  00030104  2**0
                  CONTENTS
  4 .ARM          00000008  0801386c  0801386c  0002386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013874  08013874  00030104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013874  08013874  00023874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013878  08013878  00023878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0801387c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094d4  20000104  08013980  00030104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200095d8  08013980  000395d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d053  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e34  00000000  00000000  0005d187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002420  00000000  00000000  00063fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002150  00000000  00000000  000663e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204f0  00000000  00000000  00068530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031ccc  00000000  00000000  00088a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6076  00000000  00000000  000ba6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093cc  00000000  00000000  001607b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013264 	.word	0x08013264

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	08013264 	.word	0x08013264

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <MX_DMA_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a3e      	ldr	r2, [pc, #248]	; (80005ec <MX_DMA_Init+0x108>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_DMA_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <MX_DMA_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <MX_DMA_Init+0x108>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_DMA_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fdcb 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f001 fde4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2105      	movs	r1, #5
 8000536:	200c      	movs	r0, #12
 8000538:	f001 fdc3 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800053c:	200c      	movs	r0, #12
 800053e:	f001 fddc 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200d      	movs	r0, #13
 8000548:	f001 fdbb 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f001 fdd4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	200e      	movs	r0, #14
 8000558:	f001 fdb3 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800055c:	200e      	movs	r0, #14
 800055e:	f001 fdcc 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	200f      	movs	r0, #15
 8000568:	f001 fdab 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800056c:	200f      	movs	r0, #15
 800056e:	f001 fdc4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2011      	movs	r0, #17
 8000578:	f001 fda3 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800057c:	2011      	movs	r0, #17
 800057e:	f001 fdbc 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	202f      	movs	r0, #47	; 0x2f
 8000588:	f001 fd9b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800058c:	202f      	movs	r0, #47	; 0x2f
 800058e:	f001 fdb4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2039      	movs	r0, #57	; 0x39
 8000598:	f001 fd93 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f001 fdac 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	203a      	movs	r0, #58	; 0x3a
 80005a8:	f001 fd8b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f001 fda4 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2105      	movs	r1, #5
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f001 fd83 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f001 fd9c 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2105      	movs	r1, #5
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f001 fd7b 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	; 0x45
 80005ce:	f001 fd94 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 fd73 	bl	80020c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 fd8c 	bl	80020fa <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20002188 	.word	0x20002188
 8000620:	200021dc 	.word	0x200021dc

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemGetFRAM */
  osSemaphoreDef(binarySemGetFRAM);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  binarySemGetFRAMHandle = osSemaphoreCreate(osSemaphore(binarySemGetFRAM), 1);
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f00e fa18 	bl	800ea6e <osSemaphoreCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemMasterGetData */
  osSemaphoreDef(binarySemMasterGetData);
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  binarySemMasterGetDataHandle = osSemaphoreCreate(osSemaphore(binarySemMasterGetData), 1);
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f00e fa0b 	bl	800ea6e <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemI2C_Status */
  osSemaphoreDef(binarySemI2C_Status);
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  binarySemI2C_StatusHandle = osSemaphoreCreate(osSemaphore(binarySemI2C_Status), 1);
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f00e f9fe 	bl	800ea6e <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e f98b 	bl	800e9ae <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskScanPiece */
  osThreadStaticDef(taskScanPiece, StartTaskScanPiece, osPriorityHigh, 0, 2048, taskScanPieceBuffer, &taskScanPieceControlBlock);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FREERTOS_Init+0xb8>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskScanPieceHandle = osThreadCreate(osThread(taskScanPiece), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00e f97a 	bl	800e9ae <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_FREERTOS_Init+0xbc>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	2000217c 	.word	0x2000217c
 80006cc:	20002180 	.word	0x20002180
 80006d0:	20002184 	.word	0x20002184
 80006d4:	08013298 	.word	0x08013298
 80006d8:	20000120 	.word	0x20000120
 80006dc:	080132b4 	.word	0x080132b4
 80006e0:	20000124 	.word	0x20000124

080006e4 <StartDefaultTask>:
  */
uint8_t cmd_test=0;

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f010 f87e 	bl	80107ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  ChessClock_Init();
 80006f0:	f010 fe2c 	bl	801134c <ChessClock_Init>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f00e f9a6 	bl	800ea46 <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <StartDefaultTask+0x10>

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b40      	ldr	r3, [pc, #256]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3f      	ldr	r2, [pc, #252]	; (8000818 <MX_GPIO_Init+0x11c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a38      	ldr	r2, [pc, #224]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_GPIO_Init+0x11c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_GPIO_Init+0x11c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0x11c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_PWRC_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2112      	movs	r1, #18
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <MX_GPIO_Init+0x120>)
 8000788:	f002 fa6a 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	4823      	ldr	r0, [pc, #140]	; (8000820 <MX_GPIO_Init+0x124>)
 8000792:	f002 fa65 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CD4051_A_GPIO_Port, CD4051_A_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	481f      	ldr	r0, [pc, #124]	; (800081c <MX_GPIO_Init+0x120>)
 800079e:	f002 fa5f 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_STA_Pin;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_STA_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4819      	ldr	r0, [pc, #100]	; (800081c <MX_GPIO_Init+0x120>)
 80007b6:	f002 f8cf 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_PWRC_Pin|CD4051_A_Pin;
 80007ba:	f248 0302 	movw	r3, #32770	; 0x8002
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0x120>)
 80007d4:	f002 f8c0 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80007d8:	2310      	movs	r3, #16
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0x120>)
 80007f0:	f002 f8b2 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin;
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x124>)
 800080c:	f002 f8a4 	bl	8002958 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400

08000824 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 160;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_I2C1_Init+0x50>)
 800083c:	22a0      	movs	r2, #160	; 0xa0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f002 fa17 	bl	8002c94 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f95c 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200023dc 	.word	0x200023dc
 8000878:	40005400 	.word	0x40005400
 800087c:	000186a0 	.word	0x000186a0

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a39      	ldr	r2, [pc, #228]	; (8000984 <HAL_I2C_MspInit+0x104>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d16b      	bne.n	800097a <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a37      	ldr	r2, [pc, #220]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c4:	2312      	movs	r3, #18
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008d0:	2304      	movs	r3, #4
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	482c      	ldr	r0, [pc, #176]	; (800098c <HAL_I2C_MspInit+0x10c>)
 80008dc:	f002 f83c 	bl	8002958 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <HAL_I2C_MspInit+0x108>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <HAL_I2C_MspInit+0x110>)
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <HAL_I2C_MspInit+0x114>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000908:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <HAL_I2C_MspInit+0x110>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_I2C_MspInit+0x110>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000936:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_I2C_MspInit+0x110>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800093e:	4814      	ldr	r0, [pc, #80]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000940:	f001 fbee 	bl	8002120 <HAL_DMA_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800094a:	f000 f8ed 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_I2C_MspInit+0x110>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	201f      	movs	r0, #31
 8000960:	f001 fbaf 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000964:	201f      	movs	r0, #31
 8000966:	f001 fbc8 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2020      	movs	r0, #32
 8000970:	f001 fba7 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000974:	2020      	movs	r0, #32
 8000976:	f001 fbc0 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400
 8000990:	20002430 	.word	0x20002430
 8000994:	40026010 	.word	0x40026010

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f001 fa5c 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f82c 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f7ff feaa 	bl	80006fc <MX_GPIO_Init>
  MX_DMA_Init();
 80009a8:	f7ff fd9c 	bl	80004e4 <MX_DMA_Init>
  MX_TIM1_Init();
 80009ac:	f000 fba0 	bl	80010f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009b0:	f000 fc58 	bl	8001264 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009b4:	f000 fcd6 	bl	8001364 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009b8:	f000 fd60 	bl	800147c <MX_TIM4_Init>
  MX_I2C1_Init();
 80009bc:	f7ff ff32 	bl	8000824 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009c0:	f000 f968 	bl	8000c94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80009c4:	f001 f92c 	bl	8001c20 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80009c8:	f000 f8b4 	bl	8000b34 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LED_ON;
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <main+0x60>)
 80009d2:	f002 f945 	bl	8002c60 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f001 fa7f 	bl	8001edc <HAL_Delay>
  LED_OFF;
 80009de:	2200      	movs	r2, #0
 80009e0:	2104      	movs	r1, #4
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x60>)
 80009e4:	f002 f93c 	bl	8002c60 <HAL_GPIO_WritePin>
  initReceiverUart();
 80009e8:	f011 ff88 	bl	80128fc <initReceiverUart>
  //TaskScanPieceInit();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009ec:	f7ff fe1a 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009f0:	f00d ffd6 	bl	800e9a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <main+0x5c>
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f012 fc22 	bl	8013254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a74:	2319      	movs	r3, #25
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a78:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a82:	2307      	movs	r3, #7
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f005 fbf4 	bl	8006278 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a96:	f000 f847 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f005 fe56 	bl	8006768 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac2:	f000 f831 	bl	8000b28 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d102      	bne.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000aea:	f001 f9d7 	bl	8001e9c <HAL_IncTick>
		  is_start_measure = false;
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000aee:	e00f      	b.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x38>
  else if(htim->Instance == TIM4){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10a      	bne.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x38>
	  if(is_start_measure==true){
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x38>
		  is_start_measure = false;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b0c:	f007 fe9e 	bl	800884c <HAL_TIM_IC_Stop_DMA>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40014800 	.word	0x40014800
 8000b1c:	40000800 	.word	0x40000800
 8000b20:	20007c9c 	.word	0x20007c9c
 8000b24:	20002628 	.word	0x20002628

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	if(RTC->BKP1R==1990){
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <MX_RTC_Init+0x100>)
 8000b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b3e:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d11d      	bne.n	8000b82 <MX_RTC_Init+0x4e>
		 hrtc.Instance = RTC;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b48:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <MX_RTC_Init+0x100>)
 8000b4a:	601a      	str	r2, [r3, #0]
		  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
		  hrtc.Init.AsynchPrediv = 127;
 8000b52:	4b39      	ldr	r3, [pc, #228]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b54:	227f      	movs	r2, #127	; 0x7f
 8000b56:	609a      	str	r2, [r3, #8]
		  hrtc.Init.SynchPrediv = 255;
 8000b58:	4b37      	ldr	r3, [pc, #220]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b5a:	22ff      	movs	r2, #255	; 0xff
 8000b5c:	60da      	str	r2, [r3, #12]
		  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b5e:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
		  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
		  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
		  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b70:	4831      	ldr	r0, [pc, #196]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b72:	f006 f8f9 	bl	8006d68 <HAL_RTC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d057      	beq.n	8000c2c <MX_RTC_Init+0xf8>
		  {
		    Error_Handler();
 8000b7c:	f7ff ffd4 	bl	8000b28 <Error_Handler>
 8000b80:	e055      	b.n	8000c2e <MX_RTC_Init+0xfa>
		  }
		return;
	}
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b96:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <MX_RTC_Init+0x100>)
 8000b98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <MX_RTC_Init+0x104>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_RTC_Init+0x104>)
 8000ba2:	227f      	movs	r2, #127	; 0x7f
 8000ba4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_RTC_Init+0x104>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_RTC_Init+0x104>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_RTC_Init+0x104>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_RTC_Init+0x104>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bbe:	481e      	ldr	r0, [pc, #120]	; (8000c38 <MX_RTC_Init+0x104>)
 8000bc0:	f006 f8d2 	bl	8006d68 <HAL_RTC_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000bca:	f7ff ffad 	bl	8000b28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <MX_RTC_Init+0x104>)
 8000bea:	f006 f933 	bl	8006e54 <HAL_RTC_SetTime>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000bf4:	f7ff ff98 	bl	8000b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000bfc:	2309      	movs	r3, #9
 8000bfe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000c00:	2309      	movs	r3, #9
 8000c02:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c04:	2316      	movs	r3, #22
 8000c06:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480a      	ldr	r0, [pc, #40]	; (8000c38 <MX_RTC_Init+0x104>)
 8000c10:	f006 fa18 	bl	8007044 <HAL_RTC_SetDate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000c1a:	f7ff ff85 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1990);
 8000c1e:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000c22:	2101      	movs	r1, #1
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_RTC_Init+0x104>)
 8000c26:	f006 fb9d 	bl	8007364 <HAL_RTCEx_BKUPWrite>
 8000c2a:	e000      	b.n	8000c2e <MX_RTC_Init+0xfa>
		return;
 8000c2c:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40002800 	.word	0x40002800
 8000c38:	20002490 	.word	0x20002490

08000c3c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_RTC_MspInit+0x50>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d111      	bne.n	8000c82 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c66:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 ff8d 	bl	8006b8c <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c78:	f7ff ff56 	bl	8000b28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_RTC_MspInit+0x54>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40002800 	.word	0x40002800
 8000c90:	42470e3c 	.word	0x42470e3c

08000c94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_SPI1_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cc8:	2210      	movs	r2, #16
 8000cca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI1_Init+0x64>)
 8000ce6:	f006 fb57 	bl	8007398 <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f7ff ff1a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200024b0 	.word	0x200024b0
 8000cfc:	40013000 	.word	0x40013000

08000d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_SPI_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_SPI_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d5a:	23e0      	movs	r3, #224	; 0xe0
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_SPI_MspInit+0x8c>)
 8000d76:	f001 fdef 	bl	8002958 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40013000 	.word	0x40013000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_MspInit+0x54>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x54>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_MspInit+0x54>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_MspInit+0x54>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	210f      	movs	r1, #15
 8000dd2:	f06f 0001 	mvn.w	r0, #1
 8000dd6:	f001 f974 	bl	80020c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_InitTick+0xd0>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <HAL_InitTick+0xd0>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	6453      	str	r3, [r2, #68]	; 0x44
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_InitTick+0xd0>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 fe82 	bl	8006b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e24:	f005 fe6c 	bl	8006b00 <HAL_RCC_GetPCLK2Freq>
 8000e28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_InitTick+0xd4>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	0c9b      	lsrs	r3, r3, #18
 8000e34:	3b01      	subs	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e44:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e60:	f007 f842 	bl	8007ee8 <HAL_TIM_Base_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d11b      	bne.n	8000eaa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e74:	f007 f888 	bl	8007f88 <HAL_TIM_Base_Start_IT>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d111      	bne.n	8000eaa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e86:	201a      	movs	r0, #26
 8000e88:	f001 f937 	bl	80020fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	d808      	bhi.n	8000ea4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	201a      	movs	r0, #26
 8000e98:	f001 f913 	bl	80020c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_InitTick+0xe0>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e002      	b.n	8000eaa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	20002508 	.word	0x20002508
 8000ec4:	40014800 	.word	0x40014800
 8000ec8:	20000004 	.word	0x20000004

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <DMA1_Stream0_IRQHandler+0x10>)
 8000efe:	f001 faa7 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20002430 	.word	0x20002430

08000f0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <DMA1_Stream1_IRQHandler+0x10>)
 8000f12:	f001 fa9d 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20002790 	.word	0x20002790

08000f20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Stream2_IRQHandler+0x10>)
 8000f26:	f001 fa93 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20002910 	.word	0x20002910

08000f34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA1_Stream3_IRQHandler+0x10>)
 8000f3a:	f001 fa89 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20002970 	.word	0x20002970

08000f48 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DMA1_Stream4_IRQHandler+0x10>)
 8000f4e:	f001 fa7f 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20002850 	.word	0x20002850

08000f5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA1_Stream6_IRQHandler+0x10>)
 8000f62:	f001 fa75 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200027f0 	.word	0x200027f0

08000f70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f76:	f007 fd2b 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20002550 	.word	0x20002550

08000f84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f8a:	f007 fd21 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20002550 	.word	0x20002550

08000f98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000f9e:	f007 fd17 	bl	80089d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000fa4:	f007 fd14 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20002550 	.word	0x20002550
 8000fb0:	20002508 	.word	0x20002508

08000fb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM1_CC_IRQHandler+0x10>)
 8000fba:	f007 fd09 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20002550 	.word	0x20002550

08000fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <TIM2_IRQHandler+0x10>)
 8000fce:	f007 fcff 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20002598 	.word	0x20002598

08000fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM3_IRQHandler+0x10>)
 8000fe2:	f007 fcf5 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200025e0 	.word	0x200025e0

08000ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM4_IRQHandler+0x10>)
 8000ff6:	f007 fceb 	bl	80089d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20002628 	.word	0x20002628

08001004 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <I2C1_EV_IRQHandler+0x10>)
 800100a:	f002 f8f7 	bl	80031fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200023dc 	.word	0x200023dc

08001018 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <I2C1_ER_IRQHandler+0x10>)
 800101e:	f002 fa5e 	bl	80034de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200023dc 	.word	0x200023dc

0800102c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART1_IRQHandler+0x10>)
 8001032:	f008 ffa1 	bl	8009f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200029d0 	.word	0x200029d0

08001040 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA1_Stream7_IRQHandler+0x10>)
 8001046:	f001 fa03 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200028b0 	.word	0x200028b0

08001054 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA2_Stream1_IRQHandler+0x10>)
 800105a:	f001 f9f9 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20002670 	.word	0x20002670

08001068 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA2_Stream2_IRQHandler+0x10>)
 800106e:	f001 f9ef 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200026d0 	.word	0x200026d0

0800107c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <OTG_FS_IRQHandler+0x10>)
 8001082:	f003 ffcc 	bl	800501e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20007520 	.word	0x20007520

08001090 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA2_Stream5_IRQHandler+0x10>)
 8001096:	f001 f9db 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20002a14 	.word	0x20002a14

080010a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA2_Stream6_IRQHandler+0x10>)
 80010aa:	f001 f9d1 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20002730 	.word	0x20002730

080010b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <DMA2_Stream7_IRQHandler+0x10>)
 80010be:	f001 f9c7 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20002a74 	.word	0x20002a74

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	; 0x58
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2220      	movs	r2, #32
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f012 f893 	bl	8013254 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <MX_TIM1_Init+0x16c>)
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <MX_TIM1_Init+0x170>)
 8001132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001134:	4b49      	ldr	r3, [pc, #292]	; (800125c <MX_TIM1_Init+0x16c>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <MX_TIM1_Init+0x16c>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001140:	4b46      	ldr	r3, [pc, #280]	; (800125c <MX_TIM1_Init+0x16c>)
 8001142:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b44      	ldr	r3, [pc, #272]	; (800125c <MX_TIM1_Init+0x16c>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <MX_TIM1_Init+0x16c>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <MX_TIM1_Init+0x16c>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115a:	4840      	ldr	r0, [pc, #256]	; (800125c <MX_TIM1_Init+0x16c>)
 800115c:	f006 fec4 	bl	8007ee8 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001166:	f7ff fcdf 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001174:	4619      	mov	r1, r3
 8001176:	4839      	ldr	r0, [pc, #228]	; (800125c <MX_TIM1_Init+0x16c>)
 8001178:	f007 fe90 	bl	8008e9c <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001182:	f7ff fcd1 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001186:	4835      	ldr	r0, [pc, #212]	; (800125c <MX_TIM1_Init+0x16c>)
 8001188:	f006 ff60 	bl	800804c <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001192:	f7ff fcc9 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800119e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a2:	4619      	mov	r1, r3
 80011a4:	482d      	ldr	r0, [pc, #180]	; (800125c <MX_TIM1_Init+0x16c>)
 80011a6:	f008 fccf 	bl	8009b48 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011b0:	f7ff fcba 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4820      	ldr	r0, [pc, #128]	; (800125c <MX_TIM1_Init+0x16c>)
 80011da:	f007 fd9d 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011e4:	f7ff fca0 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011e8:	2370      	movs	r3, #112	; 0x70
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	2204      	movs	r2, #4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4819      	ldr	r0, [pc, #100]	; (800125c <MX_TIM1_Init+0x16c>)
 80011f6:	f007 fd8f 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001200:	f7ff fc92 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	2208      	movs	r2, #8
 800120a:	4619      	mov	r1, r3
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM1_Init+0x16c>)
 800120e:	f007 fd83 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001218:	f7ff fc86 	bl	8000b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001234:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM1_Init+0x16c>)
 8001240:	f008 fcf0 	bl	8009c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 800124a:	f7ff fc6d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM1_Init+0x16c>)
 8001250:	f000 fc40 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3758      	adds	r7, #88	; 0x58
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20002550 	.word	0x20002550
 8001260:	40010000 	.word	0x40010000

08001264 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <MX_TIM2_Init+0xfc>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <MX_TIM2_Init+0xfc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012bc:	4828      	ldr	r0, [pc, #160]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012be:	f006 fe13 	bl	8007ee8 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012c8:	f7ff fc2e 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4821      	ldr	r0, [pc, #132]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012da:	f007 fddf 	bl	8008e9c <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80012e4:	f7ff fc20 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e8:	481d      	ldr	r0, [pc, #116]	; (8001360 <MX_TIM2_Init+0xfc>)
 80012ea:	f006 feaf 	bl	800804c <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80012f4:	f7ff fc18 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	4619      	mov	r1, r3
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <MX_TIM2_Init+0xfc>)
 8001308:	f008 fc1e 	bl	8009b48 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001312:	f7ff fc09 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2204      	movs	r2, #4
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_TIM2_Init+0xfc>)
 800132e:	f007 fcf3 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001338:	f7ff fbf6 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2208      	movs	r2, #8
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <MX_TIM2_Init+0xfc>)
 8001344:	f007 fce8 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800134e:	f7ff fbeb 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <MX_TIM2_Init+0xfc>)
 8001354:	f000 fbbe 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3738      	adds	r7, #56	; 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20002598 	.word	0x20002598

08001364 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_TIM3_Init+0x110>)
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <MX_TIM3_Init+0x114>)
 8001398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_TIM3_Init+0x110>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <MX_TIM3_Init+0x110>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_TIM3_Init+0x110>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_TIM3_Init+0x110>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <MX_TIM3_Init+0x110>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ba:	482e      	ldr	r0, [pc, #184]	; (8001474 <MX_TIM3_Init+0x110>)
 80013bc:	f006 fd94 	bl	8007ee8 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013c6:	f7ff fbaf 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <MX_TIM3_Init+0x110>)
 80013d8:	f007 fd60 	bl	8008e9c <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013e2:	f7ff fba1 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e6:	4823      	ldr	r0, [pc, #140]	; (8001474 <MX_TIM3_Init+0x110>)
 80013e8:	f006 fe30 	bl	800804c <HAL_TIM_PWM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013f2:	f7ff fb99 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	4619      	mov	r1, r3
 8001404:	481b      	ldr	r0, [pc, #108]	; (8001474 <MX_TIM3_Init+0x110>)
 8001406:	f008 fb9f 	bl	8009b48 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001410:	f7ff fb8a 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4812      	ldr	r0, [pc, #72]	; (8001474 <MX_TIM3_Init+0x110>)
 800142c:	f007 fc74 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001436:	f7ff fb77 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_TIM3_Init+0x110>)
 8001442:	f007 fc69 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800144c:	f7ff fb6c 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	220c      	movs	r2, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM3_Init+0x110>)
 8001458:	f007 fc5e 	bl	8008d18 <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001462:	f7ff fb61 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM3_Init+0x110>)
 8001468:	f000 fb34 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3738      	adds	r7, #56	; 0x38
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200025e0 	.word	0x200025e0
 8001478:	40000400 	.word	0x40000400

0800147c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014a8:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014cc:	4821      	ldr	r0, [pc, #132]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014ce:	f006 fd0b 	bl	8007ee8 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80014d8:	f7ff fb26 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4619      	mov	r1, r3
 80014e8:	481a      	ldr	r0, [pc, #104]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014ea:	f007 fcd7 	bl	8008e9c <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80014f4:	f7ff fb18 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014f8:	4816      	ldr	r0, [pc, #88]	; (8001554 <MX_TIM4_Init+0xd8>)
 80014fa:	f006 ffb1 	bl	8008460 <HAL_TIM_IC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001504:	f7ff fb10 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480f      	ldr	r0, [pc, #60]	; (8001554 <MX_TIM4_Init+0xd8>)
 8001518:	f008 fb16 	bl	8009b48 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001522:	f7ff fb01 	bl	8000b28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800152a:	2301      	movs	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM4_Init+0xd8>)
 800153e:	f007 fb4f 	bl	8008be0 <HAL_TIM_IC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001548:	f7ff faee 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20002628 	.word	0x20002628
 8001558:	40000800 	.word	0x40000800

0800155c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a62      	ldr	r2, [pc, #392]	; (8001704 <HAL_TIM_Base_MspInit+0x1a8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	f040 80d2 	bne.w	8001724 <HAL_TIM_Base_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	4b60      	ldr	r3, [pc, #384]	; (8001708 <HAL_TIM_Base_MspInit+0x1ac>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <HAL_TIM_Base_MspInit+0x1ac>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6453      	str	r3, [r2, #68]	; 0x44
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_TIM_Base_MspInit+0x1ac>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800159c:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 800159e:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <HAL_TIM_Base_MspInit+0x1b4>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015a4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80015a8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015aa:	4b58      	ldr	r3, [pc, #352]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015ac:	2240      	movs	r2, #64	; 0x40
 80015ae:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b0:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015b6:	4b55      	ldr	r3, [pc, #340]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015bc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c6:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015cc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015da:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015e2:	484a      	ldr	r0, [pc, #296]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015e4:	f000 fd9c 	bl	8002120 <HAL_DMA_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 80015ee:	f7ff fa9b 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a45      	ldr	r2, [pc, #276]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
 80015f8:	4a44      	ldr	r2, [pc, #272]	; (800170c <HAL_TIM_Base_MspInit+0x1b0>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80015fe:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_TIM_Base_MspInit+0x1bc>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001606:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800160a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001618:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 800161a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001626:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 800162a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001638:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800163c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001644:	4833      	ldr	r0, [pc, #204]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001646:	f000 fd6b 	bl	8002120 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 8001650:	f7ff fa6a 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
 800165a:	4a2e      	ldr	r2, [pc, #184]	; (8001714 <HAL_TIM_Base_MspInit+0x1b8>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001662:	4a2f      	ldr	r2, [pc, #188]	; (8001720 <HAL_TIM_Base_MspInit+0x1c4>)
 8001664:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001668:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800166c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 800167c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001680:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 800168c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001690:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 800169a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80016a6:	481d      	ldr	r0, [pc, #116]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 80016a8:	f000 fd3a 	bl	8002120 <HAL_DMA_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 80016b2:	f7ff fa39 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_TIM_Base_MspInit+0x1c0>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	2018      	movs	r0, #24
 80016c8:	f000 fcfb 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016cc:	2018      	movs	r0, #24
 80016ce:	f000 fd14 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2105      	movs	r1, #5
 80016d6:	2019      	movs	r0, #25
 80016d8:	f000 fcf3 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016dc:	2019      	movs	r0, #25
 80016de:	f000 fd0c 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	210f      	movs	r1, #15
 80016e6:	201a      	movs	r0, #26
 80016e8:	f000 fceb 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016ec:	201a      	movs	r0, #26
 80016ee:	f000 fd04 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	201b      	movs	r0, #27
 80016f8:	f000 fce3 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80016fc:	201b      	movs	r0, #27
 80016fe:	f000 fcfc 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001702:	e1cb      	b.n	8001a9c <HAL_TIM_Base_MspInit+0x540>
 8001704:	40010000 	.word	0x40010000
 8001708:	40023800 	.word	0x40023800
 800170c:	20002670 	.word	0x20002670
 8001710:	40026428 	.word	0x40026428
 8001714:	200026d0 	.word	0x200026d0
 8001718:	40026440 	.word	0x40026440
 800171c:	20002730 	.word	0x20002730
 8001720:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	f040 8090 	bne.w	8001850 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_TIM_Base_MspInit+0x2e0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a40      	ldr	r2, [pc, #256]	; (800183c <HAL_TIM_Base_MspInit+0x2e0>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_TIM_Base_MspInit+0x2e0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <HAL_TIM_Base_MspInit+0x2e8>)
 8001750:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001754:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001758:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 800175c:	2240      	movs	r2, #64	; 0x40
 800175e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001760:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001774:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001776:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001778:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800178a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001792:	482b      	ldr	r0, [pc, #172]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 8001794:	f000 fcc4 	bl	8002120 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 800179e:	f7ff f9c3 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a8:	4a25      	ldr	r2, [pc, #148]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	4a22      	ldr	r2, [pc, #136]	; (8001840 <HAL_TIM_Base_MspInit+0x2e4>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017bc:	4a23      	ldr	r2, [pc, #140]	; (800184c <HAL_TIM_Base_MspInit+0x2f0>)
 80017be:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017c2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017c6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017da:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 8001802:	f000 fc8d 	bl	8002120 <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_TIM_Base_MspInit+0x2b4>
      Error_Handler();
 800180c:	f7ff f98c 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_TIM_Base_MspInit+0x2ec>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2105      	movs	r1, #5
 800182c:	201c      	movs	r0, #28
 800182e:	f000 fc48 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001832:	201c      	movs	r0, #28
 8001834:	f000 fc61 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001838:	e130      	b.n	8001a9c <HAL_TIM_Base_MspInit+0x540>
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	20002790 	.word	0x20002790
 8001844:	40026028 	.word	0x40026028
 8001848:	200027f0 	.word	0x200027f0
 800184c:	400260a0 	.word	0x400260a0
  else if(tim_baseHandle->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a93      	ldr	r2, [pc, #588]	; (8001aa4 <HAL_TIM_Base_MspInit+0x548>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f040 80b6 	bne.w	80019c8 <HAL_TIM_Base_MspInit+0x46c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b8e      	ldr	r3, [pc, #568]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 800187a:	4a8d      	ldr	r2, [pc, #564]	; (8001ab0 <HAL_TIM_Base_MspInit+0x554>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 8001880:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001884:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 8001888:	2240      	movs	r2, #64	; 0x40
 800188a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800188c:	4b87      	ldr	r3, [pc, #540]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001892:	4b86      	ldr	r3, [pc, #536]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 8001894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001898:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800189a:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 800189c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018a2:	4b82      	ldr	r3, [pc, #520]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80018aa:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018b0:	4b7e      	ldr	r3, [pc, #504]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018b6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b8:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80018be:	487b      	ldr	r0, [pc, #492]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018c0:	f000 fc2e 	bl	8002120 <HAL_DMA_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_TIM_Base_MspInit+0x372>
      Error_Handler();
 80018ca:	f7ff f92d 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a76      	ldr	r2, [pc, #472]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
 80018d4:	4a75      	ldr	r2, [pc, #468]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a73      	ldr	r2, [pc, #460]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
 80018e0:	4a72      	ldr	r2, [pc, #456]	; (8001aac <HAL_TIM_Base_MspInit+0x550>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80018e6:	4b73      	ldr	r3, [pc, #460]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 80018e8:	4a73      	ldr	r2, [pc, #460]	; (8001ab8 <HAL_TIM_Base_MspInit+0x55c>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80018ec:	4b71      	ldr	r3, [pc, #452]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 80018ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001908:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800191e:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001924:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800192c:	4861      	ldr	r0, [pc, #388]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 800192e:	f000 fbf7 	bl	8002120 <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_TIM_Base_MspInit+0x3e0>
      Error_Handler();
 8001938:	f7ff f8f6 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_TIM_Base_MspInit+0x558>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 800194a:	4a5d      	ldr	r2, [pc, #372]	; (8001ac0 <HAL_TIM_Base_MspInit+0x564>)
 800194c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001950:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001954:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001956:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001968:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 800196c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001970:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001972:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001974:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001978:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001980:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800198e:	484b      	ldr	r0, [pc, #300]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 8001990:	f000 fbc6 	bl	8002120 <HAL_DMA_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_TIM_Base_MspInit+0x442>
      Error_Handler();
 800199a:	f7ff f8c5 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a46      	ldr	r2, [pc, #280]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
 80019a4:	4a45      	ldr	r2, [pc, #276]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 80019ae:	621a      	str	r2, [r3, #32]
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <HAL_TIM_Base_MspInit+0x560>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2105      	movs	r1, #5
 80019ba:	201d      	movs	r0, #29
 80019bc:	f000 fb81 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019c0:	201d      	movs	r0, #29
 80019c2:	f000 fb9a 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 80019c6:	e069      	b.n	8001a9c <HAL_TIM_Base_MspInit+0x540>
  else if(tim_baseHandle->Instance==TIM4)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_TIM_Base_MspInit+0x568>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d164      	bne.n	8001a9c <HAL_TIM_Base_MspInit+0x540>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_TIM_Base_MspInit+0x54c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IC_IN_TIM4_CH2_Pin;
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_IN_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <HAL_TIM_Base_MspInit+0x56c>)
 8001a26:	f000 ff97 	bl	8002958 <HAL_GPIO_Init>
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001a2a:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <HAL_TIM_Base_MspInit+0x574>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a52:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a68:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001a70:	4816      	ldr	r0, [pc, #88]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a72:	f000 fb55 	bl	8002120 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_TIM_Base_MspInit+0x524>
      Error_Handler();
 8001a7c:	f7ff f854 	bl	8000b28 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_TIM_Base_MspInit+0x570>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2105      	movs	r1, #5
 8001a90:	201e      	movs	r0, #30
 8001a92:	f000 fb16 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a96:	201e      	movs	r0, #30
 8001a98:	f000 fb2f 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40000400 	.word	0x40000400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	20002850 	.word	0x20002850
 8001ab0:	40026070 	.word	0x40026070
 8001ab4:	200028b0 	.word	0x200028b0
 8001ab8:	400260b8 	.word	0x400260b8
 8001abc:	20002910 	.word	0x20002910
 8001ac0:	40026040 	.word	0x40026040
 8001ac4:	40000800 	.word	0x40000800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	20002970 	.word	0x20002970
 8001ad0:	40026058 	.word	0x40026058

08001ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_TIM_MspPostInit+0x138>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d13e      	bne.n	8001b74 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	4b45      	ldr	r3, [pc, #276]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b2e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4832      	ldr	r0, [pc, #200]	; (8001c14 <HAL_TIM_MspPostInit+0x140>)
 8001b4c:	f000 ff04 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	482a      	ldr	r0, [pc, #168]	; (8001c18 <HAL_TIM_MspPostInit+0x144>)
 8001b6e:	f000 fef3 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b72:	e047      	b.n	8001c04 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d11f      	bne.n	8001bbe <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001b9a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <HAL_TIM_MspPostInit+0x140>)
 8001bb8:	f000 fece 	bl	8002958 <HAL_GPIO_Init>
}
 8001bbc:	e022      	b.n	8001c04 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM3)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIM_MspPostInit+0x148>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d11d      	bne.n	8001c04 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_TIM_MspPostInit+0x13c>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001be4:	2313      	movs	r3, #19
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <HAL_TIM_MspPostInit+0x140>)
 8001c00:	f000 feaa 	bl	8002958 <HAL_GPIO_Init>
}
 8001c04:	bf00      	nop
 8001c06:	3730      	adds	r7, #48	; 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40000400 	.word	0x40000400

08001c20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <MX_USART1_UART_Init+0x50>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART1_UART_Init+0x4c>)
 8001c58:	f008 f84a 	bl	8009cf0 <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c62:	f7fe ff61 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200029d0 	.word	0x200029d0
 8001c70:	40011000 	.word	0x40011000

08001c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a55      	ldr	r2, [pc, #340]	; (8001de8 <HAL_UART_MspInit+0x174>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 80a4 	bne.w	8001de0 <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_UART_MspInit+0x178>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4840      	ldr	r0, [pc, #256]	; (8001df0 <HAL_UART_MspInit+0x17c>)
 8001cee:	f000 fe33 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d04:	2307      	movs	r3, #7
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4838      	ldr	r0, [pc, #224]	; (8001df0 <HAL_UART_MspInit+0x17c>)
 8001d10:	f000 fe22 	bl	8002958 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d16:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <HAL_UART_MspInit+0x184>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d28:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d56:	4827      	ldr	r0, [pc, #156]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d58:	f000 f9e2 	bl	8002120 <HAL_DMA_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001d62:	f7fe fee1 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d6a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d6c:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_UART_MspInit+0x180>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001d72:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_UART_MspInit+0x18c>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001da8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dac:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001db4:	4811      	ldr	r0, [pc, #68]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001db6:	f000 f9b3 	bl	8002120 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8001dc0:	f7fe feb2 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_UART_MspInit+0x188>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	2025      	movs	r0, #37	; 0x25
 8001dd6:	f000 f974 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dda:	2025      	movs	r0, #37	; 0x25
 8001ddc:	f000 f98d 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	; 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	20002a14 	.word	0x20002a14
 8001df8:	40026488 	.word	0x40026488
 8001dfc:	20002a74 	.word	0x20002a74
 8001e00:	400264b8 	.word	0x400264b8

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e20:	4c0b      	ldr	r4, [pc, #44]	; (8001e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff f94d 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f011 f9dd 	bl	80131f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7fe fdaf 	bl	8000998 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001e48:	0801387c 	.word	0x0801387c
  ldr r2, =_sbss
 8001e4c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001e50:	200095d8 	.word	0x200095d8

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f913 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	200f      	movs	r0, #15
 8001e88:	f7fe ffae 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7fe ff80 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	20002ad4 	.word	0x20002ad4

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20002ad4 	.word	0x20002ad4

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002084:	f3bf 8f4f 	dsb	sy
}
 8002088:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <__NVIC_SystemReset+0x24>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002092:	4904      	ldr	r1, [pc, #16]	; (80020a4 <__NVIC_SystemReset+0x24>)
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_SystemReset+0x28>)
 8002096:	4313      	orrs	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800209a:	f3bf 8f4f 	dsb	sy
}
 800209e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <__NVIC_SystemReset+0x20>
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	05fa0004 	.word	0x05fa0004

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff35 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff4a 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff9a 	bl	8002018 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff69 	bl	8001fc4 <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff3d 	bl	8001f88 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800211a:	f7ff ffb1 	bl	8002080 <__NVIC_SystemReset>
	...

08002120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff feca 	bl	8001ec4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e099      	b.n	8002270 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215c:	e00f      	b.n	800217e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800215e:	f7ff feb1 	bl	8001ec4 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b05      	cmp	r3, #5
 800216a:	d908      	bls.n	800217e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e078      	b.n	8002270 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1e8      	bne.n	800215e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_DMA_Init+0x158>)
 8002198:	4013      	ands	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d107      	bne.n	80021e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4313      	orrs	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0307 	bic.w	r3, r3, #7
 80021fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2b04      	cmp	r3, #4
 8002210:	d117      	bne.n	8002242 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fb1b 	bl	8002860 <DMA_CheckFifoParam>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800223e:	2301      	movs	r3, #1
 8002240:	e016      	b.n	8002270 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fad2 	bl	80027f4 <DMA_CalcBaseAndBitshift>
 8002250:	4603      	mov	r3, r0
 8002252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	223f      	movs	r2, #63	; 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	f010803f 	.word	0xf010803f

0800227c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_DMA_Start_IT+0x26>
 800229e:	2302      	movs	r3, #2
 80022a0:	e040      	b.n	8002324 <HAL_DMA_Start_IT+0xa8>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12f      	bne.n	8002316 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa64 	bl	8002798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	223f      	movs	r2, #63	; 0x3f
 80022d6:	409a      	lsls	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0216 	orr.w	r2, r2, #22
 80022ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0208 	orr.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e005      	b.n	8002322 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002322:	7dfb      	ldrb	r3, [r7, #23]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002338:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800233a:	f7ff fdc3 	bl	8001ec4 <HAL_GetTick>
 800233e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d008      	beq.n	800235e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e052      	b.n	8002404 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0216 	bic.w	r2, r2, #22
 800236c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800237c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <HAL_DMA_Abort+0x62>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0208 	bic.w	r2, r2, #8
 800239c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0201 	bic.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ae:	e013      	b.n	80023d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b0:	f7ff fd88 	bl	8001ec4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d90c      	bls.n	80023d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e015      	b.n	8002404 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e4      	bne.n	80023b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	223f      	movs	r2, #63	; 0x3f
 80023ec:	409a      	lsls	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d004      	beq.n	800242a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00c      	b.n	8002444 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800245c:	4b8e      	ldr	r3, [pc, #568]	; (8002698 <HAL_DMA_IRQHandler+0x248>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a8e      	ldr	r2, [pc, #568]	; (800269c <HAL_DMA_IRQHandler+0x24c>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	2208      	movs	r2, #8
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01a      	beq.n	80024bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2208      	movs	r2, #8
 80024aa:	409a      	lsls	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2201      	movs	r2, #1
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d012      	beq.n	80024f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	2201      	movs	r2, #1
 80024e0:	409a      	lsls	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f043 0202 	orr.w	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2204      	movs	r2, #4
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	2204      	movs	r2, #4
 8002516:	409a      	lsls	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	2210      	movs	r2, #16
 800252e:	409a      	lsls	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d043      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d03c      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	2210      	movs	r2, #16
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d018      	beq.n	8002592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d024      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
 800257e:	e01f      	b.n	80025c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e016      	b.n	80025c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d107      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0208 	bic.w	r2, r2, #8
 80025ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c4:	2220      	movs	r2, #32
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 808f 	beq.w	80026f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8087 	beq.w	80026f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2220      	movs	r2, #32
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d136      	bne.n	8002668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0216 	bic.w	r2, r2, #22
 8002608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_DMA_IRQHandler+0x1da>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	223f      	movs	r2, #63	; 0x3f
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	2b00      	cmp	r3, #0
 800265c:	d07e      	beq.n	800275c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
        }
        return;
 8002666:	e079      	b.n	800275c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01d      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	2b00      	cmp	r3, #0
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e02c      	b.n	80026f0 <HAL_DMA_IRQHandler+0x2a0>
 8002696:	bf00      	nop
 8002698:	20000000 	.word	0x20000000
 800269c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e01e      	b.n	80026f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0210 	bic.w	r2, r2, #16
 80026ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d032      	beq.n	800275e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d022      	beq.n	800274a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2205      	movs	r2, #5
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	d307      	bcc.n	8002738 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f2      	bne.n	800271c <HAL_DMA_IRQHandler+0x2cc>
 8002736:	e000      	b.n	800273a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002738:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
 800275a:	e000      	b.n	800275e <HAL_DMA_IRQHandler+0x30e>
        return;
 800275c:	bf00      	nop
    }
  }
}
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002772:	b2db      	uxtb	r3, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b10      	subs	r3, #16
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <DMA_CalcBaseAndBitshift+0x64>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <DMA_CalcBaseAndBitshift+0x68>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d909      	bls.n	8002836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
 8002834:	e007      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	08013330 	.word	0x08013330

08002860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d856      	bhi.n	800292e <DMA_CheckFifoParam+0xce>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <DMA_CheckFifoParam+0x28>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028ab 	.word	0x080028ab
 8002890:	08002899 	.word	0x08002899
 8002894:	0800292f 	.word	0x0800292f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e043      	b.n	8002932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028b2:	d140      	bne.n	8002936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e03d      	b.n	8002936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c2:	d121      	bne.n	8002908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d837      	bhi.n	800293a <DMA_CheckFifoParam+0xda>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x70>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028e7 	.word	0x080028e7
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	080028f9 	.word	0x080028f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e030      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d025      	beq.n	800293e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e022      	b.n	800293e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002906:	e01c      	b.n	8002942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d903      	bls.n	8002916 <DMA_CheckFifoParam+0xb6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002914:	e018      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e015      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e00b      	b.n	8002946 <DMA_CheckFifoParam+0xe6>
      break;
 800292e:	bf00      	nop
 8002930:	e00a      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e008      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e006      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;   
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
    }
  } 
  
  return status; 
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e159      	b.n	8002c28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	429a      	cmp	r2, r3
 800298e:	f040 8148 	bne.w	8002c22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d005      	beq.n	80029aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d017      	beq.n	8002a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	2203      	movs	r2, #3
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d123      	bne.n	8002a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	08da      	lsrs	r2, r3, #3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3208      	adds	r2, #8
 8002a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	08da      	lsrs	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3208      	adds	r2, #8
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0203 	and.w	r2, r3, #3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80a2 	beq.w	8002c22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <HAL_GPIO_Init+0x2e8>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002afa:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_GPIO_Init+0x2ec>)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	3302      	adds	r3, #2
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_GPIO_Init+0x2f0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x202>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <HAL_GPIO_Init+0x2f4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x1fe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_GPIO_Init+0x2f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x1fa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <HAL_GPIO_Init+0x2fc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x1f6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a45      	ldr	r2, [pc, #276]	; (8002c58 <HAL_GPIO_Init+0x300>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x1f2>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x204>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x2ec>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9e:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc8:	4a24      	ldr	r2, [pc, #144]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_GPIO_Init+0x304>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b0f      	cmp	r3, #15
 8002c2c:	f67f aea2 	bls.w	8002974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020400 	.word	0x40020400
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020c00 	.word	0x40020c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40013c00 	.word	0x40013c00

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c7c:	e003      	b.n	8002c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	041a      	lsls	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	619a      	str	r2, [r3, #24]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e12b      	b.n	8002efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fde0 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f003 feee 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a81      	ldr	r2, [pc, #516]	; (8002f08 <HAL_I2C_Init+0x274>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d807      	bhi.n	8002d18 <HAL_I2C_Init+0x84>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a80      	ldr	r2, [pc, #512]	; (8002f0c <HAL_I2C_Init+0x278>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	bf94      	ite	ls
 8002d10:	2301      	movls	r3, #1
 8002d12:	2300      	movhi	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e006      	b.n	8002d26 <HAL_I2C_Init+0x92>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a7d      	ldr	r2, [pc, #500]	; (8002f10 <HAL_I2C_Init+0x27c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	bf94      	ite	ls
 8002d20:	2301      	movls	r3, #1
 8002d22:	2300      	movhi	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0e7      	b.n	8002efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a78      	ldr	r2, [pc, #480]	; (8002f14 <HAL_I2C_Init+0x280>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0c9b      	lsrs	r3, r3, #18
 8002d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_I2C_Init+0x274>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d802      	bhi.n	8002d68 <HAL_I2C_Init+0xd4>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3301      	adds	r3, #1
 8002d66:	e009      	b.n	8002d7c <HAL_I2C_Init+0xe8>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <HAL_I2C_Init+0x284>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	495c      	ldr	r1, [pc, #368]	; (8002f08 <HAL_I2C_Init+0x274>)
 8002d98:	428b      	cmp	r3, r1
 8002d9a:	d819      	bhi.n	8002dd0 <HAL_I2C_Init+0x13c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1e59      	subs	r1, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002db0:	400b      	ands	r3, r1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_I2C_Init+0x138>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e59      	subs	r1, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dca:	e051      	b.n	8002e70 <HAL_I2C_Init+0x1dc>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	e04f      	b.n	8002e70 <HAL_I2C_Init+0x1dc>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <HAL_I2C_Init+0x168>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e012      	b.n	8002e22 <HAL_I2C_Init+0x18e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x196>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e022      	b.n	8002e70 <HAL_I2C_Init+0x1dc>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10e      	bne.n	8002e50 <HAL_I2C_Init+0x1bc>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e58      	subs	r0, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	440b      	add	r3, r1
 8002e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	e00f      	b.n	8002e70 <HAL_I2C_Init+0x1dc>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1e58      	subs	r0, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	0099      	lsls	r1, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	6809      	ldr	r1, [r1, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69da      	ldr	r2, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6911      	ldr	r1, [r2, #16]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68d2      	ldr	r2, [r2, #12]
 8002eaa:	4311      	orrs	r1, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	000186a0 	.word	0x000186a0
 8002f0c:	001e847f 	.word	0x001e847f
 8002f10:	003d08ff 	.word	0x003d08ff
 8002f14:	431bde83 	.word	0x431bde83
 8002f18:	10624dd3 	.word	0x10624dd3

08002f1c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f38:	2b28      	cmp	r3, #40	; 0x28
 8002f3a:	f040 811e 	bne.w	800317a <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e116      	b.n	800317c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e10f      	b.n	800317c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f72:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7e:	d127      	bne.n	8002fd0 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8e:	d14c      	bne.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d048      	beq.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	4a75      	ldr	r2, [pc, #468]	; (8003184 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fa29 	bl	800240c <HAL_DMA_Abort_IT>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d034      	beq.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4798      	blx	r3
 8002fce:	e02c      	b.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b29      	cmp	r3, #41	; 0x29
 8002fda:	d126      	bne.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fea:	d11e      	bne.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffa:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	4a5e      	ldr	r2, [pc, #376]	; (8003184 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800300a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff f9fb 	bl	800240c <HAL_DMA_Abort_IT>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003026:	4610      	mov	r0, r2
 8003028:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d007      	beq.n	8003048 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	222a      	movs	r2, #42	; 0x2a
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d022      	beq.n	80030d8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 80030a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2200      	movs	r2, #0
 80030b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3310      	adds	r3, #16
 80030bc:	4619      	mov	r1, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	f7ff f8d8 	bl	800227c <HAL_DMA_Start_IT>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d13d      	bne.n	8003152 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80030d6:	e013      	b.n	8003100 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2228      	movs	r2, #40	; 0x28
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e03d      	b.n	800317c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800310e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313c:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800314c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e014      	b.n	800317c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	08004b95 	.word	0x08004b95
 8003188:	08004971 	.word	0x08004971
 800318c:	08004b1b 	.word	0x08004b1b

08003190 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d124      	bne.n	80031ee <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2228      	movs	r2, #40	; 0x28
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d007      	beq.n	80031ca <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031e8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800321c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d003      	beq.n	8003234 <HAL_I2C_EV_IRQHandler+0x38>
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	f040 80c1 	bne.w	80033b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_I2C_EV_IRQHandler+0x6e>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003254:	d003      	beq.n	800325e <HAL_I2C_EV_IRQHandler+0x62>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800325c:	d101      	bne.n	8003262 <HAL_I2C_EV_IRQHandler+0x66>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_I2C_EV_IRQHandler+0x68>
 8003262:	2300      	movs	r3, #0
 8003264:	2b01      	cmp	r3, #1
 8003266:	f000 8132 	beq.w	80034ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00c      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x92>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	0a5b      	lsrs	r3, r3, #9
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f001 fd61 	bl	8004d48 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fd57 	bl	8003d3a <I2C_Master_SB>
 800328c:	e092      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0xb2>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	0a5b      	lsrs	r3, r3, #9
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fdcd 	bl	8003e46 <I2C_Master_ADD10>
 80032ac:	e082      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0xd2>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	0a5b      	lsrs	r3, r3, #9
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fde7 	bl	8003e9a <I2C_Master_ADDR>
 80032cc:	e072      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03b      	beq.n	8003352 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e8:	f000 80f3 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	09db      	lsrs	r3, r3, #7
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x11c>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x11c>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9c7 	bl	80036a4 <I2C_MasterTransmit_TXE>
 8003316:	e04d      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80d6 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	0a5b      	lsrs	r3, r3, #9
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80cf 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	2b21      	cmp	r3, #33	; 0x21
 8003338:	d103      	bne.n	8003342 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa4e 	bl	80037dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003340:	e0c7      	b.n	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	f040 80c4 	bne.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fabc 	bl	80038c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003350:	e0bf      	b.n	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	f000 80b7 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00f      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x194>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	0a9b      	lsrs	r3, r3, #10
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x194>
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fb31 	bl	80039f0 <I2C_MasterReceive_RXNE>
 800338e:	e011      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 809a 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	0a5b      	lsrs	r3, r3, #9
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8093 	beq.w	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fbda 	bl	8003b66 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b2:	e08e      	b.n	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b4:	e08d      	b.n	80034d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e007      	b.n	80033d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_I2C_EV_IRQHandler+0x20e>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	0a5b      	lsrs	r3, r3, #9
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 ff98 	bl	8004338 <I2C_Slave_ADDR>
 8003408:	e066      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x22e>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0a5b      	lsrs	r3, r3, #9
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 ffd2 	bl	80043cc <I2C_Slave_STOPF>
 8003428:	e056      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800342a:	7bbb      	ldrb	r3, [r7, #14]
 800342c:	2b21      	cmp	r3, #33	; 0x21
 800342e:	d002      	beq.n	8003436 <HAL_I2C_EV_IRQHandler+0x23a>
 8003430:	7bbb      	ldrb	r3, [r7, #14]
 8003432:	2b29      	cmp	r3, #41	; 0x29
 8003434:	d125      	bne.n	8003482 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	09db      	lsrs	r3, r3, #7
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00f      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x266>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	0a9b      	lsrs	r3, r3, #10
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_I2C_EV_IRQHandler+0x266>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	089b      	lsrs	r3, r3, #2
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 feae 	bl	80041bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003460:	e039      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d033      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	0a5b      	lsrs	r3, r3, #9
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d02d      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fedb 	bl	8004236 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003480:	e029      	b.n	80034d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00f      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	0a9b      	lsrs	r3, r3, #10
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	089b      	lsrs	r3, r3, #2
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fee6 	bl	8004278 <I2C_SlaveReceive_RXNE>
 80034ac:	e014      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	0a5b      	lsrs	r3, r3, #9
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 ff14 	bl	80042f4 <I2C_SlaveReceive_BTF>
 80034cc:	e004      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b08a      	sub	sp, #40	; 0x28
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003500:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00e      	beq.n	800352c <HAL_I2C_ER_IRQHandler+0x4e>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800352a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	0a5b      	lsrs	r3, r3, #9
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <HAL_I2C_ER_IRQHandler+0x78>
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f043 0302 	orr.w	r3, r3, #2
 800354a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003554:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	0a9b      	lsrs	r3, r3, #10
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03f      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x104>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d039      	beq.n	80035e2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800356e:	7efb      	ldrb	r3, [r7, #27]
 8003570:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003588:	7ebb      	ldrb	r3, [r7, #26]
 800358a:	2b20      	cmp	r3, #32
 800358c:	d112      	bne.n	80035b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10f      	bne.n	80035b4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b21      	cmp	r3, #33	; 0x21
 8003598:	d008      	beq.n	80035ac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b29      	cmp	r3, #41	; 0x29
 800359e:	d005      	beq.n	80035ac <HAL_I2C_ER_IRQHandler+0xce>
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b28      	cmp	r3, #40	; 0x28
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b21      	cmp	r3, #33	; 0x21
 80035aa:	d103      	bne.n	80035b4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f001 f83d 	bl	800462c <I2C_Slave_AF>
 80035b2:	e016      	b.n	80035e2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035c6:	7efb      	ldrb	r3, [r7, #27]
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d002      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0xf4>
 80035cc:	7efb      	ldrb	r3, [r7, #27]
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d107      	bne.n	80035e2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	0adb      	lsrs	r3, r3, #11
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0x12e>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f043 0308 	orr.w	r3, r3, #8
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800360a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f001 f874 	bl	800470c <I2C_ITError>
  }
}
 8003624:	bf00      	nop
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d150      	bne.n	800376c <I2C_MasterTransmit_TXE+0xc8>
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b21      	cmp	r3, #33	; 0x21
 80036ce:	d14d      	bne.n	800376c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d01d      	beq.n	8003712 <I2C_MasterTransmit_TXE+0x6e>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d01a      	beq.n	8003712 <I2C_MasterTransmit_TXE+0x6e>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e2:	d016      	beq.n	8003712 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2211      	movs	r2, #17
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff8e 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003710:	e060      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003720:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d107      	bne.n	800375c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff87 	bl	8003668 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800375a:	e03b      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff61 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800376a:	e033      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b21      	cmp	r3, #33	; 0x21
 8003770:	d005      	beq.n	800377e <I2C_MasterTransmit_TXE+0xda>
 8003772:	7bbb      	ldrb	r3, [r7, #14]
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d12d      	bne.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b22      	cmp	r3, #34	; 0x22
 800377c:	d12a      	bne.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d108      	bne.n	800379a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003798:	e01c      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	d103      	bne.n	80037ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f88e 	bl	80038c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80037ac:	e012      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037d2:	e7ff      	b.n	80037d4 <I2C_MasterTransmit_TXE+0x130>
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b21      	cmp	r3, #33	; 0x21
 80037f4:	d164      	bne.n	80038c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003824:	e04c      	b.n	80038c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b08      	cmp	r3, #8
 800382a:	d01d      	beq.n	8003868 <I2C_MasterTransmit_BTF+0x8c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b20      	cmp	r3, #32
 8003830:	d01a      	beq.n	8003868 <I2C_MasterTransmit_BTF+0x8c>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003838:	d016      	beq.n	8003868 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003848:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2211      	movs	r2, #17
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fee3 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
}
 8003866:	e02b      	b.n	80038c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003876:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d107      	bne.n	80038b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fedc 	bl	8003668 <HAL_I2C_MemTxCpltCallback>
}
 80038b0:	e006      	b.n	80038c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff feb6 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11d      	bne.n	800391c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10b      	bne.n	8003900 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038fe:	e073      	b.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	b29b      	uxth	r3, r3
 8003906:	121b      	asrs	r3, r3, #8
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
}
 800391a:	e065      	b.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10b      	bne.n	800393c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	b2da      	uxtb	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800393a:	e055      	b.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	2b02      	cmp	r3, #2
 8003942:	d151      	bne.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b22      	cmp	r3, #34	; 0x22
 8003948:	d10d      	bne.n	8003966 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003958:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003964:	e040      	b.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b21      	cmp	r3, #33	; 0x21
 8003974:	d112      	bne.n	800399c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800399a:	e025      	b.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d120      	bne.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b21      	cmp	r3, #33	; 0x21
 80039aa:	d11d      	bne.n	80039e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fe40 	bl	8003668 <HAL_I2C_MemTxCpltCallback>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b22      	cmp	r3, #34	; 0x22
 8003a02:	f040 80ac 	bne.w	8003b5e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d921      	bls.n	8003a58 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	f040 808c 	bne.w	8003b5e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a54:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a56:	e082      	b.n	8003b5e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d075      	beq.n	8003b4c <I2C_MasterReceive_RXNE+0x15c>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d002      	beq.n	8003a6c <I2C_MasterReceive_RXNE+0x7c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d16f      	bne.n	8003b4c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f001 f939 	bl	8004ce4 <I2C_WaitOnSTOPRequestThroughIT>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d142      	bne.n	8003afe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a86:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a96:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d10a      	bne.n	8003ae8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fdcb 	bl	800367c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ae6:	e03a      	b.n	8003b5e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2212      	movs	r2, #18
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fda2 	bl	8003640 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003afc:	e02f      	b.n	8003b5e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b0c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f00d fbef 	bl	8011328 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b4a:	e008      	b.n	8003b5e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	605a      	str	r2, [r3, #4]
}
 8003b5c:	e7ff      	b.n	8003b5e <I2C_MasterReceive_RXNE+0x16e>
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d11b      	bne.n	8003bb6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003bb4:	e0bd      	b.n	8003d32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d129      	bne.n	8003c14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d00a      	beq.n	8003bec <I2C_MasterReceive_BTF+0x86>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d007      	beq.n	8003bec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c12:	e08e      	b.n	8003d32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d176      	bne.n	8003d0c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d002      	beq.n	8003c2a <I2C_MasterReceive_BTF+0xc4>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d108      	bne.n	8003c3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e019      	b.n	8003c70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d002      	beq.n	8003c48 <I2C_MasterReceive_BTF+0xe2>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d108      	bne.n	8003c5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e00a      	b.n	8003c70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d007      	beq.n	8003c70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003cca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d10a      	bne.n	8003cf6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fcc4 	bl	800367c <HAL_I2C_MemRxCpltCallback>
}
 8003cf4:	e01d      	b.n	8003d32 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2212      	movs	r2, #18
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fc9b 	bl	8003640 <HAL_I2C_MasterRxCpltCallback>
}
 8003d0a:	e012      	b.n	8003d32 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d117      	bne.n	8003d7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d68:	e067      	b.n	8003e3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	611a      	str	r2, [r3, #16]
}
 8003d7c:	e05d      	b.n	8003e3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d86:	d133      	bne.n	8003df0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b21      	cmp	r3, #33	; 0x21
 8003d92:	d109      	bne.n	8003da8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e008      	b.n	8003dba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <I2C_Master_SB+0x92>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d032      	beq.n	8003e3a <I2C_Master_SB+0x100>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02d      	beq.n	8003e3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dec:	605a      	str	r2, [r3, #4]
}
 8003dee:	e024      	b.n	8003e3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	11db      	asrs	r3, r3, #7
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 0306 	and.w	r3, r3, #6
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f063 030f 	orn	r3, r3, #15
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]
}
 8003e14:	e011      	b.n	8003e3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10d      	bne.n	8003e3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	11db      	asrs	r3, r3, #7
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0306 	and.w	r3, r3, #6
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f063 030e 	orn	r3, r3, #14
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <I2C_Master_ADD10+0x26>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00c      	beq.n	8003e8e <I2C_Master_ADD10+0x48>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
  }
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b091      	sub	sp, #68	; 0x44
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b22      	cmp	r3, #34	; 0x22
 8003ec2:	f040 8169 	bne.w	8004198 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <I2C_Master_ADDR+0x54>
 8003ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10b      	bne.n	8003eee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	e160      	b.n	80041b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <I2C_Master_ADDR+0x98>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003efe:	d118      	bne.n	8003f32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003f30:	e13e      	b.n	80041b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d113      	bne.n	8003f64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e115      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	f040 808a 	bne.w	8004084 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f76:	d137      	bne.n	8003fe8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d113      	bne.n	8003fc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa8:	2300      	movs	r3, #0
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	e0e7      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	623b      	str	r3, [r7, #32]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e0d3      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d02e      	beq.n	800404c <I2C_Master_ADDR+0x1b2>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d02b      	beq.n	800404c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	2b12      	cmp	r3, #18
 8003ff8:	d102      	bne.n	8004000 <I2C_Master_ADDR+0x166>
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d125      	bne.n	800404c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	2b04      	cmp	r3, #4
 8004004:	d00e      	beq.n	8004024 <I2C_Master_ADDR+0x18a>
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b02      	cmp	r3, #2
 800400a:	d00b      	beq.n	8004024 <I2C_Master_ADDR+0x18a>
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2b10      	cmp	r3, #16
 8004010:	d008      	beq.n	8004024 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e007      	b.n	8004034 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004032:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	e0a1      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e085      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d14d      	bne.n	800412a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	2b04      	cmp	r3, #4
 8004092:	d016      	beq.n	80040c2 <I2C_Master_ADDR+0x228>
 8004094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004096:	2b02      	cmp	r3, #2
 8004098:	d013      	beq.n	80040c2 <I2C_Master_ADDR+0x228>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b10      	cmp	r3, #16
 800409e:	d010      	beq.n	80040c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e007      	b.n	80040d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e0:	d117      	bne.n	8004112 <I2C_Master_ADDR+0x278>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e8:	d00b      	beq.n	8004102 <I2C_Master_ADDR+0x268>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d008      	beq.n	8004102 <I2C_Master_ADDR+0x268>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d005      	beq.n	8004102 <I2C_Master_ADDR+0x268>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d002      	beq.n	8004102 <I2C_Master_ADDR+0x268>
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004110:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	e032      	b.n	8004190 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	d117      	bne.n	800417a <I2C_Master_ADDR+0x2e0>
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004150:	d00b      	beq.n	800416a <I2C_Master_ADDR+0x2d0>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b01      	cmp	r3, #1
 8004156:	d008      	beq.n	800416a <I2C_Master_ADDR+0x2d0>
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	2b08      	cmp	r3, #8
 800415c:	d005      	beq.n	800416a <I2C_Master_ADDR+0x2d0>
 800415e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004160:	2b10      	cmp	r3, #16
 8004162:	d002      	beq.n	800416a <I2C_Master_ADDR+0x2d0>
 8004164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004166:	2b20      	cmp	r3, #32
 8004168:	d107      	bne.n	800417a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004178:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004196:	e00b      	b.n	80041b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	e7ff      	b.n	80041b0 <I2C_Master_ADDR+0x316>
 80041b0:	bf00      	nop
 80041b2:	3744      	adds	r7, #68	; 0x44
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02b      	beq.n	800422e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d114      	bne.n	800422e <I2C_SlaveTransmit_TXE+0x72>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b29      	cmp	r3, #41	; 0x29
 8004208:	d111      	bne.n	800422e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2221      	movs	r2, #33	; 0x21
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2228      	movs	r2, #40	; 0x28
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff fa13 	bl	8003654 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d011      	beq.n	800426c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d02c      	beq.n	80042ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d114      	bne.n	80042ec <I2C_SlaveReceive_RXNE+0x74>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b2a      	cmp	r3, #42	; 0x2a
 80042c6:	d111      	bne.n	80042ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2222      	movs	r2, #34	; 0x22
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2228      	movs	r2, #40	; 0x28
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f00c fff8 	bl	80112dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004352:	2b28      	cmp	r3, #40	; 0x28
 8004354:	d127      	bne.n	80043a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	09db      	lsrs	r3, r3, #7
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	81bb      	strh	r3, [r7, #12]
 8004388:	e002      	b.n	8004390 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004398:	89ba      	ldrh	r2, [r7, #12]
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f00c ff6e 	bl	8011280 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043a4:	e00e      	b.n	80043c4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004418:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004428:	d172      	bne.n	8004510 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b22      	cmp	r3, #34	; 0x22
 800442e:	d002      	beq.n	8004436 <I2C_Slave_STOPF+0x6a>
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b2a      	cmp	r3, #42	; 0x2a
 8004434:	d135      	bne.n	80044a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f043 0204 	orr.w	r2, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004468:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe f978 	bl	8002764 <HAL_DMA_GetState>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d049      	beq.n	800450e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	4a69      	ldr	r2, [pc, #420]	; (8004624 <I2C_Slave_STOPF+0x258>)
 8004480:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd ffc0 	bl	800240c <HAL_DMA_Abort_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03d      	beq.n	800450e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800449c:	4610      	mov	r0, r2
 800449e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044a0:	e035      	b.n	800450e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe f942 	bl	8002764 <HAL_DMA_GetState>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d014      	beq.n	8004510 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	4a4e      	ldr	r2, [pc, #312]	; (8004624 <I2C_Slave_STOPF+0x258>)
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd ff8a 	bl	800240c <HAL_DMA_Abort_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004508:	4610      	mov	r0, r2
 800450a:	4798      	blx	r3
 800450c:	e000      	b.n	8004510 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800450e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03e      	beq.n	8004598 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d112      	bne.n	800454e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004558:	2b40      	cmp	r3, #64	; 0x40
 800455a:	d112      	bne.n	8004582 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8b3 	bl	800470c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045a6:	e039      	b.n	800461c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d109      	bne.n	80045c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2228      	movs	r2, #40	; 0x28
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f00c fe8d 	bl	80112dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b28      	cmp	r3, #40	; 0x28
 80045cc:	d111      	bne.n	80045f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <I2C_Slave_STOPF+0x25c>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f00c fe68 	bl	80112c0 <HAL_I2C_ListenCpltCallback>
}
 80045f0:	e014      	b.n	800461c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b22      	cmp	r3, #34	; 0x22
 80045f8:	d002      	beq.n	8004600 <I2C_Slave_STOPF+0x234>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b22      	cmp	r3, #34	; 0x22
 80045fe:	d10d      	bne.n	800461c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f00c fe60 	bl	80112dc <HAL_I2C_SlaveRxCpltCallback>
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	08004b95 	.word	0x08004b95
 8004628:	ffff0000 	.word	0xffff0000

0800462c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d002      	beq.n	800464e <I2C_Slave_AF+0x22>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b20      	cmp	r3, #32
 800464c:	d129      	bne.n	80046a2 <I2C_Slave_AF+0x76>
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b28      	cmp	r3, #40	; 0x28
 8004652:	d126      	bne.n	80046a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2c      	ldr	r2, [pc, #176]	; (8004708 <I2C_Slave_AF+0xdc>)
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004668:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004672:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f00c fe10 	bl	80112c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80046a0:	e02e      	b.n	8004700 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d126      	bne.n	80046f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a17      	ldr	r2, [pc, #92]	; (8004708 <I2C_Slave_AF+0xdc>)
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2221      	movs	r2, #33	; 0x21
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fe ffb0 	bl	8003654 <HAL_I2C_SlaveTxCpltCallback>
}
 80046f4:	e004      	b.n	8004700 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	ffff0000 	.word	0xffff0000

0800470c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004722:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b10      	cmp	r3, #16
 8004728:	d002      	beq.n	8004730 <I2C_ITError+0x24>
 800472a:	7bbb      	ldrb	r3, [r7, #14]
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d10a      	bne.n	8004746 <I2C_ITError+0x3a>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b22      	cmp	r3, #34	; 0x22
 8004734:	d107      	bne.n	8004746 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004744:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800474c:	2b28      	cmp	r3, #40	; 0x28
 800474e:	d107      	bne.n	8004760 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2228      	movs	r2, #40	; 0x28
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800475e:	e015      	b.n	800478c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476e:	d00a      	beq.n	8004786 <I2C_ITError+0x7a>
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b60      	cmp	r3, #96	; 0x60
 8004774:	d007      	beq.n	8004786 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d162      	bne.n	8004862 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d020      	beq.n	80047fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4a6a      	ldr	r2, [pc, #424]	; (8004968 <I2C_ITError+0x25c>)
 80047c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fe20 	bl	800240c <HAL_DMA_Abort_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8089 	beq.w	80048e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
 80047fa:	e074      	b.n	80048e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	4a59      	ldr	r2, [pc, #356]	; (8004968 <I2C_ITError+0x25c>)
 8004802:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fdff 	bl	800240c <HAL_DMA_Abort_IT>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d068      	beq.n	80048e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b40      	cmp	r3, #64	; 0x40
 8004820:	d10b      	bne.n	800483a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800485c:	4610      	mov	r0, r2
 800485e:	4798      	blx	r3
 8004860:	e041      	b.n	80048e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b60      	cmp	r3, #96	; 0x60
 800486c:	d125      	bne.n	80048ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d10b      	bne.n	80048a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fe feec 	bl	8003690 <HAL_I2C_AbortCpltCallback>
 80048b8:	e015      	b.n	80048e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d10b      	bne.n	80048e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f00c fd21 	bl	8011328 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d113      	bne.n	8004960 <I2C_ITError+0x254>
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b28      	cmp	r3, #40	; 0x28
 800493c:	d110      	bne.n	8004960 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <I2C_ITError+0x260>)
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f00c fcb0 	bl	80112c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	08004b95 	.word	0x08004b95
 800496c:	ffff0000 	.word	0xffff0000

08004970 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049a2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	2200      	movs	r2, #0
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	2200      	movs	r2, #0
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80049ca:	2b21      	cmp	r3, #33	; 0x21
 80049cc:	d007      	beq.n	80049de <I2C_DMAXferCplt+0x6e>
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80049d4:	2b22      	cmp	r3, #34	; 0x22
 80049d6:	d131      	bne.n	8004a3c <I2C_DMAXferCplt+0xcc>
 80049d8:	7cbb      	ldrb	r3, [r7, #18]
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d12e      	bne.n	8004a3c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ec:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b29      	cmp	r3, #41	; 0x29
 80049f8:	d10a      	bne.n	8004a10 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2221      	movs	r2, #33	; 0x21
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2228      	movs	r2, #40	; 0x28
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a08:	6978      	ldr	r0, [r7, #20]
 8004a0a:	f7fe fe23 	bl	8003654 <HAL_I2C_SlaveTxCpltCallback>
 8004a0e:	e00c      	b.n	8004a2a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b2a      	cmp	r3, #42	; 0x2a
 8004a14:	d109      	bne.n	8004a2a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2222      	movs	r2, #34	; 0x22
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2228      	movs	r2, #40	; 0x28
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f00c fc59 	bl	80112dc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004a38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a3a:	e06a      	b.n	8004b12 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d064      	beq.n	8004b12 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a60:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a78:	d009      	beq.n	8004a8e <I2C_DMAXferCplt+0x11e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d006      	beq.n	8004a8e <I2C_DMAXferCplt+0x11e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a86:	d002      	beq.n	8004a8e <I2C_DMAXferCplt+0x11e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d107      	bne.n	8004a9e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aac:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f00c fc2b 	bl	8011328 <HAL_I2C_ErrorCallback>
}
 8004ad2:	e01e      	b.n	8004b12 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d10a      	bne.n	8004afe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7fe fdc0 	bl	800367c <HAL_I2C_MemRxCpltCallback>
}
 8004afc:	e009      	b.n	8004b12 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2212      	movs	r2, #18
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b0c:	6978      	ldr	r0, [r7, #20]
 8004b0e:	f7fe fd97 	bl	8003640 <HAL_I2C_MasterRxCpltCallback>
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	2200      	movs	r2, #0
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fd fe19 	bl	8002780 <HAL_DMA_GetError>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d01b      	beq.n	8004b8c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0210 	orr.w	r2, r3, #16
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f00c fbce 	bl	8011328 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bae:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <I2C_DMAAbort+0x148>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	08db      	lsrs	r3, r3, #3
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <I2C_DMAAbort+0x14c>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	0a1a      	lsrs	r2, r3, #8
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00da      	lsls	r2, r3, #3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004bda:	e00a      	b.n	8004bf2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf0:	d0ea      	beq.n	8004bc8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	2200      	movs	r2, #0
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	2200      	movs	r2, #0
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	2200      	movs	r2, #0
 8004c36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	2200      	movs	r2, #0
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d10e      	bne.n	8004c82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c7a:	6978      	ldr	r0, [r7, #20]
 8004c7c:	f7fe fd08 	bl	8003690 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c80:	e027      	b.n	8004cd2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c88:	2b28      	cmp	r3, #40	; 0x28
 8004c8a:	d117      	bne.n	8004cbc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004caa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2228      	movs	r2, #40	; 0x28
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cba:	e007      	b.n	8004ccc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f00c fb2b 	bl	8011328 <HAL_I2C_ErrorCallback>
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	14f8b589 	.word	0x14f8b589

08004ce4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	0a1a      	lsrs	r2, r3, #8
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e008      	b.n	8004d34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d0e9      	beq.n	8004d06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000000 	.word	0x20000000
 8004d44:	14f8b589 	.word	0x14f8b589

08004d48 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d58:	d103      	bne.n	8004d62 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d60:	e007      	b.n	8004d72 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d6a:	d102      	bne.n	8004d72 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2208      	movs	r2, #8
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d80:	b08f      	sub	sp, #60	; 0x3c
 8004d82:	af0a      	add	r7, sp, #40	; 0x28
 8004d84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e10f      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f00b ff3a 	bl	8010c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2203      	movs	r2, #3
 8004db4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f006 facd 	bl	800b36e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	687e      	ldr	r6, [r7, #4]
 8004ddc:	466d      	mov	r5, sp
 8004dde:	f106 0410 	add.w	r4, r6, #16
 8004de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8004df2:	1d33      	adds	r3, r6, #4
 8004df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004df6:	6838      	ldr	r0, [r7, #0]
 8004df8:	f006 f9a4 	bl	800b144 <USB_CoreInit>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0d0      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2100      	movs	r1, #0
 8004e14:	4618      	mov	r0, r3
 8004e16:	f006 fabb 	bl	800b390 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
 8004e1e:	e04a      	b.n	8004eb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	333d      	adds	r3, #61	; 0x3d
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	333c      	adds	r3, #60	; 0x3c
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	b298      	uxth	r0, r3
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3344      	adds	r3, #68	; 0x44
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3340      	adds	r3, #64	; 0x40
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3348      	adds	r3, #72	; 0x48
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	334c      	adds	r3, #76	; 0x4c
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3354      	adds	r3, #84	; 0x54
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3af      	bcc.n	8004e20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e044      	b.n	8004f50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	7bfa      	ldrb	r2, [r7, #15]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d3b5      	bcc.n	8004ec6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	687e      	ldr	r6, [r7, #4]
 8004f62:	466d      	mov	r5, sp
 8004f64:	f106 0410 	add.w	r4, r6, #16
 8004f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f78:	1d33      	adds	r3, r6, #4
 8004f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f006 fa53 	bl	800b428 <USB_DevInit>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e00d      	b.n	8004fb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f007 fba2 	bl	800c6f2 <USB_DevDisconnect>

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_PCD_Start+0x1c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e020      	b.n	8005016 <HAL_PCD_Start+0x5e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d109      	bne.n	8004ff8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d005      	beq.n	8004ff8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f006 f9a5 	bl	800b34c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f007 fb52 	bl	800c6b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800501e:	b590      	push	{r4, r7, lr}
 8005020:	b08d      	sub	sp, #52	; 0x34
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f007 fc10 	bl	800c85a <USB_GetMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 848a 	bne.w	8005956 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f007 fb74 	bl	800c734 <USB_ReadInterrupts>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8480 	beq.w	8005954 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f007 fb61 	bl	800c734 <USB_ReadInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d107      	bne.n	800508c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f002 0202 	and.w	r2, r2, #2
 800508a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f007 fb4f 	bl	800c734 <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d161      	bne.n	8005164 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0210 	bic.w	r2, r2, #16
 80050ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	4613      	mov	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	0c5b      	lsrs	r3, r3, #17
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d124      	bne.n	8005126 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d035      	beq.n	8005154 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	6a38      	ldr	r0, [r7, #32]
 80050fc:	f007 f986 	bl	800c40c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	091b      	lsrs	r3, r3, #4
 8005108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800510c:	441a      	add	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800511e:	441a      	add	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
 8005124:	e016      	b.n	8005154 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	0c5b      	lsrs	r3, r3, #17
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	2b06      	cmp	r3, #6
 8005130:	d110      	bne.n	8005154 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005138:	2208      	movs	r2, #8
 800513a:	4619      	mov	r1, r3
 800513c:	6a38      	ldr	r0, [r7, #32]
 800513e:	f007 f965 	bl	800c40c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800514e:	441a      	add	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0210 	orr.w	r2, r2, #16
 8005162:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f007 fae3 	bl	800c734 <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005174:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005178:	f040 80a7 	bne.w	80052ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f007 fae8 	bl	800c75a <USB_ReadDevAllOutEpInterrupt>
 800518a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800518c:	e099      	b.n	80052c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 808e 	beq.w	80052b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	4611      	mov	r1, r2
 80051a4:	4618      	mov	r0, r3
 80051a6:	f007 fb0c 	bl	800c7c2 <USB_ReadDevOutEPInterrupt>
 80051aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00c      	beq.n	80051d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	461a      	mov	r2, r3
 80051c4:	2301      	movs	r3, #1
 80051c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80051c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fec2 	bl	8005f54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	2308      	movs	r3, #8
 80051ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 ff98 	bl	8006124 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	2310      	movs	r3, #16
 800520e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d030      	beq.n	800527c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d109      	bne.n	800523a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005238:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	3304      	adds	r3, #4
 800524e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	78db      	ldrb	r3, [r3, #3]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d108      	bne.n	800526a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2200      	movs	r2, #0
 800525c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f00b fdd9 	bl	8010e1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2302      	movs	r3, #2
 800527a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	461a      	mov	r2, r3
 8005294:	2320      	movs	r3, #32
 8005296:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	461a      	mov	r2, r3
 80052b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	3301      	adds	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f af62 	bne.w	800518e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f007 fa30 	bl	800c734 <USB_ReadInterrupts>
 80052d4:	4603      	mov	r3, r0
 80052d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052de:	f040 80db 	bne.w	8005498 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f007 fa51 	bl	800c78e <USB_ReadDevAllInEpInterrupt>
 80052ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80052f2:	e0cd      	b.n	8005490 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80c2 	beq.w	8005484 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	4611      	mov	r1, r2
 800530a:	4618      	mov	r0, r3
 800530c:	f007 fa77 	bl	800c7fe <USB_ReadDevInEPInterrupt>
 8005310:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d057      	beq.n	80053cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2201      	movs	r2, #1
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	43db      	mvns	r3, r3
 8005336:	69f9      	ldr	r1, [r7, #28]
 8005338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533c:	4013      	ands	r3, r2
 800533e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	2301      	movs	r3, #1
 8005350:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d132      	bne.n	80053c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	4613      	mov	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	334c      	adds	r3, #76	; 0x4c
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4403      	add	r3, r0
 800537a:	3348      	adds	r3, #72	; 0x48
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4419      	add	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4403      	add	r3, r0
 800538e:	334c      	adds	r3, #76	; 0x4c
 8005390:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	2b00      	cmp	r3, #0
 8005396:	d113      	bne.n	80053c0 <HAL_PCD_IRQHandler+0x3a2>
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	3354      	adds	r3, #84	; 0x54
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d108      	bne.n	80053c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053b8:	461a      	mov	r2, r3
 80053ba:	2101      	movs	r1, #1
 80053bc:	f007 fa7e 	bl	800c8bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f00b fcad 	bl	8010d26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2308      	movs	r3, #8
 80053e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	461a      	mov	r2, r3
 8005400:	2310      	movs	r3, #16
 8005402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	461a      	mov	r2, r3
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d023      	beq.n	8005472 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800542a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800542c:	6a38      	ldr	r0, [r7, #32]
 800542e:	f006 f95f 	bl	800b6f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	3338      	adds	r3, #56	; 0x38
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d108      	bne.n	8005460 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2200      	movs	r2, #0
 8005452:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f00b fcf0 	bl	8010e40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	2302      	movs	r3, #2
 8005470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800547c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fcdb 	bl	8005e3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	f47f af2e 	bne.w	80052f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f007 f949 	bl	800c734 <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ac:	d122      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054bc:	f023 0301 	bic.w	r3, r3, #1
 80054c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d108      	bne.n	80054de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054d4:	2100      	movs	r1, #0
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fec2 	bl	8006260 <HAL_PCDEx_LPM_Callback>
 80054dc:	e002      	b.n	80054e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f00b fc8e 	bl	8010e00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f007 f91b 	bl	800c734 <USB_ReadInterrupts>
 80054fe:	4603      	mov	r3, r0
 8005500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005508:	d112      	bne.n	8005530 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d102      	bne.n	8005520 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f00b fc4a 	bl	8010db4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800552e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f007 f8fd 	bl	800c734 <USB_ReadInterrupts>
 800553a:	4603      	mov	r3, r0
 800553c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	f040 80b7 	bne.w	80056b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2110      	movs	r1, #16
 8005562:	4618      	mov	r0, r3
 8005564:	f006 f8c4 	bl	800b6f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556c:	e046      	b.n	80055fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	461a      	mov	r2, r3
 800557c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005580:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	461a      	mov	r2, r3
 80055b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	3301      	adds	r3, #1
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005602:	429a      	cmp	r2, r3
 8005604:	d3b3      	bcc.n	800556e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005614:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005618:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005632:	f043 030b 	orr.w	r3, r3, #11
 8005636:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005648:	f043 030b 	orr.w	r3, r3, #11
 800564c:	6453      	str	r3, [r2, #68]	; 0x44
 800564e:	e015      	b.n	800567c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800565e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005662:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005666:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005676:	f043 030b 	orr.w	r3, r3, #11
 800567a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800568e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80056a0:	461a      	mov	r2, r3
 80056a2:	f007 f90b 	bl	800c8bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 f83a 	bl	800c734 <USB_ReadInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ca:	d124      	bne.n	8005716 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f007 f8d0 	bl	800c876 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f006 f885 	bl	800b7ea <USB_GetDevSpeed>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681c      	ldr	r4, [r3, #0]
 80056ec:	f001 f9e8 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	4620      	mov	r0, r4
 80056fc:	f005 fd84 	bl	800b208 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f00b fb38 	bl	8010d76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005714:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f007 f80a 	bl	800c734 <USB_ReadInterrupts>
 8005720:	4603      	mov	r3, r0
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b08      	cmp	r3, #8
 8005728:	d10a      	bne.n	8005740 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f00b fb15 	bl	8010d5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f002 0208 	and.w	r2, r2, #8
 800573e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f006 fff5 	bl	800c734 <USB_ReadInterrupts>
 800574a:	4603      	mov	r3, r0
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d122      	bne.n	800579a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
 8005764:	e014      	b.n	8005790 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d105      	bne.n	800578a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	b2db      	uxtb	r3, r3
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb27 	bl	8005dd8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	3301      	adds	r3, #1
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005796:	429a      	cmp	r2, r3
 8005798:	d3e5      	bcc.n	8005766 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f006 ffc8 	bl	800c734 <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ae:	d13b      	bne.n	8005828 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057b0:	2301      	movs	r3, #1
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
 80057b4:	e02b      	b.n	800580e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3340      	adds	r3, #64	; 0x40
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d115      	bne.n	8005808 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da12      	bge.n	8005808 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	333f      	adds	r3, #63	; 0x3f
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fae8 	bl	8005dd8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3301      	adds	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	429a      	cmp	r2, r3
 8005816:	d3ce      	bcc.n	80057b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f006 ff81 	bl	800c734 <USB_ReadInterrupts>
 8005832:	4603      	mov	r3, r0
 8005834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583c:	d155      	bne.n	80058ea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
 8005842:	e045      	b.n	80058d0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d12e      	bne.n	80058ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800586c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800586e:	2b00      	cmp	r3, #0
 8005870:	da2b      	bge.n	80058ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800587e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005882:	429a      	cmp	r2, r3
 8005884:	d121      	bne.n	80058ca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058c6:	6053      	str	r3, [r2, #4]
            break;
 80058c8:	e007      	b.n	80058da <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3b4      	bcc.n	8005844 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80058e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f006 ff20 	bl	800c734 <USB_ReadInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fe:	d10a      	bne.n	8005916 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f00b faaf 	bl	8010e64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f006 ff0a 	bl	800c734 <USB_ReadInterrupts>
 8005920:	4603      	mov	r3, r0
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b04      	cmp	r3, #4
 8005928:	d115      	bne.n	8005956 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f00b fa9f 	bl	8010e80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e000      	b.n	8005956 <HAL_PCD_IRQHandler+0x938>
      return;
 8005954:	bf00      	nop
    }
  }
}
 8005956:	3734      	adds	r7, #52	; 0x34
 8005958:	46bd      	mov	sp, r7
 800595a:	bd90      	pop	{r4, r7, pc}

0800595c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_PCD_SetAddress+0x1a>
 8005972:	2302      	movs	r3, #2
 8005974:	e013      	b.n	800599e <HAL_PCD_SetAddress+0x42>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f006 fe68 	bl	800c664 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	4608      	mov	r0, r1
 80059b0:	4611      	mov	r1, r2
 80059b2:	461a      	mov	r2, r3
 80059b4:	4603      	mov	r3, r0
 80059b6:	70fb      	strb	r3, [r7, #3]
 80059b8:	460b      	mov	r3, r1
 80059ba:	803b      	strh	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	da0f      	bge.n	80059ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	f003 020f 	and.w	r2, r3, #15
 80059d2:	4613      	mov	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	3338      	adds	r3, #56	; 0x38
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4413      	add	r3, r2
 80059e0:	3304      	adds	r3, #4
 80059e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	705a      	strb	r2, [r3, #1]
 80059ea:	e00f      	b.n	8005a0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	f003 020f 	and.w	r2, r3, #15
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	3304      	adds	r3, #4
 8005a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a18:	883a      	ldrh	r2, [r7, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	78ba      	ldrb	r2, [r7, #2]
 8005a22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a36:	78bb      	ldrb	r3, [r7, #2]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d102      	bne.n	8005a42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_PCD_EP_Open+0xaa>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e00e      	b.n	8005a6e <HAL_PCD_EP_Open+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68f9      	ldr	r1, [r7, #12]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f005 fee8 	bl	800b834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da0f      	bge.n	8005aaa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	3338      	adds	r3, #56	; 0x38
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	705a      	strb	r2, [r3, #1]
 8005aa8:	e00f      	b.n	8005aca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4413      	add	r3, r2
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_PCD_EP_Close+0x6e>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e00e      	b.n	8005b02 <HAL_PCD_EP_Close+0x8c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68f9      	ldr	r1, [r7, #12]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f005 ff26 	bl	800b944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	460b      	mov	r3, r1
 8005b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	f006 fa05 	bl	800bf8c <USB_EP0StartXfer>
 8005b82:	e008      	b.n	8005b96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	f005 ffb3 	bl	800bafc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	f003 020f 	and.w	r2, r3, #15
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005bc2:	681b      	ldr	r3, [r3, #0]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	3338      	adds	r3, #56	; 0x38
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c2a:	7afb      	ldrb	r3, [r7, #11]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	f006 f9a3 	bl	800bf8c <USB_EP0StartXfer>
 8005c46:	e008      	b.n	8005c5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	6979      	ldr	r1, [r7, #20]
 8005c56:	f005 ff51 	bl	800bafc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	f003 020f 	and.w	r2, r3, #15
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d901      	bls.n	8005c82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e050      	b.n	8005d24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	da0f      	bge.n	8005caa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	3338      	adds	r3, #56	; 0x38
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	705a      	strb	r2, [r3, #1]
 8005ca8:	e00d      	b.n	8005cc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <HAL_PCD_EP_SetStall+0x82>
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	e01e      	b.n	8005d24 <HAL_PCD_EP_SetStall+0xc0>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f006 fbe1 	bl	800c4bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	b2d9      	uxtb	r1, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d14:	461a      	mov	r2, r3
 8005d16:	f006 fdd1 	bl	800c8bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d901      	bls.n	8005d4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e042      	b.n	8005dd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da0f      	bge.n	8005d72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	3338      	adds	r3, #56	; 0x38
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	3304      	adds	r3, #4
 8005d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	705a      	strb	r2, [r3, #1]
 8005d70:	e00f      	b.n	8005d92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	3304      	adds	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_PCD_EP_ClrStall+0x86>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e00e      	b.n	8005dd0 <HAL_PCD_EP_ClrStall+0xa4>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f006 fbe9 	bl	800c598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da0c      	bge.n	8005e06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	f003 020f 	and.w	r2, r3, #15
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	3338      	adds	r3, #56	; 0x38
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	3304      	adds	r3, #4
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e00c      	b.n	8005e20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68f9      	ldr	r1, [r7, #12]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f006 fa08 	bl	800c23c <USB_EPStopXfer>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b08a      	sub	sp, #40	; 0x28
 8005e3e:	af02      	add	r7, sp, #8
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3338      	adds	r3, #56	; 0x38
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3304      	adds	r3, #4
 8005e60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d901      	bls.n	8005e72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e06c      	b.n	8005f4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d902      	bls.n	8005e8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3303      	adds	r3, #3
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e96:	e02b      	b.n	8005ef0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d902      	bls.n	8005eb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3303      	adds	r3, #3
 8005eb8:	089b      	lsrs	r3, r3, #2
 8005eba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6919      	ldr	r1, [r3, #16]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	6978      	ldr	r0, [r7, #20]
 8005ed4:	f006 fa5c 	bl	800c390 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d809      	bhi.n	8005f1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1a      	ldr	r2, [r3, #32]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d203      	bcs.n	8005f1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1be      	bne.n	8005e98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d811      	bhi.n	8005f4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	6939      	ldr	r1, [r7, #16]
 8005f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f46:	4013      	ands	r3, r2
 8005f48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	333c      	adds	r3, #60	; 0x3c
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d17b      	bne.n	8006082 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d015      	beq.n	8005fc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	4a61      	ldr	r2, [pc, #388]	; (800611c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	f240 80b9 	bls.w	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80b3 	beq.w	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fbc:	6093      	str	r3, [r2, #8]
 8005fbe:	e0a7      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2320      	movs	r3, #32
 8005fda:	6093      	str	r3, [r2, #8]
 8005fdc:	e098      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 8093 	bne.w	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4a4b      	ldr	r2, [pc, #300]	; (800611c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d90f      	bls.n	8006012 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	e07e      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	3304      	adds	r3, #4
 8006026:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	0159      	lsls	r1, r3, #5
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	440b      	add	r3, r1
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d114      	bne.n	8006074 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800605c:	461a      	mov	r2, r3
 800605e:	2101      	movs	r1, #1
 8006060:	f006 fc2c 	bl	800c8bc <USB_EP0_OutStart>
 8006064:	e006      	b.n	8006074 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f00a fe38 	bl	8010cf0 <HAL_PCD_DataOutStageCallback>
 8006080:	e046      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d124      	bne.n	80060d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	6093      	str	r3, [r2, #8]
 80060a8:	e032      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f003 0320 	and.w	r3, r3, #32
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	461a      	mov	r2, r3
 80060c2:	2320      	movs	r3, #32
 80060c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f00a fe0f 	bl	8010cf0 <HAL_PCD_DataOutStageCallback>
 80060d2:	e01d      	b.n	8006110 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d114      	bne.n	8006104 <PCD_EP_OutXfrComplete_int+0x1b0>
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d108      	bne.n	8006104 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060fc:	461a      	mov	r2, r3
 80060fe:	2100      	movs	r1, #0
 8006100:	f006 fbdc 	bl	800c8bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f00a fdf0 	bl	8010cf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	4f54300a 	.word	0x4f54300a
 8006120:	4f54310a 	.word	0x4f54310a

08006124 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	333c      	adds	r3, #60	; 0x3c
 800613c:	3304      	adds	r3, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4a15      	ldr	r2, [pc, #84]	; (80061ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d90e      	bls.n	8006178 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	461a      	mov	r2, r3
 8006172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006176:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f00a fda7 	bl	8010ccc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d90c      	bls.n	80061a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d108      	bne.n	80061a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006198:	461a      	mov	r2, r3
 800619a:	2101      	movs	r1, #1
 800619c:	f006 fb8e 	bl	800c8bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	4f54300a 	.word	0x4f54300a

080061b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
 80061bc:	4613      	mov	r3, r2
 80061be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d107      	bne.n	80061de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061ce:	883b      	ldrh	r3, [r7, #0]
 80061d0:	0419      	lsls	r1, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	430a      	orrs	r2, r1
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
 80061dc:	e028      	b.n	8006230 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	4413      	add	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]
 80061f0:	e00d      	b.n	800620e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	3340      	adds	r3, #64	; 0x40
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4413      	add	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	3301      	adds	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
 800620e:	7bfa      	ldrb	r2, [r7, #15]
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	3b01      	subs	r3, #1
 8006214:	429a      	cmp	r2, r3
 8006216:	d3ec      	bcc.n	80061f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006218:	883b      	ldrh	r3, [r7, #0]
 800621a:	0418      	lsls	r0, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	3b01      	subs	r3, #1
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4302      	orrs	r2, r0
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e267      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d075      	beq.n	8006382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006296:	4b88      	ldr	r3, [pc, #544]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00c      	beq.n	80062bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a2:	4b85      	ldr	r3, [pc, #532]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d112      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ae:	4b82      	ldr	r3, [pc, #520]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ba:	d10b      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	4b7e      	ldr	r3, [pc, #504]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05b      	beq.n	8006380 <HAL_RCC_OscConfig+0x108>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d157      	bne.n	8006380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e242      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x74>
 80062de:	4b76      	ldr	r3, [pc, #472]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a75      	ldr	r2, [pc, #468]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e01d      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062f4:	d10c      	bne.n	8006310 <HAL_RCC_OscConfig+0x98>
 80062f6:	4b70      	ldr	r3, [pc, #448]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6f      	ldr	r2, [pc, #444]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80062fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4b6d      	ldr	r3, [pc, #436]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6c      	ldr	r2, [pc, #432]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e00b      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 8006310:	4b69      	ldr	r3, [pc, #420]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a68      	ldr	r2, [pc, #416]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4b66      	ldr	r3, [pc, #408]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a65      	ldr	r2, [pc, #404]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d013      	beq.n	8006358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fb fdc8 	bl	8001ec4 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006338:	f7fb fdc4 	bl	8001ec4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	; 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e207      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0xc0>
 8006356:	e014      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fb fdb4 	bl	8001ec4 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006360:	f7fb fdb0 	bl	8001ec4 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	; 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e1f3      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006372:	4b51      	ldr	r3, [pc, #324]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0xe8>
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d063      	beq.n	8006456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800638e:	4b4a      	ldr	r3, [pc, #296]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639a:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063a2:	2b08      	cmp	r3, #8
 80063a4:	d11c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063a6:	4b44      	ldr	r3, [pc, #272]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b2:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_RCC_OscConfig+0x152>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d001      	beq.n	80063ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e1c7      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4937      	ldr	r1, [pc, #220]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063de:	e03a      	b.n	8006456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d020      	beq.n	800642a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063e8:	4b34      	ldr	r3, [pc, #208]	; (80064bc <HAL_RCC_OscConfig+0x244>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fd69 	bl	8001ec4 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063f6:	f7fb fd65 	bl	8001ec4 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e1a8      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006408:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006414:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4925      	ldr	r1, [pc, #148]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	e015      	b.n	8006456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <HAL_RCC_OscConfig+0x244>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fb fd48 	bl	8001ec4 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006438:	f7fb fd44 	bl	8001ec4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e187      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d036      	beq.n	80064d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d016      	beq.n	8006498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800646a:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <HAL_RCC_OscConfig+0x248>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fb fd28 	bl	8001ec4 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006478:	f7fb fd24 	bl	8001ec4 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e167      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_OscConfig+0x240>)
 800648c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x200>
 8006496:	e01b      	b.n	80064d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_OscConfig+0x248>)
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800649e:	f7fb fd11 	bl	8001ec4 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	e00e      	b.n	80064c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fb fd0d 	bl	8001ec4 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d907      	bls.n	80064c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e150      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
 80064b8:	40023800 	.word	0x40023800
 80064bc:	42470000 	.word	0x42470000
 80064c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ea      	bne.n	80064a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8097 	beq.w	800660c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e2:	4b81      	ldr	r3, [pc, #516]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	4b7d      	ldr	r3, [pc, #500]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	4a7c      	ldr	r2, [pc, #496]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	; 0x40
 80064fe:	4b7a      	ldr	r3, [pc, #488]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650e:	4b77      	ldr	r3, [pc, #476]	; (80066ec <HAL_RCC_OscConfig+0x474>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d118      	bne.n	800654c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800651a:	4b74      	ldr	r3, [pc, #464]	; (80066ec <HAL_RCC_OscConfig+0x474>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a73      	ldr	r2, [pc, #460]	; (80066ec <HAL_RCC_OscConfig+0x474>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006526:	f7fb fccd 	bl	8001ec4 <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fb fcc9 	bl	8001ec4 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e10c      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006540:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <HAL_RCC_OscConfig+0x474>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d106      	bne.n	8006562 <HAL_RCC_OscConfig+0x2ea>
 8006554:	4b64      	ldr	r3, [pc, #400]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	4a63      	ldr	r2, [pc, #396]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6713      	str	r3, [r2, #112]	; 0x70
 8006560:	e01c      	b.n	800659c <HAL_RCC_OscConfig+0x324>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b05      	cmp	r3, #5
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x30c>
 800656a:	4b5f      	ldr	r3, [pc, #380]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a5e      	ldr	r2, [pc, #376]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006570:	f043 0304 	orr.w	r3, r3, #4
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
 8006576:	4b5c      	ldr	r3, [pc, #368]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	4a5b      	ldr	r2, [pc, #364]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6713      	str	r3, [r2, #112]	; 0x70
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0x324>
 8006584:	4b58      	ldr	r3, [pc, #352]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	4a57      	ldr	r2, [pc, #348]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6713      	str	r3, [r2, #112]	; 0x70
 8006590:	4b55      	ldr	r3, [pc, #340]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	4a54      	ldr	r2, [pc, #336]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006596:	f023 0304 	bic.w	r3, r3, #4
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fb fc8e 	bl	8001ec4 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ac:	f7fb fc8a 	bl	8001ec4 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0cb      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c2:	4b49      	ldr	r3, [pc, #292]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0ee      	beq.n	80065ac <HAL_RCC_OscConfig+0x334>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d0:	f7fb fc78 	bl	8001ec4 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d8:	f7fb fc74 	bl	8001ec4 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e0b5      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ee:	4b3e      	ldr	r3, [pc, #248]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1ee      	bne.n	80065d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006600:	4b39      	ldr	r3, [pc, #228]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	4a38      	ldr	r2, [pc, #224]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80a1 	beq.w	8006758 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006616:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 030c 	and.w	r3, r3, #12
 800661e:	2b08      	cmp	r3, #8
 8006620:	d05c      	beq.n	80066dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d141      	bne.n	80066ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <HAL_RCC_OscConfig+0x478>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006630:	f7fb fc48 	bl	8001ec4 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006638:	f7fb fc44 	bl	8001ec4 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e087      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	491b      	ldr	r1, [pc, #108]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <HAL_RCC_OscConfig+0x478>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006686:	f7fb fc1d 	bl	8001ec4 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668e:	f7fb fc19 	bl	8001ec4 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e05c      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x416>
 80066ac:	e054      	b.n	8006758 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <HAL_RCC_OscConfig+0x478>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b4:	f7fb fc06 	bl	8001ec4 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fb fc02 	bl	8001ec4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e045      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x444>
 80066da:	e03d      	b.n	8006758 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e038      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
 80066e8:	40023800 	.word	0x40023800
 80066ec:	40007000 	.word	0x40007000
 80066f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <HAL_RCC_OscConfig+0x4ec>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d028      	beq.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d121      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d11a      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006724:	4013      	ands	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800672a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800672c:	4293      	cmp	r3, r2
 800672e:	d111      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	3b01      	subs	r3, #1
 800673e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d107      	bne.n	8006754 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800

08006768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0cc      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800677c:	4b68      	ldr	r3, [pc, #416]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d90c      	bls.n	80067a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678a:	4b65      	ldr	r3, [pc, #404]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b63      	ldr	r3, [pc, #396]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0b8      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d020      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067bc:	4b59      	ldr	r3, [pc, #356]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4a58      	ldr	r2, [pc, #352]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067d4:	4b53      	ldr	r3, [pc, #332]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4a52      	ldr	r2, [pc, #328]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e0:	4b50      	ldr	r3, [pc, #320]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	494d      	ldr	r1, [pc, #308]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d044      	beq.n	8006888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d107      	bne.n	8006816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006806:	4b47      	ldr	r3, [pc, #284]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d119      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e07f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d003      	beq.n	8006826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006822:	2b03      	cmp	r3, #3
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006826:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e06f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006836:	4b3b      	ldr	r3, [pc, #236]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e067      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006846:	4b37      	ldr	r3, [pc, #220]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f023 0203 	bic.w	r2, r3, #3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4934      	ldr	r1, [pc, #208]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	4313      	orrs	r3, r2
 8006856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006858:	f7fb fb34 	bl	8001ec4 <HAL_GetTick>
 800685c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685e:	e00a      	b.n	8006876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006860:	f7fb fb30 	bl	8001ec4 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	f241 3288 	movw	r2, #5000	; 0x1388
 800686e:	4293      	cmp	r3, r2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e04f      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006876:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 020c 	and.w	r2, r3, #12
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	429a      	cmp	r2, r3
 8006886:	d1eb      	bne.n	8006860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006888:	4b25      	ldr	r3, [pc, #148]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d20c      	bcs.n	80068b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006896:	4b22      	ldr	r3, [pc, #136]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689e:	4b20      	ldr	r3, [pc, #128]	; (8006920 <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d001      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e032      	b.n	8006916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068bc:	4b19      	ldr	r3, [pc, #100]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4916      	ldr	r1, [pc, #88]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068da:	4b12      	ldr	r3, [pc, #72]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	490e      	ldr	r1, [pc, #56]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ee:	f000 f821 	bl	8006934 <HAL_RCC_GetSysClockFreq>
 80068f2:	4602      	mov	r2, r0
 80068f4:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	490a      	ldr	r1, [pc, #40]	; (8006928 <HAL_RCC_ClockConfig+0x1c0>)
 8006900:	5ccb      	ldrb	r3, [r1, r3]
 8006902:	fa22 f303 	lsr.w	r3, r2, r3
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7fa fa6a 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40023c00 	.word	0x40023c00
 8006924:	40023800 	.word	0x40023800
 8006928:	08013318 	.word	0x08013318
 800692c:	20000000 	.word	0x20000000
 8006930:	20000004 	.word	0x20000004

08006934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006938:	b090      	sub	sp, #64	; 0x40
 800693a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	637b      	str	r3, [r7, #52]	; 0x34
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006944:	2300      	movs	r3, #0
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800694c:	4b59      	ldr	r3, [pc, #356]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b08      	cmp	r3, #8
 8006956:	d00d      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x40>
 8006958:	2b08      	cmp	r3, #8
 800695a:	f200 80a1 	bhi.w	8006aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x34>
 8006962:	2b04      	cmp	r3, #4
 8006964:	d003      	beq.n	800696e <HAL_RCC_GetSysClockFreq+0x3a>
 8006966:	e09b      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006968:	4b53      	ldr	r3, [pc, #332]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800696a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800696c:	e09b      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800696e:	4b53      	ldr	r3, [pc, #332]	; (8006abc <HAL_RCC_GetSysClockFreq+0x188>)
 8006970:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006972:	e098      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006974:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800697e:	4b4d      	ldr	r3, [pc, #308]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d028      	beq.n	80069dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800698a:	4b4a      	ldr	r3, [pc, #296]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	2200      	movs	r2, #0
 8006992:	623b      	str	r3, [r7, #32]
 8006994:	627a      	str	r2, [r7, #36]	; 0x24
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800699c:	2100      	movs	r1, #0
 800699e:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCC_GetSysClockFreq+0x188>)
 80069a0:	fb03 f201 	mul.w	r2, r3, r1
 80069a4:	2300      	movs	r3, #0
 80069a6:	fb00 f303 	mul.w	r3, r0, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	4a43      	ldr	r2, [pc, #268]	; (8006abc <HAL_RCC_GetSysClockFreq+0x188>)
 80069ae:	fba0 1202 	umull	r1, r2, r0, r2
 80069b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b4:	460a      	mov	r2, r1
 80069b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80069b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ba:	4413      	add	r3, r2
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	2200      	movs	r2, #0
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	61fa      	str	r2, [r7, #28]
 80069c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80069ce:	f7f9 fc07 	bl	80001e0 <__aeabi_uldivmod>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4613      	mov	r3, r2
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069da:	e053      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	099b      	lsrs	r3, r3, #6
 80069e2:	2200      	movs	r2, #0
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	617a      	str	r2, [r7, #20]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069ee:	f04f 0b00 	mov.w	fp, #0
 80069f2:	4652      	mov	r2, sl
 80069f4:	465b      	mov	r3, fp
 80069f6:	f04f 0000 	mov.w	r0, #0
 80069fa:	f04f 0100 	mov.w	r1, #0
 80069fe:	0159      	lsls	r1, r3, #5
 8006a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a04:	0150      	lsls	r0, r2, #5
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a26:	ebb2 0408 	subs.w	r4, r2, r8
 8006a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	00eb      	lsls	r3, r5, #3
 8006a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3c:	00e2      	lsls	r2, r4, #3
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	eb14 030a 	adds.w	r3, r4, sl
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	eb45 030b 	adc.w	r3, r5, fp
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	028b      	lsls	r3, r1, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a64:	4621      	mov	r1, r4
 8006a66:	028a      	lsls	r2, r1, #10
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	2200      	movs	r2, #0
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	60fa      	str	r2, [r7, #12]
 8006a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a78:	f7f9 fbb2 	bl	80001e0 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3740      	adds	r7, #64	; 0x40
 8006aac:	46bd      	mov	sp, r7
 8006aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	00f42400 	.word	0x00f42400
 8006abc:	017d7840 	.word	0x017d7840

08006ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20000000 	.word	0x20000000

08006ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006adc:	f7ff fff0 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0a9b      	lsrs	r3, r3, #10
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	08013328 	.word	0x08013328

08006b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b04:	f7ff ffdc 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0b5b      	lsrs	r3, r3, #13
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	4903      	ldr	r1, [pc, #12]	; (8006b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40023800 	.word	0x40023800
 8006b24:	08013328 	.word	0x08013328

08006b28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	220f      	movs	r2, #15
 8006b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b38:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <HAL_RCC_GetClockConfig+0x5c>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 0203 	and.w	r2, r3, #3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <HAL_RCC_GetClockConfig+0x5c>)
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b50:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <HAL_RCC_GetClockConfig+0x5c>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b5c:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <HAL_RCC_GetClockConfig+0x5c>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <HAL_RCC_GetClockConfig+0x60>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0207 	and.w	r2, r3, #7
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	601a      	str	r2, [r3, #0]
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800
 8006b88:	40023c00 	.word	0x40023c00

08006b8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d035      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bb4:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bba:	f7fb f983 	bl	8001ec4 <HAL_GetTick>
 8006bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bc2:	f7fb f97f 	bl	8001ec4 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0ba      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bd4:	4b60      	ldr	r3, [pc, #384]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	019a      	lsls	r2, r3, #6
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	071b      	lsls	r3, r3, #28
 8006bec:	495a      	ldr	r1, [pc, #360]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bf4:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfa:	f7fb f963 	bl	8001ec4 <HAL_GetTick>
 8006bfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c00:	e008      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c02:	f7fb f95f 	bl	8001ec4 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e09a      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c14:	4b50      	ldr	r3, [pc, #320]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0f0      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8083 	beq.w	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	4b49      	ldr	r3, [pc, #292]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	4a48      	ldr	r2, [pc, #288]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3e:	4b46      	ldr	r3, [pc, #280]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c4a:	4b44      	ldr	r3, [pc, #272]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a43      	ldr	r2, [pc, #268]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c56:	f7fb f935 	bl	8001ec4 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c5e:	f7fb f931 	bl	8001ec4 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e06c      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c70:	4b3a      	ldr	r3, [pc, #232]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0f0      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c7c:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d02f      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d028      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c9a:	4b2f      	ldr	r3, [pc, #188]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ca4:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006caa:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cb0:	4a29      	ldr	r2, [pc, #164]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cb6:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d114      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cc2:	f7fb f8ff 	bl	8001ec4 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cc8:	e00a      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cca:	f7fb f8fb 	bl	8001ec4 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e034      	b.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0ee      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf8:	d10d      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	4912      	ldr	r1, [pc, #72]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
 8006d14:	e005      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d20:	6093      	str	r3, [r2, #8]
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2e:	490a      	ldr	r1, [pc, #40]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7c1a      	ldrb	r2, [r3, #16]
 8006d44:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d46:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	42470068 	.word	0x42470068
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	42470e40 	.word	0x42470e40
 8006d64:	424711e0 	.word	0x424711e0

08006d68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e066      	b.n	8006e4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7f5b      	ldrb	r3, [r3, #29]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d105      	bne.n	8006d94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7f9 ff54 	bl	8000c3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	22ca      	movs	r2, #202	; 0xca
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2253      	movs	r2, #83	; 0x53
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa45 	bl	800723a <RTC_EnterInitMode>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12c      	bne.n	8006e14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dcc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6899      	ldr	r1, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	68d2      	ldr	r2, [r2, #12]
 8006df4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6919      	ldr	r1, [r3, #16]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	041a      	lsls	r2, r3, #16
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa4c 	bl	80072a8 <RTC_ExitInitMode>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d113      	bne.n	8006e42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	22ff      	movs	r2, #255	; 0xff
 8006e48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	7f1b      	ldrb	r3, [r3, #28]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_RTC_SetTime+0x1c>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e087      	b.n	8006f80 <HAL_RTC_SetTime+0x12c>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d126      	bne.n	8006ed0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fa29 	bl	80072f2 <RTC_ByteToBcd2>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fa22 	bl	80072f2 <RTC_ByteToBcd2>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	789b      	ldrb	r3, [r3, #2]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fa1a 	bl	80072f2 <RTC_ByteToBcd2>
 8006ebe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ec0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	78db      	ldrb	r3, [r3, #3]
 8006ec8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e018      	b.n	8006f02 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006ef0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006ef6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	78db      	ldrb	r3, [r3, #3]
 8006efc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	22ca      	movs	r2, #202	; 0xca
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2253      	movs	r2, #83	; 0x53
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f991 	bl	800723a <RTC_EnterInitMode>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d120      	bne.n	8006f64 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f30:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f9a4 	bl	80072a8 <RTC_ExitInitMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006f64:	7cfb      	ldrb	r3, [r7, #19]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]

  return status;
 8006f7e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd90      	pop	{r4, r7, pc}

08006f88 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	0d9b      	lsrs	r3, r3, #22
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11a      	bne.n	800703a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f000 f98f 	bl	800732c <RTC_Bcd2ToByte>
 800700e:	4603      	mov	r3, r0
 8007010:	461a      	mov	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f986 	bl	800732c <RTC_Bcd2ToByte>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	789b      	ldrb	r3, [r3, #2]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f97d 	bl	800732c <RTC_Bcd2ToByte>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	7f1b      	ldrb	r3, [r3, #28]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_RTC_SetDate+0x1c>
 800705c:	2302      	movs	r3, #2
 800705e:	e071      	b.n	8007144 <HAL_RTC_SetDate+0x100>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2202      	movs	r2, #2
 800706a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10e      	bne.n	8007090 <HAL_RTC_SetDate+0x4c>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	785b      	ldrb	r3, [r3, #1]
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	b2db      	uxtb	r3, r3
 8007088:	330a      	adds	r3, #10
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11c      	bne.n	80070d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	78db      	ldrb	r3, [r3, #3]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f929 	bl	80072f2 <RTC_ByteToBcd2>
 80070a0:	4603      	mov	r3, r0
 80070a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 f922 	bl	80072f2 <RTC_ByteToBcd2>
 80070ae:	4603      	mov	r3, r0
 80070b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80070b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	789b      	ldrb	r3, [r3, #2]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f91a 	bl	80072f2 <RTC_ByteToBcd2>
 80070be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80070c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e00e      	b.n	80070ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	78db      	ldrb	r3, [r3, #3]
 80070d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80070e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	22ca      	movs	r2, #202	; 0xca
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2253      	movs	r2, #83	; 0x53
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f89b 	bl	800723a <RTC_EnterInitMode>
 8007104:	4603      	mov	r3, r0
 8007106:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007108:	7cfb      	ldrb	r3, [r7, #19]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800711c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f8c2 	bl	80072a8 <RTC_ExitInitMode>
 8007124:	4603      	mov	r3, r0
 8007126:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007128:	7cfb      	ldrb	r3, [r7, #19]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	771a      	strb	r2, [r3, #28]

  return status;
 8007142:	7cfb      	ldrb	r3, [r7, #19]
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}

0800714c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007166:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800716a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	b2da      	uxtb	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	0b5b      	lsrs	r3, r3, #13
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d11a      	bne.n	80071e0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f8bc 	bl	800732c <RTC_Bcd2ToByte>
 80071b4:	4603      	mov	r3, r0
 80071b6:	461a      	mov	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	785b      	ldrb	r3, [r3, #1]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 f8b3 	bl	800732c <RTC_Bcd2ToByte>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	789b      	ldrb	r3, [r3, #2]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f8aa 	bl	800732c <RTC_Bcd2ToByte>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007204:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007206:	f7fa fe5d 	bl	8001ec4 <HAL_GetTick>
 800720a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800720c:	e009      	b.n	8007222 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800720e:	f7fa fe59 	bl	8001ec4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800721c:	d901      	bls.n	8007222 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e007      	b.n	8007232 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0ee      	beq.n	800720e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d122      	bne.n	800729e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007266:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007268:	f7fa fe2c 	bl	8001ec4 <HAL_GetTick>
 800726c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800726e:	e00c      	b.n	800728a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007270:	f7fa fe28 	bl	8001ec4 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800727e:	d904      	bls.n	800728a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2204      	movs	r2, #4
 8007284:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <RTC_EnterInitMode+0x64>
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d1e8      	bne.n	8007270 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff ff89 	bl	80071ea <HAL_RTC_WaitForSynchro>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2204      	movs	r2, #4
 80072e2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	4603      	mov	r3, r0
 80072fa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007300:	e005      	b.n	800730e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	3301      	adds	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	3b0a      	subs	r3, #10
 800730c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b09      	cmp	r3, #9
 8007312:	d8f6      	bhi.n	8007302 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	b2da      	uxtb	r2, r3
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4313      	orrs	r3, r2
 800731e:	b2db      	uxtb	r3, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	4413      	add	r3, r2
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	b2da      	uxtb	r2, r3
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	4413      	add	r3, r2
 8007356:	b2db      	uxtb	r3, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3350      	adds	r3, #80	; 0x50
 800737a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e07b      	b.n	80074a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d108      	bne.n	80073c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ba:	d009      	beq.n	80073d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	61da      	str	r2, [r3, #28]
 80073c2:	e005      	b.n	80073d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7f9 fc88 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007406:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1b      	ldr	r3, [r3, #32]
 8007450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007454:	ea42 0103 	orr.w	r1, r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	f003 0104 	and.w	r1, r3, #4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f003 0210 	and.w	r2, r3, #16
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b088      	sub	sp, #32
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_SPI_Transmit+0x22>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e126      	b.n	800771a <HAL_SPI_Transmit+0x270>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074d4:	f7fa fcf6 	bl	8001ec4 <HAL_GetTick>
 80074d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d002      	beq.n	80074f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
 80074ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074ee:	e10b      	b.n	8007708 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Transmit+0x52>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007500:	e102      	b.n	8007708 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007548:	d10f      	bne.n	800756a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d007      	beq.n	8007588 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007590:	d14b      	bne.n	800762a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SPI_Transmit+0xf6>
 800759a:	8afb      	ldrh	r3, [r7, #22]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d13e      	bne.n	800761e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075c4:	e02b      	b.n	800761e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d112      	bne.n	80075fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80075f8:	e011      	b.n	800761e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fa:	f7fa fc63 	bl	8001ec4 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d803      	bhi.n	8007612 <HAL_SPI_Transmit+0x168>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007610:	d102      	bne.n	8007618 <HAL_SPI_Transmit+0x16e>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800761c:	e074      	b.n	8007708 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ce      	bne.n	80075c6 <HAL_SPI_Transmit+0x11c>
 8007628:	e04c      	b.n	80076c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_SPI_Transmit+0x18e>
 8007632:	8afb      	ldrh	r3, [r7, #22]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d140      	bne.n	80076ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800765e:	e02c      	b.n	80076ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d113      	bne.n	8007696 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	330c      	adds	r3, #12
 8007678:	7812      	ldrb	r2, [r2, #0]
 800767a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	86da      	strh	r2, [r3, #54]	; 0x36
 8007694:	e011      	b.n	80076ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007696:	f7fa fc15 	bl	8001ec4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d803      	bhi.n	80076ae <HAL_SPI_Transmit+0x204>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d102      	bne.n	80076b4 <HAL_SPI_Transmit+0x20a>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076b8:	e026      	b.n	8007708 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1cd      	bne.n	8007660 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fbcb 	bl	8007e64 <SPI_EndRxTxTransaction>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10a      	bne.n	80076f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	e000      	b.n	8007708 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007706:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007718:	7ffb      	ldrb	r3, [r7, #31]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af02      	add	r7, sp, #8
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773e:	d112      	bne.n	8007766 <HAL_SPI_Receive+0x44>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10e      	bne.n	8007766 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2204      	movs	r2, #4
 800774c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	4613      	mov	r3, r2
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f8f1 	bl	8007944 <HAL_SPI_TransmitReceive>
 8007762:	4603      	mov	r3, r0
 8007764:	e0ea      	b.n	800793c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_SPI_Receive+0x52>
 8007770:	2302      	movs	r3, #2
 8007772:	e0e3      	b.n	800793c <HAL_SPI_Receive+0x21a>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800777c:	f7fa fba2 	bl	8001ec4 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b01      	cmp	r3, #1
 800778c:	d002      	beq.n	8007794 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800778e:	2302      	movs	r3, #2
 8007790:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007792:	e0ca      	b.n	800792a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SPI_Receive+0x7e>
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077a4:	e0c1      	b.n	800792a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	88fa      	ldrh	r2, [r7, #6]
 80077be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ec:	d10f      	bne.n	800780e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800780c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d007      	beq.n	800782c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800782a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d162      	bne.n	80078fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007834:	e02e      	b.n	8007894 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d115      	bne.n	8007870 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f103 020c 	add.w	r2, r3, #12
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800786e:	e011      	b.n	8007894 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007870:	f7fa fb28 	bl	8001ec4 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d803      	bhi.n	8007888 <HAL_SPI_Receive+0x166>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d102      	bne.n	800788e <HAL_SPI_Receive+0x16c>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007892:	e04a      	b.n	800792a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1cb      	bne.n	8007836 <HAL_SPI_Receive+0x114>
 800789e:	e031      	b.n	8007904 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d113      	bne.n	80078d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	b292      	uxth	r2, r2
 80078ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	1c9a      	adds	r2, r3, #2
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078d4:	e011      	b.n	80078fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d6:	f7fa faf5 	bl	8001ec4 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d803      	bhi.n	80078ee <HAL_SPI_Receive+0x1cc>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d102      	bne.n	80078f4 <HAL_SPI_Receive+0x1d2>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078f8:	e017      	b.n	800792a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1cd      	bne.n	80078a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fa45 	bl	8007d98 <SPI_EndRxTransaction>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
 8007926:	e000      	b.n	800792a <HAL_SPI_Receive+0x208>
  }

error :
 8007928:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08c      	sub	sp, #48	; 0x30
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007952:	2301      	movs	r3, #1
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_SPI_TransmitReceive+0x26>
 8007966:	2302      	movs	r3, #2
 8007968:	e18a      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x33c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007972:	f7fa faa7 	bl	8001ec4 <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007988:	887b      	ldrh	r3, [r7, #2]
 800798a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800798c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007990:	2b01      	cmp	r3, #1
 8007992:	d00f      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x70>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799a:	d107      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x68>
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d003      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079b2:	e15b      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x82>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x82>
 80079c0:	887b      	ldrh	r3, [r7, #2]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079cc:	e14e      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2205      	movs	r2, #5
 80079de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	887a      	ldrh	r2, [r7, #2]
 80079f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	887a      	ldrh	r2, [r7, #2]
 80079f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	887a      	ldrh	r2, [r7, #2]
 8007a04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	887a      	ldrh	r2, [r7, #2]
 8007a0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d007      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3e:	d178      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x10a>
 8007a48:	8b7b      	ldrh	r3, [r7, #26]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d166      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	881a      	ldrh	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	1c9a      	adds	r2, r3, #2
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a72:	e053      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d11b      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x176>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d016      	beq.n	8007aba <HAL_SPI_TransmitReceive+0x176>
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d113      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	881a      	ldrh	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	1c9a      	adds	r2, r3, #2
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d119      	bne.n	8007afc <HAL_SPI_TransmitReceive+0x1b8>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d014      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	b292      	uxth	r2, r2
 8007ade:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	1c9a      	adds	r2, r3, #2
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007af8:	2301      	movs	r3, #1
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007afc:	f7fa f9e2 	bl	8001ec4 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d807      	bhi.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d003      	beq.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b1a:	e0a7      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1a6      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x130>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1a1      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x130>
 8007b30:	e07c      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x1fc>
 8007b3a:	8b7b      	ldrh	r3, [r7, #26]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d16b      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b66:	e057      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d11c      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d017      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d114      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	330c      	adds	r3, #12
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d119      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x2ae>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d014      	beq.n	8007bf2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bf2:	f7fa f967 	bl	8001ec4 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d803      	bhi.n	8007c0a <HAL_SPI_TransmitReceive+0x2c6>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d102      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x2cc>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c16:	e029      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1a2      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x224>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d19d      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f917 	bl	8007e64 <SPI_EndRxTxTransaction>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c48:	e010      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	e000      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3730      	adds	r7, #48	; 0x30
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c98:	f7fa f914 	bl	8001ec4 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ca8:	f7fa f90c 	bl	8001ec4 <HAL_GetTick>
 8007cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cae:	4b39      	ldr	r3, [pc, #228]	; (8007d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	015b      	lsls	r3, r3, #5
 8007cb4:	0d1b      	lsrs	r3, r3, #20
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cbe:	e054      	b.n	8007d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d050      	beq.n	8007d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cc8:	f7fa f8fc 	bl	8001ec4 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d902      	bls.n	8007cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d13d      	bne.n	8007d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf6:	d111      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d00:	d004      	beq.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0a:	d107      	bne.n	8007d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d24:	d10f      	bne.n	8007d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e017      	b.n	8007d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d19b      	bne.n	8007cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000000 	.word	0x20000000

08007d98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dac:	d111      	bne.n	8007dd2 <SPI_EndRxTransaction+0x3a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db6:	d004      	beq.n	8007dc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc0:	d107      	bne.n	8007dd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dda:	d12a      	bne.n	8007e32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de4:	d012      	beq.n	8007e0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2180      	movs	r1, #128	; 0x80
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff ff49 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02d      	beq.n	8007e58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	f043 0220 	orr.w	r2, r3, #32
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e026      	b.n	8007e5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2101      	movs	r1, #1
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff ff36 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01a      	beq.n	8007e58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e013      	b.n	8007e5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff ff23 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4c:	f043 0220 	orr.w	r2, r3, #32
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e000      	b.n	8007e5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <SPI_EndRxTxTransaction+0x7c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <SPI_EndRxTxTransaction+0x80>)
 8007e76:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7a:	0d5b      	lsrs	r3, r3, #21
 8007e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e80:	fb02 f303 	mul.w	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e8e:	d112      	bne.n	8007eb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	2180      	movs	r1, #128	; 0x80
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fef4 	bl	8007c88 <SPI_WaitFlagStateUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d016      	beq.n	8007ed4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e00f      	b.n	8007ed6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00a      	beq.n	8007ed2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ecc:	2b80      	cmp	r3, #128	; 0x80
 8007ece:	d0f2      	beq.n	8007eb6 <SPI_EndRxTxTransaction+0x52>
 8007ed0:	e000      	b.n	8007ed4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ed2:	bf00      	nop
  }

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000000 	.word	0x20000000
 8007ee4:	165e9f81 	.word	0x165e9f81

08007ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e041      	b.n	8007f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7f9 fb24 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f001 fa24 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d001      	beq.n	8007fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e044      	b.n	800802a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1e      	ldr	r2, [pc, #120]	; (8008038 <HAL_TIM_Base_Start_IT+0xb0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d018      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d013      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1a      	ldr	r2, [pc, #104]	; (800803c <HAL_TIM_Base_Start_IT+0xb4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a19      	ldr	r2, [pc, #100]	; (8008040 <HAL_TIM_Base_Start_IT+0xb8>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d009      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <HAL_TIM_Base_Start_IT+0xbc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a16      	ldr	r2, [pc, #88]	; (8008048 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d111      	bne.n	8008018 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b06      	cmp	r3, #6
 8008004:	d010      	beq.n	8008028 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0201 	orr.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008016:	e007      	b.n	8008028 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40010000 	.word	0x40010000
 800803c:	40000400 	.word	0x40000400
 8008040:	40000800 	.word	0x40000800
 8008044:	40000c00 	.word	0x40000c00
 8008048:	40014000 	.word	0x40014000

0800804c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e041      	b.n	80080e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f839 	bl	80080ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f001 f972 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
	...

08008100 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	bf0c      	ite	eq
 8008124:	2301      	moveq	r3, #1
 8008126:	2300      	movne	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	e022      	b.n	8008172 <HAL_TIM_PWM_Start_DMA+0x72>
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b04      	cmp	r3, #4
 8008130:	d109      	bne.n	8008146 <HAL_TIM_PWM_Start_DMA+0x46>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	e015      	b.n	8008172 <HAL_TIM_PWM_Start_DMA+0x72>
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b08      	cmp	r3, #8
 800814a:	d109      	bne.n	8008160 <HAL_TIM_PWM_Start_DMA+0x60>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	e008      	b.n	8008172 <HAL_TIM_PWM_Start_DMA+0x72>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	bf0c      	ite	eq
 800816c:	2301      	moveq	r3, #1
 800816e:	2300      	movne	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008176:	2302      	movs	r3, #2
 8008178:	e15d      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d109      	bne.n	8008194 <HAL_TIM_PWM_Start_DMA+0x94>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	e022      	b.n	80081da <HAL_TIM_PWM_Start_DMA+0xda>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b04      	cmp	r3, #4
 8008198:	d109      	bne.n	80081ae <HAL_TIM_PWM_Start_DMA+0xae>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	bf0c      	ite	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	2300      	movne	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	e015      	b.n	80081da <HAL_TIM_PWM_Start_DMA+0xda>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d109      	bne.n	80081c8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b01      	cmp	r3, #1
 80081be:	bf0c      	ite	eq
 80081c0:	2301      	moveq	r3, #1
 80081c2:	2300      	movne	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	e008      	b.n	80081da <HAL_TIM_PWM_Start_DMA+0xda>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	bf0c      	ite	eq
 80081d4:	2301      	moveq	r3, #1
 80081d6:	2300      	movne	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d024      	beq.n	8008228 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_PWM_Start_DMA+0xee>
 80081e4:	887b      	ldrh	r3, [r7, #2]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e123      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start_DMA+0xfe>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081fc:	e016      	b.n	800822c <HAL_TIM_PWM_Start_DMA+0x12c>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d104      	bne.n	800820e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800820c:	e00e      	b.n	800822c <HAL_TIM_PWM_Start_DMA+0x12c>
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d104      	bne.n	800821e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800821c:	e006      	b.n	800822c <HAL_TIM_PWM_Start_DMA+0x12c>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008226:	e001      	b.n	800822c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e104      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b0c      	cmp	r3, #12
 8008230:	f200 80ae 	bhi.w	8008390 <HAL_TIM_PWM_Start_DMA+0x290>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008271 	.word	0x08008271
 8008240:	08008391 	.word	0x08008391
 8008244:	08008391 	.word	0x08008391
 8008248:	08008391 	.word	0x08008391
 800824c:	080082b9 	.word	0x080082b9
 8008250:	08008391 	.word	0x08008391
 8008254:	08008391 	.word	0x08008391
 8008258:	08008391 	.word	0x08008391
 800825c:	08008301 	.word	0x08008301
 8008260:	08008391 	.word	0x08008391
 8008264:	08008391 	.word	0x08008391
 8008268:	08008391 	.word	0x08008391
 800826c:	08008349 	.word	0x08008349
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	4a72      	ldr	r2, [pc, #456]	; (8008440 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008276:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	4a71      	ldr	r2, [pc, #452]	; (8008444 <HAL_TIM_PWM_Start_DMA+0x344>)
 800827e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	4a70      	ldr	r2, [pc, #448]	; (8008448 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008286:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3334      	adds	r3, #52	; 0x34
 8008294:	461a      	mov	r2, r3
 8008296:	887b      	ldrh	r3, [r7, #2]
 8008298:	f7f9 fff0 	bl	800227c <HAL_DMA_Start_IT>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e0c7      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68da      	ldr	r2, [r3, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b4:	60da      	str	r2, [r3, #12]
      break;
 80082b6:	e06e      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	4a60      	ldr	r2, [pc, #384]	; (8008440 <HAL_TIM_PWM_Start_DMA+0x340>)
 80082be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	4a5f      	ldr	r2, [pc, #380]	; (8008444 <HAL_TIM_PWM_Start_DMA+0x344>)
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	4a5e      	ldr	r2, [pc, #376]	; (8008448 <HAL_TIM_PWM_Start_DMA+0x348>)
 80082ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80082d4:	6879      	ldr	r1, [r7, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3338      	adds	r3, #56	; 0x38
 80082dc:	461a      	mov	r2, r3
 80082de:	887b      	ldrh	r3, [r7, #2]
 80082e0:	f7f9 ffcc 	bl	800227c <HAL_DMA_Start_IT>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e0a3      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082fc:	60da      	str	r2, [r3, #12]
      break;
 80082fe:	e04a      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a4e      	ldr	r2, [pc, #312]	; (8008440 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008306:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	4a4d      	ldr	r2, [pc, #308]	; (8008444 <HAL_TIM_PWM_Start_DMA+0x344>)
 800830e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4a4c      	ldr	r2, [pc, #304]	; (8008448 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	333c      	adds	r3, #60	; 0x3c
 8008324:	461a      	mov	r2, r3
 8008326:	887b      	ldrh	r3, [r7, #2]
 8008328:	f7f9 ffa8 	bl	800227c <HAL_DMA_Start_IT>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e07f      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008344:	60da      	str	r2, [r3, #12]
      break;
 8008346:	e026      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	4a3c      	ldr	r2, [pc, #240]	; (8008440 <HAL_TIM_PWM_Start_DMA+0x340>)
 800834e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	4a3b      	ldr	r2, [pc, #236]	; (8008444 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4a3a      	ldr	r2, [pc, #232]	; (8008448 <HAL_TIM_PWM_Start_DMA+0x348>)
 800835e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3340      	adds	r3, #64	; 0x40
 800836c:	461a      	mov	r2, r3
 800836e:	887b      	ldrh	r3, [r7, #2]
 8008370:	f7f9 ff84 	bl	800227c <HAL_DMA_Start_IT>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e05b      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800838c:	60da      	str	r2, [r3, #12]
      break;
 800838e:	e002      	b.n	8008396 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
      break;
 8008394:	bf00      	nop
  }

  if (status == HAL_OK)
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d14b      	bne.n	8008434 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2201      	movs	r2, #1
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 fba9 	bl	8009afc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a27      	ldr	r2, [pc, #156]	; (800844c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d018      	beq.n	8008400 <HAL_TIM_PWM_Start_DMA+0x300>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d013      	beq.n	8008400 <HAL_TIM_PWM_Start_DMA+0x300>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a1c      	ldr	r2, [pc, #112]	; (8008450 <HAL_TIM_PWM_Start_DMA+0x350>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00e      	beq.n	8008400 <HAL_TIM_PWM_Start_DMA+0x300>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1b      	ldr	r2, [pc, #108]	; (8008454 <HAL_TIM_PWM_Start_DMA+0x354>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d009      	beq.n	8008400 <HAL_TIM_PWM_Start_DMA+0x300>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a19      	ldr	r2, [pc, #100]	; (8008458 <HAL_TIM_PWM_Start_DMA+0x358>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d004      	beq.n	8008400 <HAL_TIM_PWM_Start_DMA+0x300>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <HAL_TIM_PWM_Start_DMA+0x35c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d111      	bne.n	8008424 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b06      	cmp	r3, #6
 8008410:	d010      	beq.n	8008434 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0201 	orr.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008422:	e007      	b.n	8008434 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	08009135 	.word	0x08009135
 8008444:	080091dd 	.word	0x080091dd
 8008448:	080090a3 	.word	0x080090a3
 800844c:	40010000 	.word	0x40010000
 8008450:	40000400 	.word	0x40000400
 8008454:	40000800 	.word	0x40000800
 8008458:	40000c00 	.word	0x40000c00
 800845c:	40014000 	.word	0x40014000

08008460 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e041      	b.n	80084f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f839 	bl	80084fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3304      	adds	r3, #4
 800849c:	4619      	mov	r1, r3
 800849e:	4610      	mov	r0, r2
 80084a0:	f000 ff68 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <HAL_TIM_IC_Start_DMA+0x22>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008532:	b2db      	uxtb	r3, r3
 8008534:	e013      	b.n	800855e <HAL_TIM_IC_Start_DMA+0x4a>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b04      	cmp	r3, #4
 800853a:	d104      	bne.n	8008546 <HAL_TIM_IC_Start_DMA+0x32>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008542:	b2db      	uxtb	r3, r3
 8008544:	e00b      	b.n	800855e <HAL_TIM_IC_Start_DMA+0x4a>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d104      	bne.n	8008556 <HAL_TIM_IC_Start_DMA+0x42>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008552:	b2db      	uxtb	r3, r3
 8008554:	e003      	b.n	800855e <HAL_TIM_IC_Start_DMA+0x4a>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800855c:	b2db      	uxtb	r3, r3
 800855e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d104      	bne.n	8008570 <HAL_TIM_IC_Start_DMA+0x5c>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800856c:	b2db      	uxtb	r3, r3
 800856e:	e013      	b.n	8008598 <HAL_TIM_IC_Start_DMA+0x84>
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b04      	cmp	r3, #4
 8008574:	d104      	bne.n	8008580 <HAL_TIM_IC_Start_DMA+0x6c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800857c:	b2db      	uxtb	r3, r3
 800857e:	e00b      	b.n	8008598 <HAL_TIM_IC_Start_DMA+0x84>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b08      	cmp	r3, #8
 8008584:	d104      	bne.n	8008590 <HAL_TIM_IC_Start_DMA+0x7c>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800858c:	b2db      	uxtb	r3, r3
 800858e:	e003      	b.n	8008598 <HAL_TIM_IC_Start_DMA+0x84>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008596:	b2db      	uxtb	r3, r3
 8008598:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800859a:	7dbb      	ldrb	r3, [r7, #22]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d002      	beq.n	80085a6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80085a0:	7d7b      	ldrb	r3, [r7, #21]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
 80085a8:	e13c      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80085aa:	7dbb      	ldrb	r3, [r7, #22]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d143      	bne.n	8008638 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80085b0:	7d7b      	ldrb	r3, [r7, #21]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d140      	bne.n	8008638 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_IC_Start_DMA+0xb2>
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e12e      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_IC_Start_DMA+0xc2>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d4:	e013      	b.n	80085fe <HAL_TIM_IC_Start_DMA+0xea>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b04      	cmp	r3, #4
 80085da:	d104      	bne.n	80085e6 <HAL_TIM_IC_Start_DMA+0xd2>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e4:	e00b      	b.n	80085fe <HAL_TIM_IC_Start_DMA+0xea>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_IC_Start_DMA+0xe2>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f4:	e003      	b.n	80085fe <HAL_TIM_IC_Start_DMA+0xea>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2202      	movs	r2, #2
 80085fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <HAL_TIM_IC_Start_DMA+0xfa>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800860c:	e016      	b.n	800863c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b04      	cmp	r3, #4
 8008612:	d104      	bne.n	800861e <HAL_TIM_IC_Start_DMA+0x10a>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800861c:	e00e      	b.n	800863c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b08      	cmp	r3, #8
 8008622:	d104      	bne.n	800862e <HAL_TIM_IC_Start_DMA+0x11a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800862c:	e006      	b.n	800863c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008636:	e001      	b.n	800863c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e0f3      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fa59 	bl	8009afc <TIM_CCxChannelCmd>

  switch (Channel)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b0c      	cmp	r3, #12
 800864e:	f200 80ad 	bhi.w	80087ac <HAL_TIM_IC_Start_DMA+0x298>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <HAL_TIM_IC_Start_DMA+0x144>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	0800868d 	.word	0x0800868d
 800865c:	080087ad 	.word	0x080087ad
 8008660:	080087ad 	.word	0x080087ad
 8008664:	080087ad 	.word	0x080087ad
 8008668:	080086d5 	.word	0x080086d5
 800866c:	080087ad 	.word	0x080087ad
 8008670:	080087ad 	.word	0x080087ad
 8008674:	080087ad 	.word	0x080087ad
 8008678:	0800871d 	.word	0x0800871d
 800867c:	080087ad 	.word	0x080087ad
 8008680:	080087ad 	.word	0x080087ad
 8008684:	080087ad 	.word	0x080087ad
 8008688:	08008765 	.word	0x08008765
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	4a66      	ldr	r2, [pc, #408]	; (800882c <HAL_TIM_IC_Start_DMA+0x318>)
 8008692:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	4a65      	ldr	r2, [pc, #404]	; (8008830 <HAL_TIM_IC_Start_DMA+0x31c>)
 800869a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	4a64      	ldr	r2, [pc, #400]	; (8008834 <HAL_TIM_IC_Start_DMA+0x320>)
 80086a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3334      	adds	r3, #52	; 0x34
 80086ae:	4619      	mov	r1, r3
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	887b      	ldrh	r3, [r7, #2]
 80086b4:	f7f9 fde2 	bl	800227c <HAL_DMA_Start_IT>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0b0      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d0:	60da      	str	r2, [r3, #12]
      break;
 80086d2:	e06e      	b.n	80087b2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	4a54      	ldr	r2, [pc, #336]	; (800882c <HAL_TIM_IC_Start_DMA+0x318>)
 80086da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	4a53      	ldr	r2, [pc, #332]	; (8008830 <HAL_TIM_IC_Start_DMA+0x31c>)
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	4a52      	ldr	r2, [pc, #328]	; (8008834 <HAL_TIM_IC_Start_DMA+0x320>)
 80086ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3338      	adds	r3, #56	; 0x38
 80086f6:	4619      	mov	r1, r3
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	f7f9 fdbe 	bl	800227c <HAL_DMA_Start_IT>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e08c      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008718:	60da      	str	r2, [r3, #12]
      break;
 800871a:	e04a      	b.n	80087b2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	4a42      	ldr	r2, [pc, #264]	; (800882c <HAL_TIM_IC_Start_DMA+0x318>)
 8008722:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a41      	ldr	r2, [pc, #260]	; (8008830 <HAL_TIM_IC_Start_DMA+0x31c>)
 800872a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	4a40      	ldr	r2, [pc, #256]	; (8008834 <HAL_TIM_IC_Start_DMA+0x320>)
 8008732:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	333c      	adds	r3, #60	; 0x3c
 800873e:	4619      	mov	r1, r3
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	887b      	ldrh	r3, [r7, #2]
 8008744:	f7f9 fd9a 	bl	800227c <HAL_DMA_Start_IT>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e068      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008760:	60da      	str	r2, [r3, #12]
      break;
 8008762:	e026      	b.n	80087b2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	4a30      	ldr	r2, [pc, #192]	; (800882c <HAL_TIM_IC_Start_DMA+0x318>)
 800876a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008770:	4a2f      	ldr	r2, [pc, #188]	; (8008830 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	4a2e      	ldr	r2, [pc, #184]	; (8008834 <HAL_TIM_IC_Start_DMA+0x320>)
 800877a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3340      	adds	r3, #64	; 0x40
 8008786:	4619      	mov	r1, r3
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	887b      	ldrh	r3, [r7, #2]
 800878c:	f7f9 fd76 	bl	800227c <HAL_DMA_Start_IT>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e044      	b.n	8008824 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80087a8:	60da      	str	r2, [r3, #12]
      break;
 80087aa:	e002      	b.n	80087b2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]
      break;
 80087b0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a20      	ldr	r2, [pc, #128]	; (8008838 <HAL_TIM_IC_Start_DMA+0x324>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d018      	beq.n	80087ee <HAL_TIM_IC_Start_DMA+0x2da>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c4:	d013      	beq.n	80087ee <HAL_TIM_IC_Start_DMA+0x2da>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a1c      	ldr	r2, [pc, #112]	; (800883c <HAL_TIM_IC_Start_DMA+0x328>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00e      	beq.n	80087ee <HAL_TIM_IC_Start_DMA+0x2da>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <HAL_TIM_IC_Start_DMA+0x32c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d009      	beq.n	80087ee <HAL_TIM_IC_Start_DMA+0x2da>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a19      	ldr	r2, [pc, #100]	; (8008844 <HAL_TIM_IC_Start_DMA+0x330>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d004      	beq.n	80087ee <HAL_TIM_IC_Start_DMA+0x2da>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a17      	ldr	r2, [pc, #92]	; (8008848 <HAL_TIM_IC_Start_DMA+0x334>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d111      	bne.n	8008812 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b06      	cmp	r3, #6
 80087fe:	d010      	beq.n	8008822 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0201 	orr.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008810:	e007      	b.n	8008822 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0201 	orr.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008822:	7dfb      	ldrb	r3, [r7, #23]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	08009245 	.word	0x08009245
 8008830:	0800930d 	.word	0x0800930d
 8008834:	080090a3 	.word	0x080090a3
 8008838:	40010000 	.word	0x40010000
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40000c00 	.word	0x40000c00
 8008848:	40014000 	.word	0x40014000

0800884c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f001 f94a 	bl	8009afc <TIM_CCxChannelCmd>

  switch (Channel)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b0c      	cmp	r3, #12
 800886c:	d854      	bhi.n	8008918 <HAL_TIM_IC_Stop_DMA+0xcc>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <HAL_TIM_IC_Stop_DMA+0x28>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	080088a9 	.word	0x080088a9
 8008878:	08008919 	.word	0x08008919
 800887c:	08008919 	.word	0x08008919
 8008880:	08008919 	.word	0x08008919
 8008884:	080088c5 	.word	0x080088c5
 8008888:	08008919 	.word	0x08008919
 800888c:	08008919 	.word	0x08008919
 8008890:	08008919 	.word	0x08008919
 8008894:	080088e1 	.word	0x080088e1
 8008898:	08008919 	.word	0x08008919
 800889c:	08008919 	.word	0x08008919
 80088a0:	08008919 	.word	0x08008919
 80088a4:	080088fd 	.word	0x080088fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 fda5 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 80088c2:	e02c      	b.n	800891e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	4618      	mov	r0, r3
 80088da:	f7f9 fd97 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 80088de:	e01e      	b.n	800891e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f9 fd89 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 80088fa:	e010      	b.n	800891e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800890a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	4618      	mov	r0, r3
 8008912:	f7f9 fd7b 	bl	800240c <HAL_DMA_Abort_IT>
      break;
 8008916:	e002      	b.n	800891e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
      break;
 800891c:	bf00      	nop
  }

  if (status == HAL_OK)
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d14f      	bne.n	80089c4 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	f241 1311 	movw	r3, #4369	; 0x1111
 800892e:	4013      	ands	r3, r2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10f      	bne.n	8008954 <HAL_TIM_IC_Stop_DMA+0x108>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6a1a      	ldr	r2, [r3, #32]
 800893a:	f240 4344 	movw	r3, #1092	; 0x444
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d107      	bne.n	8008954 <HAL_TIM_IC_Stop_DMA+0x108>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d104      	bne.n	8008964 <HAL_TIM_IC_Stop_DMA+0x118>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008962:	e013      	b.n	800898c <HAL_TIM_IC_Stop_DMA+0x140>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	2b04      	cmp	r3, #4
 8008968:	d104      	bne.n	8008974 <HAL_TIM_IC_Stop_DMA+0x128>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008972:	e00b      	b.n	800898c <HAL_TIM_IC_Stop_DMA+0x140>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2b08      	cmp	r3, #8
 8008978:	d104      	bne.n	8008984 <HAL_TIM_IC_Stop_DMA+0x138>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008982:	e003      	b.n	800898c <HAL_TIM_IC_Stop_DMA+0x140>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d104      	bne.n	800899c <HAL_TIM_IC_Stop_DMA+0x150>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800899a:	e013      	b.n	80089c4 <HAL_TIM_IC_Stop_DMA+0x178>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b04      	cmp	r3, #4
 80089a0:	d104      	bne.n	80089ac <HAL_TIM_IC_Stop_DMA+0x160>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089aa:	e00b      	b.n	80089c4 <HAL_TIM_IC_Stop_DMA+0x178>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d104      	bne.n	80089bc <HAL_TIM_IC_Stop_DMA+0x170>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ba:	e003      	b.n	80089c4 <HAL_TIM_IC_Stop_DMA+0x178>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop

080089d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d122      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d11b      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f06f 0202 	mvn.w	r2, #2
 80089fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fb13 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008a18:	e005      	b.n	8008a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fb05 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f008 ff93 	bl	801194c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d122      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d11b      	bne.n	8008a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0204 	mvn.w	r2, #4
 8008a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2202      	movs	r2, #2
 8008a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fae9 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008a6c:	e005      	b.n	8008a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fadb 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f008 ff69 	bl	801194c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b08      	cmp	r3, #8
 8008a8c:	d122      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d11b      	bne.n	8008ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0208 	mvn.w	r2, #8
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fabf 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fab1 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f008 ff3f 	bl	801194c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0310 	and.w	r3, r3, #16
 8008ade:	2b10      	cmp	r3, #16
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0210 	mvn.w	r2, #16
 8008af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2208      	movs	r2, #8
 8008afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa95 	bl	800903e <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa87 	bl	800902a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f008 ff15 	bl	801194c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d10e      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d107      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0201 	mvn.w	r2, #1
 8008b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f7 ffc2 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5e:	2b80      	cmp	r3, #128	; 0x80
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f8ae 	bl	8009cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d10e      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d107      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa67 	bl	800907a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0320 	and.w	r3, r3, #32
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d107      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0220 	mvn.w	r2, #32
 8008bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 f878 	bl	8009cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e088      	b.n	8008d10 <HAL_TIM_IC_ConfigChannel+0x130>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d11b      	bne.n	8008c44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f000 fdb6 	bl	800978c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 020c 	bic.w	r2, r2, #12
 8008c2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6999      	ldr	r1, [r3, #24]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	619a      	str	r2, [r3, #24]
 8008c42:	e060      	b.n	8008d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d11c      	bne.n	8008c84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f000 fe2e 	bl	80098ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699a      	ldr	r2, [r3, #24]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008c6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6999      	ldr	r1, [r3, #24]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	021a      	lsls	r2, r3, #8
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	619a      	str	r2, [r3, #24]
 8008c82:	e040      	b.n	8008d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b08      	cmp	r3, #8
 8008c88:	d11b      	bne.n	8008cc2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6818      	ldr	r0, [r3, #0]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f000 fe7b 	bl	8009994 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69da      	ldr	r2, [r3, #28]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 020c 	bic.w	r2, r2, #12
 8008cac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69d9      	ldr	r1, [r3, #28]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	61da      	str	r2, [r3, #28]
 8008cc0:	e021      	b.n	8008d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b0c      	cmp	r3, #12
 8008cc6:	d11c      	bne.n	8008d02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6819      	ldr	r1, [r3, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f000 fe98 	bl	8009a0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69da      	ldr	r2, [r3, #28]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008cea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69d9      	ldr	r1, [r3, #28]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	021a      	lsls	r2, r3, #8
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	61da      	str	r2, [r3, #28]
 8008d00:	e001      	b.n	8008d06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d101      	bne.n	8008d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d32:	2302      	movs	r3, #2
 8008d34:	e0ae      	b.n	8008e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b0c      	cmp	r3, #12
 8008d42:	f200 809f 	bhi.w	8008e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d46:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008d81 	.word	0x08008d81
 8008d50:	08008e85 	.word	0x08008e85
 8008d54:	08008e85 	.word	0x08008e85
 8008d58:	08008e85 	.word	0x08008e85
 8008d5c:	08008dc1 	.word	0x08008dc1
 8008d60:	08008e85 	.word	0x08008e85
 8008d64:	08008e85 	.word	0x08008e85
 8008d68:	08008e85 	.word	0x08008e85
 8008d6c:	08008e03 	.word	0x08008e03
 8008d70:	08008e85 	.word	0x08008e85
 8008d74:	08008e85 	.word	0x08008e85
 8008d78:	08008e85 	.word	0x08008e85
 8008d7c:	08008e43 	.word	0x08008e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fb74 	bl	8009474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0208 	orr.w	r2, r2, #8
 8008d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0204 	bic.w	r2, r2, #4
 8008daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6999      	ldr	r1, [r3, #24]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	691a      	ldr	r2, [r3, #16]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	619a      	str	r2, [r3, #24]
      break;
 8008dbe:	e064      	b.n	8008e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fbba 	bl	8009540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6999      	ldr	r1, [r3, #24]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	021a      	lsls	r2, r3, #8
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	619a      	str	r2, [r3, #24]
      break;
 8008e00:	e043      	b.n	8008e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fc05 	bl	8009618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69da      	ldr	r2, [r3, #28]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0208 	orr.w	r2, r2, #8
 8008e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69da      	ldr	r2, [r3, #28]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0204 	bic.w	r2, r2, #4
 8008e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69d9      	ldr	r1, [r3, #28]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	61da      	str	r2, [r3, #28]
      break;
 8008e40:	e023      	b.n	8008e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fc4f 	bl	80096ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69da      	ldr	r2, [r3, #28]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69d9      	ldr	r1, [r3, #28]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	021a      	lsls	r2, r3, #8
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	61da      	str	r2, [r3, #28]
      break;
 8008e82:	e002      	b.n	8008e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	75fb      	strb	r3, [r7, #23]
      break;
 8008e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e0b4      	b.n	8009022 <HAL_TIM_ConfigClockSource+0x186>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef0:	d03e      	beq.n	8008f70 <HAL_TIM_ConfigClockSource+0xd4>
 8008ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef6:	f200 8087 	bhi.w	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efe:	f000 8086 	beq.w	800900e <HAL_TIM_ConfigClockSource+0x172>
 8008f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f06:	d87f      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f08:	2b70      	cmp	r3, #112	; 0x70
 8008f0a:	d01a      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0xa6>
 8008f0c:	2b70      	cmp	r3, #112	; 0x70
 8008f0e:	d87b      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f10:	2b60      	cmp	r3, #96	; 0x60
 8008f12:	d050      	beq.n	8008fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8008f14:	2b60      	cmp	r3, #96	; 0x60
 8008f16:	d877      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f18:	2b50      	cmp	r3, #80	; 0x50
 8008f1a:	d03c      	beq.n	8008f96 <HAL_TIM_ConfigClockSource+0xfa>
 8008f1c:	2b50      	cmp	r3, #80	; 0x50
 8008f1e:	d873      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f20:	2b40      	cmp	r3, #64	; 0x40
 8008f22:	d058      	beq.n	8008fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	d86f      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f28:	2b30      	cmp	r3, #48	; 0x30
 8008f2a:	d064      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2c:	2b30      	cmp	r3, #48	; 0x30
 8008f2e:	d86b      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d060      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d867      	bhi.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05c      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f3c:	2b10      	cmp	r3, #16
 8008f3e:	d05a      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f40:	e062      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	6899      	ldr	r1, [r3, #8]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f000 fdb3 	bl	8009abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	609a      	str	r2, [r3, #8]
      break;
 8008f6e:	e04f      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	6899      	ldr	r1, [r3, #8]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f000 fd9c 	bl	8009abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689a      	ldr	r2, [r3, #8]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f92:	609a      	str	r2, [r3, #8]
      break;
 8008f94:	e03c      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	6859      	ldr	r1, [r3, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f000 fc5a 	bl	800985c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2150      	movs	r1, #80	; 0x50
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fd69 	bl	8009a86 <TIM_ITRx_SetConfig>
      break;
 8008fb4:	e02c      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	6859      	ldr	r1, [r3, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f000 fcb6 	bl	8009934 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2160      	movs	r1, #96	; 0x60
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fd59 	bl	8009a86 <TIM_ITRx_SetConfig>
      break;
 8008fd4:	e01c      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6859      	ldr	r1, [r3, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f000 fc3a 	bl	800985c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2140      	movs	r1, #64	; 0x40
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd49 	bl	8009a86 <TIM_ITRx_SetConfig>
      break;
 8008ff4:	e00c      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f000 fd40 	bl	8009a86 <TIM_ITRx_SetConfig>
      break;
 8009006:	e003      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
      break;
 800900c:	e000      	b.n	8009010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800900e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009032:	bf00      	nop
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009046:	bf00      	nop
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800906e:	bf00      	nop
 8009070:	370c      	adds	r7, #12
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d107      	bne.n	80090ca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c8:	e02a      	b.n	8009120 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d107      	bne.n	80090e4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2202      	movs	r2, #2
 80090d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e2:	e01d      	b.n	8009120 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d107      	bne.n	80090fe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2204      	movs	r2, #4
 80090f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090fc:	e010      	b.n	8009120 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d107      	bne.n	8009118 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2208      	movs	r2, #8
 800910c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009116:	e003      	b.n	8009120 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff ffb4 	bl	800908e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	771a      	strb	r2, [r3, #28]
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d10b      	bne.n	8009164 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d136      	bne.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009162:	e031      	b.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d10b      	bne.n	8009186 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2202      	movs	r2, #2
 8009172:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d125      	bne.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009184:	e020      	b.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d10b      	bne.n	80091a8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2204      	movs	r2, #4
 8009194:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d114      	bne.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091a6:	e00f      	b.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d10a      	bne.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2208      	movs	r2, #8
 80091b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f008 fbbf 	bl	801194c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d103      	bne.n	80091fc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	771a      	strb	r2, [r3, #28]
 80091fa:	e019      	b.n	8009230 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d103      	bne.n	800920e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	771a      	strb	r2, [r3, #28]
 800920c:	e010      	b.n	8009230 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d103      	bne.n	8009220 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2204      	movs	r2, #4
 800921c:	771a      	strb	r2, [r3, #28]
 800921e:	e007      	b.n	8009230 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	429a      	cmp	r2, r3
 8009228:	d102      	bne.n	8009230 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2208      	movs	r2, #8
 800922e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7ff ff18 	bl	8009066 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	771a      	strb	r2, [r3, #28]
}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d10f      	bne.n	800927c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d146      	bne.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800927a:	e03d      	b.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d10f      	bne.n	80092a6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2202      	movs	r2, #2
 800928a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d131      	bne.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092a4:	e028      	b.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d10f      	bne.n	80092d0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2204      	movs	r2, #4
 80092b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d11c      	bne.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ce:	e013      	b.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d10e      	bne.n	80092f8 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2208      	movs	r2, #8
 80092de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	69db      	ldr	r3, [r3, #28]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d107      	bne.n	80092f8 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f7ff fea0 	bl	800903e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
}
 8009304:	bf00      	nop
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d103      	bne.n	800932c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	771a      	strb	r2, [r3, #28]
 800932a:	e019      	b.n	8009360 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d103      	bne.n	800933e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2202      	movs	r2, #2
 800933a:	771a      	strb	r2, [r3, #28]
 800933c:	e010      	b.n	8009360 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d103      	bne.n	8009350 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2204      	movs	r2, #4
 800934c:	771a      	strb	r2, [r3, #28]
 800934e:	e007      	b.n	8009360 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d102      	bne.n	8009360 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2208      	movs	r2, #8
 800935e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fe76 	bl	8009052 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	771a      	strb	r2, [r3, #28]
}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a34      	ldr	r2, [pc, #208]	; (8009458 <TIM_Base_SetConfig+0xe4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00f      	beq.n	80093ac <TIM_Base_SetConfig+0x38>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009392:	d00b      	beq.n	80093ac <TIM_Base_SetConfig+0x38>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a31      	ldr	r2, [pc, #196]	; (800945c <TIM_Base_SetConfig+0xe8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d007      	beq.n	80093ac <TIM_Base_SetConfig+0x38>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a30      	ldr	r2, [pc, #192]	; (8009460 <TIM_Base_SetConfig+0xec>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d003      	beq.n	80093ac <TIM_Base_SetConfig+0x38>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a2f      	ldr	r2, [pc, #188]	; (8009464 <TIM_Base_SetConfig+0xf0>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d108      	bne.n	80093be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <TIM_Base_SetConfig+0xe4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d01b      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093cc:	d017      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a22      	ldr	r2, [pc, #136]	; (800945c <TIM_Base_SetConfig+0xe8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a21      	ldr	r2, [pc, #132]	; (8009460 <TIM_Base_SetConfig+0xec>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00f      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a20      	ldr	r2, [pc, #128]	; (8009464 <TIM_Base_SetConfig+0xf0>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00b      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <TIM_Base_SetConfig+0xf4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d007      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a1e      	ldr	r2, [pc, #120]	; (800946c <TIM_Base_SetConfig+0xf8>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_Base_SetConfig+0x8a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <TIM_Base_SetConfig+0xfc>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d108      	bne.n	8009410 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a08      	ldr	r2, [pc, #32]	; (8009458 <TIM_Base_SetConfig+0xe4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	615a      	str	r2, [r3, #20]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40010000 	.word	0x40010000
 800945c:	40000400 	.word	0x40000400
 8009460:	40000800 	.word	0x40000800
 8009464:	40000c00 	.word	0x40000c00
 8009468:	40014000 	.word	0x40014000
 800946c:	40014400 	.word	0x40014400
 8009470:	40014800 	.word	0x40014800

08009474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	f023 0201 	bic.w	r2, r3, #1
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f023 0302 	bic.w	r3, r3, #2
 80094bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1c      	ldr	r2, [pc, #112]	; (800953c <TIM_OC1_SetConfig+0xc8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d10c      	bne.n	80094ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f023 0308 	bic.w	r3, r3, #8
 80094d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f023 0304 	bic.w	r3, r3, #4
 80094e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a13      	ldr	r2, [pc, #76]	; (800953c <TIM_OC1_SetConfig+0xc8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d111      	bne.n	8009516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	621a      	str	r2, [r3, #32]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40010000 	.word	0x40010000

08009540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	f023 0210 	bic.w	r2, r3, #16
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f023 0320 	bic.w	r3, r3, #32
 800958a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1e      	ldr	r2, [pc, #120]	; (8009614 <TIM_OC2_SetConfig+0xd4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10d      	bne.n	80095bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a15      	ldr	r2, [pc, #84]	; (8009614 <TIM_OC2_SetConfig+0xd4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d113      	bne.n	80095ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	621a      	str	r2, [r3, #32]
}
 8009606:	bf00      	nop
 8009608:	371c      	adds	r7, #28
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40010000 	.word	0x40010000

08009618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a1d      	ldr	r2, [pc, #116]	; (80096e8 <TIM_OC3_SetConfig+0xd0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10d      	bne.n	8009692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800967c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <TIM_OC3_SetConfig+0xd0>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d113      	bne.n	80096c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4313      	orrs	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	621a      	str	r2, [r3, #32]
}
 80096dc:	bf00      	nop
 80096de:	371c      	adds	r7, #28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	40010000 	.word	0x40010000

080096ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	021b      	lsls	r3, r3, #8
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	4313      	orrs	r3, r2
 800972e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	031b      	lsls	r3, r3, #12
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4313      	orrs	r3, r2
 8009742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a10      	ldr	r2, [pc, #64]	; (8009788 <TIM_OC4_SetConfig+0x9c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d109      	bne.n	8009760 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	019b      	lsls	r3, r3, #6
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	621a      	str	r2, [r3, #32]
}
 800977a:	bf00      	nop
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000

0800978c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4a24      	ldr	r2, [pc, #144]	; (8009848 <TIM_TI1_SetConfig+0xbc>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d013      	beq.n	80097e2 <TIM_TI1_SetConfig+0x56>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c0:	d00f      	beq.n	80097e2 <TIM_TI1_SetConfig+0x56>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a21      	ldr	r2, [pc, #132]	; (800984c <TIM_TI1_SetConfig+0xc0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00b      	beq.n	80097e2 <TIM_TI1_SetConfig+0x56>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4a20      	ldr	r2, [pc, #128]	; (8009850 <TIM_TI1_SetConfig+0xc4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d007      	beq.n	80097e2 <TIM_TI1_SetConfig+0x56>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <TIM_TI1_SetConfig+0xc8>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d003      	beq.n	80097e2 <TIM_TI1_SetConfig+0x56>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <TIM_TI1_SetConfig+0xcc>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d101      	bne.n	80097e6 <TIM_TI1_SetConfig+0x5a>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e000      	b.n	80097e8 <TIM_TI1_SetConfig+0x5c>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d008      	beq.n	80097fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	e003      	b.n	8009806 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800980c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	011b      	lsls	r3, r3, #4
 8009812:	b2db      	uxtb	r3, r3
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f023 030a 	bic.w	r3, r3, #10
 8009820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	f003 030a 	and.w	r3, r3, #10
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	40010000 	.word	0x40010000
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40000c00 	.word	0x40000c00
 8009858:	40014000 	.word	0x40014000

0800985c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0201 	bic.w	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 030a 	bic.w	r3, r3, #10
 8009898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	f023 0210 	bic.w	r2, r3, #16
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	021b      	lsls	r3, r3, #8
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	031b      	lsls	r3, r3, #12
 80098fe:	b29b      	uxth	r3, r3
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800990c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	621a      	str	r2, [r3, #32]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	f023 0210 	bic.w	r2, r3, #16
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800995e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	031b      	lsls	r3, r3, #12
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009970:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	4313      	orrs	r3, r2
 800997a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	621a      	str	r2, [r3, #32]
}
 8009988:	bf00      	nop
 800998a:	371c      	adds	r7, #28
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f023 0303 	bic.w	r3, r3, #3
 80099c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80099e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	621a      	str	r2, [r3, #32]
}
 8009a00:	bf00      	nop
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1b      	ldr	r3, [r3, #32]
 8009a30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	021b      	lsls	r3, r3, #8
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	031b      	lsls	r3, r3, #12
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	031b      	lsls	r3, r3, #12
 8009a64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	621a      	str	r2, [r3, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	f043 0307 	orr.w	r3, r3, #7
 8009aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	609a      	str	r2, [r3, #8]
}
 8009ab0:	bf00      	nop
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	021a      	lsls	r2, r3, #8
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	609a      	str	r2, [r3, #8]
}
 8009af0:	bf00      	nop
 8009af2:	371c      	adds	r7, #28
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 031f 	and.w	r3, r3, #31
 8009b0e:	2201      	movs	r2, #1
 8009b10:	fa02 f303 	lsl.w	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1a      	ldr	r2, [r3, #32]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	401a      	ands	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a1a      	ldr	r2, [r3, #32]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f003 031f 	and.w	r3, r3, #31
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	fa01 f303 	lsl.w	r3, r1, r3
 8009b34:	431a      	orrs	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
	...

08009b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e050      	b.n	8009c02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1c      	ldr	r2, [pc, #112]	; (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d018      	beq.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bac:	d013      	beq.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a18      	ldr	r2, [pc, #96]	; (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d10c      	bne.n	8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40000400 	.word	0x40000400
 8009c18:	40000800 	.word	0x40000800
 8009c1c:	40000c00 	.word	0x40000c00
 8009c20:	40014000 	.word	0x40014000

08009c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e03d      	b.n	8009cbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e03f      	b.n	8009d82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7f7 ffac 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2224      	movs	r2, #36	; 0x24
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68da      	ldr	r2, [r3, #12]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 ff91 	bl	800ac5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	691a      	ldr	r2, [r3, #16]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695a      	ldr	r2, [r3, #20]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b08a      	sub	sp, #40	; 0x28
 8009d8e:	af02      	add	r7, sp, #8
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	603b      	str	r3, [r7, #0]
 8009d96:	4613      	mov	r3, r2
 8009d98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d17c      	bne.n	8009ea4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <HAL_UART_Transmit+0x2c>
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e075      	b.n	8009ea6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d101      	bne.n	8009dc8 <HAL_UART_Transmit+0x3e>
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	e06e      	b.n	8009ea6 <HAL_UART_Transmit+0x11c>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2221      	movs	r2, #33	; 0x21
 8009dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dde:	f7f8 f871 	bl	8001ec4 <HAL_GetTick>
 8009de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	88fa      	ldrh	r2, [r7, #6]
 8009dee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df8:	d108      	bne.n	8009e0c <HAL_UART_Transmit+0x82>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d104      	bne.n	8009e0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	e003      	b.n	8009e14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e1c:	e02a      	b.n	8009e74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2200      	movs	r2, #0
 8009e26:	2180      	movs	r1, #128	; 0x80
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fc49 	bl	800a6c0 <UART_WaitOnFlagUntilTimeout>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e036      	b.n	8009ea6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10b      	bne.n	8009e56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	3302      	adds	r3, #2
 8009e52:	61bb      	str	r3, [r7, #24]
 8009e54:	e007      	b.n	8009e66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	3301      	adds	r3, #1
 8009e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1cf      	bne.n	8009e1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	2140      	movs	r1, #64	; 0x40
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 fc19 	bl	800a6c0 <UART_WaitOnFlagUntilTimeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e006      	b.n	8009ea6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ea4:	2302      	movs	r3, #2
  }
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3720      	adds	r7, #32
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b08c      	sub	sp, #48	; 0x30
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d152      	bne.n	8009f6e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d101      	bne.n	8009ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e04b      	b.n	8009f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e044      	b.n	8009f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fc4e 	bl	800a79c <UART_Start_Receive_DMA>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12c      	bne.n	8009f68 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d125      	bne.n	8009f62 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f16:	2300      	movs	r3, #0
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	330c      	adds	r3, #12
 8009f32:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f043 0310 	orr.w	r3, r3, #16
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f4c:	627a      	str	r2, [r7, #36]	; 0x24
 8009f4e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	6a39      	ldr	r1, [r7, #32]
 8009f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e5      	bne.n	8009f2c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009f60:	e002      	b.n	8009f68 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f6c:	e000      	b.n	8009f70 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009f6e:	2302      	movs	r3, #2
  }
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3730      	adds	r7, #48	; 0x30
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b0ba      	sub	sp, #232	; 0xe8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10f      	bne.n	8009fde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <HAL_UART_IRQHandler+0x66>
 8009fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d003      	beq.n	8009fde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fd85 	bl	800aae6 <UART_Receive_IT>
      return;
 8009fdc:	e256      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 80de 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x22c>
 8009fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 80d1 	beq.w	800a1a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00b      	beq.n	800a026 <HAL_UART_IRQHandler+0xae>
 800a00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a016:	2b00      	cmp	r3, #0
 800a018:	d005      	beq.n	800a026 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	f043 0201 	orr.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00b      	beq.n	800a04a <HAL_UART_IRQHandler+0xd2>
 800a032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f043 0202 	orr.w	r2, r3, #2
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00b      	beq.n	800a06e <HAL_UART_IRQHandler+0xf6>
 800a056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f043 0204 	orr.w	r2, r3, #4
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a072:	f003 0308 	and.w	r3, r3, #8
 800a076:	2b00      	cmp	r3, #0
 800a078:	d011      	beq.n	800a09e <HAL_UART_IRQHandler+0x126>
 800a07a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d105      	bne.n	800a092 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d005      	beq.n	800a09e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f043 0208 	orr.w	r2, r3, #8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 81ed 	beq.w	800a482 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x14e>
 800a0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b8:	f003 0320 	and.w	r3, r3, #32
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fd10 	bl	800aae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	bf0c      	ite	eq
 800a0d4:	2301      	moveq	r3, #1
 800a0d6:	2300      	movne	r3, #0
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	f003 0308 	and.w	r3, r3, #8
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <HAL_UART_IRQHandler+0x17a>
 800a0ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d04f      	beq.n	800a192 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fc18 	bl	800a928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a102:	2b40      	cmp	r3, #64	; 0x40
 800a104:	d141      	bne.n	800a18a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3314      	adds	r3, #20
 800a10c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a132:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a13e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a14a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1d9      	bne.n	800a106 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	4a7d      	ldr	r2, [pc, #500]	; (800a354 <HAL_UART_IRQHandler+0x3dc>)
 800a160:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	4618      	mov	r0, r3
 800a168:	f7f8 f950 	bl	800240c <HAL_DMA_Abort_IT>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d016      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a180:	e00e      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f008 fba8 	bl	80128d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	e00a      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f008 fba4 	bl	80128d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a190:	e006      	b.n	800a1a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f008 fba0 	bl	80128d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a19e:	e170      	b.n	800a482 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a0:	bf00      	nop
    return;
 800a1a2:	e16e      	b.n	800a482 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	f040 814a 	bne.w	800a442 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 8143 	beq.w	800a442 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c0:	f003 0310 	and.w	r3, r3, #16
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 813c 	beq.w	800a442 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	60bb      	str	r3, [r7, #8]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ea:	2b40      	cmp	r3, #64	; 0x40
 800a1ec:	f040 80b4 	bne.w	800a358 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 8140 	beq.w	800a486 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a20a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a20e:	429a      	cmp	r2, r3
 800a210:	f080 8139 	bcs.w	800a486 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a21a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a226:	f000 8088 	beq.w	800a33a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	330c      	adds	r3, #12
 800a230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	330c      	adds	r3, #12
 800a252:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a262:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1d9      	bne.n	800a22a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3314      	adds	r3, #20
 800a27c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3314      	adds	r3, #20
 800a296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a29a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a29e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a2ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e1      	bne.n	800a276 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3314      	adds	r3, #20
 800a2b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3314      	adds	r3, #20
 800a2d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e3      	bne.n	800a2b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2220      	movs	r2, #32
 800a2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	330c      	adds	r3, #12
 800a2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a302:	e853 3f00 	ldrex	r3, [r3]
 800a306:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a30a:	f023 0310 	bic.w	r3, r3, #16
 800a30e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	330c      	adds	r3, #12
 800a318:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a31c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a31e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a322:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a32a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e3      	bne.n	800a2f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a334:	4618      	mov	r0, r3
 800a336:	f7f7 fff9 	bl	800232c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a342:	b29b      	uxth	r3, r3
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	b29b      	uxth	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f008 fa9c 	bl	8012888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a350:	e099      	b.n	800a486 <HAL_UART_IRQHandler+0x50e>
 800a352:	bf00      	nop
 800a354:	0800a9ef 	.word	0x0800a9ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a360:	b29b      	uxth	r3, r3
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 808b 	beq.w	800a48a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 8086 	beq.w	800a48a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	330c      	adds	r3, #12
 800a384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	330c      	adds	r3, #12
 800a39e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a3a2:	647a      	str	r2, [r7, #68]	; 0x44
 800a3a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e3      	bne.n	800a37e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3314      	adds	r3, #20
 800a3d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3da:	633a      	str	r2, [r7, #48]	; 0x30
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e2:	e841 2300 	strex	r3, r2, [r1]
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1e3      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	330c      	adds	r3, #12
 800a402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 0310 	bic.w	r3, r3, #16
 800a412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	330c      	adds	r3, #12
 800a41c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a420:	61fa      	str	r2, [r7, #28]
 800a422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a424:	69b9      	ldr	r1, [r7, #24]
 800a426:	69fa      	ldr	r2, [r7, #28]
 800a428:	e841 2300 	strex	r3, r2, [r1]
 800a42c:	617b      	str	r3, [r7, #20]
   return(result);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e3      	bne.n	800a3fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f008 fa24 	bl	8012888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a440:	e023      	b.n	800a48a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <HAL_UART_IRQHandler+0x4ea>
 800a44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fadb 	bl	800aa16 <UART_Transmit_IT>
    return;
 800a460:	e014      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00e      	beq.n	800a48c <HAL_UART_IRQHandler+0x514>
 800a46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fb1b 	bl	800aab6 <UART_EndTransmit_IT>
    return;
 800a480:	e004      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
    return;
 800a482:	bf00      	nop
 800a484:	e002      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
      return;
 800a486:	bf00      	nop
 800a488:	e000      	b.n	800a48c <HAL_UART_IRQHandler+0x514>
      return;
 800a48a:	bf00      	nop
  }
}
 800a48c:	37e8      	adds	r7, #232	; 0xe8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop

0800a494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b09c      	sub	sp, #112	; 0x70
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d172      	bne.n	800a5d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a508:	66bb      	str	r3, [r7, #104]	; 0x68
 800a50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	330c      	adds	r3, #12
 800a510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a512:	65ba      	str	r2, [r7, #88]	; 0x58
 800a514:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e5      	bne.n	800a4f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3314      	adds	r3, #20
 800a52c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	667b      	str	r3, [r7, #100]	; 0x64
 800a53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3314      	adds	r3, #20
 800a544:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a546:	647a      	str	r2, [r7, #68]	; 0x44
 800a548:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a54c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e5      	bne.n	800a526 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3314      	adds	r3, #20
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	e853 3f00 	ldrex	r3, [r3]
 800a568:	623b      	str	r3, [r7, #32]
   return(result);
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a570:	663b      	str	r3, [r7, #96]	; 0x60
 800a572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3314      	adds	r3, #20
 800a578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a57a:	633a      	str	r2, [r7, #48]	; 0x30
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e5      	bne.n	800a55a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a590:	2220      	movs	r2, #32
 800a592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d119      	bne.n	800a5d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f023 0310 	bic.w	r3, r3, #16
 800a5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	330c      	adds	r3, #12
 800a5bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5be:	61fa      	str	r2, [r7, #28]
 800a5c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	69b9      	ldr	r1, [r7, #24]
 800a5c4:	69fa      	ldr	r2, [r7, #28]
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e5      	bne.n	800a59e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d106      	bne.n	800a5e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5e2:	f008 f951 	bl	8012888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5e6:	e002      	b.n	800a5ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a5e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5ea:	f7ff ff5d 	bl	800a4a8 <HAL_UART_RxCpltCallback>
}
 800a5ee:	bf00      	nop
 800a5f0:	3770      	adds	r7, #112	; 0x70
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d108      	bne.n	800a61e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	b29b      	uxth	r3, r3
 800a614:	4619      	mov	r1, r3
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f008 f936 	bl	8012888 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a61c:	e002      	b.n	800a624 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff ff4c 	bl	800a4bc <HAL_UART_RxHalfCpltCallback>
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a648:	2b80      	cmp	r3, #128	; 0x80
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	2b21      	cmp	r3, #33	; 0x21
 800a65e:	d108      	bne.n	800a672 <UART_DMAError+0x46>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2200      	movs	r2, #0
 800a66a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a66c:	68b8      	ldr	r0, [r7, #8]
 800a66e:	f000 f933 	bl	800a8d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	bf0c      	ite	eq
 800a680:	2301      	moveq	r3, #1
 800a682:	2300      	movne	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b22      	cmp	r3, #34	; 0x22
 800a692:	d108      	bne.n	800a6a6 <UART_DMAError+0x7a>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d005      	beq.n	800a6a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2200      	movs	r2, #0
 800a69e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a6a0:	68b8      	ldr	r0, [r7, #8]
 800a6a2:	f000 f941 	bl	800a928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	f043 0210 	orr.w	r2, r3, #16
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6b2:	68b8      	ldr	r0, [r7, #8]
 800a6b4:	f008 f910 	bl	80128d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b090      	sub	sp, #64	; 0x40
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d0:	e050      	b.n	800a774 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d8:	d04c      	beq.n	800a774 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d007      	beq.n	800a6f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6e0:	f7f7 fbf0 	bl	8001ec4 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d241      	bcs.n	800a774 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	330c      	adds	r3, #12
 800a70e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a710:	637a      	str	r2, [r7, #52]	; 0x34
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e5      	bne.n	800a6f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3314      	adds	r3, #20
 800a72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	613b      	str	r3, [r7, #16]
   return(result);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	f023 0301 	bic.w	r3, r3, #1
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	3314      	adds	r3, #20
 800a742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a744:	623a      	str	r2, [r7, #32]
 800a746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	69f9      	ldr	r1, [r7, #28]
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	61bb      	str	r3, [r7, #24]
   return(result);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e5      	bne.n	800a724 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e00f      	b.n	800a794 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4013      	ands	r3, r2
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	429a      	cmp	r2, r3
 800a782:	bf0c      	ite	eq
 800a784:	2301      	moveq	r3, #1
 800a786:	2300      	movne	r3, #0
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	461a      	mov	r2, r3
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d09f      	beq.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3740      	adds	r7, #64	; 0x40
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b098      	sub	sp, #96	; 0x60
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	88fa      	ldrh	r2, [r7, #6]
 800a7b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2222      	movs	r2, #34	; 0x22
 800a7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	4a40      	ldr	r2, [pc, #256]	; (800a8cc <UART_Start_Receive_DMA+0x130>)
 800a7ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	4a3f      	ldr	r2, [pc, #252]	; (800a8d0 <UART_Start_Receive_DMA+0x134>)
 800a7d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	4a3e      	ldr	r2, [pc, #248]	; (800a8d4 <UART_Start_Receive_DMA+0x138>)
 800a7da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3304      	adds	r3, #4
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	f7f7 fd3e 	bl	800227c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	613b      	str	r3, [r7, #16]
 800a814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d019      	beq.n	800a85a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a83c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	330c      	adds	r3, #12
 800a844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a846:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a84c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a84e:	e841 2300 	strex	r3, r2, [r1]
 800a852:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e5      	bne.n	800a826 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3314      	adds	r3, #20
 800a860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	e853 3f00 	ldrex	r3, [r3]
 800a868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	657b      	str	r3, [r7, #84]	; 0x54
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3314      	adds	r3, #20
 800a878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a87a:	63ba      	str	r2, [r7, #56]	; 0x38
 800a87c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e5      	bne.n	800a85a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3314      	adds	r3, #20
 800a894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	617b      	str	r3, [r7, #20]
   return(result);
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	653b      	str	r3, [r7, #80]	; 0x50
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3314      	adds	r3, #20
 800a8ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ae:	627a      	str	r2, [r7, #36]	; 0x24
 800a8b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	6a39      	ldr	r1, [r7, #32]
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e5      	bne.n	800a88e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3760      	adds	r7, #96	; 0x60
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	0800a4d1 	.word	0x0800a4d1
 800a8d0:	0800a5f7 	.word	0x0800a5f7
 800a8d4:	0800a62d 	.word	0x0800a62d

0800a8d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b089      	sub	sp, #36	; 0x24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	330c      	adds	r3, #12
 800a8e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	e853 3f00 	ldrex	r3, [r3]
 800a8ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	69fa      	ldr	r2, [r7, #28]
 800a900:	61ba      	str	r2, [r7, #24]
 800a902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a904:	6979      	ldr	r1, [r7, #20]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	e841 2300 	strex	r3, r2, [r1]
 800a90c:	613b      	str	r3, [r7, #16]
   return(result);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e5      	bne.n	800a8e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a91c:	bf00      	nop
 800a91e:	3724      	adds	r7, #36	; 0x24
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b095      	sub	sp, #84	; 0x54
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	330c      	adds	r3, #12
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	330c      	adds	r3, #12
 800a94e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a950:	643a      	str	r2, [r7, #64]	; 0x40
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3314      	adds	r3, #20
 800a96a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	61fb      	str	r3, [r7, #28]
   return(result);
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f023 0301 	bic.w	r3, r3, #1
 800a97a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3314      	adds	r3, #20
 800a982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a984:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e5      	bne.n	800a964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d119      	bne.n	800a9d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f023 0310 	bic.w	r3, r3, #16
 800a9b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	330c      	adds	r3, #12
 800a9be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9c0:	61ba      	str	r2, [r7, #24]
 800a9c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	e841 2300 	strex	r3, r2, [r1]
 800a9cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e5      	bne.n	800a9a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a9e2:	bf00      	nop
 800a9e4:	3754      	adds	r7, #84	; 0x54
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f007 ff65 	bl	80128d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b21      	cmp	r3, #33	; 0x21
 800aa28:	d13e      	bne.n	800aaa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa32:	d114      	bne.n	800aa5e <UART_Transmit_IT+0x48>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d110      	bne.n	800aa5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	1c9a      	adds	r2, r3, #2
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	621a      	str	r2, [r3, #32]
 800aa5c:	e008      	b.n	800aa70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	1c59      	adds	r1, r3, #1
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	6211      	str	r1, [r2, #32]
 800aa68:	781a      	ldrb	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10f      	bne.n	800aaa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e000      	b.n	800aaaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aaa8:	2302      	movs	r3, #2
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68da      	ldr	r2, [r3, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aacc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fcdc 	bl	800a494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b08c      	sub	sp, #48	; 0x30
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b22      	cmp	r3, #34	; 0x22
 800aaf8:	f040 80ab 	bne.w	800ac52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab04:	d117      	bne.n	800ab36 <UART_Receive_IT+0x50>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d113      	bne.n	800ab36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	1c9a      	adds	r2, r3, #2
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	629a      	str	r2, [r3, #40]	; 0x28
 800ab34:	e026      	b.n	800ab84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab48:	d007      	beq.n	800ab5a <UART_Receive_IT+0x74>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10a      	bne.n	800ab68 <UART_Receive_IT+0x82>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	e008      	b.n	800ab7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	4619      	mov	r1, r3
 800ab92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d15a      	bne.n	800ac4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68da      	ldr	r2, [r3, #12]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0220 	bic.w	r2, r2, #32
 800aba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	695a      	ldr	r2, [r3, #20]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0201 	bic.w	r2, r2, #1
 800abc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2220      	movs	r2, #32
 800abcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d135      	bne.n	800ac44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	330c      	adds	r3, #12
 800abe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	613b      	str	r3, [r7, #16]
   return(result);
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f023 0310 	bic.w	r3, r3, #16
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	330c      	adds	r3, #12
 800abfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abfe:	623a      	str	r2, [r7, #32]
 800ac00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac02:	69f9      	ldr	r1, [r7, #28]
 800ac04:	6a3a      	ldr	r2, [r7, #32]
 800ac06:	e841 2300 	strex	r3, r2, [r1]
 800ac0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1e5      	bne.n	800abde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0310 	and.w	r3, r3, #16
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	d10a      	bne.n	800ac36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac20:	2300      	movs	r3, #0
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f007 fe23 	bl	8012888 <HAL_UARTEx_RxEventCallback>
 800ac42:	e002      	b.n	800ac4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff fc2f 	bl	800a4a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e002      	b.n	800ac54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e000      	b.n	800ac54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ac52:	2302      	movs	r3, #2
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3730      	adds	r7, #48	; 0x30
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac60:	b0c0      	sub	sp, #256	; 0x100
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac78:	68d9      	ldr	r1, [r3, #12]
 800ac7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	ea40 0301 	orr.w	r3, r0, r1
 800ac84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800acb4:	f021 010c 	bic.w	r1, r1, #12
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800acc2:	430b      	orrs	r3, r1
 800acc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800acd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd6:	6999      	ldr	r1, [r3, #24]
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	ea40 0301 	orr.w	r3, r0, r1
 800ace2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ace4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4b8f      	ldr	r3, [pc, #572]	; (800af28 <UART_SetConfig+0x2cc>)
 800acec:	429a      	cmp	r2, r3
 800acee:	d005      	beq.n	800acfc <UART_SetConfig+0xa0>
 800acf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4b8d      	ldr	r3, [pc, #564]	; (800af2c <UART_SetConfig+0x2d0>)
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d104      	bne.n	800ad06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acfc:	f7fb ff00 	bl	8006b00 <HAL_RCC_GetPCLK2Freq>
 800ad00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ad04:	e003      	b.n	800ad0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad06:	f7fb fee7 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 800ad0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad18:	f040 810c 	bne.w	800af34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad20:	2200      	movs	r2, #0
 800ad22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad2e:	4622      	mov	r2, r4
 800ad30:	462b      	mov	r3, r5
 800ad32:	1891      	adds	r1, r2, r2
 800ad34:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad36:	415b      	adcs	r3, r3
 800ad38:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad3e:	4621      	mov	r1, r4
 800ad40:	eb12 0801 	adds.w	r8, r2, r1
 800ad44:	4629      	mov	r1, r5
 800ad46:	eb43 0901 	adc.w	r9, r3, r1
 800ad4a:	f04f 0200 	mov.w	r2, #0
 800ad4e:	f04f 0300 	mov.w	r3, #0
 800ad52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad5e:	4690      	mov	r8, r2
 800ad60:	4699      	mov	r9, r3
 800ad62:	4623      	mov	r3, r4
 800ad64:	eb18 0303 	adds.w	r3, r8, r3
 800ad68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	eb49 0303 	adc.w	r3, r9, r3
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ad86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	18db      	adds	r3, r3, r3
 800ad8e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad90:	4613      	mov	r3, r2
 800ad92:	eb42 0303 	adc.w	r3, r2, r3
 800ad96:	657b      	str	r3, [r7, #84]	; 0x54
 800ad98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ada0:	f7f5 fa1e 	bl	80001e0 <__aeabi_uldivmod>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4b61      	ldr	r3, [pc, #388]	; (800af30 <UART_SetConfig+0x2d4>)
 800adaa:	fba3 2302 	umull	r2, r3, r3, r2
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	011c      	lsls	r4, r3, #4
 800adb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800adbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800adc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800adc4:	4642      	mov	r2, r8
 800adc6:	464b      	mov	r3, r9
 800adc8:	1891      	adds	r1, r2, r2
 800adca:	64b9      	str	r1, [r7, #72]	; 0x48
 800adcc:	415b      	adcs	r3, r3
 800adce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800add0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800add4:	4641      	mov	r1, r8
 800add6:	eb12 0a01 	adds.w	sl, r2, r1
 800adda:	4649      	mov	r1, r9
 800addc:	eb43 0b01 	adc.w	fp, r3, r1
 800ade0:	f04f 0200 	mov.w	r2, #0
 800ade4:	f04f 0300 	mov.w	r3, #0
 800ade8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800adec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adf4:	4692      	mov	sl, r2
 800adf6:	469b      	mov	fp, r3
 800adf8:	4643      	mov	r3, r8
 800adfa:	eb1a 0303 	adds.w	r3, sl, r3
 800adfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae02:	464b      	mov	r3, r9
 800ae04:	eb4b 0303 	adc.w	r3, fp, r3
 800ae08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae20:	460b      	mov	r3, r1
 800ae22:	18db      	adds	r3, r3, r3
 800ae24:	643b      	str	r3, [r7, #64]	; 0x40
 800ae26:	4613      	mov	r3, r2
 800ae28:	eb42 0303 	adc.w	r3, r2, r3
 800ae2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae36:	f7f5 f9d3 	bl	80001e0 <__aeabi_uldivmod>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4b3b      	ldr	r3, [pc, #236]	; (800af30 <UART_SetConfig+0x2d4>)
 800ae42:	fba3 2301 	umull	r2, r3, r3, r1
 800ae46:	095b      	lsrs	r3, r3, #5
 800ae48:	2264      	movs	r2, #100	; 0x64
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
 800ae4e:	1acb      	subs	r3, r1, r3
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae56:	4b36      	ldr	r3, [pc, #216]	; (800af30 <UART_SetConfig+0x2d4>)
 800ae58:	fba3 2302 	umull	r2, r3, r3, r2
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae64:	441c      	add	r4, r3
 800ae66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae78:	4642      	mov	r2, r8
 800ae7a:	464b      	mov	r3, r9
 800ae7c:	1891      	adds	r1, r2, r2
 800ae7e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae80:	415b      	adcs	r3, r3
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae88:	4641      	mov	r1, r8
 800ae8a:	1851      	adds	r1, r2, r1
 800ae8c:	6339      	str	r1, [r7, #48]	; 0x30
 800ae8e:	4649      	mov	r1, r9
 800ae90:	414b      	adcs	r3, r1
 800ae92:	637b      	str	r3, [r7, #52]	; 0x34
 800ae94:	f04f 0200 	mov.w	r2, #0
 800ae98:	f04f 0300 	mov.w	r3, #0
 800ae9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aea0:	4659      	mov	r1, fp
 800aea2:	00cb      	lsls	r3, r1, #3
 800aea4:	4651      	mov	r1, sl
 800aea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aeaa:	4651      	mov	r1, sl
 800aeac:	00ca      	lsls	r2, r1, #3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4642      	mov	r2, r8
 800aeb6:	189b      	adds	r3, r3, r2
 800aeb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aebc:	464b      	mov	r3, r9
 800aebe:	460a      	mov	r2, r1
 800aec0:	eb42 0303 	adc.w	r3, r2, r3
 800aec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aedc:	460b      	mov	r3, r1
 800aede:	18db      	adds	r3, r3, r3
 800aee0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aee2:	4613      	mov	r3, r2
 800aee4:	eb42 0303 	adc.w	r3, r2, r3
 800aee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aef2:	f7f5 f975 	bl	80001e0 <__aeabi_uldivmod>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <UART_SetConfig+0x2d4>)
 800aefc:	fba3 1302 	umull	r1, r3, r3, r2
 800af00:	095b      	lsrs	r3, r3, #5
 800af02:	2164      	movs	r1, #100	; 0x64
 800af04:	fb01 f303 	mul.w	r3, r1, r3
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	3332      	adds	r3, #50	; 0x32
 800af0e:	4a08      	ldr	r2, [pc, #32]	; (800af30 <UART_SetConfig+0x2d4>)
 800af10:	fba2 2303 	umull	r2, r3, r2, r3
 800af14:	095b      	lsrs	r3, r3, #5
 800af16:	f003 0207 	and.w	r2, r3, #7
 800af1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4422      	add	r2, r4
 800af22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af24:	e105      	b.n	800b132 <UART_SetConfig+0x4d6>
 800af26:	bf00      	nop
 800af28:	40011000 	.word	0x40011000
 800af2c:	40011400 	.word	0x40011400
 800af30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af46:	4642      	mov	r2, r8
 800af48:	464b      	mov	r3, r9
 800af4a:	1891      	adds	r1, r2, r2
 800af4c:	6239      	str	r1, [r7, #32]
 800af4e:	415b      	adcs	r3, r3
 800af50:	627b      	str	r3, [r7, #36]	; 0x24
 800af52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af56:	4641      	mov	r1, r8
 800af58:	1854      	adds	r4, r2, r1
 800af5a:	4649      	mov	r1, r9
 800af5c:	eb43 0501 	adc.w	r5, r3, r1
 800af60:	f04f 0200 	mov.w	r2, #0
 800af64:	f04f 0300 	mov.w	r3, #0
 800af68:	00eb      	lsls	r3, r5, #3
 800af6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af6e:	00e2      	lsls	r2, r4, #3
 800af70:	4614      	mov	r4, r2
 800af72:	461d      	mov	r5, r3
 800af74:	4643      	mov	r3, r8
 800af76:	18e3      	adds	r3, r4, r3
 800af78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af7c:	464b      	mov	r3, r9
 800af7e:	eb45 0303 	adc.w	r3, r5, r3
 800af82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800afa2:	4629      	mov	r1, r5
 800afa4:	008b      	lsls	r3, r1, #2
 800afa6:	4621      	mov	r1, r4
 800afa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afac:	4621      	mov	r1, r4
 800afae:	008a      	lsls	r2, r1, #2
 800afb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800afb4:	f7f5 f914 	bl	80001e0 <__aeabi_uldivmod>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4b60      	ldr	r3, [pc, #384]	; (800b140 <UART_SetConfig+0x4e4>)
 800afbe:	fba3 2302 	umull	r2, r3, r3, r2
 800afc2:	095b      	lsrs	r3, r3, #5
 800afc4:	011c      	lsls	r4, r3, #4
 800afc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800afd8:	4642      	mov	r2, r8
 800afda:	464b      	mov	r3, r9
 800afdc:	1891      	adds	r1, r2, r2
 800afde:	61b9      	str	r1, [r7, #24]
 800afe0:	415b      	adcs	r3, r3
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afe8:	4641      	mov	r1, r8
 800afea:	1851      	adds	r1, r2, r1
 800afec:	6139      	str	r1, [r7, #16]
 800afee:	4649      	mov	r1, r9
 800aff0:	414b      	adcs	r3, r1
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	f04f 0300 	mov.w	r3, #0
 800affc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b000:	4659      	mov	r1, fp
 800b002:	00cb      	lsls	r3, r1, #3
 800b004:	4651      	mov	r1, sl
 800b006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b00a:	4651      	mov	r1, sl
 800b00c:	00ca      	lsls	r2, r1, #3
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	4603      	mov	r3, r0
 800b014:	4642      	mov	r2, r8
 800b016:	189b      	adds	r3, r3, r2
 800b018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b01c:	464b      	mov	r3, r9
 800b01e:	460a      	mov	r2, r1
 800b020:	eb42 0303 	adc.w	r3, r2, r3
 800b024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	67bb      	str	r3, [r7, #120]	; 0x78
 800b032:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b040:	4649      	mov	r1, r9
 800b042:	008b      	lsls	r3, r1, #2
 800b044:	4641      	mov	r1, r8
 800b046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b04a:	4641      	mov	r1, r8
 800b04c:	008a      	lsls	r2, r1, #2
 800b04e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b052:	f7f5 f8c5 	bl	80001e0 <__aeabi_uldivmod>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4b39      	ldr	r3, [pc, #228]	; (800b140 <UART_SetConfig+0x4e4>)
 800b05c:	fba3 1302 	umull	r1, r3, r3, r2
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	2164      	movs	r1, #100	; 0x64
 800b064:	fb01 f303 	mul.w	r3, r1, r3
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	3332      	adds	r3, #50	; 0x32
 800b06e:	4a34      	ldr	r2, [pc, #208]	; (800b140 <UART_SetConfig+0x4e4>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b07a:	441c      	add	r4, r3
 800b07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b080:	2200      	movs	r2, #0
 800b082:	673b      	str	r3, [r7, #112]	; 0x70
 800b084:	677a      	str	r2, [r7, #116]	; 0x74
 800b086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b08a:	4642      	mov	r2, r8
 800b08c:	464b      	mov	r3, r9
 800b08e:	1891      	adds	r1, r2, r2
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	415b      	adcs	r3, r3
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b09a:	4641      	mov	r1, r8
 800b09c:	1851      	adds	r1, r2, r1
 800b09e:	6039      	str	r1, [r7, #0]
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	414b      	adcs	r3, r1
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	f04f 0200 	mov.w	r2, #0
 800b0aa:	f04f 0300 	mov.w	r3, #0
 800b0ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	00cb      	lsls	r3, r1, #3
 800b0b6:	4651      	mov	r1, sl
 800b0b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0bc:	4651      	mov	r1, sl
 800b0be:	00ca      	lsls	r2, r1, #3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	189b      	adds	r3, r3, r2
 800b0ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	460a      	mov	r2, r1
 800b0d0:	eb42 0303 	adc.w	r3, r2, r3
 800b0d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	663b      	str	r3, [r7, #96]	; 0x60
 800b0e0:	667a      	str	r2, [r7, #100]	; 0x64
 800b0e2:	f04f 0200 	mov.w	r2, #0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	008b      	lsls	r3, r1, #2
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	008a      	lsls	r2, r1, #2
 800b0fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b100:	f7f5 f86e 	bl	80001e0 <__aeabi_uldivmod>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <UART_SetConfig+0x4e4>)
 800b10a:	fba3 1302 	umull	r1, r3, r3, r2
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	2164      	movs	r1, #100	; 0x64
 800b112:	fb01 f303 	mul.w	r3, r1, r3
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	011b      	lsls	r3, r3, #4
 800b11a:	3332      	adds	r3, #50	; 0x32
 800b11c:	4a08      	ldr	r2, [pc, #32]	; (800b140 <UART_SetConfig+0x4e4>)
 800b11e:	fba2 2303 	umull	r2, r3, r2, r3
 800b122:	095b      	lsrs	r3, r3, #5
 800b124:	f003 020f 	and.w	r2, r3, #15
 800b128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4422      	add	r2, r4
 800b130:	609a      	str	r2, [r3, #8]
}
 800b132:	bf00      	nop
 800b134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b138:	46bd      	mov	sp, r7
 800b13a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b13e:	bf00      	nop
 800b140:	51eb851f 	.word	0x51eb851f

0800b144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b144:	b084      	sub	sp, #16
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	f107 001c 	add.w	r0, r7, #28
 800b152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d122      	bne.n	800b1a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b186:	2b01      	cmp	r3, #1
 800b188:	d105      	bne.n	800b196 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f001 fbee 	bl	800c978 <USB_CoreReset>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
 800b1a0:	e01a      	b.n	800b1d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 fbe2 	bl	800c978 <USB_CoreReset>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	639a      	str	r2, [r3, #56]	; 0x38
 800b1ca:	e005      	b.n	800b1d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d10b      	bne.n	800b1f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	f043 0206 	orr.w	r2, r3, #6
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f043 0220 	orr.w	r2, r3, #32
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b202:	b004      	add	sp, #16
 800b204:	4770      	bx	lr
	...

0800b208 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d165      	bne.n	800b2e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	4a41      	ldr	r2, [pc, #260]	; (800b324 <USB_SetTurnaroundTime+0x11c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d906      	bls.n	800b232 <USB_SetTurnaroundTime+0x2a>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	4a40      	ldr	r2, [pc, #256]	; (800b328 <USB_SetTurnaroundTime+0x120>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d202      	bcs.n	800b232 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b22c:	230f      	movs	r3, #15
 800b22e:	617b      	str	r3, [r7, #20]
 800b230:	e062      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	4a3c      	ldr	r2, [pc, #240]	; (800b328 <USB_SetTurnaroundTime+0x120>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d306      	bcc.n	800b248 <USB_SetTurnaroundTime+0x40>
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	4a3b      	ldr	r2, [pc, #236]	; (800b32c <USB_SetTurnaroundTime+0x124>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d202      	bcs.n	800b248 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b242:	230e      	movs	r3, #14
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	e057      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	4a38      	ldr	r2, [pc, #224]	; (800b32c <USB_SetTurnaroundTime+0x124>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d306      	bcc.n	800b25e <USB_SetTurnaroundTime+0x56>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	4a37      	ldr	r2, [pc, #220]	; (800b330 <USB_SetTurnaroundTime+0x128>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d202      	bcs.n	800b25e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b258:	230d      	movs	r3, #13
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e04c      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	4a33      	ldr	r2, [pc, #204]	; (800b330 <USB_SetTurnaroundTime+0x128>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d306      	bcc.n	800b274 <USB_SetTurnaroundTime+0x6c>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4a32      	ldr	r2, [pc, #200]	; (800b334 <USB_SetTurnaroundTime+0x12c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d802      	bhi.n	800b274 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b26e:	230c      	movs	r3, #12
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	e041      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4a2f      	ldr	r2, [pc, #188]	; (800b334 <USB_SetTurnaroundTime+0x12c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d906      	bls.n	800b28a <USB_SetTurnaroundTime+0x82>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	4a2e      	ldr	r2, [pc, #184]	; (800b338 <USB_SetTurnaroundTime+0x130>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d802      	bhi.n	800b28a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b284:	230b      	movs	r3, #11
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e036      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	4a2a      	ldr	r2, [pc, #168]	; (800b338 <USB_SetTurnaroundTime+0x130>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d906      	bls.n	800b2a0 <USB_SetTurnaroundTime+0x98>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4a29      	ldr	r2, [pc, #164]	; (800b33c <USB_SetTurnaroundTime+0x134>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d802      	bhi.n	800b2a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b29a:	230a      	movs	r3, #10
 800b29c:	617b      	str	r3, [r7, #20]
 800b29e:	e02b      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4a26      	ldr	r2, [pc, #152]	; (800b33c <USB_SetTurnaroundTime+0x134>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d906      	bls.n	800b2b6 <USB_SetTurnaroundTime+0xae>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	4a25      	ldr	r2, [pc, #148]	; (800b340 <USB_SetTurnaroundTime+0x138>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d202      	bcs.n	800b2b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2b0:	2309      	movs	r3, #9
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e020      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4a21      	ldr	r2, [pc, #132]	; (800b340 <USB_SetTurnaroundTime+0x138>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d306      	bcc.n	800b2cc <USB_SetTurnaroundTime+0xc4>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4a20      	ldr	r2, [pc, #128]	; (800b344 <USB_SetTurnaroundTime+0x13c>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d802      	bhi.n	800b2cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	e015      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4a1d      	ldr	r2, [pc, #116]	; (800b344 <USB_SetTurnaroundTime+0x13c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d906      	bls.n	800b2e2 <USB_SetTurnaroundTime+0xda>
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4a1c      	ldr	r2, [pc, #112]	; (800b348 <USB_SetTurnaroundTime+0x140>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d202      	bcs.n	800b2e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b2dc:	2307      	movs	r3, #7
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e00a      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b2e2:	2306      	movs	r3, #6
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e007      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d102      	bne.n	800b2f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b2ee:	2309      	movs	r3, #9
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	e001      	b.n	800b2f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b2f4:	2309      	movs	r3, #9
 800b2f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68da      	ldr	r2, [r3, #12]
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	029b      	lsls	r3, r3, #10
 800b30c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b310:	431a      	orrs	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	371c      	adds	r7, #28
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	00d8acbf 	.word	0x00d8acbf
 800b328:	00e4e1c0 	.word	0x00e4e1c0
 800b32c:	00f42400 	.word	0x00f42400
 800b330:	01067380 	.word	0x01067380
 800b334:	011a499f 	.word	0x011a499f
 800b338:	01312cff 	.word	0x01312cff
 800b33c:	014ca43f 	.word	0x014ca43f
 800b340:	016e3600 	.word	0x016e3600
 800b344:	01a6ab1f 	.word	0x01a6ab1f
 800b348:	01e84800 	.word	0x01e84800

0800b34c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f043 0201 	orr.w	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b36e:	b480      	push	{r7}
 800b370:	b083      	sub	sp, #12
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f023 0201 	bic.w	r2, r3, #1
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	460b      	mov	r3, r1
 800b39a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b3ac:	78fb      	ldrb	r3, [r7, #3]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d115      	bne.n	800b3de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f7f6 fd8c 	bl	8001edc <HAL_Delay>
      ms++;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fa45 	bl	800c85a <USB_GetMode>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d01e      	beq.n	800b414 <USB_SetCurrentMode+0x84>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b31      	cmp	r3, #49	; 0x31
 800b3da:	d9f0      	bls.n	800b3be <USB_SetCurrentMode+0x2e>
 800b3dc:	e01a      	b.n	800b414 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b3de:	78fb      	ldrb	r3, [r7, #3]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d115      	bne.n	800b410 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b3f0:	2001      	movs	r0, #1
 800b3f2:	f7f6 fd73 	bl	8001edc <HAL_Delay>
      ms++;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f001 fa2c 	bl	800c85a <USB_GetMode>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <USB_SetCurrentMode+0x84>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b31      	cmp	r3, #49	; 0x31
 800b40c:	d9f0      	bls.n	800b3f0 <USB_SetCurrentMode+0x60>
 800b40e:	e001      	b.n	800b414 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e005      	b.n	800b420 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b32      	cmp	r3, #50	; 0x32
 800b418:	d101      	bne.n	800b41e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b428:	b084      	sub	sp, #16
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b086      	sub	sp, #24
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b442:	2300      	movs	r3, #0
 800b444:	613b      	str	r3, [r7, #16]
 800b446:	e009      	b.n	800b45c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	3340      	adds	r3, #64	; 0x40
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	4413      	add	r3, r2
 800b452:	2200      	movs	r2, #0
 800b454:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	3301      	adds	r3, #1
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b0e      	cmp	r3, #14
 800b460:	d9f2      	bls.n	800b448 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b464:	2b00      	cmp	r3, #0
 800b466:	d11c      	bne.n	800b4a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b476:	f043 0302 	orr.w	r3, r3, #2
 800b47a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38
 800b4a0:	e00b      	b.n	800b4ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	680b      	ldr	r3, [r1, #0]
 800b4d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d10c      	bne.n	800b4fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f965 	bl	800b7b8 <USB_SetDevSpeed>
 800b4ee:	e008      	b.n	800b502 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f960 	bl	800b7b8 <USB_SetDevSpeed>
 800b4f8:	e003      	b.n	800b502 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b4fa:	2103      	movs	r1, #3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f95b 	bl	800b7b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b502:	2110      	movs	r1, #16
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f8f3 	bl	800b6f0 <USB_FlushTxFifo>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f91f 	bl	800b758 <USB_FlushRxFifo>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b52a:	461a      	mov	r2, r3
 800b52c:	2300      	movs	r3, #0
 800b52e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b536:	461a      	mov	r2, r3
 800b538:	2300      	movs	r3, #0
 800b53a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b542:	461a      	mov	r2, r3
 800b544:	2300      	movs	r3, #0
 800b546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b548:	2300      	movs	r3, #0
 800b54a:	613b      	str	r3, [r7, #16]
 800b54c:	e043      	b.n	800b5d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b564:	d118      	bne.n	800b598 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10a      	bne.n	800b582 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b578:	461a      	mov	r2, r3
 800b57a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	e013      	b.n	800b5aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58e:	461a      	mov	r2, r3
 800b590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	e008      	b.n	800b5aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b5ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	613b      	str	r3, [r7, #16]
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d3b7      	bcc.n	800b54e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	613b      	str	r3, [r7, #16]
 800b5e2:	e043      	b.n	800b66c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5fa:	d118      	bne.n	800b62e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	461a      	mov	r2, r3
 800b610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	e013      	b.n	800b640 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b624:	461a      	mov	r2, r3
 800b626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	e008      	b.n	800b640 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63a:	461a      	mov	r2, r3
 800b63c:	2300      	movs	r3, #0
 800b63e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64c:	461a      	mov	r2, r3
 800b64e:	2300      	movs	r3, #0
 800b650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65e:	461a      	mov	r2, r3
 800b660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	3301      	adds	r3, #1
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	429a      	cmp	r2, r3
 800b672:	d3b7      	bcc.n	800b5e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d105      	bne.n	800b6a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	f043 0210 	orr.w	r2, r3, #16
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699a      	ldr	r2, [r3, #24]
 800b6ac:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <USB_DevInit+0x2c4>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	f043 0208 	orr.w	r2, r3, #8
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d107      	bne.n	800b6dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6d4:	f043 0304 	orr.w	r3, r3, #4
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6e8:	b004      	add	sp, #16
 800b6ea:	4770      	bx	lr
 800b6ec:	803c3800 	.word	0x803c3800

0800b6f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3301      	adds	r3, #1
 800b702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4a13      	ldr	r2, [pc, #76]	; (800b754 <USB_FlushTxFifo+0x64>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d901      	bls.n	800b710 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e01b      	b.n	800b748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	daf2      	bge.n	800b6fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	019b      	lsls	r3, r3, #6
 800b720:	f043 0220 	orr.w	r2, r3, #32
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3301      	adds	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4a08      	ldr	r2, [pc, #32]	; (800b754 <USB_FlushTxFifo+0x64>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d901      	bls.n	800b73a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e006      	b.n	800b748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b20      	cmp	r3, #32
 800b744:	d0f0      	beq.n	800b728 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr
 800b754:	00030d40 	.word	0x00030d40

0800b758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b760:	2300      	movs	r3, #0
 800b762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4a11      	ldr	r2, [pc, #68]	; (800b7b4 <USB_FlushRxFifo+0x5c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d901      	bls.n	800b776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e018      	b.n	800b7a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	daf2      	bge.n	800b764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2210      	movs	r2, #16
 800b786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	3301      	adds	r3, #1
 800b78c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	4a08      	ldr	r2, [pc, #32]	; (800b7b4 <USB_FlushRxFifo+0x5c>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d901      	bls.n	800b79a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e006      	b.n	800b7a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b10      	cmp	r3, #16
 800b7a4:	d0f0      	beq.n	800b788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	00030d40 	.word	0x00030d40

0800b7b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	78fb      	ldrb	r3, [r7, #3]
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b087      	sub	sp, #28
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f003 0306 	and.w	r3, r3, #6
 800b802:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b80a:	2300      	movs	r3, #0
 800b80c:	75fb      	strb	r3, [r7, #23]
 800b80e:	e00a      	b.n	800b826 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d002      	beq.n	800b81c <USB_GetDevSpeed+0x32>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b06      	cmp	r3, #6
 800b81a:	d102      	bne.n	800b822 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b81c:	2302      	movs	r3, #2
 800b81e:	75fb      	strb	r3, [r7, #23]
 800b820:	e001      	b.n	800b826 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b822:	230f      	movs	r3, #15
 800b824:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b826:	7dfb      	ldrb	r3, [r7, #23]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	371c      	adds	r7, #28
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	785b      	ldrb	r3, [r3, #1]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d13a      	bne.n	800b8c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b856:	69da      	ldr	r2, [r3, #28]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	f003 030f 	and.w	r3, r3, #15
 800b860:	2101      	movs	r1, #1
 800b862:	fa01 f303 	lsl.w	r3, r1, r3
 800b866:	b29b      	uxth	r3, r3
 800b868:	68f9      	ldr	r1, [r7, #12]
 800b86a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b86e:	4313      	orrs	r3, r2
 800b870:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d155      	bne.n	800b934 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	791b      	ldrb	r3, [r3, #4]
 800b8a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	059b      	lsls	r3, r3, #22
 800b8aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	0151      	lsls	r1, r2, #5
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	440a      	add	r2, r1
 800b8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	e036      	b.n	800b934 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8cc:	69da      	ldr	r2, [r3, #28]
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 030f 	and.w	r3, r3, #15
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8dc:	041b      	lsls	r3, r3, #16
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d11a      	bne.n	800b934 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	791b      	ldrb	r3, [r3, #4]
 800b918:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b91a:	430b      	orrs	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	0151      	lsls	r1, r2, #5
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	440a      	add	r2, r1
 800b926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b92a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b932:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
	...

0800b944 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d161      	bne.n	800ba24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	015a      	lsls	r2, r3, #5
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4413      	add	r3, r2
 800b968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b976:	d11f      	bne.n	800b9b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b996:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	0151      	lsls	r1, r2, #5
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	440a      	add	r2, r1
 800b9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	43db      	mvns	r3, r3
 800b9d2:	68f9      	ldr	r1, [r7, #12]
 800b9d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9d8:	4013      	ands	r3, r2
 800b9da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9e2:	69da      	ldr	r2, [r3, #28]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f003 030f 	and.w	r3, r3, #15
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	43db      	mvns	r3, r3
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	0159      	lsls	r1, r3, #5
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	440b      	add	r3, r1
 800ba16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4b35      	ldr	r3, [pc, #212]	; (800baf4 <USB_DeactivateEndpoint+0x1b0>)
 800ba1e:	4013      	ands	r3, r2
 800ba20:	600b      	str	r3, [r1, #0]
 800ba22:	e060      	b.n	800bae6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba3a:	d11f      	bne.n	800ba7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	0151      	lsls	r1, r2, #5
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	440a      	add	r2, r1
 800ba52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba92:	041b      	lsls	r3, r3, #16
 800ba94:	43db      	mvns	r3, r3
 800ba96:	68f9      	ldr	r1, [r7, #12]
 800ba98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa6:	69da      	ldr	r2, [r3, #28]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	f003 030f 	and.w	r3, r3, #15
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f303 	lsl.w	r3, r1, r3
 800bab6:	041b      	lsls	r3, r3, #16
 800bab8:	43db      	mvns	r3, r3
 800baba:	68f9      	ldr	r1, [r7, #12]
 800babc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bac0:	4013      	ands	r3, r2
 800bac2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	0159      	lsls	r1, r3, #5
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	440b      	add	r3, r1
 800bada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bade:	4619      	mov	r1, r3
 800bae0:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <USB_DeactivateEndpoint+0x1b4>)
 800bae2:	4013      	ands	r3, r2
 800bae4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	ec337800 	.word	0xec337800
 800baf8:	eff37800 	.word	0xeff37800

0800bafc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08a      	sub	sp, #40	; 0x28
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	4613      	mov	r3, r2
 800bb08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	f040 815c 	bne.w	800bdd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d132      	bne.n	800bb8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	015a      	lsls	r2, r3, #5
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	0151      	lsls	r1, r2, #5
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	440a      	add	r2, r1
 800bb3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	69fa      	ldr	r2, [r7, #28]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	0151      	lsls	r1, r2, #5
 800bb7c:	69fa      	ldr	r2, [r7, #28]
 800bb7e:	440a      	add	r2, r1
 800bb80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb84:	0cdb      	lsrs	r3, r3, #19
 800bb86:	04db      	lsls	r3, r3, #19
 800bb88:	6113      	str	r3, [r2, #16]
 800bb8a:	e074      	b.n	800bc76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	0151      	lsls	r1, r2, #5
 800bb9e:	69fa      	ldr	r2, [r7, #28]
 800bba0:	440a      	add	r2, r1
 800bba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bba6:	0cdb      	lsrs	r3, r3, #19
 800bba8:	04db      	lsls	r3, r3, #19
 800bbaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	0151      	lsls	r1, r2, #5
 800bbbe:	69fa      	ldr	r2, [r7, #28]
 800bbc0:	440a      	add	r2, r1
 800bbc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bbca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bbce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	015a      	lsls	r2, r3, #5
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbdc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	6999      	ldr	r1, [r3, #24]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	440b      	add	r3, r1
 800bbe8:	1e59      	subs	r1, r3, #1
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	fbb1 f3f3 	udiv	r3, r1, r3
 800bbf2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bbf4:	4b9d      	ldr	r3, [pc, #628]	; (800be6c <USB_EPStartXfer+0x370>)
 800bbf6:	400b      	ands	r3, r1
 800bbf8:	69b9      	ldr	r1, [r7, #24]
 800bbfa:	0148      	lsls	r0, r1, #5
 800bbfc:	69f9      	ldr	r1, [r7, #28]
 800bbfe:	4401      	add	r1, r0
 800bc00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc04:	4313      	orrs	r3, r2
 800bc06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc1e:	69b9      	ldr	r1, [r7, #24]
 800bc20:	0148      	lsls	r0, r1, #5
 800bc22:	69f9      	ldr	r1, [r7, #28]
 800bc24:	4401      	add	r1, r0
 800bc26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	791b      	ldrb	r3, [r3, #4]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d11f      	bne.n	800bc76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	69fa      	ldr	r2, [r7, #28]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bc54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	0151      	lsls	r1, r2, #5
 800bc68:	69fa      	ldr	r2, [r7, #28]
 800bc6a:	440a      	add	r2, r1
 800bc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d14b      	bne.n	800bd14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d009      	beq.n	800bc98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	015a      	lsls	r2, r3, #5
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc90:	461a      	mov	r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	791b      	ldrb	r3, [r3, #4]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d128      	bne.n	800bcf2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d110      	bne.n	800bcd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	0151      	lsls	r1, r2, #5
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	440a      	add	r2, r1
 800bcc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	e00f      	b.n	800bcf2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	0151      	lsls	r1, r2, #5
 800bce4:	69fa      	ldr	r2, [r7, #28]
 800bce6:	440a      	add	r2, r1
 800bce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	69ba      	ldr	r2, [r7, #24]
 800bd02:	0151      	lsls	r1, r2, #5
 800bd04:	69fa      	ldr	r2, [r7, #28]
 800bd06:	440a      	add	r2, r1
 800bd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	e133      	b.n	800bf7c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	0151      	lsls	r1, r2, #5
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	440a      	add	r2, r1
 800bd2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	791b      	ldrb	r3, [r3, #4]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d015      	beq.n	800bd68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 811b 	beq.w	800bf7c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	f003 030f 	and.w	r3, r3, #15
 800bd56:	2101      	movs	r1, #1
 800bd58:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5c:	69f9      	ldr	r1, [r7, #28]
 800bd5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd62:	4313      	orrs	r3, r2
 800bd64:	634b      	str	r3, [r1, #52]	; 0x34
 800bd66:	e109      	b.n	800bf7c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d110      	bne.n	800bd9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	0151      	lsls	r1, r2, #5
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	440a      	add	r2, r1
 800bd8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e00f      	b.n	800bdba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	0151      	lsls	r1, r2, #5
 800bdac:	69fa      	ldr	r2, [r7, #28]
 800bdae:	440a      	add	r2, r1
 800bdb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	6919      	ldr	r1, [r3, #16]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	781a      	ldrb	r2, [r3, #0]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	b298      	uxth	r0, r3
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	4603      	mov	r3, r0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fade 	bl	800c390 <USB_WritePacket>
 800bdd4:	e0d2      	b.n	800bf7c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	0151      	lsls	r1, r2, #5
 800bde8:	69fa      	ldr	r2, [r7, #28]
 800bdea:	440a      	add	r2, r1
 800bdec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdf0:	0cdb      	lsrs	r3, r3, #19
 800bdf2:	04db      	lsls	r3, r3, #19
 800bdf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	015a      	lsls	r2, r3, #5
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	69ba      	ldr	r2, [r7, #24]
 800be06:	0151      	lsls	r1, r2, #5
 800be08:	69fa      	ldr	r2, [r7, #28]
 800be0a:	440a      	add	r2, r1
 800be0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d126      	bne.n	800be70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2e:	691a      	ldr	r2, [r3, #16]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be38:	69b9      	ldr	r1, [r7, #24]
 800be3a:	0148      	lsls	r0, r1, #5
 800be3c:	69f9      	ldr	r1, [r7, #28]
 800be3e:	4401      	add	r1, r0
 800be40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be44:	4313      	orrs	r3, r2
 800be46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	015a      	lsls	r2, r3, #5
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	4413      	add	r3, r2
 800be50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	0151      	lsls	r1, r2, #5
 800be5a:	69fa      	ldr	r2, [r7, #28]
 800be5c:	440a      	add	r2, r1
 800be5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be66:	6113      	str	r3, [r2, #16]
 800be68:	e03a      	b.n	800bee0 <USB_EPStartXfer+0x3e4>
 800be6a:	bf00      	nop
 800be6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	699a      	ldr	r2, [r3, #24]
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	1e5a      	subs	r2, r3, #1
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	fbb2 f3f3 	udiv	r3, r2, r3
 800be84:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	8afa      	ldrh	r2, [r7, #22]
 800be8c:	fb03 f202 	mul.w	r2, r3, r2
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea0:	691a      	ldr	r2, [r3, #16]
 800bea2:	8afb      	ldrh	r3, [r7, #22]
 800bea4:	04d9      	lsls	r1, r3, #19
 800bea6:	4b38      	ldr	r3, [pc, #224]	; (800bf88 <USB_EPStartXfer+0x48c>)
 800bea8:	400b      	ands	r3, r1
 800beaa:	69b9      	ldr	r1, [r7, #24]
 800beac:	0148      	lsls	r0, r1, #5
 800beae:	69f9      	ldr	r1, [r7, #28]
 800beb0:	4401      	add	r1, r0
 800beb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800beb6:	4313      	orrs	r3, r2
 800beb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec6:	691a      	ldr	r2, [r3, #16]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	69db      	ldr	r3, [r3, #28]
 800becc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bed0:	69b9      	ldr	r1, [r7, #24]
 800bed2:	0148      	lsls	r0, r1, #5
 800bed4:	69f9      	ldr	r1, [r7, #28]
 800bed6:	4401      	add	r1, r0
 800bed8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bedc:	4313      	orrs	r3, r2
 800bede:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d10d      	bne.n	800bf02 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6919      	ldr	r1, [r3, #16]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	015a      	lsls	r2, r3, #5
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	4413      	add	r3, r2
 800befa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800befe:	460a      	mov	r2, r1
 800bf00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	791b      	ldrb	r3, [r3, #4]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d128      	bne.n	800bf5c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d110      	bne.n	800bf3c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	69ba      	ldr	r2, [r7, #24]
 800bf2a:	0151      	lsls	r1, r2, #5
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	440a      	add	r2, r1
 800bf30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	e00f      	b.n	800bf5c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	015a      	lsls	r2, r3, #5
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	4413      	add	r3, r2
 800bf44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	0151      	lsls	r1, r2, #5
 800bf4e:	69fa      	ldr	r2, [r7, #28]
 800bf50:	440a      	add	r2, r1
 800bf52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	69fa      	ldr	r2, [r7, #28]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3720      	adds	r7, #32
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	1ff80000 	.word	0x1ff80000

0800bf8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b087      	sub	sp, #28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	785b      	ldrb	r3, [r3, #1]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	f040 80ce 	bne.w	800c14a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d132      	bne.n	800c01c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	0151      	lsls	r1, r2, #5
 800bfc8:	697a      	ldr	r2, [r7, #20]
 800bfca:	440a      	add	r2, r1
 800bfcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	015a      	lsls	r2, r3, #5
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	0151      	lsls	r1, r2, #5
 800bfec:	697a      	ldr	r2, [r7, #20]
 800bfee:	440a      	add	r2, r1
 800bff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	4413      	add	r3, r2
 800c002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c014:	0cdb      	lsrs	r3, r3, #19
 800c016:	04db      	lsls	r3, r3, #19
 800c018:	6113      	str	r3, [r2, #16]
 800c01a:	e04e      	b.n	800c0ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	0151      	lsls	r1, r2, #5
 800c02e:	697a      	ldr	r2, [r7, #20]
 800c030:	440a      	add	r2, r1
 800c032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c036:	0cdb      	lsrs	r3, r3, #19
 800c038:	04db      	lsls	r3, r3, #19
 800c03a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	693a      	ldr	r2, [r7, #16]
 800c04c:	0151      	lsls	r1, r2, #5
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	440a      	add	r2, r1
 800c052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c05a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c05e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	699a      	ldr	r2, [r3, #24]
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d903      	bls.n	800c074 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	693a      	ldr	r2, [r7, #16]
 800c084:	0151      	lsls	r1, r2, #5
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	440a      	add	r2, r1
 800c08a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c08e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a0:	691a      	ldr	r2, [r3, #16]
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	699b      	ldr	r3, [r3, #24]
 800c0a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0aa:	6939      	ldr	r1, [r7, #16]
 800c0ac:	0148      	lsls	r0, r1, #5
 800c0ae:	6979      	ldr	r1, [r7, #20]
 800c0b0:	4401      	add	r1, r0
 800c0b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d11e      	bne.n	800c0fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	015a      	lsls	r2, r3, #5
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	695b      	ldr	r3, [r3, #20]
 800c0da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	e097      	b.n	800c22e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	015a      	lsls	r2, r3, #5
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	4413      	add	r3, r2
 800c106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	0151      	lsls	r1, r2, #5
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	440a      	add	r2, r1
 800c114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c118:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c11c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f000 8083 	beq.w	800c22e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	2101      	movs	r1, #1
 800c13a:	fa01 f303 	lsl.w	r3, r1, r3
 800c13e:	6979      	ldr	r1, [r7, #20]
 800c140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c144:	4313      	orrs	r3, r2
 800c146:	634b      	str	r3, [r1, #52]	; 0x34
 800c148:	e071      	b.n	800c22e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	697a      	ldr	r2, [r7, #20]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c164:	0cdb      	lsrs	r3, r3, #19
 800c166:	04db      	lsls	r3, r3, #19
 800c168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	4413      	add	r3, r2
 800c172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c18c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d003      	beq.n	800c19e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	68da      	ldr	r2, [r3, #12]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	68da      	ldr	r2, [r3, #12]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	0151      	lsls	r1, r2, #5
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	440a      	add	r2, r1
 800c1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1dc:	6939      	ldr	r1, [r7, #16]
 800c1de:	0148      	lsls	r0, r1, #5
 800c1e0:	6979      	ldr	r1, [r7, #20]
 800c1e2:	4401      	add	r1, r0
 800c1e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d10d      	bne.n	800c20e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d009      	beq.n	800c20e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	6919      	ldr	r1, [r3, #16]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	460a      	mov	r2, r1
 800c20c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	015a      	lsls	r2, r3, #5
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	4413      	add	r3, r2
 800c216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c228:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c22c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	371c      	adds	r7, #28
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	785b      	ldrb	r3, [r3, #1]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d14a      	bne.n	800c2f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c26e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c272:	f040 8086 	bne.w	800c382 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	7812      	ldrb	r2, [r2, #0]
 800c28a:	0151      	lsls	r1, r2, #5
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	440a      	add	r2, r1
 800c290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c298:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	015a      	lsls	r2, r3, #5
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	7812      	ldrb	r2, [r2, #0]
 800c2ae:	0151      	lsls	r1, r2, #5
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d902      	bls.n	800c2d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800c2d2:	e056      	b.n	800c382 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ec:	d0e7      	beq.n	800c2be <USB_EPStopXfer+0x82>
 800c2ee:	e048      	b.n	800c382 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c308:	d13b      	bne.n	800c382 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	015a      	lsls	r2, r3, #5
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	4413      	add	r3, r2
 800c314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	7812      	ldrb	r2, [r2, #0]
 800c31e:	0151      	lsls	r1, r2, #5
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	440a      	add	r2, r1
 800c324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c328:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c32c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	4413      	add	r3, r2
 800c338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	7812      	ldrb	r2, [r2, #0]
 800c342:	0151      	lsls	r1, r2, #5
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	440a      	add	r2, r1
 800c348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c350:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c35e:	4293      	cmp	r3, r2
 800c360:	d902      	bls.n	800c368 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	75fb      	strb	r3, [r7, #23]
          break;
 800c366:	e00c      	b.n	800c382 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	015a      	lsls	r2, r3, #5
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	4413      	add	r3, r2
 800c372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c37c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c380:	d0e7      	beq.n	800c352 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c382:	7dfb      	ldrb	r3, [r7, #23]
}
 800c384:	4618      	mov	r0, r3
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c390:	b480      	push	{r7}
 800c392:	b089      	sub	sp, #36	; 0x24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	4611      	mov	r1, r2
 800c39c:	461a      	mov	r2, r3
 800c39e:	460b      	mov	r3, r1
 800c3a0:	71fb      	strb	r3, [r7, #7]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c3ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d123      	bne.n	800c3fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c3b6:	88bb      	ldrh	r3, [r7, #4]
 800c3b8:	3303      	adds	r3, #3
 800c3ba:	089b      	lsrs	r3, r3, #2
 800c3bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c3be:	2300      	movs	r3, #0
 800c3c0:	61bb      	str	r3, [r7, #24]
 800c3c2:	e018      	b.n	800c3f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
 800c3c6:	031a      	lsls	r2, r3, #12
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	61bb      	str	r3, [r7, #24]
 800c3f6:	69ba      	ldr	r2, [r7, #24]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d3e2      	bcc.n	800c3c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3724      	adds	r7, #36	; 0x24
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b08b      	sub	sp, #44	; 0x2c
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	4613      	mov	r3, r2
 800c418:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c422:	88fb      	ldrh	r3, [r7, #6]
 800c424:	089b      	lsrs	r3, r3, #2
 800c426:	b29b      	uxth	r3, r3
 800c428:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c42a:	88fb      	ldrh	r3, [r7, #6]
 800c42c:	f003 0303 	and.w	r3, r3, #3
 800c430:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c432:	2300      	movs	r3, #0
 800c434:	623b      	str	r3, [r7, #32]
 800c436:	e014      	b.n	800c462 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	601a      	str	r2, [r3, #0]
    pDest++;
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	3301      	adds	r3, #1
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	3301      	adds	r3, #1
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	3301      	adds	r3, #1
 800c454:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	3301      	adds	r3, #1
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	3301      	adds	r3, #1
 800c460:	623b      	str	r3, [r7, #32]
 800c462:	6a3a      	ldr	r2, [r7, #32]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	429a      	cmp	r2, r3
 800c468:	d3e6      	bcc.n	800c438 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c46a:	8bfb      	ldrh	r3, [r7, #30]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d01e      	beq.n	800c4ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47a:	461a      	mov	r2, r3
 800c47c:	f107 0310 	add.w	r3, r7, #16
 800c480:	6812      	ldr	r2, [r2, #0]
 800c482:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	b2da      	uxtb	r2, r3
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c494:	701a      	strb	r2, [r3, #0]
      i++;
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	3301      	adds	r3, #1
 800c49a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	3301      	adds	r3, #1
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c4a2:	8bfb      	ldrh	r3, [r7, #30]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c4a8:	8bfb      	ldrh	r3, [r7, #30]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1ea      	bne.n	800c484 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	372c      	adds	r7, #44	; 0x2c
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	785b      	ldrb	r3, [r3, #1]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d12c      	bne.n	800c532 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	db12      	blt.n	800c510 <USB_EPSetStall+0x54>
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00f      	beq.n	800c510 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	0151      	lsls	r1, r2, #5
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	440a      	add	r2, r1
 800c506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c50a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c50e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	015a      	lsls	r2, r3, #5
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	4413      	add	r3, r2
 800c518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	0151      	lsls	r1, r2, #5
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	440a      	add	r2, r1
 800c526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c52a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	e02b      	b.n	800c58a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	db12      	blt.n	800c56a <USB_EPSetStall+0xae>
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00f      	beq.n	800c56a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	0151      	lsls	r1, r2, #5
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	440a      	add	r2, r1
 800c560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c568:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	015a      	lsls	r2, r3, #5
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4413      	add	r3, r2
 800c572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	0151      	lsls	r1, r2, #5
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	440a      	add	r2, r1
 800c580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c588:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	785b      	ldrb	r3, [r3, #1]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d128      	bne.n	800c606 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	0151      	lsls	r1, r2, #5
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	791b      	ldrb	r3, [r3, #4]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d003      	beq.n	800c5e4 <USB_EPClearStall+0x4c>
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	791b      	ldrb	r3, [r3, #4]
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d138      	bne.n	800c656 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	e027      	b.n	800c656 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	0151      	lsls	r1, r2, #5
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	440a      	add	r2, r1
 800c61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c620:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c624:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	791b      	ldrb	r3, [r3, #4]
 800c62a:	2b03      	cmp	r3, #3
 800c62c:	d003      	beq.n	800c636 <USB_EPClearStall+0x9e>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	791b      	ldrb	r3, [r3, #4]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d10f      	bne.n	800c656 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	0151      	lsls	r1, r2, #5
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	440a      	add	r2, r1
 800c64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c654:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c682:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c686:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	011b      	lsls	r3, r3, #4
 800c694:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c698:	68f9      	ldr	r1, [r7, #12]
 800c69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6de:	f023 0302 	bic.w	r3, r3, #2
 800c6e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c720:	f043 0302 	orr.w	r3, r3, #2
 800c724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	4013      	ands	r3, r2
 800c74a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b085      	sub	sp, #20
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	4013      	ands	r3, r2
 800c77c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	0c1b      	lsrs	r3, r3, #16
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c78e:	b480      	push	{r7}
 800c790:	b085      	sub	sp, #20
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	b29b      	uxth	r3, r3
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c7d2:	78fb      	ldrb	r3, [r7, #3]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e8:	695b      	ldr	r3, [r3, #20]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b087      	sub	sp, #28
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	460b      	mov	r3, r1
 800c808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c820:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	f003 030f 	and.w	r3, r3, #15
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	fa22 f303 	lsr.w	r3, r2, r3
 800c82e:	01db      	lsls	r3, r3, #7
 800c830:	b2db      	uxtb	r3, r3
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4313      	orrs	r3, r2
 800c836:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	015a      	lsls	r2, r3, #5
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	4413      	add	r3, r2
 800c840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	4013      	ands	r3, r2
 800c84a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c84c:	68bb      	ldr	r3, [r7, #8]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	371c      	adds	r7, #28
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	f003 0301 	and.w	r3, r3, #1
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c876:	b480      	push	{r7}
 800c878:	b085      	sub	sp, #20
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c890:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c894:	f023 0307 	bic.w	r3, r3, #7
 800c898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	333c      	adds	r3, #60	; 0x3c
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	4a26      	ldr	r2, [pc, #152]	; (800c974 <USB_EP0_OutStart+0xb8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d90a      	bls.n	800c8f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8f0:	d101      	bne.n	800c8f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	e037      	b.n	800c966 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	2300      	movs	r3, #0
 800c900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c924:	f043 0318 	orr.w	r3, r3, #24
 800c928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c938:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c93c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d10f      	bne.n	800c964 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c95e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c962:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	4f54300a 	.word	0x4f54300a

0800c978 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c978:	b480      	push	{r7}
 800c97a:	b085      	sub	sp, #20
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c980:	2300      	movs	r3, #0
 800c982:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4a13      	ldr	r2, [pc, #76]	; (800c9dc <USB_CoreReset+0x64>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d901      	bls.n	800c996 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e01b      	b.n	800c9ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	daf2      	bge.n	800c984 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	f043 0201 	orr.w	r2, r3, #1
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a09      	ldr	r2, [pc, #36]	; (800c9dc <USB_CoreReset+0x64>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d901      	bls.n	800c9c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e006      	b.n	800c9ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d0f0      	beq.n	800c9ae <USB_CoreReset+0x36>

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	00030d40 	.word	0x00030d40

0800c9e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c9ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c9f0:	f004 fbde 	bl	80111b0 <USBD_static_malloc>
 800c9f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d109      	bne.n	800ca10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	32b0      	adds	r2, #176	; 0xb0
 800ca06:	2100      	movs	r1, #0
 800ca08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	e0d4      	b.n	800cbba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca10:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ca14:	2100      	movs	r1, #0
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f006 fc1c 	bl	8013254 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	32b0      	adds	r2, #176	; 0xb0
 800ca26:	68f9      	ldr	r1, [r7, #12]
 800ca28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	32b0      	adds	r2, #176	; 0xb0
 800ca36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7c1b      	ldrb	r3, [r3, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d138      	bne.n	800caba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca48:	4b5e      	ldr	r3, [pc, #376]	; (800cbc4 <USBD_CDC_Init+0x1e4>)
 800ca4a:	7819      	ldrb	r1, [r3, #0]
 800ca4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca50:	2202      	movs	r2, #2
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f004 fa89 	bl	8010f6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca58:	4b5a      	ldr	r3, [pc, #360]	; (800cbc4 <USBD_CDC_Init+0x1e4>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	f003 020f 	and.w	r2, r3, #15
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	4613      	mov	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	440b      	add	r3, r1
 800ca6c:	3324      	adds	r3, #36	; 0x24
 800ca6e:	2201      	movs	r2, #1
 800ca70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca72:	4b55      	ldr	r3, [pc, #340]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800ca74:	7819      	ldrb	r1, [r3, #0]
 800ca76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f004 fa74 	bl	8010f6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca82:	4b51      	ldr	r3, [pc, #324]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	f003 020f 	and.w	r2, r3, #15
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	440b      	add	r3, r1
 800ca96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca9e:	4b4b      	ldr	r3, [pc, #300]	; (800cbcc <USBD_CDC_Init+0x1ec>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	f003 020f 	and.w	r2, r3, #15
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	4613      	mov	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4413      	add	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	440b      	add	r3, r1
 800cab2:	3326      	adds	r3, #38	; 0x26
 800cab4:	2210      	movs	r2, #16
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	e035      	b.n	800cb26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800caba:	4b42      	ldr	r3, [pc, #264]	; (800cbc4 <USBD_CDC_Init+0x1e4>)
 800cabc:	7819      	ldrb	r1, [r3, #0]
 800cabe:	2340      	movs	r3, #64	; 0x40
 800cac0:	2202      	movs	r2, #2
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f004 fa51 	bl	8010f6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cac8:	4b3e      	ldr	r3, [pc, #248]	; (800cbc4 <USBD_CDC_Init+0x1e4>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	f003 020f 	and.w	r2, r3, #15
 800cad0:	6879      	ldr	r1, [r7, #4]
 800cad2:	4613      	mov	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	440b      	add	r3, r1
 800cadc:	3324      	adds	r3, #36	; 0x24
 800cade:	2201      	movs	r2, #1
 800cae0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cae2:	4b39      	ldr	r3, [pc, #228]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800cae4:	7819      	ldrb	r1, [r3, #0]
 800cae6:	2340      	movs	r3, #64	; 0x40
 800cae8:	2202      	movs	r2, #2
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f004 fa3d 	bl	8010f6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800caf0:	4b35      	ldr	r3, [pc, #212]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 020f 	and.w	r2, r3, #15
 800caf8:	6879      	ldr	r1, [r7, #4]
 800cafa:	4613      	mov	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	440b      	add	r3, r1
 800cb04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb08:	2201      	movs	r2, #1
 800cb0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb0c:	4b2f      	ldr	r3, [pc, #188]	; (800cbcc <USBD_CDC_Init+0x1ec>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	f003 020f 	and.w	r2, r3, #15
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	440b      	add	r3, r1
 800cb20:	3326      	adds	r3, #38	; 0x26
 800cb22:	2210      	movs	r2, #16
 800cb24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb26:	4b29      	ldr	r3, [pc, #164]	; (800cbcc <USBD_CDC_Init+0x1ec>)
 800cb28:	7819      	ldrb	r1, [r3, #0]
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	2203      	movs	r2, #3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f004 fa1b 	bl	8010f6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb34:	4b25      	ldr	r3, [pc, #148]	; (800cbcc <USBD_CDC_Init+0x1ec>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	f003 020f 	and.w	r2, r3, #15
 800cb3c:	6879      	ldr	r1, [r7, #4]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	440b      	add	r3, r1
 800cb48:	3324      	adds	r3, #36	; 0x24
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	33b0      	adds	r3, #176	; 0xb0
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb84:	2302      	movs	r3, #2
 800cb86:	e018      	b.n	800cbba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7c1b      	ldrb	r3, [r3, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10a      	bne.n	800cba6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb90:	4b0d      	ldr	r3, [pc, #52]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800cb92:	7819      	ldrb	r1, [r3, #0]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f004 fad2 	bl	8011148 <USBD_LL_PrepareReceive>
 800cba4:	e008      	b.n	800cbb8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cba6:	4b08      	ldr	r3, [pc, #32]	; (800cbc8 <USBD_CDC_Init+0x1e8>)
 800cba8:	7819      	ldrb	r1, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbb0:	2340      	movs	r3, #64	; 0x40
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f004 fac8 	bl	8011148 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000093 	.word	0x20000093
 800cbc8:	20000094 	.word	0x20000094
 800cbcc:	20000095 	.word	0x20000095

0800cbd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cbdc:	4b3a      	ldr	r3, [pc, #232]	; (800ccc8 <USBD_CDC_DeInit+0xf8>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f004 f9e7 	bl	8010fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cbe8:	4b37      	ldr	r3, [pc, #220]	; (800ccc8 <USBD_CDC_DeInit+0xf8>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f003 020f 	and.w	r2, r3, #15
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	440b      	add	r3, r1
 800cbfc:	3324      	adds	r3, #36	; 0x24
 800cbfe:	2200      	movs	r2, #0
 800cc00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc02:	4b32      	ldr	r3, [pc, #200]	; (800cccc <USBD_CDC_DeInit+0xfc>)
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	4619      	mov	r1, r3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f004 f9d4 	bl	8010fb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc0e:	4b2f      	ldr	r3, [pc, #188]	; (800cccc <USBD_CDC_DeInit+0xfc>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	f003 020f 	and.w	r2, r3, #15
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	440b      	add	r3, r1
 800cc22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc26:	2200      	movs	r2, #0
 800cc28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc2a:	4b29      	ldr	r3, [pc, #164]	; (800ccd0 <USBD_CDC_DeInit+0x100>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f004 f9c0 	bl	8010fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc36:	4b26      	ldr	r3, [pc, #152]	; (800ccd0 <USBD_CDC_DeInit+0x100>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 020f 	and.w	r2, r3, #15
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	440b      	add	r3, r1
 800cc4a:	3324      	adds	r3, #36	; 0x24
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc50:	4b1f      	ldr	r3, [pc, #124]	; (800ccd0 <USBD_CDC_DeInit+0x100>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f003 020f 	and.w	r2, r3, #15
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	440b      	add	r3, r1
 800cc64:	3326      	adds	r3, #38	; 0x26
 800cc66:	2200      	movs	r2, #0
 800cc68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	32b0      	adds	r2, #176	; 0xb0
 800cc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d01f      	beq.n	800ccbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	33b0      	adds	r3, #176	; 0xb0
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4413      	add	r3, r2
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	32b0      	adds	r2, #176	; 0xb0
 800cc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f004 fa94 	bl	80111cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	32b0      	adds	r2, #176	; 0xb0
 800ccae:	2100      	movs	r1, #0
 800ccb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20000093 	.word	0x20000093
 800cccc:	20000094 	.word	0x20000094
 800ccd0:	20000095 	.word	0x20000095

0800ccd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	32b0      	adds	r2, #176	; 0xb0
 800cce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e0bf      	b.n	800ce84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d050      	beq.n	800cdb2 <USBD_CDC_Setup+0xde>
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	f040 80af 	bne.w	800ce74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	88db      	ldrh	r3, [r3, #6]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d03a      	beq.n	800cd94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	b25b      	sxtb	r3, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	da1b      	bge.n	800cd60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	33b0      	adds	r3, #176	; 0xb0
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	88d2      	ldrh	r2, [r2, #6]
 800cd44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	88db      	ldrh	r3, [r3, #6]
 800cd4a:	2b07      	cmp	r3, #7
 800cd4c:	bf28      	it	cs
 800cd4e:	2307      	movcs	r3, #7
 800cd50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	89fa      	ldrh	r2, [r7, #14]
 800cd56:	4619      	mov	r1, r3
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f001 fd89 	bl	800e870 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd5e:	e090      	b.n	800ce82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	785a      	ldrb	r2, [r3, #1]
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	88db      	ldrh	r3, [r3, #6]
 800cd6e:	2b3f      	cmp	r3, #63	; 0x3f
 800cd70:	d803      	bhi.n	800cd7a <USBD_CDC_Setup+0xa6>
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	88db      	ldrh	r3, [r3, #6]
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	e000      	b.n	800cd7c <USBD_CDC_Setup+0xa8>
 800cd7a:	2240      	movs	r2, #64	; 0x40
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd82:	6939      	ldr	r1, [r7, #16]
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f001 fd9b 	bl	800e8c8 <USBD_CtlPrepareRx>
      break;
 800cd92:	e076      	b.n	800ce82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	33b0      	adds	r3, #176	; 0xb0
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	7850      	ldrb	r0, [r2, #1]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	4798      	blx	r3
      break;
 800cdb0:	e067      	b.n	800ce82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	785b      	ldrb	r3, [r3, #1]
 800cdb6:	2b0b      	cmp	r3, #11
 800cdb8:	d851      	bhi.n	800ce5e <USBD_CDC_Setup+0x18a>
 800cdba:	a201      	add	r2, pc, #4	; (adr r2, 800cdc0 <USBD_CDC_Setup+0xec>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdf1 	.word	0x0800cdf1
 800cdc4:	0800ce6d 	.word	0x0800ce6d
 800cdc8:	0800ce5f 	.word	0x0800ce5f
 800cdcc:	0800ce5f 	.word	0x0800ce5f
 800cdd0:	0800ce5f 	.word	0x0800ce5f
 800cdd4:	0800ce5f 	.word	0x0800ce5f
 800cdd8:	0800ce5f 	.word	0x0800ce5f
 800cddc:	0800ce5f 	.word	0x0800ce5f
 800cde0:	0800ce5f 	.word	0x0800ce5f
 800cde4:	0800ce5f 	.word	0x0800ce5f
 800cde8:	0800ce1b 	.word	0x0800ce1b
 800cdec:	0800ce45 	.word	0x0800ce45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d107      	bne.n	800ce0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cdfc:	f107 030a 	add.w	r3, r7, #10
 800ce00:	2202      	movs	r2, #2
 800ce02:	4619      	mov	r1, r3
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f001 fd33 	bl	800e870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce0a:	e032      	b.n	800ce72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f001 fcbd 	bl	800e78e <USBD_CtlError>
            ret = USBD_FAIL;
 800ce14:	2303      	movs	r3, #3
 800ce16:	75fb      	strb	r3, [r7, #23]
          break;
 800ce18:	e02b      	b.n	800ce72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d107      	bne.n	800ce36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce26:	f107 030d 	add.w	r3, r7, #13
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 fd1e 	bl	800e870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce34:	e01d      	b.n	800ce72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 fca8 	bl	800e78e <USBD_CtlError>
            ret = USBD_FAIL;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	75fb      	strb	r3, [r7, #23]
          break;
 800ce42:	e016      	b.n	800ce72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d00f      	beq.n	800ce70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f001 fc9b 	bl	800e78e <USBD_CtlError>
            ret = USBD_FAIL;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce5c:	e008      	b.n	800ce70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 fc94 	bl	800e78e <USBD_CtlError>
          ret = USBD_FAIL;
 800ce66:	2303      	movs	r3, #3
 800ce68:	75fb      	strb	r3, [r7, #23]
          break;
 800ce6a:	e002      	b.n	800ce72 <USBD_CDC_Setup+0x19e>
          break;
 800ce6c:	bf00      	nop
 800ce6e:	e008      	b.n	800ce82 <USBD_CDC_Setup+0x1ae>
          break;
 800ce70:	bf00      	nop
      }
      break;
 800ce72:	e006      	b.n	800ce82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f001 fc89 	bl	800e78e <USBD_CtlError>
      ret = USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce80:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	32b0      	adds	r2, #176	; 0xb0
 800ceaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d101      	bne.n	800ceb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e065      	b.n	800cf82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	32b0      	adds	r2, #176	; 0xb0
 800cec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cec6:	78fb      	ldrb	r3, [r7, #3]
 800cec8:	f003 020f 	and.w	r2, r3, #15
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	4613      	mov	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	4413      	add	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	440b      	add	r3, r1
 800ced8:	3318      	adds	r3, #24
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d02f      	beq.n	800cf40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	f003 020f 	and.w	r2, r3, #15
 800cee6:	6879      	ldr	r1, [r7, #4]
 800cee8:	4613      	mov	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	440b      	add	r3, r1
 800cef2:	3318      	adds	r3, #24
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	78fb      	ldrb	r3, [r7, #3]
 800cef8:	f003 010f 	and.w	r1, r3, #15
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	460b      	mov	r3, r1
 800cf00:	00db      	lsls	r3, r3, #3
 800cf02:	440b      	add	r3, r1
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4403      	add	r3, r0
 800cf08:	3348      	adds	r3, #72	; 0x48
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf10:	fb01 f303 	mul.w	r3, r1, r3
 800cf14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d112      	bne.n	800cf40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	f003 020f 	and.w	r2, r3, #15
 800cf20:	6879      	ldr	r1, [r7, #4]
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3318      	adds	r3, #24
 800cf2e:	2200      	movs	r2, #0
 800cf30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf32:	78f9      	ldrb	r1, [r7, #3]
 800cf34:	2300      	movs	r3, #0
 800cf36:	2200      	movs	r2, #0
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f004 f8e4 	bl	8011106 <USBD_LL_Transmit>
 800cf3e:	e01f      	b.n	800cf80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	33b0      	adds	r3, #176	; 0xb0
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d010      	beq.n	800cf80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	33b0      	adds	r3, #176	; 0xb0
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf7c:	78fa      	ldrb	r2, [r7, #3]
 800cf7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	460b      	mov	r3, r1
 800cf94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	32b0      	adds	r2, #176	; 0xb0
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	32b0      	adds	r2, #176	; 0xb0
 800cfb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfb8:	2303      	movs	r3, #3
 800cfba:	e01a      	b.n	800cff2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cfbc:	78fb      	ldrb	r3, [r7, #3]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f004 f8e2 	bl	801118a <USBD_LL_GetRxDataSize>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	33b0      	adds	r3, #176	; 0xb0
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cfec:	4611      	mov	r1, r2
 800cfee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cff0:	2300      	movs	r3, #0
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b084      	sub	sp, #16
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	32b0      	adds	r2, #176	; 0xb0
 800d00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d010:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d018:	2303      	movs	r3, #3
 800d01a:	e025      	b.n	800d068 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	33b0      	adds	r3, #176	; 0xb0
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01a      	beq.n	800d066 <USBD_CDC_EP0_RxReady+0x6c>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d036:	2bff      	cmp	r3, #255	; 0xff
 800d038:	d015      	beq.n	800d066 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	33b0      	adds	r3, #176	; 0xb0
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	4413      	add	r3, r2
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d052:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d05a:	b292      	uxth	r2, r2
 800d05c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	22ff      	movs	r2, #255	; 0xff
 800d062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d078:	2182      	movs	r1, #130	; 0x82
 800d07a:	4818      	ldr	r0, [pc, #96]	; (800d0dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d07c:	f000 fd4f 	bl	800db1e <USBD_GetEpDesc>
 800d080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d082:	2101      	movs	r1, #1
 800d084:	4815      	ldr	r0, [pc, #84]	; (800d0dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d086:	f000 fd4a 	bl	800db1e <USBD_GetEpDesc>
 800d08a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d08c:	2181      	movs	r1, #129	; 0x81
 800d08e:	4813      	ldr	r0, [pc, #76]	; (800d0dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d090:	f000 fd45 	bl	800db1e <USBD_GetEpDesc>
 800d094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	2210      	movs	r2, #16
 800d0a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d006      	beq.n	800d0b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0b0:	711a      	strb	r2, [r3, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d006      	beq.n	800d0ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0c4:	711a      	strb	r2, [r3, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2243      	movs	r2, #67	; 0x43
 800d0ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	20000050 	.word	0x20000050

0800d0e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0e8:	2182      	movs	r1, #130	; 0x82
 800d0ea:	4818      	ldr	r0, [pc, #96]	; (800d14c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0ec:	f000 fd17 	bl	800db1e <USBD_GetEpDesc>
 800d0f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	4815      	ldr	r0, [pc, #84]	; (800d14c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0f6:	f000 fd12 	bl	800db1e <USBD_GetEpDesc>
 800d0fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0fc:	2181      	movs	r1, #129	; 0x81
 800d0fe:	4813      	ldr	r0, [pc, #76]	; (800d14c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d100:	f000 fd0d 	bl	800db1e <USBD_GetEpDesc>
 800d104:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2210      	movs	r2, #16
 800d110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d006      	beq.n	800d126 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2200      	movs	r2, #0
 800d11c:	711a      	strb	r2, [r3, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f042 0202 	orr.w	r2, r2, #2
 800d124:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	711a      	strb	r2, [r3, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	f042 0202 	orr.w	r2, r2, #2
 800d138:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2243      	movs	r2, #67	; 0x43
 800d13e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d140:	4b02      	ldr	r3, [pc, #8]	; (800d14c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	20000050 	.word	0x20000050

0800d150 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d158:	2182      	movs	r1, #130	; 0x82
 800d15a:	4818      	ldr	r0, [pc, #96]	; (800d1bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d15c:	f000 fcdf 	bl	800db1e <USBD_GetEpDesc>
 800d160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d162:	2101      	movs	r1, #1
 800d164:	4815      	ldr	r0, [pc, #84]	; (800d1bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d166:	f000 fcda 	bl	800db1e <USBD_GetEpDesc>
 800d16a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d16c:	2181      	movs	r1, #129	; 0x81
 800d16e:	4813      	ldr	r0, [pc, #76]	; (800d1bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d170:	f000 fcd5 	bl	800db1e <USBD_GetEpDesc>
 800d174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d002      	beq.n	800d182 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2210      	movs	r2, #16
 800d180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d006      	beq.n	800d196 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d190:	711a      	strb	r2, [r3, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d006      	beq.n	800d1aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1a4:	711a      	strb	r2, [r3, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2243      	movs	r2, #67	; 0x43
 800d1ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1b0:	4b02      	ldr	r3, [pc, #8]	; (800d1bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20000050 	.word	0x20000050

0800d1c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	220a      	movs	r2, #10
 800d1cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d1ce:	4b03      	ldr	r3, [pc, #12]	; (800d1dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	2000000c 	.word	0x2000000c

0800d1e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e009      	b.n	800d208 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	33b0      	adds	r3, #176	; 0xb0
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d214:	b480      	push	{r7}
 800d216:	b087      	sub	sp, #28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	32b0      	adds	r2, #176	; 0xb0
 800d22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d101      	bne.n	800d23a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d236:	2303      	movs	r3, #3
 800d238:	e008      	b.n	800d24c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	371c      	adds	r7, #28
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	32b0      	adds	r2, #176	; 0xb0
 800d26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d270:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d101      	bne.n	800d27c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d278:	2303      	movs	r3, #3
 800d27a:	e004      	b.n	800d286 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
	...

0800d294 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	32b0      	adds	r2, #176	; 0xb0
 800d2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	32b0      	adds	r2, #176	; 0xb0
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d101      	bne.n	800d2c6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	e025      	b.n	800d312 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d11f      	bne.n	800d310 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d2d8:	4b10      	ldr	r3, [pc, #64]	; (800d31c <USBD_CDC_TransmitPacket+0x88>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	f003 020f 	and.w	r2, r3, #15
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4403      	add	r3, r0
 800d2f2:	3318      	adds	r3, #24
 800d2f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d2f6:	4b09      	ldr	r3, [pc, #36]	; (800d31c <USBD_CDC_TransmitPacket+0x88>)
 800d2f8:	7819      	ldrb	r1, [r3, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f003 fefd 	bl	8011106 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d310:	7bfb      	ldrb	r3, [r7, #15]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20000093 	.word	0x20000093

0800d320 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	32b0      	adds	r2, #176	; 0xb0
 800d332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d336:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	32b0      	adds	r2, #176	; 0xb0
 800d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e018      	b.n	800d380 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	7c1b      	ldrb	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d10a      	bne.n	800d36c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d356:	4b0c      	ldr	r3, [pc, #48]	; (800d388 <USBD_CDC_ReceivePacket+0x68>)
 800d358:	7819      	ldrb	r1, [r3, #0]
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d360:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f003 feef 	bl	8011148 <USBD_LL_PrepareReceive>
 800d36a:	e008      	b.n	800d37e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d36c:	4b06      	ldr	r3, [pc, #24]	; (800d388 <USBD_CDC_ReceivePacket+0x68>)
 800d36e:	7819      	ldrb	r1, [r3, #0]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d376:	2340      	movs	r3, #64	; 0x40
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f003 fee5 	bl	8011148 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20000094 	.word	0x20000094

0800d38c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	e01f      	b.n	800d3e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	79fa      	ldrb	r2, [r7, #7]
 800d3d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f003 fd5f 	bl	8010e9c <USBD_LL_Init>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d400:	2303      	movs	r3, #3
 800d402:	e025      	b.n	800d450 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	683a      	ldr	r2, [r7, #0]
 800d408:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	32ae      	adds	r2, #174	; 0xae
 800d416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00f      	beq.n	800d440 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	32ae      	adds	r2, #174	; 0xae
 800d42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	f107 020e 	add.w	r2, r7, #14
 800d434:	4610      	mov	r0, r2
 800d436:	4798      	blx	r3
 800d438:	4602      	mov	r2, r0
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f003 fd67 	bl	8010f34 <USBD_LL_Start>
 800d466:	4603      	mov	r3, r0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d478:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	460b      	mov	r3, r1
 800d490:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d009      	beq.n	800d4b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	78fa      	ldrb	r2, [r7, #3]
 800d4aa:	4611      	mov	r1, r2
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	4798      	blx	r3
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b084      	sub	sp, #16
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	78fa      	ldrb	r2, [r7, #3]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	4798      	blx	r3
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	4618      	mov	r0, r3
 800d506:	f001 f908 	bl	800e71a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d518:	461a      	mov	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d526:	f003 031f 	and.w	r3, r3, #31
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d01a      	beq.n	800d564 <USBD_LL_SetupStage+0x72>
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d822      	bhi.n	800d578 <USBD_LL_SetupStage+0x86>
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <USBD_LL_SetupStage+0x4a>
 800d536:	2b01      	cmp	r3, #1
 800d538:	d00a      	beq.n	800d550 <USBD_LL_SetupStage+0x5e>
 800d53a:	e01d      	b.n	800d578 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d542:	4619      	mov	r1, r3
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 fb5f 	bl	800dc08 <USBD_StdDevReq>
 800d54a:	4603      	mov	r3, r0
 800d54c:	73fb      	strb	r3, [r7, #15]
      break;
 800d54e:	e020      	b.n	800d592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fbc7 	bl	800dcec <USBD_StdItfReq>
 800d55e:	4603      	mov	r3, r0
 800d560:	73fb      	strb	r3, [r7, #15]
      break;
 800d562:	e016      	b.n	800d592 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fc29 	bl	800ddc4 <USBD_StdEPReq>
 800d572:	4603      	mov	r3, r0
 800d574:	73fb      	strb	r3, [r7, #15]
      break;
 800d576:	e00c      	b.n	800d592 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d57e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d582:	b2db      	uxtb	r3, r3
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f003 fd34 	bl	8010ff4 <USBD_LL_StallEP>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]
      break;
 800d590:	bf00      	nop
  }

  return ret;
 800d592:	7bfb      	ldrb	r3, [r7, #15]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	607a      	str	r2, [r7, #4]
 800d5a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d5ae:	7afb      	ldrb	r3, [r7, #11]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d16e      	bne.n	800d692 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d5ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	f040 8098 	bne.w	800d6f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	689a      	ldr	r2, [r3, #8]
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d913      	bls.n	800d5fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	1ad2      	subs	r2, r2, r3
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	68da      	ldr	r2, [r3, #12]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	bf28      	it	cs
 800d5ee:	4613      	movcs	r3, r2
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	6879      	ldr	r1, [r7, #4]
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f001 f984 	bl	800e902 <USBD_CtlContinueRx>
 800d5fa:	e07d      	b.n	800d6f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d602:	f003 031f 	and.w	r3, r3, #31
 800d606:	2b02      	cmp	r3, #2
 800d608:	d014      	beq.n	800d634 <USBD_LL_DataOutStage+0x98>
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d81d      	bhi.n	800d64a <USBD_LL_DataOutStage+0xae>
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <USBD_LL_DataOutStage+0x7c>
 800d612:	2b01      	cmp	r3, #1
 800d614:	d003      	beq.n	800d61e <USBD_LL_DataOutStage+0x82>
 800d616:	e018      	b.n	800d64a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d618:	2300      	movs	r3, #0
 800d61a:	75bb      	strb	r3, [r7, #22]
            break;
 800d61c:	e018      	b.n	800d650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4619      	mov	r1, r3
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 fa5e 	bl	800daea <USBD_CoreFindIF>
 800d62e:	4603      	mov	r3, r0
 800d630:	75bb      	strb	r3, [r7, #22]
            break;
 800d632:	e00d      	b.n	800d650 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	4619      	mov	r1, r3
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f000 fa60 	bl	800db04 <USBD_CoreFindEP>
 800d644:	4603      	mov	r3, r0
 800d646:	75bb      	strb	r3, [r7, #22]
            break;
 800d648:	e002      	b.n	800d650 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	75bb      	strb	r3, [r7, #22]
            break;
 800d64e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d650:	7dbb      	ldrb	r3, [r7, #22]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d119      	bne.n	800d68a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d113      	bne.n	800d68a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d662:	7dba      	ldrb	r2, [r7, #22]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	32ae      	adds	r2, #174	; 0xae
 800d668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00b      	beq.n	800d68a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d672:	7dba      	ldrb	r2, [r7, #22]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d67a:	7dba      	ldrb	r2, [r7, #22]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	32ae      	adds	r2, #174	; 0xae
 800d680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f001 f94a 	bl	800e924 <USBD_CtlSendStatus>
 800d690:	e032      	b.n	800d6f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d692:	7afb      	ldrb	r3, [r7, #11]
 800d694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f000 fa31 	bl	800db04 <USBD_CoreFindEP>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6a6:	7dbb      	ldrb	r3, [r7, #22]
 800d6a8:	2bff      	cmp	r3, #255	; 0xff
 800d6aa:	d025      	beq.n	800d6f8 <USBD_LL_DataOutStage+0x15c>
 800d6ac:	7dbb      	ldrb	r3, [r7, #22]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d122      	bne.n	800d6f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d117      	bne.n	800d6ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d6be:	7dba      	ldrb	r2, [r7, #22]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	32ae      	adds	r2, #174	; 0xae
 800d6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c8:	699b      	ldr	r3, [r3, #24]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d6ce:	7dba      	ldrb	r2, [r7, #22]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d6d6:	7dba      	ldrb	r2, [r7, #22]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	32ae      	adds	r2, #174	; 0xae
 800d6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	7afa      	ldrb	r2, [r7, #11]
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	4798      	blx	r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	e000      	b.n	800d6fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b086      	sub	sp, #24
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	460b      	mov	r3, r1
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d710:	7afb      	ldrb	r3, [r7, #11]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d16f      	bne.n	800d7f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3314      	adds	r3, #20
 800d71a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d722:	2b02      	cmp	r3, #2
 800d724:	d15a      	bne.n	800d7dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	689a      	ldr	r2, [r3, #8]
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d914      	bls.n	800d75c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	689a      	ldr	r2, [r3, #8]
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	1ad2      	subs	r2, r2, r3
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	461a      	mov	r2, r3
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f001 f8ac 	bl	800e8a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d74e:	2300      	movs	r3, #0
 800d750:	2200      	movs	r2, #0
 800d752:	2100      	movs	r1, #0
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f003 fcf7 	bl	8011148 <USBD_LL_PrepareReceive>
 800d75a:	e03f      	b.n	800d7dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	68da      	ldr	r2, [r3, #12]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	429a      	cmp	r2, r3
 800d766:	d11c      	bne.n	800d7a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d770:	429a      	cmp	r2, r3
 800d772:	d316      	bcc.n	800d7a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d77e:	429a      	cmp	r2, r3
 800d780:	d20f      	bcs.n	800d7a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d782:	2200      	movs	r2, #0
 800d784:	2100      	movs	r1, #0
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f001 f88d 	bl	800e8a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2200      	movs	r2, #0
 800d790:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d794:	2300      	movs	r3, #0
 800d796:	2200      	movs	r2, #0
 800d798:	2100      	movs	r1, #0
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f003 fcd4 	bl	8011148 <USBD_LL_PrepareReceive>
 800d7a0:	e01c      	b.n	800d7dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d10f      	bne.n	800d7ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d009      	beq.n	800d7ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7ce:	2180      	movs	r1, #128	; 0x80
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f003 fc0f 	bl	8010ff4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f001 f8b7 	bl	800e94a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d03a      	beq.n	800d85c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff fe42 	bl	800d470 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d7f4:	e032      	b.n	800d85c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d7f6:	7afb      	ldrb	r3, [r7, #11]
 800d7f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	4619      	mov	r1, r3
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 f97f 	bl	800db04 <USBD_CoreFindEP>
 800d806:	4603      	mov	r3, r0
 800d808:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d80a:	7dfb      	ldrb	r3, [r7, #23]
 800d80c:	2bff      	cmp	r3, #255	; 0xff
 800d80e:	d025      	beq.n	800d85c <USBD_LL_DataInStage+0x15a>
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d122      	bne.n	800d85c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d11c      	bne.n	800d85c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d822:	7dfa      	ldrb	r2, [r7, #23]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	32ae      	adds	r2, #174	; 0xae
 800d828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d014      	beq.n	800d85c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d832:	7dfa      	ldrb	r2, [r7, #23]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d83a:	7dfa      	ldrb	r2, [r7, #23]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	32ae      	adds	r2, #174	; 0xae
 800d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	7afa      	ldrb	r2, [r7, #11]
 800d848:	4611      	mov	r1, r2
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	4798      	blx	r3
 800d84e:	4603      	mov	r3, r0
 800d850:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d852:	7dbb      	ldrb	r3, [r7, #22]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d858:	7dbb      	ldrb	r3, [r7, #22]
 800d85a:	e000      	b.n	800d85e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d86e:	2300      	movs	r3, #0
 800d870:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d014      	beq.n	800d8cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00e      	beq.n	800d8cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	6852      	ldr	r2, [r2, #4]
 800d8ba:	b2d2      	uxtb	r2, r2
 800d8bc:	4611      	mov	r1, r2
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	4798      	blx	r3
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8cc:	2340      	movs	r3, #64	; 0x40
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f003 fb49 	bl	8010f6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2240      	movs	r2, #64	; 0x40
 800d8e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8e8:	2340      	movs	r3, #64	; 0x40
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2180      	movs	r1, #128	; 0x80
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f003 fb3b 	bl	8010f6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2240      	movs	r2, #64	; 0x40
 800d8fe:	621a      	str	r2, [r3, #32]

  return ret;
 800d900:	7bfb      	ldrb	r3, [r7, #15]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d90a:	b480      	push	{r7}
 800d90c:	b083      	sub	sp, #12
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	78fa      	ldrb	r2, [r7, #3]
 800d91a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b083      	sub	sp, #12
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2204      	movs	r2, #4
 800d944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d956:	b480      	push	{r7}
 800d958:	b083      	sub	sp, #12
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d964:	b2db      	uxtb	r3, r3
 800d966:	2b04      	cmp	r3, #4
 800d968:	d106      	bne.n	800d978 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d970:	b2da      	uxtb	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b082      	sub	sp, #8
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b03      	cmp	r3, #3
 800d998:	d110      	bne.n	800d9bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00b      	beq.n	800d9bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9aa:	69db      	ldr	r3, [r3, #28]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d005      	beq.n	800d9bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b082      	sub	sp, #8
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	32ae      	adds	r2, #174	; 0xae
 800d9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9e4:	2303      	movs	r3, #3
 800d9e6:	e01c      	b.n	800da22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	d115      	bne.n	800da20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	32ae      	adds	r2, #174	; 0xae
 800d9fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da02:	6a1b      	ldr	r3, [r3, #32]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00b      	beq.n	800da20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	32ae      	adds	r2, #174	; 0xae
 800da12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da16:	6a1b      	ldr	r3, [r3, #32]
 800da18:	78fa      	ldrb	r2, [r7, #3]
 800da1a:	4611      	mov	r1, r2
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	460b      	mov	r3, r1
 800da34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	32ae      	adds	r2, #174	; 0xae
 800da40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d101      	bne.n	800da4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da48:	2303      	movs	r3, #3
 800da4a:	e01c      	b.n	800da86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da52:	b2db      	uxtb	r3, r3
 800da54:	2b03      	cmp	r3, #3
 800da56:	d115      	bne.n	800da84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	32ae      	adds	r2, #174	; 0xae
 800da62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	32ae      	adds	r2, #174	; 0xae
 800da76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	78fa      	ldrb	r2, [r7, #3]
 800da7e:	4611      	mov	r1, r2
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00e      	beq.n	800dae0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	6852      	ldr	r2, [r2, #4]
 800dace:	b2d2      	uxtb	r2, r2
 800dad0:	4611      	mov	r1, r2
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	4798      	blx	r3
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dadc:	2303      	movs	r3, #3
 800dade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800daea:	b480      	push	{r7}
 800daec:	b083      	sub	sp, #12
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	460b      	mov	r3, r1
 800daf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800daf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db12:	4618      	mov	r0, r3
 800db14:	370c      	adds	r7, #12
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr

0800db1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b086      	sub	sp, #24
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	460b      	mov	r3, r1
 800db28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	885b      	ldrh	r3, [r3, #2]
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	b29b      	uxth	r3, r3
 800db42:	429a      	cmp	r2, r3
 800db44:	d920      	bls.n	800db88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db4e:	e013      	b.n	800db78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db50:	f107 030a 	add.w	r3, r7, #10
 800db54:	4619      	mov	r1, r3
 800db56:	6978      	ldr	r0, [r7, #20]
 800db58:	f000 f81b 	bl	800db92 <USBD_GetNextDesc>
 800db5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	785b      	ldrb	r3, [r3, #1]
 800db62:	2b05      	cmp	r3, #5
 800db64:	d108      	bne.n	800db78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	789b      	ldrb	r3, [r3, #2]
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	429a      	cmp	r2, r3
 800db72:	d008      	beq.n	800db86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db74:	2300      	movs	r3, #0
 800db76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	885b      	ldrh	r3, [r3, #2]
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	897b      	ldrh	r3, [r7, #10]
 800db80:	429a      	cmp	r2, r3
 800db82:	d8e5      	bhi.n	800db50 <USBD_GetEpDesc+0x32>
 800db84:	e000      	b.n	800db88 <USBD_GetEpDesc+0x6a>
          break;
 800db86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db88:	693b      	ldr	r3, [r7, #16]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db92:	b480      	push	{r7}
 800db94:	b085      	sub	sp, #20
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	881a      	ldrh	r2, [r3, #0]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	4413      	add	r3, r2
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4413      	add	r3, r2
 800dbbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbea:	8a3b      	ldrh	r3, [r7, #16]
 800dbec:	021b      	lsls	r3, r3, #8
 800dbee:	b21a      	sxth	r2, r3
 800dbf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	b21b      	sxth	r3, r3
 800dbf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dbfa:	89fb      	ldrh	r3, [r7, #14]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	371c      	adds	r7, #28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc1e:	2b40      	cmp	r3, #64	; 0x40
 800dc20:	d005      	beq.n	800dc2e <USBD_StdDevReq+0x26>
 800dc22:	2b40      	cmp	r3, #64	; 0x40
 800dc24:	d857      	bhi.n	800dcd6 <USBD_StdDevReq+0xce>
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00f      	beq.n	800dc4a <USBD_StdDevReq+0x42>
 800dc2a:	2b20      	cmp	r3, #32
 800dc2c:	d153      	bne.n	800dcd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	32ae      	adds	r2, #174	; 0xae
 800dc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	4798      	blx	r3
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]
      break;
 800dc48:	e04a      	b.n	800dce0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	785b      	ldrb	r3, [r3, #1]
 800dc4e:	2b09      	cmp	r3, #9
 800dc50:	d83b      	bhi.n	800dcca <USBD_StdDevReq+0xc2>
 800dc52:	a201      	add	r2, pc, #4	; (adr r2, 800dc58 <USBD_StdDevReq+0x50>)
 800dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc58:	0800dcad 	.word	0x0800dcad
 800dc5c:	0800dcc1 	.word	0x0800dcc1
 800dc60:	0800dccb 	.word	0x0800dccb
 800dc64:	0800dcb7 	.word	0x0800dcb7
 800dc68:	0800dccb 	.word	0x0800dccb
 800dc6c:	0800dc8b 	.word	0x0800dc8b
 800dc70:	0800dc81 	.word	0x0800dc81
 800dc74:	0800dccb 	.word	0x0800dccb
 800dc78:	0800dca3 	.word	0x0800dca3
 800dc7c:	0800dc95 	.word	0x0800dc95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fa3c 	bl	800e100 <USBD_GetDescriptor>
          break;
 800dc88:	e024      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc8a:	6839      	ldr	r1, [r7, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fba1 	bl	800e3d4 <USBD_SetAddress>
          break;
 800dc92:	e01f      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fbe0 	bl	800e45c <USBD_SetConfig>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73fb      	strb	r3, [r7, #15]
          break;
 800dca0:	e018      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fc83 	bl	800e5b0 <USBD_GetConfig>
          break;
 800dcaa:	e013      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fcb4 	bl	800e61c <USBD_GetStatus>
          break;
 800dcb4:	e00e      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fce3 	bl	800e684 <USBD_SetFeature>
          break;
 800dcbe:	e009      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fd07 	bl	800e6d6 <USBD_ClrFeature>
          break;
 800dcc8:	e004      	b.n	800dcd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fd5e 	bl	800e78e <USBD_CtlError>
          break;
 800dcd2:	bf00      	nop
      }
      break;
 800dcd4:	e004      	b.n	800dce0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fd58 	bl	800e78e <USBD_CtlError>
      break;
 800dcde:	bf00      	nop
  }

  return ret;
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop

0800dcec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd02:	2b40      	cmp	r3, #64	; 0x40
 800dd04:	d005      	beq.n	800dd12 <USBD_StdItfReq+0x26>
 800dd06:	2b40      	cmp	r3, #64	; 0x40
 800dd08:	d852      	bhi.n	800ddb0 <USBD_StdItfReq+0xc4>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <USBD_StdItfReq+0x26>
 800dd0e:	2b20      	cmp	r3, #32
 800dd10:	d14e      	bne.n	800ddb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	d840      	bhi.n	800dda2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	889b      	ldrh	r3, [r3, #4]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d836      	bhi.n	800dd98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	889b      	ldrh	r3, [r3, #4]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff fed9 	bl	800daea <USBD_CoreFindIF>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd3c:	7bbb      	ldrb	r3, [r7, #14]
 800dd3e:	2bff      	cmp	r3, #255	; 0xff
 800dd40:	d01d      	beq.n	800dd7e <USBD_StdItfReq+0x92>
 800dd42:	7bbb      	ldrb	r3, [r7, #14]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d11a      	bne.n	800dd7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd48:	7bba      	ldrb	r2, [r7, #14]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	32ae      	adds	r2, #174	; 0xae
 800dd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00f      	beq.n	800dd78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd58:	7bba      	ldrb	r2, [r7, #14]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd60:	7bba      	ldrb	r2, [r7, #14]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	32ae      	adds	r2, #174	; 0xae
 800dd66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	4798      	blx	r3
 800dd72:	4603      	mov	r3, r0
 800dd74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd76:	e004      	b.n	800dd82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd7c:	e001      	b.n	800dd82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	88db      	ldrh	r3, [r3, #6]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d110      	bne.n	800ddac <USBD_StdItfReq+0xc0>
 800dd8a:	7bfb      	ldrb	r3, [r7, #15]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10d      	bne.n	800ddac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fdc7 	bl	800e924 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd96:	e009      	b.n	800ddac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fcf7 	bl	800e78e <USBD_CtlError>
          break;
 800dda0:	e004      	b.n	800ddac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fcf2 	bl	800e78e <USBD_CtlError>
          break;
 800ddaa:	e000      	b.n	800ddae <USBD_StdItfReq+0xc2>
          break;
 800ddac:	bf00      	nop
      }
      break;
 800ddae:	e004      	b.n	800ddba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fceb 	bl	800e78e <USBD_CtlError>
      break;
 800ddb8:	bf00      	nop
  }

  return ret;
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	889b      	ldrh	r3, [r3, #4]
 800ddd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dde0:	2b40      	cmp	r3, #64	; 0x40
 800dde2:	d007      	beq.n	800ddf4 <USBD_StdEPReq+0x30>
 800dde4:	2b40      	cmp	r3, #64	; 0x40
 800dde6:	f200 817f 	bhi.w	800e0e8 <USBD_StdEPReq+0x324>
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d02a      	beq.n	800de44 <USBD_StdEPReq+0x80>
 800ddee:	2b20      	cmp	r3, #32
 800ddf0:	f040 817a 	bne.w	800e0e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff fe83 	bl	800db04 <USBD_CoreFindEP>
 800ddfe:	4603      	mov	r3, r0
 800de00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de02:	7b7b      	ldrb	r3, [r7, #13]
 800de04:	2bff      	cmp	r3, #255	; 0xff
 800de06:	f000 8174 	beq.w	800e0f2 <USBD_StdEPReq+0x32e>
 800de0a:	7b7b      	ldrb	r3, [r7, #13]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f040 8170 	bne.w	800e0f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de12:	7b7a      	ldrb	r2, [r7, #13]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de1a:	7b7a      	ldrb	r2, [r7, #13]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	32ae      	adds	r2, #174	; 0xae
 800de20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8163 	beq.w	800e0f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de2c:	7b7a      	ldrb	r2, [r7, #13]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	32ae      	adds	r2, #174	; 0xae
 800de32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	6839      	ldr	r1, [r7, #0]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	4798      	blx	r3
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de42:	e156      	b.n	800e0f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	785b      	ldrb	r3, [r3, #1]
 800de48:	2b03      	cmp	r3, #3
 800de4a:	d008      	beq.n	800de5e <USBD_StdEPReq+0x9a>
 800de4c:	2b03      	cmp	r3, #3
 800de4e:	f300 8145 	bgt.w	800e0dc <USBD_StdEPReq+0x318>
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 809b 	beq.w	800df8e <USBD_StdEPReq+0x1ca>
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d03c      	beq.n	800ded6 <USBD_StdEPReq+0x112>
 800de5c:	e13e      	b.n	800e0dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de64:	b2db      	uxtb	r3, r3
 800de66:	2b02      	cmp	r3, #2
 800de68:	d002      	beq.n	800de70 <USBD_StdEPReq+0xac>
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d016      	beq.n	800de9c <USBD_StdEPReq+0xd8>
 800de6e:	e02c      	b.n	800deca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de70:	7bbb      	ldrb	r3, [r7, #14]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00d      	beq.n	800de92 <USBD_StdEPReq+0xce>
 800de76:	7bbb      	ldrb	r3, [r7, #14]
 800de78:	2b80      	cmp	r3, #128	; 0x80
 800de7a:	d00a      	beq.n	800de92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f003 f8b7 	bl	8010ff4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de86:	2180      	movs	r1, #128	; 0x80
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f003 f8b3 	bl	8010ff4 <USBD_LL_StallEP>
 800de8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de90:	e020      	b.n	800ded4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 fc7a 	bl	800e78e <USBD_CtlError>
              break;
 800de9a:	e01b      	b.n	800ded4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	885b      	ldrh	r3, [r3, #2]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10e      	bne.n	800dec2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dea4:	7bbb      	ldrb	r3, [r7, #14]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00b      	beq.n	800dec2 <USBD_StdEPReq+0xfe>
 800deaa:	7bbb      	ldrb	r3, [r7, #14]
 800deac:	2b80      	cmp	r3, #128	; 0x80
 800deae:	d008      	beq.n	800dec2 <USBD_StdEPReq+0xfe>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	88db      	ldrh	r3, [r3, #6]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d104      	bne.n	800dec2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800deb8:	7bbb      	ldrb	r3, [r7, #14]
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f003 f899 	bl	8010ff4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fd2e 	bl	800e924 <USBD_CtlSendStatus>

              break;
 800dec8:	e004      	b.n	800ded4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fc5e 	bl	800e78e <USBD_CtlError>
              break;
 800ded2:	bf00      	nop
          }
          break;
 800ded4:	e107      	b.n	800e0e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d002      	beq.n	800dee8 <USBD_StdEPReq+0x124>
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d016      	beq.n	800df14 <USBD_StdEPReq+0x150>
 800dee6:	e04b      	b.n	800df80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dee8:	7bbb      	ldrb	r3, [r7, #14]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00d      	beq.n	800df0a <USBD_StdEPReq+0x146>
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	2b80      	cmp	r3, #128	; 0x80
 800def2:	d00a      	beq.n	800df0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f003 f87b 	bl	8010ff4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800defe:	2180      	movs	r1, #128	; 0x80
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f003 f877 	bl	8010ff4 <USBD_LL_StallEP>
 800df06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df08:	e040      	b.n	800df8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fc3e 	bl	800e78e <USBD_CtlError>
              break;
 800df12:	e03b      	b.n	800df8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	885b      	ldrh	r3, [r3, #2]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d136      	bne.n	800df8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df1c:	7bbb      	ldrb	r3, [r7, #14]
 800df1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df22:	2b00      	cmp	r3, #0
 800df24:	d004      	beq.n	800df30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	4619      	mov	r1, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f003 f881 	bl	8011032 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fcf7 	bl	800e924 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df36:	7bbb      	ldrb	r3, [r7, #14]
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff fde2 	bl	800db04 <USBD_CoreFindEP>
 800df40:	4603      	mov	r3, r0
 800df42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df44:	7b7b      	ldrb	r3, [r7, #13]
 800df46:	2bff      	cmp	r3, #255	; 0xff
 800df48:	d01f      	beq.n	800df8a <USBD_StdEPReq+0x1c6>
 800df4a:	7b7b      	ldrb	r3, [r7, #13]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d11c      	bne.n	800df8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df50:	7b7a      	ldrb	r2, [r7, #13]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df58:	7b7a      	ldrb	r2, [r7, #13]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	32ae      	adds	r2, #174	; 0xae
 800df5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d010      	beq.n	800df8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df68:	7b7a      	ldrb	r2, [r7, #13]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	32ae      	adds	r2, #174	; 0xae
 800df6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	4798      	blx	r3
 800df7a:	4603      	mov	r3, r0
 800df7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df7e:	e004      	b.n	800df8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fc03 	bl	800e78e <USBD_CtlError>
              break;
 800df88:	e000      	b.n	800df8c <USBD_StdEPReq+0x1c8>
              break;
 800df8a:	bf00      	nop
          }
          break;
 800df8c:	e0ab      	b.n	800e0e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b02      	cmp	r3, #2
 800df98:	d002      	beq.n	800dfa0 <USBD_StdEPReq+0x1dc>
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d032      	beq.n	800e004 <USBD_StdEPReq+0x240>
 800df9e:	e097      	b.n	800e0d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfa0:	7bbb      	ldrb	r3, [r7, #14]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d007      	beq.n	800dfb6 <USBD_StdEPReq+0x1f2>
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b80      	cmp	r3, #128	; 0x80
 800dfaa:	d004      	beq.n	800dfb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fbed 	bl	800e78e <USBD_CtlError>
                break;
 800dfb4:	e091      	b.n	800e0da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	da0b      	bge.n	800dfd6 <USBD_StdEPReq+0x212>
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	3310      	adds	r3, #16
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	e00b      	b.n	800dfee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfd6:	7bbb      	ldrb	r3, [r7, #14]
 800dfd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	4413      	add	r3, r2
 800dfec:	3304      	adds	r3, #4
 800dfee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2202      	movs	r2, #2
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fc37 	bl	800e870 <USBD_CtlSendData>
              break;
 800e002:	e06a      	b.n	800e0da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	da11      	bge.n	800e030 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
 800e00e:	f003 020f 	and.w	r2, r3, #15
 800e012:	6879      	ldr	r1, [r7, #4]
 800e014:	4613      	mov	r3, r2
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	440b      	add	r3, r1
 800e01e:	3324      	adds	r3, #36	; 0x24
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d117      	bne.n	800e056 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fbb0 	bl	800e78e <USBD_CtlError>
                  break;
 800e02e:	e054      	b.n	800e0da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e030:	7bbb      	ldrb	r3, [r7, #14]
 800e032:	f003 020f 	and.w	r2, r3, #15
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	4613      	mov	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	440b      	add	r3, r1
 800e042:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d104      	bne.n	800e056 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fb9d 	bl	800e78e <USBD_CtlError>
                  break;
 800e054:	e041      	b.n	800e0da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e056:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	da0b      	bge.n	800e076 <USBD_StdEPReq+0x2b2>
 800e05e:	7bbb      	ldrb	r3, [r7, #14]
 800e060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	3310      	adds	r3, #16
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	4413      	add	r3, r2
 800e072:	3304      	adds	r3, #4
 800e074:	e00b      	b.n	800e08e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	4413      	add	r3, r2
 800e08c:	3304      	adds	r3, #4
 800e08e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d002      	beq.n	800e09c <USBD_StdEPReq+0x2d8>
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b80      	cmp	r3, #128	; 0x80
 800e09a:	d103      	bne.n	800e0a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	e00e      	b.n	800e0c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f002 ffe1 	bl	8011070 <USBD_LL_IsStallEP>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d003      	beq.n	800e0bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e002      	b.n	800e0c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2202      	movs	r2, #2
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 fbd1 	bl	800e870 <USBD_CtlSendData>
              break;
 800e0ce:	e004      	b.n	800e0da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fb5b 	bl	800e78e <USBD_CtlError>
              break;
 800e0d8:	bf00      	nop
          }
          break;
 800e0da:	e004      	b.n	800e0e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0dc:	6839      	ldr	r1, [r7, #0]
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fb55 	bl	800e78e <USBD_CtlError>
          break;
 800e0e4:	bf00      	nop
      }
      break;
 800e0e6:	e005      	b.n	800e0f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e0e8:	6839      	ldr	r1, [r7, #0]
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fb4f 	bl	800e78e <USBD_CtlError>
      break;
 800e0f0:	e000      	b.n	800e0f4 <USBD_StdEPReq+0x330>
      break;
 800e0f2:	bf00      	nop
  }

  return ret;
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
	...

0800e100 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e10a:	2300      	movs	r3, #0
 800e10c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	885b      	ldrh	r3, [r3, #2]
 800e11a:	0a1b      	lsrs	r3, r3, #8
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3b01      	subs	r3, #1
 800e120:	2b06      	cmp	r3, #6
 800e122:	f200 8128 	bhi.w	800e376 <USBD_GetDescriptor+0x276>
 800e126:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <USBD_GetDescriptor+0x2c>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e149 	.word	0x0800e149
 800e130:	0800e161 	.word	0x0800e161
 800e134:	0800e1a1 	.word	0x0800e1a1
 800e138:	0800e377 	.word	0x0800e377
 800e13c:	0800e377 	.word	0x0800e377
 800e140:	0800e317 	.word	0x0800e317
 800e144:	0800e343 	.word	0x0800e343
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	7c12      	ldrb	r2, [r2, #16]
 800e154:	f107 0108 	add.w	r1, r7, #8
 800e158:	4610      	mov	r0, r2
 800e15a:	4798      	blx	r3
 800e15c:	60f8      	str	r0, [r7, #12]
      break;
 800e15e:	e112      	b.n	800e386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	7c1b      	ldrb	r3, [r3, #16]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10d      	bne.n	800e184 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e170:	f107 0208 	add.w	r2, r7, #8
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
 800e178:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3301      	adds	r3, #1
 800e17e:	2202      	movs	r2, #2
 800e180:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e182:	e100      	b.n	800e386 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18c:	f107 0208 	add.w	r2, r7, #8
 800e190:	4610      	mov	r0, r2
 800e192:	4798      	blx	r3
 800e194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3301      	adds	r3, #1
 800e19a:	2202      	movs	r2, #2
 800e19c:	701a      	strb	r2, [r3, #0]
      break;
 800e19e:	e0f2      	b.n	800e386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	885b      	ldrh	r3, [r3, #2]
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	f200 80ac 	bhi.w	800e304 <USBD_GetDescriptor+0x204>
 800e1ac:	a201      	add	r2, pc, #4	; (adr r2, 800e1b4 <USBD_GetDescriptor+0xb4>)
 800e1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b2:	bf00      	nop
 800e1b4:	0800e1cd 	.word	0x0800e1cd
 800e1b8:	0800e201 	.word	0x0800e201
 800e1bc:	0800e235 	.word	0x0800e235
 800e1c0:	0800e269 	.word	0x0800e269
 800e1c4:	0800e29d 	.word	0x0800e29d
 800e1c8:	0800e2d1 	.word	0x0800e2d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00b      	beq.n	800e1f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	7c12      	ldrb	r2, [r2, #16]
 800e1e4:	f107 0108 	add.w	r1, r7, #8
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	4798      	blx	r3
 800e1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1ee:	e091      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 facb 	bl	800e78e <USBD_CtlError>
            err++;
 800e1f8:	7afb      	ldrb	r3, [r7, #11]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e1fe:	e089      	b.n	800e314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00b      	beq.n	800e224 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	7c12      	ldrb	r2, [r2, #16]
 800e218:	f107 0108 	add.w	r1, r7, #8
 800e21c:	4610      	mov	r0, r2
 800e21e:	4798      	blx	r3
 800e220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e222:	e077      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fab1 	bl	800e78e <USBD_CtlError>
            err++;
 800e22c:	7afb      	ldrb	r3, [r7, #11]
 800e22e:	3301      	adds	r3, #1
 800e230:	72fb      	strb	r3, [r7, #11]
          break;
 800e232:	e06f      	b.n	800e314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e23a:	68db      	ldr	r3, [r3, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00b      	beq.n	800e258 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	7c12      	ldrb	r2, [r2, #16]
 800e24c:	f107 0108 	add.w	r1, r7, #8
 800e250:	4610      	mov	r0, r2
 800e252:	4798      	blx	r3
 800e254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e256:	e05d      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e258:	6839      	ldr	r1, [r7, #0]
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 fa97 	bl	800e78e <USBD_CtlError>
            err++;
 800e260:	7afb      	ldrb	r3, [r7, #11]
 800e262:	3301      	adds	r3, #1
 800e264:	72fb      	strb	r3, [r7, #11]
          break;
 800e266:	e055      	b.n	800e314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e26e:	691b      	ldr	r3, [r3, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d00b      	beq.n	800e28c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e27a:	691b      	ldr	r3, [r3, #16]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	7c12      	ldrb	r2, [r2, #16]
 800e280:	f107 0108 	add.w	r1, r7, #8
 800e284:	4610      	mov	r0, r2
 800e286:	4798      	blx	r3
 800e288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e28a:	e043      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fa7d 	bl	800e78e <USBD_CtlError>
            err++;
 800e294:	7afb      	ldrb	r3, [r7, #11]
 800e296:	3301      	adds	r3, #1
 800e298:	72fb      	strb	r3, [r7, #11]
          break;
 800e29a:	e03b      	b.n	800e314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2a2:	695b      	ldr	r3, [r3, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00b      	beq.n	800e2c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	7c12      	ldrb	r2, [r2, #16]
 800e2b4:	f107 0108 	add.w	r1, r7, #8
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	4798      	blx	r3
 800e2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2be:	e029      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fa63 	bl	800e78e <USBD_CtlError>
            err++;
 800e2c8:	7afb      	ldrb	r3, [r7, #11]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e2ce:	e021      	b.n	800e314 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00b      	beq.n	800e2f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	7c12      	ldrb	r2, [r2, #16]
 800e2e8:	f107 0108 	add.w	r1, r7, #8
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
 800e2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2f2:	e00f      	b.n	800e314 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 fa49 	bl	800e78e <USBD_CtlError>
            err++;
 800e2fc:	7afb      	ldrb	r3, [r7, #11]
 800e2fe:	3301      	adds	r3, #1
 800e300:	72fb      	strb	r3, [r7, #11]
          break;
 800e302:	e007      	b.n	800e314 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fa41 	bl	800e78e <USBD_CtlError>
          err++;
 800e30c:	7afb      	ldrb	r3, [r7, #11]
 800e30e:	3301      	adds	r3, #1
 800e310:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e312:	bf00      	nop
      }
      break;
 800e314:	e037      	b.n	800e386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	7c1b      	ldrb	r3, [r3, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d109      	bne.n	800e332 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e326:	f107 0208 	add.w	r2, r7, #8
 800e32a:	4610      	mov	r0, r2
 800e32c:	4798      	blx	r3
 800e32e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e330:	e029      	b.n	800e386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fa2a 	bl	800e78e <USBD_CtlError>
        err++;
 800e33a:	7afb      	ldrb	r3, [r7, #11]
 800e33c:	3301      	adds	r3, #1
 800e33e:	72fb      	strb	r3, [r7, #11]
      break;
 800e340:	e021      	b.n	800e386 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	7c1b      	ldrb	r3, [r3, #16]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10d      	bne.n	800e366 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	f107 0208 	add.w	r2, r7, #8
 800e356:	4610      	mov	r0, r2
 800e358:	4798      	blx	r3
 800e35a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3301      	adds	r3, #1
 800e360:	2207      	movs	r2, #7
 800e362:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e364:	e00f      	b.n	800e386 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 fa10 	bl	800e78e <USBD_CtlError>
        err++;
 800e36e:	7afb      	ldrb	r3, [r7, #11]
 800e370:	3301      	adds	r3, #1
 800e372:	72fb      	strb	r3, [r7, #11]
      break;
 800e374:	e007      	b.n	800e386 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e376:	6839      	ldr	r1, [r7, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fa08 	bl	800e78e <USBD_CtlError>
      err++;
 800e37e:	7afb      	ldrb	r3, [r7, #11]
 800e380:	3301      	adds	r3, #1
 800e382:	72fb      	strb	r3, [r7, #11]
      break;
 800e384:	bf00      	nop
  }

  if (err != 0U)
 800e386:	7afb      	ldrb	r3, [r7, #11]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d11e      	bne.n	800e3ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	88db      	ldrh	r3, [r3, #6]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d016      	beq.n	800e3c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e394:	893b      	ldrh	r3, [r7, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00e      	beq.n	800e3b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	88da      	ldrh	r2, [r3, #6]
 800e39e:	893b      	ldrh	r3, [r7, #8]
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	bf28      	it	cs
 800e3a4:	4613      	movcs	r3, r2
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3aa:	893b      	ldrh	r3, [r7, #8]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	68f9      	ldr	r1, [r7, #12]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fa5d 	bl	800e870 <USBD_CtlSendData>
 800e3b6:	e009      	b.n	800e3cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f9e7 	bl	800e78e <USBD_CtlError>
 800e3c0:	e004      	b.n	800e3cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 faae 	bl	800e924 <USBD_CtlSendStatus>
 800e3c8:	e000      	b.n	800e3cc <USBD_GetDescriptor+0x2cc>
    return;
 800e3ca:	bf00      	nop
  }
}
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop

0800e3d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	889b      	ldrh	r3, [r3, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d131      	bne.n	800e44a <USBD_SetAddress+0x76>
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	88db      	ldrh	r3, [r3, #6]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d12d      	bne.n	800e44a <USBD_SetAddress+0x76>
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	885b      	ldrh	r3, [r3, #2]
 800e3f2:	2b7f      	cmp	r3, #127	; 0x7f
 800e3f4:	d829      	bhi.n	800e44a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	885b      	ldrh	r3, [r3, #2]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	2b03      	cmp	r3, #3
 800e40c:	d104      	bne.n	800e418 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f9bc 	bl	800e78e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e416:	e01d      	b.n	800e454 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7bfa      	ldrb	r2, [r7, #15]
 800e41c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f002 fe4f 	bl	80110c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fa7a 	bl	800e924 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e430:	7bfb      	ldrb	r3, [r7, #15]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d004      	beq.n	800e440 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2202      	movs	r2, #2
 800e43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e43e:	e009      	b.n	800e454 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e448:	e004      	b.n	800e454 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e44a:	6839      	ldr	r1, [r7, #0]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f99e 	bl	800e78e <USBD_CtlError>
  }
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	885b      	ldrh	r3, [r3, #2]
 800e46e:	b2da      	uxtb	r2, r3
 800e470:	4b4e      	ldr	r3, [pc, #312]	; (800e5ac <USBD_SetConfig+0x150>)
 800e472:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e474:	4b4d      	ldr	r3, [pc, #308]	; (800e5ac <USBD_SetConfig+0x150>)
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d905      	bls.n	800e488 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f985 	bl	800e78e <USBD_CtlError>
    return USBD_FAIL;
 800e484:	2303      	movs	r3, #3
 800e486:	e08c      	b.n	800e5a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b02      	cmp	r3, #2
 800e492:	d002      	beq.n	800e49a <USBD_SetConfig+0x3e>
 800e494:	2b03      	cmp	r3, #3
 800e496:	d029      	beq.n	800e4ec <USBD_SetConfig+0x90>
 800e498:	e075      	b.n	800e586 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e49a:	4b44      	ldr	r3, [pc, #272]	; (800e5ac <USBD_SetConfig+0x150>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d020      	beq.n	800e4e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4a2:	4b42      	ldr	r3, [pc, #264]	; (800e5ac <USBD_SetConfig+0x150>)
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4ac:	4b3f      	ldr	r3, [pc, #252]	; (800e5ac <USBD_SetConfig+0x150>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7fe ffe7 	bl	800d486 <USBD_SetClassConfig>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e4bc:	7bfb      	ldrb	r3, [r7, #15]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d008      	beq.n	800e4d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f962 	bl	800e78e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2202      	movs	r2, #2
 800e4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4d2:	e065      	b.n	800e5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fa25 	bl	800e924 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2203      	movs	r2, #3
 800e4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4e2:	e05d      	b.n	800e5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fa1d 	bl	800e924 <USBD_CtlSendStatus>
      break;
 800e4ea:	e059      	b.n	800e5a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e4ec:	4b2f      	ldr	r3, [pc, #188]	; (800e5ac <USBD_SetConfig+0x150>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d112      	bne.n	800e51a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e4fc:	4b2b      	ldr	r3, [pc, #172]	; (800e5ac <USBD_SetConfig+0x150>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e506:	4b29      	ldr	r3, [pc, #164]	; (800e5ac <USBD_SetConfig+0x150>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7fe ffd6 	bl	800d4be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fa06 	bl	800e924 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e518:	e042      	b.n	800e5a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e51a:	4b24      	ldr	r3, [pc, #144]	; (800e5ac <USBD_SetConfig+0x150>)
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	429a      	cmp	r2, r3
 800e526:	d02a      	beq.n	800e57e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7fe ffc4 	bl	800d4be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e536:	4b1d      	ldr	r3, [pc, #116]	; (800e5ac <USBD_SetConfig+0x150>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e540:	4b1a      	ldr	r3, [pc, #104]	; (800e5ac <USBD_SetConfig+0x150>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	4619      	mov	r1, r3
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7fe ff9d 	bl	800d486 <USBD_SetClassConfig>
 800e54c:	4603      	mov	r3, r0
 800e54e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e550:	7bfb      	ldrb	r3, [r7, #15]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00f      	beq.n	800e576 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 f918 	bl	800e78e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7fe ffa9 	bl	800d4be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2202      	movs	r2, #2
 800e570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e574:	e014      	b.n	800e5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f9d4 	bl	800e924 <USBD_CtlSendStatus>
      break;
 800e57c:	e010      	b.n	800e5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f9d0 	bl	800e924 <USBD_CtlSendStatus>
      break;
 800e584:	e00c      	b.n	800e5a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f900 	bl	800e78e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e58e:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <USBD_SetConfig+0x150>)
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	4619      	mov	r1, r3
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7fe ff92 	bl	800d4be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e59a:	2303      	movs	r3, #3
 800e59c:	73fb      	strb	r3, [r7, #15]
      break;
 800e59e:	bf00      	nop
  }

  return ret;
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20002ad8 	.word	0x20002ad8

0800e5b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	88db      	ldrh	r3, [r3, #6]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d004      	beq.n	800e5cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e5c2:	6839      	ldr	r1, [r7, #0]
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f8e2 	bl	800e78e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5ca:	e023      	b.n	800e614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	dc02      	bgt.n	800e5de <USBD_GetConfig+0x2e>
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	dc03      	bgt.n	800e5e4 <USBD_GetConfig+0x34>
 800e5dc:	e015      	b.n	800e60a <USBD_GetConfig+0x5a>
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d00b      	beq.n	800e5fa <USBD_GetConfig+0x4a>
 800e5e2:	e012      	b.n	800e60a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2201      	movs	r2, #1
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f93c 	bl	800e870 <USBD_CtlSendData>
        break;
 800e5f8:	e00c      	b.n	800e614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	2201      	movs	r2, #1
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f934 	bl	800e870 <USBD_CtlSendData>
        break;
 800e608:	e004      	b.n	800e614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 f8be 	bl	800e78e <USBD_CtlError>
        break;
 800e612:	bf00      	nop
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	2b02      	cmp	r3, #2
 800e632:	d81e      	bhi.n	800e672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	88db      	ldrh	r3, [r3, #6]
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d004      	beq.n	800e646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e63c:	6839      	ldr	r1, [r7, #0]
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f8a5 	bl	800e78e <USBD_CtlError>
        break;
 800e644:	e01a      	b.n	800e67c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	f043 0202 	orr.w	r2, r3, #2
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	330c      	adds	r3, #12
 800e666:	2202      	movs	r2, #2
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f000 f900 	bl	800e870 <USBD_CtlSendData>
      break;
 800e670:	e004      	b.n	800e67c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f88a 	bl	800e78e <USBD_CtlError>
      break;
 800e67a:	bf00      	nop
  }
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	885b      	ldrh	r3, [r3, #2]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d107      	bne.n	800e6a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 f940 	bl	800e924 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6a4:	e013      	b.n	800e6ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	885b      	ldrh	r3, [r3, #2]
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d10b      	bne.n	800e6c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	889b      	ldrh	r3, [r3, #4]
 800e6b2:	0a1b      	lsrs	r3, r3, #8
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f930 	bl	800e924 <USBD_CtlSendStatus>
}
 800e6c4:	e003      	b.n	800e6ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f860 	bl	800e78e <USBD_CtlError>
}
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d80b      	bhi.n	800e706 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	885b      	ldrh	r3, [r3, #2]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d10c      	bne.n	800e710 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f910 	bl	800e924 <USBD_CtlSendStatus>
      }
      break;
 800e704:	e004      	b.n	800e710 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e706:	6839      	ldr	r1, [r7, #0]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f840 	bl	800e78e <USBD_CtlError>
      break;
 800e70e:	e000      	b.n	800e712 <USBD_ClrFeature+0x3c>
      break;
 800e710:	bf00      	nop
  }
}
 800e712:	bf00      	nop
 800e714:	3708      	adds	r7, #8
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b084      	sub	sp, #16
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	781a      	ldrb	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	3301      	adds	r3, #1
 800e734:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	781a      	ldrb	r2, [r3, #0]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3301      	adds	r3, #1
 800e742:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f7ff fa41 	bl	800dbcc <SWAPBYTE>
 800e74a:	4603      	mov	r3, r0
 800e74c:	461a      	mov	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3301      	adds	r3, #1
 800e756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	3301      	adds	r3, #1
 800e75c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7ff fa34 	bl	800dbcc <SWAPBYTE>
 800e764:	4603      	mov	r3, r0
 800e766:	461a      	mov	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	3301      	adds	r3, #1
 800e770:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3301      	adds	r3, #1
 800e776:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f7ff fa27 	bl	800dbcc <SWAPBYTE>
 800e77e:	4603      	mov	r3, r0
 800e780:	461a      	mov	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	80da      	strh	r2, [r3, #6]
}
 800e786:	bf00      	nop
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e798:	2180      	movs	r1, #128	; 0x80
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f002 fc2a 	bl	8010ff4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f002 fc26 	bl	8010ff4 <USBD_LL_StallEP>
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b086      	sub	sp, #24
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d036      	beq.n	800e834 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e7ca:	6938      	ldr	r0, [r7, #16]
 800e7cc:	f000 f836 	bl	800e83c <USBD_GetLen>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e7de:	7dfb      	ldrb	r3, [r7, #23]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	7812      	ldrb	r2, [r2, #0]
 800e7e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7ea:	7dfb      	ldrb	r3, [r7, #23]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e7f0:	7dfb      	ldrb	r3, [r7, #23]
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	2203      	movs	r2, #3
 800e7f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e800:	e013      	b.n	800e82a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e802:	7dfb      	ldrb	r3, [r7, #23]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	4413      	add	r3, r2
 800e808:	693a      	ldr	r2, [r7, #16]
 800e80a:	7812      	ldrb	r2, [r2, #0]
 800e80c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3301      	adds	r3, #1
 800e812:	613b      	str	r3, [r7, #16]
    idx++;
 800e814:	7dfb      	ldrb	r3, [r7, #23]
 800e816:	3301      	adds	r3, #1
 800e818:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	4413      	add	r3, r2
 800e820:	2200      	movs	r2, #0
 800e822:	701a      	strb	r2, [r3, #0]
    idx++;
 800e824:	7dfb      	ldrb	r3, [r7, #23]
 800e826:	3301      	adds	r3, #1
 800e828:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e82a:	693b      	ldr	r3, [r7, #16]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1e7      	bne.n	800e802 <USBD_GetString+0x52>
 800e832:	e000      	b.n	800e836 <USBD_GetString+0x86>
    return;
 800e834:	bf00      	nop
  }
}
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e84c:	e005      	b.n	800e85a <USBD_GetLen+0x1e>
  {
    len++;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	3301      	adds	r3, #1
 800e852:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	3301      	adds	r3, #1
 800e858:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1f5      	bne.n	800e84e <USBD_GetLen+0x12>
  }

  return len;
 800e862:	7bfb      	ldrb	r3, [r7, #15]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2202      	movs	r2, #2
 800e880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	2100      	movs	r1, #0
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f002 fc35 	bl	8011106 <USBD_LL_Transmit>

  return USBD_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b084      	sub	sp, #16
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	68ba      	ldr	r2, [r7, #8]
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f002 fc24 	bl	8011106 <USBD_LL_Transmit>

  return USBD_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2203      	movs	r2, #3
 800e8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f002 fc28 	bl	8011148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8f8:	2300      	movs	r3, #0
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b084      	sub	sp, #16
 800e906:	af00      	add	r7, sp, #0
 800e908:	60f8      	str	r0, [r7, #12]
 800e90a:	60b9      	str	r1, [r7, #8]
 800e90c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	2100      	movs	r1, #0
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f002 fc17 	bl	8011148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2204      	movs	r2, #4
 800e930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e934:	2300      	movs	r3, #0
 800e936:	2200      	movs	r2, #0
 800e938:	2100      	movs	r1, #0
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f002 fbe3 	bl	8011106 <USBD_LL_Transmit>

  return USBD_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2205      	movs	r2, #5
 800e956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e95a:	2300      	movs	r3, #0
 800e95c:	2200      	movs	r2, #0
 800e95e:	2100      	movs	r1, #0
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f002 fbf1 	bl	8011148 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e97a:	2300      	movs	r3, #0
 800e97c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e97e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e982:	2b84      	cmp	r3, #132	; 0x84
 800e984:	d005      	beq.n	800e992 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e986:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	4413      	add	r3, r2
 800e98e:	3303      	adds	r3, #3
 800e990:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e992:	68fb      	ldr	r3, [r7, #12]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e9a4:	f000 fe1e 	bl	800f5e4 <vTaskStartScheduler>
  
  return osOK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9b0:	b089      	sub	sp, #36	; 0x24
 800e9b2:	af04      	add	r7, sp, #16
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	695b      	ldr	r3, [r3, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d020      	beq.n	800ea02 <osThreadCreate+0x54>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d01c      	beq.n	800ea02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	685c      	ldr	r4, [r3, #4]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681d      	ldr	r5, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	691e      	ldr	r6, [r3, #16]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff ffc8 	bl	800e970 <makeFreeRtosPriority>
 800e9e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	695b      	ldr	r3, [r3, #20]
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9ea:	9202      	str	r2, [sp, #8]
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	9100      	str	r1, [sp, #0]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	4632      	mov	r2, r6
 800e9f4:	4629      	mov	r1, r5
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f000 fc2c 	bl	800f254 <xTaskCreateStatic>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	e01c      	b.n	800ea3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685c      	ldr	r4, [r3, #4]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea0e:	b29e      	uxth	r6, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff ffaa 	bl	800e970 <makeFreeRtosPriority>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	f107 030c 	add.w	r3, r7, #12
 800ea22:	9301      	str	r3, [sp, #4]
 800ea24:	9200      	str	r2, [sp, #0]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	4632      	mov	r2, r6
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f000 fc6e 	bl	800f30e <xTaskCreate>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d001      	beq.n	800ea3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	e000      	b.n	800ea3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b084      	sub	sp, #16
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <osDelay+0x16>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	e000      	b.n	800ea5e <osDelay+0x18>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 fd8c 	bl	800f57c <vTaskDelay>
  
  return osOK;
 800ea64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b086      	sub	sp, #24
 800ea72:	af02      	add	r7, sp, #8
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00f      	beq.n	800eaa0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d10a      	bne.n	800ea9c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	2203      	movs	r2, #3
 800ea8c:	9200      	str	r2, [sp, #0]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2100      	movs	r1, #0
 800ea92:	2001      	movs	r0, #1
 800ea94:	f000 f93a 	bl	800ed0c <xQueueGenericCreateStatic>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	e016      	b.n	800eaca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	e014      	b.n	800eaca <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d110      	bne.n	800eac8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800eaa6:	2203      	movs	r2, #3
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	2001      	movs	r0, #1
 800eaac:	f000 f9a6 	bl	800edfc <xQueueGenericCreate>
 800eab0:	60f8      	str	r0, [r7, #12]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d005      	beq.n	800eac4 <osSemaphoreCreate+0x56>
 800eab8:	2300      	movs	r3, #0
 800eaba:	2200      	movs	r2, #0
 800eabc:	2100      	movs	r1, #0
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 f9f6 	bl	800eeb0 <xQueueGenericSend>
      return sema;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	e000      	b.n	800eaca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800eac8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ead2:	b480      	push	{r7}
 800ead4:	b083      	sub	sp, #12
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f103 0208 	add.w	r2, r3, #8
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f103 0208 	add.w	r2, r3, #8
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f103 0208 	add.w	r2, r3, #8
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb06:	bf00      	nop
 800eb08:	370c      	adds	r7, #12
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb12:	b480      	push	{r7}
 800eb14:	b083      	sub	sp, #12
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	689a      	ldr	r2, [r3, #8]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	683a      	ldr	r2, [r7, #0]
 800eb56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	601a      	str	r2, [r3, #0]
}
 800eb68:	bf00      	nop
 800eb6a:	3714      	adds	r7, #20
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb8a:	d103      	bne.n	800eb94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	60fb      	str	r3, [r7, #12]
 800eb92:	e00c      	b.n	800ebae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	3308      	adds	r3, #8
 800eb98:	60fb      	str	r3, [r7, #12]
 800eb9a:	e002      	b.n	800eba2 <vListInsert+0x2e>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68ba      	ldr	r2, [r7, #8]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d2f6      	bcs.n	800eb9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	601a      	str	r2, [r3, #0]
}
 800ebda:	bf00      	nop
 800ebdc:	3714      	adds	r7, #20
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b085      	sub	sp, #20
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	6892      	ldr	r2, [r2, #8]
 800ebfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	6852      	ldr	r2, [r2, #4]
 800ec06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d103      	bne.n	800ec1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689a      	ldr	r2, [r3, #8]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	1e5a      	subs	r2, r3, #1
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10a      	bne.n	800ec66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec62:	bf00      	nop
 800ec64:	e7fe      	b.n	800ec64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ec66:	f001 faf5 	bl	8010254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec72:	68f9      	ldr	r1, [r7, #12]
 800ec74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec76:	fb01 f303 	mul.w	r3, r1, r3
 800ec7a:	441a      	add	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec96:	3b01      	subs	r3, #1
 800ec98:	68f9      	ldr	r1, [r7, #12]
 800ec9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec9c:	fb01 f303 	mul.w	r3, r1, r3
 800eca0:	441a      	add	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	22ff      	movs	r2, #255	; 0xff
 800ecaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	22ff      	movs	r2, #255	; 0xff
 800ecb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d114      	bne.n	800ece6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d01a      	beq.n	800ecfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	3310      	adds	r3, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fecd 	bl	800fa68 <xTaskRemoveFromEventList>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d012      	beq.n	800ecfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ecd4:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <xQueueGenericReset+0xcc>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
 800ece4:	e009      	b.n	800ecfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3310      	adds	r3, #16
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff fef1 	bl	800ead2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3324      	adds	r3, #36	; 0x24
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff feec 	bl	800ead2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ecfa:	f001 fadb 	bl	80102b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ecfe:	2301      	movs	r3, #1
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	e000ed04 	.word	0xe000ed04

0800ed0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b08e      	sub	sp, #56	; 0x38
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
 800ed18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10a      	bne.n	800ed36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10a      	bne.n	800ed52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <xQueueGenericCreateStatic+0x52>
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <xQueueGenericCreateStatic+0x56>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e000      	b.n	800ed64 <xQueueGenericCreateStatic+0x58>
 800ed62:	2300      	movs	r3, #0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10a      	bne.n	800ed7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	623b      	str	r3, [r7, #32]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d102      	bne.n	800ed8a <xQueueGenericCreateStatic+0x7e>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d101      	bne.n	800ed8e <xQueueGenericCreateStatic+0x82>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e000      	b.n	800ed90 <xQueueGenericCreateStatic+0x84>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10a      	bne.n	800edaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	61fb      	str	r3, [r7, #28]
}
 800eda6:	bf00      	nop
 800eda8:	e7fe      	b.n	800eda8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800edaa:	2348      	movs	r3, #72	; 0x48
 800edac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	2b48      	cmp	r3, #72	; 0x48
 800edb2:	d00a      	beq.n	800edca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	61bb      	str	r3, [r7, #24]
}
 800edc6:	bf00      	nop
 800edc8:	e7fe      	b.n	800edc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800edca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00d      	beq.n	800edf2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ede2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	4613      	mov	r3, r2
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	68b9      	ldr	r1, [r7, #8]
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f000 f83f 	bl	800ee70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3730      	adds	r7, #48	; 0x30
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b08a      	sub	sp, #40	; 0x28
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	4613      	mov	r3, r2
 800ee08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10a      	bne.n	800ee26 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ee10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee14:	f383 8811 	msr	BASEPRI, r3
 800ee18:	f3bf 8f6f 	isb	sy
 800ee1c:	f3bf 8f4f 	dsb	sy
 800ee20:	613b      	str	r3, [r7, #16]
}
 800ee22:	bf00      	nop
 800ee24:	e7fe      	b.n	800ee24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	fb02 f303 	mul.w	r3, r2, r3
 800ee2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	3348      	adds	r3, #72	; 0x48
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 faef 	bl	8010418 <pvPortMalloc>
 800ee3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d011      	beq.n	800ee66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	3348      	adds	r3, #72	; 0x48
 800ee4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee54:	79fa      	ldrb	r2, [r7, #7]
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	697a      	ldr	r2, [r7, #20]
 800ee5e:	68b9      	ldr	r1, [r7, #8]
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 f805 	bl	800ee70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee66:	69bb      	ldr	r3, [r7, #24]
	}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3720      	adds	r7, #32
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d103      	bne.n	800ee8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	69ba      	ldr	r2, [r7, #24]
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	e002      	b.n	800ee92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee9e:	2101      	movs	r1, #1
 800eea0:	69b8      	ldr	r0, [r7, #24]
 800eea2:	f7ff fecb 	bl	800ec3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08e      	sub	sp, #56	; 0x38
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eebe:	2300      	movs	r3, #0
 800eec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10a      	bne.n	800eee2 <xQueueGenericSend+0x32>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eede:	bf00      	nop
 800eee0:	e7fe      	b.n	800eee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d103      	bne.n	800eef0 <xQueueGenericSend+0x40>
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d101      	bne.n	800eef4 <xQueueGenericSend+0x44>
 800eef0:	2301      	movs	r3, #1
 800eef2:	e000      	b.n	800eef6 <xQueueGenericSend+0x46>
 800eef4:	2300      	movs	r3, #0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10a      	bne.n	800ef10 <xQueueGenericSend+0x60>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef0c:	bf00      	nop
 800ef0e:	e7fe      	b.n	800ef0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d103      	bne.n	800ef1e <xQueueGenericSend+0x6e>
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d101      	bne.n	800ef22 <xQueueGenericSend+0x72>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <xQueueGenericSend+0x74>
 800ef22:	2300      	movs	r3, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <xQueueGenericSend+0x8e>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	623b      	str	r3, [r7, #32]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef3e:	f000 ff4f 	bl	800fde0 <xTaskGetSchedulerState>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <xQueueGenericSend+0x9e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <xQueueGenericSend+0xa2>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e000      	b.n	800ef54 <xQueueGenericSend+0xa4>
 800ef52:	2300      	movs	r3, #0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10a      	bne.n	800ef6e <xQueueGenericSend+0xbe>
	__asm volatile
 800ef58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5c:	f383 8811 	msr	BASEPRI, r3
 800ef60:	f3bf 8f6f 	isb	sy
 800ef64:	f3bf 8f4f 	dsb	sy
 800ef68:	61fb      	str	r3, [r7, #28]
}
 800ef6a:	bf00      	nop
 800ef6c:	e7fe      	b.n	800ef6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef6e:	f001 f971 	bl	8010254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d302      	bcc.n	800ef84 <xQueueGenericSend+0xd4>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d129      	bne.n	800efd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef84:	683a      	ldr	r2, [r7, #0]
 800ef86:	68b9      	ldr	r1, [r7, #8]
 800ef88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef8a:	f000 f88f 	bl	800f0ac <prvCopyDataToQueue>
 800ef8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d010      	beq.n	800efba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	3324      	adds	r3, #36	; 0x24
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 fd63 	bl	800fa68 <xTaskRemoveFromEventList>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d013      	beq.n	800efd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efa8:	4b3f      	ldr	r3, [pc, #252]	; (800f0a8 <xQueueGenericSend+0x1f8>)
 800efaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efae:	601a      	str	r2, [r3, #0]
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	e00a      	b.n	800efd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d007      	beq.n	800efd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efc0:	4b39      	ldr	r3, [pc, #228]	; (800f0a8 <xQueueGenericSend+0x1f8>)
 800efc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800efd0:	f001 f970 	bl	80102b4 <vPortExitCritical>
				return pdPASS;
 800efd4:	2301      	movs	r3, #1
 800efd6:	e063      	b.n	800f0a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d103      	bne.n	800efe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efde:	f001 f969 	bl	80102b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	e05c      	b.n	800f0a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efec:	f107 0314 	add.w	r3, r7, #20
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 fd9b 	bl	800fb2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eff6:	2301      	movs	r3, #1
 800eff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800effa:	f001 f95b 	bl	80102b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800effe:	f000 fb51 	bl	800f6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f002:	f001 f927 	bl	8010254 <vPortEnterCritical>
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f00c:	b25b      	sxtb	r3, r3
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f012:	d103      	bne.n	800f01c <xQueueGenericSend+0x16c>
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	2200      	movs	r2, #0
 800f018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f022:	b25b      	sxtb	r3, r3
 800f024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f028:	d103      	bne.n	800f032 <xQueueGenericSend+0x182>
 800f02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02c:	2200      	movs	r2, #0
 800f02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f032:	f001 f93f 	bl	80102b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f036:	1d3a      	adds	r2, r7, #4
 800f038:	f107 0314 	add.w	r3, r7, #20
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f000 fd8a 	bl	800fb58 <xTaskCheckForTimeOut>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d124      	bne.n	800f094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f04a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f04c:	f000 f8ea 	bl	800f224 <prvIsQueueFull>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d018      	beq.n	800f088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	3310      	adds	r3, #16
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	4611      	mov	r1, r2
 800f05e:	4618      	mov	r0, r3
 800f060:	f000 fcde 	bl	800fa20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f066:	f000 f88b 	bl	800f180 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f06a:	f000 fb29 	bl	800f6c0 <xTaskResumeAll>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	f47f af7c 	bne.w	800ef6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f076:	4b0c      	ldr	r3, [pc, #48]	; (800f0a8 <xQueueGenericSend+0x1f8>)
 800f078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	f3bf 8f6f 	isb	sy
 800f086:	e772      	b.n	800ef6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f08a:	f000 f879 	bl	800f180 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f08e:	f000 fb17 	bl	800f6c0 <xTaskResumeAll>
 800f092:	e76c      	b.n	800ef6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f096:	f000 f873 	bl	800f180 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f09a:	f000 fb11 	bl	800f6c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f09e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3738      	adds	r7, #56	; 0x38
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	e000ed04 	.word	0xe000ed04

0800f0ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10d      	bne.n	800f0e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d14d      	bne.n	800f16e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 fea0 	bl	800fe1c <xTaskPriorityDisinherit>
 800f0dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	609a      	str	r2, [r3, #8]
 800f0e4:	e043      	b.n	800f16e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d119      	bne.n	800f120 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	6858      	ldr	r0, [r3, #4]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	68b9      	ldr	r1, [r7, #8]
 800f0f8:	f004 f89e 	bl	8013238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f104:	441a      	add	r2, r3
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	429a      	cmp	r2, r3
 800f114:	d32b      	bcc.n	800f16e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	e026      	b.n	800f16e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	68d8      	ldr	r0, [r3, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f128:	461a      	mov	r2, r3
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	f004 f884 	bl	8013238 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	68da      	ldr	r2, [r3, #12]
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f138:	425b      	negs	r3, r3
 800f13a:	441a      	add	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	68da      	ldr	r2, [r3, #12]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d207      	bcs.n	800f15c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	689a      	ldr	r2, [r3, #8]
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f154:	425b      	negs	r3, r3
 800f156:	441a      	add	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d105      	bne.n	800f16e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d002      	beq.n	800f16e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	1c5a      	adds	r2, r3, #1
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f176:	697b      	ldr	r3, [r7, #20]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3718      	adds	r7, #24
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f188:	f001 f864 	bl	8010254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f192:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f194:	e011      	b.n	800f1ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d012      	beq.n	800f1c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	3324      	adds	r3, #36	; 0x24
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fc60 	bl	800fa68 <xTaskRemoveFromEventList>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f1ae:	f000 fd35 	bl	800fc1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	dce9      	bgt.n	800f196 <prvUnlockQueue+0x16>
 800f1c2:	e000      	b.n	800f1c6 <prvUnlockQueue+0x46>
					break;
 800f1c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	22ff      	movs	r2, #255	; 0xff
 800f1ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f1ce:	f001 f871 	bl	80102b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f1d2:	f001 f83f 	bl	8010254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1de:	e011      	b.n	800f204 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d012      	beq.n	800f20e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3310      	adds	r3, #16
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 fc3b 	bl	800fa68 <xTaskRemoveFromEventList>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f1f8:	f000 fd10 	bl	800fc1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f1fc:	7bbb      	ldrb	r3, [r7, #14]
 800f1fe:	3b01      	subs	r3, #1
 800f200:	b2db      	uxtb	r3, r3
 800f202:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	dce9      	bgt.n	800f1e0 <prvUnlockQueue+0x60>
 800f20c:	e000      	b.n	800f210 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f20e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	22ff      	movs	r2, #255	; 0xff
 800f214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f218:	f001 f84c 	bl	80102b4 <vPortExitCritical>
}
 800f21c:	bf00      	nop
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f22c:	f001 f812 	bl	8010254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f238:	429a      	cmp	r2, r3
 800f23a:	d102      	bne.n	800f242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	60fb      	str	r3, [r7, #12]
 800f240:	e001      	b.n	800f246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f242:	2300      	movs	r3, #0
 800f244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f246:	f001 f835 	bl	80102b4 <vPortExitCritical>

	return xReturn;
 800f24a:	68fb      	ldr	r3, [r7, #12]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08e      	sub	sp, #56	; 0x38
 800f258:	af04      	add	r7, sp, #16
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f264:	2b00      	cmp	r3, #0
 800f266:	d10a      	bne.n	800f27e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26c:	f383 8811 	msr	BASEPRI, r3
 800f270:	f3bf 8f6f 	isb	sy
 800f274:	f3bf 8f4f 	dsb	sy
 800f278:	623b      	str	r3, [r7, #32]
}
 800f27a:	bf00      	nop
 800f27c:	e7fe      	b.n	800f27c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	2b00      	cmp	r3, #0
 800f282:	d10a      	bne.n	800f29a <xTaskCreateStatic+0x46>
	__asm volatile
 800f284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f288:	f383 8811 	msr	BASEPRI, r3
 800f28c:	f3bf 8f6f 	isb	sy
 800f290:	f3bf 8f4f 	dsb	sy
 800f294:	61fb      	str	r3, [r7, #28]
}
 800f296:	bf00      	nop
 800f298:	e7fe      	b.n	800f298 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f29a:	2354      	movs	r3, #84	; 0x54
 800f29c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	2b54      	cmp	r3, #84	; 0x54
 800f2a2:	d00a      	beq.n	800f2ba <xTaskCreateStatic+0x66>
	__asm volatile
 800f2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a8:	f383 8811 	msr	BASEPRI, r3
 800f2ac:	f3bf 8f6f 	isb	sy
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	61bb      	str	r3, [r7, #24]
}
 800f2b6:	bf00      	nop
 800f2b8:	e7fe      	b.n	800f2b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d01e      	beq.n	800f300 <xTaskCreateStatic+0xac>
 800f2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d01b      	beq.n	800f300 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9303      	str	r3, [sp, #12]
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	9302      	str	r3, [sp, #8]
 800f2e2:	f107 0314 	add.w	r3, r7, #20
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ea:	9300      	str	r3, [sp, #0]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	68b9      	ldr	r1, [r7, #8]
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 f850 	bl	800f398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2fa:	f000 f8d5 	bl	800f4a8 <prvAddNewTaskToReadyList>
 800f2fe:	e001      	b.n	800f304 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f304:	697b      	ldr	r3, [r7, #20]
	}
 800f306:	4618      	mov	r0, r3
 800f308:	3728      	adds	r7, #40	; 0x28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b08c      	sub	sp, #48	; 0x30
 800f312:	af04      	add	r7, sp, #16
 800f314:	60f8      	str	r0, [r7, #12]
 800f316:	60b9      	str	r1, [r7, #8]
 800f318:	603b      	str	r3, [r7, #0]
 800f31a:	4613      	mov	r3, r2
 800f31c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f31e:	88fb      	ldrh	r3, [r7, #6]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4618      	mov	r0, r3
 800f324:	f001 f878 	bl	8010418 <pvPortMalloc>
 800f328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00e      	beq.n	800f34e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f330:	2054      	movs	r0, #84	; 0x54
 800f332:	f001 f871 	bl	8010418 <pvPortMalloc>
 800f336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	697a      	ldr	r2, [r7, #20]
 800f342:	631a      	str	r2, [r3, #48]	; 0x30
 800f344:	e005      	b.n	800f352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f346:	6978      	ldr	r0, [r7, #20]
 800f348:	f001 f932 	bl	80105b0 <vPortFree>
 800f34c:	e001      	b.n	800f352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d017      	beq.n	800f388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f360:	88fa      	ldrh	r2, [r7, #6]
 800f362:	2300      	movs	r3, #0
 800f364:	9303      	str	r3, [sp, #12]
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	9302      	str	r3, [sp, #8]
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	68b9      	ldr	r1, [r7, #8]
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f000 f80e 	bl	800f398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f37c:	69f8      	ldr	r0, [r7, #28]
 800f37e:	f000 f893 	bl	800f4a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f382:	2301      	movs	r3, #1
 800f384:	61bb      	str	r3, [r7, #24]
 800f386:	e002      	b.n	800f38e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295
 800f38c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f38e:	69bb      	ldr	r3, [r7, #24]
	}
 800f390:	4618      	mov	r0, r3
 800f392:	3720      	adds	r7, #32
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b088      	sub	sp, #32
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4413      	add	r3, r2
 800f3b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	f023 0307 	bic.w	r3, r3, #7
 800f3be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	f003 0307 	and.w	r3, r3, #7
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d00a      	beq.n	800f3e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	617b      	str	r3, [r7, #20]
}
 800f3dc:	bf00      	nop
 800f3de:	e7fe      	b.n	800f3de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d01f      	beq.n	800f426 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	61fb      	str	r3, [r7, #28]
 800f3ea:	e012      	b.n	800f412 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f3ec:	68ba      	ldr	r2, [r7, #8]
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	7819      	ldrb	r1, [r3, #0]
 800f3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f6:	69fb      	ldr	r3, [r7, #28]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	3334      	adds	r3, #52	; 0x34
 800f3fc:	460a      	mov	r2, r1
 800f3fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f400:	68ba      	ldr	r2, [r7, #8]
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	4413      	add	r3, r2
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d006      	beq.n	800f41a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	3301      	adds	r3, #1
 800f410:	61fb      	str	r3, [r7, #28]
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	2b0f      	cmp	r3, #15
 800f416:	d9e9      	bls.n	800f3ec <prvInitialiseNewTask+0x54>
 800f418:	e000      	b.n	800f41c <prvInitialiseNewTask+0x84>
			{
				break;
 800f41a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f424:	e003      	b.n	800f42e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	2b06      	cmp	r3, #6
 800f432:	d901      	bls.n	800f438 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f434:	2306      	movs	r3, #6
 800f436:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f43c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f442:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	2200      	movs	r2, #0
 800f448:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	3304      	adds	r3, #4
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff fb5f 	bl	800eb12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	3318      	adds	r3, #24
 800f458:	4618      	mov	r0, r3
 800f45a:	f7ff fb5a 	bl	800eb12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f462:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f466:	f1c3 0207 	rsb	r2, r3, #7
 800f46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f472:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f476:	2200      	movs	r2, #0
 800f478:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f482:	683a      	ldr	r2, [r7, #0]
 800f484:	68f9      	ldr	r1, [r7, #12]
 800f486:	69b8      	ldr	r0, [r7, #24]
 800f488:	f000 fdb4 	bl	800fff4 <pxPortInitialiseStack>
 800f48c:	4602      	mov	r2, r0
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d002      	beq.n	800f49e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f49c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f49e:	bf00      	nop
 800f4a0:	3720      	adds	r7, #32
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
	...

0800f4a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b082      	sub	sp, #8
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4b0:	f000 fed0 	bl	8010254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4b4:	4b2a      	ldr	r3, [pc, #168]	; (800f560 <prvAddNewTaskToReadyList+0xb8>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	4a29      	ldr	r2, [pc, #164]	; (800f560 <prvAddNewTaskToReadyList+0xb8>)
 800f4bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4be:	4b29      	ldr	r3, [pc, #164]	; (800f564 <prvAddNewTaskToReadyList+0xbc>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d109      	bne.n	800f4da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4c6:	4a27      	ldr	r2, [pc, #156]	; (800f564 <prvAddNewTaskToReadyList+0xbc>)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4cc:	4b24      	ldr	r3, [pc, #144]	; (800f560 <prvAddNewTaskToReadyList+0xb8>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d110      	bne.n	800f4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f4d4:	f000 fbc6 	bl	800fc64 <prvInitialiseTaskLists>
 800f4d8:	e00d      	b.n	800f4f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f4da:	4b23      	ldr	r3, [pc, #140]	; (800f568 <prvAddNewTaskToReadyList+0xc0>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d109      	bne.n	800f4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f4e2:	4b20      	ldr	r3, [pc, #128]	; (800f564 <prvAddNewTaskToReadyList+0xbc>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d802      	bhi.n	800f4f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f4f0:	4a1c      	ldr	r2, [pc, #112]	; (800f564 <prvAddNewTaskToReadyList+0xbc>)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4f6:	4b1d      	ldr	r3, [pc, #116]	; (800f56c <prvAddNewTaskToReadyList+0xc4>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	4a1b      	ldr	r2, [pc, #108]	; (800f56c <prvAddNewTaskToReadyList+0xc4>)
 800f4fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f504:	2201      	movs	r2, #1
 800f506:	409a      	lsls	r2, r3
 800f508:	4b19      	ldr	r3, [pc, #100]	; (800f570 <prvAddNewTaskToReadyList+0xc8>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	4a18      	ldr	r2, [pc, #96]	; (800f570 <prvAddNewTaskToReadyList+0xc8>)
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f516:	4613      	mov	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	4413      	add	r3, r2
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	4a15      	ldr	r2, [pc, #84]	; (800f574 <prvAddNewTaskToReadyList+0xcc>)
 800f520:	441a      	add	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	3304      	adds	r3, #4
 800f526:	4619      	mov	r1, r3
 800f528:	4610      	mov	r0, r2
 800f52a:	f7ff faff 	bl	800eb2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f52e:	f000 fec1 	bl	80102b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f532:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <prvAddNewTaskToReadyList+0xc0>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00e      	beq.n	800f558 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f53a:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <prvAddNewTaskToReadyList+0xbc>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f544:	429a      	cmp	r2, r3
 800f546:	d207      	bcs.n	800f558 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f548:	4b0b      	ldr	r3, [pc, #44]	; (800f578 <prvAddNewTaskToReadyList+0xd0>)
 800f54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	20002bdc 	.word	0x20002bdc
 800f564:	20002adc 	.word	0x20002adc
 800f568:	20002be8 	.word	0x20002be8
 800f56c:	20002bf8 	.word	0x20002bf8
 800f570:	20002be4 	.word	0x20002be4
 800f574:	20002ae0 	.word	0x20002ae0
 800f578:	e000ed04 	.word	0xe000ed04

0800f57c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f584:	2300      	movs	r3, #0
 800f586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d017      	beq.n	800f5be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <vTaskDelay+0x60>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00a      	beq.n	800f5ac <vTaskDelay+0x30>
	__asm volatile
 800f596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	60bb      	str	r3, [r7, #8]
}
 800f5a8:	bf00      	nop
 800f5aa:	e7fe      	b.n	800f5aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f5ac:	f000 f87a 	bl	800f6a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5b0:	2100      	movs	r1, #0
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 fcb8 	bl	800ff28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5b8:	f000 f882 	bl	800f6c0 <xTaskResumeAll>
 800f5bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f5c4:	4b06      	ldr	r3, [pc, #24]	; (800f5e0 <vTaskDelay+0x64>)
 800f5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ca:	601a      	str	r2, [r3, #0]
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5d4:	bf00      	nop
 800f5d6:	3710      	adds	r7, #16
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	20002c04 	.word	0x20002c04
 800f5e0:	e000ed04 	.word	0xe000ed04

0800f5e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b08a      	sub	sp, #40	; 0x28
 800f5e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5f2:	463a      	mov	r2, r7
 800f5f4:	1d39      	adds	r1, r7, #4
 800f5f6:	f107 0308 	add.w	r3, r7, #8
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f0 fff8 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f600:	6839      	ldr	r1, [r7, #0]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	9202      	str	r2, [sp, #8]
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	2300      	movs	r3, #0
 800f610:	460a      	mov	r2, r1
 800f612:	491e      	ldr	r1, [pc, #120]	; (800f68c <vTaskStartScheduler+0xa8>)
 800f614:	481e      	ldr	r0, [pc, #120]	; (800f690 <vTaskStartScheduler+0xac>)
 800f616:	f7ff fe1d 	bl	800f254 <xTaskCreateStatic>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4a1d      	ldr	r2, [pc, #116]	; (800f694 <vTaskStartScheduler+0xb0>)
 800f61e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f620:	4b1c      	ldr	r3, [pc, #112]	; (800f694 <vTaskStartScheduler+0xb0>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f628:	2301      	movs	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	e001      	b.n	800f632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f62e:	2300      	movs	r3, #0
 800f630:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d116      	bne.n	800f666 <vTaskStartScheduler+0x82>
	__asm volatile
 800f638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63c:	f383 8811 	msr	BASEPRI, r3
 800f640:	f3bf 8f6f 	isb	sy
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	613b      	str	r3, [r7, #16]
}
 800f64a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f64c:	4b12      	ldr	r3, [pc, #72]	; (800f698 <vTaskStartScheduler+0xb4>)
 800f64e:	f04f 32ff 	mov.w	r2, #4294967295
 800f652:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f654:	4b11      	ldr	r3, [pc, #68]	; (800f69c <vTaskStartScheduler+0xb8>)
 800f656:	2201      	movs	r2, #1
 800f658:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f65a:	4b11      	ldr	r3, [pc, #68]	; (800f6a0 <vTaskStartScheduler+0xbc>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f660:	f000 fd56 	bl	8010110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f664:	e00e      	b.n	800f684 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66c:	d10a      	bne.n	800f684 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	60fb      	str	r3, [r7, #12]
}
 800f680:	bf00      	nop
 800f682:	e7fe      	b.n	800f682 <vTaskStartScheduler+0x9e>
}
 800f684:	bf00      	nop
 800f686:	3718      	adds	r7, #24
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	080132d0 	.word	0x080132d0
 800f690:	0800fc35 	.word	0x0800fc35
 800f694:	20002c00 	.word	0x20002c00
 800f698:	20002bfc 	.word	0x20002bfc
 800f69c:	20002be8 	.word	0x20002be8
 800f6a0:	20002be0 	.word	0x20002be0

0800f6a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f6a8:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <vTaskSuspendAll+0x18>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	4a03      	ldr	r2, [pc, #12]	; (800f6bc <vTaskSuspendAll+0x18>)
 800f6b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f6b2:	bf00      	nop
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	20002c04 	.word	0x20002c04

0800f6c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6ce:	4b41      	ldr	r3, [pc, #260]	; (800f7d4 <xTaskResumeAll+0x114>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10a      	bne.n	800f6ec <xTaskResumeAll+0x2c>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	603b      	str	r3, [r7, #0]
}
 800f6e8:	bf00      	nop
 800f6ea:	e7fe      	b.n	800f6ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f6ec:	f000 fdb2 	bl	8010254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f6f0:	4b38      	ldr	r3, [pc, #224]	; (800f7d4 <xTaskResumeAll+0x114>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	4a37      	ldr	r2, [pc, #220]	; (800f7d4 <xTaskResumeAll+0x114>)
 800f6f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6fa:	4b36      	ldr	r3, [pc, #216]	; (800f7d4 <xTaskResumeAll+0x114>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d161      	bne.n	800f7c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f702:	4b35      	ldr	r3, [pc, #212]	; (800f7d8 <xTaskResumeAll+0x118>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d05d      	beq.n	800f7c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f70a:	e02e      	b.n	800f76a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f70c:	4b33      	ldr	r3, [pc, #204]	; (800f7dc <xTaskResumeAll+0x11c>)
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3318      	adds	r3, #24
 800f718:	4618      	mov	r0, r3
 800f71a:	f7ff fa64 	bl	800ebe6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3304      	adds	r3, #4
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff fa5f 	bl	800ebe6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f72c:	2201      	movs	r2, #1
 800f72e:	409a      	lsls	r2, r3
 800f730:	4b2b      	ldr	r3, [pc, #172]	; (800f7e0 <xTaskResumeAll+0x120>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4313      	orrs	r3, r2
 800f736:	4a2a      	ldr	r2, [pc, #168]	; (800f7e0 <xTaskResumeAll+0x120>)
 800f738:	6013      	str	r3, [r2, #0]
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73e:	4613      	mov	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4a27      	ldr	r2, [pc, #156]	; (800f7e4 <xTaskResumeAll+0x124>)
 800f748:	441a      	add	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3304      	adds	r3, #4
 800f74e:	4619      	mov	r1, r3
 800f750:	4610      	mov	r0, r2
 800f752:	f7ff f9eb 	bl	800eb2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75a:	4b23      	ldr	r3, [pc, #140]	; (800f7e8 <xTaskResumeAll+0x128>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f760:	429a      	cmp	r2, r3
 800f762:	d302      	bcc.n	800f76a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f764:	4b21      	ldr	r3, [pc, #132]	; (800f7ec <xTaskResumeAll+0x12c>)
 800f766:	2201      	movs	r2, #1
 800f768:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f76a:	4b1c      	ldr	r3, [pc, #112]	; (800f7dc <xTaskResumeAll+0x11c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1cc      	bne.n	800f70c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d001      	beq.n	800f77c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f778:	f000 fb12 	bl	800fda0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f77c:	4b1c      	ldr	r3, [pc, #112]	; (800f7f0 <xTaskResumeAll+0x130>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d010      	beq.n	800f7aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f788:	f000 f836 	bl	800f7f8 <xTaskIncrementTick>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d002      	beq.n	800f798 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f792:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <xTaskResumeAll+0x12c>)
 800f794:	2201      	movs	r2, #1
 800f796:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1f1      	bne.n	800f788 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f7a4:	4b12      	ldr	r3, [pc, #72]	; (800f7f0 <xTaskResumeAll+0x130>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7aa:	4b10      	ldr	r3, [pc, #64]	; (800f7ec <xTaskResumeAll+0x12c>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d009      	beq.n	800f7c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7b6:	4b0f      	ldr	r3, [pc, #60]	; (800f7f4 <xTaskResumeAll+0x134>)
 800f7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7bc:	601a      	str	r2, [r3, #0]
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7c6:	f000 fd75 	bl	80102b4 <vPortExitCritical>

	return xAlreadyYielded;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	20002c04 	.word	0x20002c04
 800f7d8:	20002bdc 	.word	0x20002bdc
 800f7dc:	20002b9c 	.word	0x20002b9c
 800f7e0:	20002be4 	.word	0x20002be4
 800f7e4:	20002ae0 	.word	0x20002ae0
 800f7e8:	20002adc 	.word	0x20002adc
 800f7ec:	20002bf0 	.word	0x20002bf0
 800f7f0:	20002bec 	.word	0x20002bec
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7fe:	2300      	movs	r3, #0
 800f800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f802:	4b4e      	ldr	r3, [pc, #312]	; (800f93c <xTaskIncrementTick+0x144>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	f040 808e 	bne.w	800f928 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f80c:	4b4c      	ldr	r3, [pc, #304]	; (800f940 <xTaskIncrementTick+0x148>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	3301      	adds	r3, #1
 800f812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f814:	4a4a      	ldr	r2, [pc, #296]	; (800f940 <xTaskIncrementTick+0x148>)
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d120      	bne.n	800f862 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f820:	4b48      	ldr	r3, [pc, #288]	; (800f944 <xTaskIncrementTick+0x14c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00a      	beq.n	800f840 <xTaskIncrementTick+0x48>
	__asm volatile
 800f82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	603b      	str	r3, [r7, #0]
}
 800f83c:	bf00      	nop
 800f83e:	e7fe      	b.n	800f83e <xTaskIncrementTick+0x46>
 800f840:	4b40      	ldr	r3, [pc, #256]	; (800f944 <xTaskIncrementTick+0x14c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	60fb      	str	r3, [r7, #12]
 800f846:	4b40      	ldr	r3, [pc, #256]	; (800f948 <xTaskIncrementTick+0x150>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4a3e      	ldr	r2, [pc, #248]	; (800f944 <xTaskIncrementTick+0x14c>)
 800f84c:	6013      	str	r3, [r2, #0]
 800f84e:	4a3e      	ldr	r2, [pc, #248]	; (800f948 <xTaskIncrementTick+0x150>)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	4b3d      	ldr	r3, [pc, #244]	; (800f94c <xTaskIncrementTick+0x154>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3301      	adds	r3, #1
 800f85a:	4a3c      	ldr	r2, [pc, #240]	; (800f94c <xTaskIncrementTick+0x154>)
 800f85c:	6013      	str	r3, [r2, #0]
 800f85e:	f000 fa9f 	bl	800fda0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f862:	4b3b      	ldr	r3, [pc, #236]	; (800f950 <xTaskIncrementTick+0x158>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d348      	bcc.n	800f8fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f86c:	4b35      	ldr	r3, [pc, #212]	; (800f944 <xTaskIncrementTick+0x14c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d104      	bne.n	800f880 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f876:	4b36      	ldr	r3, [pc, #216]	; (800f950 <xTaskIncrementTick+0x158>)
 800f878:	f04f 32ff 	mov.w	r2, #4294967295
 800f87c:	601a      	str	r2, [r3, #0]
					break;
 800f87e:	e03e      	b.n	800f8fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f880:	4b30      	ldr	r3, [pc, #192]	; (800f944 <xTaskIncrementTick+0x14c>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f890:	693a      	ldr	r2, [r7, #16]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	429a      	cmp	r2, r3
 800f896:	d203      	bcs.n	800f8a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f898:	4a2d      	ldr	r2, [pc, #180]	; (800f950 <xTaskIncrementTick+0x158>)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f89e:	e02e      	b.n	800f8fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	3304      	adds	r3, #4
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff f99e 	bl	800ebe6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d004      	beq.n	800f8bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	3318      	adds	r3, #24
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7ff f995 	bl	800ebe6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	409a      	lsls	r2, r3
 800f8c4:	4b23      	ldr	r3, [pc, #140]	; (800f954 <xTaskIncrementTick+0x15c>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	4a22      	ldr	r2, [pc, #136]	; (800f954 <xTaskIncrementTick+0x15c>)
 800f8cc:	6013      	str	r3, [r2, #0]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	4413      	add	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4a1f      	ldr	r2, [pc, #124]	; (800f958 <xTaskIncrementTick+0x160>)
 800f8dc:	441a      	add	r2, r3
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	3304      	adds	r3, #4
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	f7ff f921 	bl	800eb2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ee:	4b1b      	ldr	r3, [pc, #108]	; (800f95c <xTaskIncrementTick+0x164>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d3b9      	bcc.n	800f86c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8fc:	e7b6      	b.n	800f86c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8fe:	4b17      	ldr	r3, [pc, #92]	; (800f95c <xTaskIncrementTick+0x164>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f904:	4914      	ldr	r1, [pc, #80]	; (800f958 <xTaskIncrementTick+0x160>)
 800f906:	4613      	mov	r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	440b      	add	r3, r1
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b01      	cmp	r3, #1
 800f914:	d901      	bls.n	800f91a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f916:	2301      	movs	r3, #1
 800f918:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f91a:	4b11      	ldr	r3, [pc, #68]	; (800f960 <xTaskIncrementTick+0x168>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d007      	beq.n	800f932 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f922:	2301      	movs	r3, #1
 800f924:	617b      	str	r3, [r7, #20]
 800f926:	e004      	b.n	800f932 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f928:	4b0e      	ldr	r3, [pc, #56]	; (800f964 <xTaskIncrementTick+0x16c>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	3301      	adds	r3, #1
 800f92e:	4a0d      	ldr	r2, [pc, #52]	; (800f964 <xTaskIncrementTick+0x16c>)
 800f930:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f932:	697b      	ldr	r3, [r7, #20]
}
 800f934:	4618      	mov	r0, r3
 800f936:	3718      	adds	r7, #24
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	20002c04 	.word	0x20002c04
 800f940:	20002be0 	.word	0x20002be0
 800f944:	20002b94 	.word	0x20002b94
 800f948:	20002b98 	.word	0x20002b98
 800f94c:	20002bf4 	.word	0x20002bf4
 800f950:	20002bfc 	.word	0x20002bfc
 800f954:	20002be4 	.word	0x20002be4
 800f958:	20002ae0 	.word	0x20002ae0
 800f95c:	20002adc 	.word	0x20002adc
 800f960:	20002bf0 	.word	0x20002bf0
 800f964:	20002bec 	.word	0x20002bec

0800f968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f968:	b480      	push	{r7}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f96e:	4b27      	ldr	r3, [pc, #156]	; (800fa0c <vTaskSwitchContext+0xa4>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d003      	beq.n	800f97e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f976:	4b26      	ldr	r3, [pc, #152]	; (800fa10 <vTaskSwitchContext+0xa8>)
 800f978:	2201      	movs	r2, #1
 800f97a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f97c:	e03f      	b.n	800f9fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f97e:	4b24      	ldr	r3, [pc, #144]	; (800fa10 <vTaskSwitchContext+0xa8>)
 800f980:	2200      	movs	r2, #0
 800f982:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f984:	4b23      	ldr	r3, [pc, #140]	; (800fa14 <vTaskSwitchContext+0xac>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	fab3 f383 	clz	r3, r3
 800f990:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f992:	7afb      	ldrb	r3, [r7, #11]
 800f994:	f1c3 031f 	rsb	r3, r3, #31
 800f998:	617b      	str	r3, [r7, #20]
 800f99a:	491f      	ldr	r1, [pc, #124]	; (800fa18 <vTaskSwitchContext+0xb0>)
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	4613      	mov	r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	4413      	add	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	440b      	add	r3, r1
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10a      	bne.n	800f9c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	607b      	str	r3, [r7, #4]
}
 800f9c0:	bf00      	nop
 800f9c2:	e7fe      	b.n	800f9c2 <vTaskSwitchContext+0x5a>
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	4613      	mov	r3, r2
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	4413      	add	r3, r2
 800f9cc:	009b      	lsls	r3, r3, #2
 800f9ce:	4a12      	ldr	r2, [pc, #72]	; (800fa18 <vTaskSwitchContext+0xb0>)
 800f9d0:	4413      	add	r3, r2
 800f9d2:	613b      	str	r3, [r7, #16]
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	685a      	ldr	r2, [r3, #4]
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	605a      	str	r2, [r3, #4]
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d104      	bne.n	800f9f4 <vTaskSwitchContext+0x8c>
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	685a      	ldr	r2, [r3, #4]
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	605a      	str	r2, [r3, #4]
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	4a08      	ldr	r2, [pc, #32]	; (800fa1c <vTaskSwitchContext+0xb4>)
 800f9fc:	6013      	str	r3, [r2, #0]
}
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	20002c04 	.word	0x20002c04
 800fa10:	20002bf0 	.word	0x20002bf0
 800fa14:	20002be4 	.word	0x20002be4
 800fa18:	20002ae0 	.word	0x20002ae0
 800fa1c:	20002adc 	.word	0x20002adc

0800fa20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10a      	bne.n	800fa46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa34:	f383 8811 	msr	BASEPRI, r3
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	60fb      	str	r3, [r7, #12]
}
 800fa42:	bf00      	nop
 800fa44:	e7fe      	b.n	800fa44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa46:	4b07      	ldr	r3, [pc, #28]	; (800fa64 <vTaskPlaceOnEventList+0x44>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	3318      	adds	r3, #24
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7ff f890 	bl	800eb74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa54:	2101      	movs	r1, #1
 800fa56:	6838      	ldr	r0, [r7, #0]
 800fa58:	f000 fa66 	bl	800ff28 <prvAddCurrentTaskToDelayedList>
}
 800fa5c:	bf00      	nop
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20002adc 	.word	0x20002adc

0800fa68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d10a      	bne.n	800fa94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	60fb      	str	r3, [r7, #12]
}
 800fa90:	bf00      	nop
 800fa92:	e7fe      	b.n	800fa92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	3318      	adds	r3, #24
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff f8a4 	bl	800ebe6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa9e:	4b1d      	ldr	r3, [pc, #116]	; (800fb14 <xTaskRemoveFromEventList+0xac>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d11c      	bne.n	800fae0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	3304      	adds	r3, #4
 800faaa:	4618      	mov	r0, r3
 800faac:	f7ff f89b 	bl	800ebe6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab4:	2201      	movs	r2, #1
 800fab6:	409a      	lsls	r2, r3
 800fab8:	4b17      	ldr	r3, [pc, #92]	; (800fb18 <xTaskRemoveFromEventList+0xb0>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	4a16      	ldr	r2, [pc, #88]	; (800fb18 <xTaskRemoveFromEventList+0xb0>)
 800fac0:	6013      	str	r3, [r2, #0]
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac6:	4613      	mov	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4413      	add	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4a13      	ldr	r2, [pc, #76]	; (800fb1c <xTaskRemoveFromEventList+0xb4>)
 800fad0:	441a      	add	r2, r3
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3304      	adds	r3, #4
 800fad6:	4619      	mov	r1, r3
 800fad8:	4610      	mov	r0, r2
 800fada:	f7ff f827 	bl	800eb2c <vListInsertEnd>
 800fade:	e005      	b.n	800faec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3318      	adds	r3, #24
 800fae4:	4619      	mov	r1, r3
 800fae6:	480e      	ldr	r0, [pc, #56]	; (800fb20 <xTaskRemoveFromEventList+0xb8>)
 800fae8:	f7ff f820 	bl	800eb2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf0:	4b0c      	ldr	r3, [pc, #48]	; (800fb24 <xTaskRemoveFromEventList+0xbc>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d905      	bls.n	800fb06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fafa:	2301      	movs	r3, #1
 800fafc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fafe:	4b0a      	ldr	r3, [pc, #40]	; (800fb28 <xTaskRemoveFromEventList+0xc0>)
 800fb00:	2201      	movs	r2, #1
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	e001      	b.n	800fb0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fb06:	2300      	movs	r3, #0
 800fb08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fb0a:	697b      	ldr	r3, [r7, #20]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	20002c04 	.word	0x20002c04
 800fb18:	20002be4 	.word	0x20002be4
 800fb1c:	20002ae0 	.word	0x20002ae0
 800fb20:	20002b9c 	.word	0x20002b9c
 800fb24:	20002adc 	.word	0x20002adc
 800fb28:	20002bf0 	.word	0x20002bf0

0800fb2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb34:	4b06      	ldr	r3, [pc, #24]	; (800fb50 <vTaskInternalSetTimeOutState+0x24>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb3c:	4b05      	ldr	r3, [pc, #20]	; (800fb54 <vTaskInternalSetTimeOutState+0x28>)
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	605a      	str	r2, [r3, #4]
}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr
 800fb50:	20002bf4 	.word	0x20002bf4
 800fb54:	20002be0 	.word	0x20002be0

0800fb58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b088      	sub	sp, #32
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10a      	bne.n	800fb7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6c:	f383 8811 	msr	BASEPRI, r3
 800fb70:	f3bf 8f6f 	isb	sy
 800fb74:	f3bf 8f4f 	dsb	sy
 800fb78:	613b      	str	r3, [r7, #16]
}
 800fb7a:	bf00      	nop
 800fb7c:	e7fe      	b.n	800fb7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10a      	bne.n	800fb9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb88:	f383 8811 	msr	BASEPRI, r3
 800fb8c:	f3bf 8f6f 	isb	sy
 800fb90:	f3bf 8f4f 	dsb	sy
 800fb94:	60fb      	str	r3, [r7, #12]
}
 800fb96:	bf00      	nop
 800fb98:	e7fe      	b.n	800fb98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fb9a:	f000 fb5b 	bl	8010254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb9e:	4b1d      	ldr	r3, [pc, #116]	; (800fc14 <xTaskCheckForTimeOut+0xbc>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	69ba      	ldr	r2, [r7, #24]
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb6:	d102      	bne.n	800fbbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	61fb      	str	r3, [r7, #28]
 800fbbc:	e023      	b.n	800fc06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	4b15      	ldr	r3, [pc, #84]	; (800fc18 <xTaskCheckForTimeOut+0xc0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d007      	beq.n	800fbda <xTaskCheckForTimeOut+0x82>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d302      	bcc.n	800fbda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	61fb      	str	r3, [r7, #28]
 800fbd8:	e015      	b.n	800fc06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d20b      	bcs.n	800fbfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	1ad2      	subs	r2, r2, r3
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff ff9b 	bl	800fb2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	61fb      	str	r3, [r7, #28]
 800fbfa:	e004      	b.n	800fc06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc02:	2301      	movs	r3, #1
 800fc04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fc06:	f000 fb55 	bl	80102b4 <vPortExitCritical>

	return xReturn;
 800fc0a:	69fb      	ldr	r3, [r7, #28]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3720      	adds	r7, #32
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20002be0 	.word	0x20002be0
 800fc18:	20002bf4 	.word	0x20002bf4

0800fc1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc20:	4b03      	ldr	r3, [pc, #12]	; (800fc30 <vTaskMissedYield+0x14>)
 800fc22:	2201      	movs	r2, #1
 800fc24:	601a      	str	r2, [r3, #0]
}
 800fc26:	bf00      	nop
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	20002bf0 	.word	0x20002bf0

0800fc34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc3c:	f000 f852 	bl	800fce4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc40:	4b06      	ldr	r3, [pc, #24]	; (800fc5c <prvIdleTask+0x28>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d9f9      	bls.n	800fc3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <prvIdleTask+0x2c>)
 800fc4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc58:	e7f0      	b.n	800fc3c <prvIdleTask+0x8>
 800fc5a:	bf00      	nop
 800fc5c:	20002ae0 	.word	0x20002ae0
 800fc60:	e000ed04 	.word	0xe000ed04

0800fc64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	607b      	str	r3, [r7, #4]
 800fc6e:	e00c      	b.n	800fc8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	4613      	mov	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	4413      	add	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4a12      	ldr	r2, [pc, #72]	; (800fcc4 <prvInitialiseTaskLists+0x60>)
 800fc7c:	4413      	add	r3, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe ff27 	bl	800ead2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	3301      	adds	r3, #1
 800fc88:	607b      	str	r3, [r7, #4]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b06      	cmp	r3, #6
 800fc8e:	d9ef      	bls.n	800fc70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc90:	480d      	ldr	r0, [pc, #52]	; (800fcc8 <prvInitialiseTaskLists+0x64>)
 800fc92:	f7fe ff1e 	bl	800ead2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc96:	480d      	ldr	r0, [pc, #52]	; (800fccc <prvInitialiseTaskLists+0x68>)
 800fc98:	f7fe ff1b 	bl	800ead2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc9c:	480c      	ldr	r0, [pc, #48]	; (800fcd0 <prvInitialiseTaskLists+0x6c>)
 800fc9e:	f7fe ff18 	bl	800ead2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fca2:	480c      	ldr	r0, [pc, #48]	; (800fcd4 <prvInitialiseTaskLists+0x70>)
 800fca4:	f7fe ff15 	bl	800ead2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fca8:	480b      	ldr	r0, [pc, #44]	; (800fcd8 <prvInitialiseTaskLists+0x74>)
 800fcaa:	f7fe ff12 	bl	800ead2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fcae:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <prvInitialiseTaskLists+0x78>)
 800fcb0:	4a05      	ldr	r2, [pc, #20]	; (800fcc8 <prvInitialiseTaskLists+0x64>)
 800fcb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fcb4:	4b0a      	ldr	r3, [pc, #40]	; (800fce0 <prvInitialiseTaskLists+0x7c>)
 800fcb6:	4a05      	ldr	r2, [pc, #20]	; (800fccc <prvInitialiseTaskLists+0x68>)
 800fcb8:	601a      	str	r2, [r3, #0]
}
 800fcba:	bf00      	nop
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20002ae0 	.word	0x20002ae0
 800fcc8:	20002b6c 	.word	0x20002b6c
 800fccc:	20002b80 	.word	0x20002b80
 800fcd0:	20002b9c 	.word	0x20002b9c
 800fcd4:	20002bb0 	.word	0x20002bb0
 800fcd8:	20002bc8 	.word	0x20002bc8
 800fcdc:	20002b94 	.word	0x20002b94
 800fce0:	20002b98 	.word	0x20002b98

0800fce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcea:	e019      	b.n	800fd20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fcec:	f000 fab2 	bl	8010254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcf0:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <prvCheckTasksWaitingTermination+0x50>)
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fe ff72 	bl	800ebe6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd02:	4b0d      	ldr	r3, [pc, #52]	; (800fd38 <prvCheckTasksWaitingTermination+0x54>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	4a0b      	ldr	r2, [pc, #44]	; (800fd38 <prvCheckTasksWaitingTermination+0x54>)
 800fd0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd0c:	4b0b      	ldr	r3, [pc, #44]	; (800fd3c <prvCheckTasksWaitingTermination+0x58>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3b01      	subs	r3, #1
 800fd12:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <prvCheckTasksWaitingTermination+0x58>)
 800fd14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd16:	f000 facd 	bl	80102b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 f810 	bl	800fd40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd20:	4b06      	ldr	r3, [pc, #24]	; (800fd3c <prvCheckTasksWaitingTermination+0x58>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e1      	bne.n	800fcec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd28:	bf00      	nop
 800fd2a:	bf00      	nop
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	20002bb0 	.word	0x20002bb0
 800fd38:	20002bdc 	.word	0x20002bdc
 800fd3c:	20002bc4 	.word	0x20002bc4

0800fd40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d108      	bne.n	800fd64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fc2a 	bl	80105b0 <vPortFree>
				vPortFree( pxTCB );
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 fc27 	bl	80105b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd62:	e018      	b.n	800fd96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd6a:	2b01      	cmp	r3, #1
 800fd6c:	d103      	bne.n	800fd76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fc1e 	bl	80105b0 <vPortFree>
	}
 800fd74:	e00f      	b.n	800fd96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d00a      	beq.n	800fd96 <prvDeleteTCB+0x56>
	__asm volatile
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	f383 8811 	msr	BASEPRI, r3
 800fd88:	f3bf 8f6f 	isb	sy
 800fd8c:	f3bf 8f4f 	dsb	sy
 800fd90:	60fb      	str	r3, [r7, #12]
}
 800fd92:	bf00      	nop
 800fd94:	e7fe      	b.n	800fd94 <prvDeleteTCB+0x54>
	}
 800fd96:	bf00      	nop
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fda6:	4b0c      	ldr	r3, [pc, #48]	; (800fdd8 <prvResetNextTaskUnblockTime+0x38>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d104      	bne.n	800fdba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	; (800fddc <prvResetNextTaskUnblockTime+0x3c>)
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fdb8:	e008      	b.n	800fdcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdba:	4b07      	ldr	r3, [pc, #28]	; (800fdd8 <prvResetNextTaskUnblockTime+0x38>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	4a04      	ldr	r2, [pc, #16]	; (800fddc <prvResetNextTaskUnblockTime+0x3c>)
 800fdca:	6013      	str	r3, [r2, #0]
}
 800fdcc:	bf00      	nop
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	20002b94 	.word	0x20002b94
 800fddc:	20002bfc 	.word	0x20002bfc

0800fde0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <xTaskGetSchedulerState+0x34>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	607b      	str	r3, [r7, #4]
 800fdf2:	e008      	b.n	800fe06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdf4:	4b08      	ldr	r3, [pc, #32]	; (800fe18 <xTaskGetSchedulerState+0x38>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d102      	bne.n	800fe02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	607b      	str	r3, [r7, #4]
 800fe00:	e001      	b.n	800fe06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe02:	2300      	movs	r3, #0
 800fe04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe06:	687b      	ldr	r3, [r7, #4]
	}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	20002be8 	.word	0x20002be8
 800fe18:	20002c04 	.word	0x20002c04

0800fe1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d06e      	beq.n	800ff10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe32:	4b3a      	ldr	r3, [pc, #232]	; (800ff1c <xTaskPriorityDisinherit+0x100>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	693a      	ldr	r2, [r7, #16]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d00a      	beq.n	800fe52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	60fb      	str	r3, [r7, #12]
}
 800fe4e:	bf00      	nop
 800fe50:	e7fe      	b.n	800fe50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d10a      	bne.n	800fe70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fe5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5e:	f383 8811 	msr	BASEPRI, r3
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	60bb      	str	r3, [r7, #8]
}
 800fe6c:	bf00      	nop
 800fe6e:	e7fe      	b.n	800fe6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe74:	1e5a      	subs	r2, r3, #1
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d044      	beq.n	800ff10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d140      	bne.n	800ff10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	3304      	adds	r3, #4
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fe fea7 	bl	800ebe6 <uxListRemove>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d115      	bne.n	800feca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea2:	491f      	ldr	r1, [pc, #124]	; (800ff20 <xTaskPriorityDisinherit+0x104>)
 800fea4:	4613      	mov	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	440b      	add	r3, r1
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10a      	bne.n	800feca <xTaskPriorityDisinherit+0xae>
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb8:	2201      	movs	r2, #1
 800feba:	fa02 f303 	lsl.w	r3, r2, r3
 800febe:	43da      	mvns	r2, r3
 800fec0:	4b18      	ldr	r3, [pc, #96]	; (800ff24 <xTaskPriorityDisinherit+0x108>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4013      	ands	r3, r2
 800fec6:	4a17      	ldr	r2, [pc, #92]	; (800ff24 <xTaskPriorityDisinherit+0x108>)
 800fec8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	f1c3 0207 	rsb	r2, r3, #7
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee2:	2201      	movs	r2, #1
 800fee4:	409a      	lsls	r2, r3
 800fee6:	4b0f      	ldr	r3, [pc, #60]	; (800ff24 <xTaskPriorityDisinherit+0x108>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4313      	orrs	r3, r2
 800feec:	4a0d      	ldr	r2, [pc, #52]	; (800ff24 <xTaskPriorityDisinherit+0x108>)
 800feee:	6013      	str	r3, [r2, #0]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef4:	4613      	mov	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	4413      	add	r3, r2
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	4a08      	ldr	r2, [pc, #32]	; (800ff20 <xTaskPriorityDisinherit+0x104>)
 800fefe:	441a      	add	r2, r3
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	3304      	adds	r3, #4
 800ff04:	4619      	mov	r1, r3
 800ff06:	4610      	mov	r0, r2
 800ff08:	f7fe fe10 	bl	800eb2c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff10:	697b      	ldr	r3, [r7, #20]
	}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3718      	adds	r7, #24
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	20002adc 	.word	0x20002adc
 800ff20:	20002ae0 	.word	0x20002ae0
 800ff24:	20002be4 	.word	0x20002be4

0800ff28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ff32:	4b29      	ldr	r3, [pc, #164]	; (800ffd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff38:	4b28      	ldr	r3, [pc, #160]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fe fe51 	bl	800ebe6 <uxListRemove>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d10b      	bne.n	800ff62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ff4a:	4b24      	ldr	r3, [pc, #144]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff50:	2201      	movs	r2, #1
 800ff52:	fa02 f303 	lsl.w	r3, r2, r3
 800ff56:	43da      	mvns	r2, r3
 800ff58:	4b21      	ldr	r3, [pc, #132]	; (800ffe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	4a20      	ldr	r2, [pc, #128]	; (800ffe0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ff60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff68:	d10a      	bne.n	800ff80 <prvAddCurrentTaskToDelayedList+0x58>
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d007      	beq.n	800ff80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff70:	4b1a      	ldr	r3, [pc, #104]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4619      	mov	r1, r3
 800ff78:	481a      	ldr	r0, [pc, #104]	; (800ffe4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ff7a:	f7fe fdd7 	bl	800eb2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ff7e:	e026      	b.n	800ffce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4413      	add	r3, r2
 800ff86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ff88:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ff90:	68ba      	ldr	r2, [r7, #8]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d209      	bcs.n	800ffac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ff98:	4b13      	ldr	r3, [pc, #76]	; (800ffe8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	4b0f      	ldr	r3, [pc, #60]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	f7fe fde5 	bl	800eb74 <vListInsert>
}
 800ffaa:	e010      	b.n	800ffce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ffac:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <prvAddCurrentTaskToDelayedList+0xc4>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	4610      	mov	r0, r2
 800ffba:	f7fe fddb 	bl	800eb74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ffbe:	4b0c      	ldr	r3, [pc, #48]	; (800fff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d202      	bcs.n	800ffce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ffc8:	4a09      	ldr	r2, [pc, #36]	; (800fff0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	6013      	str	r3, [r2, #0]
}
 800ffce:	bf00      	nop
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20002be0 	.word	0x20002be0
 800ffdc:	20002adc 	.word	0x20002adc
 800ffe0:	20002be4 	.word	0x20002be4
 800ffe4:	20002bc8 	.word	0x20002bc8
 800ffe8:	20002b98 	.word	0x20002b98
 800ffec:	20002b94 	.word	0x20002b94
 800fff0:	20002bfc 	.word	0x20002bfc

0800fff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	3b04      	subs	r3, #4
 8010004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801000c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3b04      	subs	r3, #4
 8010012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	f023 0201 	bic.w	r2, r3, #1
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3b04      	subs	r3, #4
 8010022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010024:	4a0c      	ldr	r2, [pc, #48]	; (8010058 <pxPortInitialiseStack+0x64>)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3b14      	subs	r3, #20
 801002e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	3b04      	subs	r3, #4
 801003a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f06f 0202 	mvn.w	r2, #2
 8010042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3b20      	subs	r3, #32
 8010048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801004a:	68fb      	ldr	r3, [r7, #12]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	0801005d 	.word	0x0801005d

0801005c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801005c:	b480      	push	{r7}
 801005e:	b085      	sub	sp, #20
 8010060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010062:	2300      	movs	r3, #0
 8010064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010066:	4b12      	ldr	r3, [pc, #72]	; (80100b0 <prvTaskExitError+0x54>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801006e:	d00a      	beq.n	8010086 <prvTaskExitError+0x2a>
	__asm volatile
 8010070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010074:	f383 8811 	msr	BASEPRI, r3
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	f3bf 8f4f 	dsb	sy
 8010080:	60fb      	str	r3, [r7, #12]
}
 8010082:	bf00      	nop
 8010084:	e7fe      	b.n	8010084 <prvTaskExitError+0x28>
	__asm volatile
 8010086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	60bb      	str	r3, [r7, #8]
}
 8010098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801009a:	bf00      	nop
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d0fc      	beq.n	801009c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100a2:	bf00      	nop
 80100a4:	bf00      	nop
 80100a6:	3714      	adds	r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr
 80100b0:	20000098 	.word	0x20000098
	...

080100c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100c0:	4b07      	ldr	r3, [pc, #28]	; (80100e0 <pxCurrentTCBConst2>)
 80100c2:	6819      	ldr	r1, [r3, #0]
 80100c4:	6808      	ldr	r0, [r1, #0]
 80100c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ca:	f380 8809 	msr	PSP, r0
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	f04f 0000 	mov.w	r0, #0
 80100d6:	f380 8811 	msr	BASEPRI, r0
 80100da:	4770      	bx	lr
 80100dc:	f3af 8000 	nop.w

080100e0 <pxCurrentTCBConst2>:
 80100e0:	20002adc 	.word	0x20002adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop

080100e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80100e8:	4808      	ldr	r0, [pc, #32]	; (801010c <prvPortStartFirstTask+0x24>)
 80100ea:	6800      	ldr	r0, [r0, #0]
 80100ec:	6800      	ldr	r0, [r0, #0]
 80100ee:	f380 8808 	msr	MSP, r0
 80100f2:	f04f 0000 	mov.w	r0, #0
 80100f6:	f380 8814 	msr	CONTROL, r0
 80100fa:	b662      	cpsie	i
 80100fc:	b661      	cpsie	f
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	df00      	svc	0
 8010108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801010a:	bf00      	nop
 801010c:	e000ed08 	.word	0xe000ed08

08010110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b086      	sub	sp, #24
 8010114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010116:	4b46      	ldr	r3, [pc, #280]	; (8010230 <xPortStartScheduler+0x120>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4a46      	ldr	r2, [pc, #280]	; (8010234 <xPortStartScheduler+0x124>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d10a      	bne.n	8010136 <xPortStartScheduler+0x26>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	613b      	str	r3, [r7, #16]
}
 8010132:	bf00      	nop
 8010134:	e7fe      	b.n	8010134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010136:	4b3e      	ldr	r3, [pc, #248]	; (8010230 <xPortStartScheduler+0x120>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4a3f      	ldr	r2, [pc, #252]	; (8010238 <xPortStartScheduler+0x128>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d10a      	bne.n	8010156 <xPortStartScheduler+0x46>
	__asm volatile
 8010140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010144:	f383 8811 	msr	BASEPRI, r3
 8010148:	f3bf 8f6f 	isb	sy
 801014c:	f3bf 8f4f 	dsb	sy
 8010150:	60fb      	str	r3, [r7, #12]
}
 8010152:	bf00      	nop
 8010154:	e7fe      	b.n	8010154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010156:	4b39      	ldr	r3, [pc, #228]	; (801023c <xPortStartScheduler+0x12c>)
 8010158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	b2db      	uxtb	r3, r3
 8010160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	22ff      	movs	r2, #255	; 0xff
 8010166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	b2db      	uxtb	r3, r3
 801016e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010178:	b2da      	uxtb	r2, r3
 801017a:	4b31      	ldr	r3, [pc, #196]	; (8010240 <xPortStartScheduler+0x130>)
 801017c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801017e:	4b31      	ldr	r3, [pc, #196]	; (8010244 <xPortStartScheduler+0x134>)
 8010180:	2207      	movs	r2, #7
 8010182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010184:	e009      	b.n	801019a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010186:	4b2f      	ldr	r3, [pc, #188]	; (8010244 <xPortStartScheduler+0x134>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3b01      	subs	r3, #1
 801018c:	4a2d      	ldr	r2, [pc, #180]	; (8010244 <xPortStartScheduler+0x134>)
 801018e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	b2db      	uxtb	r3, r3
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	b2db      	uxtb	r3, r3
 8010198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801019a:	78fb      	ldrb	r3, [r7, #3]
 801019c:	b2db      	uxtb	r3, r3
 801019e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101a2:	2b80      	cmp	r3, #128	; 0x80
 80101a4:	d0ef      	beq.n	8010186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101a6:	4b27      	ldr	r3, [pc, #156]	; (8010244 <xPortStartScheduler+0x134>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f1c3 0307 	rsb	r3, r3, #7
 80101ae:	2b04      	cmp	r3, #4
 80101b0:	d00a      	beq.n	80101c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	60bb      	str	r3, [r7, #8]
}
 80101c4:	bf00      	nop
 80101c6:	e7fe      	b.n	80101c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101c8:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <xPortStartScheduler+0x134>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	021b      	lsls	r3, r3, #8
 80101ce:	4a1d      	ldr	r2, [pc, #116]	; (8010244 <xPortStartScheduler+0x134>)
 80101d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80101d2:	4b1c      	ldr	r3, [pc, #112]	; (8010244 <xPortStartScheduler+0x134>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80101da:	4a1a      	ldr	r2, [pc, #104]	; (8010244 <xPortStartScheduler+0x134>)
 80101dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80101e6:	4b18      	ldr	r3, [pc, #96]	; (8010248 <xPortStartScheduler+0x138>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a17      	ldr	r2, [pc, #92]	; (8010248 <xPortStartScheduler+0x138>)
 80101ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80101f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80101f2:	4b15      	ldr	r3, [pc, #84]	; (8010248 <xPortStartScheduler+0x138>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a14      	ldr	r2, [pc, #80]	; (8010248 <xPortStartScheduler+0x138>)
 80101f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80101fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80101fe:	f000 f8dd 	bl	80103bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010202:	4b12      	ldr	r3, [pc, #72]	; (801024c <xPortStartScheduler+0x13c>)
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010208:	f000 f8fc 	bl	8010404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801020c:	4b10      	ldr	r3, [pc, #64]	; (8010250 <xPortStartScheduler+0x140>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a0f      	ldr	r2, [pc, #60]	; (8010250 <xPortStartScheduler+0x140>)
 8010212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010218:	f7ff ff66 	bl	80100e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801021c:	f7ff fba4 	bl	800f968 <vTaskSwitchContext>
	prvTaskExitError();
 8010220:	f7ff ff1c 	bl	801005c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3718      	adds	r7, #24
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	e000ed00 	.word	0xe000ed00
 8010234:	410fc271 	.word	0x410fc271
 8010238:	410fc270 	.word	0x410fc270
 801023c:	e000e400 	.word	0xe000e400
 8010240:	20002c08 	.word	0x20002c08
 8010244:	20002c0c 	.word	0x20002c0c
 8010248:	e000ed20 	.word	0xe000ed20
 801024c:	20000098 	.word	0x20000098
 8010250:	e000ef34 	.word	0xe000ef34

08010254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	607b      	str	r3, [r7, #4]
}
 801026c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801026e:	4b0f      	ldr	r3, [pc, #60]	; (80102ac <vPortEnterCritical+0x58>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	4a0d      	ldr	r2, [pc, #52]	; (80102ac <vPortEnterCritical+0x58>)
 8010276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010278:	4b0c      	ldr	r3, [pc, #48]	; (80102ac <vPortEnterCritical+0x58>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d10f      	bne.n	80102a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010280:	4b0b      	ldr	r3, [pc, #44]	; (80102b0 <vPortEnterCritical+0x5c>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	b2db      	uxtb	r3, r3
 8010286:	2b00      	cmp	r3, #0
 8010288:	d00a      	beq.n	80102a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	603b      	str	r3, [r7, #0]
}
 801029c:	bf00      	nop
 801029e:	e7fe      	b.n	801029e <vPortEnterCritical+0x4a>
	}
}
 80102a0:	bf00      	nop
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	20000098 	.word	0x20000098
 80102b0:	e000ed04 	.word	0xe000ed04

080102b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ba:	4b12      	ldr	r3, [pc, #72]	; (8010304 <vPortExitCritical+0x50>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10a      	bne.n	80102d8 <vPortExitCritical+0x24>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	f383 8811 	msr	BASEPRI, r3
 80102ca:	f3bf 8f6f 	isb	sy
 80102ce:	f3bf 8f4f 	dsb	sy
 80102d2:	607b      	str	r3, [r7, #4]
}
 80102d4:	bf00      	nop
 80102d6:	e7fe      	b.n	80102d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80102d8:	4b0a      	ldr	r3, [pc, #40]	; (8010304 <vPortExitCritical+0x50>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3b01      	subs	r3, #1
 80102de:	4a09      	ldr	r2, [pc, #36]	; (8010304 <vPortExitCritical+0x50>)
 80102e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80102e2:	4b08      	ldr	r3, [pc, #32]	; (8010304 <vPortExitCritical+0x50>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d105      	bne.n	80102f6 <vPortExitCritical+0x42>
 80102ea:	2300      	movs	r3, #0
 80102ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80102f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80102f6:	bf00      	nop
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	20000098 	.word	0x20000098
	...

08010310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010310:	f3ef 8009 	mrs	r0, PSP
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	4b15      	ldr	r3, [pc, #84]	; (8010370 <pxCurrentTCBConst>)
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	f01e 0f10 	tst.w	lr, #16
 8010320:	bf08      	it	eq
 8010322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801032a:	6010      	str	r0, [r2, #0]
 801032c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010334:	f380 8811 	msr	BASEPRI, r0
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f7ff fb12 	bl	800f968 <vTaskSwitchContext>
 8010344:	f04f 0000 	mov.w	r0, #0
 8010348:	f380 8811 	msr	BASEPRI, r0
 801034c:	bc09      	pop	{r0, r3}
 801034e:	6819      	ldr	r1, [r3, #0]
 8010350:	6808      	ldr	r0, [r1, #0]
 8010352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010356:	f01e 0f10 	tst.w	lr, #16
 801035a:	bf08      	it	eq
 801035c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010360:	f380 8809 	msr	PSP, r0
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	f3af 8000 	nop.w

08010370 <pxCurrentTCBConst>:
 8010370:	20002adc 	.word	0x20002adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010374:	bf00      	nop
 8010376:	bf00      	nop

08010378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010382:	f383 8811 	msr	BASEPRI, r3
 8010386:	f3bf 8f6f 	isb	sy
 801038a:	f3bf 8f4f 	dsb	sy
 801038e:	607b      	str	r3, [r7, #4]
}
 8010390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010392:	f7ff fa31 	bl	800f7f8 <xTaskIncrementTick>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d003      	beq.n	80103a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801039c:	4b06      	ldr	r3, [pc, #24]	; (80103b8 <SysTick_Handler+0x40>)
 801039e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	2300      	movs	r3, #0
 80103a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	f383 8811 	msr	BASEPRI, r3
}
 80103ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	e000ed04 	.word	0xe000ed04

080103bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103bc:	b480      	push	{r7}
 80103be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <vPortSetupTimerInterrupt+0x34>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103c6:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <vPortSetupTimerInterrupt+0x38>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <vPortSetupTimerInterrupt+0x3c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a0a      	ldr	r2, [pc, #40]	; (80103fc <vPortSetupTimerInterrupt+0x40>)
 80103d2:	fba2 2303 	umull	r2, r3, r2, r3
 80103d6:	099b      	lsrs	r3, r3, #6
 80103d8:	4a09      	ldr	r2, [pc, #36]	; (8010400 <vPortSetupTimerInterrupt+0x44>)
 80103da:	3b01      	subs	r3, #1
 80103dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80103de:	4b04      	ldr	r3, [pc, #16]	; (80103f0 <vPortSetupTimerInterrupt+0x34>)
 80103e0:	2207      	movs	r2, #7
 80103e2:	601a      	str	r2, [r3, #0]
}
 80103e4:	bf00      	nop
 80103e6:	46bd      	mov	sp, r7
 80103e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	e000e010 	.word	0xe000e010
 80103f4:	e000e018 	.word	0xe000e018
 80103f8:	20000000 	.word	0x20000000
 80103fc:	10624dd3 	.word	0x10624dd3
 8010400:	e000e014 	.word	0xe000e014

08010404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010414 <vPortEnableVFP+0x10>
 8010408:	6801      	ldr	r1, [r0, #0]
 801040a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801040e:	6001      	str	r1, [r0, #0]
 8010410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010412:	bf00      	nop
 8010414:	e000ed88 	.word	0xe000ed88

08010418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b08a      	sub	sp, #40	; 0x28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010420:	2300      	movs	r3, #0
 8010422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010424:	f7ff f93e 	bl	800f6a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010428:	4b5b      	ldr	r3, [pc, #364]	; (8010598 <pvPortMalloc+0x180>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010430:	f000 f920 	bl	8010674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010434:	4b59      	ldr	r3, [pc, #356]	; (801059c <pvPortMalloc+0x184>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4013      	ands	r3, r2
 801043c:	2b00      	cmp	r3, #0
 801043e:	f040 8093 	bne.w	8010568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d01d      	beq.n	8010484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010448:	2208      	movs	r2, #8
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4413      	add	r3, r2
 801044e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f003 0307 	and.w	r3, r3, #7
 8010456:	2b00      	cmp	r3, #0
 8010458:	d014      	beq.n	8010484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f023 0307 	bic.w	r3, r3, #7
 8010460:	3308      	adds	r3, #8
 8010462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f003 0307 	and.w	r3, r3, #7
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00a      	beq.n	8010484 <pvPortMalloc+0x6c>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	617b      	str	r3, [r7, #20]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d06e      	beq.n	8010568 <pvPortMalloc+0x150>
 801048a:	4b45      	ldr	r3, [pc, #276]	; (80105a0 <pvPortMalloc+0x188>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	429a      	cmp	r2, r3
 8010492:	d869      	bhi.n	8010568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010494:	4b43      	ldr	r3, [pc, #268]	; (80105a4 <pvPortMalloc+0x18c>)
 8010496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010498:	4b42      	ldr	r3, [pc, #264]	; (80105a4 <pvPortMalloc+0x18c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801049e:	e004      	b.n	80104aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80104a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d903      	bls.n	80104bc <pvPortMalloc+0xa4>
 80104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1f1      	bne.n	80104a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80104bc:	4b36      	ldr	r3, [pc, #216]	; (8010598 <pvPortMalloc+0x180>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d050      	beq.n	8010568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2208      	movs	r2, #8
 80104cc:	4413      	add	r3, r2
 80104ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	6a3b      	ldr	r3, [r7, #32]
 80104d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80104d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	1ad2      	subs	r2, r2, r3
 80104e0:	2308      	movs	r3, #8
 80104e2:	005b      	lsls	r3, r3, #1
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d91f      	bls.n	8010528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80104e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4413      	add	r3, r2
 80104ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	f003 0307 	and.w	r3, r3, #7
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00a      	beq.n	8010510 <pvPortMalloc+0xf8>
	__asm volatile
 80104fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fe:	f383 8811 	msr	BASEPRI, r3
 8010502:	f3bf 8f6f 	isb	sy
 8010506:	f3bf 8f4f 	dsb	sy
 801050a:	613b      	str	r3, [r7, #16]
}
 801050c:	bf00      	nop
 801050e:	e7fe      	b.n	801050e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	1ad2      	subs	r2, r2, r3
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010522:	69b8      	ldr	r0, [r7, #24]
 8010524:	f000 f908 	bl	8010738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010528:	4b1d      	ldr	r3, [pc, #116]	; (80105a0 <pvPortMalloc+0x188>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	4a1b      	ldr	r2, [pc, #108]	; (80105a0 <pvPortMalloc+0x188>)
 8010534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010536:	4b1a      	ldr	r3, [pc, #104]	; (80105a0 <pvPortMalloc+0x188>)
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	4b1b      	ldr	r3, [pc, #108]	; (80105a8 <pvPortMalloc+0x190>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d203      	bcs.n	801054a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010542:	4b17      	ldr	r3, [pc, #92]	; (80105a0 <pvPortMalloc+0x188>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a18      	ldr	r2, [pc, #96]	; (80105a8 <pvPortMalloc+0x190>)
 8010548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054c:	685a      	ldr	r2, [r3, #4]
 801054e:	4b13      	ldr	r3, [pc, #76]	; (801059c <pvPortMalloc+0x184>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	431a      	orrs	r2, r3
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055a:	2200      	movs	r2, #0
 801055c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801055e:	4b13      	ldr	r3, [pc, #76]	; (80105ac <pvPortMalloc+0x194>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3301      	adds	r3, #1
 8010564:	4a11      	ldr	r2, [pc, #68]	; (80105ac <pvPortMalloc+0x194>)
 8010566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010568:	f7ff f8aa 	bl	800f6c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	f003 0307 	and.w	r3, r3, #7
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00a      	beq.n	801058c <pvPortMalloc+0x174>
	__asm volatile
 8010576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	60fb      	str	r3, [r7, #12]
}
 8010588:	bf00      	nop
 801058a:	e7fe      	b.n	801058a <pvPortMalloc+0x172>
	return pvReturn;
 801058c:	69fb      	ldr	r3, [r7, #28]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3728      	adds	r7, #40	; 0x28
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	20006818 	.word	0x20006818
 801059c:	2000682c 	.word	0x2000682c
 80105a0:	2000681c 	.word	0x2000681c
 80105a4:	20006810 	.word	0x20006810
 80105a8:	20006820 	.word	0x20006820
 80105ac:	20006824 	.word	0x20006824

080105b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d04d      	beq.n	801065e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80105c2:	2308      	movs	r3, #8
 80105c4:	425b      	negs	r3, r3
 80105c6:	697a      	ldr	r2, [r7, #20]
 80105c8:	4413      	add	r3, r2
 80105ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	4b24      	ldr	r3, [pc, #144]	; (8010668 <vPortFree+0xb8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4013      	ands	r3, r2
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10a      	bne.n	80105f4 <vPortFree+0x44>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	60fb      	str	r3, [r7, #12]
}
 80105f0:	bf00      	nop
 80105f2:	e7fe      	b.n	80105f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00a      	beq.n	8010612 <vPortFree+0x62>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	60bb      	str	r3, [r7, #8]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	685a      	ldr	r2, [r3, #4]
 8010616:	4b14      	ldr	r3, [pc, #80]	; (8010668 <vPortFree+0xb8>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4013      	ands	r3, r2
 801061c:	2b00      	cmp	r3, #0
 801061e:	d01e      	beq.n	801065e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d11a      	bne.n	801065e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	4b0e      	ldr	r3, [pc, #56]	; (8010668 <vPortFree+0xb8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	43db      	mvns	r3, r3
 8010632:	401a      	ands	r2, r3
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010638:	f7ff f834 	bl	800f6a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	4b0a      	ldr	r3, [pc, #40]	; (801066c <vPortFree+0xbc>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4413      	add	r3, r2
 8010646:	4a09      	ldr	r2, [pc, #36]	; (801066c <vPortFree+0xbc>)
 8010648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801064a:	6938      	ldr	r0, [r7, #16]
 801064c:	f000 f874 	bl	8010738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010650:	4b07      	ldr	r3, [pc, #28]	; (8010670 <vPortFree+0xc0>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	3301      	adds	r3, #1
 8010656:	4a06      	ldr	r2, [pc, #24]	; (8010670 <vPortFree+0xc0>)
 8010658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801065a:	f7ff f831 	bl	800f6c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801065e:	bf00      	nop
 8010660:	3718      	adds	r7, #24
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2000682c 	.word	0x2000682c
 801066c:	2000681c 	.word	0x2000681c
 8010670:	20006828 	.word	0x20006828

08010674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010674:	b480      	push	{r7}
 8010676:	b085      	sub	sp, #20
 8010678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801067a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801067e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010680:	4b27      	ldr	r3, [pc, #156]	; (8010720 <prvHeapInit+0xac>)
 8010682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	f003 0307 	and.w	r3, r3, #7
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00c      	beq.n	80106a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	3307      	adds	r3, #7
 8010692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f023 0307 	bic.w	r3, r3, #7
 801069a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	1ad3      	subs	r3, r2, r3
 80106a2:	4a1f      	ldr	r2, [pc, #124]	; (8010720 <prvHeapInit+0xac>)
 80106a4:	4413      	add	r3, r2
 80106a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80106ac:	4a1d      	ldr	r2, [pc, #116]	; (8010724 <prvHeapInit+0xb0>)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80106b2:	4b1c      	ldr	r3, [pc, #112]	; (8010724 <prvHeapInit+0xb0>)
 80106b4:	2200      	movs	r2, #0
 80106b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	4413      	add	r3, r2
 80106be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80106c0:	2208      	movs	r2, #8
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	1a9b      	subs	r3, r3, r2
 80106c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f023 0307 	bic.w	r3, r3, #7
 80106ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	4a15      	ldr	r2, [pc, #84]	; (8010728 <prvHeapInit+0xb4>)
 80106d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80106d6:	4b14      	ldr	r3, [pc, #80]	; (8010728 <prvHeapInit+0xb4>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2200      	movs	r2, #0
 80106dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80106de:	4b12      	ldr	r3, [pc, #72]	; (8010728 <prvHeapInit+0xb4>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2200      	movs	r2, #0
 80106e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	68fa      	ldr	r2, [r7, #12]
 80106ee:	1ad2      	subs	r2, r2, r3
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80106f4:	4b0c      	ldr	r3, [pc, #48]	; (8010728 <prvHeapInit+0xb4>)
 80106f6:	681a      	ldr	r2, [r3, #0]
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	4a0a      	ldr	r2, [pc, #40]	; (801072c <prvHeapInit+0xb8>)
 8010702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	4a09      	ldr	r2, [pc, #36]	; (8010730 <prvHeapInit+0xbc>)
 801070a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801070c:	4b09      	ldr	r3, [pc, #36]	; (8010734 <prvHeapInit+0xc0>)
 801070e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010712:	601a      	str	r2, [r3, #0]
}
 8010714:	bf00      	nop
 8010716:	3714      	adds	r7, #20
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr
 8010720:	20002c10 	.word	0x20002c10
 8010724:	20006810 	.word	0x20006810
 8010728:	20006818 	.word	0x20006818
 801072c:	20006820 	.word	0x20006820
 8010730:	2000681c 	.word	0x2000681c
 8010734:	2000682c 	.word	0x2000682c

08010738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010740:	4b28      	ldr	r3, [pc, #160]	; (80107e4 <prvInsertBlockIntoFreeList+0xac>)
 8010742:	60fb      	str	r3, [r7, #12]
 8010744:	e002      	b.n	801074c <prvInsertBlockIntoFreeList+0x14>
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	60fb      	str	r3, [r7, #12]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	429a      	cmp	r2, r3
 8010754:	d8f7      	bhi.n	8010746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	68ba      	ldr	r2, [r7, #8]
 8010760:	4413      	add	r3, r2
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	429a      	cmp	r2, r3
 8010766:	d108      	bne.n	801077a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	685a      	ldr	r2, [r3, #4]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	441a      	add	r2, r3
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	68ba      	ldr	r2, [r7, #8]
 8010784:	441a      	add	r2, r3
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	429a      	cmp	r2, r3
 801078c:	d118      	bne.n	80107c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	4b15      	ldr	r3, [pc, #84]	; (80107e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	429a      	cmp	r2, r3
 8010798:	d00d      	beq.n	80107b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	685a      	ldr	r2, [r3, #4]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	441a      	add	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	e008      	b.n	80107c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80107b6:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <prvInsertBlockIntoFreeList+0xb0>)
 80107b8:	681a      	ldr	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	601a      	str	r2, [r3, #0]
 80107be:	e003      	b.n	80107c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d002      	beq.n	80107d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107d6:	bf00      	nop
 80107d8:	3714      	adds	r7, #20
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	20006810 	.word	0x20006810
 80107e8:	20006818 	.word	0x20006818

080107ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80107f0:	2200      	movs	r2, #0
 80107f2:	4912      	ldr	r1, [pc, #72]	; (801083c <MX_USB_DEVICE_Init+0x50>)
 80107f4:	4812      	ldr	r0, [pc, #72]	; (8010840 <MX_USB_DEVICE_Init+0x54>)
 80107f6:	f7fc fdc9 	bl	800d38c <USBD_Init>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010800:	f7f0 f992 	bl	8000b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010804:	490f      	ldr	r1, [pc, #60]	; (8010844 <MX_USB_DEVICE_Init+0x58>)
 8010806:	480e      	ldr	r0, [pc, #56]	; (8010840 <MX_USB_DEVICE_Init+0x54>)
 8010808:	f7fc fdf0 	bl	800d3ec <USBD_RegisterClass>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010812:	f7f0 f989 	bl	8000b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010816:	490c      	ldr	r1, [pc, #48]	; (8010848 <MX_USB_DEVICE_Init+0x5c>)
 8010818:	4809      	ldr	r0, [pc, #36]	; (8010840 <MX_USB_DEVICE_Init+0x54>)
 801081a:	f7fc fce1 	bl	800d1e0 <USBD_CDC_RegisterInterface>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d001      	beq.n	8010828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010824:	f7f0 f980 	bl	8000b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010828:	4805      	ldr	r0, [pc, #20]	; (8010840 <MX_USB_DEVICE_Init+0x54>)
 801082a:	f7fc fe15 	bl	800d458 <USBD_Start>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d001      	beq.n	8010838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010834:	f7f0 f978 	bl	8000b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010838:	bf00      	nop
 801083a:	bd80      	pop	{r7, pc}
 801083c:	200000b0 	.word	0x200000b0
 8010840:	20006830 	.word	0x20006830
 8010844:	20000018 	.word	0x20000018
 8010848:	2000009c 	.word	0x2000009c

0801084c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010850:	2200      	movs	r2, #0
 8010852:	4905      	ldr	r1, [pc, #20]	; (8010868 <CDC_Init_FS+0x1c>)
 8010854:	4805      	ldr	r0, [pc, #20]	; (801086c <CDC_Init_FS+0x20>)
 8010856:	f7fc fcdd 	bl	800d214 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801085a:	4905      	ldr	r1, [pc, #20]	; (8010870 <CDC_Init_FS+0x24>)
 801085c:	4803      	ldr	r0, [pc, #12]	; (801086c <CDC_Init_FS+0x20>)
 801085e:	f7fc fcfb 	bl	800d258 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010864:	4618      	mov	r0, r3
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20006f38 	.word	0x20006f38
 801086c:	20006830 	.word	0x20006830
 8010870:	20006b50 	.word	0x20006b50

08010874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010874:	b480      	push	{r7}
 8010876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801087a:	4618      	mov	r0, r3
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010884:	b480      	push	{r7}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	4603      	mov	r3, r0
 801088c:	6039      	str	r1, [r7, #0]
 801088e:	71fb      	strb	r3, [r7, #7]
 8010890:	4613      	mov	r3, r2
 8010892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010894:	79fb      	ldrb	r3, [r7, #7]
 8010896:	2b23      	cmp	r3, #35	; 0x23
 8010898:	d84a      	bhi.n	8010930 <CDC_Control_FS+0xac>
 801089a:	a201      	add	r2, pc, #4	; (adr r2, 80108a0 <CDC_Control_FS+0x1c>)
 801089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a0:	08010931 	.word	0x08010931
 80108a4:	08010931 	.word	0x08010931
 80108a8:	08010931 	.word	0x08010931
 80108ac:	08010931 	.word	0x08010931
 80108b0:	08010931 	.word	0x08010931
 80108b4:	08010931 	.word	0x08010931
 80108b8:	08010931 	.word	0x08010931
 80108bc:	08010931 	.word	0x08010931
 80108c0:	08010931 	.word	0x08010931
 80108c4:	08010931 	.word	0x08010931
 80108c8:	08010931 	.word	0x08010931
 80108cc:	08010931 	.word	0x08010931
 80108d0:	08010931 	.word	0x08010931
 80108d4:	08010931 	.word	0x08010931
 80108d8:	08010931 	.word	0x08010931
 80108dc:	08010931 	.word	0x08010931
 80108e0:	08010931 	.word	0x08010931
 80108e4:	08010931 	.word	0x08010931
 80108e8:	08010931 	.word	0x08010931
 80108ec:	08010931 	.word	0x08010931
 80108f0:	08010931 	.word	0x08010931
 80108f4:	08010931 	.word	0x08010931
 80108f8:	08010931 	.word	0x08010931
 80108fc:	08010931 	.word	0x08010931
 8010900:	08010931 	.word	0x08010931
 8010904:	08010931 	.word	0x08010931
 8010908:	08010931 	.word	0x08010931
 801090c:	08010931 	.word	0x08010931
 8010910:	08010931 	.word	0x08010931
 8010914:	08010931 	.word	0x08010931
 8010918:	08010931 	.word	0x08010931
 801091c:	08010931 	.word	0x08010931
 8010920:	08010931 	.word	0x08010931
 8010924:	08010931 	.word	0x08010931
 8010928:	08010931 	.word	0x08010931
 801092c:	08010931 	.word	0x08010931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010930:	bf00      	nop
  }

  return (USBD_OK);
 8010932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010934:	4618      	mov	r0, r3
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801094a:	6879      	ldr	r1, [r7, #4]
 801094c:	480e      	ldr	r0, [pc, #56]	; (8010988 <CDC_Receive_FS+0x48>)
 801094e:	f7fc fc83 	bl	800d258 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010952:	480d      	ldr	r0, [pc, #52]	; (8010988 <CDC_Receive_FS+0x48>)
 8010954:	f7fc fce4 	bl	800d320 <USBD_CDC_ReceivePacket>

  dataUsb_rxlength =  (uint8_t)* Len;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	b2da      	uxtb	r2, r3
 801095e:	4b0b      	ldr	r3, [pc, #44]	; (801098c <CDC_Receive_FS+0x4c>)
 8010960:	701a      	strb	r2, [r3, #0]
  memcpy(dataUsb_rx,Buf,dataUsb_rxlength);
 8010962:	4b0a      	ldr	r3, [pc, #40]	; (801098c <CDC_Receive_FS+0x4c>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	461a      	mov	r2, r3
 8010968:	6879      	ldr	r1, [r7, #4]
 801096a:	4809      	ldr	r0, [pc, #36]	; (8010990 <CDC_Receive_FS+0x50>)
 801096c:	f002 fc64 	bl	8013238 <memcpy>
  AnalyserCMD(dataUsb_rx,dataUsb_rxlength, USB);
 8010970:	4b06      	ldr	r3, [pc, #24]	; (801098c <CDC_Receive_FS+0x4c>)
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	2201      	movs	r2, #1
 8010976:	4619      	mov	r1, r3
 8010978:	4805      	ldr	r0, [pc, #20]	; (8010990 <CDC_Receive_FS+0x50>)
 801097a:	f002 f849 	bl	8012a10 <AnalyserCMD>

  return (USBD_OK);
 801097e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010980:	4618      	mov	r0, r3
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	20006830 	.word	0x20006830
 801098c:	20006b0c 	.word	0x20006b0c
 8010990:	20006b10 	.word	0x20006b10

08010994 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	460b      	mov	r3, r1
 801099e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80109a4:	4b0d      	ldr	r3, [pc, #52]	; (80109dc <CDC_Transmit_FS+0x48>)
 80109a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d001      	beq.n	80109ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80109b6:	2301      	movs	r3, #1
 80109b8:	e00b      	b.n	80109d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80109ba:	887b      	ldrh	r3, [r7, #2]
 80109bc:	461a      	mov	r2, r3
 80109be:	6879      	ldr	r1, [r7, #4]
 80109c0:	4806      	ldr	r0, [pc, #24]	; (80109dc <CDC_Transmit_FS+0x48>)
 80109c2:	f7fc fc27 	bl	800d214 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80109c6:	4805      	ldr	r0, [pc, #20]	; (80109dc <CDC_Transmit_FS+0x48>)
 80109c8:	f7fc fc64 	bl	800d294 <USBD_CDC_TransmitPacket>
 80109cc:	4603      	mov	r3, r0
 80109ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	20006830 	.word	0x20006830

080109e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b087      	sub	sp, #28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	4613      	mov	r3, r2
 80109ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80109ee:	2300      	movs	r3, #0
 80109f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80109f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	371c      	adds	r7, #28
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
	...

08010a04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	6039      	str	r1, [r7, #0]
 8010a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	2212      	movs	r2, #18
 8010a14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a16:	4b03      	ldr	r3, [pc, #12]	; (8010a24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	200000cc 	.word	0x200000cc

08010a28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	6039      	str	r1, [r7, #0]
 8010a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	2204      	movs	r2, #4
 8010a38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a3a:	4b03      	ldr	r3, [pc, #12]	; (8010a48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr
 8010a48:	200000e0 	.word	0x200000e0

08010a4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	4603      	mov	r3, r0
 8010a54:	6039      	str	r1, [r7, #0]
 8010a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a58:	79fb      	ldrb	r3, [r7, #7]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d105      	bne.n	8010a6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a5e:	683a      	ldr	r2, [r7, #0]
 8010a60:	4907      	ldr	r1, [pc, #28]	; (8010a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a62:	4808      	ldr	r0, [pc, #32]	; (8010a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a64:	f7fd fea4 	bl	800e7b0 <USBD_GetString>
 8010a68:	e004      	b.n	8010a74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a6a:	683a      	ldr	r2, [r7, #0]
 8010a6c:	4904      	ldr	r1, [pc, #16]	; (8010a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a6e:	4805      	ldr	r0, [pc, #20]	; (8010a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8010a70:	f7fd fe9e 	bl	800e7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a74:	4b02      	ldr	r3, [pc, #8]	; (8010a80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	20007320 	.word	0x20007320
 8010a84:	080132d8 	.word	0x080132d8

08010a88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	4603      	mov	r3, r0
 8010a90:	6039      	str	r1, [r7, #0]
 8010a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	4904      	ldr	r1, [pc, #16]	; (8010aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010a98:	4804      	ldr	r0, [pc, #16]	; (8010aac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010a9a:	f7fd fe89 	bl	800e7b0 <USBD_GetString>
  return USBD_StrDesc;
 8010a9e:	4b02      	ldr	r3, [pc, #8]	; (8010aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	20007320 	.word	0x20007320
 8010aac:	080132e8 	.word	0x080132e8

08010ab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	6039      	str	r1, [r7, #0]
 8010aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	221a      	movs	r2, #26
 8010ac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ac2:	f000 f843 	bl	8010b4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010ac6:	4b02      	ldr	r3, [pc, #8]	; (8010ad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	200000e4 	.word	0x200000e4

08010ad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	4603      	mov	r3, r0
 8010adc:	6039      	str	r1, [r7, #0]
 8010ade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ae0:	79fb      	ldrb	r3, [r7, #7]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d105      	bne.n	8010af2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ae6:	683a      	ldr	r2, [r7, #0]
 8010ae8:	4907      	ldr	r1, [pc, #28]	; (8010b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010aea:	4808      	ldr	r0, [pc, #32]	; (8010b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010aec:	f7fd fe60 	bl	800e7b0 <USBD_GetString>
 8010af0:	e004      	b.n	8010afc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	4904      	ldr	r1, [pc, #16]	; (8010b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010af6:	4805      	ldr	r0, [pc, #20]	; (8010b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010af8:	f7fd fe5a 	bl	800e7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010afc:	4b02      	ldr	r3, [pc, #8]	; (8010b08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	20007320 	.word	0x20007320
 8010b0c:	080132f0 	.word	0x080132f0

08010b10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	4603      	mov	r3, r0
 8010b18:	6039      	str	r1, [r7, #0]
 8010b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b1c:	79fb      	ldrb	r3, [r7, #7]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d105      	bne.n	8010b2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	4907      	ldr	r1, [pc, #28]	; (8010b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b26:	4808      	ldr	r0, [pc, #32]	; (8010b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b28:	f7fd fe42 	bl	800e7b0 <USBD_GetString>
 8010b2c:	e004      	b.n	8010b38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b2e:	683a      	ldr	r2, [r7, #0]
 8010b30:	4904      	ldr	r1, [pc, #16]	; (8010b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b32:	4805      	ldr	r0, [pc, #20]	; (8010b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b34:	f7fd fe3c 	bl	800e7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b38:	4b02      	ldr	r3, [pc, #8]	; (8010b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	20007320 	.word	0x20007320
 8010b48:	080132fc 	.word	0x080132fc

08010b4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010b52:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <Get_SerialNum+0x44>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010b58:	4b0e      	ldr	r3, [pc, #56]	; (8010b94 <Get_SerialNum+0x48>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010b5e:	4b0e      	ldr	r3, [pc, #56]	; (8010b98 <Get_SerialNum+0x4c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4413      	add	r3, r2
 8010b6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d009      	beq.n	8010b86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010b72:	2208      	movs	r2, #8
 8010b74:	4909      	ldr	r1, [pc, #36]	; (8010b9c <Get_SerialNum+0x50>)
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f000 f814 	bl	8010ba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010b7c:	2204      	movs	r2, #4
 8010b7e:	4908      	ldr	r1, [pc, #32]	; (8010ba0 <Get_SerialNum+0x54>)
 8010b80:	68b8      	ldr	r0, [r7, #8]
 8010b82:	f000 f80f 	bl	8010ba4 <IntToUnicode>
  }
}
 8010b86:	bf00      	nop
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	1fff7a10 	.word	0x1fff7a10
 8010b94:	1fff7a14 	.word	0x1fff7a14
 8010b98:	1fff7a18 	.word	0x1fff7a18
 8010b9c:	200000e6 	.word	0x200000e6
 8010ba0:	200000f6 	.word	0x200000f6

08010ba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b087      	sub	sp, #28
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	75fb      	strb	r3, [r7, #23]
 8010bba:	e027      	b.n	8010c0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	0f1b      	lsrs	r3, r3, #28
 8010bc0:	2b09      	cmp	r3, #9
 8010bc2:	d80b      	bhi.n	8010bdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	0f1b      	lsrs	r3, r3, #28
 8010bc8:	b2da      	uxtb	r2, r3
 8010bca:	7dfb      	ldrb	r3, [r7, #23]
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	4619      	mov	r1, r3
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	440b      	add	r3, r1
 8010bd4:	3230      	adds	r2, #48	; 0x30
 8010bd6:	b2d2      	uxtb	r2, r2
 8010bd8:	701a      	strb	r2, [r3, #0]
 8010bda:	e00a      	b.n	8010bf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	0f1b      	lsrs	r3, r3, #28
 8010be0:	b2da      	uxtb	r2, r3
 8010be2:	7dfb      	ldrb	r3, [r7, #23]
 8010be4:	005b      	lsls	r3, r3, #1
 8010be6:	4619      	mov	r1, r3
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	440b      	add	r3, r1
 8010bec:	3237      	adds	r2, #55	; 0x37
 8010bee:	b2d2      	uxtb	r2, r2
 8010bf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	011b      	lsls	r3, r3, #4
 8010bf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010bf8:	7dfb      	ldrb	r3, [r7, #23]
 8010bfa:	005b      	lsls	r3, r3, #1
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	4413      	add	r3, r2
 8010c02:	2200      	movs	r2, #0
 8010c04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c06:	7dfb      	ldrb	r3, [r7, #23]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	75fb      	strb	r3, [r7, #23]
 8010c0c:	7dfa      	ldrb	r2, [r7, #23]
 8010c0e:	79fb      	ldrb	r3, [r7, #7]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d3d3      	bcc.n	8010bbc <IntToUnicode+0x18>
  }
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop
 8010c18:	371c      	adds	r7, #28
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
	...

08010c24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b08a      	sub	sp, #40	; 0x28
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	2200      	movs	r2, #0
 8010c32:	601a      	str	r2, [r3, #0]
 8010c34:	605a      	str	r2, [r3, #4]
 8010c36:	609a      	str	r2, [r3, #8]
 8010c38:	60da      	str	r2, [r3, #12]
 8010c3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c44:	d13a      	bne.n	8010cbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c46:	2300      	movs	r3, #0
 8010c48:	613b      	str	r3, [r7, #16]
 8010c4a:	4b1e      	ldr	r3, [pc, #120]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c4e:	4a1d      	ldr	r2, [pc, #116]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c50:	f043 0301 	orr.w	r3, r3, #1
 8010c54:	6313      	str	r3, [r2, #48]	; 0x30
 8010c56:	4b1b      	ldr	r3, [pc, #108]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c5a:	f003 0301 	and.w	r3, r3, #1
 8010c5e:	613b      	str	r3, [r7, #16]
 8010c60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c68:	2302      	movs	r3, #2
 8010c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c70:	2303      	movs	r3, #3
 8010c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010c74:	230a      	movs	r3, #10
 8010c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c78:	f107 0314 	add.w	r3, r7, #20
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	4812      	ldr	r0, [pc, #72]	; (8010cc8 <HAL_PCD_MspInit+0xa4>)
 8010c80:	f7f1 fe6a 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010c84:	4b0f      	ldr	r3, [pc, #60]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c88:	4a0e      	ldr	r2, [pc, #56]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c8e:	6353      	str	r3, [r2, #52]	; 0x34
 8010c90:	2300      	movs	r3, #0
 8010c92:	60fb      	str	r3, [r7, #12]
 8010c94:	4b0b      	ldr	r3, [pc, #44]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c98:	4a0a      	ldr	r2, [pc, #40]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8010ca0:	4b08      	ldr	r3, [pc, #32]	; (8010cc4 <HAL_PCD_MspInit+0xa0>)
 8010ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ca8:	60fb      	str	r3, [r7, #12]
 8010caa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010cac:	2200      	movs	r2, #0
 8010cae:	2105      	movs	r1, #5
 8010cb0:	2043      	movs	r0, #67	; 0x43
 8010cb2:	f7f1 fa06 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010cb6:	2043      	movs	r0, #67	; 0x43
 8010cb8:	f7f1 fa1f 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010cbc:	bf00      	nop
 8010cbe:	3728      	adds	r7, #40	; 0x28
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	40023800 	.word	0x40023800
 8010cc8:	40020000 	.word	0x40020000

08010ccc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	f7fc fc05 	bl	800d4f2 <USBD_LL_SetupStage>
}
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010d02:	78fa      	ldrb	r2, [r7, #3]
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	4613      	mov	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	4413      	add	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	440b      	add	r3, r1
 8010d10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010d14:	681a      	ldr	r2, [r3, #0]
 8010d16:	78fb      	ldrb	r3, [r7, #3]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	f7fc fc3f 	bl	800d59c <USBD_LL_DataOutStage>
}
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b082      	sub	sp, #8
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
 8010d2e:	460b      	mov	r3, r1
 8010d30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010d38:	78fa      	ldrb	r2, [r7, #3]
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	00db      	lsls	r3, r3, #3
 8010d40:	4413      	add	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	440b      	add	r3, r1
 8010d46:	334c      	adds	r3, #76	; 0x4c
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	78fb      	ldrb	r3, [r7, #3]
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	f7fc fcd8 	bl	800d702 <USBD_LL_DataInStage>
}
 8010d52:	bf00      	nop
 8010d54:	3708      	adds	r7, #8
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b082      	sub	sp, #8
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fc fe0c 	bl	800d986 <USBD_LL_SOF>
}
 8010d6e:	bf00      	nop
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	2b02      	cmp	r3, #2
 8010d88:	d001      	beq.n	8010d8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010d8a:	f7ef fecd 	bl	8000b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d94:	7bfa      	ldrb	r2, [r7, #15]
 8010d96:	4611      	mov	r1, r2
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fc fdb6 	bl	800d90a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7fc fd5e 	bl	800d866 <USBD_LL_Reset>
}
 8010daa:	bf00      	nop
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
	...

08010db4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f7fc fdb1 	bl	800d92a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	687a      	ldr	r2, [r7, #4]
 8010dd4:	6812      	ldr	r2, [r2, #0]
 8010dd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010dda:	f043 0301 	orr.w	r3, r3, #1
 8010dde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6a1b      	ldr	r3, [r3, #32]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d005      	beq.n	8010df4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010de8:	4b04      	ldr	r3, [pc, #16]	; (8010dfc <HAL_PCD_SuspendCallback+0x48>)
 8010dea:	691b      	ldr	r3, [r3, #16]
 8010dec:	4a03      	ldr	r2, [pc, #12]	; (8010dfc <HAL_PCD_SuspendCallback+0x48>)
 8010dee:	f043 0306 	orr.w	r3, r3, #6
 8010df2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010df4:	bf00      	nop
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	e000ed00 	.word	0xe000ed00

08010e00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fc fda1 	bl	800d956 <USBD_LL_Resume>
}
 8010e14:	bf00      	nop
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	460b      	mov	r3, r1
 8010e26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e2e:	78fa      	ldrb	r2, [r7, #3]
 8010e30:	4611      	mov	r1, r2
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fc fdf9 	bl	800da2a <USBD_LL_IsoOUTIncomplete>
}
 8010e38:	bf00      	nop
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	460b      	mov	r3, r1
 8010e4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e52:	78fa      	ldrb	r2, [r7, #3]
 8010e54:	4611      	mov	r1, r2
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fc fdb5 	bl	800d9c6 <USBD_LL_IsoINIncomplete>
}
 8010e5c:	bf00      	nop
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fc fe0b 	bl	800da8e <USBD_LL_DevConnected>
}
 8010e78:	bf00      	nop
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fc fe08 	bl	800daa4 <USBD_LL_DevDisconnected>
}
 8010e94:	bf00      	nop
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d13c      	bne.n	8010f26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010eac:	4a20      	ldr	r2, [pc, #128]	; (8010f30 <USBD_LL_Init+0x94>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	4a1e      	ldr	r2, [pc, #120]	; (8010f30 <USBD_LL_Init+0x94>)
 8010eb8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010ebc:	4b1c      	ldr	r3, [pc, #112]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ebe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ec2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010ec4:	4b1a      	ldr	r3, [pc, #104]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010eca:	4b19      	ldr	r3, [pc, #100]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ecc:	2202      	movs	r2, #2
 8010ece:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ed0:	4b17      	ldr	r3, [pc, #92]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ed6:	4b16      	ldr	r3, [pc, #88]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ed8:	2202      	movs	r2, #2
 8010eda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010edc:	4b14      	ldr	r3, [pc, #80]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010ee2:	4b13      	ldr	r3, [pc, #76]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010ee8:	4b11      	ldr	r3, [pc, #68]	; (8010f30 <USBD_LL_Init+0x94>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010eee:	4b10      	ldr	r3, [pc, #64]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010ef4:	4b0e      	ldr	r3, [pc, #56]	; (8010f30 <USBD_LL_Init+0x94>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010efa:	480d      	ldr	r0, [pc, #52]	; (8010f30 <USBD_LL_Init+0x94>)
 8010efc:	f7f3 ff3f 	bl	8004d7e <HAL_PCD_Init>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010f06:	f7ef fe0f 	bl	8000b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010f0a:	2180      	movs	r1, #128	; 0x80
 8010f0c:	4808      	ldr	r0, [pc, #32]	; (8010f30 <USBD_LL_Init+0x94>)
 8010f0e:	f7f5 f996 	bl	800623e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010f12:	2240      	movs	r2, #64	; 0x40
 8010f14:	2100      	movs	r1, #0
 8010f16:	4806      	ldr	r0, [pc, #24]	; (8010f30 <USBD_LL_Init+0x94>)
 8010f18:	f7f5 f94a 	bl	80061b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010f1c:	2280      	movs	r2, #128	; 0x80
 8010f1e:	2101      	movs	r1, #1
 8010f20:	4803      	ldr	r0, [pc, #12]	; (8010f30 <USBD_LL_Init+0x94>)
 8010f22:	f7f5 f945 	bl	80061b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010f26:	2300      	movs	r3, #0
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	20007520 	.word	0x20007520

08010f34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7f4 f834 	bl	8004fb8 <HAL_PCD_Start>
 8010f50:	4603      	mov	r3, r0
 8010f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f54:	7bfb      	ldrb	r3, [r7, #15]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f000 f942 	bl	80111e0 <USBD_Get_USB_Status>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b084      	sub	sp, #16
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	4608      	mov	r0, r1
 8010f74:	4611      	mov	r1, r2
 8010f76:	461a      	mov	r2, r3
 8010f78:	4603      	mov	r3, r0
 8010f7a:	70fb      	strb	r3, [r7, #3]
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	70bb      	strb	r3, [r7, #2]
 8010f80:	4613      	mov	r3, r2
 8010f82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f92:	78bb      	ldrb	r3, [r7, #2]
 8010f94:	883a      	ldrh	r2, [r7, #0]
 8010f96:	78f9      	ldrb	r1, [r7, #3]
 8010f98:	f7f4 fd05 	bl	80059a6 <HAL_PCD_EP_Open>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fa0:	7bfb      	ldrb	r3, [r7, #15]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 f91c 	bl	80111e0 <USBD_Get_USB_Status>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3710      	adds	r7, #16
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}

08010fb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fb6:	b580      	push	{r7, lr}
 8010fb8:	b084      	sub	sp, #16
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fd0:	78fa      	ldrb	r2, [r7, #3]
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7f4 fd4e 	bl	8005a76 <HAL_PCD_EP_Close>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fde:	7bfb      	ldrb	r3, [r7, #15]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f000 f8fd 	bl	80111e0 <USBD_Get_USB_Status>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011000:	2300      	movs	r3, #0
 8011002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801100e:	78fa      	ldrb	r2, [r7, #3]
 8011010:	4611      	mov	r1, r2
 8011012:	4618      	mov	r0, r3
 8011014:	f7f4 fe26 	bl	8005c64 <HAL_PCD_EP_SetStall>
 8011018:	4603      	mov	r3, r0
 801101a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801101c:	7bfb      	ldrb	r3, [r7, #15]
 801101e:	4618      	mov	r0, r3
 8011020:	f000 f8de 	bl	80111e0 <USBD_Get_USB_Status>
 8011024:	4603      	mov	r3, r0
 8011026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011028:	7bbb      	ldrb	r3, [r7, #14]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b084      	sub	sp, #16
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	460b      	mov	r3, r1
 801103c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801104c:	78fa      	ldrb	r2, [r7, #3]
 801104e:	4611      	mov	r1, r2
 8011050:	4618      	mov	r0, r3
 8011052:	f7f4 fe6b 	bl	8005d2c <HAL_PCD_EP_ClrStall>
 8011056:	4603      	mov	r3, r0
 8011058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	4618      	mov	r0, r3
 801105e:	f000 f8bf 	bl	80111e0 <USBD_Get_USB_Status>
 8011062:	4603      	mov	r3, r0
 8011064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011066:	7bbb      	ldrb	r3, [r7, #14]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	460b      	mov	r3, r1
 801107a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011082:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011088:	2b00      	cmp	r3, #0
 801108a:	da0b      	bge.n	80110a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801108c:	78fb      	ldrb	r3, [r7, #3]
 801108e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011092:	68f9      	ldr	r1, [r7, #12]
 8011094:	4613      	mov	r3, r2
 8011096:	00db      	lsls	r3, r3, #3
 8011098:	4413      	add	r3, r2
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	440b      	add	r3, r1
 801109e:	333e      	adds	r3, #62	; 0x3e
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	e00b      	b.n	80110bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80110a4:	78fb      	ldrb	r3, [r7, #3]
 80110a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110aa:	68f9      	ldr	r1, [r7, #12]
 80110ac:	4613      	mov	r3, r2
 80110ae:	00db      	lsls	r3, r3, #3
 80110b0:	4413      	add	r3, r2
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	440b      	add	r3, r1
 80110b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80110ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80110e2:	78fa      	ldrb	r2, [r7, #3]
 80110e4:	4611      	mov	r1, r2
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7f4 fc38 	bl	800595c <HAL_PCD_SetAddress>
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110f0:	7bfb      	ldrb	r3, [r7, #15]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f000 f874 	bl	80111e0 <USBD_Get_USB_Status>
 80110f8:	4603      	mov	r3, r0
 80110fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b086      	sub	sp, #24
 801110a:	af00      	add	r7, sp, #0
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
 8011112:	460b      	mov	r3, r1
 8011114:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011124:	7af9      	ldrb	r1, [r7, #11]
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	f7f4 fd51 	bl	8005bd0 <HAL_PCD_EP_Transmit>
 801112e:	4603      	mov	r3, r0
 8011130:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011132:	7dfb      	ldrb	r3, [r7, #23]
 8011134:	4618      	mov	r0, r3
 8011136:	f000 f853 	bl	80111e0 <USBD_Get_USB_Status>
 801113a:	4603      	mov	r3, r0
 801113c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801113e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3718      	adds	r7, #24
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	607a      	str	r2, [r7, #4]
 8011152:	603b      	str	r3, [r7, #0]
 8011154:	460b      	mov	r3, r1
 8011156:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801115c:	2300      	movs	r3, #0
 801115e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011166:	7af9      	ldrb	r1, [r7, #11]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	f7f4 fccd 	bl	8005b0a <HAL_PCD_EP_Receive>
 8011170:	4603      	mov	r3, r0
 8011172:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011174:	7dfb      	ldrb	r3, [r7, #23]
 8011176:	4618      	mov	r0, r3
 8011178:	f000 f832 	bl	80111e0 <USBD_Get_USB_Status>
 801117c:	4603      	mov	r3, r0
 801117e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011180:	7dbb      	ldrb	r3, [r7, #22]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3718      	adds	r7, #24
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	460b      	mov	r3, r1
 8011194:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801119c:	78fa      	ldrb	r2, [r7, #3]
 801119e:	4611      	mov	r1, r2
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f4 fcfd 	bl	8005ba0 <HAL_PCD_EP_GetRxCount>
 80111a6:	4603      	mov	r3, r0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b083      	sub	sp, #12
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80111b8:	4b03      	ldr	r3, [pc, #12]	; (80111c8 <USBD_static_malloc+0x18>)
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	370c      	adds	r7, #12
 80111be:	46bd      	mov	sp, r7
 80111c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	20007a2c 	.word	0x20007a2c

080111cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]

}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	4603      	mov	r3, r0
 80111e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ea:	2300      	movs	r3, #0
 80111ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	2b03      	cmp	r3, #3
 80111f2:	d817      	bhi.n	8011224 <USBD_Get_USB_Status+0x44>
 80111f4:	a201      	add	r2, pc, #4	; (adr r2, 80111fc <USBD_Get_USB_Status+0x1c>)
 80111f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111fa:	bf00      	nop
 80111fc:	0801120d 	.word	0x0801120d
 8011200:	08011213 	.word	0x08011213
 8011204:	08011219 	.word	0x08011219
 8011208:	0801121f 	.word	0x0801121f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	73fb      	strb	r3, [r7, #15]
    break;
 8011210:	e00b      	b.n	801122a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011212:	2303      	movs	r3, #3
 8011214:	73fb      	strb	r3, [r7, #15]
    break;
 8011216:	e008      	b.n	801122a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011218:	2301      	movs	r3, #1
 801121a:	73fb      	strb	r3, [r7, #15]
    break;
 801121c:	e005      	b.n	801122a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801121e:	2303      	movs	r3, #3
 8011220:	73fb      	strb	r3, [r7, #15]
    break;
 8011222:	e002      	b.n	801122a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011224:	2303      	movs	r3, #3
 8011226:	73fb      	strb	r3, [r7, #15]
    break;
 8011228:	bf00      	nop
  }
  return usb_status;
 801122a:	7bfb      	ldrb	r3, [r7, #15]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3714      	adds	r7, #20
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <Checksum>:
uint32_t i2c_code_error;
uint8_t numerr=0;
uint8_t crcval=0;

uint8_t Checksum(uint8_t *data, uint8_t length)
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t Sum = 0;
 8011244:	2300      	movs	r3, #0
 8011246:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 8011248:	2300      	movs	r3, #0
 801124a:	73fb      	strb	r3, [r7, #15]
 801124c:	e009      	b.n	8011262 <Checksum+0x2a>
		Sum = Sum + data[count];
 801124e:	7bfb      	ldrb	r3, [r7, #15]
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	4413      	add	r3, r2
 8011254:	781a      	ldrb	r2, [r3, #0]
 8011256:	7bbb      	ldrb	r3, [r7, #14]
 8011258:	4413      	add	r3, r2
 801125a:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 801125c:	7bfb      	ldrb	r3, [r7, #15]
 801125e:	3301      	adds	r3, #1
 8011260:	73fb      	strb	r3, [r7, #15]
 8011262:	7bfa      	ldrb	r2, [r7, #15]
 8011264:	78fb      	ldrb	r3, [r7, #3]
 8011266:	429a      	cmp	r2, r3
 8011268:	d3f1      	bcc.n	801124e <Checksum+0x16>
	Sum = -Sum;
 801126a:	7bbb      	ldrb	r3, [r7, #14]
 801126c:	425b      	negs	r3, r3
 801126e:	73bb      	strb	r3, [r7, #14]
	return (Sum & 0xFF);
 8011270:	7bbb      	ldrb	r3, [r7, #14]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
	...

08011280 <HAL_I2C_AddrCallback>:

// I2C-Interface , callback khi co  read/write i2c
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
 801128c:	4613      	mov	r3, r2
 801128e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C1)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4a07      	ldr	r2, [pc, #28]	; (80112b4 <HAL_I2C_AddrCallback+0x34>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d108      	bne.n	80112ac <HAL_I2C_AddrCallback+0x2c>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // neu i2c master write to slave
 801129a:	78fb      	ldrb	r3, [r7, #3]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d105      	bne.n	80112ac <HAL_I2C_AddrCallback+0x2c>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1,data_chessclock,15,I2C_FIRST_AND_LAST_FRAME); // thi luu data bang dma
 80112a0:	2308      	movs	r3, #8
 80112a2:	220f      	movs	r2, #15
 80112a4:	4904      	ldr	r1, [pc, #16]	; (80112b8 <HAL_I2C_AddrCallback+0x38>)
 80112a6:	4805      	ldr	r0, [pc, #20]	; (80112bc <HAL_I2C_AddrCallback+0x3c>)
 80112a8:	f7f1 fe38 	bl	8002f1c <HAL_I2C_Slave_Seq_Receive_DMA>
		}
	}
}
 80112ac:	bf00      	nop
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	40005400 	.word	0x40005400
 80112b8:	20007c50 	.word	0x20007c50
 80112bc:	200023dc 	.word	0x200023dc

080112c0 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);  // bat laij ngat
 80112c8:	4803      	ldr	r0, [pc, #12]	; (80112d8 <HAL_I2C_ListenCpltCallback+0x18>)
 80112ca:	f7f1 ff61 	bl	8003190 <HAL_I2C_EnableListen_IT>
}
 80112ce:	bf00      	nop
 80112d0:	3708      	adds	r7, #8
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	200023dc 	.word	0x200023dc

080112dc <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a0b      	ldr	r2, [pc, #44]	; (8011318 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d110      	bne.n	8011310 <HAL_I2C_SlaveRxCpltCallback+0x34>
	{
		crcval = Checksum(data_chessclock, 14);
 80112ee:	210e      	movs	r1, #14
 80112f0:	480a      	ldr	r0, [pc, #40]	; (801131c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 80112f2:	f7ff ffa1 	bl	8011238 <Checksum>
 80112f6:	4603      	mov	r3, r0
 80112f8:	461a      	mov	r2, r3
 80112fa:	4b09      	ldr	r3, [pc, #36]	; (8011320 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80112fc:	701a      	strb	r2, [r3, #0]
		if(crcval == data_chessclock[14]){
 80112fe:	4b07      	ldr	r3, [pc, #28]	; (801131c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8011300:	7b9a      	ldrb	r2, [r3, #14]
 8011302:	4b07      	ldr	r3, [pc, #28]	; (8011320 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	429a      	cmp	r2, r3
 8011308:	d102      	bne.n	8011310 <HAL_I2C_SlaveRxCpltCallback+0x34>
			chessclock_interrup = true; // bat flag khi co data clock
 801130a:	4b06      	ldr	r3, [pc, #24]	; (8011324 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 801130c:	2201      	movs	r2, #1
 801130e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8011310:	bf00      	nop
 8011312:	3708      	adds	r7, #8
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	40005400 	.word	0x40005400
 801131c:	20007c50 	.word	0x20007c50
 8011320:	20007c5f 	.word	0x20007c5f
 8011324:	20007c4c 	.word	0x20007c4c

08011328 <HAL_I2C_ErrorCallback>:
// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a04      	ldr	r2, [pc, #16]	; (8011348 <HAL_I2C_ErrorCallback+0x20>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d101      	bne.n	801133e <HAL_I2C_ErrorCallback+0x16>
		HAL_NVIC_SystemReset();
 801133a:	f7f0 feec 	bl	8002116 <HAL_NVIC_SystemReset>
		HAL_I2C_DeInit(&hi2c1);
		MMX_I2C1_Init();
		HAL_I2C_EnableListen_IT(&hi2c1);
		*/
	}
}
 801133e:	bf00      	nop
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	40005400 	.word	0x40005400

0801134c <ChessClock_Init>:

void ChessClock_Init()
{
 801134c:	b580      	push	{r7, lr}
 801134e:	af00      	add	r7, sp, #0
	HAL_I2C_EnableListen_IT(&hi2c1);   // bat ngat I2C, khi co thao tac read/write
 8011350:	4802      	ldr	r0, [pc, #8]	; (801135c <ChessClock_Init+0x10>)
 8011352:	f7f1 ff1d 	bl	8003190 <HAL_I2C_EnableListen_IT>
}
 8011356:	bf00      	nop
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	200023dc 	.word	0x200023dc

08011360 <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 8011366:	2304      	movs	r3, #4
 8011368:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 801136a:	2200      	movs	r2, #0
 801136c:	2110      	movs	r1, #16
 801136e:	480b      	ldr	r0, [pc, #44]	; (801139c <WriteProtect+0x3c>)
 8011370:	f7f1 fc76 	bl	8002c60 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011374:	1d39      	adds	r1, r7, #4
 8011376:	2301      	movs	r3, #1
 8011378:	2201      	movs	r2, #1
 801137a:	4809      	ldr	r0, [pc, #36]	; (80113a0 <WriteProtect+0x40>)
 801137c:	f7f6 f895 	bl	80074aa <HAL_SPI_Transmit>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	4b07      	ldr	r3, [pc, #28]	; (80113a4 <WriteProtect+0x44>)
 8011386:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 8011388:	2201      	movs	r2, #1
 801138a:	2110      	movs	r1, #16
 801138c:	4803      	ldr	r0, [pc, #12]	; (801139c <WriteProtect+0x3c>)
 801138e:	f7f1 fc67 	bl	8002c60 <HAL_GPIO_WritePin>
}
 8011392:	bf00      	nop
 8011394:	3708      	adds	r7, #8
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	40020000 	.word	0x40020000
 80113a0:	200024b0 	.word	0x200024b0
 80113a4:	20007c96 	.word	0x20007c96

080113a8 <WriteEnable>:
	MB85RS_CS_LOW;
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
	MB85RS_CS_HIGH;
	return reg[1];
}
void WriteEnable(){
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 80113ae:	2306      	movs	r3, #6
 80113b0:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 80113b2:	2200      	movs	r2, #0
 80113b4:	2110      	movs	r1, #16
 80113b6:	480b      	ldr	r0, [pc, #44]	; (80113e4 <WriteEnable+0x3c>)
 80113b8:	f7f1 fc52 	bl	8002c60 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 80113bc:	1d39      	adds	r1, r7, #4
 80113be:	2301      	movs	r3, #1
 80113c0:	2201      	movs	r2, #1
 80113c2:	4809      	ldr	r0, [pc, #36]	; (80113e8 <WriteEnable+0x40>)
 80113c4:	f7f6 f871 	bl	80074aa <HAL_SPI_Transmit>
 80113c8:	4603      	mov	r3, r0
 80113ca:	461a      	mov	r2, r3
 80113cc:	4b07      	ldr	r3, [pc, #28]	; (80113ec <WriteEnable+0x44>)
 80113ce:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80113d0:	2201      	movs	r2, #1
 80113d2:	2110      	movs	r1, #16
 80113d4:	4803      	ldr	r0, [pc, #12]	; (80113e4 <WriteEnable+0x3c>)
 80113d6:	f7f1 fc43 	bl	8002c60 <HAL_GPIO_WritePin>
}
 80113da:	bf00      	nop
 80113dc:	3708      	adds	r7, #8
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	40020000 	.word	0x40020000
 80113e8:	200024b0 	.word	0x200024b0
 80113ec:	20007c96 	.word	0x20007c96

080113f0 <MB85RS_write>:

void MB85RS_write(unsigned int address, unsigned char *buffer, unsigned int size)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b086      	sub	sp, #24
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
	Mb85rs_dataTx[0] = WRITE;
 80113fc:	4b1c      	ldr	r3, [pc, #112]	; (8011470 <MB85RS_write+0x80>)
 80113fe:	2202      	movs	r2, #2
 8011400:	701a      	strb	r2, [r3, #0]
	Mb85rs_dataTx[1] = (char)(address >> 8);
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	0a1b      	lsrs	r3, r3, #8
 8011406:	b2da      	uxtb	r2, r3
 8011408:	4b19      	ldr	r3, [pc, #100]	; (8011470 <MB85RS_write+0x80>)
 801140a:	705a      	strb	r2, [r3, #1]
	Mb85rs_dataTx[2] = (char)(address);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	b2da      	uxtb	r2, r3
 8011410:	4b17      	ldr	r3, [pc, #92]	; (8011470 <MB85RS_write+0x80>)
 8011412:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<size;i++){
 8011414:	2300      	movs	r3, #0
 8011416:	617b      	str	r3, [r7, #20]
 8011418:	e00a      	b.n	8011430 <MB85RS_write+0x40>
		Mb85rs_dataTx[3+i] = buffer[i];
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	441a      	add	r2, r3
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	3303      	adds	r3, #3
 8011424:	7811      	ldrb	r1, [r2, #0]
 8011426:	4a12      	ldr	r2, [pc, #72]	; (8011470 <MB85RS_write+0x80>)
 8011428:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<size;i++){
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	3301      	adds	r3, #1
 801142e:	617b      	str	r3, [r7, #20]
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	429a      	cmp	r2, r3
 8011436:	d8f0      	bhi.n	801141a <MB85RS_write+0x2a>
	}
	WriteEnable();
 8011438:	f7ff ffb6 	bl	80113a8 <WriteEnable>
	MB85RS_CS_LOW;
 801143c:	2200      	movs	r2, #0
 801143e:	2110      	movs	r1, #16
 8011440:	480c      	ldr	r0, [pc, #48]	; (8011474 <MB85RS_write+0x84>)
 8011442:	f7f1 fc0d 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Mb85rs_dataTx, size+3, 10);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	b29b      	uxth	r3, r3
 801144a:	3303      	adds	r3, #3
 801144c:	b29a      	uxth	r2, r3
 801144e:	230a      	movs	r3, #10
 8011450:	4907      	ldr	r1, [pc, #28]	; (8011470 <MB85RS_write+0x80>)
 8011452:	4809      	ldr	r0, [pc, #36]	; (8011478 <MB85RS_write+0x88>)
 8011454:	f7f6 f829 	bl	80074aa <HAL_SPI_Transmit>
	MB85RS_CS_HIGH;
 8011458:	2201      	movs	r2, #1
 801145a:	2110      	movs	r1, #16
 801145c:	4805      	ldr	r0, [pc, #20]	; (8011474 <MB85RS_write+0x84>)
 801145e:	f7f1 fbff 	bl	8002c60 <HAL_GPIO_WritePin>
	WriteProtect();
 8011462:	f7ff ff7d 	bl	8011360 <WriteProtect>
}
 8011466:	bf00      	nop
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20007c64 	.word	0x20007c64
 8011474:	40020000 	.word	0x40020000
 8011478:	200024b0 	.word	0x200024b0

0801147c <MB85RS_read>:
void MB85RS_read(unsigned int address, unsigned char *buffer, unsigned int size)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b086      	sub	sp, #24
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	607a      	str	r2, [r7, #4]
	uint8_t cmd[3];
	cmd[0]=READ;
 8011488:	2303      	movs	r3, #3
 801148a:	753b      	strb	r3, [r7, #20]
	cmd[1]=(char)(address >> 8);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	0a1b      	lsrs	r3, r3, #8
 8011490:	b2db      	uxtb	r3, r3
 8011492:	757b      	strb	r3, [r7, #21]
	cmd[2] = (char)(address);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	b2db      	uxtb	r3, r3
 8011498:	75bb      	strb	r3, [r7, #22]
	MB85RS_CS_LOW;
 801149a:	2200      	movs	r2, #0
 801149c:	2110      	movs	r1, #16
 801149e:	480d      	ldr	r0, [pc, #52]	; (80114d4 <MB85RS_read+0x58>)
 80114a0:	f7f1 fbde 	bl	8002c60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 3, 10);
 80114a4:	f107 0114 	add.w	r1, r7, #20
 80114a8:	230a      	movs	r3, #10
 80114aa:	2203      	movs	r2, #3
 80114ac:	480a      	ldr	r0, [pc, #40]	; (80114d8 <MB85RS_read+0x5c>)
 80114ae:	f7f5 fffc 	bl	80074aa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	b29a      	uxth	r2, r3
 80114b6:	230a      	movs	r3, #10
 80114b8:	68b9      	ldr	r1, [r7, #8]
 80114ba:	4807      	ldr	r0, [pc, #28]	; (80114d8 <MB85RS_read+0x5c>)
 80114bc:	f7f6 f931 	bl	8007722 <HAL_SPI_Receive>
	MB85RS_CS_HIGH;
 80114c0:	2201      	movs	r2, #1
 80114c2:	2110      	movs	r1, #16
 80114c4:	4803      	ldr	r0, [pc, #12]	; (80114d4 <MB85RS_read+0x58>)
 80114c6:	f7f1 fbcb 	bl	8002c60 <HAL_GPIO_WritePin>
}
 80114ca:	bf00      	nop
 80114cc:	3718      	adds	r7, #24
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	40020000 	.word	0x40020000
 80114d8:	200024b0 	.word	0x200024b0

080114dc <MB85RS_erase>:

void MB85RS_erase()
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b0a4      	sub	sp, #144	; 0x90
 80114e0:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80114e2:	2302      	movs	r3, #2
 80114e4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 80114ee:	2300      	movs	r3, #0
 80114f0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 80114f4:	f7ff ff58 	bl	80113a8 <WriteEnable>
	MB85RS_CS_LOW;
 80114f8:	2200      	movs	r2, #0
 80114fa:	2110      	movs	r1, #16
 80114fc:	481d      	ldr	r0, [pc, #116]	; (8011574 <MB85RS_erase+0x98>)
 80114fe:	f7f1 fbaf 	bl	8002c60 <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 8011502:	2300      	movs	r3, #0
 8011504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011508:	e00a      	b.n	8011520 <MB85RS_erase+0x44>
		datanull[i]=0;
 801150a:	1d3a      	adds	r2, r7, #4
 801150c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011510:	4413      	add	r3, r2
 8011512:	2200      	movs	r2, #0
 8011514:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 8011516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801151a:	3301      	adds	r3, #1
 801151c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011524:	2b7f      	cmp	r3, #127	; 0x7f
 8011526:	ddf0      	ble.n	801150a <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8011528:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801152c:	2364      	movs	r3, #100	; 0x64
 801152e:	2203      	movs	r2, #3
 8011530:	4811      	ldr	r0, [pc, #68]	; (8011578 <MB85RS_erase+0x9c>)
 8011532:	f7f5 ffba 	bl	80074aa <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011536:	2300      	movs	r3, #0
 8011538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801153c:	e00a      	b.n	8011554 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 801153e:	1d39      	adds	r1, r7, #4
 8011540:	2364      	movs	r3, #100	; 0x64
 8011542:	2280      	movs	r2, #128	; 0x80
 8011544:	480c      	ldr	r0, [pc, #48]	; (8011578 <MB85RS_erase+0x9c>)
 8011546:	f7f5 ffb0 	bl	80074aa <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 801154a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801154e:	3301      	adds	r3, #1
 8011550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011554:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801155c:	ddef      	ble.n	801153e <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 801155e:	2201      	movs	r2, #1
 8011560:	2110      	movs	r1, #16
 8011562:	4804      	ldr	r0, [pc, #16]	; (8011574 <MB85RS_erase+0x98>)
 8011564:	f7f1 fb7c 	bl	8002c60 <HAL_GPIO_WritePin>
	WriteProtect();
 8011568:	f7ff fefa 	bl	8011360 <WriteProtect>
}
 801156c:	bf00      	nop
 801156e:	3790      	adds	r7, #144	; 0x90
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	40020000 	.word	0x40020000
 8011578:	200024b0 	.word	0x200024b0

0801157c <MB85RS_getPointSave>:


// get Điểm lưu FEN gần nhất ( thông tin được lưu ở Address cuối cùng)
void MB85RS_getPointSave(){
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
	uint8_t point[2];
	MB85RS_read(32766, point, 2);
 8011582:	1d3b      	adds	r3, r7, #4
 8011584:	2202      	movs	r2, #2
 8011586:	4619      	mov	r1, r3
 8011588:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801158c:	f7ff ff76 	bl	801147c <MB85RS_read>
	pointsave = point[0]*255 +point[1];
 8011590:	793b      	ldrb	r3, [r7, #4]
 8011592:	b29b      	uxth	r3, r3
 8011594:	461a      	mov	r2, r3
 8011596:	0212      	lsls	r2, r2, #8
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	b29a      	uxth	r2, r3
 801159c:	797b      	ldrb	r3, [r7, #5]
 801159e:	b29b      	uxth	r3, r3
 80115a0:	4413      	add	r3, r2
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <MB85RS_getPointSave+0x34>)
 80115a6:	801a      	strh	r2, [r3, #0]
}
 80115a8:	bf00      	nop
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	20007c60 	.word	0x20007c60

080115b4 <MB85RS_WritePointSave>:
void MB85RS_WritePointSave(){
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
	if(pointsave >712) pointsave=0;
 80115ba:	4b14      	ldr	r3, [pc, #80]	; (801160c <MB85RS_WritePointSave+0x58>)
 80115bc:	881b      	ldrh	r3, [r3, #0]
 80115be:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 80115c2:	d902      	bls.n	80115ca <MB85RS_WritePointSave+0x16>
 80115c4:	4b11      	ldr	r3, [pc, #68]	; (801160c <MB85RS_WritePointSave+0x58>)
 80115c6:	2200      	movs	r2, #0
 80115c8:	801a      	strh	r2, [r3, #0]
	uint8_t point[2];
	point[0] = pointsave/255;
 80115ca:	4b10      	ldr	r3, [pc, #64]	; (801160c <MB85RS_WritePointSave+0x58>)
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	4a10      	ldr	r2, [pc, #64]	; (8011610 <MB85RS_WritePointSave+0x5c>)
 80115d0:	fba2 2303 	umull	r2, r3, r2, r3
 80115d4:	09db      	lsrs	r3, r3, #7
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	713b      	strb	r3, [r7, #4]
	point[1] = pointsave%255;
 80115dc:	4b0b      	ldr	r3, [pc, #44]	; (801160c <MB85RS_WritePointSave+0x58>)
 80115de:	881a      	ldrh	r2, [r3, #0]
 80115e0:	4b0b      	ldr	r3, [pc, #44]	; (8011610 <MB85RS_WritePointSave+0x5c>)
 80115e2:	fba3 1302 	umull	r1, r3, r3, r2
 80115e6:	09d9      	lsrs	r1, r3, #7
 80115e8:	460b      	mov	r3, r1
 80115ea:	021b      	lsls	r3, r3, #8
 80115ec:	1a5b      	subs	r3, r3, r1
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	717b      	strb	r3, [r7, #5]
	MB85RS_write(32766,point, 2);
 80115f6:	1d3b      	adds	r3, r7, #4
 80115f8:	2202      	movs	r2, #2
 80115fa:	4619      	mov	r1, r3
 80115fc:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8011600:	f7ff fef6 	bl	80113f0 <MB85RS_write>
}
 8011604:	bf00      	nop
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	20007c60 	.word	0x20007c60
 8011610:	80808081 	.word	0x80808081

08011614 <MB85RS_WriteNewGame>:

void MB85RS_WriteNewGame(){
 8011614:	b580      	push	{r7, lr}
 8011616:	b094      	sub	sp, #80	; 0x50
 8011618:	af00      	add	r7, sp, #0
	uint8_t dat[46];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 801161a:	f107 0308 	add.w	r3, r7, #8
 801161e:	2200      	movs	r2, #0
 8011620:	4619      	mov	r1, r3
 8011622:	4821      	ldr	r0, [pc, #132]	; (80116a8 <MB85RS_WriteNewGame+0x94>)
 8011624:	f7f5 fcb0 	bl	8006f88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011628:	1d3b      	adds	r3, r7, #4
 801162a:	2200      	movs	r2, #0
 801162c:	4619      	mov	r1, r3
 801162e:	481e      	ldr	r0, [pc, #120]	; (80116a8 <MB85RS_WriteNewGame+0x94>)
 8011630:	f7f5 fd8c 	bl	800714c <HAL_RTC_GetDate>
	dat[0]=254; // code for HeaderGame
 8011634:	23fe      	movs	r3, #254	; 0xfe
 8011636:	773b      	strb	r3, [r7, #28]
	dat[1] = sTime.Seconds;
 8011638:	7abb      	ldrb	r3, [r7, #10]
 801163a:	777b      	strb	r3, [r7, #29]
	dat[2] = sTime.Minutes;
 801163c:	7a7b      	ldrb	r3, [r7, #9]
 801163e:	77bb      	strb	r3, [r7, #30]
	dat[3] = sTime.Hours;
 8011640:	7a3b      	ldrb	r3, [r7, #8]
 8011642:	77fb      	strb	r3, [r7, #31]
	dat[4] = sDate.Date;
 8011644:	79bb      	ldrb	r3, [r7, #6]
 8011646:	f887 3020 	strb.w	r3, [r7, #32]
	dat[5] = sDate.Month;
 801164a:	797b      	ldrb	r3, [r7, #5]
 801164c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dat[6] = sDate.Year;
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(int i=7;i<46;i++){
 8011656:	2307      	movs	r3, #7
 8011658:	64fb      	str	r3, [r7, #76]	; 0x4c
 801165a:	e008      	b.n	801166e <MB85RS_WriteNewGame+0x5a>
		dat[i]=0;
 801165c:	f107 021c 	add.w	r2, r7, #28
 8011660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011662:	4413      	add	r3, r2
 8011664:	2200      	movs	r2, #0
 8011666:	701a      	strb	r2, [r3, #0]
	for(int i=7;i<46;i++){
 8011668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801166a:	3301      	adds	r3, #1
 801166c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801166e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011670:	2b2d      	cmp	r3, #45	; 0x2d
 8011672:	ddf3      	ble.n	801165c <MB85RS_WriteNewGame+0x48>
	}
	MB85RS_write(pointsave*46, dat, 46);
 8011674:	4b0d      	ldr	r3, [pc, #52]	; (80116ac <MB85RS_WriteNewGame+0x98>)
 8011676:	881b      	ldrh	r3, [r3, #0]
 8011678:	461a      	mov	r2, r3
 801167a:	232e      	movs	r3, #46	; 0x2e
 801167c:	fb02 f303 	mul.w	r3, r2, r3
 8011680:	4618      	mov	r0, r3
 8011682:	f107 031c 	add.w	r3, r7, #28
 8011686:	222e      	movs	r2, #46	; 0x2e
 8011688:	4619      	mov	r1, r3
 801168a:	f7ff feb1 	bl	80113f0 <MB85RS_write>
	pointsave++;
 801168e:	4b07      	ldr	r3, [pc, #28]	; (80116ac <MB85RS_WriteNewGame+0x98>)
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	3301      	adds	r3, #1
 8011694:	b29a      	uxth	r2, r3
 8011696:	4b05      	ldr	r3, [pc, #20]	; (80116ac <MB85RS_WriteNewGame+0x98>)
 8011698:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 801169a:	f7ff ff8b 	bl	80115b4 <MB85RS_WritePointSave>
}
 801169e:	bf00      	nop
 80116a0:	3750      	adds	r7, #80	; 0x50
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	20002490 	.word	0x20002490
 80116ac:	20007c60 	.word	0x20007c60

080116b0 <MB85RS_saveFen>:

// 32bytePiece + 14byteClock
void MB85RS_saveFen(){
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b090      	sub	sp, #64	; 0x40
 80116b4:	af00      	add	r7, sp, #0
	uint8_t data[46];
	uint8_t pieceA,pieceB,pie=0;
 80116b6:	2300      	movs	r3, #0
 80116b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 80116bc:	2300      	movs	r3, #0
 80116be:	63bb      	str	r3, [r7, #56]	; 0x38
 80116c0:	e02d      	b.n	801171e <MB85RS_saveFen+0x6e>
		pieceA = byteToPiece(datamain_old[pie]);
 80116c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116c6:	4a2d      	ldr	r2, [pc, #180]	; (801177c <MB85RS_saveFen+0xcc>)
 80116c8:	5cd3      	ldrb	r3, [r2, r3]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f001 f92e 	bl	801292c <byteToPiece>
 80116d0:	4603      	mov	r3, r0
 80116d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		pie++;
 80116d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116da:	3301      	adds	r3, #1
 80116dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		pieceB = byteToPiece(datamain_old[pie]);
 80116e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116e4:	4a25      	ldr	r2, [pc, #148]	; (801177c <MB85RS_saveFen+0xcc>)
 80116e6:	5cd3      	ldrb	r3, [r2, r3]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f001 f91f 	bl	801292c <byteToPiece>
 80116ee:	4603      	mov	r3, r0
 80116f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		pie++;
 80116f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116f8:	3301      	adds	r3, #1
 80116fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		data[i] = (pieceA << 4) + pieceB;
 80116fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011702:	011b      	lsls	r3, r3, #4
 8011704:	b2da      	uxtb	r2, r3
 8011706:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801170a:	4413      	add	r3, r2
 801170c:	b2d9      	uxtb	r1, r3
 801170e:	1d3a      	adds	r2, r7, #4
 8011710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011712:	4413      	add	r3, r2
 8011714:	460a      	mov	r2, r1
 8011716:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	3301      	adds	r3, #1
 801171c:	63bb      	str	r3, [r7, #56]	; 0x38
 801171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011720:	2b1f      	cmp	r3, #31
 8011722:	ddce      	ble.n	80116c2 <MB85RS_saveFen+0x12>
	}
	for (int i = 0; i < 14; i++) {
 8011724:	2300      	movs	r3, #0
 8011726:	637b      	str	r3, [r7, #52]	; 0x34
 8011728:	e00c      	b.n	8011744 <MB85RS_saveFen+0x94>
		data[32 + i] = data_chessclock[i];
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	3320      	adds	r3, #32
 801172e:	4914      	ldr	r1, [pc, #80]	; (8011780 <MB85RS_saveFen+0xd0>)
 8011730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011732:	440a      	add	r2, r1
 8011734:	7812      	ldrb	r2, [r2, #0]
 8011736:	3340      	adds	r3, #64	; 0x40
 8011738:	443b      	add	r3, r7
 801173a:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (int i = 0; i < 14; i++) {
 801173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011740:	3301      	adds	r3, #1
 8011742:	637b      	str	r3, [r7, #52]	; 0x34
 8011744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011746:	2b0d      	cmp	r3, #13
 8011748:	ddef      	ble.n	801172a <MB85RS_saveFen+0x7a>
	}
	MB85RS_write(pointsave*46,data, 46);
 801174a:	4b0e      	ldr	r3, [pc, #56]	; (8011784 <MB85RS_saveFen+0xd4>)
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	232e      	movs	r3, #46	; 0x2e
 8011752:	fb02 f303 	mul.w	r3, r2, r3
 8011756:	4618      	mov	r0, r3
 8011758:	1d3b      	adds	r3, r7, #4
 801175a:	222e      	movs	r2, #46	; 0x2e
 801175c:	4619      	mov	r1, r3
 801175e:	f7ff fe47 	bl	80113f0 <MB85RS_write>
	pointsave++;
 8011762:	4b08      	ldr	r3, [pc, #32]	; (8011784 <MB85RS_saveFen+0xd4>)
 8011764:	881b      	ldrh	r3, [r3, #0]
 8011766:	3301      	adds	r3, #1
 8011768:	b29a      	uxth	r2, r3
 801176a:	4b06      	ldr	r3, [pc, #24]	; (8011784 <MB85RS_saveFen+0xd4>)
 801176c:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 801176e:	f7ff ff21 	bl	80115b4 <MB85RS_WritePointSave>
}
 8011772:	bf00      	nop
 8011774:	3740      	adds	r7, #64	; 0x40
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	20008ee0 	.word	0x20008ee0
 8011780:	20007c50 	.word	0x20007c50
 8011784:	20007c60 	.word	0x20007c60

08011788 <handlerMb85rs>:

void handlerMb85rs() {
 8011788:	b580      	push	{r7, lr}
 801178a:	af00      	add	r7, sp, #0
	if (data_chessclock[9] == 1) { //CLOCKSTATUS { READY=0,BEGIN_PLAY=1,PLAYING=2,PLAY_TO_PAUSE=3,PAUSE_TO_PLAY=4,ONE_SIDE_OVER_TIME=5,ALL_SIDE_OVER_TIME=6 };
 801178c:	4b07      	ldr	r3, [pc, #28]	; (80117ac <handlerMb85rs+0x24>)
 801178e:	7a5b      	ldrb	r3, [r3, #9]
 8011790:	2b01      	cmp	r3, #1
 8011792:	d102      	bne.n	801179a <handlerMb85rs+0x12>
		MB85RS_WriteNewGame();
 8011794:	f7ff ff3e 	bl	8011614 <MB85RS_WriteNewGame>
	} else if (data_chessclock[9] == 2) {
		MB85RS_saveFen();
	}
}
 8011798:	e005      	b.n	80117a6 <handlerMb85rs+0x1e>
	} else if (data_chessclock[9] == 2) {
 801179a:	4b04      	ldr	r3, [pc, #16]	; (80117ac <handlerMb85rs+0x24>)
 801179c:	7a5b      	ldrb	r3, [r3, #9]
 801179e:	2b02      	cmp	r3, #2
 80117a0:	d101      	bne.n	80117a6 <handlerMb85rs+0x1e>
		MB85RS_saveFen();
 80117a2:	f7ff ff85 	bl	80116b0 <MB85RS_saveFen>
}
 80117a6:	bf00      	nop
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	20007c50 	.word	0x20007c50

080117b0 <QueueGetRear>:
int8_t 		qrear =-1;
uint8_t 	qcount =0;

/* trả về rear mà sau đó sẽ push data vào nó ( data[rear] ) */
int8_t QueueGetRear()
{
 80117b0:	b480      	push	{r7}
 80117b2:	af00      	add	r7, sp, #0
	if (qcount == QUEUE_MAX)  // nếu queue đầy thì xóa phần tử đầu front
 80117b4:	4b1a      	ldr	r3, [pc, #104]	; (8011820 <QueueGetRear+0x70>)
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b14      	cmp	r3, #20
 80117ba:	d112      	bne.n	80117e2 <QueueGetRear+0x32>
	{
		qfront++;						 // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 80117bc:	4b19      	ldr	r3, [pc, #100]	; (8011824 <QueueGetRear+0x74>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	3301      	adds	r3, #1
 80117c2:	b2da      	uxtb	r2, r3
 80117c4:	4b17      	ldr	r3, [pc, #92]	; (8011824 <QueueGetRear+0x74>)
 80117c6:	701a      	strb	r2, [r3, #0]
		if(qfront ==QUEUE_MAX) qfront=0;
 80117c8:	4b16      	ldr	r3, [pc, #88]	; (8011824 <QueueGetRear+0x74>)
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2b14      	cmp	r3, #20
 80117ce:	d102      	bne.n	80117d6 <QueueGetRear+0x26>
 80117d0:	4b14      	ldr	r3, [pc, #80]	; (8011824 <QueueGetRear+0x74>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	701a      	strb	r2, [r3, #0]
		qcount--;
 80117d6:	4b12      	ldr	r3, [pc, #72]	; (8011820 <QueueGetRear+0x70>)
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	3b01      	subs	r3, #1
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	4b10      	ldr	r3, [pc, #64]	; (8011820 <QueueGetRear+0x70>)
 80117e0:	701a      	strb	r2, [r3, #0]
	}
	//tang Rear len va gan phan tu vao, Neu Rear dang o vi tri Max-1 thi tang ve vi tri 0
	qrear++;
 80117e2:	4b11      	ldr	r3, [pc, #68]	; (8011828 <QueueGetRear+0x78>)
 80117e4:	f993 3000 	ldrsb.w	r3, [r3]
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	3301      	adds	r3, #1
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	b25a      	sxtb	r2, r3
 80117f0:	4b0d      	ldr	r3, [pc, #52]	; (8011828 <QueueGetRear+0x78>)
 80117f2:	701a      	strb	r2, [r3, #0]
	if(qrear==QUEUE_MAX) qrear=0;
 80117f4:	4b0c      	ldr	r3, [pc, #48]	; (8011828 <QueueGetRear+0x78>)
 80117f6:	f993 3000 	ldrsb.w	r3, [r3]
 80117fa:	2b14      	cmp	r3, #20
 80117fc:	d102      	bne.n	8011804 <QueueGetRear+0x54>
 80117fe:	4b0a      	ldr	r3, [pc, #40]	; (8011828 <QueueGetRear+0x78>)
 8011800:	2200      	movs	r2, #0
 8011802:	701a      	strb	r2, [r3, #0]
	qcount++; //tang so phan tu len
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <QueueGetRear+0x70>)
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	3301      	adds	r3, #1
 801180a:	b2da      	uxtb	r2, r3
 801180c:	4b04      	ldr	r3, [pc, #16]	; (8011820 <QueueGetRear+0x70>)
 801180e:	701a      	strb	r2, [r3, #0]
	return qrear;
 8011810:	4b05      	ldr	r3, [pc, #20]	; (8011828 <QueueGetRear+0x78>)
 8011812:	f993 3000 	ldrsb.w	r3, [r3]
}
 8011816:	4618      	mov	r0, r3
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr
 8011820:	20007c98 	.word	0x20007c98
 8011824:	20007c97 	.word	0x20007c97
 8011828:	200000fe 	.word	0x200000fe

0801182c <QueueGetFront>:
/* trả về front, mà sau đó sẽ lấy data ra ( data[front] ) */
int8_t QueueGetFront()
{
 801182c:	b480      	push	{r7}
 801182e:	af00      	add	r7, sp, #0
	return qfront;
 8011830:	4b03      	ldr	r3, [pc, #12]	; (8011840 <QueueGetFront+0x14>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	b25b      	sxtb	r3, r3

}
 8011836:	4618      	mov	r0, r3
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr
 8011840:	20007c97 	.word	0x20007c97

08011844 <QueueGetFrontAfter>:
/* sau khi lấy dữ liệu từ front thì cần thay đổi qfront và qcount  */
void QueueGetFrontAfter()
{
 8011844:	b480      	push	{r7}
 8011846:	af00      	add	r7, sp, #0
	qfront++;
 8011848:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <QueueGetFrontAfter+0x34>)
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	3301      	adds	r3, #1
 801184e:	b2da      	uxtb	r2, r3
 8011850:	4b09      	ldr	r3, [pc, #36]	; (8011878 <QueueGetFrontAfter+0x34>)
 8011852:	701a      	strb	r2, [r3, #0]
	if(qfront==QUEUE_MAX)qfront = 0; // tang vi tri phan dau tien len, neu dang o Max-1 thi ve 0
 8011854:	4b08      	ldr	r3, [pc, #32]	; (8011878 <QueueGetFrontAfter+0x34>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b14      	cmp	r3, #20
 801185a:	d102      	bne.n	8011862 <QueueGetFrontAfter+0x1e>
 801185c:	4b06      	ldr	r3, [pc, #24]	; (8011878 <QueueGetFrontAfter+0x34>)
 801185e:	2200      	movs	r2, #0
 8011860:	701a      	strb	r2, [r3, #0]
	qcount--;//giam so phan tu xuong
 8011862:	4b06      	ldr	r3, [pc, #24]	; (801187c <QueueGetFrontAfter+0x38>)
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	3b01      	subs	r3, #1
 8011868:	b2da      	uxtb	r2, r3
 801186a:	4b04      	ldr	r3, [pc, #16]	; (801187c <QueueGetFrontAfter+0x38>)
 801186c:	701a      	strb	r2, [r3, #0]
}
 801186e:	bf00      	nop
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr
 8011878:	20007c97 	.word	0x20007c97
 801187c:	20007c98 	.word	0x20007c98

08011880 <QueueGetCount>:

uint8_t QueueGetCount()
{
 8011880:	b480      	push	{r7}
 8011882:	af00      	add	r7, sp, #0
	return qcount;
 8011884:	4b03      	ldr	r3, [pc, #12]	; (8011894 <QueueGetCount+0x14>)
 8011886:	781b      	ldrb	r3, [r3, #0]
}
 8011888:	4618      	mov	r0, r3
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	20007c98 	.word	0x20007c98

08011898 <QueueClear>:
void QueueClear()
{
 8011898:	b480      	push	{r7}
 801189a:	af00      	add	r7, sp, #0
	qfront=0;
 801189c:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <QueueClear+0x20>)
 801189e:	2200      	movs	r2, #0
 80118a0:	701a      	strb	r2, [r3, #0]
	qrear=-1;
 80118a2:	4b06      	ldr	r3, [pc, #24]	; (80118bc <QueueClear+0x24>)
 80118a4:	22ff      	movs	r2, #255	; 0xff
 80118a6:	701a      	strb	r2, [r3, #0]
	qcount=0;
 80118a8:	4b05      	ldr	r3, [pc, #20]	; (80118c0 <QueueClear+0x28>)
 80118aa:	2200      	movs	r2, #0
 80118ac:	701a      	strb	r2, [r3, #0]
}
 80118ae:	bf00      	nop
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr
 80118b8:	20007c97 	.word	0x20007c97
 80118bc:	200000fe 	.word	0x200000fe
 80118c0:	20007c98 	.word	0x20007c98

080118c4 <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;


/* data=6byte /second/minute/hour/day/month/year */
void RTC_SetTime(uint8_t* datatime)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b088      	sub	sp, #32
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime = {0};
 80118cc:	f107 030c 	add.w	r3, r7, #12
 80118d0:	2200      	movs	r2, #0
 80118d2:	601a      	str	r2, [r3, #0]
 80118d4:	605a      	str	r2, [r3, #4]
 80118d6:	609a      	str	r2, [r3, #8]
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80118dc:	2300      	movs	r3, #0
 80118de:	60bb      	str	r3, [r7, #8]
  sTime.Hours = datatime[2];
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	789b      	ldrb	r3, [r3, #2]
 80118e4:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = datatime[1];
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	785b      	ldrb	r3, [r3, #1]
 80118ea:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = datatime[0];
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80118f2:	2300      	movs	r3, #0
 80118f4:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80118f6:	2300      	movs	r3, #0
 80118f8:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80118fa:	f107 030c 	add.w	r3, r7, #12
 80118fe:	2200      	movs	r2, #0
 8011900:	4619      	mov	r1, r3
 8011902:	4811      	ldr	r0, [pc, #68]	; (8011948 <RTC_SetTime+0x84>)
 8011904:	f7f5 faa6 	bl	8006e54 <HAL_RTC_SetTime>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d001      	beq.n	8011912 <RTC_SetTime+0x4e>
  {
    Error_Handler();
 801190e:	f7ef f90b 	bl	8000b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011912:	2301      	movs	r3, #1
 8011914:	723b      	strb	r3, [r7, #8]
  sDate.Month = datatime[4];
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	791b      	ldrb	r3, [r3, #4]
 801191a:	727b      	strb	r3, [r7, #9]
  sDate.Date = datatime[3];
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	78db      	ldrb	r3, [r3, #3]
 8011920:	72bb      	strb	r3, [r7, #10]
  sDate.Year = datatime[5];
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	795b      	ldrb	r3, [r3, #5]
 8011926:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8011928:	f107 0308 	add.w	r3, r7, #8
 801192c:	2200      	movs	r2, #0
 801192e:	4619      	mov	r1, r3
 8011930:	4805      	ldr	r0, [pc, #20]	; (8011948 <RTC_SetTime+0x84>)
 8011932:	f7f5 fb87 	bl	8007044 <HAL_RTC_SetDate>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <RTC_SetTime+0x7c>
  {
    Error_Handler();
 801193c:	f7ef f8f4 	bl	8000b28 <Error_Handler>
  }
}
 8011940:	bf00      	nop
 8011942:	3720      	adds	r7, #32
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	20002490 	.word	0x20002490

0801194c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t  responce_length;
uint16_t responce_period;


/* hàm callback khi phát pulse hoàn thành */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
	if(is_start_measure ==true){
 8011954:	4b07      	ldr	r3, [pc, #28]	; (8011974 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b00      	cmp	r3, #0
 801195c:	d004      	beq.n	8011968 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		point_start_measure = TIM4->CNT;  // điểm bắt đầu đo đạc là giá trị TIM4->CNT hiện tại
 801195e:	4b06      	ldr	r3, [pc, #24]	; (8011978 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8011960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011962:	b29a      	uxth	r2, r3
 8011964:	4b05      	ldr	r3, [pc, #20]	; (801197c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8011966:	801a      	strh	r2, [r3, #0]
	}
}
 8011968:	bf00      	nop
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr
 8011974:	20007c9c 	.word	0x20007c9c
 8011978:	40000800 	.word	0x40000800
 801197c:	20007c9a 	.word	0x20007c9a

08011980 <ScanPiecesInit>:

void ScanPiecesInit()
{
 8011980:	b580      	push	{r7, lr}
 8011982:	af00      	add	r7, sp, #0
	/*	mặc định kênh TIM_CCxN bị tắt, cần phải bật nó lên để có thể xuất xung PWM trên nó	*/
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8011984:	4b09      	ldr	r3, [pc, #36]	; (80119ac <ScanPiecesInit+0x2c>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2204      	movs	r2, #4
 801198a:	2108      	movs	r1, #8
 801198c:	4618      	mov	r0, r3
 801198e:	f7f8 f8b5 	bl	8009afc <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 8011992:	4b06      	ldr	r3, [pc, #24]	; (80119ac <ScanPiecesInit+0x2c>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2204      	movs	r2, #4
 8011998:	2104      	movs	r1, #4
 801199a:	4618      	mov	r0, r3
 801199c:	f7f8 f8ae 	bl	8009afc <TIM_CCxChannelCmd>
	HAL_TIM_Base_Start_IT(&htim4);
 80119a0:	4803      	ldr	r0, [pc, #12]	; (80119b0 <ScanPiecesInit+0x30>)
 80119a2:	f7f6 faf1 	bl	8007f88 <HAL_TIM_Base_Start_IT>
}
 80119a6:	bf00      	nop
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	20002550 	.word	0x20002550
 80119b0:	20002628 	.word	0x20002628

080119b4 <PulseOut>:
// độ dài tối đa của length=20
void PulseOut(uint8_t type,uint8_t length,uint8_t outCoil)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b086      	sub	sp, #24
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	4603      	mov	r3, r0
 80119bc:	71fb      	strb	r3, [r7, #7]
 80119be:	460b      	mov	r3, r1
 80119c0:	71bb      	strb	r3, [r7, #6]
 80119c2:	4613      	mov	r3, r2
 80119c4:	717b      	strb	r3, [r7, #5]
	uint16_t _length = length;
 80119c6:	79bb      	ldrb	r3, [r7, #6]
 80119c8:	827b      	strh	r3, [r7, #18]
	uint16_t period = 84000/ListFrequency[type]; // tính toán chu kỳ
 80119ca:	79fb      	ldrb	r3, [r7, #7]
 80119cc:	4a52      	ldr	r2, [pc, #328]	; (8011b18 <PulseOut+0x164>)
 80119ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119d2:	461a      	mov	r2, r3
 80119d4:	4b51      	ldr	r3, [pc, #324]	; (8011b1c <PulseOut+0x168>)
 80119d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80119da:	823b      	strh	r3, [r7, #16]
	uint16_t duty	 = period/2;
 80119dc:	8a3b      	ldrh	r3, [r7, #16]
 80119de:	085b      	lsrs	r3, r3, #1
 80119e0:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<_length;i++)
 80119e2:	2300      	movs	r3, #0
 80119e4:	617b      	str	r3, [r7, #20]
 80119e6:	e00c      	b.n	8011a02 <PulseOut+0x4e>
	{
		pwmdata[i] = duty;
 80119e8:	494d      	ldr	r1, [pc, #308]	; (8011b20 <PulseOut+0x16c>)
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	89fa      	ldrh	r2, [r7, #14]
 80119ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		pwmdata32[i] = (uint32_t)duty;
 80119f2:	89fa      	ldrh	r2, [r7, #14]
 80119f4:	494b      	ldr	r1, [pc, #300]	; (8011b24 <PulseOut+0x170>)
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<_length;i++)
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	3301      	adds	r3, #1
 8011a00:	617b      	str	r3, [r7, #20]
 8011a02:	8a7b      	ldrh	r3, [r7, #18]
 8011a04:	697a      	ldr	r2, [r7, #20]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	dbee      	blt.n	80119e8 <PulseOut+0x34>
	}
	pwmdata[_length] =0;
 8011a0a:	8a7b      	ldrh	r3, [r7, #18]
 8011a0c:	4a44      	ldr	r2, [pc, #272]	; (8011b20 <PulseOut+0x16c>)
 8011a0e:	2100      	movs	r1, #0
 8011a10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pwmdata32[_length]=0;
 8011a14:	8a7b      	ldrh	r3, [r7, #18]
 8011a16:	4a43      	ldr	r2, [pc, #268]	; (8011b24 <PulseOut+0x170>)
 8011a18:	2100      	movs	r1, #0
 8011a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	switch(outCoil){
 8011a1e:	797b      	ldrb	r3, [r7, #5]
 8011a20:	3b01      	subs	r3, #1
 8011a22:	2b07      	cmp	r3, #7
 8011a24:	d874      	bhi.n	8011b10 <PulseOut+0x15c>
 8011a26:	a201      	add	r2, pc, #4	; (adr r2, 8011a2c <PulseOut+0x78>)
 8011a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a2c:	08011a4d 	.word	0x08011a4d
 8011a30:	08011a65 	.word	0x08011a65
 8011a34:	08011a7f 	.word	0x08011a7f
 8011a38:	08011a97 	.word	0x08011a97
 8011a3c:	08011aaf 	.word	0x08011aaf
 8011a40:	08011ac7 	.word	0x08011ac7
 8011a44:	08011ae1 	.word	0x08011ae1
 8011a48:	08011af9 	.word	0x08011af9
	case 1:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011a4c:	4a36      	ldr	r2, [pc, #216]	; (8011b28 <PulseOut+0x174>)
 8011a4e:	8a3b      	ldrh	r3, [r7, #16]
 8011a50:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a52:	8a7b      	ldrh	r3, [r7, #18]
 8011a54:	3301      	adds	r3, #1
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	4a31      	ldr	r2, [pc, #196]	; (8011b20 <PulseOut+0x16c>)
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	4833      	ldr	r0, [pc, #204]	; (8011b2c <PulseOut+0x178>)
 8011a5e:	f7f6 fb4f 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011a62:	e055      	b.n	8011b10 <PulseOut+0x15c>
	case 2:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *)pwmdata32, _length+1); 	break;
 8011a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011a68:	8a3b      	ldrh	r3, [r7, #16]
 8011a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a6c:	8a7b      	ldrh	r3, [r7, #18]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	4a2c      	ldr	r2, [pc, #176]	; (8011b24 <PulseOut+0x170>)
 8011a74:	2104      	movs	r1, #4
 8011a76:	482e      	ldr	r0, [pc, #184]	; (8011b30 <PulseOut+0x17c>)
 8011a78:	f7f6 fb42 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011a7c:	e048      	b.n	8011b10 <PulseOut+0x15c>
	case 3:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011a7e:	4a2d      	ldr	r2, [pc, #180]	; (8011b34 <PulseOut+0x180>)
 8011a80:	8a3b      	ldrh	r3, [r7, #16]
 8011a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a84:	8a7b      	ldrh	r3, [r7, #18]
 8011a86:	3301      	adds	r3, #1
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	4a25      	ldr	r2, [pc, #148]	; (8011b20 <PulseOut+0x16c>)
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	482a      	ldr	r0, [pc, #168]	; (8011b38 <PulseOut+0x184>)
 8011a90:	f7f6 fb36 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011a94:	e03c      	b.n	8011b10 <PulseOut+0x15c>
	case 4: TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011a96:	4a27      	ldr	r2, [pc, #156]	; (8011b34 <PulseOut+0x180>)
 8011a98:	8a3b      	ldrh	r3, [r7, #16]
 8011a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011a9c:	8a7b      	ldrh	r3, [r7, #18]
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	4a1f      	ldr	r2, [pc, #124]	; (8011b20 <PulseOut+0x16c>)
 8011aa4:	2108      	movs	r1, #8
 8011aa6:	4824      	ldr	r0, [pc, #144]	; (8011b38 <PulseOut+0x184>)
 8011aa8:	f7f6 fb2a 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011aac:	e030      	b.n	8011b10 <PulseOut+0x15c>
	case 5:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,(uint32_t *)pwmdata, _length+1); 	break;
 8011aae:	4a21      	ldr	r2, [pc, #132]	; (8011b34 <PulseOut+0x180>)
 8011ab0:	8a3b      	ldrh	r3, [r7, #16]
 8011ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ab4:	8a7b      	ldrh	r3, [r7, #18]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	4a19      	ldr	r2, [pc, #100]	; (8011b20 <PulseOut+0x16c>)
 8011abc:	2104      	movs	r1, #4
 8011abe:	481e      	ldr	r0, [pc, #120]	; (8011b38 <PulseOut+0x184>)
 8011ac0:	f7f6 fb1e 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011ac4:	e024      	b.n	8011b10 <PulseOut+0x15c>
	case 6:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3,(uint32_t *)pwmdata32, _length+1); 	break;
 8011ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011aca:	8a3b      	ldrh	r3, [r7, #16]
 8011acc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ace:	8a7b      	ldrh	r3, [r7, #18]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	4a13      	ldr	r2, [pc, #76]	; (8011b24 <PulseOut+0x170>)
 8011ad6:	2108      	movs	r1, #8
 8011ad8:	4815      	ldr	r0, [pc, #84]	; (8011b30 <PulseOut+0x17c>)
 8011ada:	f7f6 fb11 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011ade:	e017      	b.n	8011b10 <PulseOut+0x15c>
	case 7:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,(uint32_t *)pwmdata, _length+1); 	break;
 8011ae0:	4a11      	ldr	r2, [pc, #68]	; (8011b28 <PulseOut+0x174>)
 8011ae2:	8a3b      	ldrh	r3, [r7, #16]
 8011ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ae6:	8a7b      	ldrh	r3, [r7, #18]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	4a0c      	ldr	r2, [pc, #48]	; (8011b20 <PulseOut+0x16c>)
 8011aee:	210c      	movs	r1, #12
 8011af0:	480e      	ldr	r0, [pc, #56]	; (8011b2c <PulseOut+0x178>)
 8011af2:	f7f6 fb05 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011af6:	e00b      	b.n	8011b10 <PulseOut+0x15c>
	case 8:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011af8:	4a0b      	ldr	r2, [pc, #44]	; (8011b28 <PulseOut+0x174>)
 8011afa:	8a3b      	ldrh	r3, [r7, #16]
 8011afc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011afe:	8a7b      	ldrh	r3, [r7, #18]
 8011b00:	3301      	adds	r3, #1
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	4a06      	ldr	r2, [pc, #24]	; (8011b20 <PulseOut+0x16c>)
 8011b06:	2108      	movs	r1, #8
 8011b08:	4808      	ldr	r0, [pc, #32]	; (8011b2c <PulseOut+0x178>)
 8011b0a:	f7f6 faf9 	bl	8008100 <HAL_TIM_PWM_Start_DMA>
 8011b0e:	bf00      	nop
	}
}
 8011b10:	bf00      	nop
 8011b12:	3718      	adds	r7, #24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	08013338 	.word	0x08013338
 8011b1c:	00014820 	.word	0x00014820
 8011b20:	20008f20 	.word	0x20008f20
 8011b24:	20008f70 	.word	0x20008f70
 8011b28:	40000400 	.word	0x40000400
 8011b2c:	200025e0 	.word	0x200025e0
 8011b30:	20002598 	.word	0x20002598
 8011b34:	40010000 	.word	0x40010000
 8011b38:	20002550 	.word	0x20002550

08011b3c <SelectReadCoil>:
void SelectReadCoil(uint8_t readCoil)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	4603      	mov	r3, r0
 8011b44:	71fb      	strb	r3, [r7, #7]
	switch(readCoil){
 8011b46:	79fb      	ldrb	r3, [r7, #7]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	2b07      	cmp	r3, #7
 8011b4c:	f200 809c 	bhi.w	8011c88 <SelectReadCoil+0x14c>
 8011b50:	a201      	add	r2, pc, #4	; (adr r2, 8011b58 <SelectReadCoil+0x1c>)
 8011b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b56:	bf00      	nop
 8011b58:	08011b79 	.word	0x08011b79
 8011b5c:	08011b9b 	.word	0x08011b9b
 8011b60:	08011bbd 	.word	0x08011bbd
 8011b64:	08011bdf 	.word	0x08011bdf
 8011b68:	08011c01 	.word	0x08011c01
 8011b6c:	08011c23 	.word	0x08011c23
 8011b70:	08011c45 	.word	0x08011c45
 8011b74:	08011c67 	.word	0x08011c67
		case 1: CD4051_A_1; CD4051_B_0; CD4051_C_1;break; //coil_1 <-> X5
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011b7e:	4844      	ldr	r0, [pc, #272]	; (8011c90 <SelectReadCoil+0x154>)
 8011b80:	f7f1 f86e 	bl	8002c60 <HAL_GPIO_WritePin>
 8011b84:	2200      	movs	r2, #0
 8011b86:	2120      	movs	r1, #32
 8011b88:	4842      	ldr	r0, [pc, #264]	; (8011c94 <SelectReadCoil+0x158>)
 8011b8a:	f7f1 f869 	bl	8002c60 <HAL_GPIO_WritePin>
 8011b8e:	2201      	movs	r2, #1
 8011b90:	2140      	movs	r1, #64	; 0x40
 8011b92:	4840      	ldr	r0, [pc, #256]	; (8011c94 <SelectReadCoil+0x158>)
 8011b94:	f7f1 f864 	bl	8002c60 <HAL_GPIO_WritePin>
 8011b98:	e076      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 2: CD4051_A_1; CD4051_B_1; CD4051_C_1;break; //coil_2 <-> X7
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011ba0:	483b      	ldr	r0, [pc, #236]	; (8011c90 <SelectReadCoil+0x154>)
 8011ba2:	f7f1 f85d 	bl	8002c60 <HAL_GPIO_WritePin>
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	2120      	movs	r1, #32
 8011baa:	483a      	ldr	r0, [pc, #232]	; (8011c94 <SelectReadCoil+0x158>)
 8011bac:	f7f1 f858 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	2140      	movs	r1, #64	; 0x40
 8011bb4:	4837      	ldr	r0, [pc, #220]	; (8011c94 <SelectReadCoil+0x158>)
 8011bb6:	f7f1 f853 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bba:	e065      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 3: CD4051_A_0; CD4051_B_1; CD4051_C_1;break; //coil_3 <-> X6
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011bc2:	4833      	ldr	r0, [pc, #204]	; (8011c90 <SelectReadCoil+0x154>)
 8011bc4:	f7f1 f84c 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bc8:	2201      	movs	r2, #1
 8011bca:	2120      	movs	r1, #32
 8011bcc:	4831      	ldr	r0, [pc, #196]	; (8011c94 <SelectReadCoil+0x158>)
 8011bce:	f7f1 f847 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	2140      	movs	r1, #64	; 0x40
 8011bd6:	482f      	ldr	r0, [pc, #188]	; (8011c94 <SelectReadCoil+0x158>)
 8011bd8:	f7f1 f842 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bdc:	e054      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 4: CD4051_A_0; CD4051_B_0; CD4051_C_1;break; //coil_4 <-> X4
 8011bde:	2200      	movs	r2, #0
 8011be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011be4:	482a      	ldr	r0, [pc, #168]	; (8011c90 <SelectReadCoil+0x154>)
 8011be6:	f7f1 f83b 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bea:	2200      	movs	r2, #0
 8011bec:	2120      	movs	r1, #32
 8011bee:	4829      	ldr	r0, [pc, #164]	; (8011c94 <SelectReadCoil+0x158>)
 8011bf0:	f7f1 f836 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	2140      	movs	r1, #64	; 0x40
 8011bf8:	4826      	ldr	r0, [pc, #152]	; (8011c94 <SelectReadCoil+0x158>)
 8011bfa:	f7f1 f831 	bl	8002c60 <HAL_GPIO_WritePin>
 8011bfe:	e043      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 5: CD4051_A_0; CD4051_B_1; CD4051_C_0;break; //coil_5 <-> X2
 8011c00:	2200      	movs	r2, #0
 8011c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011c06:	4822      	ldr	r0, [pc, #136]	; (8011c90 <SelectReadCoil+0x154>)
 8011c08:	f7f1 f82a 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	2120      	movs	r1, #32
 8011c10:	4820      	ldr	r0, [pc, #128]	; (8011c94 <SelectReadCoil+0x158>)
 8011c12:	f7f1 f825 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c16:	2200      	movs	r2, #0
 8011c18:	2140      	movs	r1, #64	; 0x40
 8011c1a:	481e      	ldr	r0, [pc, #120]	; (8011c94 <SelectReadCoil+0x158>)
 8011c1c:	f7f1 f820 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c20:	e032      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 6: CD4051_A_1; CD4051_B_0; CD4051_C_0;break; //coil_6 <-> X1
 8011c22:	2201      	movs	r2, #1
 8011c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011c28:	4819      	ldr	r0, [pc, #100]	; (8011c90 <SelectReadCoil+0x154>)
 8011c2a:	f7f1 f819 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2120      	movs	r1, #32
 8011c32:	4818      	ldr	r0, [pc, #96]	; (8011c94 <SelectReadCoil+0x158>)
 8011c34:	f7f1 f814 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2140      	movs	r1, #64	; 0x40
 8011c3c:	4815      	ldr	r0, [pc, #84]	; (8011c94 <SelectReadCoil+0x158>)
 8011c3e:	f7f1 f80f 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c42:	e021      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 7: CD4051_A_0; CD4051_B_0; CD4051_C_0;break; //coil_7 <-> X0
 8011c44:	2200      	movs	r2, #0
 8011c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011c4a:	4811      	ldr	r0, [pc, #68]	; (8011c90 <SelectReadCoil+0x154>)
 8011c4c:	f7f1 f808 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c50:	2200      	movs	r2, #0
 8011c52:	2120      	movs	r1, #32
 8011c54:	480f      	ldr	r0, [pc, #60]	; (8011c94 <SelectReadCoil+0x158>)
 8011c56:	f7f1 f803 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	2140      	movs	r1, #64	; 0x40
 8011c5e:	480d      	ldr	r0, [pc, #52]	; (8011c94 <SelectReadCoil+0x158>)
 8011c60:	f7f0 fffe 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c64:	e010      	b.n	8011c88 <SelectReadCoil+0x14c>
		case 8: CD4051_A_1; CD4051_B_1; CD4051_C_0;break; //coil_8 <-> X3
 8011c66:	2201      	movs	r2, #1
 8011c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011c6c:	4808      	ldr	r0, [pc, #32]	; (8011c90 <SelectReadCoil+0x154>)
 8011c6e:	f7f0 fff7 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c72:	2201      	movs	r2, #1
 8011c74:	2120      	movs	r1, #32
 8011c76:	4807      	ldr	r0, [pc, #28]	; (8011c94 <SelectReadCoil+0x158>)
 8011c78:	f7f0 fff2 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2140      	movs	r1, #64	; 0x40
 8011c80:	4804      	ldr	r0, [pc, #16]	; (8011c94 <SelectReadCoil+0x158>)
 8011c82:	f7f0 ffed 	bl	8002c60 <HAL_GPIO_WritePin>
 8011c86:	bf00      	nop
	}
}
 8011c88:	bf00      	nop
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	40020000 	.word	0x40020000
 8011c94:	40020400 	.word	0x40020400

08011c98 <Measure>:


void Measure(uint8_t type,uint8_t outCoil,uint8_t readCoil)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	71fb      	strb	r3, [r7, #7]
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	71bb      	strb	r3, [r7, #6]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	717b      	strb	r3, [r7, #5]
	/* Phát xung và thiết lập Cuộn cảm nhận tín hiệu */
	PulseOut(type,ListLengthOut[type], outCoil);
 8011caa:	79fb      	ldrb	r3, [r7, #7]
 8011cac:	4a92      	ldr	r2, [pc, #584]	; (8011ef8 <Measure+0x260>)
 8011cae:	5cd1      	ldrb	r1, [r2, r3]
 8011cb0:	79ba      	ldrb	r2, [r7, #6]
 8011cb2:	79fb      	ldrb	r3, [r7, #7]
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7ff fe7d 	bl	80119b4 <PulseOut>
	SelectReadCoil(readCoil);
 8011cba:	797b      	ldrb	r3, [r7, #5]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7ff ff3d 	bl	8011b3c <SelectReadCoil>
	/* Đưa các biến sử dụng trong đo đạc về giá trị ban đầu */
	is_start_measure = true;
 8011cc2:	4b8e      	ldr	r3, [pc, #568]	; (8011efc <Measure+0x264>)
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	701a      	strb	r2, [r3, #0]
	point_start_measure=0;
 8011cc8:	4b8d      	ldr	r3, [pc, #564]	; (8011f00 <Measure+0x268>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	801a      	strh	r2, [r3, #0]
	startmeasure=0;
 8011cce:	4b8d      	ldr	r3, [pc, #564]	; (8011f04 <Measure+0x26c>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	801a      	strh	r2, [r3, #0]
	stopmeasure=0;
 8011cd4:	4b8c      	ldr	r3, [pc, #560]	; (8011f08 <Measure+0x270>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	801a      	strh	r2, [r3, #0]
	responce_length=0;
 8011cda:	4b8c      	ldr	r3, [pc, #560]	; (8011f0c <Measure+0x274>)
 8011cdc:	2200      	movs	r2, #0
 8011cde:	701a      	strb	r2, [r3, #0]
	responce_period=0;
 8011ce0:	4b8b      	ldr	r3, [pc, #556]	; (8011f10 <Measure+0x278>)
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<IC_MAX;i++){
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	617b      	str	r3, [r7, #20]
 8011cea:	e007      	b.n	8011cfc <Measure+0x64>
		inputCapture_data[i]=0;	// Clear ic_data
 8011cec:	4a89      	ldr	r2, [pc, #548]	; (8011f14 <Measure+0x27c>)
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<IC_MAX;i++){
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	617b      	str	r3, [r7, #20]
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	2b31      	cmp	r3, #49	; 0x31
 8011d00:	ddf4      	ble.n	8011cec <Measure+0x54>
	}
	uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8011d02:	797a      	ldrb	r2, [r7, #5]
 8011d04:	79bb      	ldrb	r3, [r7, #6]
 8011d06:	4611      	mov	r1, r2
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f000 fb15 	bl	8012338 <FileRankToSquare>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	72fb      	strb	r3, [r7, #11]
	bool firstcheck=true;
 8011d12:	2301      	movs	r3, #1
 8011d14:	72bb      	strb	r3, [r7, #10]
	uint16_t period = 84000/ListFrequency[type]; 	// tính toán chu kỳ
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	4a7f      	ldr	r2, [pc, #508]	; (8011f18 <Measure+0x280>)
 8011d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d1e:	461a      	mov	r2, r3
 8011d20:	4b7e      	ldr	r3, [pc, #504]	; (8011f1c <Measure+0x284>)
 8011d22:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d26:	813b      	strh	r3, [r7, #8]

	/*	Thiết lập Timer để đo đạc tín hiệu trả về	*/
	TIM4->ARR = ListIC_measure[type];	// xác định khoảng đo tối đa
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	4a7d      	ldr	r2, [pc, #500]	; (8011f20 <Measure+0x288>)
 8011d2c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011d30:	4b7c      	ldr	r3, [pc, #496]	; (8011f24 <Measure+0x28c>)
 8011d32:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
 8011d34:	2332      	movs	r3, #50	; 0x32
 8011d36:	4a77      	ldr	r2, [pc, #476]	; (8011f14 <Measure+0x27c>)
 8011d38:	2104      	movs	r1, #4
 8011d3a:	487b      	ldr	r0, [pc, #492]	; (8011f28 <Measure+0x290>)
 8011d3c:	f7f6 fbea 	bl	8008514 <HAL_TIM_IC_Start_DMA>

    /* chờ cho quá trình đo PWM hoàn thành */
	while(is_start_measure){
 8011d40:	e033      	b.n	8011daa <Measure+0x112>
		/*	Kiểm tra liên tục xem có xung phản hồi hay không? nếu không thì dừng quá trình đo lại luôn để tiết kiệm thời gian	*/
		if(firstcheck){
 8011d42:	7abb      	ldrb	r3, [r7, #10]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d030      	beq.n	8011daa <Measure+0x112>
			if(TIM4->CNT > (period*18)){
 8011d48:	4b76      	ldr	r3, [pc, #472]	; (8011f24 <Measure+0x28c>)
 8011d4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011d4c:	893a      	ldrh	r2, [r7, #8]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	00db      	lsls	r3, r3, #3
 8011d52:	4413      	add	r3, r2
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	4299      	cmp	r1, r3
 8011d58:	d927      	bls.n	8011daa <Measure+0x112>
				if(inputCapture_data[10]==0){
 8011d5a:	4b6e      	ldr	r3, [pc, #440]	; (8011f14 <Measure+0x27c>)
 8011d5c:	8a9b      	ldrh	r3, [r3, #20]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d123      	bne.n	8011daa <Measure+0x112>
					/* Nếu không có xung phản hồi thì reset biến và đặt lại timer */
					firstcheck=false;
 8011d62:	2300      	movs	r3, #0
 8011d64:	72bb      	strb	r3, [r7, #10]
					responce_length=0;
 8011d66:	4b69      	ldr	r3, [pc, #420]	; (8011f0c <Measure+0x274>)
 8011d68:	2200      	movs	r2, #0
 8011d6a:	701a      	strb	r2, [r3, #0]
					responce_period=0;
 8011d6c:	4b68      	ldr	r3, [pc, #416]	; (8011f10 <Measure+0x278>)
 8011d6e:	2200      	movs	r2, #0
 8011d70:	801a      	strh	r2, [r3, #0]
					datapieces[type][sq][PULSES]=0;
 8011d72:	79fa      	ldrb	r2, [r7, #7]
 8011d74:	7afb      	ldrb	r3, [r7, #11]
 8011d76:	496d      	ldr	r1, [pc, #436]	; (8011f2c <Measure+0x294>)
 8011d78:	0192      	lsls	r2, r2, #6
 8011d7a:	4413      	add	r3, r2
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	440b      	add	r3, r1
 8011d80:	2200      	movs	r2, #0
 8011d82:	805a      	strh	r2, [r3, #2]
					datapieces[type][sq][PERIOD]=0;
 8011d84:	79fa      	ldrb	r2, [r7, #7]
 8011d86:	7afb      	ldrb	r3, [r7, #11]
 8011d88:	4968      	ldr	r1, [pc, #416]	; (8011f2c <Measure+0x294>)
 8011d8a:	0192      	lsls	r2, r2, #6
 8011d8c:	4413      	add	r3, r2
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
					TIM4->CNT=0;
 8011d94:	4b63      	ldr	r3, [pc, #396]	; (8011f24 <Measure+0x28c>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8011d9a:	2104      	movs	r1, #4
 8011d9c:	4862      	ldr	r0, [pc, #392]	; (8011f28 <Measure+0x290>)
 8011d9e:	f7f6 fd55 	bl	800884c <HAL_TIM_IC_Stop_DMA>
					is_start_measure=false;
 8011da2:	4b56      	ldr	r3, [pc, #344]	; (8011efc <Measure+0x264>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	701a      	strb	r2, [r3, #0]
					return;
 8011da8:	e0a3      	b.n	8011ef2 <Measure+0x25a>
	while(is_start_measure){
 8011daa:	4b54      	ldr	r3, [pc, #336]	; (8011efc <Measure+0x264>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d1c6      	bne.n	8011d42 <Measure+0xaa>
	 * 	sử dụng 1 khoảng để đo tần số ⏤⏤⏤⏤┘
	 *
	 *  */

	/* xác định điểm đầu Measure */
	for(int i=0;i<IC_MAX;i++){
 8011db4:	2300      	movs	r3, #0
 8011db6:	613b      	str	r3, [r7, #16]
 8011db8:	e02e      	b.n	8011e18 <Measure+0x180>
		if(inputCapture_data[i] >point_start_measure){
 8011dba:	4a56      	ldr	r2, [pc, #344]	; (8011f14 <Measure+0x27c>)
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011dc2:	4b4f      	ldr	r3, [pc, #316]	; (8011f00 <Measure+0x268>)
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d904      	bls.n	8011dd6 <Measure+0x13e>
			startmeasure=i;
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	4b4c      	ldr	r3, [pc, #304]	; (8011f04 <Measure+0x26c>)
 8011dd2:	801a      	strh	r2, [r3, #0]
			break;
 8011dd4:	e023      	b.n	8011e1e <Measure+0x186>
		}else if(inputCapture_data[i]==0){ // nếu ko có xung nào nhận được
 8011dd6:	4a4f      	ldr	r2, [pc, #316]	; (8011f14 <Measure+0x27c>)
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d117      	bne.n	8011e12 <Measure+0x17a>
			responce_length=0;
 8011de2:	4b4a      	ldr	r3, [pc, #296]	; (8011f0c <Measure+0x274>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	701a      	strb	r2, [r3, #0]
			responce_period=0;
 8011de8:	4b49      	ldr	r3, [pc, #292]	; (8011f10 <Measure+0x278>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	801a      	strh	r2, [r3, #0]
			datapieces[type][sq][PULSES]=0;
 8011dee:	79fa      	ldrb	r2, [r7, #7]
 8011df0:	7afb      	ldrb	r3, [r7, #11]
 8011df2:	494e      	ldr	r1, [pc, #312]	; (8011f2c <Measure+0x294>)
 8011df4:	0192      	lsls	r2, r2, #6
 8011df6:	4413      	add	r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	440b      	add	r3, r1
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	805a      	strh	r2, [r3, #2]
			datapieces[type][sq][PERIOD]=0;
 8011e00:	79fa      	ldrb	r2, [r7, #7]
 8011e02:	7afb      	ldrb	r3, [r7, #11]
 8011e04:	4949      	ldr	r1, [pc, #292]	; (8011f2c <Measure+0x294>)
 8011e06:	0192      	lsls	r2, r2, #6
 8011e08:	4413      	add	r3, r2
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			return;
 8011e10:	e06f      	b.n	8011ef2 <Measure+0x25a>
	for(int i=0;i<IC_MAX;i++){
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	3301      	adds	r3, #1
 8011e16:	613b      	str	r3, [r7, #16]
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	2b31      	cmp	r3, #49	; 0x31
 8011e1c:	ddcd      	ble.n	8011dba <Measure+0x122>
		}
	}

	/* xác định điểm cuối Measure */
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8011e1e:	4b39      	ldr	r3, [pc, #228]	; (8011f04 <Measure+0x26c>)
 8011e20:	881b      	ldrh	r3, [r3, #0]
 8011e22:	60fb      	str	r3, [r7, #12]
 8011e24:	e011      	b.n	8011e4a <Measure+0x1b2>
		stopmeasure=i;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	4b37      	ldr	r3, [pc, #220]	; (8011f08 <Measure+0x270>)
 8011e2c:	801a      	strh	r2, [r3, #0]
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	3301      	adds	r3, #1
 8011e32:	4a38      	ldr	r2, [pc, #224]	; (8011f14 <Measure+0x27c>)
 8011e34:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011e38:	4936      	ldr	r1, [pc, #216]	; (8011f14 <Measure+0x27c>)
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d306      	bcc.n	8011e52 <Measure+0x1ba>
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	3301      	adds	r3, #1
 8011e48:	60fb      	str	r3, [r7, #12]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2b30      	cmp	r3, #48	; 0x30
 8011e4e:	ddea      	ble.n	8011e26 <Measure+0x18e>
 8011e50:	e000      	b.n	8011e54 <Measure+0x1bc>
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8011e52:	bf00      	nop
	}
	if(inputCapture_data[IC_MAX-1]!=0) stopmeasure=IC_MAX;
 8011e54:	4b2f      	ldr	r3, [pc, #188]	; (8011f14 <Measure+0x27c>)
 8011e56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d002      	beq.n	8011e64 <Measure+0x1cc>
 8011e5e:	4b2a      	ldr	r3, [pc, #168]	; (8011f08 <Measure+0x270>)
 8011e60:	2232      	movs	r2, #50	; 0x32
 8011e62:	801a      	strh	r2, [r3, #0]

	/* tính toán số lượng Pulses phản hồi */
	responce_length = stopmeasure-startmeasure;
 8011e64:	4b28      	ldr	r3, [pc, #160]	; (8011f08 <Measure+0x270>)
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	b2da      	uxtb	r2, r3
 8011e6a:	4b26      	ldr	r3, [pc, #152]	; (8011f04 <Measure+0x26c>)
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	b2db      	uxtb	r3, r3
 8011e70:	1ad3      	subs	r3, r2, r3
 8011e72:	b2da      	uxtb	r2, r3
 8011e74:	4b25      	ldr	r3, [pc, #148]	; (8011f0c <Measure+0x274>)
 8011e76:	701a      	strb	r2, [r3, #0]

	// tính period phản hồi
	if(responce_length > offsetMeasure[type]+RANGE_MEASURE){
 8011e78:	4b24      	ldr	r3, [pc, #144]	; (8011f0c <Measure+0x274>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	79fb      	ldrb	r3, [r7, #7]
 8011e80:	4a2b      	ldr	r2, [pc, #172]	; (8011f30 <Measure+0x298>)
 8011e82:	5cd3      	ldrb	r3, [r2, r3]
 8011e84:	3304      	adds	r3, #4
 8011e86:	4299      	cmp	r1, r3
 8011e88:	dd1d      	ble.n	8011ec6 <Measure+0x22e>
		responce_period = (inputCapture_data[startmeasure+offsetMeasure[type]+RANGE_MEASURE] - inputCapture_data[startmeasure + offsetMeasure[type]]) / RANGE_MEASURE;
 8011e8a:	4b1e      	ldr	r3, [pc, #120]	; (8011f04 <Measure+0x26c>)
 8011e8c:	881b      	ldrh	r3, [r3, #0]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	79fb      	ldrb	r3, [r7, #7]
 8011e92:	4a27      	ldr	r2, [pc, #156]	; (8011f30 <Measure+0x298>)
 8011e94:	5cd3      	ldrb	r3, [r2, r3]
 8011e96:	440b      	add	r3, r1
 8011e98:	3304      	adds	r3, #4
 8011e9a:	4a1e      	ldr	r2, [pc, #120]	; (8011f14 <Measure+0x27c>)
 8011e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	4b18      	ldr	r3, [pc, #96]	; (8011f04 <Measure+0x26c>)
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	79fb      	ldrb	r3, [r7, #7]
 8011eaa:	4a21      	ldr	r2, [pc, #132]	; (8011f30 <Measure+0x298>)
 8011eac:	5cd3      	ldrb	r3, [r2, r3]
 8011eae:	4403      	add	r3, r0
 8011eb0:	4a18      	ldr	r2, [pc, #96]	; (8011f14 <Measure+0x27c>)
 8011eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011eb6:	1acb      	subs	r3, r1, r3
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	da00      	bge.n	8011ebe <Measure+0x226>
 8011ebc:	3303      	adds	r3, #3
 8011ebe:	109b      	asrs	r3, r3, #2
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	4b13      	ldr	r3, [pc, #76]	; (8011f10 <Measure+0x278>)
 8011ec4:	801a      	strh	r2, [r3, #0]
	}else{
		datapieces[type][sq][PULSES]=0;
		datapieces[type][sq][PERIOD]=0;
	}
#else
	datapieces[type][sq][PULSES]=responce_length;
 8011ec6:	4b11      	ldr	r3, [pc, #68]	; (8011f0c <Measure+0x274>)
 8011ec8:	7819      	ldrb	r1, [r3, #0]
 8011eca:	79fa      	ldrb	r2, [r7, #7]
 8011ecc:	7afb      	ldrb	r3, [r7, #11]
 8011ece:	b288      	uxth	r0, r1
 8011ed0:	4916      	ldr	r1, [pc, #88]	; (8011f2c <Measure+0x294>)
 8011ed2:	0192      	lsls	r2, r2, #6
 8011ed4:	4413      	add	r3, r2
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	440b      	add	r3, r1
 8011eda:	4602      	mov	r2, r0
 8011edc:	805a      	strh	r2, [r3, #2]
	datapieces[type][sq][PERIOD]=responce_period;
 8011ede:	79fa      	ldrb	r2, [r7, #7]
 8011ee0:	7afb      	ldrb	r3, [r7, #11]
 8011ee2:	490b      	ldr	r1, [pc, #44]	; (8011f10 <Measure+0x278>)
 8011ee4:	8808      	ldrh	r0, [r1, #0]
 8011ee6:	4911      	ldr	r1, [pc, #68]	; (8011f2c <Measure+0x294>)
 8011ee8:	0192      	lsls	r2, r2, #6
 8011eea:	4413      	add	r3, r2
 8011eec:	4602      	mov	r2, r0
 8011eee:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
#endif
}
 8011ef2:	3718      	adds	r7, #24
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}
 8011ef8:	0801335c 	.word	0x0801335c
 8011efc:	20007c9c 	.word	0x20007c9c
 8011f00:	20007c9a 	.word	0x20007c9a
 8011f04:	20009074 	.word	0x20009074
 8011f08:	20009076 	.word	0x20009076
 8011f0c:	20009078 	.word	0x20009078
 8011f10:	2000907a 	.word	0x2000907a
 8011f14:	20009010 	.word	0x20009010
 8011f18:	08013338 	.word	0x08013338
 8011f1c:	00014820 	.word	0x00014820
 8011f20:	08013398 	.word	0x08013398
 8011f24:	40000800 	.word	0x40000800
 8011f28:	20002628 	.word	0x20002628
 8011f2c:	20007ca0 	.word	0x20007ca0
 8011f30:	080133bc 	.word	0x080133bc

08011f34 <Scan>:
 * Return 0: quá trình quét hoàn tất và không phát hiện sự thay đổi của FEN
 * Return 1: quá trình quét hoàn tất và phát hiện có sự thay đổi FEN
 * Return 2: quá trình quét có xảy ra ChessClock Side Thay đổi
 *  enableClockSideInterrupt: có cho phép return lại khi chessclock thay đổi hay không */
SCANRESULT Scan(bool enableClockSideInterrup)
{
 8011f34:	b590      	push	{r4, r7, lr}
 8011f36:	b093      	sub	sp, #76	; 0x4c
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	71fb      	strb	r3, [r7, #7]
	// clear data
	for(int i=0;i<64;i++){
 8011f3e:	2300      	movs	r3, #0
 8011f40:	647b      	str	r3, [r7, #68]	; 0x44
 8011f42:	e007      	b.n	8011f54 <Scan+0x20>
		datamain[i]=0;
 8011f44:	4a92      	ldr	r2, [pc, #584]	; (8012190 <Scan+0x25c>)
 8011f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f48:	4413      	add	r3, r2
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 8011f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f50:	3301      	adds	r3, #1
 8011f52:	647b      	str	r3, [r7, #68]	; 0x44
 8011f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f56:	2b3f      	cmp	r3, #63	; 0x3f
 8011f58:	ddf4      	ble.n	8011f44 <Scan+0x10>
	}
	for(int t=0;t<18;t++){
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011f5e:	e01c      	b.n	8011f9a <Scan+0x66>
		for(int s =0;s<64;s++){
 8011f60:	2300      	movs	r3, #0
 8011f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f64:	e013      	b.n	8011f8e <Scan+0x5a>
			datapieces[t][s][PULSES]=0;
 8011f66:	498b      	ldr	r1, [pc, #556]	; (8012194 <Scan+0x260>)
 8011f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f6a:	019a      	lsls	r2, r3, #6
 8011f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6e:	4413      	add	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	440b      	add	r3, r1
 8011f74:	2200      	movs	r2, #0
 8011f76:	805a      	strh	r2, [r3, #2]
			datapieces[t][s][PERIOD]=0;
 8011f78:	4986      	ldr	r1, [pc, #536]	; (8012194 <Scan+0x260>)
 8011f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f7c:	019a      	lsls	r2, r3, #6
 8011f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f80:	4413      	add	r3, r2
 8011f82:	2200      	movs	r2, #0
 8011f84:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
		for(int s =0;s<64;s++){
 8011f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f90:	2b3f      	cmp	r3, #63	; 0x3f
 8011f92:	dde8      	ble.n	8011f66 <Scan+0x32>
	for(int t=0;t<18;t++){
 8011f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f96:	3301      	adds	r3, #1
 8011f98:	643b      	str	r3, [r7, #64]	; 0x40
 8011f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f9c:	2b11      	cmp	r3, #17
 8011f9e:	dddf      	ble.n	8011f60 <Scan+0x2c>
		}
	}
	for(int i=0;i<18;i++){
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fa4:	e1b1      	b.n	801230a <Scan+0x3d6>
		int type = sttscan[i];
 8011fa6:	4a7c      	ldr	r2, [pc, #496]	; (8012198 <Scan+0x264>)
 8011fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011faa:	4413      	add	r3, r2
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	627b      	str	r3, [r7, #36]	; 0x24
		int outCoil =0;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	623b      	str	r3, [r7, #32]
		int readCoil =0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	61fb      	str	r3, [r7, #28]
		for(int j=0;j<8;j++){
 8011fb8:	2300      	movs	r3, #0
 8011fba:	637b      	str	r3, [r7, #52]	; 0x34
 8011fbc:	e039      	b.n	8012032 <Scan+0xfe>
			readCoil = sttInOut[j];
 8011fbe:	4a77      	ldr	r2, [pc, #476]	; (801219c <Scan+0x268>)
 8011fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc2:	4413      	add	r3, r2
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	61fb      	str	r3, [r7, #28]
			for(int k=0;k<8;k++){
 8011fc8:	2300      	movs	r3, #0
 8011fca:	633b      	str	r3, [r7, #48]	; 0x30
 8011fcc:	e02b      	b.n	8012026 <Scan+0xf2>
				outCoil = sttInOut[k];
 8011fce:	4a73      	ldr	r2, [pc, #460]	; (801219c <Scan+0x268>)
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd2:	4413      	add	r3, r2
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	623b      	str	r3, [r7, #32]
				if(chessclock_interrup==true && enableClockSideInterrup==true){
 8011fd8:	4b71      	ldr	r3, [pc, #452]	; (80121a0 <Scan+0x26c>)
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d007      	beq.n	8011ff0 <Scan+0xbc>
 8011fe0:	79fb      	ldrb	r3, [r7, #7]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d004      	beq.n	8011ff0 <Scan+0xbc>
					chessclock_interrup=false;
 8011fe6:	4b6e      	ldr	r3, [pc, #440]	; (80121a0 <Scan+0x26c>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	701a      	strb	r2, [r3, #0]
					return SCAN_SIDE_CHANGED;
 8011fec:	2302      	movs	r3, #2
 8011fee:	e198      	b.n	8012322 <Scan+0x3ee>
				}
				uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8011ff0:	6a3b      	ldr	r3, [r7, #32]
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	69fa      	ldr	r2, [r7, #28]
 8011ff6:	b2d2      	uxtb	r2, r2
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f000 f99c 	bl	8012338 <FileRankToSquare>
 8012000:	4603      	mov	r3, r0
 8012002:	76fb      	strb	r3, [r7, #27]
				if(datamain[sq]==0){  // nếu ô quét chưa thấy piece nào thì tiến hành đo đạc
 8012004:	7efb      	ldrb	r3, [r7, #27]
 8012006:	4a62      	ldr	r2, [pc, #392]	; (8012190 <Scan+0x25c>)
 8012008:	5cd3      	ldrb	r3, [r2, r3]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d108      	bne.n	8012020 <Scan+0xec>
					Measure(type,outCoil,readCoil);
 801200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012010:	b2db      	uxtb	r3, r3
 8012012:	6a3a      	ldr	r2, [r7, #32]
 8012014:	b2d1      	uxtb	r1, r2
 8012016:	69fa      	ldr	r2, [r7, #28]
 8012018:	b2d2      	uxtb	r2, r2
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fe3c 	bl	8011c98 <Measure>
			for(int k=0;k<8;k++){
 8012020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012022:	3301      	adds	r3, #1
 8012024:	633b      	str	r3, [r7, #48]	; 0x30
 8012026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012028:	2b07      	cmp	r3, #7
 801202a:	ddd0      	ble.n	8011fce <Scan+0x9a>
		for(int j=0;j<8;j++){
 801202c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801202e:	3301      	adds	r3, #1
 8012030:	637b      	str	r3, [r7, #52]	; 0x34
 8012032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012034:	2b07      	cmp	r3, #7
 8012036:	ddc2      	ble.n	8011fbe <Scan+0x8a>
				}
			}
		}
		// edit new
		int8_t sqDetects[10]={-5,-5,-5,-5,-5,-5,-5,-5,-5,-5}; // mảng các ô có pulseLength > MinValue và có period nằm trong ngưỡng detect
 8012038:	4a5a      	ldr	r2, [pc, #360]	; (80121a4 <Scan+0x270>)
 801203a:	f107 0310 	add.w	r3, r7, #16
 801203e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012040:	c303      	stmia	r3!, {r0, r1}
 8012042:	801a      	strh	r2, [r3, #0]
		uint8_t lengthValid =0; // số lượng các ô hợp lệ
 8012044:	2300      	movs	r3, #0
 8012046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		/* tìm các ô có pulseLength và period hợp lệ  */
		for (int8_t sq = 0; sq < 64; sq++) {
 801204a:	2300      	movs	r3, #0
 801204c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8012050:	e049      	b.n	80120e6 <Scan+0x1b2>
			// số xung phải lớn hơn ngưỡng calibase
			if (datapieces[type][sq][PULSES] >= getMarkSq(type, sq)) {// period phải nằm trong khoảng của type piece
 8012052:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012056:	494f      	ldr	r1, [pc, #316]	; (8012194 <Scan+0x260>)
 8012058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801205a:	0192      	lsls	r2, r2, #6
 801205c:	4413      	add	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	440b      	add	r3, r1
 8012062:	885c      	ldrh	r4, [r3, #2]
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	b2db      	uxtb	r3, r3
 8012068:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f000 fb4e 	bl	8012710 <getMarkSq>
 8012074:	4603      	mov	r3, r0
 8012076:	b29b      	uxth	r3, r3
 8012078:	429c      	cmp	r4, r3
 801207a:	d32d      	bcc.n	80120d8 <Scan+0x1a4>
				if (datapieces[type][sq][PERIOD] <= mark_period[type] && datapieces[type][sq][PERIOD] > mark_period[type + 1])
 801207c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8012080:	4944      	ldr	r1, [pc, #272]	; (8012194 <Scan+0x260>)
 8012082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012084:	0192      	lsls	r2, r2, #6
 8012086:	4413      	add	r3, r2
 8012088:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 801208c:	4946      	ldr	r1, [pc, #280]	; (80121a8 <Scan+0x274>)
 801208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012090:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012094:	429a      	cmp	r2, r3
 8012096:	d81f      	bhi.n	80120d8 <Scan+0x1a4>
 8012098:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801209c:	493d      	ldr	r1, [pc, #244]	; (8012194 <Scan+0x260>)
 801209e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120a0:	0192      	lsls	r2, r2, #6
 80120a2:	4413      	add	r3, r2
 80120a4:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 80120a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120aa:	3301      	adds	r3, #1
 80120ac:	493e      	ldr	r1, [pc, #248]	; (80121a8 <Scan+0x274>)
 80120ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d910      	bls.n	80120d8 <Scan+0x1a4>
				{
					sqDetects[lengthValid] = sq;
 80120b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ba:	3348      	adds	r3, #72	; 0x48
 80120bc:	443b      	add	r3, r7
 80120be:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80120c2:	f803 2c38 	strb.w	r2, [r3, #-56]
					lengthValid++;
 80120c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ca:	3301      	adds	r3, #1
 80120cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 80120d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120d4:	2b0a      	cmp	r3, #10
 80120d6:	d80b      	bhi.n	80120f0 <Scan+0x1bc>
		for (int8_t sq = 0; sq < 64; sq++) {
 80120d8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	3301      	adds	r3, #1
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80120e6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80120ea:	2b3f      	cmp	r3, #63	; 0x3f
 80120ec:	ddb1      	ble.n	8012052 <Scan+0x11e>
 80120ee:	e000      	b.n	80120f2 <Scan+0x1be>
					if(lengthValid > 10) break; // nếu có lớn hơn 10 ô hợp lệ thì break
 80120f0:	bf00      	nop
				}
			}
		}
		/* nếu có 1 ô hợp lệ thì đó là piece  */
		if(lengthValid==1)
 80120f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d108      	bne.n	801210c <Scan+0x1d8>
		{
			datamain[sqDetects[0]]=type+1;
 80120fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8012102:	3301      	adds	r3, #1
 8012104:	b2d9      	uxtb	r1, r3
 8012106:	4b22      	ldr	r3, [pc, #136]	; (8012190 <Scan+0x25c>)
 8012108:	5499      	strb	r1, [r3, r2]
 801210a:	e0fb      	b.n	8012304 <Scan+0x3d0>
		}else if(lengthValid > 1)	// tìm ra 2 ô có giá trị lớn nhất
 801210c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012110:	2b01      	cmp	r3, #1
 8012112:	f240 80f7 	bls.w	8012304 <Scan+0x3d0>
		{
			SQData firstMax,secondMax;
			firstMax.pulses=-1;firstMax.square=-1;
 8012116:	23ff      	movs	r3, #255	; 0xff
 8012118:	733b      	strb	r3, [r7, #12]
 801211a:	23ff      	movs	r3, #255	; 0xff
 801211c:	737b      	strb	r3, [r7, #13]
			secondMax.pulses=-2;secondMax.square=-2;
 801211e:	23fe      	movs	r3, #254	; 0xfe
 8012120:	723b      	strb	r3, [r7, #8]
 8012122:	23fe      	movs	r3, #254	; 0xfe
 8012124:	727b      	strb	r3, [r7, #9]

			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 8012126:	2300      	movs	r3, #0
 8012128:	62bb      	str	r3, [r7, #40]	; 0x28
 801212a:	e06c      	b.n	8012206 <Scan+0x2d2>
			{
				if(datapieces[type][sqDetects[v]][PULSES] >= firstMax.pulses)
 801212c:	f107 0210 	add.w	r2, r7, #16
 8012130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012132:	4413      	add	r3, r2
 8012134:	f993 3000 	ldrsb.w	r3, [r3]
 8012138:	4619      	mov	r1, r3
 801213a:	4a16      	ldr	r2, [pc, #88]	; (8012194 <Scan+0x260>)
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	019b      	lsls	r3, r3, #6
 8012140:	440b      	add	r3, r1
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	4413      	add	r3, r2
 8012146:	885b      	ldrh	r3, [r3, #2]
 8012148:	461a      	mov	r2, r3
 801214a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801214e:	429a      	cmp	r2, r3
 8012150:	db2c      	blt.n	80121ac <Scan+0x278>
				{
					secondMax.pulses = firstMax.pulses;
 8012152:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012156:	723b      	strb	r3, [r7, #8]
					secondMax.square = firstMax.square;
 8012158:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801215c:	727b      	strb	r3, [r7, #9]
					firstMax.pulses  = datapieces[type][sqDetects[v]][PULSES];
 801215e:	f107 0210 	add.w	r2, r7, #16
 8012162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012164:	4413      	add	r3, r2
 8012166:	f993 3000 	ldrsb.w	r3, [r3]
 801216a:	4619      	mov	r1, r3
 801216c:	4a09      	ldr	r2, [pc, #36]	; (8012194 <Scan+0x260>)
 801216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012170:	019b      	lsls	r3, r3, #6
 8012172:	440b      	add	r3, r1
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	4413      	add	r3, r2
 8012178:	885b      	ldrh	r3, [r3, #2]
 801217a:	b25b      	sxtb	r3, r3
 801217c:	733b      	strb	r3, [r7, #12]
					firstMax.square = sqDetects[v];
 801217e:	f107 0210 	add.w	r2, r7, #16
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	4413      	add	r3, r2
 8012186:	f993 3000 	ldrsb.w	r3, [r3]
 801218a:	737b      	strb	r3, [r7, #13]
 801218c:	e038      	b.n	8012200 <Scan+0x2cc>
 801218e:	bf00      	nop
 8012190:	20008ea0 	.word	0x20008ea0
 8012194:	20007ca0 	.word	0x20007ca0
 8012198:	080133d0 	.word	0x080133d0
 801219c:	080133e4 	.word	0x080133e4
 80121a0:	20007c4c 	.word	0x20007c4c
 80121a4:	0801330c 	.word	0x0801330c
 80121a8:	08013370 	.word	0x08013370
				}else if(datapieces[type][sqDetects[v]][PULSES] >= secondMax.pulses){
 80121ac:	f107 0210 	add.w	r2, r7, #16
 80121b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b2:	4413      	add	r3, r2
 80121b4:	f993 3000 	ldrsb.w	r3, [r3]
 80121b8:	4619      	mov	r1, r3
 80121ba:	4a5c      	ldr	r2, [pc, #368]	; (801232c <Scan+0x3f8>)
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	019b      	lsls	r3, r3, #6
 80121c0:	440b      	add	r3, r1
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4413      	add	r3, r2
 80121c6:	885b      	ldrh	r3, [r3, #2]
 80121c8:	461a      	mov	r2, r3
 80121ca:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	db16      	blt.n	8012200 <Scan+0x2cc>
					secondMax.pulses = datapieces[type][sqDetects[v]][PULSES];
 80121d2:	f107 0210 	add.w	r2, r7, #16
 80121d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d8:	4413      	add	r3, r2
 80121da:	f993 3000 	ldrsb.w	r3, [r3]
 80121de:	4619      	mov	r1, r3
 80121e0:	4a52      	ldr	r2, [pc, #328]	; (801232c <Scan+0x3f8>)
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	019b      	lsls	r3, r3, #6
 80121e6:	440b      	add	r3, r1
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4413      	add	r3, r2
 80121ec:	885b      	ldrh	r3, [r3, #2]
 80121ee:	b25b      	sxtb	r3, r3
 80121f0:	723b      	strb	r3, [r7, #8]
					secondMax.square = sqDetects[v];
 80121f2:	f107 0210 	add.w	r2, r7, #16
 80121f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f8:	4413      	add	r3, r2
 80121fa:	f993 3000 	ldrsb.w	r3, [r3]
 80121fe:	727b      	strb	r3, [r7, #9]
			for(int v=0;v<lengthValid;v++) // lặp lại tất cả các giá trị
 8012200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012202:	3301      	adds	r3, #1
 8012204:	62bb      	str	r3, [r7, #40]	; 0x28
 8012206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801220a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801220c:	429a      	cmp	r2, r3
 801220e:	db8d      	blt.n	801212c <Scan+0x1f8>
				}
			}
			/* nếu type là King thì chỉ chọn firstMax là ô có piece */
			/* nếu không thì kiểm tra xem 2 ô có phải là 2 ô liền kề hay không
			 * 4 ô liền kề với ô firstMax là : (sq+1;sq-1;sq+8;sq-8) */
			if(type == 0 || type==5)
 8012210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012212:	2b00      	cmp	r3, #0
 8012214:	d002      	beq.n	801221c <Scan+0x2e8>
 8012216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012218:	2b05      	cmp	r3, #5
 801221a:	d10c      	bne.n	8012236 <Scan+0x302>
			{
				if(firstMax.square >=0)
 801221c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012220:	2b00      	cmp	r3, #0
 8012222:	db6f      	blt.n	8012304 <Scan+0x3d0>
				{
					datamain[firstMax.square] = type+1;
 8012224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012226:	b2db      	uxtb	r3, r3
 8012228:	f997 200d 	ldrsb.w	r2, [r7, #13]
 801222c:	3301      	adds	r3, #1
 801222e:	b2d9      	uxtb	r1, r3
 8012230:	4b3f      	ldr	r3, [pc, #252]	; (8012330 <Scan+0x3fc>)
 8012232:	5499      	strb	r1, [r3, r2]
				if(firstMax.square >=0)
 8012234:	e066      	b.n	8012304 <Scan+0x3d0>
				}
			}
			else if(secondMax.square==firstMax.square+1 || secondMax.square==firstMax.square-1
 8012236:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801223a:	461a      	mov	r2, r3
 801223c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012240:	3301      	adds	r3, #1
 8012242:	429a      	cmp	r2, r3
 8012244:	d017      	beq.n	8012276 <Scan+0x342>
 8012246:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801224a:	461a      	mov	r2, r3
 801224c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012250:	3b01      	subs	r3, #1
 8012252:	429a      	cmp	r2, r3
 8012254:	d00f      	beq.n	8012276 <Scan+0x342>
					|| secondMax.square==firstMax.square+8 || secondMax.square==firstMax.square-8) // là ô liền kề
 8012256:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801225a:	461a      	mov	r2, r3
 801225c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012260:	3308      	adds	r3, #8
 8012262:	429a      	cmp	r2, r3
 8012264:	d007      	beq.n	8012276 <Scan+0x342>
 8012266:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801226a:	461a      	mov	r2, r3
 801226c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012270:	3b08      	subs	r3, #8
 8012272:	429a      	cmp	r2, r3
 8012274:	d136      	bne.n	80122e4 <Scan+0x3b0>
			{
				/* kiểm tra giá trị pulses của secondMax có >= firstMax*2/3 hay không
				 * nếu vượt ngưỡng đó thì nó là 1 Piece không thì đó là nhiễu */
				if(datapieces[type][secondMax.square][PULSES] >= datapieces[type][firstMax.square][PULSES]*2/3){
 8012276:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801227a:	4619      	mov	r1, r3
 801227c:	4a2b      	ldr	r2, [pc, #172]	; (801232c <Scan+0x3f8>)
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	019b      	lsls	r3, r3, #6
 8012282:	440b      	add	r3, r1
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	4413      	add	r3, r2
 8012288:	885b      	ldrh	r3, [r3, #2]
 801228a:	4619      	mov	r1, r3
 801228c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012290:	4618      	mov	r0, r3
 8012292:	4a26      	ldr	r2, [pc, #152]	; (801232c <Scan+0x3f8>)
 8012294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012296:	019b      	lsls	r3, r3, #6
 8012298:	4403      	add	r3, r0
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4413      	add	r3, r2
 801229e:	885b      	ldrh	r3, [r3, #2]
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	4a24      	ldr	r2, [pc, #144]	; (8012334 <Scan+0x400>)
 80122a4:	fb82 0203 	smull	r0, r2, r2, r3
 80122a8:	17db      	asrs	r3, r3, #31
 80122aa:	1ad3      	subs	r3, r2, r3
 80122ac:	4299      	cmp	r1, r3
 80122ae:	db10      	blt.n	80122d2 <Scan+0x39e>
					datamain[firstMax.square]=type+1;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80122b8:	3301      	adds	r3, #1
 80122ba:	b2d9      	uxtb	r1, r3
 80122bc:	4b1c      	ldr	r3, [pc, #112]	; (8012330 <Scan+0x3fc>)
 80122be:	5499      	strb	r1, [r3, r2]
					datamain[secondMax.square]=type+1;
 80122c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	f997 2009 	ldrsb.w	r2, [r7, #9]
 80122c8:	3301      	adds	r3, #1
 80122ca:	b2d9      	uxtb	r1, r3
 80122cc:	4b18      	ldr	r3, [pc, #96]	; (8012330 <Scan+0x3fc>)
 80122ce:	5499      	strb	r1, [r3, r2]
				if(datapieces[type][secondMax.square][PULSES] >= datapieces[type][firstMax.square][PULSES]*2/3){
 80122d0:	e018      	b.n	8012304 <Scan+0x3d0>
				}else		// nếu không thì chỉ có 1 ô first là piece
				{
					datamain[firstMax.square]=type+1;
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80122da:	3301      	adds	r3, #1
 80122dc:	b2d9      	uxtb	r1, r3
 80122de:	4b14      	ldr	r3, [pc, #80]	; (8012330 <Scan+0x3fc>)
 80122e0:	5499      	strb	r1, [r3, r2]
				if(datapieces[type][secondMax.square][PULSES] >= datapieces[type][firstMax.square][PULSES]*2/3){
 80122e2:	e00f      	b.n	8012304 <Scan+0x3d0>
				}
			}
			else	// nếu không phải là 2 ô liền kề thì cả 2 ô đều là Piece
			{
				datamain[firstMax.square] = type+1;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80122ec:	3301      	adds	r3, #1
 80122ee:	b2d9      	uxtb	r1, r3
 80122f0:	4b0f      	ldr	r3, [pc, #60]	; (8012330 <Scan+0x3fc>)
 80122f2:	5499      	strb	r1, [r3, r2]
				datamain[secondMax.square] = type+1;
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	f997 2009 	ldrsb.w	r2, [r7, #9]
 80122fc:	3301      	adds	r3, #1
 80122fe:	b2d9      	uxtb	r1, r3
 8012300:	4b0b      	ldr	r3, [pc, #44]	; (8012330 <Scan+0x3fc>)
 8012302:	5499      	strb	r1, [r3, r2]
	for(int i=0;i<18;i++){
 8012304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012306:	3301      	adds	r3, #1
 8012308:	63bb      	str	r3, [r7, #56]	; 0x38
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	2b11      	cmp	r3, #17
 801230e:	f77f ae4a 	ble.w	8011fa6 <Scan+0x72>
			}
		}
	}
	if(DetectFenChange()) return SCAN_FEN_CHANGE;
 8012312:	f000 f82b 	bl	801236c <DetectFenChange>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <Scan+0x3ec>
 801231c:	2301      	movs	r3, #1
 801231e:	e000      	b.n	8012322 <Scan+0x3ee>
	return SCAN_NO_FEN_CHANGE;
 8012320:	2300      	movs	r3, #0
}
 8012322:	4618      	mov	r0, r3
 8012324:	374c      	adds	r7, #76	; 0x4c
 8012326:	46bd      	mov	sp, r7
 8012328:	bd90      	pop	{r4, r7, pc}
 801232a:	bf00      	nop
 801232c:	20007ca0 	.word	0x20007ca0
 8012330:	20008ea0 	.word	0x20008ea0
 8012334:	55555556 	.word	0x55555556

08012338 <FileRankToSquare>:


// file:1->8 rank:1->8 (file=outCoil , rank=readCoil)
uint8_t FileRankToSquare(uint8_t file,uint8_t rank)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	460a      	mov	r2, r1
 8012342:	71fb      	strb	r3, [r7, #7]
 8012344:	4613      	mov	r3, r2
 8012346:	71bb      	strb	r3, [r7, #6]
	return (8-file)*8 + rank-1;
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	f1c3 0308 	rsb	r3, r3, #8
 801234e:	b2db      	uxtb	r3, r3
 8012350:	00db      	lsls	r3, r3, #3
 8012352:	b2da      	uxtb	r2, r3
 8012354:	79bb      	ldrb	r3, [r7, #6]
 8012356:	4413      	add	r3, r2
 8012358:	b2db      	uxtb	r3, r3
 801235a:	3b01      	subs	r3, #1
 801235c:	b2db      	uxtb	r3, r3
}
 801235e:	4618      	mov	r0, r3
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
	...

0801236c <DetectFenChange>:

/* Tìm sự thay đổi của FEN */
bool DetectFenChange()
{
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
	bool resuft=false;
 8012372:	2300      	movs	r3, #0
 8012374:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<64;i++){
 8012376:	2300      	movs	r3, #0
 8012378:	603b      	str	r3, [r7, #0]
 801237a:	e017      	b.n	80123ac <DetectFenChange+0x40>
		if(datamain[i] != datamain_old[i]){
 801237c:	4a10      	ldr	r2, [pc, #64]	; (80123c0 <DetectFenChange+0x54>)
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	4413      	add	r3, r2
 8012382:	781a      	ldrb	r2, [r3, #0]
 8012384:	490f      	ldr	r1, [pc, #60]	; (80123c4 <DetectFenChange+0x58>)
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	440b      	add	r3, r1
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	429a      	cmp	r2, r3
 801238e:	d00a      	beq.n	80123a6 <DetectFenChange+0x3a>
			resuft = true;
 8012390:	2301      	movs	r3, #1
 8012392:	71fb      	strb	r3, [r7, #7]
			datamain_old[i] = datamain[i];
 8012394:	4a0a      	ldr	r2, [pc, #40]	; (80123c0 <DetectFenChange+0x54>)
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	4413      	add	r3, r2
 801239a:	7819      	ldrb	r1, [r3, #0]
 801239c:	4a09      	ldr	r2, [pc, #36]	; (80123c4 <DetectFenChange+0x58>)
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	4413      	add	r3, r2
 80123a2:	460a      	mov	r2, r1
 80123a4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	3301      	adds	r3, #1
 80123aa:	603b      	str	r3, [r7, #0]
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	2b3f      	cmp	r3, #63	; 0x3f
 80123b0:	dde4      	ble.n	801237c <DetectFenChange+0x10>
		}
	}
	return resuft;
 80123b2:	79fb      	ldrb	r3, [r7, #7]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	20008ea0 	.word	0x20008ea0
 80123c4:	20008ee0 	.word	0x20008ee0

080123c8 <StartTaskScanPiece>:
 * 		- các lệnh được gửi theo chu kỳ khoảng 500ms, nếu quá thời gian này (khoảng 1000ms) thì
 * 		   coi như đó là lệnh đầu tiên( trả về fulldata và scanpiece 1 lần sau đó)
 * 3_Review: mỗi lần nhận review
 * 		- board sẽ chỉ scan khi chessclock_side thay đổi sau đó trả về fulldata */

void StartTaskScanPiece(void const *argument) {
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 80123d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80123d4:	f7fc fb37 	bl	800ea46 <osDelay>
	ScanPiecesInit();
 80123d8:	f7ff fad2 	bl	8011980 <ScanPiecesInit>
	MB85RS_getPointSave();
 80123dc:	f7ff f8ce 	bl	801157c <MB85RS_getPointSave>
		//RoamingData();

		osDelay(1);
#else
#ifdef CALIBASE
		if (isCalibaseMode == true) {
 80123e0:	4b41      	ldr	r3, [pc, #260]	; (80124e8 <StartTaskScanPiece+0x120>)
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d008      	beq.n	80123fa <StartTaskScanPiece+0x32>
			Scan(false);
 80123e8:	2000      	movs	r0, #0
 80123ea:	f7ff fda3 	bl	8011f34 <Scan>
			UsbSendDataCalibase();
 80123ee:	f000 fe2d 	bl	801304c <UsbSendDataCalibase>
			osDelay(1);
 80123f2:	2001      	movs	r0, #1
 80123f4:	f7fc fb27 	bl	800ea46 <osDelay>
 80123f8:	e071      	b.n	80124de <StartTaskScanPiece+0x116>
		} else
#endif
		if (globalMode == MODE_REVIEW) {
 80123fa:	4b3c      	ldr	r3, [pc, #240]	; (80124ec <StartTaskScanPiece+0x124>)
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d12c      	bne.n	801245c <StartTaskScanPiece+0x94>
			SCANRESULT result = Scan(true);
 8012402:	2001      	movs	r0, #1
 8012404:	f7ff fd96 	bl	8011f34 <Scan>
 8012408:	4603      	mov	r3, r0
 801240a:	73bb      	strb	r3, [r7, #14]
			if (result == SCAN_FEN_CHANGE) {
 801240c:	7bbb      	ldrb	r3, [r7, #14]
 801240e:	2b01      	cmp	r3, #1
 8012410:	d103      	bne.n	801241a <StartTaskScanPiece+0x52>
				flagReviewFullData = true;
 8012412:	4b37      	ldr	r3, [pc, #220]	; (80124f0 <StartTaskScanPiece+0x128>)
 8012414:	2201      	movs	r2, #1
 8012416:	701a      	strb	r2, [r3, #0]
 8012418:	e01b      	b.n	8012452 <StartTaskScanPiece+0x8a>
			} else if (result == SCAN_NO_FEN_CHANGE) {
 801241a:	7bbb      	ldrb	r3, [r7, #14]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d103      	bne.n	8012428 <StartTaskScanPiece+0x60>
				flagReviewFullData = false;
 8012420:	4b33      	ldr	r3, [pc, #204]	; (80124f0 <StartTaskScanPiece+0x128>)
 8012422:	2200      	movs	r2, #0
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	e014      	b.n	8012452 <StartTaskScanPiece+0x8a>
			} else if (result == SCAN_SIDE_CHANGED) {
 8012428:	7bbb      	ldrb	r3, [r7, #14]
 801242a:	2b02      	cmp	r3, #2
 801242c:	d111      	bne.n	8012452 <StartTaskScanPiece+0x8a>
				LED_ON;
 801242e:	2201      	movs	r2, #1
 8012430:	2104      	movs	r1, #4
 8012432:	4830      	ldr	r0, [pc, #192]	; (80124f4 <StartTaskScanPiece+0x12c>)
 8012434:	f7f0 fc14 	bl	8002c60 <HAL_GPIO_WritePin>
				Scan(false); // scanpiece không ngắt bởi clockside
 8012438:	2000      	movs	r0, #0
 801243a:	f7ff fd7b 	bl	8011f34 <Scan>
				flagReviewFullData = true;
 801243e:	4b2c      	ldr	r3, [pc, #176]	; (80124f0 <StartTaskScanPiece+0x128>)
 8012440:	2201      	movs	r2, #1
 8012442:	701a      	strb	r2, [r3, #0]
				handlerMb85rs();
 8012444:	f7ff f9a0 	bl	8011788 <handlerMb85rs>
				LED_OFF;
 8012448:	2200      	movs	r2, #0
 801244a:	2104      	movs	r1, #4
 801244c:	4829      	ldr	r0, [pc, #164]	; (80124f4 <StartTaskScanPiece+0x12c>)
 801244e:	f7f0 fc07 	bl	8002c60 <HAL_GPIO_WritePin>
			}
			osDelay(500);
 8012452:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012456:	f7fc faf6 	bl	800ea46 <osDelay>
 801245a:	e040      	b.n	80124de <StartTaskScanPiece+0x116>
		} else if (globalMode == MODE_RECORDING) {
 801245c:	4b23      	ldr	r3, [pc, #140]	; (80124ec <StartTaskScanPiece+0x124>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	2b01      	cmp	r3, #1
 8012462:	d13c      	bne.n	80124de <StartTaskScanPiece+0x116>
			if (chessclock_interrup) {
 8012464:	4b24      	ldr	r3, [pc, #144]	; (80124f8 <StartTaskScanPiece+0x130>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d018      	beq.n	801249e <StartTaskScanPiece+0xd6>
				LED_ON;
 801246c:	2201      	movs	r2, #1
 801246e:	2104      	movs	r1, #4
 8012470:	4820      	ldr	r0, [pc, #128]	; (80124f4 <StartTaskScanPiece+0x12c>)
 8012472:	f7f0 fbf5 	bl	8002c60 <HAL_GPIO_WritePin>
				Scan(false);
 8012476:	2000      	movs	r0, #0
 8012478:	f7ff fd5c 	bl	8011f34 <Scan>
				chessclock_interrup = false;
 801247c:	4b1e      	ldr	r3, [pc, #120]	; (80124f8 <StartTaskScanPiece+0x130>)
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
				PushData(true);
 8012482:	2001      	movs	r0, #1
 8012484:	f000 f83c 	bl	8012500 <PushData>
				handlerMb85rs();
 8012488:	f7ff f97e 	bl	8011788 <handlerMb85rs>
				LED_OFF;
 801248c:	2200      	movs	r2, #0
 801248e:	2104      	movs	r1, #4
 8012490:	4818      	ldr	r0, [pc, #96]	; (80124f4 <StartTaskScanPiece+0x12c>)
 8012492:	f7f0 fbe5 	bl	8002c60 <HAL_GPIO_WritePin>
				tikReviewData = 0; 		//đặt lại biến đếm
 8012496:	4b19      	ldr	r3, [pc, #100]	; (80124fc <StartTaskScanPiece+0x134>)
 8012498:	2200      	movs	r2, #0
 801249a:	801a      	strh	r2, [r3, #0]
 801249c:	e01f      	b.n	80124de <StartTaskScanPiece+0x116>
			} else {
				tikReviewData++;
 801249e:	4b17      	ldr	r3, [pc, #92]	; (80124fc <StartTaskScanPiece+0x134>)
 80124a0:	881b      	ldrh	r3, [r3, #0]
 80124a2:	3301      	adds	r3, #1
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	4b15      	ldr	r3, [pc, #84]	; (80124fc <StartTaskScanPiece+0x134>)
 80124a8:	801a      	strh	r2, [r3, #0]
				if (tikReviewData > 2000) { // sau chu kỳ 1s sẽ tiến hành scan để lấy dữ liệu review
 80124aa:	4b14      	ldr	r3, [pc, #80]	; (80124fc <StartTaskScanPiece+0x134>)
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80124b2:	d914      	bls.n	80124de <StartTaskScanPiece+0x116>
					tikReviewData = 0;
 80124b4:	4b11      	ldr	r3, [pc, #68]	; (80124fc <StartTaskScanPiece+0x134>)
 80124b6:	2200      	movs	r2, #0
 80124b8:	801a      	strh	r2, [r3, #0]
					SCANRESULT result = Scan(true);
 80124ba:	2001      	movs	r0, #1
 80124bc:	f7ff fd3a 	bl	8011f34 <Scan>
 80124c0:	4603      	mov	r3, r0
 80124c2:	73fb      	strb	r3, [r7, #15]
					if (result != SCAN_SIDE_CHANGED) {
 80124c4:	7bfb      	ldrb	r3, [r7, #15]
 80124c6:	2b02      	cmp	r3, #2
 80124c8:	d003      	beq.n	80124d2 <StartTaskScanPiece+0x10a>
						flagReviewFullData = true;
 80124ca:	4b09      	ldr	r3, [pc, #36]	; (80124f0 <StartTaskScanPiece+0x128>)
 80124cc:	2201      	movs	r2, #1
 80124ce:	701a      	strb	r2, [r3, #0]
 80124d0:	e005      	b.n	80124de <StartTaskScanPiece+0x116>
					}else if (result == SCAN_SIDE_CHANGED) {
 80124d2:	7bfb      	ldrb	r3, [r7, #15]
 80124d4:	2b02      	cmp	r3, #2
 80124d6:	d102      	bne.n	80124de <StartTaskScanPiece+0x116>
						chessclock_interrup = true;  // đặt lại biến để tiến hành scan ở phần trên
 80124d8:	4b07      	ldr	r3, [pc, #28]	; (80124f8 <StartTaskScanPiece+0x130>)
 80124da:	2201      	movs	r2, #1
 80124dc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		osDelay(1);
 80124de:	2001      	movs	r0, #1
 80124e0:	f7fc fab1 	bl	800ea46 <osDelay>
		if (isCalibaseMode == true) {
 80124e4:	e77c      	b.n	80123e0 <StartTaskScanPiece+0x18>
 80124e6:	bf00      	nop
 80124e8:	200094cd 	.word	0x200094cd
 80124ec:	200094c5 	.word	0x200094c5
 80124f0:	200000ff 	.word	0x200000ff
 80124f4:	40020400 	.word	0x40020400
 80124f8:	20007c4c 	.word	0x20007c4c
 80124fc:	200094a0 	.word	0x200094a0

08012500 <PushData>:
#endif
	}
}

/* đẩy data vào queue */
void PushData(bool isClockChanged) {
 8012500:	b590      	push	{r4, r7, lr}
 8012502:	b089      	sub	sp, #36	; 0x24
 8012504:	af00      	add	r7, sp, #0
 8012506:	4603      	mov	r3, r0
 8012508:	71fb      	strb	r3, [r7, #7]
	uint8_t pieceA, pieceB, pie = 0;
 801250a:	2300      	movs	r3, #0
 801250c:	77fb      	strb	r3, [r7, #31]
	uint16_t crc;

	int8_t rear = QueueGetRear();
 801250e:	f7ff f94f 	bl	80117b0 <QueueGetRear>
 8012512:	4603      	mov	r3, r0
 8012514:	74fb      	strb	r3, [r7, #19]
	queueData[rear][0] = CMD_BEGIN;
 8012516:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801251a:	4a59      	ldr	r2, [pc, #356]	; (8012680 <PushData+0x180>)
 801251c:	2135      	movs	r1, #53	; 0x35
 801251e:	fb01 f303 	mul.w	r3, r1, r3
 8012522:	4413      	add	r3, r2
 8012524:	223a      	movs	r2, #58	; 0x3a
 8012526:	701a      	strb	r2, [r3, #0]
	queueData[rear][1] = ADDRESSBOARD_PART0;
 8012528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801252c:	4a54      	ldr	r2, [pc, #336]	; (8012680 <PushData+0x180>)
 801252e:	2135      	movs	r1, #53	; 0x35
 8012530:	fb01 f303 	mul.w	r3, r1, r3
 8012534:	4413      	add	r3, r2
 8012536:	3301      	adds	r3, #1
 8012538:	2200      	movs	r2, #0
 801253a:	701a      	strb	r2, [r3, #0]
	queueData[rear][2] = ADDRESSBOARD_PART1;
 801253c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012540:	4a4f      	ldr	r2, [pc, #316]	; (8012680 <PushData+0x180>)
 8012542:	2135      	movs	r1, #53	; 0x35
 8012544:	fb01 f303 	mul.w	r3, r1, r3
 8012548:	4413      	add	r3, r2
 801254a:	3302      	adds	r3, #2
 801254c:	2200      	movs	r2, #0
 801254e:	701a      	strb	r2, [r3, #0]
	queueData[rear][3] = ADDRESSBOARD_PART2;
 8012550:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012554:	4a4a      	ldr	r2, [pc, #296]	; (8012680 <PushData+0x180>)
 8012556:	2135      	movs	r1, #53	; 0x35
 8012558:	fb01 f303 	mul.w	r3, r1, r3
 801255c:	4413      	add	r3, r2
 801255e:	3303      	adds	r3, #3
 8012560:	2205      	movs	r2, #5
 8012562:	701a      	strb	r2, [r3, #0]
	if (isClockChanged) {
 8012564:	79fb      	ldrb	r3, [r7, #7]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00a      	beq.n	8012580 <PushData+0x80>
		queueData[rear][4] = RES_DATACLOCKCHANGE;
 801256a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801256e:	4a44      	ldr	r2, [pc, #272]	; (8012680 <PushData+0x180>)
 8012570:	2135      	movs	r1, #53	; 0x35
 8012572:	fb01 f303 	mul.w	r3, r1, r3
 8012576:	4413      	add	r3, r2
 8012578:	3304      	adds	r3, #4
 801257a:	2239      	movs	r2, #57	; 0x39
 801257c:	701a      	strb	r2, [r3, #0]
 801257e:	e009      	b.n	8012594 <PushData+0x94>
	} else {
		queueData[rear][4] = RES_DATAFENCHANGE;
 8012580:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012584:	4a3e      	ldr	r2, [pc, #248]	; (8012680 <PushData+0x180>)
 8012586:	2135      	movs	r1, #53	; 0x35
 8012588:	fb01 f303 	mul.w	r3, r1, r3
 801258c:	4413      	add	r3, r2
 801258e:	3304      	adds	r3, #4
 8012590:	2238      	movs	r2, #56	; 0x38
 8012592:	701a      	strb	r2, [r3, #0]
	}

	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 8012594:	2300      	movs	r3, #0
 8012596:	61bb      	str	r3, [r7, #24]
 8012598:	e02a      	b.n	80125f0 <PushData+0xf0>
		pieceA = byteToPiece(datamain_old[pie]);
 801259a:	7ffb      	ldrb	r3, [r7, #31]
 801259c:	4a39      	ldr	r2, [pc, #228]	; (8012684 <PushData+0x184>)
 801259e:	5cd3      	ldrb	r3, [r2, r3]
 80125a0:	4618      	mov	r0, r3
 80125a2:	f000 f9c3 	bl	801292c <byteToPiece>
 80125a6:	4603      	mov	r3, r0
 80125a8:	73fb      	strb	r3, [r7, #15]
		pie++;
 80125aa:	7ffb      	ldrb	r3, [r7, #31]
 80125ac:	3301      	adds	r3, #1
 80125ae:	77fb      	strb	r3, [r7, #31]
		pieceB = byteToPiece(datamain_old[pie]);
 80125b0:	7ffb      	ldrb	r3, [r7, #31]
 80125b2:	4a34      	ldr	r2, [pc, #208]	; (8012684 <PushData+0x184>)
 80125b4:	5cd3      	ldrb	r3, [r2, r3]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 f9b8 	bl	801292c <byteToPiece>
 80125bc:	4603      	mov	r3, r0
 80125be:	73bb      	strb	r3, [r7, #14]
		pie++;
 80125c0:	7ffb      	ldrb	r3, [r7, #31]
 80125c2:	3301      	adds	r3, #1
 80125c4:	77fb      	strb	r3, [r7, #31]
		queueData[rear][i + 5] = (pieceA << 4) + pieceB;
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
 80125c8:	011b      	lsls	r3, r3, #4
 80125ca:	b2d8      	uxtb	r0, r3
 80125cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	3305      	adds	r3, #5
 80125d4:	7bb9      	ldrb	r1, [r7, #14]
 80125d6:	4401      	add	r1, r0
 80125d8:	b2cc      	uxtb	r4, r1
 80125da:	4929      	ldr	r1, [pc, #164]	; (8012680 <PushData+0x180>)
 80125dc:	2035      	movs	r0, #53	; 0x35
 80125de:	fb00 f202 	mul.w	r2, r0, r2
 80125e2:	440a      	add	r2, r1
 80125e4:	4413      	add	r3, r2
 80125e6:	4622      	mov	r2, r4
 80125e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	3301      	adds	r3, #1
 80125ee:	61bb      	str	r3, [r7, #24]
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	2b1f      	cmp	r3, #31
 80125f4:	ddd1      	ble.n	801259a <PushData+0x9a>
	}
	for (int i = 0; i < 14; i++) {
 80125f6:	2300      	movs	r3, #0
 80125f8:	617b      	str	r3, [r7, #20]
 80125fa:	e012      	b.n	8012622 <PushData+0x122>
		queueData[rear][37 + i] = data_chessclock[i];
 80125fc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	3325      	adds	r3, #37	; 0x25
 8012604:	4820      	ldr	r0, [pc, #128]	; (8012688 <PushData+0x188>)
 8012606:	6979      	ldr	r1, [r7, #20]
 8012608:	4401      	add	r1, r0
 801260a:	780c      	ldrb	r4, [r1, #0]
 801260c:	491c      	ldr	r1, [pc, #112]	; (8012680 <PushData+0x180>)
 801260e:	2035      	movs	r0, #53	; 0x35
 8012610:	fb00 f202 	mul.w	r2, r0, r2
 8012614:	440a      	add	r2, r1
 8012616:	4413      	add	r3, r2
 8012618:	4622      	mov	r2, r4
 801261a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 14; i++) {
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	3301      	adds	r3, #1
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b0d      	cmp	r3, #13
 8012626:	dde9      	ble.n	80125fc <PushData+0xfc>
	}
	crc = CalculateCRC(queueData[rear], 1, 50);
 8012628:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801262c:	2235      	movs	r2, #53	; 0x35
 801262e:	fb02 f303 	mul.w	r3, r2, r3
 8012632:	4a13      	ldr	r2, [pc, #76]	; (8012680 <PushData+0x180>)
 8012634:	4413      	add	r3, r2
 8012636:	2232      	movs	r2, #50	; 0x32
 8012638:	2101      	movs	r1, #1
 801263a:	4618      	mov	r0, r3
 801263c:	f000 f826 	bl	801268c <CalculateCRC>
 8012640:	4603      	mov	r3, r0
 8012642:	823b      	strh	r3, [r7, #16]
	queueData[rear][51] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012644:	8a3b      	ldrh	r3, [r7, #16]
 8012646:	0a1b      	lsrs	r3, r3, #8
 8012648:	b29a      	uxth	r2, r3
 801264a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801264e:	b2d0      	uxtb	r0, r2
 8012650:	4a0b      	ldr	r2, [pc, #44]	; (8012680 <PushData+0x180>)
 8012652:	2135      	movs	r1, #53	; 0x35
 8012654:	fb01 f303 	mul.w	r3, r1, r3
 8012658:	4413      	add	r3, r2
 801265a:	3333      	adds	r3, #51	; 0x33
 801265c:	4602      	mov	r2, r0
 801265e:	701a      	strb	r2, [r3, #0]
	queueData[rear][52] = (uint8_t) (crc & 0x00FF);
 8012660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012664:	8a3a      	ldrh	r2, [r7, #16]
 8012666:	b2d0      	uxtb	r0, r2
 8012668:	4a05      	ldr	r2, [pc, #20]	; (8012680 <PushData+0x180>)
 801266a:	2135      	movs	r1, #53	; 0x35
 801266c:	fb01 f303 	mul.w	r3, r1, r3
 8012670:	4413      	add	r3, r2
 8012672:	3334      	adds	r3, #52	; 0x34
 8012674:	4602      	mov	r2, r0
 8012676:	701a      	strb	r2, [r3, #0]
}
 8012678:	bf00      	nop
 801267a:	3724      	adds	r7, #36	; 0x24
 801267c:	46bd      	mov	sp, r7
 801267e:	bd90      	pop	{r4, r7, pc}
 8012680:	2000907c 	.word	0x2000907c
 8012684:	20008ee0 	.word	0x20008ee0
 8012688:	20007c50 	.word	0x20007c50

0801268c <CalculateCRC>:
{
	return ((uint32_t)byteA)*64516 +  ((uint32_t)byteB)*254 +  (uint32_t)byteC;
}

uint16_t CalculateCRC(uint8_t* buffer,uint16_t offset,uint16_t count)
{
 801268c:	b480      	push	{r7}
 801268e:	b085      	sub	sp, #20
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	460b      	mov	r3, r1
 8012696:	807b      	strh	r3, [r7, #2]
 8012698:	4613      	mov	r3, r2
 801269a:	803b      	strh	r3, [r7, #0]
	uint16_t crc = 0xFFFF;
 801269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80126a0:	81fb      	strh	r3, [r7, #14]

	for(uint16_t j=offset;j<(count+offset);j++)
 80126a2:	887b      	ldrh	r3, [r7, #2]
 80126a4:	81bb      	strh	r3, [r7, #12]
 80126a6:	e026      	b.n	80126f6 <CalculateCRC+0x6a>
	{
		crc ^= (uint16_t)buffer[j];
 80126a8:	89bb      	ldrh	r3, [r7, #12]
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	4413      	add	r3, r2
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	89fb      	ldrh	r3, [r7, #14]
 80126b4:	4053      	eors	r3, r2
 80126b6:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 80126b8:	2300      	movs	r3, #0
 80126ba:	60bb      	str	r3, [r7, #8]
 80126bc:	e015      	b.n	80126ea <CalculateCRC+0x5e>
		{
			if ((crc & 0x0001) != 0)
 80126be:	89fb      	ldrh	r3, [r7, #14]
 80126c0:	f003 0301 	and.w	r3, r3, #1
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00a      	beq.n	80126de <CalculateCRC+0x52>
			{
				crc >>= 1;
 80126c8:	89fb      	ldrh	r3, [r7, #14]
 80126ca:	085b      	lsrs	r3, r3, #1
 80126cc:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80126ce:	89fb      	ldrh	r3, [r7, #14]
 80126d0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80126d4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80126d8:	43db      	mvns	r3, r3
 80126da:	81fb      	strh	r3, [r7, #14]
 80126dc:	e002      	b.n	80126e4 <CalculateCRC+0x58>
			}
			else
			{
				crc >>= 1;
 80126de:	89fb      	ldrh	r3, [r7, #14]
 80126e0:	085b      	lsrs	r3, r3, #1
 80126e2:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 80126e4:	68bb      	ldr	r3, [r7, #8]
 80126e6:	3301      	adds	r3, #1
 80126e8:	60bb      	str	r3, [r7, #8]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	2b07      	cmp	r3, #7
 80126ee:	dde6      	ble.n	80126be <CalculateCRC+0x32>
	for(uint16_t j=offset;j<(count+offset);j++)
 80126f0:	89bb      	ldrh	r3, [r7, #12]
 80126f2:	3301      	adds	r3, #1
 80126f4:	81bb      	strh	r3, [r7, #12]
 80126f6:	89ba      	ldrh	r2, [r7, #12]
 80126f8:	8839      	ldrh	r1, [r7, #0]
 80126fa:	887b      	ldrh	r3, [r7, #2]
 80126fc:	440b      	add	r3, r1
 80126fe:	429a      	cmp	r2, r3
 8012700:	dbd2      	blt.n	80126a8 <CalculateCRC+0x1c>
			}
		}
	}
	return crc;
 8012702:	89fb      	ldrh	r3, [r7, #14]
}
 8012704:	4618      	mov	r0, r3
 8012706:	3714      	adds	r7, #20
 8012708:	46bd      	mov	sp, r7
 801270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270e:	4770      	bx	lr

08012710 <getMarkSq>:
		18,10,10,10,10,10,10,10,	//3
		18,10,10,10,10,10,10,10,	//2
		5,10,10,10,10,10,10,5};	//1
//       a  b  c  d  e  f  g  h

uint8_t getMarkSq(uint8_t type,uint8_t squamark){
 8012710:	b480      	push	{r7}
 8012712:	b085      	sub	sp, #20
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	460a      	mov	r2, r1
 801271a:	71fb      	strb	r3, [r7, #7]
 801271c:	4613      	mov	r3, r2
 801271e:	71bb      	strb	r3, [r7, #6]
	uint8_t pulses_mark=0;
 8012720:	2300      	movs	r3, #0
 8012722:	73fb      	strb	r3, [r7, #15]
	switch(type){
 8012724:	79fb      	ldrb	r3, [r7, #7]
 8012726:	2b11      	cmp	r3, #17
 8012728:	f200 8082 	bhi.w	8012830 <getMarkSq+0x120>
 801272c:	a201      	add	r2, pc, #4	; (adr r2, 8012734 <getMarkSq+0x24>)
 801272e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012732:	bf00      	nop
 8012734:	0801277d 	.word	0x0801277d
 8012738:	08012787 	.word	0x08012787
 801273c:	08012791 	.word	0x08012791
 8012740:	0801279b 	.word	0x0801279b
 8012744:	080127a5 	.word	0x080127a5
 8012748:	080127af 	.word	0x080127af
 801274c:	080127b9 	.word	0x080127b9
 8012750:	080127c3 	.word	0x080127c3
 8012754:	080127cd 	.word	0x080127cd
 8012758:	080127d7 	.word	0x080127d7
 801275c:	080127e1 	.word	0x080127e1
 8012760:	080127eb 	.word	0x080127eb
 8012764:	080127f5 	.word	0x080127f5
 8012768:	080127ff 	.word	0x080127ff
 801276c:	08012809 	.word	0x08012809
 8012770:	08012813 	.word	0x08012813
 8012774:	0801281d 	.word	0x0801281d
 8012778:	08012827 	.word	0x08012827
	case 0:pulses_mark = mark_pulse0[squamark]; break;
 801277c:	79bb      	ldrb	r3, [r7, #6]
 801277e:	4a30      	ldr	r2, [pc, #192]	; (8012840 <getMarkSq+0x130>)
 8012780:	5cd3      	ldrb	r3, [r2, r3]
 8012782:	73fb      	strb	r3, [r7, #15]
 8012784:	e054      	b.n	8012830 <getMarkSq+0x120>
	case 1:pulses_mark = mark_pulse1[squamark]; break;
 8012786:	79bb      	ldrb	r3, [r7, #6]
 8012788:	4a2e      	ldr	r2, [pc, #184]	; (8012844 <getMarkSq+0x134>)
 801278a:	5cd3      	ldrb	r3, [r2, r3]
 801278c:	73fb      	strb	r3, [r7, #15]
 801278e:	e04f      	b.n	8012830 <getMarkSq+0x120>
	case 2:pulses_mark = mark_pulse2[squamark]; break;
 8012790:	79bb      	ldrb	r3, [r7, #6]
 8012792:	4a2d      	ldr	r2, [pc, #180]	; (8012848 <getMarkSq+0x138>)
 8012794:	5cd3      	ldrb	r3, [r2, r3]
 8012796:	73fb      	strb	r3, [r7, #15]
 8012798:	e04a      	b.n	8012830 <getMarkSq+0x120>
	case 3:pulses_mark = mark_pulse3[squamark]; break;
 801279a:	79bb      	ldrb	r3, [r7, #6]
 801279c:	4a2b      	ldr	r2, [pc, #172]	; (801284c <getMarkSq+0x13c>)
 801279e:	5cd3      	ldrb	r3, [r2, r3]
 80127a0:	73fb      	strb	r3, [r7, #15]
 80127a2:	e045      	b.n	8012830 <getMarkSq+0x120>
	case 4:pulses_mark = mark_pulse4[squamark]; break;
 80127a4:	79bb      	ldrb	r3, [r7, #6]
 80127a6:	4a2a      	ldr	r2, [pc, #168]	; (8012850 <getMarkSq+0x140>)
 80127a8:	5cd3      	ldrb	r3, [r2, r3]
 80127aa:	73fb      	strb	r3, [r7, #15]
 80127ac:	e040      	b.n	8012830 <getMarkSq+0x120>
	case 5:pulses_mark = mark_pulse5[squamark]; break;
 80127ae:	79bb      	ldrb	r3, [r7, #6]
 80127b0:	4a28      	ldr	r2, [pc, #160]	; (8012854 <getMarkSq+0x144>)
 80127b2:	5cd3      	ldrb	r3, [r2, r3]
 80127b4:	73fb      	strb	r3, [r7, #15]
 80127b6:	e03b      	b.n	8012830 <getMarkSq+0x120>
	case 6:pulses_mark = mark_pulse6[squamark]; break;
 80127b8:	79bb      	ldrb	r3, [r7, #6]
 80127ba:	4a27      	ldr	r2, [pc, #156]	; (8012858 <getMarkSq+0x148>)
 80127bc:	5cd3      	ldrb	r3, [r2, r3]
 80127be:	73fb      	strb	r3, [r7, #15]
 80127c0:	e036      	b.n	8012830 <getMarkSq+0x120>
	case 7:pulses_mark = mark_pulse7[squamark]; break;
 80127c2:	79bb      	ldrb	r3, [r7, #6]
 80127c4:	4a25      	ldr	r2, [pc, #148]	; (801285c <getMarkSq+0x14c>)
 80127c6:	5cd3      	ldrb	r3, [r2, r3]
 80127c8:	73fb      	strb	r3, [r7, #15]
 80127ca:	e031      	b.n	8012830 <getMarkSq+0x120>
	case 8:pulses_mark = mark_pulse8[squamark]; break;
 80127cc:	79bb      	ldrb	r3, [r7, #6]
 80127ce:	4a24      	ldr	r2, [pc, #144]	; (8012860 <getMarkSq+0x150>)
 80127d0:	5cd3      	ldrb	r3, [r2, r3]
 80127d2:	73fb      	strb	r3, [r7, #15]
 80127d4:	e02c      	b.n	8012830 <getMarkSq+0x120>
	case 9:pulses_mark = mark_pulse9[squamark]; break;
 80127d6:	79bb      	ldrb	r3, [r7, #6]
 80127d8:	4a22      	ldr	r2, [pc, #136]	; (8012864 <getMarkSq+0x154>)
 80127da:	5cd3      	ldrb	r3, [r2, r3]
 80127dc:	73fb      	strb	r3, [r7, #15]
 80127de:	e027      	b.n	8012830 <getMarkSq+0x120>
	case 10:pulses_mark = mark_pulse10[squamark]; break;
 80127e0:	79bb      	ldrb	r3, [r7, #6]
 80127e2:	4a21      	ldr	r2, [pc, #132]	; (8012868 <getMarkSq+0x158>)
 80127e4:	5cd3      	ldrb	r3, [r2, r3]
 80127e6:	73fb      	strb	r3, [r7, #15]
 80127e8:	e022      	b.n	8012830 <getMarkSq+0x120>
	case 11:pulses_mark = mark_pulse11[squamark]; break;
 80127ea:	79bb      	ldrb	r3, [r7, #6]
 80127ec:	4a1f      	ldr	r2, [pc, #124]	; (801286c <getMarkSq+0x15c>)
 80127ee:	5cd3      	ldrb	r3, [r2, r3]
 80127f0:	73fb      	strb	r3, [r7, #15]
 80127f2:	e01d      	b.n	8012830 <getMarkSq+0x120>
	case 12:pulses_mark = mark_pulse12[squamark]; break;
 80127f4:	79bb      	ldrb	r3, [r7, #6]
 80127f6:	4a1e      	ldr	r2, [pc, #120]	; (8012870 <getMarkSq+0x160>)
 80127f8:	5cd3      	ldrb	r3, [r2, r3]
 80127fa:	73fb      	strb	r3, [r7, #15]
 80127fc:	e018      	b.n	8012830 <getMarkSq+0x120>
	case 13:pulses_mark = mark_pulse13[squamark]; break;
 80127fe:	79bb      	ldrb	r3, [r7, #6]
 8012800:	4a1c      	ldr	r2, [pc, #112]	; (8012874 <getMarkSq+0x164>)
 8012802:	5cd3      	ldrb	r3, [r2, r3]
 8012804:	73fb      	strb	r3, [r7, #15]
 8012806:	e013      	b.n	8012830 <getMarkSq+0x120>
	case 14:pulses_mark = mark_pulse14[squamark]; break;
 8012808:	79bb      	ldrb	r3, [r7, #6]
 801280a:	4a1b      	ldr	r2, [pc, #108]	; (8012878 <getMarkSq+0x168>)
 801280c:	5cd3      	ldrb	r3, [r2, r3]
 801280e:	73fb      	strb	r3, [r7, #15]
 8012810:	e00e      	b.n	8012830 <getMarkSq+0x120>
	case 15:pulses_mark = mark_pulse15[squamark]; break;
 8012812:	79bb      	ldrb	r3, [r7, #6]
 8012814:	4a19      	ldr	r2, [pc, #100]	; (801287c <getMarkSq+0x16c>)
 8012816:	5cd3      	ldrb	r3, [r2, r3]
 8012818:	73fb      	strb	r3, [r7, #15]
 801281a:	e009      	b.n	8012830 <getMarkSq+0x120>
	case 16:pulses_mark = mark_pulse16[squamark]; break;
 801281c:	79bb      	ldrb	r3, [r7, #6]
 801281e:	4a18      	ldr	r2, [pc, #96]	; (8012880 <getMarkSq+0x170>)
 8012820:	5cd3      	ldrb	r3, [r2, r3]
 8012822:	73fb      	strb	r3, [r7, #15]
 8012824:	e004      	b.n	8012830 <getMarkSq+0x120>
	case 17:pulses_mark = mark_pulse17[squamark]; break;
 8012826:	79bb      	ldrb	r3, [r7, #6]
 8012828:	4a16      	ldr	r2, [pc, #88]	; (8012884 <getMarkSq+0x174>)
 801282a:	5cd3      	ldrb	r3, [r2, r3]
 801282c:	73fb      	strb	r3, [r7, #15]
 801282e:	bf00      	nop
	}
	return pulses_mark;
 8012830:	7bfb      	ldrb	r3, [r7, #15]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3714      	adds	r7, #20
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	0801382c 	.word	0x0801382c
 8012844:	080137ec 	.word	0x080137ec
 8012848:	080137ac 	.word	0x080137ac
 801284c:	0801376c 	.word	0x0801376c
 8012850:	0801372c 	.word	0x0801372c
 8012854:	080136ec 	.word	0x080136ec
 8012858:	080136ac 	.word	0x080136ac
 801285c:	0801366c 	.word	0x0801366c
 8012860:	0801362c 	.word	0x0801362c
 8012864:	080135ec 	.word	0x080135ec
 8012868:	080135ac 	.word	0x080135ac
 801286c:	0801356c 	.word	0x0801356c
 8012870:	0801352c 	.word	0x0801352c
 8012874:	080134ec 	.word	0x080134ec
 8012878:	080134ac 	.word	0x080134ac
 801287c:	0801346c 	.word	0x0801346c
 8012880:	0801342c 	.word	0x0801342c
 8012884:	080133ec 	.word	0x080133ec

08012888 <HAL_UARTEx_RxEventCallback>:
	uint8_t dataUsbCalibase[263];
	extern uint16_t datapieces[18][64][2];  	// 18-type 	64-square	2-period+length
	extern uint8_t datamain[64];				// chứa dữ liệu chính của pieces
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a0b      	ldr	r2, [pc, #44]	; (80128c8 <HAL_UARTEx_RxEventCallback+0x40>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d10f      	bne.n	80128be <HAL_UARTEx_RxEventCallback+0x36>
		uart1_data_length=Size;
 801289e:	887b      	ldrh	r3, [r7, #2]
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	4b0a      	ldr	r3, [pc, #40]	; (80128cc <HAL_UARTEx_RxEventCallback+0x44>)
 80128a4:	701a      	strb	r2, [r3, #0]
		AnalyserCMD(uart1_rx_buf,uart1_data_length, RS485);
 80128a6:	4b09      	ldr	r3, [pc, #36]	; (80128cc <HAL_UARTEx_RxEventCallback+0x44>)
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	2200      	movs	r2, #0
 80128ac:	4619      	mov	r1, r3
 80128ae:	4808      	ldr	r0, [pc, #32]	; (80128d0 <HAL_UARTEx_RxEventCallback+0x48>)
 80128b0:	f000 f8ae 	bl	8012a10 <AnalyserCMD>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 80128b4:	2220      	movs	r2, #32
 80128b6:	4906      	ldr	r1, [pc, #24]	; (80128d0 <HAL_UARTEx_RxEventCallback+0x48>)
 80128b8:	4806      	ldr	r0, [pc, #24]	; (80128d4 <HAL_UARTEx_RxEventCallback+0x4c>)
 80128ba:	f7f7 faf8 	bl	8009eae <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 80128be:	bf00      	nop
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	40011000 	.word	0x40011000
 80128cc:	200094c4 	.word	0x200094c4
 80128d0:	200094a4 	.word	0x200094a4
 80128d4:	200029d0 	.word	0x200029d0

080128d8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4a04      	ldr	r2, [pc, #16]	; (80128f8 <HAL_UART_ErrorCallback+0x20>)
 80128e6:	4293      	cmp	r3, r2
 80128e8:	d101      	bne.n	80128ee <HAL_UART_ErrorCallback+0x16>
		HAL_NVIC_SystemReset();
 80128ea:	f7ef fc14 	bl	8002116 <HAL_NVIC_SystemReset>
	}
}
 80128ee:	bf00      	nop
 80128f0:	3708      	adds	r7, #8
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	40011000 	.word	0x40011000

080128fc <initReceiverUart>:

void initReceiverUart(){
 80128fc:	b580      	push	{r7, lr}
 80128fe:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012900:	2220      	movs	r2, #32
 8012902:	4907      	ldr	r1, [pc, #28]	; (8012920 <initReceiverUart+0x24>)
 8012904:	4807      	ldr	r0, [pc, #28]	; (8012924 <initReceiverUart+0x28>)
 8012906:	f7f7 fad2 	bl	8009eae <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 801290a:	4b07      	ldr	r3, [pc, #28]	; (8012928 <initReceiverUart+0x2c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	4b05      	ldr	r3, [pc, #20]	; (8012928 <initReceiverUart+0x2c>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	f022 0208 	bic.w	r2, r2, #8
 8012918:	601a      	str	r2, [r3, #0]
}
 801291a:	bf00      	nop
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	200094a4 	.word	0x200094a4
 8012924:	200029d0 	.word	0x200029d0
 8012928:	20002a14 	.word	0x20002a14

0801292c <byteToPiece>:
 *  xxxx: 0->12 piece A
 *  yyyy: 0->12 piece B
 *  0:EMTY, 1:WKING, 2:WQUEEN, 3:WBISHOP, 4:WKNIGHT, 5:WROOK, 6:WPAWN,
 *  		7:BKING, 8:BQUEEN, 9:BBISHOP,10:BKNIGHT,11:BROOK,12:BPAWN.
 * 		*/
uint8_t byteToPiece(uint8_t piece){
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	4603      	mov	r3, r0
 8012934:	71fb      	strb	r3, [r7, #7]
	uint8_t pi;
	switch(piece){
 8012936:	79fb      	ldrb	r3, [r7, #7]
 8012938:	2b12      	cmp	r3, #18
 801293a:	d862      	bhi.n	8012a02 <byteToPiece+0xd6>
 801293c:	a201      	add	r2, pc, #4	; (adr r2, 8012944 <byteToPiece+0x18>)
 801293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012942:	bf00      	nop
 8012944:	08012991 	.word	0x08012991
 8012948:	08012997 	.word	0x08012997
 801294c:	0801299d 	.word	0x0801299d
 8012950:	080129a3 	.word	0x080129a3
 8012954:	080129a9 	.word	0x080129a9
 8012958:	080129af 	.word	0x080129af
 801295c:	080129b5 	.word	0x080129b5
 8012960:	080129bb 	.word	0x080129bb
 8012964:	080129c1 	.word	0x080129c1
 8012968:	080129c7 	.word	0x080129c7
 801296c:	080129cd 	.word	0x080129cd
 8012970:	080129d3 	.word	0x080129d3
 8012974:	080129d9 	.word	0x080129d9
 8012978:	080129df 	.word	0x080129df
 801297c:	080129e5 	.word	0x080129e5
 8012980:	080129eb 	.word	0x080129eb
 8012984:	080129f1 	.word	0x080129f1
 8012988:	080129f7 	.word	0x080129f7
 801298c:	080129fd 	.word	0x080129fd
	case 0: pi=EMTY;	break;
 8012990:	2300      	movs	r3, #0
 8012992:	73fb      	strb	r3, [r7, #15]
 8012994:	e035      	b.n	8012a02 <byteToPiece+0xd6>
	case 1: pi=WKING; 	break;
 8012996:	2301      	movs	r3, #1
 8012998:	73fb      	strb	r3, [r7, #15]
 801299a:	e032      	b.n	8012a02 <byteToPiece+0xd6>
	case 2: pi=WQUEEN; 	break;
 801299c:	2302      	movs	r3, #2
 801299e:	73fb      	strb	r3, [r7, #15]
 80129a0:	e02f      	b.n	8012a02 <byteToPiece+0xd6>
	case 3: pi=WBISHOP; break;
 80129a2:	2303      	movs	r3, #3
 80129a4:	73fb      	strb	r3, [r7, #15]
 80129a6:	e02c      	b.n	8012a02 <byteToPiece+0xd6>
	case 4: pi=WKNIGHT; break;
 80129a8:	2304      	movs	r3, #4
 80129aa:	73fb      	strb	r3, [r7, #15]
 80129ac:	e029      	b.n	8012a02 <byteToPiece+0xd6>
	case 5: pi=WROOK; 	break;
 80129ae:	2305      	movs	r3, #5
 80129b0:	73fb      	strb	r3, [r7, #15]
 80129b2:	e026      	b.n	8012a02 <byteToPiece+0xd6>
	case 6: pi=BKING; 	break;
 80129b4:	2307      	movs	r3, #7
 80129b6:	73fb      	strb	r3, [r7, #15]
 80129b8:	e023      	b.n	8012a02 <byteToPiece+0xd6>
	case 7: pi=BQUEEN; 	break;
 80129ba:	2308      	movs	r3, #8
 80129bc:	73fb      	strb	r3, [r7, #15]
 80129be:	e020      	b.n	8012a02 <byteToPiece+0xd6>
	case 8: pi=BBISHOP; break;
 80129c0:	2309      	movs	r3, #9
 80129c2:	73fb      	strb	r3, [r7, #15]
 80129c4:	e01d      	b.n	8012a02 <byteToPiece+0xd6>
	case 9: pi=BKNIGHT; break;
 80129c6:	230a      	movs	r3, #10
 80129c8:	73fb      	strb	r3, [r7, #15]
 80129ca:	e01a      	b.n	8012a02 <byteToPiece+0xd6>
	case 10:pi=BROOK; 	break;
 80129cc:	230b      	movs	r3, #11
 80129ce:	73fb      	strb	r3, [r7, #15]
 80129d0:	e017      	b.n	8012a02 <byteToPiece+0xd6>
	case 11:pi=BPAWN; 	break;
 80129d2:	230c      	movs	r3, #12
 80129d4:	73fb      	strb	r3, [r7, #15]
 80129d6:	e014      	b.n	8012a02 <byteToPiece+0xd6>
	case 12:pi=BPAWN; 	break;
 80129d8:	230c      	movs	r3, #12
 80129da:	73fb      	strb	r3, [r7, #15]
 80129dc:	e011      	b.n	8012a02 <byteToPiece+0xd6>
	case 13:pi=BPAWN; 	break;
 80129de:	230c      	movs	r3, #12
 80129e0:	73fb      	strb	r3, [r7, #15]
 80129e2:	e00e      	b.n	8012a02 <byteToPiece+0xd6>
	case 14:pi=BPAWN; 	break;
 80129e4:	230c      	movs	r3, #12
 80129e6:	73fb      	strb	r3, [r7, #15]
 80129e8:	e00b      	b.n	8012a02 <byteToPiece+0xd6>
	case 15:pi=WPAWN; 	break;
 80129ea:	2306      	movs	r3, #6
 80129ec:	73fb      	strb	r3, [r7, #15]
 80129ee:	e008      	b.n	8012a02 <byteToPiece+0xd6>
	case 16:pi=WPAWN; 	break;
 80129f0:	2306      	movs	r3, #6
 80129f2:	73fb      	strb	r3, [r7, #15]
 80129f4:	e005      	b.n	8012a02 <byteToPiece+0xd6>
	case 17:pi=WPAWN; 	break;
 80129f6:	2306      	movs	r3, #6
 80129f8:	73fb      	strb	r3, [r7, #15]
 80129fa:	e002      	b.n	8012a02 <byteToPiece+0xd6>
	case 18:pi=WPAWN; 	break;
 80129fc:	2306      	movs	r3, #6
 80129fe:	73fb      	strb	r3, [r7, #15]
 8012a00:	bf00      	nop
	}
	return pi;
 8012a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3714      	adds	r7, #20
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr

08012a10 <AnalyserCMD>:

/*phân tích dữ liệu nhận được */


void AnalyserCMD(uint8_t *data,uint8_t length,TypeConnection typeconnect )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	460b      	mov	r3, r1
 8012a1a:	70fb      	strb	r3, [r7, #3]
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	70bb      	strb	r3, [r7, #2]
	uint16_t crc;
	uint8_t crcval[2];
#ifdef CALIBASE
	if(data[0]==CMD_ENABLE_CALIBASE_MODE){ // Enable Calibase Mode
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b63      	cmp	r3, #99	; 0x63
 8012a26:	d106      	bne.n	8012a36 <AnalyserCMD+0x26>
		isCalibaseMode = true;
 8012a28:	4b7a      	ldr	r3, [pc, #488]	; (8012c14 <AnalyserCMD+0x204>)
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	701a      	strb	r2, [r3, #0]
		typeCalibaseConnect = typeconnect;
 8012a2e:	4a7a      	ldr	r2, [pc, #488]	; (8012c18 <AnalyserCMD+0x208>)
 8012a30:	78bb      	ldrb	r3, [r7, #2]
 8012a32:	7013      	strb	r3, [r2, #0]
 8012a34:	e033      	b.n	8012a9e <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_CALIBASE_SET_TYPE){  // Calibase Code: 'C' + 'Type'
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	2b43      	cmp	r3, #67	; 0x43
 8012a3c:	d104      	bne.n	8012a48 <AnalyserCMD+0x38>
		calibase_type = data[1];
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	785a      	ldrb	r2, [r3, #1]
 8012a42:	4b76      	ldr	r3, [pc, #472]	; (8012c1c <AnalyserCMD+0x20c>)
 8012a44:	701a      	strb	r2, [r3, #0]
 8012a46:	e02a      	b.n	8012a9e <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_SET_REAL_TIME){
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b54      	cmp	r3, #84	; 0x54
 8012a4e:	d119      	bne.n	8012a84 <AnalyserCMD+0x74>
		uint8_t datatime[6];
		for(int i=0;i<6;i++){
 8012a50:	2300      	movs	r3, #0
 8012a52:	617b      	str	r3, [r7, #20]
 8012a54:	e00d      	b.n	8012a72 <AnalyserCMD+0x62>
			datatime[i] = data[i+1];
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	687a      	ldr	r2, [r7, #4]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	7819      	ldrb	r1, [r3, #0]
 8012a60:	f107 0208 	add.w	r2, r7, #8
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	4413      	add	r3, r2
 8012a68:	460a      	mov	r2, r1
 8012a6a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<6;i++){
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	617b      	str	r3, [r7, #20]
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2b05      	cmp	r3, #5
 8012a76:	ddee      	ble.n	8012a56 <AnalyserCMD+0x46>
		}
		RTC_SetTime(datatime);
 8012a78:	f107 0308 	add.w	r3, r7, #8
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe ff21 	bl	80118c4 <RTC_SetTime>
 8012a82:	e00c      	b.n	8012a9e <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_READ_REAL_TIME){
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b74      	cmp	r3, #116	; 0x74
 8012a8a:	d102      	bne.n	8012a92 <AnalyserCMD+0x82>
		UsbSendDateTime();
 8012a8c:	f000 fab4 	bl	8012ff8 <UsbSendDateTime>
 8012a90:	e005      	b.n	8012a9e <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_FRAM_ERASE){
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b45      	cmp	r3, #69	; 0x45
 8012a98:	d101      	bne.n	8012a9e <AnalyserCMD+0x8e>
		MB85RS_erase();
 8012a9a:	f7fe fd1f 	bl	80114dc <MB85RS_erase>
	}
	if(isCalibaseMode) return;
 8012a9e:	4b5d      	ldr	r3, [pc, #372]	; (8012c14 <AnalyserCMD+0x204>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f040 80ac 	bne.w	8012c00 <AnalyserCMD+0x1f0>
#endif

	/* kiểm tra khớp địa chỉ */
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3301      	adds	r3, #1
 8012aac:	781b      	ldrb	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f040 80a8 	bne.w	8012c04 <AnalyserCMD+0x1f4>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	3302      	adds	r3, #2
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	f040 80a2 	bne.w	8012c04 <AnalyserCMD+0x1f4>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	3303      	adds	r3, #3
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	2b05      	cmp	r3, #5
 8012ac8:	f040 809c 	bne.w	8012c04 <AnalyserCMD+0x1f4>
	/* Kiểm tra CRC */
	if(length==7)	// các lệnh Get có độ dài 7byte
 8012acc:	78fb      	ldrb	r3, [r7, #3]
 8012ace:	2b07      	cmp	r3, #7
 8012ad0:	d11c      	bne.n	8012b0c <AnalyserCMD+0xfc>
	{
		crc = CalculateCRC(data, 1, 4);
 8012ad2:	2204      	movs	r2, #4
 8012ad4:	2101      	movs	r1, #1
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff fdd8 	bl	801268c <CalculateCRC>
 8012adc:	4603      	mov	r3, r0
 8012ade:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012ae0:	8a7b      	ldrh	r3, [r7, #18]
 8012ae2:	0a1b      	lsrs	r3, r3, #8
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	b2db      	uxtb	r3, r3
 8012ae8:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012aea:	8a7b      	ldrh	r3, [r7, #18]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012af0:	7c3a      	ldrb	r2, [r7, #16]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	3305      	adds	r3, #5
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	f040 8085 	bne.w	8012c08 <AnalyserCMD+0x1f8>
 8012afe:	7c7a      	ldrb	r2, [r7, #17]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	3306      	adds	r3, #6
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d01e      	beq.n	8012b48 <AnalyserCMD+0x138>
 8012b0a:	e07d      	b.n	8012c08 <AnalyserCMD+0x1f8>
	}else if(length==13) // lệnh Set Time RTC có độ dài 13 byte
 8012b0c:	78fb      	ldrb	r3, [r7, #3]
 8012b0e:	2b0d      	cmp	r3, #13
 8012b10:	d11a      	bne.n	8012b48 <AnalyserCMD+0x138>
	{
		crc = CalculateCRC(data, 1, 10);
 8012b12:	220a      	movs	r2, #10
 8012b14:	2101      	movs	r1, #1
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff fdb8 	bl	801268c <CalculateCRC>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012b20:	8a7b      	ldrh	r3, [r7, #18]
 8012b22:	0a1b      	lsrs	r3, r3, #8
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012b2a:	8a7b      	ldrh	r3, [r7, #18]
 8012b2c:	b2db      	uxtb	r3, r3
 8012b2e:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012b30:	7c3a      	ldrb	r2, [r7, #16]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	330b      	adds	r3, #11
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d167      	bne.n	8012c0c <AnalyserCMD+0x1fc>
 8012b3c:	7c7a      	ldrb	r2, [r7, #17]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	330c      	adds	r3, #12
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d161      	bne.n	8012c0c <AnalyserCMD+0x1fc>
	}

	if(data[4]==CMD_CHECKBOARD)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3304      	adds	r3, #4
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b31      	cmp	r3, #49	; 0x31
 8012b50:	d104      	bne.n	8012b5c <AnalyserCMD+0x14c>
	{
		Response_CheckAddress(typeconnect);
 8012b52:	78bb      	ldrb	r3, [r7, #2]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 f869 	bl	8012c2c <Response_CheckAddress>
 8012b5a:	e058      	b.n	8012c0e <AnalyserCMD+0x1fe>
	}else if(data[4]==CMD_GETBOARDREVIEW)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	3304      	adds	r3, #4
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	2b32      	cmp	r3, #50	; 0x32
 8012b64:	d118      	bne.n	8012b98 <AnalyserCMD+0x188>
	{
		globalMode  = MODE_REVIEW;
 8012b66:	4b2e      	ldr	r3, [pc, #184]	; (8012c20 <AnalyserCMD+0x210>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	701a      	strb	r2, [r3, #0]
		if(HAL_GetTick()- lastCmdReview >1000){
 8012b6c:	f7ef f9aa 	bl	8001ec4 <HAL_GetTick>
 8012b70:	4602      	mov	r2, r0
 8012b72:	4b2c      	ldr	r3, [pc, #176]	; (8012c24 <AnalyserCMD+0x214>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012b7c:	d902      	bls.n	8012b84 <AnalyserCMD+0x174>
			flagReviewFullData = true;
 8012b7e:	4b2a      	ldr	r3, [pc, #168]	; (8012c28 <AnalyserCMD+0x218>)
 8012b80:	2201      	movs	r2, #1
 8012b82:	701a      	strb	r2, [r3, #0]
		}
		lastCmdReview = HAL_GetTick();
 8012b84:	f7ef f99e 	bl	8001ec4 <HAL_GetTick>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	4a26      	ldr	r2, [pc, #152]	; (8012c24 <AnalyserCMD+0x214>)
 8012b8c:	6013      	str	r3, [r2, #0]
		Responce_GetBoardReview(typeconnect);
 8012b8e:	78bb      	ldrb	r3, [r7, #2]
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 f887 	bl	8012ca4 <Responce_GetBoardReview>
 8012b96:	e03a      	b.n	8012c0e <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_GETBOARDRECORDING)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b33      	cmp	r3, #51	; 0x33
 8012ba0:	d10d      	bne.n	8012bbe <AnalyserCMD+0x1ae>
	{
		if(globalMode==MODE_REVIEW) // nếu mode trước đó là review thì clear queue data
 8012ba2:	4b1f      	ldr	r3, [pc, #124]	; (8012c20 <AnalyserCMD+0x210>)
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d101      	bne.n	8012bae <AnalyserCMD+0x19e>
		{
			QueueClear();
 8012baa:	f7fe fe75 	bl	8011898 <QueueClear>
		}
		globalMode = MODE_RECORDING;
 8012bae:	4b1c      	ldr	r3, [pc, #112]	; (8012c20 <AnalyserCMD+0x210>)
 8012bb0:	2201      	movs	r2, #1
 8012bb2:	701a      	strb	r2, [r3, #0]
		Responce_GetBoardRecording(typeconnect);
 8012bb4:	78bb      	ldrb	r3, [r7, #2]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f000 f936 	bl	8012e28 <Responce_GetBoardRecording>
 8012bbc:	e027      	b.n	8012c0e <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_SETTIMERTC)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b34      	cmp	r3, #52	; 0x34
 8012bc6:	d103      	bne.n	8012bd0 <AnalyserCMD+0x1c0>
	{
		Responce_SetTimeRTC(data);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 f9a1 	bl	8012f10 <Responce_SetTimeRTC>
 8012bce:	e01e      	b.n	8012c0e <AnalyserCMD+0x1fe>
	}else if(data[4] >= CMD_GETGAMESAVEBASE){
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	2b40      	cmp	r3, #64	; 0x40
 8012bd8:	d90a      	bls.n	8012bf0 <AnalyserCMD+0x1e0>
		Responce_GetDataGameSave(typeconnect,data[4]-CMD_GETGAMESAVEBASE);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	3b41      	subs	r3, #65	; 0x41
 8012be2:	b2da      	uxtb	r2, r3
 8012be4:	78bb      	ldrb	r3, [r7, #2]
 8012be6:	4611      	mov	r1, r2
 8012be8:	4618      	mov	r0, r3
 8012bea:	f000 f9b3 	bl	8012f54 <Responce_GetDataGameSave>
 8012bee:	e00e      	b.n	8012c0e <AnalyserCMD+0x1fe>
	}else if(data[4] == CMD_ERASEALLGAME){
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	2b37      	cmp	r3, #55	; 0x37
 8012bf8:	d109      	bne.n	8012c0e <AnalyserCMD+0x1fe>
		Responce_EraseGameSave();
 8012bfa:	f000 f9f7 	bl	8012fec <Responce_EraseGameSave>
 8012bfe:	e006      	b.n	8012c0e <AnalyserCMD+0x1fe>
	if(isCalibaseMode) return;
 8012c00:	bf00      	nop
 8012c02:	e004      	b.n	8012c0e <AnalyserCMD+0x1fe>
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012c04:	bf00      	nop
 8012c06:	e002      	b.n	8012c0e <AnalyserCMD+0x1fe>
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012c08:	bf00      	nop
 8012c0a:	e000      	b.n	8012c0e <AnalyserCMD+0x1fe>
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012c0c:	bf00      	nop
	}
}
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	200094cd 	.word	0x200094cd
 8012c18:	20000100 	.word	0x20000100
 8012c1c:	200094cc 	.word	0x200094cc
 8012c20:	200094c5 	.word	0x200094c5
 8012c24:	200094c8 	.word	0x200094c8
 8012c28:	200000ff 	.word	0x200000ff

08012c2c <Response_CheckAddress>:


void Response_CheckAddress(TypeConnection typeconnect)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	4603      	mov	r3, r0
 8012c34:	71fb      	strb	r3, [r7, #7]
	uint8_t data[7];
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8012c36:	233a      	movs	r3, #58	; 0x3a
 8012c38:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 8012c42:	2305      	movs	r3, #5
 8012c44:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_CHECKBOARD;
 8012c46:	2331      	movs	r3, #49	; 0x31
 8012c48:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 8012c4a:	f107 030c 	add.w	r3, r7, #12
 8012c4e:	2204      	movs	r2, #4
 8012c50:	2101      	movs	r1, #1
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7ff fd1a 	bl	801268c <CalculateCRC>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	82fb      	strh	r3, [r7, #22]
	data[5] = (uint8_t)((crc & 0xFF00)>>8);
 8012c5c:	8afb      	ldrh	r3, [r7, #22]
 8012c5e:	0a1b      	lsrs	r3, r3, #8
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(crc & 0x00FF);
 8012c66:	8afb      	ldrh	r3, [r7, #22]
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	74bb      	strb	r3, [r7, #18]

	if(typeconnect ==RS485){
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d108      	bne.n	8012c84 <Response_CheckAddress+0x58>
		HAL_UART_Transmit(&huart1, data, 7,1000);
 8012c72:	f107 010c 	add.w	r1, r7, #12
 8012c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012c7a:	2207      	movs	r2, #7
 8012c7c:	4808      	ldr	r0, [pc, #32]	; (8012ca0 <Response_CheckAddress+0x74>)
 8012c7e:	f7f7 f884 	bl	8009d8a <HAL_UART_Transmit>
	}else if(typeconnect == USB){
		CDC_Transmit_FS(data, 7);
	}else if(typeconnect == BLE){

	}
}
 8012c82:	e008      	b.n	8012c96 <Response_CheckAddress+0x6a>
	}else if(typeconnect == USB){
 8012c84:	79fb      	ldrb	r3, [r7, #7]
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d105      	bne.n	8012c96 <Response_CheckAddress+0x6a>
		CDC_Transmit_FS(data, 7);
 8012c8a:	f107 030c 	add.w	r3, r7, #12
 8012c8e:	2107      	movs	r1, #7
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fd fe7f 	bl	8010994 <CDC_Transmit_FS>
}
 8012c96:	bf00      	nop
 8012c98:	3718      	adds	r7, #24
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	200029d0 	.word	0x200029d0

08012ca4 <Responce_GetBoardReview>:
void Responce_GetBoardReview(TypeConnection typeconnect) {
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b094      	sub	sp, #80	; 0x50
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	71fb      	strb	r3, [r7, #7]
	uint8_t data[53];
	uint16_t crc;
	uint8_t pieceA,pieceB,pie=0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	data[0] = CMD_BEGIN;
 8012cb4:	233a      	movs	r3, #58	; 0x3a
 8012cb6:	723b      	strb	r3, [r7, #8]
	data[1] = ADDRESSBOARD_PART0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	727b      	strb	r3, [r7, #9]
	data[2] = ADDRESSBOARD_PART1;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	72bb      	strb	r3, [r7, #10]
	data[3] = ADDRESSBOARD_PART2;
 8012cc0:	2305      	movs	r3, #5
 8012cc2:	72fb      	strb	r3, [r7, #11]
	data[4] = RES_DATAFENCHANGE;
 8012cc4:	2338      	movs	r3, #56	; 0x38
 8012cc6:	733b      	strb	r3, [r7, #12]

	if (flagReviewFullData == true) {
 8012cc8:	4b53      	ldr	r3, [pc, #332]	; (8012e18 <Responce_GetBoardReview+0x174>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d076      	beq.n	8012dbe <Responce_GetBoardReview+0x11a>
		flagReviewFullData = false;
 8012cd0:	4b51      	ldr	r3, [pc, #324]	; (8012e18 <Responce_GetBoardReview+0x174>)
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	701a      	strb	r2, [r3, #0]
		/* gắn datamain vào 32 byte tiếp theo */
		for(int i=0;i<32;i++){
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012cda:	e02e      	b.n	8012d3a <Responce_GetBoardReview+0x96>
			pieceA = byteToPiece(datamain_old[pie]);
 8012cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012ce0:	4a4e      	ldr	r2, [pc, #312]	; (8012e1c <Responce_GetBoardReview+0x178>)
 8012ce2:	5cd3      	ldrb	r3, [r2, r3]
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7ff fe21 	bl	801292c <byteToPiece>
 8012cea:	4603      	mov	r3, r0
 8012cec:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			pie++;
 8012cf0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pieceB = byteToPiece(datamain_old[pie]);
 8012cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012cfe:	4a47      	ldr	r2, [pc, #284]	; (8012e1c <Responce_GetBoardReview+0x178>)
 8012d00:	5cd3      	ldrb	r3, [r2, r3]
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7ff fe12 	bl	801292c <byteToPiece>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			pie++;
 8012d0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012d12:	3301      	adds	r3, #1
 8012d14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			data[i+5]=(pieceA<<4)+pieceB;
 8012d18:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012d1c:	011b      	lsls	r3, r3, #4
 8012d1e:	b2d9      	uxtb	r1, r3
 8012d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d22:	3305      	adds	r3, #5
 8012d24:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8012d28:	440a      	add	r2, r1
 8012d2a:	b2d2      	uxtb	r2, r2
 8012d2c:	3350      	adds	r3, #80	; 0x50
 8012d2e:	443b      	add	r3, r7
 8012d30:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<32;i++){
 8012d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d36:	3301      	adds	r3, #1
 8012d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d3c:	2b1f      	cmp	r3, #31
 8012d3e:	ddcd      	ble.n	8012cdc <Responce_GetBoardReview+0x38>
		}
		for(int i=0;i<14;i++)
 8012d40:	2300      	movs	r3, #0
 8012d42:	647b      	str	r3, [r7, #68]	; 0x44
 8012d44:	e00c      	b.n	8012d60 <Responce_GetBoardReview+0xbc>
		{
			data[37+i] = data_chessclock[i];
 8012d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d48:	3325      	adds	r3, #37	; 0x25
 8012d4a:	4935      	ldr	r1, [pc, #212]	; (8012e20 <Responce_GetBoardReview+0x17c>)
 8012d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d4e:	440a      	add	r2, r1
 8012d50:	7812      	ldrb	r2, [r2, #0]
 8012d52:	3350      	adds	r3, #80	; 0x50
 8012d54:	443b      	add	r3, r7
 8012d56:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<14;i++)
 8012d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8012d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d62:	2b0d      	cmp	r3, #13
 8012d64:	ddef      	ble.n	8012d46 <Responce_GetBoardReview+0xa2>
		}
		crc = CalculateCRC(data, 1, 50);
 8012d66:	f107 0308 	add.w	r3, r7, #8
 8012d6a:	2232      	movs	r2, #50	; 0x32
 8012d6c:	2101      	movs	r1, #1
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff fc8c 	bl	801268c <CalculateCRC>
 8012d74:	4603      	mov	r3, r0
 8012d76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			data[51] = (uint8_t)((crc &0xFF00)>>8);
 8012d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d7e:	0a1b      	lsrs	r3, r3, #8
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			data[52] = (uint8_t)(crc &0x00FF);
 8012d88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		if (typeconnect == RS485) {
 8012d92:	79fb      	ldrb	r3, [r7, #7]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d108      	bne.n	8012daa <Responce_GetBoardReview+0x106>
			HAL_UART_Transmit(&huart1, data, 53, 1000);
 8012d98:	f107 0108 	add.w	r1, r7, #8
 8012d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012da0:	2235      	movs	r2, #53	; 0x35
 8012da2:	4820      	ldr	r0, [pc, #128]	; (8012e24 <Responce_GetBoardReview+0x180>)
 8012da4:	f7f6 fff1 	bl	8009d8a <HAL_UART_Transmit>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 8012da8:	e032      	b.n	8012e10 <Responce_GetBoardReview+0x16c>
		} else if (typeconnect == USB) {
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d12f      	bne.n	8012e10 <Responce_GetBoardReview+0x16c>
			CDC_Transmit_FS(data, 53);
 8012db0:	f107 0308 	add.w	r3, r7, #8
 8012db4:	2135      	movs	r1, #53	; 0x35
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7fd fdec 	bl	8010994 <CDC_Transmit_FS>
}
 8012dbc:	e028      	b.n	8012e10 <Responce_GetBoardReview+0x16c>
		crc = CalculateCRC(data, 1, 4);
 8012dbe:	f107 0308 	add.w	r3, r7, #8
 8012dc2:	2204      	movs	r2, #4
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7ff fc60 	bl	801268c <CalculateCRC>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dd6:	0a1b      	lsrs	r3, r3, #8
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8012dde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 8012de6:	79fb      	ldrb	r3, [r7, #7]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d108      	bne.n	8012dfe <Responce_GetBoardReview+0x15a>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 8012dec:	f107 0108 	add.w	r1, r7, #8
 8012df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012df4:	2207      	movs	r2, #7
 8012df6:	480b      	ldr	r0, [pc, #44]	; (8012e24 <Responce_GetBoardReview+0x180>)
 8012df8:	f7f6 ffc7 	bl	8009d8a <HAL_UART_Transmit>
}
 8012dfc:	e008      	b.n	8012e10 <Responce_GetBoardReview+0x16c>
		} else if (typeconnect == USB) {
 8012dfe:	79fb      	ldrb	r3, [r7, #7]
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d105      	bne.n	8012e10 <Responce_GetBoardReview+0x16c>
			CDC_Transmit_FS(data, 7);
 8012e04:	f107 0308 	add.w	r3, r7, #8
 8012e08:	2107      	movs	r1, #7
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fd fdc2 	bl	8010994 <CDC_Transmit_FS>
}
 8012e10:	bf00      	nop
 8012e12:	3750      	adds	r7, #80	; 0x50
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	200000ff 	.word	0x200000ff
 8012e1c:	20008ee0 	.word	0x20008ee0
 8012e20:	20007c50 	.word	0x20007c50
 8012e24:	200029d0 	.word	0x200029d0

08012e28 <Responce_GetBoardRecording>:

void Responce_GetBoardRecording(TypeConnection typeconnect)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b090      	sub	sp, #64	; 0x40
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	4603      	mov	r3, r0
 8012e30:	71fb      	strb	r3, [r7, #7]
	if (QueueGetCount() > 0) {
 8012e32:	f7fe fd25 	bl	8011880 <QueueGetCount>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d026      	beq.n	8012e8a <Responce_GetBoardRecording+0x62>
		uint8_t front = QueueGetFront();
 8012e3c:	f7fe fcf6 	bl	801182c <QueueGetFront>
 8012e40:	4603      	mov	r3, r0
 8012e42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if (typeconnect == RS485) {
 8012e46:	79fb      	ldrb	r3, [r7, #7]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d10d      	bne.n	8012e68 <Responce_GetBoardRecording+0x40>
			HAL_UART_Transmit(&huart1, queueData[front], 53, 1000);
 8012e4c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012e50:	2235      	movs	r2, #53	; 0x35
 8012e52:	fb02 f303 	mul.w	r3, r2, r3
 8012e56:	4a2b      	ldr	r2, [pc, #172]	; (8012f04 <Responce_GetBoardRecording+0xdc>)
 8012e58:	1899      	adds	r1, r3, r2
 8012e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012e5e:	2235      	movs	r2, #53	; 0x35
 8012e60:	4829      	ldr	r0, [pc, #164]	; (8012f08 <Responce_GetBoardRecording+0xe0>)
 8012e62:	f7f6 ff92 	bl	8009d8a <HAL_UART_Transmit>
 8012e66:	e00d      	b.n	8012e84 <Responce_GetBoardRecording+0x5c>
		} else if (typeconnect == USB) {
 8012e68:	79fb      	ldrb	r3, [r7, #7]
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d10a      	bne.n	8012e84 <Responce_GetBoardRecording+0x5c>
			CDC_Transmit_FS(queueData[front], 53);
 8012e6e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8012e72:	2235      	movs	r2, #53	; 0x35
 8012e74:	fb02 f303 	mul.w	r3, r2, r3
 8012e78:	4a22      	ldr	r2, [pc, #136]	; (8012f04 <Responce_GetBoardRecording+0xdc>)
 8012e7a:	4413      	add	r3, r2
 8012e7c:	2135      	movs	r1, #53	; 0x35
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fd fd88 	bl	8010994 <CDC_Transmit_FS>
		} else if (typeconnect == BLE) {

		}
		QueueGetFrontAfter();
 8012e84:	f7fe fcde 	bl	8011844 <QueueGetFrontAfter>
			CDC_Transmit_FS(data, 7);
		} else if (typeconnect == BLE) {

		}
	}
}
 8012e88:	e038      	b.n	8012efc <Responce_GetBoardRecording+0xd4>
	}else if(flagReviewFullData){
 8012e8a:	4b20      	ldr	r3, [pc, #128]	; (8012f0c <Responce_GetBoardRecording+0xe4>)
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d004      	beq.n	8012e9c <Responce_GetBoardRecording+0x74>
		Responce_GetBoardReview(typeconnect);
 8012e92:	79fb      	ldrb	r3, [r7, #7]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7ff ff05 	bl	8012ca4 <Responce_GetBoardReview>
}
 8012e9a:	e02f      	b.n	8012efc <Responce_GetBoardRecording+0xd4>
		data[0] = CMD_BEGIN;
 8012e9c:	233a      	movs	r3, #58	; 0x3a
 8012e9e:	723b      	strb	r3, [r7, #8]
		data[1] = ADDRESSBOARD_PART0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	727b      	strb	r3, [r7, #9]
		data[2] = ADDRESSBOARD_PART1;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	72bb      	strb	r3, [r7, #10]
		data[3] = ADDRESSBOARD_PART2;
 8012ea8:	2305      	movs	r3, #5
 8012eaa:	72fb      	strb	r3, [r7, #11]
		data[4] = CMD_GETBOARDDATA;
 8012eac:	2332      	movs	r3, #50	; 0x32
 8012eae:	733b      	strb	r3, [r7, #12]
		crc = CalculateCRC(data, 1, 4);
 8012eb0:	f107 0308 	add.w	r3, r7, #8
 8012eb4:	2204      	movs	r2, #4
 8012eb6:	2101      	movs	r1, #1
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff fbe7 	bl	801268c <CalculateCRC>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data[5] = (uint8_t) ((crc & 0xFF00) >> 8);
 8012ec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ec4:	0a1b      	lsrs	r3, r3, #8
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t) (crc & 0x00FF);
 8012ecc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	73bb      	strb	r3, [r7, #14]
		if (typeconnect == RS485) {
 8012ed2:	79fb      	ldrb	r3, [r7, #7]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d108      	bne.n	8012eea <Responce_GetBoardRecording+0xc2>
			HAL_UART_Transmit(&huart1, data, 7, 1000);
 8012ed8:	f107 0108 	add.w	r1, r7, #8
 8012edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012ee0:	2207      	movs	r2, #7
 8012ee2:	4809      	ldr	r0, [pc, #36]	; (8012f08 <Responce_GetBoardRecording+0xe0>)
 8012ee4:	f7f6 ff51 	bl	8009d8a <HAL_UART_Transmit>
}
 8012ee8:	e008      	b.n	8012efc <Responce_GetBoardRecording+0xd4>
		} else if (typeconnect == USB) {
 8012eea:	79fb      	ldrb	r3, [r7, #7]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d105      	bne.n	8012efc <Responce_GetBoardRecording+0xd4>
			CDC_Transmit_FS(data, 7);
 8012ef0:	f107 0308 	add.w	r3, r7, #8
 8012ef4:	2107      	movs	r1, #7
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fd fd4c 	bl	8010994 <CDC_Transmit_FS>
}
 8012efc:	bf00      	nop
 8012efe:	3740      	adds	r7, #64	; 0x40
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	2000907c 	.word	0x2000907c
 8012f08:	200029d0 	.word	0x200029d0
 8012f0c:	200000ff 	.word	0x200000ff

08012f10 <Responce_SetTimeRTC>:
void Responce_SetTimeRTC(uint8_t *dat)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	uint8_t datatime[6];
	for(int i=0;i<6;i++){
 8012f18:	2300      	movs	r3, #0
 8012f1a:	617b      	str	r3, [r7, #20]
 8012f1c:	e00d      	b.n	8012f3a <Responce_SetTimeRTC+0x2a>
		datatime[i] = dat[i+5];
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	3305      	adds	r3, #5
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	4413      	add	r3, r2
 8012f26:	7819      	ldrb	r1, [r3, #0]
 8012f28:	f107 020c 	add.w	r2, r7, #12
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	4413      	add	r3, r2
 8012f30:	460a      	mov	r2, r1
 8012f32:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	3301      	adds	r3, #1
 8012f38:	617b      	str	r3, [r7, #20]
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	2b05      	cmp	r3, #5
 8012f3e:	ddee      	ble.n	8012f1e <Responce_SetTimeRTC+0xe>
	}
	RTC_SetTime(datatime);
 8012f40:	f107 030c 	add.w	r3, r7, #12
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe fcbd 	bl	80118c4 <RTC_SetTime>
}
 8012f4a:	bf00      	nop
 8012f4c:	3718      	adds	r7, #24
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
	...

08012f54 <Responce_GetDataGameSave>:

void Responce_GetDataGameSave(TypeConnection typeconnect,uint8_t part)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8012f5a:	af00      	add	r7, sp, #0
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012f62:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012f66:	701a      	strb	r2, [r3, #0]
 8012f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012f6c:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012f70:	460a      	mov	r2, r1
 8012f72:	701a      	strb	r2, [r3, #0]
	uint8_t data[GAMESAVELENGTH];
	if(part > GAMESAVEPARTS) return;
 8012f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012f78:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8012f80:	d82d      	bhi.n	8012fde <Responce_GetDataGameSave+0x8a>
	MB85RS_read(part*GAMESAVELENGTH, data, GAMESAVELENGTH);
 8012f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012f86:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	025b      	lsls	r3, r3, #9
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f107 0308 	add.w	r3, r7, #8
 8012f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f98:	4619      	mov	r1, r3
 8012f9a:	f7fe fa6f 	bl	801147c <MB85RS_read>

	if(typeconnect ==RS485){
 8012f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012fa2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d109      	bne.n	8012fc0 <Responce_GetDataGameSave+0x6c>
			HAL_UART_Transmit(&huart1, data, GAMESAVELENGTH, 1000);
 8012fac:	f107 0108 	add.w	r1, r7, #8
 8012fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fb8:	480b      	ldr	r0, [pc, #44]	; (8012fe8 <Responce_GetDataGameSave+0x94>)
 8012fba:	f7f6 fee6 	bl	8009d8a <HAL_UART_Transmit>
 8012fbe:	e00f      	b.n	8012fe0 <Responce_GetDataGameSave+0x8c>
	}else if(typeconnect == USB){
 8012fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012fc4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d108      	bne.n	8012fe0 <Responce_GetDataGameSave+0x8c>
		CDC_Transmit_FS(data, GAMESAVELENGTH);
 8012fce:	f107 0308 	add.w	r3, r7, #8
 8012fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fd fcdc 	bl	8010994 <CDC_Transmit_FS>
 8012fdc:	e000      	b.n	8012fe0 <Responce_GetDataGameSave+0x8c>
	if(part > GAMESAVEPARTS) return;
 8012fde:	bf00      	nop
	}else if(typeconnect == BLE){

	}
}
 8012fe0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	200029d0 	.word	0x200029d0

08012fec <Responce_EraseGameSave>:
void Responce_EraseGameSave()
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	af00      	add	r7, sp, #0
	MB85RS_erase();
 8012ff0:	f7fe fa74 	bl	80114dc <MB85RS_erase>
}
 8012ff4:	bf00      	nop
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <UsbSendDateTime>:


void UsbSendDateTime()
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b088      	sub	sp, #32
 8012ffc:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	uint8_t dat[7];
	RTC_TimeTypeDef 	sTime;
	RTC_DateTypeDef 	sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8012ffe:	1d3b      	adds	r3, r7, #4
 8013000:	2200      	movs	r2, #0
 8013002:	4619      	mov	r1, r3
 8013004:	4810      	ldr	r0, [pc, #64]	; (8013048 <UsbSendDateTime+0x50>)
 8013006:	f7f3 ffbf 	bl	8006f88 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 801300a:	463b      	mov	r3, r7
 801300c:	2200      	movs	r2, #0
 801300e:	4619      	mov	r1, r3
 8013010:	480d      	ldr	r0, [pc, #52]	; (8013048 <UsbSendDateTime+0x50>)
 8013012:	f7f4 f89b 	bl	800714c <HAL_RTC_GetDate>
	dat[0] = sTime.Seconds;
 8013016:	79bb      	ldrb	r3, [r7, #6]
 8013018:	763b      	strb	r3, [r7, #24]
	dat[1] = sTime.Minutes;
 801301a:	797b      	ldrb	r3, [r7, #5]
 801301c:	767b      	strb	r3, [r7, #25]
	dat[2] = sTime.Hours;
 801301e:	793b      	ldrb	r3, [r7, #4]
 8013020:	76bb      	strb	r3, [r7, #26]
	dat[3] = sDate.Date;
 8013022:	78bb      	ldrb	r3, [r7, #2]
 8013024:	76fb      	strb	r3, [r7, #27]
	dat[4] = sDate.Month;
 8013026:	787b      	ldrb	r3, [r7, #1]
 8013028:	773b      	strb	r3, [r7, #28]
	dat[5] = sDate.Year;
 801302a:	78fb      	ldrb	r3, [r7, #3]
 801302c:	777b      	strb	r3, [r7, #29]
	dat[6] = NEWLINE;
 801302e:	23ff      	movs	r3, #255	; 0xff
 8013030:	77bb      	strb	r3, [r7, #30]
	CDC_Transmit_FS(dat, 7);
 8013032:	f107 0318 	add.w	r3, r7, #24
 8013036:	2107      	movs	r1, #7
 8013038:	4618      	mov	r0, r3
 801303a:	f7fd fcab 	bl	8010994 <CDC_Transmit_FS>
#endif
}
 801303e:	bf00      	nop
 8013040:	3720      	adds	r7, #32
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	20002490 	.word	0x20002490

0801304c <UsbSendDataCalibase>:

void UsbSendDataCalibase()
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b08a      	sub	sp, #40	; 0x28
 8013050:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	if(isCalibaseMode==true){
 8013052:	4b5e      	ldr	r3, [pc, #376]	; (80131cc <UsbSendDataCalibase+0x180>)
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	f000 80b3 	beq.w	80131c2 <UsbSendDataCalibase+0x176>
		if(calibase_type>17) calibase_type=0;
 801305c:	4b5c      	ldr	r3, [pc, #368]	; (80131d0 <UsbSendDataCalibase+0x184>)
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	2b11      	cmp	r3, #17
 8013062:	d902      	bls.n	801306a <UsbSendDataCalibase+0x1e>
 8013064:	4b5a      	ldr	r3, [pc, #360]	; (80131d0 <UsbSendDataCalibase+0x184>)
 8013066:	2200      	movs	r2, #0
 8013068:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 801306a:	2300      	movs	r3, #0
 801306c:	627b      	str	r3, [r7, #36]	; 0x24
 801306e:	e011      	b.n	8013094 <UsbSendDataCalibase+0x48>
			dataUsbCalibase[i]= (uint8_t)datapieces[calibase_type][i][PULSES];
 8013070:	4b57      	ldr	r3, [pc, #348]	; (80131d0 <UsbSendDataCalibase+0x184>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	4957      	ldr	r1, [pc, #348]	; (80131d4 <UsbSendDataCalibase+0x188>)
 8013076:	019a      	lsls	r2, r3, #6
 8013078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307a:	4413      	add	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	440b      	add	r3, r1
 8013080:	885b      	ldrh	r3, [r3, #2]
 8013082:	b2d9      	uxtb	r1, r3
 8013084:	4a54      	ldr	r2, [pc, #336]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013088:	4413      	add	r3, r2
 801308a:	460a      	mov	r2, r1
 801308c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 801308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013090:	3301      	adds	r3, #1
 8013092:	627b      	str	r3, [r7, #36]	; 0x24
 8013094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013096:	2b3f      	cmp	r3, #63	; 0x3f
 8013098:	ddea      	ble.n	8013070 <UsbSendDataCalibase+0x24>
		}
		int inx =0;
 801309a:	2300      	movs	r3, #0
 801309c:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 801309e:	2300      	movs	r3, #0
 80130a0:	61fb      	str	r3, [r7, #28]
 80130a2:	e033      	b.n	801310c <UsbSendDataCalibase+0xc0>
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]/254;
 80130a4:	4b4a      	ldr	r3, [pc, #296]	; (80131d0 <UsbSendDataCalibase+0x184>)
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	494a      	ldr	r1, [pc, #296]	; (80131d4 <UsbSendDataCalibase+0x188>)
 80130aa:	019a      	lsls	r2, r3, #6
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	4413      	add	r3, r2
 80130b0:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 80130b4:	085b      	lsrs	r3, r3, #1
 80130b6:	4a49      	ldr	r2, [pc, #292]	; (80131dc <UsbSendDataCalibase+0x190>)
 80130b8:	fba2 2303 	umull	r2, r3, r2, r3
 80130bc:	099b      	lsrs	r3, r3, #6
 80130be:	b29a      	uxth	r2, r3
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	3340      	adds	r3, #64	; 0x40
 80130c4:	b2d1      	uxtb	r1, r2
 80130c6:	4a44      	ldr	r2, [pc, #272]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 80130c8:	54d1      	strb	r1, [r2, r3]
			inx++;
 80130ca:	6a3b      	ldr	r3, [r7, #32]
 80130cc:	3301      	adds	r3, #1
 80130ce:	623b      	str	r3, [r7, #32]
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]%254;
 80130d0:	4b3f      	ldr	r3, [pc, #252]	; (80131d0 <UsbSendDataCalibase+0x184>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	493f      	ldr	r1, [pc, #252]	; (80131d4 <UsbSendDataCalibase+0x188>)
 80130d6:	019a      	lsls	r2, r3, #6
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	4413      	add	r3, r2
 80130dc:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 80130e0:	0853      	lsrs	r3, r2, #1
 80130e2:	493e      	ldr	r1, [pc, #248]	; (80131dc <UsbSendDataCalibase+0x190>)
 80130e4:	fba1 1303 	umull	r1, r3, r1, r3
 80130e8:	0999      	lsrs	r1, r3, #6
 80130ea:	460b      	mov	r3, r1
 80130ec:	01db      	lsls	r3, r3, #7
 80130ee:	1a5b      	subs	r3, r3, r1
 80130f0:	005b      	lsls	r3, r3, #1
 80130f2:	1ad3      	subs	r3, r2, r3
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	6a3b      	ldr	r3, [r7, #32]
 80130f8:	3340      	adds	r3, #64	; 0x40
 80130fa:	b2d1      	uxtb	r1, r2
 80130fc:	4a36      	ldr	r2, [pc, #216]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 80130fe:	54d1      	strb	r1, [r2, r3]
			inx++;
 8013100:	6a3b      	ldr	r3, [r7, #32]
 8013102:	3301      	adds	r3, #1
 8013104:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	3301      	adds	r3, #1
 801310a:	61fb      	str	r3, [r7, #28]
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	2b3f      	cmp	r3, #63	; 0x3f
 8013110:	ddc8      	ble.n	80130a4 <UsbSendDataCalibase+0x58>
		}
		for(int i=0;i<64;i++){
 8013112:	2300      	movs	r3, #0
 8013114:	61bb      	str	r3, [r7, #24]
 8013116:	e00a      	b.n	801312e <UsbSendDataCalibase+0xe2>
			dataUsbCalibase[192+i] = datamain[i];
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	33c0      	adds	r3, #192	; 0xc0
 801311c:	4930      	ldr	r1, [pc, #192]	; (80131e0 <UsbSendDataCalibase+0x194>)
 801311e:	69ba      	ldr	r2, [r7, #24]
 8013120:	440a      	add	r2, r1
 8013122:	7811      	ldrb	r1, [r2, #0]
 8013124:	4a2c      	ldr	r2, [pc, #176]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013126:	54d1      	strb	r1, [r2, r3]
		for(int i=0;i<64;i++){
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	3301      	adds	r3, #1
 801312c:	61bb      	str	r3, [r7, #24]
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	2b3f      	cmp	r3, #63	; 0x3f
 8013132:	ddf1      	ble.n	8013118 <UsbSendDataCalibase+0xcc>
		}

		RTC_TimeTypeDef sTime = {0};
 8013134:	1d3b      	adds	r3, r7, #4
 8013136:	2200      	movs	r2, #0
 8013138:	601a      	str	r2, [r3, #0]
 801313a:	605a      	str	r2, [r3, #4]
 801313c:	609a      	str	r2, [r3, #8]
 801313e:	60da      	str	r2, [r3, #12]
 8013140:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8013142:	2300      	movs	r3, #0
 8013144:	603b      	str	r3, [r7, #0]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8013146:	1d3b      	adds	r3, r7, #4
 8013148:	2200      	movs	r2, #0
 801314a:	4619      	mov	r1, r3
 801314c:	4825      	ldr	r0, [pc, #148]	; (80131e4 <UsbSendDataCalibase+0x198>)
 801314e:	f7f3 ff1b 	bl	8006f88 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8013152:	463b      	mov	r3, r7
 8013154:	2200      	movs	r2, #0
 8013156:	4619      	mov	r1, r3
 8013158:	4822      	ldr	r0, [pc, #136]	; (80131e4 <UsbSendDataCalibase+0x198>)
 801315a:	f7f3 fff7 	bl	800714c <HAL_RTC_GetDate>

		dataUsbCalibase[256] = sTime.Seconds;
 801315e:	79ba      	ldrb	r2, [r7, #6]
 8013160:	4b1d      	ldr	r3, [pc, #116]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013162:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		dataUsbCalibase[257] = sTime.Minutes;
 8013166:	797a      	ldrb	r2, [r7, #5]
 8013168:	4b1b      	ldr	r3, [pc, #108]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 801316a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		dataUsbCalibase[258] = sTime.Hours;
 801316e:	793a      	ldrb	r2, [r7, #4]
 8013170:	4b19      	ldr	r3, [pc, #100]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013172:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		dataUsbCalibase[259] = sDate.Date;
 8013176:	78ba      	ldrb	r2, [r7, #2]
 8013178:	4b17      	ldr	r3, [pc, #92]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 801317a:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		dataUsbCalibase[260] = sDate.Month;
 801317e:	787a      	ldrb	r2, [r7, #1]
 8013180:	4b15      	ldr	r3, [pc, #84]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013182:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		dataUsbCalibase[261] = sDate.Year;
 8013186:	78fa      	ldrb	r2, [r7, #3]
 8013188:	4b13      	ldr	r3, [pc, #76]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 801318a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

		dataUsbCalibase[262]=255;
 801318e:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 8013190:	22ff      	movs	r2, #255	; 0xff
 8013192:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		if(typeCalibaseConnect==USB){
 8013196:	4b14      	ldr	r3, [pc, #80]	; (80131e8 <UsbSendDataCalibase+0x19c>)
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	2b01      	cmp	r3, #1
 801319c:	d105      	bne.n	80131aa <UsbSendDataCalibase+0x15e>
			CDC_Transmit_FS(dataUsbCalibase,263);
 801319e:	f240 1107 	movw	r1, #263	; 0x107
 80131a2:	480d      	ldr	r0, [pc, #52]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 80131a4:	f7fd fbf6 	bl	8010994 <CDC_Transmit_FS>
			HAL_UART_Transmit(&huart1, dataUsbCalibase, 263, 1000);
		}
	}
#endif

}
 80131a8:	e00b      	b.n	80131c2 <UsbSendDataCalibase+0x176>
		}else if(typeCalibaseConnect==RS485){
 80131aa:	4b0f      	ldr	r3, [pc, #60]	; (80131e8 <UsbSendDataCalibase+0x19c>)
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d107      	bne.n	80131c2 <UsbSendDataCalibase+0x176>
			HAL_UART_Transmit(&huart1, dataUsbCalibase, 263, 1000);
 80131b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80131b6:	f240 1207 	movw	r2, #263	; 0x107
 80131ba:	4907      	ldr	r1, [pc, #28]	; (80131d8 <UsbSendDataCalibase+0x18c>)
 80131bc:	480b      	ldr	r0, [pc, #44]	; (80131ec <UsbSendDataCalibase+0x1a0>)
 80131be:	f7f6 fde4 	bl	8009d8a <HAL_UART_Transmit>
}
 80131c2:	bf00      	nop
 80131c4:	3728      	adds	r7, #40	; 0x28
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop
 80131cc:	200094cd 	.word	0x200094cd
 80131d0:	200094cc 	.word	0x200094cc
 80131d4:	20007ca0 	.word	0x20007ca0
 80131d8:	200094d0 	.word	0x200094d0
 80131dc:	81020409 	.word	0x81020409
 80131e0:	20008ea0 	.word	0x20008ea0
 80131e4:	20002490 	.word	0x20002490
 80131e8:	20000100 	.word	0x20000100
 80131ec:	200029d0 	.word	0x200029d0

080131f0 <__libc_init_array>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	4d0d      	ldr	r5, [pc, #52]	; (8013228 <__libc_init_array+0x38>)
 80131f4:	4c0d      	ldr	r4, [pc, #52]	; (801322c <__libc_init_array+0x3c>)
 80131f6:	1b64      	subs	r4, r4, r5
 80131f8:	10a4      	asrs	r4, r4, #2
 80131fa:	2600      	movs	r6, #0
 80131fc:	42a6      	cmp	r6, r4
 80131fe:	d109      	bne.n	8013214 <__libc_init_array+0x24>
 8013200:	4d0b      	ldr	r5, [pc, #44]	; (8013230 <__libc_init_array+0x40>)
 8013202:	4c0c      	ldr	r4, [pc, #48]	; (8013234 <__libc_init_array+0x44>)
 8013204:	f000 f82e 	bl	8013264 <_init>
 8013208:	1b64      	subs	r4, r4, r5
 801320a:	10a4      	asrs	r4, r4, #2
 801320c:	2600      	movs	r6, #0
 801320e:	42a6      	cmp	r6, r4
 8013210:	d105      	bne.n	801321e <__libc_init_array+0x2e>
 8013212:	bd70      	pop	{r4, r5, r6, pc}
 8013214:	f855 3b04 	ldr.w	r3, [r5], #4
 8013218:	4798      	blx	r3
 801321a:	3601      	adds	r6, #1
 801321c:	e7ee      	b.n	80131fc <__libc_init_array+0xc>
 801321e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013222:	4798      	blx	r3
 8013224:	3601      	adds	r6, #1
 8013226:	e7f2      	b.n	801320e <__libc_init_array+0x1e>
 8013228:	08013874 	.word	0x08013874
 801322c:	08013874 	.word	0x08013874
 8013230:	08013874 	.word	0x08013874
 8013234:	08013878 	.word	0x08013878

08013238 <memcpy>:
 8013238:	440a      	add	r2, r1
 801323a:	4291      	cmp	r1, r2
 801323c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013240:	d100      	bne.n	8013244 <memcpy+0xc>
 8013242:	4770      	bx	lr
 8013244:	b510      	push	{r4, lr}
 8013246:	f811 4b01 	ldrb.w	r4, [r1], #1
 801324a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801324e:	4291      	cmp	r1, r2
 8013250:	d1f9      	bne.n	8013246 <memcpy+0xe>
 8013252:	bd10      	pop	{r4, pc}

08013254 <memset>:
 8013254:	4402      	add	r2, r0
 8013256:	4603      	mov	r3, r0
 8013258:	4293      	cmp	r3, r2
 801325a:	d100      	bne.n	801325e <memset+0xa>
 801325c:	4770      	bx	lr
 801325e:	f803 1b01 	strb.w	r1, [r3], #1
 8013262:	e7f9      	b.n	8013258 <memset+0x4>

08013264 <_init>:
 8013264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013266:	bf00      	nop
 8013268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801326a:	bc08      	pop	{r3}
 801326c:	469e      	mov	lr, r3
 801326e:	4770      	bx	lr

08013270 <_fini>:
 8013270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013272:	bf00      	nop
 8013274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013276:	bc08      	pop	{r3}
 8013278:	469e      	mov	lr, r3
 801327a:	4770      	bx	lr
