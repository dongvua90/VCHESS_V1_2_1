
VCHESS_V1.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0801278c  0801278c  0002278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d2c  08012d2c  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  08012d2c  08012d2c  00022d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d34  08012d34  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d34  08012d34  00022d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d38  08012d38  00022d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08012d3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000090d4  20000100  08012e3c  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200091d4  08012e3c  000391d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d36f  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006eea  00000000  00000000  0005d49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002440  00000000  00000000  00064390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002130  00000000  00000000  000667d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b87  00000000  00000000  00068900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032a2c  00000000  00000000  00089487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6004  00000000  00000000  000bbeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000940c  00000000  00000000  00161f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012774 	.word	0x08012774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	08012774 	.word	0x08012774

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <MX_DMA_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a3e      	ldr	r2, [pc, #248]	; (80005ec <MX_DMA_Init+0x108>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_DMA_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <MX_DMA_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <MX_DMA_Init+0x108>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_DMA_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fe80 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f001 fe99 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2105      	movs	r1, #5
 8000536:	200c      	movs	r0, #12
 8000538:	f001 fe78 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800053c:	200c      	movs	r0, #12
 800053e:	f001 fe91 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200d      	movs	r0, #13
 8000548:	f001 fe70 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f001 fe89 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	200e      	movs	r0, #14
 8000558:	f001 fe68 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800055c:	200e      	movs	r0, #14
 800055e:	f001 fe81 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	200f      	movs	r0, #15
 8000568:	f001 fe60 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800056c:	200f      	movs	r0, #15
 800056e:	f001 fe79 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2011      	movs	r0, #17
 8000578:	f001 fe58 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800057c:	2011      	movs	r0, #17
 800057e:	f001 fe71 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	202f      	movs	r0, #47	; 0x2f
 8000588:	f001 fe50 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800058c:	202f      	movs	r0, #47	; 0x2f
 800058e:	f001 fe69 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2039      	movs	r0, #57	; 0x39
 8000598:	f001 fe48 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f001 fe61 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	203a      	movs	r0, #58	; 0x3a
 80005a8:	f001 fe40 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f001 fe59 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2105      	movs	r1, #5
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f001 fe38 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f001 fe51 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2105      	movs	r1, #5
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f001 fe30 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	; 0x45
 80005ce:	f001 fe49 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 fe28 	bl	800222c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 fe41 	bl	8002264 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20002184 	.word	0x20002184
 8000620:	200021d8 	.word	0x200021d8

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemGetFRAM */
  osSemaphoreDef(binarySemGetFRAM);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  binarySemGetFRAMHandle = osSemaphoreCreate(osSemaphore(binarySemGetFRAM), 1);
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f00e f93a 	bl	800e8b2 <osSemaphoreCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemMasterGetData */
  osSemaphoreDef(binarySemMasterGetData);
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  binarySemMasterGetDataHandle = osSemaphoreCreate(osSemaphore(binarySemMasterGetData), 1);
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f00e f92d 	bl	800e8b2 <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemI2C_Status */
  osSemaphoreDef(binarySemI2C_Status);
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  binarySemI2C_StatusHandle = osSemaphoreCreate(osSemaphore(binarySemI2C_Status), 1);
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f00e f920 	bl	800e8b2 <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e f8ad 	bl	800e7f2 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskScanPiece */
  osThreadStaticDef(taskScanPiece, StartTaskScanPiece, osPriorityHigh, 0, 2048, taskScanPieceBuffer, &taskScanPieceControlBlock);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FREERTOS_Init+0xb8>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskScanPieceHandle = osThreadCreate(osThread(taskScanPiece), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00e f89c 	bl	800e7f2 <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_FREERTOS_Init+0xbc>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	20002178 	.word	0x20002178
 80006cc:	2000217c 	.word	0x2000217c
 80006d0:	20002180 	.word	0x20002180
 80006d4:	080127a8 	.word	0x080127a8
 80006d8:	2000011c 	.word	0x2000011c
 80006dc:	080127c4 	.word	0x080127c4
 80006e0:	20000120 	.word	0x20000120

080006e4 <StartDefaultTask>:
  */
uint8_t cmd_test=0;

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f00f ff9e 	bl	801062c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  ChessClock_Init();
 80006f0:	f010 fd64 	bl	80111bc <ChessClock_Init>

  /* Infinite loop */
  for(;;)
  {
	  Status_Task();
 80006f4:	f011 fae4 	bl	8011cc0 <Status_Task>
	  osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f00e f8c6 	bl	800e88a <osDelay>
	  Status_Task();
 80006fe:	e7f9      	b.n	80006f4 <StartDefaultTask+0x10>

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <MX_GPIO_Init+0x148>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4a      	ldr	r2, [pc, #296]	; (8000848 <MX_GPIO_Init+0x148>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <MX_GPIO_Init+0x148>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <MX_GPIO_Init+0x148>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <MX_GPIO_Init+0x148>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_GPIO_Init+0x148>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <MX_GPIO_Init+0x148>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <MX_GPIO_Init+0x148>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <MX_GPIO_Init+0x148>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a35      	ldr	r2, [pc, #212]	; (8000848 <MX_GPIO_Init+0x148>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	482f      	ldr	r0, [pc, #188]	; (800084c <MX_GPIO_Init+0x14c>)
 800078e:	f002 fc67 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_PWRC_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2112      	movs	r1, #18
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <MX_GPIO_Init+0x150>)
 8000798:	f002 fc62 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2164      	movs	r1, #100	; 0x64
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <MX_GPIO_Init+0x154>)
 80007a2:	f002 fc5d 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CD4051_A_GPIO_Port, CD4051_A_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4828      	ldr	r0, [pc, #160]	; (8000850 <MX_GPIO_Init+0x150>)
 80007ae:	f002 fc57 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4820      	ldr	r0, [pc, #128]	; (800084c <MX_GPIO_Init+0x14c>)
 80007cc:	f002 f9e0 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_STA_Pin;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_STA_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <MX_GPIO_Init+0x150>)
 80007e4:	f002 f9d4 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_PWRC_Pin|CD4051_A_Pin;
 80007e8:	f248 0302 	movw	r3, #32770	; 0x8002
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_GPIO_Init+0x150>)
 8000802:	f002 f9c5 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_GPIO_Init+0x150>)
 800081e:	f002 f9b7 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin;
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_GPIO_Init+0x154>)
 800083a:	f002 f9a9 	bl	8002b90 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 160;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	22a0      	movs	r2, #160	; 0xa0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f002 fbfd 	bl	8003094 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f97c 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200023d8 	.word	0x200023d8
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <HAL_I2C_MspInit+0x104>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d16b      	bne.n	80009ae <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	482c      	ldr	r0, [pc, #176]	; (80009c0 <HAL_I2C_MspInit+0x10c>)
 8000910:	f002 f93e 	bl	8002b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_I2C_MspInit+0x108>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <HAL_I2C_MspInit+0x114>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000974:	f001 fc92 	bl	800229c <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800097e:	f000 f90d 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201f      	movs	r0, #31
 8000994:	f001 fc4a 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000998:	201f      	movs	r0, #31
 800099a:	f001 fc63 	bl	8002264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2020      	movs	r0, #32
 80009a4:	f001 fc42 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009a8:	2020      	movs	r0, #32
 80009aa:	f001 fc5b 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	2000242c 	.word	0x2000242c
 80009c8:	40026010 	.word	0x40026010

080009cc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_I2C_MspDeInit+0x50>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d11a      	bne.n	8000a14 <HAL_I2C_MspDeInit+0x48>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_I2C_MspDeInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_I2C_MspDeInit+0x54>)
 80009e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <HAL_I2C_MspDeInit+0x58>)
 80009f0:	f002 fa52 	bl	8002e98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80009f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <HAL_I2C_MspDeInit+0x58>)
 80009fa:	f002 fa4d 	bl	8002e98 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fcf8 	bl	80023f8 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000a08:	201f      	movs	r0, #31
 8000a0a:	f001 fc39 	bl	8002280 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000a0e:	2020      	movs	r0, #32
 8000a10:	f001 fc36 	bl	8002280 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f001 fabc 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f81e 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fe64 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fd54 	bl	80004e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a3c:	f000 fb92 	bl	8001164 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a40:	f000 fc4a 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a44:	f000 fcc8 	bl	80013d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a48:	f000 fd52 	bl	80014f0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000a4c:	f7ff ff04 	bl	8000858 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a50:	f000 f95a 	bl	8000d08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a54:	f001 f948 	bl	8001ce8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a58:	f001 f91c 	bl	8001c94 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000a5c:	f000 f8a4 	bl	8000ba8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  initReceiverUart();
 8000a60:	f011 faf4 	bl	801204c <initReceiverUart>
  //TaskScanPieceInit();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a64:	f7ff fdde 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a68:	f00d febc 	bl	800e7e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x44>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f011 fe70 	bl	8012764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <SystemClock_Config+0xd4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <SystemClock_Config+0xd8>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae8:	2319      	movs	r3, #25
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 fdea 	bl	80066d8 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f847 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f006 f84c 	bl	8006bc8 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b36:	f000 f831 	bl	8000b9c <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d102      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000b5e:	f001 fa45 	bl	8001fec <HAL_IncTick>
		  is_start_measure = false;
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000b62:	e00f      	b.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
  else if(htim->Instance == TIM4){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10a      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
	  if(is_start_measure==true){
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
		  is_start_measure = false;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b80:	f007 fd7c 	bl	800867c <HAL_TIM_IC_Stop_DMA>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40014800 	.word	0x40014800
 8000b90:	40000800 	.word	0x40000800
 8000b94:	20007c66 	.word	0x20007c66
 8000b98:	20002624 	.word	0x20002624

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	if(RTC->BKP1R==1990){
 8000bae:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb2:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d11d      	bne.n	8000bf6 <MX_RTC_Init+0x4e>
		 hrtc.Instance = RTC;
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_RTC_Init+0x104>)
 8000bbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000bbe:	601a      	str	r2, [r3, #0]
		  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_RTC_Init+0x104>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
		  hrtc.Init.AsynchPrediv = 127;
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_RTC_Init+0x104>)
 8000bc8:	227f      	movs	r2, #127	; 0x7f
 8000bca:	609a      	str	r2, [r3, #8]
		  hrtc.Init.SynchPrediv = 255;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_RTC_Init+0x104>)
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	60da      	str	r2, [r3, #12]
		  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_RTC_Init+0x104>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
		  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_RTC_Init+0x104>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
		  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_RTC_Init+0x104>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
		  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be4:	4831      	ldr	r0, [pc, #196]	; (8000cac <MX_RTC_Init+0x104>)
 8000be6:	f006 faef 	bl	80071c8 <HAL_RTC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d057      	beq.n	8000ca0 <MX_RTC_Init+0xf8>
		  {
		    Error_Handler();
 8000bf0:	f7ff ffd4 	bl	8000b9c <Error_Handler>
 8000bf4:	e055      	b.n	8000ca2 <MX_RTC_Init+0xfa>
		  }
		return;
	}
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_RTC_Init+0x104>)
 8000c0a:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_RTC_Init+0x104>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_RTC_Init+0x104>)
 8000c16:	227f      	movs	r2, #127	; 0x7f
 8000c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_RTC_Init+0x104>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_RTC_Init+0x104>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_RTC_Init+0x104>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_RTC_Init+0x104>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c32:	481e      	ldr	r0, [pc, #120]	; (8000cac <MX_RTC_Init+0x104>)
 8000c34:	f006 fac8 	bl	80071c8 <HAL_RTC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000c3e:	f7ff ffad 	bl	8000b9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_RTC_Init+0x104>)
 8000c5e:	f006 fb29 	bl	80072b4 <HAL_RTC_SetTime>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c68:	f7ff ff98 	bl	8000b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000c70:	2309      	movs	r3, #9
 8000c72:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000c74:	2309      	movs	r3, #9
 8000c76:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c78:	2316      	movs	r3, #22
 8000c7a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <MX_RTC_Init+0x104>)
 8000c84:	f006 fc0e 	bl	80074a4 <HAL_RTC_SetDate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000c8e:	f7ff ff85 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1990);
 8000c92:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000c96:	2101      	movs	r1, #1
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_RTC_Init+0x104>)
 8000c9a:	f006 fd93 	bl	80077c4 <HAL_RTCEx_BKUPWrite>
 8000c9e:	e000      	b.n	8000ca2 <MX_RTC_Init+0xfa>
		return;
 8000ca0:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40002800 	.word	0x40002800
 8000cac:	2000248c 	.word	0x2000248c

08000cb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <HAL_RTC_MspInit+0x50>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d111      	bne.n	8000cf6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 f983 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000cec:	f7ff ff56 	bl	8000b9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_RTC_MspInit+0x54>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40002800 	.word	0x40002800
 8000d04:	42470e3c 	.word	0x42470e3c

08000d08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_SPI1_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d54:	220a      	movs	r2, #10
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d5a:	f006 fd4d 	bl	80077f8 <HAL_SPI_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d64:	f7ff ff1a 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200024ac 	.word	0x200024ac
 8000d70:	40013000 	.word	0x40013000

08000d74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_SPI_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_SPI_MspInit+0x8c>)
 8000dea:	f001 fed1 	bl	8002b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_MspInit+0x54>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_MspInit+0x54>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x54>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_MspInit+0x54>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_MspInit+0x54>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_MspInit+0x54>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
 8000e4a:	f001 f9ef 	bl	800222c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e88:	f107 020c 	add.w	r2, r7, #12
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 f878 	bl	8006f88 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e98:	f006 f862 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 8000e9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_InitTick+0xd4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_InitTick+0xd8>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_InitTick+0xdc>)
 8000eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_InitTick+0xd8>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ed4:	f006 ff20 	bl	8007d18 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d11b      	bne.n	8000f1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ee8:	f006 ff66 	bl	8007db8 <HAL_TIM_Base_Start_IT>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000efa:	201a      	movs	r0, #26
 8000efc:	f001 f9b2 	bl	8002264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d808      	bhi.n	8000f18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	201a      	movs	r0, #26
 8000f0c:	f001 f98e 	bl	800222c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_InitTick+0xe0>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e002      	b.n	8000f1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3730      	adds	r7, #48	; 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	20002504 	.word	0x20002504
 8000f38:	40014800 	.word	0x40014800
 8000f3c:	20000004 	.word	0x20000004

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream0_IRQHandler+0x10>)
 8000f72:	f001 fb89 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000242c 	.word	0x2000242c

08000f80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream1_IRQHandler+0x10>)
 8000f86:	f001 fb7f 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000278c 	.word	0x2000278c

08000f94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream2_IRQHandler+0x10>)
 8000f9a:	f001 fb75 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000290c 	.word	0x2000290c

08000fa8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Stream3_IRQHandler+0x10>)
 8000fae:	f001 fb6b 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000296c 	.word	0x2000296c

08000fbc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Stream4_IRQHandler+0x10>)
 8000fc2:	f001 fb61 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000284c 	.word	0x2000284c

08000fd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream6_IRQHandler+0x10>)
 8000fd6:	f001 fb57 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200027ec 	.word	0x200027ec

08000fe4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000fea:	f007 fc09 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000254c 	.word	0x2000254c

08000ff8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ffe:	f007 fbff 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000254c 	.word	0x2000254c

0800100c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001012:	f007 fbf5 	bl	8008800 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001018:	f007 fbf2 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000254c 	.word	0x2000254c
 8001024:	20002504 	.word	0x20002504

08001028 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_CC_IRQHandler+0x10>)
 800102e:	f007 fbe7 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000254c 	.word	0x2000254c

0800103c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM2_IRQHandler+0x10>)
 8001042:	f007 fbdd 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20002594 	.word	0x20002594

08001050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM3_IRQHandler+0x10>)
 8001056:	f007 fbd3 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200025dc 	.word	0x200025dc

08001064 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM4_IRQHandler+0x10>)
 800106a:	f007 fbc9 	bl	8008800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20002624 	.word	0x20002624

08001078 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <I2C1_EV_IRQHandler+0x10>)
 800107e:	f002 faed 	bl	800365c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200023d8 	.word	0x200023d8

0800108c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <I2C1_ER_IRQHandler+0x10>)
 8001092:	f002 fc54 	bl	800393e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200023d8 	.word	0x200023d8

080010a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART1_IRQHandler+0x10>)
 80010a6:	f008 fe7f 	bl	8009da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200029cc 	.word	0x200029cc

080010b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Stream7_IRQHandler+0x10>)
 80010ba:	f001 fae5 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200028ac 	.word	0x200028ac

080010c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA2_Stream1_IRQHandler+0x10>)
 80010ce:	f001 fadb 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000266c 	.word	0x2000266c

080010dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA2_Stream2_IRQHandler+0x10>)
 80010e2:	f001 fad1 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200026cc 	.word	0x200026cc

080010f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <OTG_FS_IRQHandler+0x10>)
 80010f6:	f004 f9c2 	bl	800547e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000751c 	.word	0x2000751c

08001104 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA2_Stream5_IRQHandler+0x10>)
 800110a:	f001 fabd 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20002a54 	.word	0x20002a54

08001118 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA2_Stream6_IRQHandler+0x10>)
 800111e:	f001 fab3 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000272c 	.word	0x2000272c

0800112c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <DMA2_Stream7_IRQHandler+0x10>)
 8001132:	f001 faa9 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20002ab4 	.word	0x20002ab4

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f011 fae1 	bl	8012764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <MX_TIM1_Init+0x170>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80011b4:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4840      	ldr	r0, [pc, #256]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011d0:	f006 fda2 	bl	8007d18 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011da:	f7ff fcdf 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e8:	4619      	mov	r1, r3
 80011ea:	4839      	ldr	r0, [pc, #228]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011ec:	f007 fd6e 	bl	8008ccc <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f6:	f7ff fcd1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	4835      	ldr	r0, [pc, #212]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011fc:	f006 fe3e 	bl	8007e7c <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001206:	f7ff fcc9 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001216:	4619      	mov	r1, r3
 8001218:	482d      	ldr	r0, [pc, #180]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800121a:	f008 fbad 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001224:	f7ff fcba 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800124e:	f007 fc7b 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001258:	f7ff fca0 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800125c:	2370      	movs	r3, #112	; 0x70
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800126a:	f007 fc6d 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001274:	f7ff fc92 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2208      	movs	r2, #8
 800127e:	4619      	mov	r1, r3
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_TIM1_Init+0x16c>)
 8001282:	f007 fc61 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800128c:	f7ff fc86 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80012b4:	f008 fbce 	bl	8009a54 <HAL_TIMEx_ConfigBreakDeadTime>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80012be:	f7ff fc6d 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80012c4:	f000 fc40 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3758      	adds	r7, #88	; 0x58
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000254c 	.word	0x2000254c
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800131e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4828      	ldr	r0, [pc, #160]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001332:	f006 fcf1 	bl	8007d18 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff fc2e 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800134e:	f007 fcbd 	bl	8008ccc <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001358:	f7ff fc20 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800135e:	f006 fd8d 	bl	8007e7c <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001368:	f7ff fc18 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800137c:	f008 fafc 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001386:	f7ff fc09 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013a2:	f007 fbd1 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013ac:	f7ff fbf6 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2208      	movs	r2, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013b8:	f007 fbc6 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013c2:	f7ff fbeb 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013c8:	f000 fbbe 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20002594 	.word	0x20002594

080013d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_TIM3_Init+0x110>)
 800140a:	4a38      	ldr	r2, [pc, #224]	; (80014ec <MX_TIM3_Init+0x114>)
 800140c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_TIM3_Init+0x110>)
 800141c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <MX_TIM3_Init+0x110>)
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142e:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001430:	f006 fc72 	bl	8007d18 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800143a:	f7ff fbaf 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <MX_TIM3_Init+0x110>)
 800144c:	f007 fc3e 	bl	8008ccc <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001456:	f7ff fba1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800145a:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_TIM3_Init+0x110>)
 800145c:	f006 fd0e 	bl	8007e7c <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001466:	f7ff fb99 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	481b      	ldr	r0, [pc, #108]	; (80014e8 <MX_TIM3_Init+0x110>)
 800147a:	f008 fa7d 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001484:	f7ff fb8a 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014a0:	f007 fb52 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014aa:	f7ff fb77 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2208      	movs	r2, #8
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014b6:	f007 fb47 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014c0:	f7ff fb6c 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	220c      	movs	r2, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014cc:	f007 fb3c 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014d6:	f7ff fb61 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014dc:	f000 fb34 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	; 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200025dc 	.word	0x200025dc
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <MX_TIM4_Init+0xdc>)
 800151e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001542:	f006 fbe9 	bl	8007d18 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800154c:	f7ff fb26 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001554:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800155e:	f007 fbb5 	bl	8008ccc <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001568:	f7ff fb18 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800156e:	f006 fe8f 	bl	8008290 <HAL_TIM_IC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001578:	f7ff fb10 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800158c:	f008 f9f4 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001596:	f7ff fb01 	bl	8000b9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2204      	movs	r2, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM4_Init+0xd8>)
 80015b2:	f007 fa2d 	bl	8008a10 <HAL_TIM_IC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80015bc:	f7ff faee 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20002624 	.word	0x20002624
 80015cc:	40000800 	.word	0x40000800

080015d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_TIM_Base_MspInit+0x1a8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 80d2 	bne.w	8001798 <HAL_TIM_Base_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	4a5f      	ldr	r2, [pc, #380]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6453      	str	r3, [r2, #68]	; 0x44
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001610:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001612:	4a5c      	ldr	r2, [pc, #368]	; (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001618:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800161c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161e:	4b58      	ldr	r3, [pc, #352]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800164a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001656:	484a      	ldr	r0, [pc, #296]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001658:	f000 fe20 	bl	800229c <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8001662:	f7ff fa9b 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a45      	ldr	r2, [pc, #276]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800167a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800167e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80016b8:	4833      	ldr	r0, [pc, #204]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ba:	f000 fdef 	bl	800229c <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 80016c4:	f7ff fa6a 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016d6:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016dc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001704:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800171a:	481d      	ldr	r0, [pc, #116]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800171c:	f000 fdbe 	bl	800229c <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 8001726:	f7ff fa39 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	2018      	movs	r0, #24
 800173c:	f000 fd76 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001740:	2018      	movs	r0, #24
 8001742:	f000 fd8f 	bl	8002264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	2019      	movs	r0, #25
 800174c:	f000 fd6e 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001750:	2019      	movs	r0, #25
 8001752:	f000 fd87 	bl	8002264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	210f      	movs	r1, #15
 800175a:	201a      	movs	r0, #26
 800175c:	f000 fd66 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001760:	201a      	movs	r0, #26
 8001762:	f000 fd7f 	bl	8002264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	201b      	movs	r0, #27
 800176c:	f000 fd5e 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001770:	201b      	movs	r0, #27
 8001772:	f000 fd77 	bl	8002264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001776:	e1cb      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
 8001778:	40010000 	.word	0x40010000
 800177c:	40023800 	.word	0x40023800
 8001780:	2000266c 	.word	0x2000266c
 8001784:	40026428 	.word	0x40026428
 8001788:	200026cc 	.word	0x200026cc
 800178c:	40026440 	.word	0x40026440
 8001790:	2000272c 	.word	0x2000272c
 8001794:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	f040 8090 	bne.w	80018c4 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a40      	ldr	r2, [pc, #256]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <HAL_TIM_Base_MspInit+0x2e8>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017cc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fe:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001808:	f000 fd48 	bl	800229c <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 8001812:	f7ff f9c3 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001836:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800183a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800183e:	2240      	movs	r2, #64	; 0x40
 8001840:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001856:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800185a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001868:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001876:	f000 fd11 	bl	800229c <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_MspInit+0x2b4>
      Error_Handler();
 8001880:	f7ff f98c 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
 800188a:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2105      	movs	r1, #5
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 fcc3 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a6:	201c      	movs	r0, #28
 80018a8:	f000 fcdc 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 80018ac:	e130      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	2000278c 	.word	0x2000278c
 80018b8:	40026028 	.word	0x40026028
 80018bc:	200027ec 	.word	0x200027ec
 80018c0:	400260a0 	.word	0x400260a0
  else if(tim_baseHandle->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a93      	ldr	r2, [pc, #588]	; (8001b18 <HAL_TIM_Base_MspInit+0x548>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 80b6 	bne.w	8001a3c <HAL_TIM_Base_MspInit+0x46c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018ee:	4a8d      	ldr	r2, [pc, #564]	; (8001b24 <HAL_TIM_Base_MspInit+0x554>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b87      	ldr	r3, [pc, #540]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b86      	ldr	r3, [pc, #536]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190e:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001914:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800191e:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001924:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192c:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001932:	487b      	ldr	r0, [pc, #492]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001934:	f000 fcb2 	bl	800229c <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_TIM_Base_MspInit+0x372>
      Error_Handler();
 800193e:	f7ff f92d 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
 8001948:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a73      	ldr	r2, [pc, #460]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800195c:	4a73      	ldr	r2, [pc, #460]	; (8001b2c <HAL_TIM_Base_MspInit+0x55c>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8001960:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001962:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b6e      	ldr	r3, [pc, #440]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800197e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001982:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800198c:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001992:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001994:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001998:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80019a0:	4861      	ldr	r0, [pc, #388]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019a2:	f000 fc7b 	bl	800229c <HAL_DMA_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_TIM_Base_MspInit+0x3e0>
      Error_Handler();
 80019ac:	f7ff f8f6 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80019bc:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019be:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_TIM_Base_MspInit+0x564>)
 80019c0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019c4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019fa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a02:	484b      	ldr	r0, [pc, #300]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a04:	f000 fc4a 	bl	800229c <HAL_DMA_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_TIM_Base_MspInit+0x442>
      Error_Handler();
 8001a0e:	f7ff f8c5 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a22:	621a      	str	r2, [r3, #32]
 8001a24:	4a42      	ldr	r2, [pc, #264]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	201d      	movs	r0, #29
 8001a30:	f000 fbfc 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a34:	201d      	movs	r0, #29
 8001a36:	f000 fc15 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e069      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
  else if(tim_baseHandle->Instance==TIM4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <HAL_TIM_Base_MspInit+0x568>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d164      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IC_IN_TIM4_CH2_Pin;
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_IN_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4828      	ldr	r0, [pc, #160]	; (8001b3c <HAL_TIM_Base_MspInit+0x56c>)
 8001a9a:	f001 f879 	bl	8002b90 <HAL_GPIO_Init>
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_TIM_Base_MspInit+0x574>)
 8001aa2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001adc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001ae4:	4816      	ldr	r0, [pc, #88]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ae6:	f000 fbd9 	bl	800229c <HAL_DMA_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_MspInit+0x524>
      Error_Handler();
 8001af0:	f7ff f854 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2105      	movs	r1, #5
 8001b04:	201e      	movs	r0, #30
 8001b06:	f000 fb91 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b0a:	201e      	movs	r0, #30
 8001b0c:	f000 fbaa 	bl	8002264 <HAL_NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	2000284c 	.word	0x2000284c
 8001b24:	40026070 	.word	0x40026070
 8001b28:	200028ac 	.word	0x200028ac
 8001b2c:	400260b8 	.word	0x400260b8
 8001b30:	2000290c 	.word	0x2000290c
 8001b34:	40026040 	.word	0x40026040
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	2000296c 	.word	0x2000296c
 8001b44:	40026058 	.word	0x40026058

08001b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_TIM_MspPostInit+0x138>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13e      	bne.n	8001be8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a44      	ldr	r2, [pc, #272]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a3d      	ldr	r2, [pc, #244]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4832      	ldr	r0, [pc, #200]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001bc0:	f000 ffe6 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	482a      	ldr	r0, [pc, #168]	; (8001c8c <HAL_TIM_MspPostInit+0x144>)
 8001be2:	f000 ffd5 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be6:	e047      	b.n	8001c78 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d11f      	bne.n	8001c32 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001c0e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4817      	ldr	r0, [pc, #92]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001c2c:	f000 ffb0 	bl	8002b90 <HAL_GPIO_Init>
}
 8001c30:	e022      	b.n	8001c78 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_TIM_MspPostInit+0x148>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d11d      	bne.n	8001c78 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001c58:	2313      	movs	r3, #19
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001c74:	f000 ff8c 	bl	8002b90 <HAL_GPIO_Init>
}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	; 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40000400 	.word	0x40000400

08001c94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART1_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f007 ff28 	bl	8009b20 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f7fe ff61 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200029cc 	.word	0x200029cc
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_USART2_UART_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f007 fefe 	bl	8009b20 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f7fe ff37 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20002a10 	.word	0x20002a10
 8001d38:	40004400 	.word	0x40004400

08001d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a76      	ldr	r2, [pc, #472]	; (8001f34 <HAL_UART_MspInit+0x1f8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 80a5 	bne.w	8001eaa <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d70:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001daa:	2307      	movs	r3, #7
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4861      	ldr	r0, [pc, #388]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001db6:	f000 feeb 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4859      	ldr	r0, [pc, #356]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001dd8:	f000 feda 	bl	8002b90 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001ddc:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001dde:	4a59      	ldr	r2, [pc, #356]	; (8001f44 <HAL_UART_MspInit+0x208>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001de2:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001de4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b55      	ldr	r3, [pc, #340]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e1e:	4848      	ldr	r0, [pc, #288]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e20:	f000 fa3c 	bl	800229c <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001e2a:	f7fe feb7 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
 8001e34:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e3c:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_UART_MspInit+0x210>)
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e74:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e7c:	4832      	ldr	r0, [pc, #200]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e7e:	f000 fa0d 	bl	800229c <HAL_DMA_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8001e88:	f7fe fe88 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2105      	movs	r1, #5
 8001e9c:	2025      	movs	r0, #37	; 0x25
 8001e9e:	f000 f9c5 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ea2:	2025      	movs	r0, #37	; 0x25
 8001ea4:	f000 f9de 	bl	8002264 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ea8:	e040      	b.n	8001f2c <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_UART_MspInit+0x214>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d13b      	bne.n	8001f2c <HAL_UART_MspInit+0x1f0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eec:	2304      	movs	r3, #4
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efc:	2307      	movs	r3, #7
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001f08:	f000 fe42 	bl	8002b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001f28:	f000 fe32 	bl	8002b90 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	20002a54 	.word	0x20002a54
 8001f44:	40026488 	.word	0x40026488
 8001f48:	20002ab4 	.word	0x20002ab4
 8001f4c:	400264b8 	.word	0x400264b8
 8001f50:	40004400 	.word	0x40004400

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff f8df 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f010 fbbd 	bl	8012700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fd4f 	bl	8000a28 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001f98:	08012d3c 	.word	0x08012d3c
  ldr r2, =_sbss
 8001f9c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001fa0:	200091d4 	.word	0x200091d4

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f920 	bl	8002216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f7fe ff40 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7fe ff12 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008
 8002010:	20002b14 	.word	0x20002b14

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20002b14 	.word	0x20002b14

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db12      	blt.n	800214c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	490a      	ldr	r1, [pc, #40]	; (8002158 <__NVIC_DisableIRQ+0x44>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	3320      	adds	r3, #32
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002140:	f3bf 8f4f 	dsb	sy
}
 8002144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002146:	f3bf 8f6f 	isb	sy
}
 800214a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff28 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223e:	f7ff ff3d 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7ff ffb1 	bl	80021b0 <NVIC_EncodePriority>
 800224e:	4602      	mov	r2, r0
 8002250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff80 	bl	800215c <__NVIC_SetPriority>
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff30 	bl	80020d8 <__NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff40 	bl	8002114 <__NVIC_DisableIRQ>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff feb4 	bl	8002014 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e099      	b.n	80023ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e00f      	b.n	80022fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fe9b 	bl	8002014 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d908      	bls.n	80022fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e078      	b.n	80023ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e8      	bne.n	80022da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_DMA_Init+0x158>)
 8002314:	4013      	ands	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	2b04      	cmp	r3, #4
 8002352:	d107      	bne.n	8002364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4313      	orrs	r3, r2
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	2b04      	cmp	r3, #4
 800238c:	d117      	bne.n	80023be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fb79 	bl	8002a98 <DMA_CheckFifoParam>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ba:	2301      	movs	r3, #1
 80023bc:	e016      	b.n	80023ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fb30 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	223f      	movs	r2, #63	; 0x3f
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f010803f 	.word	0xf010803f

080023f8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e050      	b.n	80024ac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d101      	bne.n	800241a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	e048      	b.n	80024ac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2221      	movs	r2, #33	; 0x21
 8002458:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fae6 	bl	8002a2c <DMA_CalcBaseAndBitshift>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	223f      	movs	r2, #63	; 0x3f
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_DMA_Start_IT+0x26>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e040      	b.n	800255c <HAL_DMA_Start_IT+0xa8>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d12f      	bne.n	800254e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2202      	movs	r2, #2
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa64 	bl	80029d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0216 	orr.w	r2, r2, #22
 8002522:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0208 	orr.w	r2, r2, #8
 800253a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e005      	b.n	800255a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002572:	f7ff fd4f 	bl	8002014 <HAL_GetTick>
 8002576:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d008      	beq.n	8002596 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e052      	b.n	800263c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0216 	bic.w	r2, r2, #22
 80025a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_DMA_Abort+0x62>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0208 	bic.w	r2, r2, #8
 80025d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e6:	e013      	b.n	8002610 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e8:	f7ff fd14 	bl	8002014 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d90c      	bls.n	8002610 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e015      	b.n	800263c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e4      	bne.n	80025e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	223f      	movs	r2, #63	; 0x3f
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00c      	b.n	800267c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2205      	movs	r2, #5
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002694:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <HAL_DMA_IRQHandler+0x248>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a8e      	ldr	r2, [pc, #568]	; (80028d4 <HAL_DMA_IRQHandler+0x24c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2208      	movs	r2, #8
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2208      	movs	r2, #8
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 0202 	orr.w	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	2204      	movs	r2, #4
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2210      	movs	r2, #16
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d043      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03c      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2210      	movs	r2, #16
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d018      	beq.n	80027ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d024      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
 80027b6:	e01f      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e016      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0208 	bic.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2220      	movs	r2, #32
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 808f 	beq.w	8002928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8087 	beq.w	8002928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2220      	movs	r2, #32
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b05      	cmp	r3, #5
 8002830:	d136      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0216 	bic.w	r2, r2, #22
 8002840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_DMA_IRQHandler+0x1da>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0208 	bic.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	223f      	movs	r2, #63	; 0x3f
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07e      	beq.n	8002994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
        }
        return;
 800289e:	e079      	b.n	8002994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e02c      	b.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000
 80028d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e01e      	b.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0210 	bic.w	r2, r2, #16
 8002906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	2b00      	cmp	r3, #0
 800292e:	d032      	beq.n	8002996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d022      	beq.n	8002982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2205      	movs	r2, #5
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3301      	adds	r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	d307      	bcc.n	8002970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f2      	bne.n	8002954 <HAL_DMA_IRQHandler+0x2cc>
 800296e:	e000      	b.n	8002972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e000      	b.n	8002996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002994:	bf00      	nop
    }
  }
}
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029aa:	b2db      	uxtb	r3, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3b10      	subs	r3, #16
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <DMA_CalcBaseAndBitshift+0x64>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a46:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <DMA_CalcBaseAndBitshift+0x68>)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d909      	bls.n	8002a6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	1d1a      	adds	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a6c:	e007      	b.n	8002a7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	aaaaaaab 	.word	0xaaaaaaab
 8002a94:	08012834 	.word	0x08012834

08002a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11f      	bne.n	8002af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d856      	bhi.n	8002b66 <DMA_CheckFifoParam+0xce>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <DMA_CheckFifoParam+0x28>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002ae3 	.word	0x08002ae3
 8002ac8:	08002ad1 	.word	0x08002ad1
 8002acc:	08002b67 	.word	0x08002b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d046      	beq.n	8002b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e043      	b.n	8002b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aea:	d140      	bne.n	8002b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af0:	e03d      	b.n	8002b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	d121      	bne.n	8002b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d837      	bhi.n	8002b72 <DMA_CheckFifoParam+0xda>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <DMA_CheckFifoParam+0x70>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b1f 	.word	0x08002b1f
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002b31 	.word	0x08002b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e030      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d025      	beq.n	8002b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2e:	e022      	b.n	8002b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b38:	d11f      	bne.n	8002b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b3e:	e01c      	b.n	8002b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d903      	bls.n	8002b4e <DMA_CheckFifoParam+0xb6>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d003      	beq.n	8002b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b4c:	e018      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      break;
 8002b52:	e015      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00e      	beq.n	8002b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e00b      	b.n	8002b7e <DMA_CheckFifoParam+0xe6>
      break;
 8002b66:	bf00      	nop
 8002b68:	e00a      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e008      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e006      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e159      	b.n	8002e60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 8148 	bne.w	8002e5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a2 	beq.w	8002e5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <HAL_GPIO_Init+0x2e8>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_GPIO_Init+0x2e8>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	; 0x44
 8002d26:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <HAL_GPIO_Init+0x2e8>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_GPIO_Init+0x2ec>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a49      	ldr	r2, [pc, #292]	; (8002e80 <HAL_GPIO_Init+0x2f0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x202>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a48      	ldr	r2, [pc, #288]	; (8002e84 <HAL_GPIO_Init+0x2f4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x1fe>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a47      	ldr	r2, [pc, #284]	; (8002e88 <HAL_GPIO_Init+0x2f8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x1fa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a46      	ldr	r2, [pc, #280]	; (8002e8c <HAL_GPIO_Init+0x2fc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x1f6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a45      	ldr	r2, [pc, #276]	; (8002e90 <HAL_GPIO_Init+0x300>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x1f2>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e008      	b.n	8002d94 <HAL_GPIO_Init+0x204>
 8002d82:	2307      	movs	r3, #7
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x204>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e004      	b.n	8002d94 <HAL_GPIO_Init+0x204>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_Init+0x204>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x204>
 8002d92:	2300      	movs	r3, #0
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	f002 0203 	and.w	r2, r2, #3
 8002d9a:	0092      	lsls	r2, r2, #2
 8002d9c:	4093      	lsls	r3, r2
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da4:	4935      	ldr	r1, [pc, #212]	; (8002e7c <HAL_GPIO_Init+0x2ec>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e54:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <HAL_GPIO_Init+0x304>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b0f      	cmp	r3, #15
 8002e64:	f67f aea2 	bls.w	8002bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020c00 	.word	0x40020c00
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e0bb      	b.n	800302c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	f040 80ab 	bne.w	8003026 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ed0:	4a5c      	ldr	r2, [pc, #368]	; (8003044 <HAL_GPIO_DeInit+0x1ac>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002edc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a54      	ldr	r2, [pc, #336]	; (8003048 <HAL_GPIO_DeInit+0x1b0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_DeInit+0x96>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a53      	ldr	r2, [pc, #332]	; (800304c <HAL_GPIO_DeInit+0x1b4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_DeInit+0x92>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a52      	ldr	r2, [pc, #328]	; (8003050 <HAL_GPIO_DeInit+0x1b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_DeInit+0x8e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a51      	ldr	r2, [pc, #324]	; (8003054 <HAL_GPIO_DeInit+0x1bc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_DeInit+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a50      	ldr	r2, [pc, #320]	; (8003058 <HAL_GPIO_DeInit+0x1c0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_DeInit+0x86>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_DeInit+0x98>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_DeInit+0x98>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_DeInit+0x98>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_DeInit+0x98>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_DeInit+0x98>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d132      	bne.n	8002fa6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4944      	ldr	r1, [pc, #272]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f4e:	4b43      	ldr	r3, [pc, #268]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4941      	ldr	r1, [pc, #260]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	493d      	ldr	r1, [pc, #244]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	493a      	ldr	r1, [pc, #232]	; (800305c <HAL_GPIO_DeInit+0x1c4>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f88:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_GPIO_DeInit+0x1ac>)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	482a      	ldr	r0, [pc, #168]	; (8003044 <HAL_GPIO_DeInit+0x1ac>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2103      	movs	r1, #3
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	08d2      	lsrs	r2, r2, #3
 8002fdc:	4019      	ands	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2103      	movs	r1, #3
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	2101      	movs	r1, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2103      	movs	r1, #3
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f af40 	bls.w	8002eb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40013800 	.word	0x40013800
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400
 8003050:	40020800 	.word	0x40020800
 8003054:	40020c00 	.word	0x40020c00
 8003058:	40021000 	.word	0x40021000
 800305c:	40013c00 	.word	0x40013c00

08003060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003070:	787b      	ldrb	r3, [r7, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800307c:	e003      	b.n	8003086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	041a      	lsls	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	619a      	str	r2, [r3, #24]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e12b      	b.n	80032fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fbfa 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f8:	f003 ff1e 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a81      	ldr	r2, [pc, #516]	; (8003308 <HAL_I2C_Init+0x274>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d807      	bhi.n	8003118 <HAL_I2C_Init+0x84>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a80      	ldr	r2, [pc, #512]	; (800330c <HAL_I2C_Init+0x278>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e006      	b.n	8003126 <HAL_I2C_Init+0x92>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a7d      	ldr	r2, [pc, #500]	; (8003310 <HAL_I2C_Init+0x27c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0e7      	b.n	80032fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a78      	ldr	r2, [pc, #480]	; (8003314 <HAL_I2C_Init+0x280>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0c9b      	lsrs	r3, r3, #18
 8003138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_I2C_Init+0x274>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d802      	bhi.n	8003168 <HAL_I2C_Init+0xd4>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	e009      	b.n	800317c <HAL_I2C_Init+0xe8>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_I2C_Init+0x284>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	3301      	adds	r3, #1
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	495c      	ldr	r1, [pc, #368]	; (8003308 <HAL_I2C_Init+0x274>)
 8003198:	428b      	cmp	r3, r1
 800319a:	d819      	bhi.n	80031d0 <HAL_I2C_Init+0x13c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e59      	subs	r1, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031b0:	400b      	ands	r3, r1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_I2C_Init+0x138>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e59      	subs	r1, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	e051      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e04f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d111      	bne.n	80031fc <HAL_I2C_Init+0x168>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e012      	b.n	8003222 <HAL_I2C_Init+0x18e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x196>
 8003226:	2301      	movs	r3, #1
 8003228:	e022      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10e      	bne.n	8003250 <HAL_I2C_Init+0x1bc>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e58      	subs	r0, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	440b      	add	r3, r1
 8003240:	fbb0 f3f3 	udiv	r3, r0, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324e:	e00f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	6809      	ldr	r1, [r1, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6911      	ldr	r1, [r2, #16]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	000186a0 	.word	0x000186a0
 800330c:	001e847f 	.word	0x001e847f
 8003310:	003d08ff 	.word	0x003d08ff
 8003314:	431bde83 	.word	0x431bde83
 8003318:	10624dd3 	.word	0x10624dd3

0800331c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e021      	b.n	8003372 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fb40 	bl	80009cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003398:	2b28      	cmp	r3, #40	; 0x28
 800339a:	f040 811e 	bne.w	80035da <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e116      	b.n	80035dc <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e10f      	b.n	80035dc <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033d2:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b2a      	cmp	r3, #42	; 0x2a
 80033de:	d127      	bne.n	8003430 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ee:	d14c      	bne.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d048      	beq.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003406:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	4a75      	ldr	r2, [pc, #468]	; (80035e4 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800340e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f915 	bl	8002644 <HAL_DMA_Abort_IT>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d034      	beq.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800342a:	4610      	mov	r0, r2
 800342c:	4798      	blx	r3
 800342e:	e02c      	b.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b29      	cmp	r3, #41	; 0x29
 800343a:	d126      	bne.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344a:	d11e      	bne.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800345a:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 800346a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f8e7 	bl	8002644 <HAL_DMA_Abort_IT>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003486:	4610      	mov	r0, r2
 8003488:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d007      	beq.n	80034a8 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	222a      	movs	r2, #42	; 0x2a
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d022      	beq.n	8003538 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8003500:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	2200      	movs	r2, #0
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3310      	adds	r3, #16
 800351c:	4619      	mov	r1, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	f7fe ffc4 	bl	80024b4 <HAL_DMA_Start_IT>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13d      	bne.n	80035b2 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 8003536:	e013      	b.n	8003560 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2228      	movs	r2, #40	; 0x28
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e03d      	b.n	80035dc <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800356e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359c:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035ac:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e014      	b.n	80035dc <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0210 	orr.w	r2, r3, #16
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
  }
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08004ff5 	.word	0x08004ff5
 80035e8:	08004dd1 	.word	0x08004dd1
 80035ec:	08004f7b 	.word	0x08004f7b

080035f0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b20      	cmp	r3, #32
 8003602:	d124      	bne.n	800364e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2228      	movs	r2, #40	; 0x28
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d007      	beq.n	800362a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003648:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d003      	beq.n	8003694 <HAL_I2C_EV_IRQHandler+0x38>
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	f040 80c1 	bne.w	8003816 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_I2C_EV_IRQHandler+0x6e>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036b4:	d003      	beq.n	80036be <HAL_I2C_EV_IRQHandler+0x62>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_EV_IRQHandler+0x66>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_I2C_EV_IRQHandler+0x68>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	f000 8132 	beq.w	800392e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x92>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	0a5b      	lsrs	r3, r3, #9
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d006      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f001 fd61 	bl	80051a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fd57 	bl	800419a <I2C_Master_SB>
 80036ec:	e092      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0xb2>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	0a5b      	lsrs	r3, r3, #9
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fdcd 	bl	80042a6 <I2C_Master_ADD10>
 800370c:	e082      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xd2>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	0a5b      	lsrs	r3, r3, #9
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fde7 	bl	80042fa <I2C_Master_ADDR>
 800372c:	e072      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03b      	beq.n	80037b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003748:	f000 80f3 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	09db      	lsrs	r3, r3, #7
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f9c7 	bl	8003b04 <I2C_MasterTransmit_TXE>
 8003776:	e04d      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80d6 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	0a5b      	lsrs	r3, r3, #9
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80cf 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	2b21      	cmp	r3, #33	; 0x21
 8003798:	d103      	bne.n	80037a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa4e 	bl	8003c3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a0:	e0c7      	b.n	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	f040 80c4 	bne.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fabc 	bl	8003d28 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b0:	e0bf      	b.n	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c0:	f000 80b7 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00f      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x194>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_I2C_EV_IRQHandler+0x194>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fb31 	bl	8003e50 <I2C_MasterReceive_RXNE>
 80037ee:	e011      	b.n	8003814 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 809a 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	0a5b      	lsrs	r3, r3, #9
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8093 	beq.w	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fbda 	bl	8003fc6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003812:	e08e      	b.n	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003814:	e08d      	b.n	8003932 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e007      	b.n	8003838 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <HAL_I2C_EV_IRQHandler+0x20e>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	0a5b      	lsrs	r3, r3, #9
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003860:	69b9      	ldr	r1, [r7, #24]
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 ff98 	bl	8004798 <I2C_Slave_ADDR>
 8003868:	e066      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x22e>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	0a5b      	lsrs	r3, r3, #9
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ffd2 	bl	800482c <I2C_Slave_STOPF>
 8003888:	e056      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	2b21      	cmp	r3, #33	; 0x21
 800388e:	d002      	beq.n	8003896 <HAL_I2C_EV_IRQHandler+0x23a>
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	2b29      	cmp	r3, #41	; 0x29
 8003894:	d125      	bne.n	80038e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	09db      	lsrs	r3, r3, #7
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00f      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x266>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0a9b      	lsrs	r3, r3, #10
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x266>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	089b      	lsrs	r3, r3, #2
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 feae 	bl	800461c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038c0:	e039      	b.n	8003936 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d033      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x2da>
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	0a5b      	lsrs	r3, r3, #9
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02d      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fedb 	bl	8004696 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e0:	e029      	b.n	8003936 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00f      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0x2b2>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	0a9b      	lsrs	r3, r3, #10
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_I2C_EV_IRQHandler+0x2b2>
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fee6 	bl	80046d8 <I2C_SlaveReceive_RXNE>
 800390c:	e014      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	0a5b      	lsrs	r3, r3, #9
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 ff14 	bl	8004754 <I2C_SlaveReceive_BTF>
 800392c:	e004      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003936:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b08a      	sub	sp, #40	; 0x28
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003960:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <HAL_I2C_ER_IRQHandler+0x4e>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800398a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00e      	beq.n	80039b6 <HAL_I2C_ER_IRQHandler+0x78>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80039b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0a9b      	lsrs	r3, r3, #10
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d03f      	beq.n	8003a42 <HAL_I2C_ER_IRQHandler+0x104>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d039      	beq.n	8003a42 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80039ce:	7efb      	ldrb	r3, [r7, #27]
 80039d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80039e8:	7ebb      	ldrb	r3, [r7, #26]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d112      	bne.n	8003a14 <HAL_I2C_ER_IRQHandler+0xd6>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <HAL_I2C_ER_IRQHandler+0xd6>
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b21      	cmp	r3, #33	; 0x21
 80039f8:	d008      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b29      	cmp	r3, #41	; 0x29
 80039fe:	d005      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0xce>
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b28      	cmp	r3, #40	; 0x28
 8003a04:	d106      	bne.n	8003a14 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b21      	cmp	r3, #33	; 0x21
 8003a0a:	d103      	bne.n	8003a14 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f001 f83d 	bl	8004a8c <I2C_Slave_AF>
 8003a12:	e016      	b.n	8003a42 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a1c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a26:	7efb      	ldrb	r3, [r7, #27]
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d002      	beq.n	8003a32 <HAL_I2C_ER_IRQHandler+0xf4>
 8003a2c:	7efb      	ldrb	r3, [r7, #27]
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d107      	bne.n	8003a42 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a40:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	0adb      	lsrs	r3, r3, #11
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0x12e>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003a6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 f874 	bl	8004b6c <I2C_ITError>
  }
}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d150      	bne.n	8003bcc <I2C_MasterTransmit_TXE+0xc8>
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	2b21      	cmp	r3, #33	; 0x21
 8003b2e:	d14d      	bne.n	8003bcc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d01d      	beq.n	8003b72 <I2C_MasterTransmit_TXE+0x6e>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d01a      	beq.n	8003b72 <I2C_MasterTransmit_TXE+0x6e>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b42:	d016      	beq.n	8003b72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2211      	movs	r2, #17
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ff8e 	bl	8003a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b70:	e060      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d107      	bne.n	8003bbc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ff87 	bl	8003ac8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bba:	e03b      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff61 	bl	8003a8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bca:	e033      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	2b21      	cmp	r3, #33	; 0x21
 8003bd0:	d005      	beq.n	8003bde <I2C_MasterTransmit_TXE+0xda>
 8003bd2:	7bbb      	ldrb	r3, [r7, #14]
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d12d      	bne.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	d12a      	bne.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003bf8:	e01c      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d103      	bne.n	8003c0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f88e 	bl	8003d28 <I2C_MemoryTransmit_TXE_BTF>
}
 8003c0c:	e012      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c32:	e7ff      	b.n	8003c34 <I2C_MasterTransmit_TXE+0x130>
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b21      	cmp	r3, #33	; 0x21
 8003c54:	d164      	bne.n	8003d20 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d012      	beq.n	8003c86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	781a      	ldrb	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c84:	e04c      	b.n	8003d20 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d01d      	beq.n	8003cc8 <I2C_MasterTransmit_BTF+0x8c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d01a      	beq.n	8003cc8 <I2C_MasterTransmit_BTF+0x8c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c98:	d016      	beq.n	8003cc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ca8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2211      	movs	r2, #17
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fee3 	bl	8003a8c <HAL_I2C_MasterTxCpltCallback>
}
 8003cc6:	e02b      	b.n	8003d20 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d107      	bne.n	8003d12 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fedc 	bl	8003ac8 <HAL_I2C_MemTxCpltCallback>
}
 8003d10:	e006      	b.n	8003d20 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff feb6 	bl	8003a8c <HAL_I2C_MasterTxCpltCallback>
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11d      	bne.n	8003d7c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10b      	bne.n	8003d60 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003d5e:	e073      	b.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	121b      	asrs	r3, r3, #8
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d7a:	e065      	b.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10b      	bne.n	8003d9c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d9a:	e055      	b.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d151      	bne.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b22      	cmp	r3, #34	; 0x22
 8003da8:	d10d      	bne.n	8003dc6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dc4:	e040      	b.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b21      	cmp	r3, #33	; 0x21
 8003dd4:	d112      	bne.n	8003dfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dfa:	e025      	b.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d120      	bne.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b21      	cmp	r3, #33	; 0x21
 8003e0a:	d11d      	bne.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fe40 	bl	8003ac8 <HAL_I2C_MemTxCpltCallback>
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b22      	cmp	r3, #34	; 0x22
 8003e62:	f040 80ac 	bne.w	8003fbe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d921      	bls.n	8003eb8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	f040 808c 	bne.w	8003fbe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003eb6:	e082      	b.n	8003fbe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d075      	beq.n	8003fac <I2C_MasterReceive_RXNE+0x15c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d002      	beq.n	8003ecc <I2C_MasterReceive_RXNE+0x7c>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d16f      	bne.n	8003fac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 f939 	bl	8005144 <I2C_WaitOnSTOPRequestThroughIT>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d142      	bne.n	8003f5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10a      	bne.n	8003f48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff fdcb 	bl	8003adc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f46:	e03a      	b.n	8003fbe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2212      	movs	r2, #18
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fda2 	bl	8003aa0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f5c:	e02f      	b.n	8003fbe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f00d f8df 	bl	8011168 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003faa:	e008      	b.n	8003fbe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	605a      	str	r2, [r3, #4]
}
 8003fbc:	e7ff      	b.n	8003fbe <I2C_MasterReceive_RXNE+0x16e>
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d11b      	bne.n	8004016 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004014:	e0bd      	b.n	8004192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d129      	bne.n	8004074 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800402e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00a      	beq.n	800404c <I2C_MasterReceive_BTF+0x86>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d007      	beq.n	800404c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004072:	e08e      	b.n	8004192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d176      	bne.n	800416c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d002      	beq.n	800408a <I2C_MasterReceive_BTF+0xc4>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d108      	bne.n	800409c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e019      	b.n	80040d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d002      	beq.n	80040a8 <I2C_MasterReceive_BTF+0xe2>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d108      	bne.n	80040ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e00a      	b.n	80040d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d007      	beq.n	80040d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800412a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d10a      	bne.n	8004156 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fcc4 	bl	8003adc <HAL_I2C_MemRxCpltCallback>
}
 8004154:	e01d      	b.n	8004192 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2212      	movs	r2, #18
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fc9b 	bl	8003aa0 <HAL_I2C_MasterRxCpltCallback>
}
 800416a:	e012      	b.n	8004192 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d117      	bne.n	80041de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041c8:	e067      	b.n	800429a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
}
 80041dc:	e05d      	b.n	800429a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e6:	d133      	bne.n	8004250 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b21      	cmp	r3, #33	; 0x21
 80041f2:	d109      	bne.n	8004208 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	e008      	b.n	800421a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <I2C_Master_SB+0x92>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	2b00      	cmp	r3, #0
 8004232:	d032      	beq.n	800429a <I2C_Master_SB+0x100>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02d      	beq.n	800429a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424c:	605a      	str	r2, [r3, #4]
}
 800424e:	e024      	b.n	800429a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10e      	bne.n	8004276 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	b29b      	uxth	r3, r3
 800425e:	11db      	asrs	r3, r3, #7
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0306 	and.w	r3, r3, #6
 8004266:	b2db      	uxtb	r3, r3
 8004268:	f063 030f 	orn	r3, r3, #15
 800426c:	b2da      	uxtb	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
}
 8004274:	e011      	b.n	800429a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10d      	bne.n	800429a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	b29b      	uxth	r3, r3
 8004284:	11db      	asrs	r3, r3, #7
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0306 	and.w	r3, r3, #6
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f063 030e 	orn	r3, r3, #14
 8004292:	b2da      	uxtb	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <I2C_Master_ADD10+0x26>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d108      	bne.n	80042de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00c      	beq.n	80042ee <I2C_Master_ADD10+0x48>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ec:	605a      	str	r2, [r3, #4]
  }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b091      	sub	sp, #68	; 0x44
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b22      	cmp	r3, #34	; 0x22
 8004322:	f040 8169 	bne.w	80045f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <I2C_Master_ADDR+0x54>
 800432e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d10b      	bne.n	800434e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004336:	2300      	movs	r3, #0
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	e160      	b.n	8004610 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11d      	bne.n	8004392 <I2C_Master_ADDR+0x98>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800435e:	d118      	bne.n	8004392 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	651a      	str	r2, [r3, #80]	; 0x50
 8004390:	e13e      	b.n	8004610 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d113      	bne.n	80043c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e115      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f040 808a 	bne.w	80044e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043d6:	d137      	bne.n	8004448 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f6:	d113      	bne.n	8004420 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	e0e7      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	623b      	str	r3, [r7, #32]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e0d3      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b08      	cmp	r3, #8
 800444c:	d02e      	beq.n	80044ac <I2C_Master_ADDR+0x1b2>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b20      	cmp	r3, #32
 8004452:	d02b      	beq.n	80044ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	2b12      	cmp	r3, #18
 8004458:	d102      	bne.n	8004460 <I2C_Master_ADDR+0x166>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	2b01      	cmp	r3, #1
 800445e:	d125      	bne.n	80044ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00e      	beq.n	8004484 <I2C_Master_ADDR+0x18a>
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	2b02      	cmp	r3, #2
 800446a:	d00b      	beq.n	8004484 <I2C_Master_ADDR+0x18a>
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	2b10      	cmp	r3, #16
 8004470:	d008      	beq.n	8004484 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e007      	b.n	8004494 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	e0a1      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e085      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d14d      	bne.n	800458a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d016      	beq.n	8004522 <I2C_Master_ADDR+0x228>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d013      	beq.n	8004522 <I2C_Master_ADDR+0x228>
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d010      	beq.n	8004522 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004540:	d117      	bne.n	8004572 <I2C_Master_ADDR+0x278>
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004548:	d00b      	beq.n	8004562 <I2C_Master_ADDR+0x268>
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	2b01      	cmp	r3, #1
 800454e:	d008      	beq.n	8004562 <I2C_Master_ADDR+0x268>
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	2b08      	cmp	r3, #8
 8004554:	d005      	beq.n	8004562 <I2C_Master_ADDR+0x268>
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	2b10      	cmp	r3, #16
 800455a:	d002      	beq.n	8004562 <I2C_Master_ADDR+0x268>
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	2b20      	cmp	r3, #32
 8004560:	d107      	bne.n	8004572 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004570:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	e032      	b.n	80045f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004598:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d117      	bne.n	80045da <I2C_Master_ADDR+0x2e0>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b0:	d00b      	beq.n	80045ca <I2C_Master_ADDR+0x2d0>
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d008      	beq.n	80045ca <I2C_Master_ADDR+0x2d0>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d005      	beq.n	80045ca <I2C_Master_ADDR+0x2d0>
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d002      	beq.n	80045ca <I2C_Master_ADDR+0x2d0>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d107      	bne.n	80045da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045f6:	e00b      	b.n	8004610 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	e7ff      	b.n	8004610 <I2C_Master_ADDR+0x316>
 8004610:	bf00      	nop
 8004612:	3744      	adds	r7, #68	; 0x44
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02b      	beq.n	800468e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d114      	bne.n	800468e <I2C_SlaveTransmit_TXE+0x72>
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b29      	cmp	r3, #41	; 0x29
 8004668:	d111      	bne.n	800468e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004678:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2221      	movs	r2, #33	; 0x21
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2228      	movs	r2, #40	; 0x28
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fa13 	bl	8003ab4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d011      	beq.n	80046cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d02c      	beq.n	800474c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d114      	bne.n	800474c <I2C_SlaveReceive_RXNE+0x74>
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b2a      	cmp	r3, #42	; 0x2a
 8004726:	d111      	bne.n	800474c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2222      	movs	r2, #34	; 0x22
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2228      	movs	r2, #40	; 0x28
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f00c fce8 	bl	801111c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047b2:	2b28      	cmp	r3, #40	; 0x28
 80047b4:	d127      	bne.n	8004806 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	09db      	lsrs	r3, r3, #7
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	81bb      	strh	r3, [r7, #12]
 80047e8:	e002      	b.n	80047f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047f8:	89ba      	ldrh	r2, [r7, #12]
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f00c fc5e 	bl	80110c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004804:	e00e      	b.n	8004824 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d172      	bne.n	8004970 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b22      	cmp	r3, #34	; 0x22
 800488e:	d002      	beq.n	8004896 <I2C_Slave_STOPF+0x6a>
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b2a      	cmp	r3, #42	; 0x2a
 8004894:	d135      	bne.n	8004902 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe f864 	bl	800299c <HAL_DMA_GetState>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d049      	beq.n	800496e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	4a69      	ldr	r2, [pc, #420]	; (8004a84 <I2C_Slave_STOPF+0x258>)
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd feac 	bl	8002644 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03d      	beq.n	800496e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004900:	e035      	b.n	800496e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004934:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe f82e 	bl	800299c <HAL_DMA_GetState>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d014      	beq.n	8004970 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	4a4e      	ldr	r2, [pc, #312]	; (8004a84 <I2C_Slave_STOPF+0x258>)
 800494c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fe76 	bl	8002644 <HAL_DMA_Abort_IT>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
 800496c:	e000      	b.n	8004970 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800496e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03e      	beq.n	80049f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d112      	bne.n	80049ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d112      	bne.n	80049e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f8b3 	bl	8004b6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a06:	e039      	b.n	8004a7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0c:	d109      	bne.n	8004a22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2228      	movs	r2, #40	; 0x28
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f00c fb7d 	bl	801111c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b28      	cmp	r3, #40	; 0x28
 8004a2c:	d111      	bne.n	8004a52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <I2C_Slave_STOPF+0x25c>)
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f00c fb58 	bl	8011100 <HAL_I2C_ListenCpltCallback>
}
 8004a50:	e014      	b.n	8004a7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	2b22      	cmp	r3, #34	; 0x22
 8004a58:	d002      	beq.n	8004a60 <I2C_Slave_STOPF+0x234>
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b22      	cmp	r3, #34	; 0x22
 8004a5e:	d10d      	bne.n	8004a7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f00c fb50 	bl	801111c <HAL_I2C_SlaveRxCpltCallback>
}
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	08004ff5 	.word	0x08004ff5
 8004a88:	ffff0000 	.word	0xffff0000

08004a8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d002      	beq.n	8004aae <I2C_Slave_AF+0x22>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d129      	bne.n	8004b02 <I2C_Slave_AF+0x76>
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b28      	cmp	r3, #40	; 0x28
 8004ab2:	d126      	bne.n	8004b02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a2c      	ldr	r2, [pc, #176]	; (8004b68 <I2C_Slave_AF+0xdc>)
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f00c fb00 	bl	8011100 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b00:	e02e      	b.n	8004b60 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b21      	cmp	r3, #33	; 0x21
 8004b06:	d126      	bne.n	8004b56 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <I2C_Slave_AF+0xdc>)
 8004b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2221      	movs	r2, #33	; 0x21
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fe ffb0 	bl	8003ab4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b54:	e004      	b.n	8004b60 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5e:	615a      	str	r2, [r3, #20]
}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	ffff0000 	.word	0xffff0000

08004b6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d002      	beq.n	8004b90 <I2C_ITError+0x24>
 8004b8a:	7bbb      	ldrb	r3, [r7, #14]
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d10a      	bne.n	8004ba6 <I2C_ITError+0x3a>
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	d107      	bne.n	8004ba6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bac:	2b28      	cmp	r3, #40	; 0x28
 8004bae:	d107      	bne.n	8004bc0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2228      	movs	r2, #40	; 0x28
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bbe:	e015      	b.n	8004bec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bce:	d00a      	beq.n	8004be6 <I2C_ITError+0x7a>
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b60      	cmp	r3, #96	; 0x60
 8004bd4:	d007      	beq.n	8004be6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfa:	d162      	bne.n	8004cc2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d020      	beq.n	8004c5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	4a6a      	ldr	r2, [pc, #424]	; (8004dc8 <I2C_ITError+0x25c>)
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fd0c 	bl	8002644 <HAL_DMA_Abort_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8089 	beq.w	8004d46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c56:	4610      	mov	r0, r2
 8004c58:	4798      	blx	r3
 8004c5a:	e074      	b.n	8004d46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	4a59      	ldr	r2, [pc, #356]	; (8004dc8 <I2C_ITError+0x25c>)
 8004c62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fceb 	bl	8002644 <HAL_DMA_Abort_IT>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d068      	beq.n	8004d46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d10b      	bne.n	8004c9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0201 	bic.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4798      	blx	r3
 8004cc0:	e041      	b.n	8004d46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b60      	cmp	r3, #96	; 0x60
 8004ccc:	d125      	bne.n	8004d1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d10b      	bne.n	8004d02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fe feec 	bl	8003af0 <HAL_I2C_AbortCpltCallback>
 8004d18:	e015      	b.n	8004d46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b40      	cmp	r3, #64	; 0x40
 8004d26:	d10b      	bne.n	8004d40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f00c fa11 	bl	8011168 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10e      	bne.n	8004d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d104      	bne.n	8004d74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d113      	bne.n	8004dc0 <I2C_ITError+0x254>
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b28      	cmp	r3, #40	; 0x28
 8004d9c:	d110      	bne.n	8004dc0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a0a      	ldr	r2, [pc, #40]	; (8004dcc <I2C_ITError+0x260>)
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f00c f9a0 	bl	8011100 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	08004ff5 	.word	0x08004ff5
 8004dcc:	ffff0000 	.word	0xffff0000

08004dd0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dec:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e02:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	2200      	movs	r2, #0
 8004e12:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	2200      	movs	r2, #0
 8004e22:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004e24:	7cfb      	ldrb	r3, [r7, #19]
 8004e26:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e2a:	2b21      	cmp	r3, #33	; 0x21
 8004e2c:	d007      	beq.n	8004e3e <I2C_DMAXferCplt+0x6e>
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004e34:	2b22      	cmp	r3, #34	; 0x22
 8004e36:	d131      	bne.n	8004e9c <I2C_DMAXferCplt+0xcc>
 8004e38:	7cbb      	ldrb	r3, [r7, #18]
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d12e      	bne.n	8004e9c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2200      	movs	r2, #0
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b29      	cmp	r3, #41	; 0x29
 8004e58:	d10a      	bne.n	8004e70 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2221      	movs	r2, #33	; 0x21
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2228      	movs	r2, #40	; 0x28
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f7fe fe23 	bl	8003ab4 <HAL_I2C_SlaveTxCpltCallback>
 8004e6e:	e00c      	b.n	8004e8a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b2a      	cmp	r3, #42	; 0x2a
 8004e74:	d109      	bne.n	8004e8a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2222      	movs	r2, #34	; 0x22
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2228      	movs	r2, #40	; 0x28
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e84:	6978      	ldr	r0, [r7, #20]
 8004e86:	f00c f949 	bl	801111c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e98:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e9a:	e06a      	b.n	8004f72 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d064      	beq.n	8004f72 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d107      	bne.n	8004ec2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ed0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ed8:	d009      	beq.n	8004eee <I2C_DMAXferCplt+0x11e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d006      	beq.n	8004eee <I2C_DMAXferCplt+0x11e>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ee6:	d002      	beq.n	8004eee <I2C_DMAXferCplt+0x11e>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d107      	bne.n	8004efe <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f0c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004f2c:	6978      	ldr	r0, [r7, #20]
 8004f2e:	f00c f91b 	bl	8011168 <HAL_I2C_ErrorCallback>
}
 8004f32:	e01e      	b.n	8004f72 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d10a      	bne.n	8004f5e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004f56:	6978      	ldr	r0, [r7, #20]
 8004f58:	f7fe fdc0 	bl	8003adc <HAL_I2C_MemRxCpltCallback>
}
 8004f5c:	e009      	b.n	8004f72 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2212      	movs	r2, #18
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f7fe fd97 	bl	8003aa0 <HAL_I2C_MasterRxCpltCallback>
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fd fd05 	bl	80029b8 <HAL_DMA_GetError>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d01b      	beq.n	8004fec <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0210 	orr.w	r2, r3, #16
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f00c f8be 	bl	8011168 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800500e:	4b4b      	ldr	r3, [pc, #300]	; (800513c <I2C_DMAAbort+0x148>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	08db      	lsrs	r3, r3, #3
 8005014:	4a4a      	ldr	r2, [pc, #296]	; (8005140 <I2C_DMAAbort+0x14c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	0a1a      	lsrs	r2, r3, #8
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00da      	lsls	r2, r3, #3
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800503a:	e00a      	b.n	8005052 <I2C_DMAAbort+0x5e>
    }
    count--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b01      	subs	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d0ea      	beq.n	8005028 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2200      	movs	r2, #0
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	2200      	movs	r2, #0
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	2200      	movs	r2, #0
 8005096:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2200      	movs	r2, #0
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b60      	cmp	r3, #96	; 0x60
 80050c2:	d10e      	bne.n	80050e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f7fe fd08 	bl	8003af0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050e0:	e027      	b.n	8005132 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e2:	7cfb      	ldrb	r3, [r7, #19]
 80050e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050e8:	2b28      	cmp	r3, #40	; 0x28
 80050ea:	d117      	bne.n	800511c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2228      	movs	r2, #40	; 0x28
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800511a:	e007      	b.n	800512c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	f00c f81b 	bl	8011168 <HAL_I2C_ErrorCallback>
}
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000000 	.word	0x20000000
 8005140:	14f8b589 	.word	0x14f8b589

08005144 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005150:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	08db      	lsrs	r3, r3, #3
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	0a1a      	lsrs	r2, r3, #8
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d107      	bne.n	8005182 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e008      	b.n	8005194 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005190:	d0e9      	beq.n	8005166 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	20000000 	.word	0x20000000
 80051a4:	14f8b589 	.word	0x14f8b589

080051a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051b8:	d103      	bne.n	80051c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051c0:	e007      	b.n	80051d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051ca:	d102      	bne.n	80051d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2208      	movs	r2, #8
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e0:	b08f      	sub	sp, #60	; 0x3c
 80051e2:	af0a      	add	r7, sp, #40	; 0x28
 80051e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e10f      	b.n	8005410 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f00b fc2a 	bl	8010a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2203      	movs	r2, #3
 8005214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f005 ffbf 	bl	800b1b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	687e      	ldr	r6, [r7, #4]
 800523c:	466d      	mov	r5, sp
 800523e:	f106 0410 	add.w	r4, r6, #16
 8005242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800524e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005252:	1d33      	adds	r3, r6, #4
 8005254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005256:	6838      	ldr	r0, [r7, #0]
 8005258:	f005 fe96 	bl	800af88 <USB_CoreInit>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0d0      	b.n	8005410 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f005 ffad 	bl	800b1d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e04a      	b.n	8005316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	333d      	adds	r3, #61	; 0x3d
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	333c      	adds	r3, #60	; 0x3c
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	b298      	uxth	r0, r3
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	3344      	adds	r3, #68	; 0x44
 80052bc:	4602      	mov	r2, r0
 80052be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3340      	adds	r3, #64	; 0x40
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3348      	adds	r3, #72	; 0x48
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e8:	7bfa      	ldrb	r2, [r7, #15]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	334c      	adds	r3, #76	; 0x4c
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3354      	adds	r3, #84	; 0x54
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	3301      	adds	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	7bfa      	ldrb	r2, [r7, #15]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3af      	bcc.n	8005280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e044      	b.n	80053b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3301      	adds	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3b5      	bcc.n	8005326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	687e      	ldr	r6, [r7, #4]
 80053c2:	466d      	mov	r5, sp
 80053c4:	f106 0410 	add.w	r4, r6, #16
 80053c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80053d8:	1d33      	adds	r3, r6, #4
 80053da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053dc:	6838      	ldr	r0, [r7, #0]
 80053de:	f005 ff45 	bl	800b26c <USB_DevInit>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e00d      	b.n	8005410 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f007 f894 	bl	800c536 <USB_DevDisconnect>

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005418 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_PCD_Start+0x1c>
 8005430:	2302      	movs	r3, #2
 8005432:	e020      	b.n	8005476 <HAL_PCD_Start+0x5e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	2b01      	cmp	r3, #1
 8005442:	d109      	bne.n	8005458 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005448:	2b01      	cmp	r3, #1
 800544a:	d005      	beq.n	8005458 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f005 fe97 	bl	800b190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f007 f844 	bl	800c4f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800547e:	b590      	push	{r4, r7, lr}
 8005480:	b08d      	sub	sp, #52	; 0x34
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f007 f902 	bl	800c69e <USB_GetMode>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 848a 	bne.w	8005db6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f007 f866 	bl	800c578 <USB_ReadInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8480 	beq.w	8005db4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f007 f853 	bl	800c578 <USB_ReadInterrupts>
 80054d2:	4603      	mov	r3, r0
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d107      	bne.n	80054ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f002 0202 	and.w	r2, r2, #2
 80054ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f007 f841 	bl	800c578 <USB_ReadInterrupts>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d161      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0210 	bic.w	r2, r2, #16
 800550e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 020f 	and.w	r2, r3, #15
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4413      	add	r3, r2
 800552c:	3304      	adds	r3, #4
 800552e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	0c5b      	lsrs	r3, r3, #17
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	2b02      	cmp	r3, #2
 800553a:	d124      	bne.n	8005586 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d035      	beq.n	80055b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	6a38      	ldr	r0, [r7, #32]
 800555c:	f006 fe78 	bl	800c250 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557e:	441a      	add	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
 8005584:	e016      	b.n	80055b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	0c5b      	lsrs	r3, r3, #17
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	2b06      	cmp	r3, #6
 8005590:	d110      	bne.n	80055b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005598:	2208      	movs	r2, #8
 800559a:	4619      	mov	r1, r3
 800559c:	6a38      	ldr	r0, [r7, #32]
 800559e:	f006 fe57 	bl	800c250 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ae:	441a      	add	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0210 	orr.w	r2, r2, #16
 80055c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f006 ffd5 	bl	800c578 <USB_ReadInterrupts>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055d8:	f040 80a7 	bne.w	800572a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f006 ffda 	bl	800c59e <USB_ReadDevAllOutEpInterrupt>
 80055ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055ec:	e099      	b.n	8005722 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 808e 	beq.w	8005716 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	4611      	mov	r1, r2
 8005604:	4618      	mov	r0, r3
 8005606:	f006 fffe 	bl	800c606 <USB_ReadDevOutEPInterrupt>
 800560a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	461a      	mov	r2, r3
 8005624:	2301      	movs	r3, #1
 8005626:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fec2 	bl	80063b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00c      	beq.n	8005654 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	461a      	mov	r2, r3
 8005648:	2308      	movs	r3, #8
 800564a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800564c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 ff98 	bl	8006584 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	461a      	mov	r2, r3
 800566c:	2310      	movs	r3, #16
 800566e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d030      	beq.n	80056dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d109      	bne.n	800569a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005698:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	4413      	add	r3, r2
 80056ac:	3304      	adds	r3, #4
 80056ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	78db      	ldrb	r3, [r3, #3]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d108      	bne.n	80056ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f00b fac9 	bl	8010c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	2302      	movs	r3, #2
 80056da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	461a      	mov	r2, r3
 80056f4:	2320      	movs	r3, #32
 80056f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	461a      	mov	r2, r3
 8005710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005714:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af62 	bne.w	80055ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f006 ff22 	bl	800c578 <USB_ReadInterrupts>
 8005734:	4603      	mov	r3, r0
 8005736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800573e:	f040 80db 	bne.w	80058f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f006 ff43 	bl	800c5d2 <USB_ReadDevAllInEpInterrupt>
 800574c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005752:	e0cd      	b.n	80058f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80c2 	beq.w	80058e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	4611      	mov	r1, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f006 ff69 	bl	800c642 <USB_ReadDevInEPInterrupt>
 8005770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d057      	beq.n	800582c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	2201      	movs	r2, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	43db      	mvns	r3, r3
 8005796:	69f9      	ldr	r1, [r7, #28]
 8005798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579c:	4013      	ands	r3, r2
 800579e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	461a      	mov	r2, r3
 80057ae:	2301      	movs	r3, #1
 80057b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d132      	bne.n	8005820 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	334c      	adds	r3, #76	; 0x4c
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4403      	add	r3, r0
 80057da:	3348      	adds	r3, #72	; 0x48
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4419      	add	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4403      	add	r3, r0
 80057ee:	334c      	adds	r3, #76	; 0x4c
 80057f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <HAL_PCD_IRQHandler+0x3a2>
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	3354      	adds	r3, #84	; 0x54
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005818:	461a      	mov	r2, r3
 800581a:	2101      	movs	r1, #1
 800581c:	f006 ff70 	bl	800c700 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f00b f99d 	bl	8010b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	461a      	mov	r2, r3
 8005844:	2308      	movs	r3, #8
 8005846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	2310      	movs	r3, #16
 8005862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	461a      	mov	r2, r3
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d023      	beq.n	80058d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800588a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800588c:	6a38      	ldr	r0, [r7, #32]
 800588e:	f005 fe51 	bl	800b534 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	3338      	adds	r3, #56	; 0x38
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	3304      	adds	r3, #4
 80058a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	78db      	ldrb	r3, [r3, #3]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d108      	bne.n	80058c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f00b f9e0 	bl	8010c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	461a      	mov	r2, r3
 80058ce:	2302      	movs	r3, #2
 80058d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fcdb 	bl	800629a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	085b      	lsrs	r3, r3, #1
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f47f af2e 	bne.w	8005754 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f006 fe3b 	bl	800c578 <USB_ReadInterrupts>
 8005902:	4603      	mov	r3, r0
 8005904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590c:	d122      	bne.n	8005954 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005928:	2b01      	cmp	r3, #1
 800592a:	d108      	bne.n	800593e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005934:	2100      	movs	r1, #0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fec2 	bl	80066c0 <HAL_PCDEx_LPM_Callback>
 800593c:	e002      	b.n	8005944 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f00b f97e 	bl	8010c40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f006 fe0d 	bl	800c578 <USB_ReadInterrupts>
 800595e:	4603      	mov	r3, r0
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005968:	d112      	bne.n	8005990 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f00b f93a 	bl	8010bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800598e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f006 fdef 	bl	800c578 <USB_ReadInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	f040 80b7 	bne.w	8005b16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2110      	movs	r1, #16
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 fdb6 	bl	800b534 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059cc:	e046      	b.n	8005a5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	461a      	mov	r2, r3
 80059dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	3301      	adds	r3, #1
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d3b3      	bcc.n	80059ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a92:	f043 030b 	orr.w	r3, r3, #11
 8005a96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa8:	f043 030b 	orr.w	r3, r3, #11
 8005aac:	6453      	str	r3, [r2, #68]	; 0x44
 8005aae:	e015      	b.n	8005adc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ac2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005ac6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad6:	f043 030b 	orr.w	r3, r3, #11
 8005ada:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005aee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b00:	461a      	mov	r2, r3
 8005b02:	f006 fdfd 	bl	800c700 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695a      	ldr	r2, [r3, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f006 fd2c 	bl	800c578 <USB_ReadInterrupts>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2a:	d124      	bne.n	8005b76 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f006 fdc2 	bl	800c6ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 fd77 	bl	800b62e <USB_GetDevSpeed>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681c      	ldr	r4, [r3, #0]
 8005b4c:	f001 f9e8 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8005b50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f005 fa76 	bl	800b04c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f00b f828 	bl	8010bb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695a      	ldr	r2, [r3, #20]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f006 fcfc 	bl	800c578 <USB_ReadInterrupts>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d10a      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f00b f805 	bl	8010b9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f002 0208 	and.w	r2, r2, #8
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f006 fce7 	bl	800c578 <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b80      	cmp	r3, #128	; 0x80
 8005bb2:	d122      	bne.n	8005bfa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	e014      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fb27 	bl	8006238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	3301      	adds	r3, #1
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d3e5      	bcc.n	8005bc6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f006 fcba 	bl	800c578 <USB_ReadInterrupts>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0e:	d13b      	bne.n	8005c88 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c10:	2301      	movs	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
 8005c14:	e02b      	b.n	8005c6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3340      	adds	r3, #64	; 0x40
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d115      	bne.n	8005c68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da12      	bge.n	8005c68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	333f      	adds	r3, #63	; 0x3f
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fae8 	bl	8006238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3ce      	bcc.n	8005c16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f006 fc73 	bl	800c578 <USB_ReadInterrupts>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c9c:	d155      	bne.n	8005d4a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e045      	b.n	8005d30 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	4613      	mov	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12e      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ccc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da2b      	bge.n	8005d2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005cde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d121      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d26:	6053      	str	r3, [r2, #4]
            break;
 8005d28:	e007      	b.n	8005d3a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3b4      	bcc.n	8005ca4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 fc12 	bl	800c578 <USB_ReadInterrupts>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d10a      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f00a ff9f 	bl	8010ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f006 fbfc 	bl	800c578 <USB_ReadInterrupts>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d115      	bne.n	8005db6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f00a ff8f 	bl	8010cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
 8005db2:	e000      	b.n	8005db6 <HAL_PCD_IRQHandler+0x938>
      return;
 8005db4:	bf00      	nop
    }
  }
}
 8005db6:	3734      	adds	r7, #52	; 0x34
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd90      	pop	{r4, r7, pc}

08005dbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_PCD_SetAddress+0x1a>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e013      	b.n	8005dfe <HAL_PCD_SetAddress+0x42>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f006 fb5a 	bl	800c4a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	4608      	mov	r0, r1
 8005e10:	4611      	mov	r1, r2
 8005e12:	461a      	mov	r2, r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	70fb      	strb	r3, [r7, #3]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	803b      	strh	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da0f      	bge.n	8005e4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	3338      	adds	r3, #56	; 0x38
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	705a      	strb	r2, [r3, #1]
 8005e4a:	e00f      	b.n	8005e6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e78:	883a      	ldrh	r2, [r7, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	78ba      	ldrb	r2, [r7, #2]
 8005e82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e96:	78bb      	ldrb	r3, [r7, #2]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d102      	bne.n	8005ea2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_PCD_EP_Open+0xaa>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e00e      	b.n	8005ece <HAL_PCD_EP_Open+0xc8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68f9      	ldr	r1, [r7, #12]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f005 fbda 	bl	800b678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da0f      	bge.n	8005f0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	3338      	adds	r3, #56	; 0x38
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	4413      	add	r3, r2
 8005efe:	3304      	adds	r3, #4
 8005f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	705a      	strb	r2, [r3, #1]
 8005f08:	e00f      	b.n	8005f2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	4613      	mov	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4413      	add	r3, r2
 8005f20:	3304      	adds	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_PCD_EP_Close+0x6e>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e00e      	b.n	8005f62 <HAL_PCD_EP_Close+0x8c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f005 fc18 	bl	800b788 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	460b      	mov	r3, r1
 8005f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3304      	adds	r3, #4
 8005f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d102      	bne.n	8005fc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	6979      	ldr	r1, [r7, #20]
 8005fde:	f005 fef7 	bl	800bdd0 <USB_EP0StartXfer>
 8005fe2:	e008      	b.n	8005ff6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6979      	ldr	r1, [r7, #20]
 8005ff2:	f005 fca5 	bl	800b940 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006022:	681b      	ldr	r3, [r3, #0]
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	460b      	mov	r3, r1
 800603e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	f003 020f 	and.w	r2, r3, #15
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	3338      	adds	r3, #56	; 0x38
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	3304      	adds	r3, #4
 8006056:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2201      	movs	r2, #1
 800606e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	b2da      	uxtb	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d102      	bne.n	800608a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	6979      	ldr	r1, [r7, #20]
 80060a2:	f005 fe95 	bl	800bdd0 <USB_EP0StartXfer>
 80060a6:	e008      	b.n	80060ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	f005 fc43 	bl	800b940 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	f003 020f 	and.w	r2, r3, #15
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d901      	bls.n	80060e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e050      	b.n	8006184 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da0f      	bge.n	800610a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	3338      	adds	r3, #56	; 0x38
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	3304      	adds	r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	705a      	strb	r2, [r3, #1]
 8006108:	e00d      	b.n	8006126 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_PCD_EP_SetStall+0x82>
 8006142:	2302      	movs	r3, #2
 8006144:	e01e      	b.n	8006184 <HAL_PCD_EP_SetStall+0xc0>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	4618      	mov	r0, r3
 8006156:	f006 f8d3 	bl	800c300 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 030f 	and.w	r3, r3, #15
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	b2d9      	uxtb	r1, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006174:	461a      	mov	r2, r3
 8006176:	f006 fac3 	bl	800c700 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	f003 020f 	and.w	r2, r3, #15
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d901      	bls.n	80061aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e042      	b.n	8006230 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da0f      	bge.n	80061d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	4613      	mov	r3, r2
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	3338      	adds	r3, #56	; 0x38
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	705a      	strb	r2, [r3, #1]
 80061d0:	e00f      	b.n	80061f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	f003 020f 	and.w	r2, r3, #15
 80061d8:	4613      	mov	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_PCD_EP_ClrStall+0x86>
 800620e:	2302      	movs	r3, #2
 8006210:	e00e      	b.n	8006230 <HAL_PCD_EP_ClrStall+0xa4>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	4618      	mov	r0, r3
 8006222:	f006 f8db 	bl	800c3dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da0c      	bge.n	8006266 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	f003 020f 	and.w	r2, r3, #15
 8006252:	4613      	mov	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	3338      	adds	r3, #56	; 0x38
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	4413      	add	r3, r2
 8006260:	3304      	adds	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e00c      	b.n	8006280 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4413      	add	r3, r2
 800627c:	3304      	adds	r3, #4
 800627e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	4618      	mov	r0, r3
 8006288:	f005 fefa 	bl	800c080 <USB_EPStopXfer>
 800628c:	4603      	mov	r3, r0
 800628e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006290:	7afb      	ldrb	r3, [r7, #11]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b08a      	sub	sp, #40	; 0x28
 800629e:	af02      	add	r7, sp, #8
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	3338      	adds	r3, #56	; 0x38
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	3304      	adds	r3, #4
 80062c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1a      	ldr	r2, [r3, #32]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d901      	bls.n	80062d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e06c      	b.n	80063ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d902      	bls.n	80062ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3303      	adds	r3, #3
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062f6:	e02b      	b.n	8006350 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	429a      	cmp	r2, r3
 800630c:	d902      	bls.n	8006314 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	3303      	adds	r3, #3
 8006318:	089b      	lsrs	r3, r3, #2
 800631a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6919      	ldr	r1, [r3, #16]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800632c:	b2db      	uxtb	r3, r3
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4603      	mov	r3, r0
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f005 ff4e 	bl	800c1d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	441a      	add	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	441a      	add	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	b29b      	uxth	r3, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	429a      	cmp	r2, r3
 8006364:	d809      	bhi.n	800637a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800636e:	429a      	cmp	r2, r3
 8006370:	d203      	bcs.n	800637a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1be      	bne.n	80062f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	429a      	cmp	r2, r3
 8006384:	d811      	bhi.n	80063aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	2201      	movs	r2, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	43db      	mvns	r3, r3
 80063a0:	6939      	ldr	r1, [r7, #16]
 80063a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a6:	4013      	ands	r3, r2
 80063a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	333c      	adds	r3, #60	; 0x3c
 80063cc:	3304      	adds	r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d17b      	bne.n	80064e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d015      	beq.n	8006420 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4a61      	ldr	r2, [pc, #388]	; (800657c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	f240 80b9 	bls.w	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80b3 	beq.w	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641c:	6093      	str	r3, [r2, #8]
 800641e:	e0a7      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	2320      	movs	r3, #32
 800643a:	6093      	str	r3, [r2, #8]
 800643c:	e098      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 8093 	bne.w	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4a4b      	ldr	r2, [pc, #300]	; (800657c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d90f      	bls.n	8006472 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	461a      	mov	r2, r3
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	6093      	str	r3, [r2, #8]
 8006470:	e07e      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4413      	add	r3, r2
 8006484:	3304      	adds	r3, #4
 8006486:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	0159      	lsls	r1, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	440b      	add	r3, r1
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d114      	bne.n	80064d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064bc:	461a      	mov	r2, r3
 80064be:	2101      	movs	r1, #1
 80064c0:	f006 f91e 	bl	800c700 <USB_EP0_OutStart>
 80064c4:	e006      	b.n	80064d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	441a      	add	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f00a fb28 	bl	8010b30 <HAL_PCD_DataOutStageCallback>
 80064e0:	e046      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4a26      	ldr	r2, [pc, #152]	; (8006580 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d124      	bne.n	8006534 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	6093      	str	r3, [r2, #8]
 8006508:	e032      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006520:	461a      	mov	r2, r3
 8006522:	2320      	movs	r3, #32
 8006524:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f00a faff 	bl	8010b30 <HAL_PCD_DataOutStageCallback>
 8006532:	e01d      	b.n	8006570 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d114      	bne.n	8006564 <PCD_EP_OutXfrComplete_int+0x1b0>
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d108      	bne.n	8006564 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800655c:	461a      	mov	r2, r3
 800655e:	2100      	movs	r1, #0
 8006560:	f006 f8ce 	bl	800c700 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f00a fae0 	bl	8010b30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	4f54300a 	.word	0x4f54300a
 8006580:	4f54310a 	.word	0x4f54310a

08006584 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	333c      	adds	r3, #60	; 0x3c
 800659c:	3304      	adds	r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a15      	ldr	r2, [pc, #84]	; (800660c <PCD_EP_OutSetupPacket_int+0x88>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d90e      	bls.n	80065d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	461a      	mov	r2, r3
 80065d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f00a fa97 	bl	8010b0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <PCD_EP_OutSetupPacket_int+0x88>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d90c      	bls.n	8006600 <PCD_EP_OutSetupPacket_int+0x7c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d108      	bne.n	8006600 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065f8:	461a      	mov	r2, r3
 80065fa:	2101      	movs	r1, #1
 80065fc:	f006 f880 	bl	800c700 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	4f54300a 	.word	0x4f54300a

08006610 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
 800661c:	4613      	mov	r3, r2
 800661e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800662e:	883b      	ldrh	r3, [r7, #0]
 8006630:	0419      	lsls	r1, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	430a      	orrs	r2, r1
 800663a:	629a      	str	r2, [r3, #40]	; 0x28
 800663c:	e028      	b.n	8006690 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	e00d      	b.n	800666e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	4413      	add	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	3301      	adds	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
 800666e:	7bfa      	ldrb	r2, [r7, #15]
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	3b01      	subs	r3, #1
 8006674:	429a      	cmp	r2, r3
 8006676:	d3ec      	bcc.n	8006652 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006678:	883b      	ldrh	r3, [r7, #0]
 800667a:	0418      	lsls	r0, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	3b01      	subs	r3, #1
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4302      	orrs	r2, r0
 8006688:	3340      	adds	r3, #64	; 0x40
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e267      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d075      	beq.n	80067e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066f6:	4b88      	ldr	r3, [pc, #544]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d00c      	beq.n	800671c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006702:	4b85      	ldr	r3, [pc, #532]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800670a:	2b08      	cmp	r3, #8
 800670c:	d112      	bne.n	8006734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800670e:	4b82      	ldr	r3, [pc, #520]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800671a:	d10b      	bne.n	8006734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671c:	4b7e      	ldr	r3, [pc, #504]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d05b      	beq.n	80067e0 <HAL_RCC_OscConfig+0x108>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d157      	bne.n	80067e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e242      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d106      	bne.n	800674c <HAL_RCC_OscConfig+0x74>
 800673e:	4b76      	ldr	r3, [pc, #472]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a75      	ldr	r2, [pc, #468]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e01d      	b.n	8006788 <HAL_RCC_OscConfig+0xb0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006754:	d10c      	bne.n	8006770 <HAL_RCC_OscConfig+0x98>
 8006756:	4b70      	ldr	r3, [pc, #448]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6f      	ldr	r2, [pc, #444]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800675c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4b6d      	ldr	r3, [pc, #436]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6c      	ldr	r2, [pc, #432]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e00b      	b.n	8006788 <HAL_RCC_OscConfig+0xb0>
 8006770:	4b69      	ldr	r3, [pc, #420]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a68      	ldr	r2, [pc, #416]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	4b66      	ldr	r3, [pc, #408]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a65      	ldr	r2, [pc, #404]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006790:	f7fb fc40 	bl	8002014 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006798:	f7fb fc3c 	bl	8002014 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b64      	cmp	r3, #100	; 0x64
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e207      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	4b5b      	ldr	r3, [pc, #364]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0xc0>
 80067b6:	e014      	b.n	80067e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fb fc2c 	bl	8002014 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c0:	f7fb fc28 	bl	8002014 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e1f3      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067d2:	4b51      	ldr	r3, [pc, #324]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0xe8>
 80067de:	e000      	b.n	80067e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d063      	beq.n	80068b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 030c 	and.w	r3, r3, #12
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067fa:	4b47      	ldr	r3, [pc, #284]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006802:	2b08      	cmp	r3, #8
 8006804:	d11c      	bne.n	8006840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006806:	4b44      	ldr	r3, [pc, #272]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d116      	bne.n	8006840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_RCC_OscConfig+0x152>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d001      	beq.n	800682a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e1c7      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800682a:	4b3b      	ldr	r3, [pc, #236]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	4937      	ldr	r1, [pc, #220]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800683a:	4313      	orrs	r3, r2
 800683c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800683e:	e03a      	b.n	80068b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006848:	4b34      	ldr	r3, [pc, #208]	; (800691c <HAL_RCC_OscConfig+0x244>)
 800684a:	2201      	movs	r2, #1
 800684c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684e:	f7fb fbe1 	bl	8002014 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006856:	f7fb fbdd 	bl	8002014 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e1a8      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006868:	4b2b      	ldr	r3, [pc, #172]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006874:	4b28      	ldr	r3, [pc, #160]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4925      	ldr	r1, [pc, #148]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 8006884:	4313      	orrs	r3, r2
 8006886:	600b      	str	r3, [r1, #0]
 8006888:	e015      	b.n	80068b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <HAL_RCC_OscConfig+0x244>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fb fbc0 	bl	8002014 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006898:	f7fb fbbc 	bl	8002014 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e187      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068aa:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d036      	beq.n	8006930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ca:	4b15      	ldr	r3, [pc, #84]	; (8006920 <HAL_RCC_OscConfig+0x248>)
 80068cc:	2201      	movs	r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d0:	f7fb fba0 	bl	8002014 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d8:	f7fb fb9c 	bl	8002014 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e167      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <HAL_RCC_OscConfig+0x240>)
 80068ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0x200>
 80068f6:	e01b      	b.n	8006930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x248>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068fe:	f7fb fb89 	bl	8002014 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006904:	e00e      	b.n	8006924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006906:	f7fb fb85 	bl	8002014 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d907      	bls.n	8006924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e150      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
 8006918:	40023800 	.word	0x40023800
 800691c:	42470000 	.word	0x42470000
 8006920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006924:	4b88      	ldr	r3, [pc, #544]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ea      	bne.n	8006906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8097 	beq.w	8006a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800693e:	2300      	movs	r3, #0
 8006940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006942:	4b81      	ldr	r3, [pc, #516]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10f      	bne.n	800696e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	4b7d      	ldr	r3, [pc, #500]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a7c      	ldr	r2, [pc, #496]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695c:	6413      	str	r3, [r2, #64]	; 0x40
 800695e:	4b7a      	ldr	r3, [pc, #488]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006966:	60bb      	str	r3, [r7, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696e:	4b77      	ldr	r3, [pc, #476]	; (8006b4c <HAL_RCC_OscConfig+0x474>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d118      	bne.n	80069ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800697a:	4b74      	ldr	r3, [pc, #464]	; (8006b4c <HAL_RCC_OscConfig+0x474>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a73      	ldr	r2, [pc, #460]	; (8006b4c <HAL_RCC_OscConfig+0x474>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006986:	f7fb fb45 	bl	8002014 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698e:	f7fb fb41 	bl	8002014 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e10c      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a0:	4b6a      	ldr	r3, [pc, #424]	; (8006b4c <HAL_RCC_OscConfig+0x474>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <HAL_RCC_OscConfig+0x2ea>
 80069b4:	4b64      	ldr	r3, [pc, #400]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a63      	ldr	r2, [pc, #396]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	e01c      	b.n	80069fc <HAL_RCC_OscConfig+0x324>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d10c      	bne.n	80069e4 <HAL_RCC_OscConfig+0x30c>
 80069ca:	4b5f      	ldr	r3, [pc, #380]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a5e      	ldr	r2, [pc, #376]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70
 80069d6:	4b5c      	ldr	r3, [pc, #368]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a5b      	ldr	r2, [pc, #364]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069dc:	f043 0301 	orr.w	r3, r3, #1
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70
 80069e2:	e00b      	b.n	80069fc <HAL_RCC_OscConfig+0x324>
 80069e4:	4b58      	ldr	r3, [pc, #352]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	4a57      	ldr	r2, [pc, #348]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069ea:	f023 0301 	bic.w	r3, r3, #1
 80069ee:	6713      	str	r3, [r2, #112]	; 0x70
 80069f0:	4b55      	ldr	r3, [pc, #340]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 80069f6:	f023 0304 	bic.w	r3, r3, #4
 80069fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a04:	f7fb fb06 	bl	8002014 <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0a:	e00a      	b.n	8006a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	f7fb fb02 	bl	8002014 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e0cb      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a22:	4b49      	ldr	r3, [pc, #292]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0ee      	beq.n	8006a0c <HAL_RCC_OscConfig+0x334>
 8006a2e:	e014      	b.n	8006a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a30:	f7fb faf0 	bl	8002014 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a38:	f7fb faec 	bl	8002014 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e0b5      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4e:	4b3e      	ldr	r3, [pc, #248]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ee      	bne.n	8006a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d105      	bne.n	8006a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a60:	4b39      	ldr	r3, [pc, #228]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	4a38      	ldr	r2, [pc, #224]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a1 	beq.w	8006bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a76:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d05c      	beq.n	8006b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d141      	bne.n	8006b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <HAL_RCC_OscConfig+0x478>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7fb fac0 	bl	8002014 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a98:	f7fb fabc 	bl	8002014 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e087      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aaa:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	019b      	lsls	r3, r3, #6
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	491b      	ldr	r1, [pc, #108]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <HAL_RCC_OscConfig+0x478>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae6:	f7fb fa95 	bl	8002014 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aee:	f7fb fa91 	bl	8002014 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e05c      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x416>
 8006b0c:	e054      	b.n	8006bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0e:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <HAL_RCC_OscConfig+0x478>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fb fa7e 	bl	8002014 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1c:	f7fb fa7a 	bl	8002014 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e045      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_RCC_OscConfig+0x470>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0x444>
 8006b3a:	e03d      	b.n	8006bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e038      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	40007000 	.word	0x40007000
 8006b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <HAL_RCC_OscConfig+0x4ec>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d028      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d121      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d11a      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b84:	4013      	ands	r3, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40023800 	.word	0x40023800

08006bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0cc      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bdc:	4b68      	ldr	r3, [pc, #416]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d90c      	bls.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bea:	4b65      	ldr	r3, [pc, #404]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf2:	4b63      	ldr	r3, [pc, #396]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0b8      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d020      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c1c:	4b59      	ldr	r3, [pc, #356]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4a58      	ldr	r2, [pc, #352]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0308 	and.w	r3, r3, #8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d005      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c34:	4b53      	ldr	r3, [pc, #332]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4a52      	ldr	r2, [pc, #328]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c40:	4b50      	ldr	r3, [pc, #320]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	494d      	ldr	r1, [pc, #308]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d044      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	4b47      	ldr	r3, [pc, #284]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d119      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e07f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d003      	beq.n	8006c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c86:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e06f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c96:	4b3b      	ldr	r3, [pc, #236]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e067      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca6:	4b37      	ldr	r3, [pc, #220]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f023 0203 	bic.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	4934      	ldr	r1, [pc, #208]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb8:	f7fb f9ac 	bl	8002014 <HAL_GetTick>
 8006cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc0:	f7fb f9a8 	bl	8002014 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e04f      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	4b2b      	ldr	r3, [pc, #172]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 020c 	and.w	r2, r3, #12
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d1eb      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20c      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b22      	ldr	r3, [pc, #136]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <HAL_RCC_ClockConfig+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e032      	b.n	8006d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4916      	ldr	r1, [pc, #88]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	490e      	ldr	r1, [pc, #56]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d4e:	f000 f821 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	091b      	lsrs	r3, r3, #4
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	490a      	ldr	r1, [pc, #40]	; (8006d88 <HAL_RCC_ClockConfig+0x1c0>)
 8006d60:	5ccb      	ldrb	r3, [r1, r3]
 8006d62:	fa22 f303 	lsr.w	r3, r2, r3
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d6a:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCC_ClockConfig+0x1c8>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa f874 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023c00 	.word	0x40023c00
 8006d84:	40023800 	.word	0x40023800
 8006d88:	0801281c 	.word	0x0801281c
 8006d8c:	20000000 	.word	0x20000000
 8006d90:	20000004 	.word	0x20000004

08006d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d98:	b090      	sub	sp, #64	; 0x40
 8006d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da4:	2300      	movs	r3, #0
 8006da6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dac:	4b59      	ldr	r3, [pc, #356]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d00d      	beq.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	f200 80a1 	bhi.w	8006f00 <HAL_RCC_GetSysClockFreq+0x16c>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d003      	beq.n	8006dce <HAL_RCC_GetSysClockFreq+0x3a>
 8006dc6:	e09b      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dc8:	4b53      	ldr	r3, [pc, #332]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006dcc:	e09b      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dce:	4b53      	ldr	r3, [pc, #332]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dd2:	e098      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dd4:	4b4f      	ldr	r3, [pc, #316]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dde:	4b4d      	ldr	r3, [pc, #308]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d028      	beq.n	8006e3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dea:	4b4a      	ldr	r3, [pc, #296]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	2200      	movs	r2, #0
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	627a      	str	r2, [r7, #36]	; 0x24
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4b47      	ldr	r3, [pc, #284]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006e00:	fb03 f201 	mul.w	r2, r3, r1
 8006e04:	2300      	movs	r3, #0
 8006e06:	fb00 f303 	mul.w	r3, r0, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	4a43      	ldr	r2, [pc, #268]	; (8006f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8006e0e:	fba0 1202 	umull	r1, r2, r0, r2
 8006e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e14:	460a      	mov	r2, r1
 8006e16:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1a:	4413      	add	r3, r2
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	2200      	movs	r2, #0
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	61fa      	str	r2, [r7, #28]
 8006e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e2e:	f7f9 f9d7 	bl	80001e0 <__aeabi_uldivmod>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4613      	mov	r3, r2
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3a:	e053      	b.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3c:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	099b      	lsrs	r3, r3, #6
 8006e42:	2200      	movs	r2, #0
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	617a      	str	r2, [r7, #20]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e4e:	f04f 0b00 	mov.w	fp, #0
 8006e52:	4652      	mov	r2, sl
 8006e54:	465b      	mov	r3, fp
 8006e56:	f04f 0000 	mov.w	r0, #0
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	0159      	lsls	r1, r3, #5
 8006e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e64:	0150      	lsls	r0, r2, #5
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e6e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e86:	ebb2 0408 	subs.w	r4, r2, r8
 8006e8a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	00eb      	lsls	r3, r5, #3
 8006e98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e9c:	00e2      	lsls	r2, r4, #3
 8006e9e:	4614      	mov	r4, r2
 8006ea0:	461d      	mov	r5, r3
 8006ea2:	eb14 030a 	adds.w	r3, r4, sl
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	eb45 030b 	adc.w	r3, r5, fp
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eba:	4629      	mov	r1, r5
 8006ebc:	028b      	lsls	r3, r1, #10
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	028a      	lsls	r2, r1, #10
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ece:	2200      	movs	r2, #0
 8006ed0:	60bb      	str	r3, [r7, #8]
 8006ed2:	60fa      	str	r2, [r7, #12]
 8006ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ed8:	f7f9 f982 	bl	80001e0 <__aeabi_uldivmod>
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006efe:	e002      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3740      	adds	r7, #64	; 0x40
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	017d7840 	.word	0x017d7840

08006f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f24:	4b03      	ldr	r3, [pc, #12]	; (8006f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000000 	.word	0x20000000

08006f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f3c:	f7ff fff0 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f40:	4602      	mov	r2, r0
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	0a9b      	lsrs	r3, r3, #10
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	4903      	ldr	r1, [pc, #12]	; (8006f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f4e:	5ccb      	ldrb	r3, [r1, r3]
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	0801282c 	.word	0x0801282c

08006f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f64:	f7ff ffdc 	bl	8006f20 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0b5b      	lsrs	r3, r3, #13
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4903      	ldr	r1, [pc, #12]	; (8006f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	0801282c 	.word	0x0801282c

08006f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	220f      	movs	r2, #15
 8006f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0203 	and.w	r2, r3, #3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fbc:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <HAL_RCC_GetClockConfig+0x60>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0207 	and.w	r2, r3, #7
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40023c00 	.word	0x40023c00

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d035      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007014:	4b67      	ldr	r3, [pc, #412]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701a:	f7fa fffb 	bl	8002014 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007022:	f7fa fff7 	bl	8002014 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e0ba      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007034:	4b60      	ldr	r3, [pc, #384]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f0      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	019a      	lsls	r2, r3, #6
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	071b      	lsls	r3, r3, #28
 800704c:	495a      	ldr	r1, [pc, #360]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007054:	4b57      	ldr	r3, [pc, #348]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800705a:	f7fa ffdb 	bl	8002014 <HAL_GetTick>
 800705e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007060:	e008      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007062:	f7fa ffd7 	bl	8002014 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d901      	bls.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e09a      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007074:	4b50      	ldr	r3, [pc, #320]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0f0      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8083 	beq.w	8007194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	4b49      	ldr	r3, [pc, #292]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a48      	ldr	r2, [pc, #288]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800709c:	6413      	str	r3, [r2, #64]	; 0x40
 800709e:	4b46      	ldr	r3, [pc, #280]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070aa:	4b44      	ldr	r3, [pc, #272]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a43      	ldr	r2, [pc, #268]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070b6:	f7fa ffad 	bl	8002014 <HAL_GetTick>
 80070ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070bc:	e008      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070be:	f7fa ffa9 	bl	8002014 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e06c      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070d0:	4b3a      	ldr	r3, [pc, #232]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070dc:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02f      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d028      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070fa:	4b2f      	ldr	r3, [pc, #188]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007102:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007104:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800710a:	4b2d      	ldr	r3, [pc, #180]	; (80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007110:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007116:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d114      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007122:	f7fa ff77 	bl	8002014 <HAL_GetTick>
 8007126:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007128:	e00a      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800712a:	f7fa ff73 	bl	8002014 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f241 3288 	movw	r2, #5000	; 0x1388
 8007138:	4293      	cmp	r3, r2
 800713a:	d901      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e034      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007140:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ee      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007158:	d10d      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800715a:	4b17      	ldr	r3, [pc, #92]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	4912      	ldr	r1, [pc, #72]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007170:	4313      	orrs	r3, r2
 8007172:	608b      	str	r3, [r1, #8]
 8007174:	e005      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007176:	4b10      	ldr	r3, [pc, #64]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4a0f      	ldr	r2, [pc, #60]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800717c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007180:	6093      	str	r3, [r2, #8]
 8007182:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007184:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800718e:	490a      	ldr	r1, [pc, #40]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007190:	4313      	orrs	r3, r2
 8007192:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	7c1a      	ldrb	r2, [r3, #16]
 80071a4:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071a6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	42470068 	.word	0x42470068
 80071b8:	40023800 	.word	0x40023800
 80071bc:	40007000 	.word	0x40007000
 80071c0:	42470e40 	.word	0x42470e40
 80071c4:	424711e0 	.word	0x424711e0

080071c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e066      	b.n	80072ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7f5b      	ldrb	r3, [r3, #29]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7f9 fd5e 	bl	8000cb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	22ca      	movs	r2, #202	; 0xca
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2253      	movs	r2, #83	; 0x53
 8007208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa45 	bl	800769a <RTC_EnterInitMode>
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d12c      	bne.n	8007274 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6899      	ldr	r1, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	431a      	orrs	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68d2      	ldr	r2, [r2, #12]
 8007254:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6919      	ldr	r1, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	041a      	lsls	r2, r3, #16
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa4c 	bl	8007708 <RTC_ExitInitMode>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d113      	bne.n	80072a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	22ff      	movs	r2, #255	; 0xff
 80072a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	7f1b      	ldrb	r3, [r3, #28]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_RTC_SetTime+0x1c>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e087      	b.n	80073e0 <HAL_RTC_SetTime+0x12c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2202      	movs	r2, #2
 80072da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d126      	bne.n	8007330 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fa29 	bl	8007752 <RTC_ByteToBcd2>
 8007300:	4603      	mov	r3, r0
 8007302:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fa22 	bl	8007752 <RTC_ByteToBcd2>
 800730e:	4603      	mov	r3, r0
 8007310:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007312:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	789b      	ldrb	r3, [r3, #2]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fa1a 	bl	8007752 <RTC_ByteToBcd2>
 800731e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007320:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	78db      	ldrb	r3, [r3, #3]
 8007328:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e018      	b.n	8007362 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2200      	movs	r2, #0
 8007342:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007350:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007356:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	22ca      	movs	r2, #202	; 0xca
 8007368:	625a      	str	r2, [r3, #36]	; 0x24
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2253      	movs	r2, #83	; 0x53
 8007370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f991 	bl	800769a <RTC_EnterInitMode>
 8007378:	4603      	mov	r3, r0
 800737a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800737c:	7cfb      	ldrb	r3, [r7, #19]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d120      	bne.n	80073c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800738c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007390:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6899      	ldr	r1, [r3, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f9a4 	bl	8007708 <RTC_ExitInitMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80073c4:	7cfb      	ldrb	r3, [r7, #19]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	22ff      	movs	r2, #255	; 0xff
 80073d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	771a      	strb	r2, [r3, #28]

  return status;
 80073de:	7cfb      	ldrb	r3, [r7, #19]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd90      	pop	{r4, r7, pc}

080073e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800741a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800741e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800742a:	b2da      	uxtb	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b2db      	uxtb	r3, r3
 8007436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743a:	b2da      	uxtb	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007448:	b2da      	uxtb	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	0d9b      	lsrs	r3, r3, #22
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d11a      	bne.n	800749a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 f98f 	bl	800778c <RTC_Bcd2ToByte>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f986 	bl	800778c <RTC_Bcd2ToByte>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	789b      	ldrb	r3, [r3, #2]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f97d 	bl	800778c <RTC_Bcd2ToByte>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7f1b      	ldrb	r3, [r3, #28]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_RTC_SetDate+0x1c>
 80074bc:	2302      	movs	r3, #2
 80074be:	e071      	b.n	80075a4 <HAL_RTC_SetDate+0x100>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2202      	movs	r2, #2
 80074ca:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10e      	bne.n	80074f0 <HAL_RTC_SetDate+0x4c>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d008      	beq.n	80074f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	330a      	adds	r3, #10
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d11c      	bne.n	8007530 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	78db      	ldrb	r3, [r3, #3]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f929 	bl	8007752 <RTC_ByteToBcd2>
 8007500:	4603      	mov	r3, r0
 8007502:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 f922 	bl	8007752 <RTC_ByteToBcd2>
 800750e:	4603      	mov	r3, r0
 8007510:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007512:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	789b      	ldrb	r3, [r3, #2]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f91a 	bl	8007752 <RTC_ByteToBcd2>
 800751e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007520:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e00e      	b.n	800754e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	78db      	ldrb	r3, [r3, #3]
 8007534:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800753c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007542:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	22ca      	movs	r2, #202	; 0xca
 8007554:	625a      	str	r2, [r3, #36]	; 0x24
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2253      	movs	r2, #83	; 0x53
 800755c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 f89b 	bl	800769a <RTC_EnterInitMode>
 8007564:	4603      	mov	r3, r0
 8007566:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10c      	bne.n	8007588 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007578:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800757c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 f8c2 	bl	8007708 <RTC_ExitInitMode>
 8007584:	4603      	mov	r3, r0
 8007586:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007588:	7cfb      	ldrb	r3, [r7, #19]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	22ff      	movs	r2, #255	; 0xff
 800759a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	771a      	strb	r2, [r3, #28]

  return status;
 80075a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd90      	pop	{r4, r7, pc}

080075ac <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	0c1b      	lsrs	r3, r3, #16
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	0b5b      	lsrs	r3, r3, #13
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d11a      	bne.n	8007640 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	78db      	ldrb	r3, [r3, #3]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f8bc 	bl	800778c <RTC_Bcd2ToByte>
 8007614:	4603      	mov	r3, r0
 8007616:	461a      	mov	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f8b3 	bl	800778c <RTC_Bcd2ToByte>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	789b      	ldrb	r3, [r3, #2]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f8aa 	bl	800778c <RTC_Bcd2ToByte>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007664:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007666:	f7fa fcd5 	bl	8002014 <HAL_GetTick>
 800766a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800766c:	e009      	b.n	8007682 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800766e:	f7fa fcd1 	bl	8002014 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767c:	d901      	bls.n	8007682 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e007      	b.n	8007692 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0ee      	beq.n	800766e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d122      	bne.n	80076fe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076c8:	f7fa fca4 	bl	8002014 <HAL_GetTick>
 80076cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80076ce:	e00c      	b.n	80076ea <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076d0:	f7fa fca0 	bl	8002014 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076de:	d904      	bls.n	80076ea <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <RTC_EnterInitMode+0x64>
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d1e8      	bne.n	80076d0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007722:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff89 	bl	800764a <HAL_RTC_WaitForSynchro>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	4603      	mov	r3, r0
 800775a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007760:	e005      	b.n	800776e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	3301      	adds	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	3b0a      	subs	r3, #10
 800776c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	2b09      	cmp	r3, #9
 8007772:	d8f6      	bhi.n	8007762 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	b2da      	uxtb	r2, r3
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	4313      	orrs	r3, r2
 800777e:	b2db      	uxtb	r3, r3
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	091b      	lsrs	r3, r3, #4
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	0092      	lsls	r2, r2, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	4413      	add	r3, r2
 80077b6:	b2db      	uxtb	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3350      	adds	r3, #80	; 0x50
 80077da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	4413      	add	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
}
 80077ec:	bf00      	nop
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07b      	b.n	8007902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781a:	d009      	beq.n	8007830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	61da      	str	r2, [r3, #28]
 8007822:	e005      	b.n	8007830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7f9 fa92 	bl	8000d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b4:	ea42 0103 	orr.w	r1, r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	0c1b      	lsrs	r3, r3, #16
 80078ce:	f003 0104 	and.w	r1, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	f003 0210 	and.w	r2, r3, #16
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b088      	sub	sp, #32
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_SPI_Transmit+0x22>
 8007928:	2302      	movs	r3, #2
 800792a:	e126      	b.n	8007b7a <HAL_SPI_Transmit+0x270>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007934:	f7fa fb6e 	bl	8002014 <HAL_GetTick>
 8007938:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b01      	cmp	r3, #1
 8007948:	d002      	beq.n	8007950 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800794a:	2302      	movs	r3, #2
 800794c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800794e:	e10b      	b.n	8007b68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_SPI_Transmit+0x52>
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007960:	e102      	b.n	8007b68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2203      	movs	r2, #3
 8007966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a8:	d10f      	bne.n	80079ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d4:	2b40      	cmp	r3, #64	; 0x40
 80079d6:	d007      	beq.n	80079e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f0:	d14b      	bne.n	8007a8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_SPI_Transmit+0xf6>
 80079fa:	8afb      	ldrh	r3, [r7, #22]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d13e      	bne.n	8007a7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	881a      	ldrh	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	1c9a      	adds	r2, r3, #2
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a24:	e02b      	b.n	8007a7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d112      	bne.n	8007a5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	881a      	ldrh	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	1c9a      	adds	r2, r3, #2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a58:	e011      	b.n	8007a7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a5a:	f7fa fadb 	bl	8002014 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d803      	bhi.n	8007a72 <HAL_SPI_Transmit+0x168>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d102      	bne.n	8007a78 <HAL_SPI_Transmit+0x16e>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a7c:	e074      	b.n	8007b68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1ce      	bne.n	8007a26 <HAL_SPI_Transmit+0x11c>
 8007a88:	e04c      	b.n	8007b24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_SPI_Transmit+0x18e>
 8007a92:	8afb      	ldrh	r3, [r7, #22]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d140      	bne.n	8007b1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	7812      	ldrb	r2, [r2, #0]
 8007aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007abe:	e02c      	b.n	8007b1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d113      	bne.n	8007af6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007af4:	e011      	b.n	8007b1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af6:	f7fa fa8d 	bl	8002014 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d803      	bhi.n	8007b0e <HAL_SPI_Transmit+0x204>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0c:	d102      	bne.n	8007b14 <HAL_SPI_Transmit+0x20a>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b18:	e026      	b.n	8007b68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1cd      	bne.n	8007ac0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f8b3 	bl	8007c94 <SPI_EndRxTxTransaction>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e000      	b.n	8007b68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b94:	f7fa fa3e 	bl	8002014 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ba4:	f7fa fa36 	bl	8002014 <HAL_GetTick>
 8007ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007baa:	4b39      	ldr	r3, [pc, #228]	; (8007c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	015b      	lsls	r3, r3, #5
 8007bb0:	0d1b      	lsrs	r3, r3, #20
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bba:	e054      	b.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d050      	beq.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bc4:	f7fa fa26 	bl	8002014 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d902      	bls.n	8007bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d13d      	bne.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bf2:	d111      	bne.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfc:	d004      	beq.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c06:	d107      	bne.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c20:	d10f      	bne.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e017      	b.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d19b      	bne.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000000 	.word	0x20000000

08007c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <SPI_EndRxTxTransaction+0x7c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <SPI_EndRxTxTransaction+0x80>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	0d5b      	lsrs	r3, r3, #21
 8007cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cb0:	fb02 f303 	mul.w	r3, r2, r3
 8007cb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cbe:	d112      	bne.n	8007ce6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2180      	movs	r1, #128	; 0x80
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff ff5a 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f043 0220 	orr.w	r2, r3, #32
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e00f      	b.n	8007d06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfc:	2b80      	cmp	r3, #128	; 0x80
 8007cfe:	d0f2      	beq.n	8007ce6 <SPI_EndRxTxTransaction+0x52>
 8007d00:	e000      	b.n	8007d04 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d02:	bf00      	nop
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000000 	.word	0x20000000
 8007d14:	165e9f81 	.word	0x165e9f81

08007d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e041      	b.n	8007dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7f9 fc46 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f001 fa24 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d001      	beq.n	8007dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e044      	b.n	8007e5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_TIM_Base_Start_IT+0xb0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d018      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x6c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d013      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x6c>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1a      	ldr	r2, [pc, #104]	; (8007e6c <HAL_TIM_Base_Start_IT+0xb4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00e      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x6c>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a19      	ldr	r2, [pc, #100]	; (8007e70 <HAL_TIM_Base_Start_IT+0xb8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x6c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_TIM_Base_Start_IT+0x6c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d111      	bne.n	8007e48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b06      	cmp	r3, #6
 8007e34:	d010      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0201 	orr.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e46:	e007      	b.n	8007e58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0201 	orr.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	40000c00 	.word	0x40000c00
 8007e78:	40014000 	.word	0x40014000

08007e7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e041      	b.n	8007f12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f839 	bl	8007f1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f001 f972 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	bf0c      	ite	eq
 8007f54:	2301      	moveq	r3, #1
 8007f56:	2300      	movne	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e022      	b.n	8007fa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d109      	bne.n	8007f76 <HAL_TIM_PWM_Start_DMA+0x46>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	bf0c      	ite	eq
 8007f6e:	2301      	moveq	r3, #1
 8007f70:	2300      	movne	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	e015      	b.n	8007fa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	d109      	bne.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x60>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	e008      	b.n	8007fa2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2301      	moveq	r3, #1
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e15d      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d109      	bne.n	8007fc4 <HAL_TIM_PWM_Start_DMA+0x94>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	bf0c      	ite	eq
 8007fbc:	2301      	moveq	r3, #1
 8007fbe:	2300      	movne	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e022      	b.n	800800a <HAL_TIM_PWM_Start_DMA+0xda>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d109      	bne.n	8007fde <HAL_TIM_PWM_Start_DMA+0xae>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	bf0c      	ite	eq
 8007fd6:	2301      	moveq	r3, #1
 8007fd8:	2300      	movne	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e015      	b.n	800800a <HAL_TIM_PWM_Start_DMA+0xda>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d109      	bne.n	8007ff8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	bf0c      	ite	eq
 8007ff0:	2301      	moveq	r3, #1
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	e008      	b.n	800800a <HAL_TIM_PWM_Start_DMA+0xda>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b01      	cmp	r3, #1
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d024      	beq.n	8008058 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start_DMA+0xee>
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e123      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800802c:	e016      	b.n	800805c <HAL_TIM_PWM_Start_DMA+0x12c>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b04      	cmp	r3, #4
 8008032:	d104      	bne.n	800803e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803c:	e00e      	b.n	800805c <HAL_TIM_PWM_Start_DMA+0x12c>
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d104      	bne.n	800804e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800804c:	e006      	b.n	800805c <HAL_TIM_PWM_Start_DMA+0x12c>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008056:	e001      	b.n	800805c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e104      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b0c      	cmp	r3, #12
 8008060:	f200 80ae 	bhi.w	80081c0 <HAL_TIM_PWM_Start_DMA+0x290>
 8008064:	a201      	add	r2, pc, #4	; (adr r2, 800806c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	080080a1 	.word	0x080080a1
 8008070:	080081c1 	.word	0x080081c1
 8008074:	080081c1 	.word	0x080081c1
 8008078:	080081c1 	.word	0x080081c1
 800807c:	080080e9 	.word	0x080080e9
 8008080:	080081c1 	.word	0x080081c1
 8008084:	080081c1 	.word	0x080081c1
 8008088:	080081c1 	.word	0x080081c1
 800808c:	08008131 	.word	0x08008131
 8008090:	080081c1 	.word	0x080081c1
 8008094:	080081c1 	.word	0x080081c1
 8008098:	080081c1 	.word	0x080081c1
 800809c:	08008179 	.word	0x08008179
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	4a72      	ldr	r2, [pc, #456]	; (8008270 <HAL_TIM_PWM_Start_DMA+0x340>)
 80080a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	4a71      	ldr	r2, [pc, #452]	; (8008274 <HAL_TIM_PWM_Start_DMA+0x344>)
 80080ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	4a70      	ldr	r2, [pc, #448]	; (8008278 <HAL_TIM_PWM_Start_DMA+0x348>)
 80080b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3334      	adds	r3, #52	; 0x34
 80080c4:	461a      	mov	r2, r3
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	f7fa f9f4 	bl	80024b4 <HAL_DMA_Start_IT>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e0c7      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e4:	60da      	str	r2, [r3, #12]
      break;
 80080e6:	e06e      	b.n	80081c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	4a60      	ldr	r2, [pc, #384]	; (8008270 <HAL_TIM_PWM_Start_DMA+0x340>)
 80080ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	4a5f      	ldr	r2, [pc, #380]	; (8008274 <HAL_TIM_PWM_Start_DMA+0x344>)
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	4a5e      	ldr	r2, [pc, #376]	; (8008278 <HAL_TIM_PWM_Start_DMA+0x348>)
 80080fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3338      	adds	r3, #56	; 0x38
 800810c:	461a      	mov	r2, r3
 800810e:	887b      	ldrh	r3, [r7, #2]
 8008110:	f7fa f9d0 	bl	80024b4 <HAL_DMA_Start_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e0a3      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800812c:	60da      	str	r2, [r3, #12]
      break;
 800812e:	e04a      	b.n	80081c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a4e      	ldr	r2, [pc, #312]	; (8008270 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008136:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a4d      	ldr	r2, [pc, #308]	; (8008274 <HAL_TIM_PWM_Start_DMA+0x344>)
 800813e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	4a4c      	ldr	r2, [pc, #304]	; (8008278 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008146:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	333c      	adds	r3, #60	; 0x3c
 8008154:	461a      	mov	r2, r3
 8008156:	887b      	ldrh	r3, [r7, #2]
 8008158:	f7fa f9ac 	bl	80024b4 <HAL_DMA_Start_IT>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e07f      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008174:	60da      	str	r2, [r3, #12]
      break;
 8008176:	e026      	b.n	80081c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	4a3c      	ldr	r2, [pc, #240]	; (8008270 <HAL_TIM_PWM_Start_DMA+0x340>)
 800817e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	4a3b      	ldr	r2, [pc, #236]	; (8008274 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	4a3a      	ldr	r2, [pc, #232]	; (8008278 <HAL_TIM_PWM_Start_DMA+0x348>)
 800818e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3340      	adds	r3, #64	; 0x40
 800819c:	461a      	mov	r2, r3
 800819e:	887b      	ldrh	r3, [r7, #2]
 80081a0:	f7fa f988 	bl	80024b4 <HAL_DMA_Start_IT>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e05b      	b.n	8008266 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081bc:	60da      	str	r2, [r3, #12]
      break;
 80081be:	e002      	b.n	80081c6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d14b      	bne.n	8008264 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2201      	movs	r2, #1
 80081d2:	68b9      	ldr	r1, [r7, #8]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fba9 	bl	800992c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a27      	ldr	r2, [pc, #156]	; (800827c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d107      	bne.n	80081f4 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a20      	ldr	r2, [pc, #128]	; (800827c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d018      	beq.n	8008230 <HAL_TIM_PWM_Start_DMA+0x300>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d013      	beq.n	8008230 <HAL_TIM_PWM_Start_DMA+0x300>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_TIM_PWM_Start_DMA+0x350>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00e      	beq.n	8008230 <HAL_TIM_PWM_Start_DMA+0x300>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_TIM_PWM_Start_DMA+0x300>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a19      	ldr	r2, [pc, #100]	; (8008288 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_TIM_PWM_Start_DMA+0x300>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d111      	bne.n	8008254 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b06      	cmp	r3, #6
 8008240:	d010      	beq.n	8008264 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0201 	orr.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008252:	e007      	b.n	8008264 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	08008f65 	.word	0x08008f65
 8008274:	0800900d 	.word	0x0800900d
 8008278:	08008ed3 	.word	0x08008ed3
 800827c:	40010000 	.word	0x40010000
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40014000 	.word	0x40014000

08008290 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e041      	b.n	8008326 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f839 	bl	800832e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2202      	movs	r2, #2
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f000 ff68 	bl	80091a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <HAL_TIM_IC_Start_DMA+0x22>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008362:	b2db      	uxtb	r3, r3
 8008364:	e013      	b.n	800838e <HAL_TIM_IC_Start_DMA+0x4a>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d104      	bne.n	8008376 <HAL_TIM_IC_Start_DMA+0x32>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e00b      	b.n	800838e <HAL_TIM_IC_Start_DMA+0x4a>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b08      	cmp	r3, #8
 800837a:	d104      	bne.n	8008386 <HAL_TIM_IC_Start_DMA+0x42>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008382:	b2db      	uxtb	r3, r3
 8008384:	e003      	b.n	800838e <HAL_TIM_IC_Start_DMA+0x4a>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800838c:	b2db      	uxtb	r3, r3
 800838e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <HAL_TIM_IC_Start_DMA+0x5c>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800839c:	b2db      	uxtb	r3, r3
 800839e:	e013      	b.n	80083c8 <HAL_TIM_IC_Start_DMA+0x84>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d104      	bne.n	80083b0 <HAL_TIM_IC_Start_DMA+0x6c>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	e00b      	b.n	80083c8 <HAL_TIM_IC_Start_DMA+0x84>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d104      	bne.n	80083c0 <HAL_TIM_IC_Start_DMA+0x7c>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	e003      	b.n	80083c8 <HAL_TIM_IC_Start_DMA+0x84>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80083ca:	7dbb      	ldrb	r3, [r7, #22]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d002      	beq.n	80083d6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80083d0:	7d7b      	ldrb	r3, [r7, #21]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d101      	bne.n	80083da <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80083d6:	2302      	movs	r3, #2
 80083d8:	e13c      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80083da:	7dbb      	ldrb	r3, [r7, #22]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d143      	bne.n	8008468 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80083e0:	7d7b      	ldrb	r3, [r7, #21]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d140      	bne.n	8008468 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <HAL_TIM_IC_Start_DMA+0xb2>
 80083ec:	887b      	ldrh	r3, [r7, #2]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e12e      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_IC_Start_DMA+0xc2>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008404:	e013      	b.n	800842e <HAL_TIM_IC_Start_DMA+0xea>
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b04      	cmp	r3, #4
 800840a:	d104      	bne.n	8008416 <HAL_TIM_IC_Start_DMA+0xd2>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2202      	movs	r2, #2
 8008410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008414:	e00b      	b.n	800842e <HAL_TIM_IC_Start_DMA+0xea>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d104      	bne.n	8008426 <HAL_TIM_IC_Start_DMA+0xe2>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008424:	e003      	b.n	800842e <HAL_TIM_IC_Start_DMA+0xea>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <HAL_TIM_IC_Start_DMA+0xfa>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800843c:	e016      	b.n	800846c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b04      	cmp	r3, #4
 8008442:	d104      	bne.n	800844e <HAL_TIM_IC_Start_DMA+0x10a>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800844c:	e00e      	b.n	800846c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b08      	cmp	r3, #8
 8008452:	d104      	bne.n	800845e <HAL_TIM_IC_Start_DMA+0x11a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800845c:	e006      	b.n	800846c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008466:	e001      	b.n	800846c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e0f3      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2201      	movs	r2, #1
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fa59 	bl	800992c <TIM_CCxChannelCmd>

  switch (Channel)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b0c      	cmp	r3, #12
 800847e:	f200 80ad 	bhi.w	80085dc <HAL_TIM_IC_Start_DMA+0x298>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_TIM_IC_Start_DMA+0x144>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084bd 	.word	0x080084bd
 800848c:	080085dd 	.word	0x080085dd
 8008490:	080085dd 	.word	0x080085dd
 8008494:	080085dd 	.word	0x080085dd
 8008498:	08008505 	.word	0x08008505
 800849c:	080085dd 	.word	0x080085dd
 80084a0:	080085dd 	.word	0x080085dd
 80084a4:	080085dd 	.word	0x080085dd
 80084a8:	0800854d 	.word	0x0800854d
 80084ac:	080085dd 	.word	0x080085dd
 80084b0:	080085dd 	.word	0x080085dd
 80084b4:	080085dd 	.word	0x080085dd
 80084b8:	08008595 	.word	0x08008595
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	4a66      	ldr	r2, [pc, #408]	; (800865c <HAL_TIM_IC_Start_DMA+0x318>)
 80084c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	4a65      	ldr	r2, [pc, #404]	; (8008660 <HAL_TIM_IC_Start_DMA+0x31c>)
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	4a64      	ldr	r2, [pc, #400]	; (8008664 <HAL_TIM_IC_Start_DMA+0x320>)
 80084d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3334      	adds	r3, #52	; 0x34
 80084de:	4619      	mov	r1, r3
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	887b      	ldrh	r3, [r7, #2]
 80084e4:	f7f9 ffe6 	bl	80024b4 <HAL_DMA_Start_IT>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e0b0      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008500:	60da      	str	r2, [r3, #12]
      break;
 8008502:	e06e      	b.n	80085e2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	4a54      	ldr	r2, [pc, #336]	; (800865c <HAL_TIM_IC_Start_DMA+0x318>)
 800850a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	4a53      	ldr	r2, [pc, #332]	; (8008660 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	4a52      	ldr	r2, [pc, #328]	; (8008664 <HAL_TIM_IC_Start_DMA+0x320>)
 800851a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3338      	adds	r3, #56	; 0x38
 8008526:	4619      	mov	r1, r3
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	887b      	ldrh	r3, [r7, #2]
 800852c:	f7f9 ffc2 	bl	80024b4 <HAL_DMA_Start_IT>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e08c      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008548:	60da      	str	r2, [r3, #12]
      break;
 800854a:	e04a      	b.n	80085e2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a42      	ldr	r2, [pc, #264]	; (800865c <HAL_TIM_IC_Start_DMA+0x318>)
 8008552:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	4a41      	ldr	r2, [pc, #260]	; (8008660 <HAL_TIM_IC_Start_DMA+0x31c>)
 800855a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a40      	ldr	r2, [pc, #256]	; (8008664 <HAL_TIM_IC_Start_DMA+0x320>)
 8008562:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	333c      	adds	r3, #60	; 0x3c
 800856e:	4619      	mov	r1, r3
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	887b      	ldrh	r3, [r7, #2]
 8008574:	f7f9 ff9e 	bl	80024b4 <HAL_DMA_Start_IT>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e068      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008590:	60da      	str	r2, [r3, #12]
      break;
 8008592:	e026      	b.n	80085e2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	4a30      	ldr	r2, [pc, #192]	; (800865c <HAL_TIM_IC_Start_DMA+0x318>)
 800859a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	4a2f      	ldr	r2, [pc, #188]	; (8008660 <HAL_TIM_IC_Start_DMA+0x31c>)
 80085a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a8:	4a2e      	ldr	r2, [pc, #184]	; (8008664 <HAL_TIM_IC_Start_DMA+0x320>)
 80085aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3340      	adds	r3, #64	; 0x40
 80085b6:	4619      	mov	r1, r3
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	887b      	ldrh	r3, [r7, #2]
 80085bc:	f7f9 ff7a 	bl	80024b4 <HAL_DMA_Start_IT>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e044      	b.n	8008654 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085d8:	60da      	str	r2, [r3, #12]
      break;
 80085da:	e002      	b.n	80085e2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	75fb      	strb	r3, [r7, #23]
      break;
 80085e0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a20      	ldr	r2, [pc, #128]	; (8008668 <HAL_TIM_IC_Start_DMA+0x324>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d018      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x2da>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f4:	d013      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x2da>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a1c      	ldr	r2, [pc, #112]	; (800866c <HAL_TIM_IC_Start_DMA+0x328>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00e      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x2da>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1a      	ldr	r2, [pc, #104]	; (8008670 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d009      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x2da>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a19      	ldr	r2, [pc, #100]	; (8008674 <HAL_TIM_IC_Start_DMA+0x330>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d004      	beq.n	800861e <HAL_TIM_IC_Start_DMA+0x2da>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a17      	ldr	r2, [pc, #92]	; (8008678 <HAL_TIM_IC_Start_DMA+0x334>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d111      	bne.n	8008642 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b06      	cmp	r3, #6
 800862e:	d010      	beq.n	8008652 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008640:	e007      	b.n	8008652 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0201 	orr.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	08009075 	.word	0x08009075
 8008660:	0800913d 	.word	0x0800913d
 8008664:	08008ed3 	.word	0x08008ed3
 8008668:	40010000 	.word	0x40010000
 800866c:	40000400 	.word	0x40000400
 8008670:	40000800 	.word	0x40000800
 8008674:	40000c00 	.word	0x40000c00
 8008678:	40014000 	.word	0x40014000

0800867c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2200      	movs	r2, #0
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f94a 	bl	800992c <TIM_CCxChannelCmd>

  switch (Channel)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b0c      	cmp	r3, #12
 800869c:	d854      	bhi.n	8008748 <HAL_TIM_IC_Stop_DMA+0xcc>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <HAL_TIM_IC_Stop_DMA+0x28>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086d9 	.word	0x080086d9
 80086a8:	08008749 	.word	0x08008749
 80086ac:	08008749 	.word	0x08008749
 80086b0:	08008749 	.word	0x08008749
 80086b4:	080086f5 	.word	0x080086f5
 80086b8:	08008749 	.word	0x08008749
 80086bc:	08008749 	.word	0x08008749
 80086c0:	08008749 	.word	0x08008749
 80086c4:	08008711 	.word	0x08008711
 80086c8:	08008749 	.word	0x08008749
 80086cc:	08008749 	.word	0x08008749
 80086d0:	08008749 	.word	0x08008749
 80086d4:	0800872d 	.word	0x0800872d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80086e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7f9 ffa9 	bl	8002644 <HAL_DMA_Abort_IT>
      break;
 80086f2:	e02c      	b.n	800874e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008702:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	4618      	mov	r0, r3
 800870a:	f7f9 ff9b 	bl	8002644 <HAL_DMA_Abort_IT>
      break;
 800870e:	e01e      	b.n	800874e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800871e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4618      	mov	r0, r3
 8008726:	f7f9 ff8d 	bl	8002644 <HAL_DMA_Abort_IT>
      break;
 800872a:	e010      	b.n	800874e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800873a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	4618      	mov	r0, r3
 8008742:	f7f9 ff7f 	bl	8002644 <HAL_DMA_Abort_IT>
      break;
 8008746:	e002      	b.n	800874e <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	bf00      	nop
  }

  if (status == HAL_OK)
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d14f      	bne.n	80087f4 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6a1a      	ldr	r2, [r3, #32]
 800875a:	f241 1311 	movw	r3, #4369	; 0x1111
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10f      	bne.n	8008784 <HAL_TIM_IC_Stop_DMA+0x108>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	f240 4344 	movw	r3, #1092	; 0x444
 800876e:	4013      	ands	r3, r2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d107      	bne.n	8008784 <HAL_TIM_IC_Stop_DMA+0x108>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <HAL_TIM_IC_Stop_DMA+0x118>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008792:	e013      	b.n	80087bc <HAL_TIM_IC_Stop_DMA+0x140>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d104      	bne.n	80087a4 <HAL_TIM_IC_Stop_DMA+0x128>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2201      	movs	r2, #1
 800879e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087a2:	e00b      	b.n	80087bc <HAL_TIM_IC_Stop_DMA+0x140>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d104      	bne.n	80087b4 <HAL_TIM_IC_Stop_DMA+0x138>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087b2:	e003      	b.n	80087bc <HAL_TIM_IC_Stop_DMA+0x140>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d104      	bne.n	80087cc <HAL_TIM_IC_Stop_DMA+0x150>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087ca:	e013      	b.n	80087f4 <HAL_TIM_IC_Stop_DMA+0x178>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d104      	bne.n	80087dc <HAL_TIM_IC_Stop_DMA+0x160>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087da:	e00b      	b.n	80087f4 <HAL_TIM_IC_Stop_DMA+0x178>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d104      	bne.n	80087ec <HAL_TIM_IC_Stop_DMA+0x170>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ea:	e003      	b.n	80087f4 <HAL_TIM_IC_Stop_DMA+0x178>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b02      	cmp	r3, #2
 8008814:	d122      	bne.n	800885c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b02      	cmp	r3, #2
 8008822:	d11b      	bne.n	800885c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f06f 0202 	mvn.w	r2, #2
 800882c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb13 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008848:	e005      	b.n	8008856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fb05 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f008 fdc7 	bl	80113e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b04      	cmp	r3, #4
 8008868:	d122      	bne.n	80088b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b04      	cmp	r3, #4
 8008876:	d11b      	bne.n	80088b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0204 	mvn.w	r2, #4
 8008880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fae9 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 800889c:	e005      	b.n	80088aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fadb 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f008 fd9d 	bl	80113e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b08      	cmp	r3, #8
 80088bc:	d122      	bne.n	8008904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d11b      	bne.n	8008904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f06f 0208 	mvn.w	r2, #8
 80088d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2204      	movs	r2, #4
 80088da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fabf 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 80088f0:	e005      	b.n	80088fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fab1 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f008 fd73 	bl	80113e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	2b10      	cmp	r3, #16
 8008910:	d122      	bne.n	8008958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b10      	cmp	r3, #16
 800891e:	d11b      	bne.n	8008958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0210 	mvn.w	r2, #16
 8008928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2208      	movs	r2, #8
 800892e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa95 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
 8008944:	e005      	b.n	8008952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa87 	bl	8008e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f008 fd49 	bl	80113e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10e      	bne.n	8008984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b01      	cmp	r3, #1
 8008972:	d107      	bne.n	8008984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0201 	mvn.w	r2, #1
 800897c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7f8 f8e4 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b80      	cmp	r3, #128	; 0x80
 8008990:	d10e      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d107      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f8ae 	bl	8009b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa67 	bl	8008eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0220 	mvn.w	r2, #32
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 f878 	bl	8009af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_TIM_IC_ConfigChannel+0x1e>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e088      	b.n	8008b40 <HAL_TIM_IC_ConfigChannel+0x130>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d11b      	bne.n	8008a74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6818      	ldr	r0, [r3, #0]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6819      	ldr	r1, [r3, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f000 fdb6 	bl	80095bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 020c 	bic.w	r2, r2, #12
 8008a5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6999      	ldr	r1, [r3, #24]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	619a      	str	r2, [r3, #24]
 8008a72:	e060      	b.n	8008b36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d11c      	bne.n	8008ab4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f000 fe2e 	bl	80096ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	699a      	ldr	r2, [r3, #24]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6999      	ldr	r1, [r3, #24]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	021a      	lsls	r2, r3, #8
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	619a      	str	r2, [r3, #24]
 8008ab2:	e040      	b.n	8008b36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d11b      	bne.n	8008af2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f000 fe7b 	bl	80097c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 020c 	bic.w	r2, r2, #12
 8008adc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69d9      	ldr	r1, [r3, #28]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	61da      	str	r2, [r3, #28]
 8008af0:	e021      	b.n	8008b36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b0c      	cmp	r3, #12
 8008af6:	d11c      	bne.n	8008b32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	6819      	ldr	r1, [r3, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f000 fe98 	bl	800983c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69da      	ldr	r2, [r3, #28]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008b1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	69d9      	ldr	r1, [r3, #28]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	021a      	lsls	r2, r3, #8
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	61da      	str	r2, [r3, #28]
 8008b30:	e001      	b.n	8008b36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e0ae      	b.n	8008cc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b0c      	cmp	r3, #12
 8008b72:	f200 809f 	bhi.w	8008cb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008bb1 	.word	0x08008bb1
 8008b80:	08008cb5 	.word	0x08008cb5
 8008b84:	08008cb5 	.word	0x08008cb5
 8008b88:	08008cb5 	.word	0x08008cb5
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008cb5 	.word	0x08008cb5
 8008b94:	08008cb5 	.word	0x08008cb5
 8008b98:	08008cb5 	.word	0x08008cb5
 8008b9c:	08008c33 	.word	0x08008c33
 8008ba0:	08008cb5 	.word	0x08008cb5
 8008ba4:	08008cb5 	.word	0x08008cb5
 8008ba8:	08008cb5 	.word	0x08008cb5
 8008bac:	08008c73 	.word	0x08008c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fb74 	bl	80092a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f042 0208 	orr.w	r2, r2, #8
 8008bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0204 	bic.w	r2, r2, #4
 8008bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6999      	ldr	r1, [r3, #24]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	691a      	ldr	r2, [r3, #16]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	619a      	str	r2, [r3, #24]
      break;
 8008bee:	e064      	b.n	8008cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fbba 	bl	8009370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	699a      	ldr	r2, [r3, #24]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6999      	ldr	r1, [r3, #24]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	021a      	lsls	r2, r3, #8
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	619a      	str	r2, [r3, #24]
      break;
 8008c30:	e043      	b.n	8008cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fc05 	bl	8009448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0208 	orr.w	r2, r2, #8
 8008c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0204 	bic.w	r2, r2, #4
 8008c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69d9      	ldr	r1, [r3, #28]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	61da      	str	r2, [r3, #28]
      break;
 8008c70:	e023      	b.n	8008cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fc4f 	bl	800951c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69da      	ldr	r2, [r3, #28]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69d9      	ldr	r1, [r3, #28]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	021a      	lsls	r2, r3, #8
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	61da      	str	r2, [r3, #28]
      break;
 8008cb2:	e002      	b.n	8008cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e0b4      	b.n	8008e52 <HAL_TIM_ConfigClockSource+0x186>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d20:	d03e      	beq.n	8008da0 <HAL_TIM_ConfigClockSource+0xd4>
 8008d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d26:	f200 8087 	bhi.w	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2e:	f000 8086 	beq.w	8008e3e <HAL_TIM_ConfigClockSource+0x172>
 8008d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d36:	d87f      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d38:	2b70      	cmp	r3, #112	; 0x70
 8008d3a:	d01a      	beq.n	8008d72 <HAL_TIM_ConfigClockSource+0xa6>
 8008d3c:	2b70      	cmp	r3, #112	; 0x70
 8008d3e:	d87b      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d40:	2b60      	cmp	r3, #96	; 0x60
 8008d42:	d050      	beq.n	8008de6 <HAL_TIM_ConfigClockSource+0x11a>
 8008d44:	2b60      	cmp	r3, #96	; 0x60
 8008d46:	d877      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d48:	2b50      	cmp	r3, #80	; 0x50
 8008d4a:	d03c      	beq.n	8008dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8008d4c:	2b50      	cmp	r3, #80	; 0x50
 8008d4e:	d873      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d50:	2b40      	cmp	r3, #64	; 0x40
 8008d52:	d058      	beq.n	8008e06 <HAL_TIM_ConfigClockSource+0x13a>
 8008d54:	2b40      	cmp	r3, #64	; 0x40
 8008d56:	d86f      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d58:	2b30      	cmp	r3, #48	; 0x30
 8008d5a:	d064      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15a>
 8008d5c:	2b30      	cmp	r3, #48	; 0x30
 8008d5e:	d86b      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d60:	2b20      	cmp	r3, #32
 8008d62:	d060      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15a>
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d867      	bhi.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d05c      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15a>
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d05a      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x15a>
 8008d70:	e062      	b.n	8008e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6899      	ldr	r1, [r3, #8]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f000 fdb3 	bl	80098ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	609a      	str	r2, [r3, #8]
      break;
 8008d9e:	e04f      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	6899      	ldr	r1, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f000 fd9c 	bl	80098ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dc2:	609a      	str	r2, [r3, #8]
      break;
 8008dc4:	e03c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6859      	ldr	r1, [r3, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f000 fc5a 	bl	800968c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2150      	movs	r1, #80	; 0x50
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fd69 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8008de4:	e02c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	6859      	ldr	r1, [r3, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f000 fcb6 	bl	8009764 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2160      	movs	r1, #96	; 0x60
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fd59 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8008e04:	e01c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f000 fc3a 	bl	800968c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2140      	movs	r1, #64	; 0x40
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fd49 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8008e24:	e00c      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f000 fd40 	bl	80098b6 <TIM_ITRx_SetConfig>
      break;
 8008e36:	e003      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e000      	b.n	8008e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d107      	bne.n	8008efa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ef8:	e02a      	b.n	8008f50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d107      	bne.n	8008f14 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2202      	movs	r2, #2
 8008f08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f12:	e01d      	b.n	8008f50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d107      	bne.n	8008f2e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2204      	movs	r2, #4
 8008f22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f2c:	e010      	b.n	8008f50 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d107      	bne.n	8008f48 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f46:	e003      	b.n	8008f50 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ffb4 	bl	8008ebe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]
}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d10b      	bne.n	8008f94 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d136      	bne.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f92:	e031      	b.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d10b      	bne.n	8008fb6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d125      	bne.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb4:	e020      	b.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d10b      	bne.n	8008fd8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d114      	bne.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fd6:	e00f      	b.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d10a      	bne.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f008 f9f3 	bl	80113e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	771a      	strb	r2, [r3, #28]
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d103      	bne.n	800902c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	771a      	strb	r2, [r3, #28]
 800902a:	e019      	b.n	8009060 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	429a      	cmp	r2, r3
 8009034:	d103      	bne.n	800903e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2202      	movs	r2, #2
 800903a:	771a      	strb	r2, [r3, #28]
 800903c:	e010      	b.n	8009060 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	429a      	cmp	r2, r3
 8009046:	d103      	bne.n	8009050 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2204      	movs	r2, #4
 800904c:	771a      	strb	r2, [r3, #28]
 800904e:	e007      	b.n	8009060 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d102      	bne.n	8009060 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2208      	movs	r2, #8
 800905e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff ff18 	bl	8008e96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	429a      	cmp	r2, r3
 800908a:	d10f      	bne.n	80090ac <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d146      	bne.n	8009128 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090aa:	e03d      	b.n	8009128 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d10f      	bne.n	80090d6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2202      	movs	r2, #2
 80090ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d131      	bne.n	8009128 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090d4:	e028      	b.n	8009128 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d10f      	bne.n	8009100 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2204      	movs	r2, #4
 80090e4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d11c      	bne.n	8009128 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fe:	e013      	b.n	8009128 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d10e      	bne.n	8009128 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2208      	movs	r2, #8
 800910e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d107      	bne.n	8009128 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fea0 	bl	8008e6e <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	771a      	strb	r2, [r3, #28]
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d103      	bne.n	800915c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	771a      	strb	r2, [r3, #28]
 800915a:	e019      	b.n	8009190 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d103      	bne.n	800916e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2202      	movs	r2, #2
 800916a:	771a      	strb	r2, [r3, #28]
 800916c:	e010      	b.n	8009190 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d103      	bne.n	8009180 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2204      	movs	r2, #4
 800917c:	771a      	strb	r2, [r3, #28]
 800917e:	e007      	b.n	8009190 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d102      	bne.n	8009190 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2208      	movs	r2, #8
 800918e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7ff fe76 	bl	8008e82 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a34      	ldr	r2, [pc, #208]	; (8009288 <TIM_Base_SetConfig+0xe4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00f      	beq.n	80091dc <TIM_Base_SetConfig+0x38>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c2:	d00b      	beq.n	80091dc <TIM_Base_SetConfig+0x38>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a31      	ldr	r2, [pc, #196]	; (800928c <TIM_Base_SetConfig+0xe8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d007      	beq.n	80091dc <TIM_Base_SetConfig+0x38>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a30      	ldr	r2, [pc, #192]	; (8009290 <TIM_Base_SetConfig+0xec>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d003      	beq.n	80091dc <TIM_Base_SetConfig+0x38>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a2f      	ldr	r2, [pc, #188]	; (8009294 <TIM_Base_SetConfig+0xf0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d108      	bne.n	80091ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a25      	ldr	r2, [pc, #148]	; (8009288 <TIM_Base_SetConfig+0xe4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d01b      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fc:	d017      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a22      	ldr	r2, [pc, #136]	; (800928c <TIM_Base_SetConfig+0xe8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d013      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a21      	ldr	r2, [pc, #132]	; (8009290 <TIM_Base_SetConfig+0xec>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d00f      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a20      	ldr	r2, [pc, #128]	; (8009294 <TIM_Base_SetConfig+0xf0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00b      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1f      	ldr	r2, [pc, #124]	; (8009298 <TIM_Base_SetConfig+0xf4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d007      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a1e      	ldr	r2, [pc, #120]	; (800929c <TIM_Base_SetConfig+0xf8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d003      	beq.n	800922e <TIM_Base_SetConfig+0x8a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <TIM_Base_SetConfig+0xfc>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d108      	bne.n	8009240 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a08      	ldr	r2, [pc, #32]	; (8009288 <TIM_Base_SetConfig+0xe4>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d103      	bne.n	8009274 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	615a      	str	r2, [r3, #20]
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40010000 	.word	0x40010000
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800

080092a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f023 0201 	bic.w	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0303 	bic.w	r3, r3, #3
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f023 0302 	bic.w	r3, r3, #2
 80092ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a1c      	ldr	r2, [pc, #112]	; (800936c <TIM_OC1_SetConfig+0xc8>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10c      	bne.n	800931a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0308 	bic.w	r3, r3, #8
 8009306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 0304 	bic.w	r3, r3, #4
 8009318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <TIM_OC1_SetConfig+0xc8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d111      	bne.n	8009346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	621a      	str	r2, [r3, #32]
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	40010000 	.word	0x40010000

08009370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0210 	bic.w	r2, r3, #16
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f023 0320 	bic.w	r3, r3, #32
 80093ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <TIM_OC2_SetConfig+0xd4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d10d      	bne.n	80093ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <TIM_OC2_SetConfig+0xd4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d113      	bne.n	800941c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4313      	orrs	r3, r2
 800941a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	621a      	str	r2, [r3, #32]
}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	40010000 	.word	0x40010000

08009448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1d      	ldr	r2, [pc, #116]	; (8009518 <TIM_OC3_SetConfig+0xd0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d10d      	bne.n	80094c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a14      	ldr	r2, [pc, #80]	; (8009518 <TIM_OC3_SetConfig+0xd0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d113      	bne.n	80094f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	621a      	str	r2, [r3, #32]
}
 800950c:	bf00      	nop
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	40010000 	.word	0x40010000

0800951c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	031b      	lsls	r3, r3, #12
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <TIM_OC4_SetConfig+0x9c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d109      	bne.n	8009590 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	019b      	lsls	r3, r3, #6
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40010000 	.word	0x40010000

080095bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
 80095c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a24      	ldr	r2, [pc, #144]	; (8009678 <TIM_TI1_SetConfig+0xbc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d013      	beq.n	8009612 <TIM_TI1_SetConfig+0x56>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f0:	d00f      	beq.n	8009612 <TIM_TI1_SetConfig+0x56>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4a21      	ldr	r2, [pc, #132]	; (800967c <TIM_TI1_SetConfig+0xc0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00b      	beq.n	8009612 <TIM_TI1_SetConfig+0x56>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4a20      	ldr	r2, [pc, #128]	; (8009680 <TIM_TI1_SetConfig+0xc4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d007      	beq.n	8009612 <TIM_TI1_SetConfig+0x56>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <TIM_TI1_SetConfig+0xc8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d003      	beq.n	8009612 <TIM_TI1_SetConfig+0x56>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4a1e      	ldr	r2, [pc, #120]	; (8009688 <TIM_TI1_SetConfig+0xcc>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d101      	bne.n	8009616 <TIM_TI1_SetConfig+0x5a>
 8009612:	2301      	movs	r3, #1
 8009614:	e000      	b.n	8009618 <TIM_TI1_SetConfig+0x5c>
 8009616:	2300      	movs	r3, #0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d008      	beq.n	800962e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e003      	b.n	8009636 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800963c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	b2db      	uxtb	r3, r3
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f023 030a 	bic.w	r3, r3, #10
 8009650:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f003 030a 	and.w	r3, r3, #10
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	4313      	orrs	r3, r2
 800965c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	621a      	str	r2, [r3, #32]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	40010000 	.word	0x40010000
 800967c:	40000400 	.word	0x40000400
 8009680:	40000800 	.word	0x40000800
 8009684:	40000c00 	.word	0x40000c00
 8009688:	40014000 	.word	0x40014000

0800968c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	f023 0201 	bic.w	r2, r3, #1
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4313      	orrs	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	f023 030a 	bic.w	r3, r3, #10
 80096c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	621a      	str	r2, [r3, #32]
}
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b087      	sub	sp, #28
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f023 0210 	bic.w	r2, r3, #16
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009716:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	021b      	lsls	r3, r3, #8
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	4313      	orrs	r3, r2
 8009720:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	031b      	lsls	r3, r3, #12
 800972e:	b29b      	uxth	r3, r3
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800973c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	621a      	str	r2, [r3, #32]
}
 8009758:	bf00      	nop
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f023 0210 	bic.w	r2, r3, #16
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800978e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	031b      	lsls	r3, r3, #12
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	621a      	str	r2, [r3, #32]
}
 80097b8:	bf00      	nop
 80097ba:	371c      	adds	r7, #28
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009800:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	011b      	lsls	r3, r3, #4
 8009806:	b2db      	uxtb	r3, r3
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009814:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4313      	orrs	r3, r2
 8009822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009868:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4313      	orrs	r3, r2
 8009872:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800987a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	031b      	lsls	r3, r3, #12
 8009880:	b29b      	uxth	r3, r3
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800988e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	031b      	lsls	r3, r3, #12
 8009894:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	621a      	str	r2, [r3, #32]
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f043 0307 	orr.w	r3, r3, #7
 80098d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	609a      	str	r2, [r3, #8]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	021a      	lsls	r2, r3, #8
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	431a      	orrs	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4313      	orrs	r3, r2
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	609a      	str	r2, [r3, #8]
}
 8009920:	bf00      	nop
 8009922:	371c      	adds	r7, #28
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f003 031f 	and.w	r3, r3, #31
 800993e:	2201      	movs	r2, #1
 8009940:	fa02 f303 	lsl.w	r3, r2, r3
 8009944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a1a      	ldr	r2, [r3, #32]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	43db      	mvns	r3, r3
 800994e:	401a      	ands	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1a      	ldr	r2, [r3, #32]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	fa01 f303 	lsl.w	r3, r1, r3
 8009964:	431a      	orrs	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d101      	bne.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800998c:	2302      	movs	r3, #2
 800998e:	e050      	b.n	8009a32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4313      	orrs	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1c      	ldr	r2, [pc, #112]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d018      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099dc:	d013      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a18      	ldr	r2, [pc, #96]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00e      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d009      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d004      	beq.n	8009a06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a13      	ldr	r2, [pc, #76]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d10c      	bne.n	8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	40010000 	.word	0x40010000
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40014000 	.word	0x40014000

08009a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e03d      	b.n	8009aec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e03f      	b.n	8009bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7f8 f8f8 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2224      	movs	r2, #36	; 0x24
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 ff9b 	bl	800aaa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695a      	ldr	r2, [r3, #20]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2220      	movs	r2, #32
 8009bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b08a      	sub	sp, #40	; 0x28
 8009bbe:	af02      	add	r7, sp, #8
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	603b      	str	r3, [r7, #0]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	d17c      	bne.n	8009cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d002      	beq.n	8009be6 <HAL_UART_Transmit+0x2c>
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e075      	b.n	8009cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d101      	bne.n	8009bf8 <HAL_UART_Transmit+0x3e>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e06e      	b.n	8009cd6 <HAL_UART_Transmit+0x11c>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2221      	movs	r2, #33	; 0x21
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c0e:	f7f8 fa01 	bl	8002014 <HAL_GetTick>
 8009c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	88fa      	ldrh	r2, [r7, #6]
 8009c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c28:	d108      	bne.n	8009c3c <HAL_UART_Transmit+0x82>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d104      	bne.n	8009c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	61bb      	str	r3, [r7, #24]
 8009c3a:	e003      	b.n	8009c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c4c:	e02a      	b.n	8009ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2200      	movs	r2, #0
 8009c56:	2180      	movs	r1, #128	; 0x80
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 fc53 	bl	800a504 <UART_WaitOnFlagUntilTimeout>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e036      	b.n	8009cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	3302      	adds	r3, #2
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	e007      	b.n	8009c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	781a      	ldrb	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1cf      	bne.n	8009c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2140      	movs	r1, #64	; 0x40
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fc23 	bl	800a504 <UART_WaitOnFlagUntilTimeout>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e006      	b.n	8009cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e000      	b.n	8009cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cd4:	2302      	movs	r3, #2
  }
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b08c      	sub	sp, #48	; 0x30
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	d152      	bne.n	8009d9e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	e04b      	b.n	8009da0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d101      	bne.n	8009d16 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009d12:	2302      	movs	r3, #2
 8009d14:	e044      	b.n	8009da0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fc58 	bl	800a5e0 <UART_Start_Receive_DMA>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d12c      	bne.n	8009d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d125      	bne.n	8009d92 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	613b      	str	r3, [r7, #16]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	613b      	str	r3, [r7, #16]
 8009d5a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	330c      	adds	r3, #12
 8009d62:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f043 0310 	orr.w	r3, r3, #16
 8009d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	330c      	adds	r3, #12
 8009d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d7c:	627a      	str	r2, [r7, #36]	; 0x24
 8009d7e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6a39      	ldr	r1, [r7, #32]
 8009d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e5      	bne.n	8009d5c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8009d90:	e002      	b.n	8009d98 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d9c:	e000      	b.n	8009da0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8009d9e:	2302      	movs	r3, #2
  }
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3730      	adds	r7, #48	; 0x30
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b0ba      	sub	sp, #232	; 0xe8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d10f      	bne.n	8009e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d009      	beq.n	8009e0e <HAL_UART_IRQHandler+0x66>
 8009dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fd8f 	bl	800a92a <UART_Receive_IT>
      return;
 8009e0c:	e256      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 80de 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x22c>
 8009e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d106      	bne.n	8009e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80d1 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <HAL_UART_IRQHandler+0xae>
 8009e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	f043 0201 	orr.w	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00b      	beq.n	8009e7a <HAL_UART_IRQHandler+0xd2>
 8009e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e66:	f003 0301 	and.w	r3, r3, #1
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	f043 0202 	orr.w	r2, r3, #2
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00b      	beq.n	8009e9e <HAL_UART_IRQHandler+0xf6>
 8009e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d005      	beq.n	8009e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f043 0204 	orr.w	r2, r3, #4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d011      	beq.n	8009ece <HAL_UART_IRQHandler+0x126>
 8009eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec6:	f043 0208 	orr.w	r2, r3, #8
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 81ed 	beq.w	800a2b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009edc:	f003 0320 	and.w	r3, r3, #32
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x14e>
 8009ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fd1a 	bl	800a92a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f00:	2b40      	cmp	r3, #64	; 0x40
 8009f02:	bf0c      	ite	eq
 8009f04:	2301      	moveq	r3, #1
 8009f06:	2300      	movne	r3, #0
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d103      	bne.n	8009f22 <HAL_UART_IRQHandler+0x17a>
 8009f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d04f      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fc22 	bl	800a76c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f32:	2b40      	cmp	r3, #64	; 0x40
 8009f34:	d141      	bne.n	8009fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1d9      	bne.n	8009f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d013      	beq.n	8009fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	4a7d      	ldr	r2, [pc, #500]	; (800a184 <HAL_UART_IRQHandler+0x3dc>)
 8009f90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7f8 fb54 	bl	8002644 <HAL_DMA_Abort_IT>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d016      	beq.n	8009fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	e00e      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9a4 	bl	800a300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb8:	e00a      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f9a0 	bl	800a300 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc0:	e006      	b.n	8009fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f99c 	bl	800a300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fce:	e170      	b.n	800a2b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd0:	bf00      	nop
    return;
 8009fd2:	e16e      	b.n	800a2b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	f040 814a 	bne.w	800a272 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 8143 	beq.w	800a272 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 813c 	beq.w	800a272 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60bb      	str	r3, [r7, #8]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01a:	2b40      	cmp	r3, #64	; 0x40
 800a01c:	f040 80b4 	bne.w	800a188 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a02c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8140 	beq.w	800a2b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a03a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a03e:	429a      	cmp	r2, r3
 800a040:	f080 8139 	bcs.w	800a2b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a04a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a056:	f000 8088 	beq.w	800a16a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	330c      	adds	r3, #12
 800a082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a086:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a08a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1d9      	bne.n	800a05a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3314      	adds	r3, #20
 800a0ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0b8:	f023 0301 	bic.w	r3, r3, #1
 800a0bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3314      	adds	r3, #20
 800a0c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e1      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ec:	e853 3f00 	ldrex	r3, [r3]
 800a0f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3314      	adds	r3, #20
 800a102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a106:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a10c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e3      	bne.n	800a0e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	330c      	adds	r3, #12
 800a12e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a13a:	f023 0310 	bic.w	r3, r3, #16
 800a13e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	330c      	adds	r3, #12
 800a148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a14c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a14e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e3      	bne.n	800a128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	4618      	mov	r0, r3
 800a166:	f7f8 f9fd 	bl	8002564 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a172:	b29b      	uxth	r3, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	b29b      	uxth	r3, r3
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f007 fef4 	bl	8011f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a180:	e099      	b.n	800a2b6 <HAL_UART_IRQHandler+0x50e>
 800a182:	bf00      	nop
 800a184:	0800a833 	.word	0x0800a833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a190:	b29b      	uxth	r3, r3
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 808b 	beq.w	800a2ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8086 	beq.w	800a2ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	330c      	adds	r3, #12
 800a1ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1d2:	647a      	str	r2, [r7, #68]	; 0x44
 800a1d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e3      	bne.n	800a1ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3314      	adds	r3, #20
 800a1ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f023 0301 	bic.w	r3, r3, #1
 800a1fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3314      	adds	r3, #20
 800a206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a20a:	633a      	str	r2, [r7, #48]	; 0x30
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e3      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0310 	bic.w	r3, r3, #16
 800a242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	330c      	adds	r3, #12
 800a24c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a250:	61fa      	str	r2, [r7, #28]
 800a252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	617b      	str	r3, [r7, #20]
   return(result);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e3      	bne.n	800a22c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f007 fe7c 	bl	8011f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a270:	e023      	b.n	800a2ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d009      	beq.n	800a292 <HAL_UART_IRQHandler+0x4ea>
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fae5 	bl	800a85a <UART_Transmit_IT>
    return;
 800a290:	e014      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <HAL_UART_IRQHandler+0x514>
 800a29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d008      	beq.n	800a2bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fb25 	bl	800a8fa <UART_EndTransmit_IT>
    return;
 800a2b0:	e004      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
    return;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
      return;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <HAL_UART_IRQHandler+0x514>
      return;
 800a2ba:	bf00      	nop
  }
}
 800a2bc:	37e8      	adds	r7, #232	; 0xe8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b09c      	sub	sp, #112	; 0x70
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a320:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d172      	bne.n	800a416 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a332:	2200      	movs	r2, #0
 800a334:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	330c      	adds	r3, #12
 800a33c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a340:	e853 3f00 	ldrex	r3, [r3]
 800a344:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a34c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	330c      	adds	r3, #12
 800a354:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a356:	65ba      	str	r2, [r7, #88]	; 0x58
 800a358:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a35c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e5      	bne.n	800a336 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3314      	adds	r3, #20
 800a370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37c:	f023 0301 	bic.w	r3, r3, #1
 800a380:	667b      	str	r3, [r7, #100]	; 0x64
 800a382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3314      	adds	r3, #20
 800a388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a38a:	647a      	str	r2, [r7, #68]	; 0x44
 800a38c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e5      	bne.n	800a36a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a39e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3314      	adds	r3, #20
 800a3a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a3b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3be:	633a      	str	r2, [r7, #48]	; 0x30
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e5      	bne.n	800a39e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d119      	bne.n	800a416 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f023 0310 	bic.w	r3, r3, #16
 800a3f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	330c      	adds	r3, #12
 800a400:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a402:	61fa      	str	r2, [r7, #28]
 800a404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a406:	69b9      	ldr	r1, [r7, #24]
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	e841 2300 	strex	r3, r2, [r1]
 800a40e:	617b      	str	r3, [r7, #20]
   return(result);
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1e5      	bne.n	800a3e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d106      	bne.n	800a42c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a422:	4619      	mov	r1, r3
 800a424:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a426:	f007 fd9f 	bl	8011f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a42a:	e002      	b.n	800a432 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a42c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a42e:	f7ff ff53 	bl	800a2d8 <HAL_UART_RxCpltCallback>
}
 800a432:	bf00      	nop
 800a434:	3770      	adds	r7, #112	; 0x70
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d108      	bne.n	800a462 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a454:	085b      	lsrs	r3, r3, #1
 800a456:	b29b      	uxth	r3, r3
 800a458:	4619      	mov	r1, r3
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f007 fd84 	bl	8011f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a460:	e002      	b.n	800a468 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f7ff ff42 	bl	800a2ec <HAL_UART_RxHalfCpltCallback>
}
 800a468:	bf00      	nop
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48c:	2b80      	cmp	r3, #128	; 0x80
 800a48e:	bf0c      	ite	eq
 800a490:	2301      	moveq	r3, #1
 800a492:	2300      	movne	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b21      	cmp	r3, #33	; 0x21
 800a4a2:	d108      	bne.n	800a4b6 <UART_DMAError+0x46>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a4b0:	68b8      	ldr	r0, [r7, #8]
 800a4b2:	f000 f933 	bl	800a71c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c0:	2b40      	cmp	r3, #64	; 0x40
 800a4c2:	bf0c      	ite	eq
 800a4c4:	2301      	moveq	r3, #1
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b22      	cmp	r3, #34	; 0x22
 800a4d6:	d108      	bne.n	800a4ea <UART_DMAError+0x7a>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a4e4:	68b8      	ldr	r0, [r7, #8]
 800a4e6:	f000 f941 	bl	800a76c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	f043 0210 	orr.w	r2, r3, #16
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4f6:	68b8      	ldr	r0, [r7, #8]
 800a4f8:	f7ff ff02 	bl	800a300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b090      	sub	sp, #64	; 0x40
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	4613      	mov	r3, r2
 800a512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a514:	e050      	b.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51c:	d04c      	beq.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <UART_WaitOnFlagUntilTimeout+0x30>
 800a524:	f7f7 fd76 	bl	8002014 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a530:	429a      	cmp	r2, r3
 800a532:	d241      	bcs.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	330c      	adds	r3, #12
 800a53a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	330c      	adds	r3, #12
 800a552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a554:	637a      	str	r2, [r7, #52]	; 0x34
 800a556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a55a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e5      	bne.n	800a534 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	613b      	str	r3, [r7, #16]
   return(result);
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	f023 0301 	bic.w	r3, r3, #1
 800a57e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3314      	adds	r3, #20
 800a586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a588:	623a      	str	r2, [r7, #32]
 800a58a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	69f9      	ldr	r1, [r7, #28]
 800a58e:	6a3a      	ldr	r2, [r7, #32]
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	61bb      	str	r3, [r7, #24]
   return(result);
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e5      	bne.n	800a568 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e00f      	b.n	800a5d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	bf0c      	ite	eq
 800a5c8:	2301      	moveq	r3, #1
 800a5ca:	2300      	movne	r3, #0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	79fb      	ldrb	r3, [r7, #7]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d09f      	beq.n	800a516 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3740      	adds	r7, #64	; 0x40
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b098      	sub	sp, #96	; 0x60
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	88fa      	ldrh	r2, [r7, #6]
 800a5f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2222      	movs	r2, #34	; 0x22
 800a604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	4a40      	ldr	r2, [pc, #256]	; (800a710 <UART_Start_Receive_DMA+0x130>)
 800a60e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	4a3f      	ldr	r2, [pc, #252]	; (800a714 <UART_Start_Receive_DMA+0x134>)
 800a616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	4a3e      	ldr	r2, [pc, #248]	; (800a718 <UART_Start_Receive_DMA+0x138>)
 800a61e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	2200      	movs	r2, #0
 800a626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a628:	f107 0308 	add.w	r3, r7, #8
 800a62c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	f7f7 ff38 	bl	80024b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a644:	2300      	movs	r3, #0
 800a646:	613b      	str	r3, [r7, #16]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d019      	beq.n	800a69e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	330c      	adds	r3, #12
 800a670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a680:	65bb      	str	r3, [r7, #88]	; 0x58
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	330c      	adds	r3, #12
 800a688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a68a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a68c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a690:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1e5      	bne.n	800a66a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3314      	adds	r3, #20
 800a6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	e853 3f00 	ldrex	r3, [r3]
 800a6ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	657b      	str	r3, [r7, #84]	; 0x54
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6be:	63ba      	str	r2, [r7, #56]	; 0x38
 800a6c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1e5      	bne.n	800a69e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3314      	adds	r3, #20
 800a6d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e8:	653b      	str	r3, [r7, #80]	; 0x50
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3314      	adds	r3, #20
 800a6f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6f2:	627a      	str	r2, [r7, #36]	; 0x24
 800a6f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	6a39      	ldr	r1, [r7, #32]
 800a6f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fa:	e841 2300 	strex	r3, r2, [r1]
 800a6fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1e5      	bne.n	800a6d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3760      	adds	r7, #96	; 0x60
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	0800a315 	.word	0x0800a315
 800a714:	0800a43b 	.word	0x0800a43b
 800a718:	0800a471 	.word	0x0800a471

0800a71c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b089      	sub	sp, #36	; 0x24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	330c      	adds	r3, #12
 800a72a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	60bb      	str	r3, [r7, #8]
   return(result);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	330c      	adds	r3, #12
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	61ba      	str	r2, [r7, #24]
 800a746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a748:	6979      	ldr	r1, [r7, #20]
 800a74a:	69ba      	ldr	r2, [r7, #24]
 800a74c:	e841 2300 	strex	r3, r2, [r1]
 800a750:	613b      	str	r3, [r7, #16]
   return(result);
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e5      	bne.n	800a724 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a760:	bf00      	nop
 800a762:	3724      	adds	r7, #36	; 0x24
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b095      	sub	sp, #84	; 0x54
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	330c      	adds	r3, #12
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	e853 3f00 	ldrex	r3, [r3]
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a794:	643a      	str	r2, [r7, #64]	; 0x40
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a79a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a79c:	e841 2300 	strex	r3, r2, [r1]
 800a7a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e5      	bne.n	800a774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3314      	adds	r3, #20
 800a7ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	f023 0301 	bic.w	r3, r3, #1
 800a7be:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3314      	adds	r3, #20
 800a7c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7d0:	e841 2300 	strex	r3, r2, [r1]
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1e5      	bne.n	800a7a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d119      	bne.n	800a818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f023 0310 	bic.w	r3, r3, #16
 800a7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	330c      	adds	r3, #12
 800a802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a804:	61ba      	str	r2, [r7, #24]
 800a806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6979      	ldr	r1, [r7, #20]
 800a80a:	69ba      	ldr	r2, [r7, #24]
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	613b      	str	r3, [r7, #16]
   return(result);
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e5      	bne.n	800a7e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a826:	bf00      	nop
 800a828:	3754      	adds	r7, #84	; 0x54
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff fd57 	bl	800a300 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b21      	cmp	r3, #33	; 0x21
 800a86c:	d13e      	bne.n	800a8ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a876:	d114      	bne.n	800a8a2 <UART_Transmit_IT+0x48>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d110      	bne.n	800a8a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	1c9a      	adds	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	621a      	str	r2, [r3, #32]
 800a8a0:	e008      	b.n	800a8b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	1c59      	adds	r1, r3, #1
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6211      	str	r1, [r2, #32]
 800a8ac:	781a      	ldrb	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10f      	bne.n	800a8e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68da      	ldr	r2, [r3, #12]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e000      	b.n	800a8ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8ec:	2302      	movs	r3, #2
  }
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fcd2 	bl	800a2c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b08c      	sub	sp, #48	; 0x30
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b22      	cmp	r3, #34	; 0x22
 800a93c:	f040 80ab 	bne.w	800aa96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a948:	d117      	bne.n	800a97a <UART_Receive_IT+0x50>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d113      	bne.n	800a97a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a952:	2300      	movs	r3, #0
 800a954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	b29b      	uxth	r3, r3
 800a964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a968:	b29a      	uxth	r2, r3
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a972:	1c9a      	adds	r2, r3, #2
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	629a      	str	r2, [r3, #40]	; 0x28
 800a978:	e026      	b.n	800a9c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98c:	d007      	beq.n	800a99e <UART_Receive_IT+0x74>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10a      	bne.n	800a9ac <UART_Receive_IT+0x82>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	e008      	b.n	800a9be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d15a      	bne.n	800aa92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 0220 	bic.w	r2, r2, #32
 800a9ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695a      	ldr	r2, [r3, #20]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0201 	bic.w	r2, r2, #1
 800aa0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d135      	bne.n	800aa88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	330c      	adds	r3, #12
 800aa28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	613b      	str	r3, [r7, #16]
   return(result);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f023 0310 	bic.w	r3, r3, #16
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	330c      	adds	r3, #12
 800aa40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa42:	623a      	str	r2, [r7, #32]
 800aa44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	69f9      	ldr	r1, [r7, #28]
 800aa48:	6a3a      	ldr	r2, [r7, #32]
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e5      	bne.n	800aa22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	d10a      	bne.n	800aa7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa64:	2300      	movs	r3, #0
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f007 fa71 	bl	8011f68 <HAL_UARTEx_RxEventCallback>
 800aa86:	e002      	b.n	800aa8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fc25 	bl	800a2d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e002      	b.n	800aa98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e000      	b.n	800aa98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa96:	2302      	movs	r3, #2
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3730      	adds	r7, #48	; 0x30
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaa4:	b0c0      	sub	sp, #256	; 0x100
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aaac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aabc:	68d9      	ldr	r1, [r3, #12]
 800aabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	ea40 0301 	orr.w	r3, r0, r1
 800aac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	431a      	orrs	r2, r3
 800aad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	431a      	orrs	r2, r3
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aaec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aaf8:	f021 010c 	bic.w	r1, r1, #12
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab06:	430b      	orrs	r3, r1
 800ab08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ab0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695b      	ldr	r3, [r3, #20]
 800ab12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab1a:	6999      	ldr	r1, [r3, #24]
 800ab1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	ea40 0301 	orr.w	r3, r0, r1
 800ab26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	4b8f      	ldr	r3, [pc, #572]	; (800ad6c <UART_SetConfig+0x2cc>)
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d005      	beq.n	800ab40 <UART_SetConfig+0xa0>
 800ab34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	4b8d      	ldr	r3, [pc, #564]	; (800ad70 <UART_SetConfig+0x2d0>)
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d104      	bne.n	800ab4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab40:	f7fc fa0e 	bl	8006f60 <HAL_RCC_GetPCLK2Freq>
 800ab44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ab48:	e003      	b.n	800ab52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab4a:	f7fc f9f5 	bl	8006f38 <HAL_RCC_GetPCLK1Freq>
 800ab4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab5c:	f040 810c 	bne.w	800ad78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ab72:	4622      	mov	r2, r4
 800ab74:	462b      	mov	r3, r5
 800ab76:	1891      	adds	r1, r2, r2
 800ab78:	65b9      	str	r1, [r7, #88]	; 0x58
 800ab7a:	415b      	adcs	r3, r3
 800ab7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ab82:	4621      	mov	r1, r4
 800ab84:	eb12 0801 	adds.w	r8, r2, r1
 800ab88:	4629      	mov	r1, r5
 800ab8a:	eb43 0901 	adc.w	r9, r3, r1
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ab9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ab9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aba2:	4690      	mov	r8, r2
 800aba4:	4699      	mov	r9, r3
 800aba6:	4623      	mov	r3, r4
 800aba8:	eb18 0303 	adds.w	r3, r8, r3
 800abac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abb0:	462b      	mov	r3, r5
 800abb2:	eb49 0303 	adc.w	r3, r9, r3
 800abb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800abca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800abce:	460b      	mov	r3, r1
 800abd0:	18db      	adds	r3, r3, r3
 800abd2:	653b      	str	r3, [r7, #80]	; 0x50
 800abd4:	4613      	mov	r3, r2
 800abd6:	eb42 0303 	adc.w	r3, r2, r3
 800abda:	657b      	str	r3, [r7, #84]	; 0x54
 800abdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800abe0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800abe4:	f7f5 fafc 	bl	80001e0 <__aeabi_uldivmod>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4b61      	ldr	r3, [pc, #388]	; (800ad74 <UART_SetConfig+0x2d4>)
 800abee:	fba3 2302 	umull	r2, r3, r3, r2
 800abf2:	095b      	lsrs	r3, r3, #5
 800abf4:	011c      	lsls	r4, r3, #4
 800abf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ac04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	1891      	adds	r1, r2, r2
 800ac0e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ac10:	415b      	adcs	r3, r3
 800ac12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ac18:	4641      	mov	r1, r8
 800ac1a:	eb12 0a01 	adds.w	sl, r2, r1
 800ac1e:	4649      	mov	r1, r9
 800ac20:	eb43 0b01 	adc.w	fp, r3, r1
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ac30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ac34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac38:	4692      	mov	sl, r2
 800ac3a:	469b      	mov	fp, r3
 800ac3c:	4643      	mov	r3, r8
 800ac3e:	eb1a 0303 	adds.w	r3, sl, r3
 800ac42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac46:	464b      	mov	r3, r9
 800ac48:	eb4b 0303 	adc.w	r3, fp, r3
 800ac4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ac60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ac64:	460b      	mov	r3, r1
 800ac66:	18db      	adds	r3, r3, r3
 800ac68:	643b      	str	r3, [r7, #64]	; 0x40
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	eb42 0303 	adc.w	r3, r2, r3
 800ac70:	647b      	str	r3, [r7, #68]	; 0x44
 800ac72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac7a:	f7f5 fab1 	bl	80001e0 <__aeabi_uldivmod>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	4b3b      	ldr	r3, [pc, #236]	; (800ad74 <UART_SetConfig+0x2d4>)
 800ac86:	fba3 2301 	umull	r2, r3, r3, r1
 800ac8a:	095b      	lsrs	r3, r3, #5
 800ac8c:	2264      	movs	r2, #100	; 0x64
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	1acb      	subs	r3, r1, r3
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ac9a:	4b36      	ldr	r3, [pc, #216]	; (800ad74 <UART_SetConfig+0x2d4>)
 800ac9c:	fba3 2302 	umull	r2, r3, r3, r2
 800aca0:	095b      	lsrs	r3, r3, #5
 800aca2:	005b      	lsls	r3, r3, #1
 800aca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aca8:	441c      	add	r4, r3
 800acaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800acb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800acbc:	4642      	mov	r2, r8
 800acbe:	464b      	mov	r3, r9
 800acc0:	1891      	adds	r1, r2, r2
 800acc2:	63b9      	str	r1, [r7, #56]	; 0x38
 800acc4:	415b      	adcs	r3, r3
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800accc:	4641      	mov	r1, r8
 800acce:	1851      	adds	r1, r2, r1
 800acd0:	6339      	str	r1, [r7, #48]	; 0x30
 800acd2:	4649      	mov	r1, r9
 800acd4:	414b      	adcs	r3, r1
 800acd6:	637b      	str	r3, [r7, #52]	; 0x34
 800acd8:	f04f 0200 	mov.w	r2, #0
 800acdc:	f04f 0300 	mov.w	r3, #0
 800ace0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ace4:	4659      	mov	r1, fp
 800ace6:	00cb      	lsls	r3, r1, #3
 800ace8:	4651      	mov	r1, sl
 800acea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acee:	4651      	mov	r1, sl
 800acf0:	00ca      	lsls	r2, r1, #3
 800acf2:	4610      	mov	r0, r2
 800acf4:	4619      	mov	r1, r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	4642      	mov	r2, r8
 800acfa:	189b      	adds	r3, r3, r2
 800acfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad00:	464b      	mov	r3, r9
 800ad02:	460a      	mov	r2, r1
 800ad04:	eb42 0303 	adc.w	r3, r2, r3
 800ad08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ad18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ad1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ad20:	460b      	mov	r3, r1
 800ad22:	18db      	adds	r3, r3, r3
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad26:	4613      	mov	r3, r2
 800ad28:	eb42 0303 	adc.w	r3, r2, r3
 800ad2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ad36:	f7f5 fa53 	bl	80001e0 <__aeabi_uldivmod>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <UART_SetConfig+0x2d4>)
 800ad40:	fba3 1302 	umull	r1, r3, r3, r2
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	2164      	movs	r1, #100	; 0x64
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	00db      	lsls	r3, r3, #3
 800ad50:	3332      	adds	r3, #50	; 0x32
 800ad52:	4a08      	ldr	r2, [pc, #32]	; (800ad74 <UART_SetConfig+0x2d4>)
 800ad54:	fba2 2303 	umull	r2, r3, r2, r3
 800ad58:	095b      	lsrs	r3, r3, #5
 800ad5a:	f003 0207 	and.w	r2, r3, #7
 800ad5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4422      	add	r2, r4
 800ad66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ad68:	e105      	b.n	800af76 <UART_SetConfig+0x4d6>
 800ad6a:	bf00      	nop
 800ad6c:	40011000 	.word	0x40011000
 800ad70:	40011400 	.word	0x40011400
 800ad74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ad8a:	4642      	mov	r2, r8
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	1891      	adds	r1, r2, r2
 800ad90:	6239      	str	r1, [r7, #32]
 800ad92:	415b      	adcs	r3, r3
 800ad94:	627b      	str	r3, [r7, #36]	; 0x24
 800ad96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad9a:	4641      	mov	r1, r8
 800ad9c:	1854      	adds	r4, r2, r1
 800ad9e:	4649      	mov	r1, r9
 800ada0:	eb43 0501 	adc.w	r5, r3, r1
 800ada4:	f04f 0200 	mov.w	r2, #0
 800ada8:	f04f 0300 	mov.w	r3, #0
 800adac:	00eb      	lsls	r3, r5, #3
 800adae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800adb2:	00e2      	lsls	r2, r4, #3
 800adb4:	4614      	mov	r4, r2
 800adb6:	461d      	mov	r5, r3
 800adb8:	4643      	mov	r3, r8
 800adba:	18e3      	adds	r3, r4, r3
 800adbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800adc0:	464b      	mov	r3, r9
 800adc2:	eb45 0303 	adc.w	r3, r5, r3
 800adc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800add6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800adda:	f04f 0200 	mov.w	r2, #0
 800adde:	f04f 0300 	mov.w	r3, #0
 800ade2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ade6:	4629      	mov	r1, r5
 800ade8:	008b      	lsls	r3, r1, #2
 800adea:	4621      	mov	r1, r4
 800adec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800adf0:	4621      	mov	r1, r4
 800adf2:	008a      	lsls	r2, r1, #2
 800adf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800adf8:	f7f5 f9f2 	bl	80001e0 <__aeabi_uldivmod>
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4b60      	ldr	r3, [pc, #384]	; (800af84 <UART_SetConfig+0x4e4>)
 800ae02:	fba3 2302 	umull	r2, r3, r3, r2
 800ae06:	095b      	lsrs	r3, r3, #5
 800ae08:	011c      	lsls	r4, r3, #4
 800ae0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ae1c:	4642      	mov	r2, r8
 800ae1e:	464b      	mov	r3, r9
 800ae20:	1891      	adds	r1, r2, r2
 800ae22:	61b9      	str	r1, [r7, #24]
 800ae24:	415b      	adcs	r3, r3
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ae2c:	4641      	mov	r1, r8
 800ae2e:	1851      	adds	r1, r2, r1
 800ae30:	6139      	str	r1, [r7, #16]
 800ae32:	4649      	mov	r1, r9
 800ae34:	414b      	adcs	r3, r1
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	f04f 0200 	mov.w	r2, #0
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae44:	4659      	mov	r1, fp
 800ae46:	00cb      	lsls	r3, r1, #3
 800ae48:	4651      	mov	r1, sl
 800ae4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae4e:	4651      	mov	r1, sl
 800ae50:	00ca      	lsls	r2, r1, #3
 800ae52:	4610      	mov	r0, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	4642      	mov	r2, r8
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae60:	464b      	mov	r3, r9
 800ae62:	460a      	mov	r2, r1
 800ae64:	eb42 0303 	adc.w	r3, r2, r3
 800ae68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae76:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ae78:	f04f 0200 	mov.w	r2, #0
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ae84:	4649      	mov	r1, r9
 800ae86:	008b      	lsls	r3, r1, #2
 800ae88:	4641      	mov	r1, r8
 800ae8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae8e:	4641      	mov	r1, r8
 800ae90:	008a      	lsls	r2, r1, #2
 800ae92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ae96:	f7f5 f9a3 	bl	80001e0 <__aeabi_uldivmod>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4b39      	ldr	r3, [pc, #228]	; (800af84 <UART_SetConfig+0x4e4>)
 800aea0:	fba3 1302 	umull	r1, r3, r3, r2
 800aea4:	095b      	lsrs	r3, r3, #5
 800aea6:	2164      	movs	r1, #100	; 0x64
 800aea8:	fb01 f303 	mul.w	r3, r1, r3
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	011b      	lsls	r3, r3, #4
 800aeb0:	3332      	adds	r3, #50	; 0x32
 800aeb2:	4a34      	ldr	r2, [pc, #208]	; (800af84 <UART_SetConfig+0x4e4>)
 800aeb4:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb8:	095b      	lsrs	r3, r3, #5
 800aeba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aebe:	441c      	add	r4, r3
 800aec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aec4:	2200      	movs	r2, #0
 800aec6:	673b      	str	r3, [r7, #112]	; 0x70
 800aec8:	677a      	str	r2, [r7, #116]	; 0x74
 800aeca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aece:	4642      	mov	r2, r8
 800aed0:	464b      	mov	r3, r9
 800aed2:	1891      	adds	r1, r2, r2
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	415b      	adcs	r3, r3
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aede:	4641      	mov	r1, r8
 800aee0:	1851      	adds	r1, r2, r1
 800aee2:	6039      	str	r1, [r7, #0]
 800aee4:	4649      	mov	r1, r9
 800aee6:	414b      	adcs	r3, r1
 800aee8:	607b      	str	r3, [r7, #4]
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	f04f 0300 	mov.w	r3, #0
 800aef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aef6:	4659      	mov	r1, fp
 800aef8:	00cb      	lsls	r3, r1, #3
 800aefa:	4651      	mov	r1, sl
 800aefc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af00:	4651      	mov	r1, sl
 800af02:	00ca      	lsls	r2, r1, #3
 800af04:	4610      	mov	r0, r2
 800af06:	4619      	mov	r1, r3
 800af08:	4603      	mov	r3, r0
 800af0a:	4642      	mov	r2, r8
 800af0c:	189b      	adds	r3, r3, r2
 800af0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800af10:	464b      	mov	r3, r9
 800af12:	460a      	mov	r2, r1
 800af14:	eb42 0303 	adc.w	r3, r2, r3
 800af18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	663b      	str	r3, [r7, #96]	; 0x60
 800af24:	667a      	str	r2, [r7, #100]	; 0x64
 800af26:	f04f 0200 	mov.w	r2, #0
 800af2a:	f04f 0300 	mov.w	r3, #0
 800af2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800af32:	4649      	mov	r1, r9
 800af34:	008b      	lsls	r3, r1, #2
 800af36:	4641      	mov	r1, r8
 800af38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af3c:	4641      	mov	r1, r8
 800af3e:	008a      	lsls	r2, r1, #2
 800af40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800af44:	f7f5 f94c 	bl	80001e0 <__aeabi_uldivmod>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <UART_SetConfig+0x4e4>)
 800af4e:	fba3 1302 	umull	r1, r3, r3, r2
 800af52:	095b      	lsrs	r3, r3, #5
 800af54:	2164      	movs	r1, #100	; 0x64
 800af56:	fb01 f303 	mul.w	r3, r1, r3
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	011b      	lsls	r3, r3, #4
 800af5e:	3332      	adds	r3, #50	; 0x32
 800af60:	4a08      	ldr	r2, [pc, #32]	; (800af84 <UART_SetConfig+0x4e4>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	095b      	lsrs	r3, r3, #5
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4422      	add	r2, r4
 800af74:	609a      	str	r2, [r3, #8]
}
 800af76:	bf00      	nop
 800af78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800af7c:	46bd      	mov	sp, r7
 800af7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af82:	bf00      	nop
 800af84:	51eb851f 	.word	0x51eb851f

0800af88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af88:	b084      	sub	sp, #16
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	f107 001c 	add.w	r0, r7, #28
 800af96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d122      	bne.n	800afe6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800afb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d105      	bne.n	800afda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fbee 	bl	800c7bc <USB_CoreReset>
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
 800afe4:	e01a      	b.n	800b01c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f001 fbe2 	bl	800c7bc <USB_CoreReset>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800affc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affe:	2b00      	cmp	r3, #0
 800b000:	d106      	bne.n	800b010 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	639a      	str	r2, [r3, #56]	; 0x38
 800b00e:	e005      	b.n	800b01c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d10b      	bne.n	800b03a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f043 0206 	orr.w	r2, r3, #6
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f043 0220 	orr.w	r2, r3, #32
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3710      	adds	r7, #16
 800b040:	46bd      	mov	sp, r7
 800b042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b046:	b004      	add	sp, #16
 800b048:	4770      	bx	lr
	...

0800b04c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d165      	bne.n	800b12c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	4a41      	ldr	r2, [pc, #260]	; (800b168 <USB_SetTurnaroundTime+0x11c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d906      	bls.n	800b076 <USB_SetTurnaroundTime+0x2a>
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	4a40      	ldr	r2, [pc, #256]	; (800b16c <USB_SetTurnaroundTime+0x120>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d202      	bcs.n	800b076 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b070:	230f      	movs	r3, #15
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	e062      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4a3c      	ldr	r2, [pc, #240]	; (800b16c <USB_SetTurnaroundTime+0x120>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d306      	bcc.n	800b08c <USB_SetTurnaroundTime+0x40>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4a3b      	ldr	r2, [pc, #236]	; (800b170 <USB_SetTurnaroundTime+0x124>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d202      	bcs.n	800b08c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b086:	230e      	movs	r3, #14
 800b088:	617b      	str	r3, [r7, #20]
 800b08a:	e057      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	4a38      	ldr	r2, [pc, #224]	; (800b170 <USB_SetTurnaroundTime+0x124>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d306      	bcc.n	800b0a2 <USB_SetTurnaroundTime+0x56>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	4a37      	ldr	r2, [pc, #220]	; (800b174 <USB_SetTurnaroundTime+0x128>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d202      	bcs.n	800b0a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b09c:	230d      	movs	r3, #13
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e04c      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	4a33      	ldr	r2, [pc, #204]	; (800b174 <USB_SetTurnaroundTime+0x128>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d306      	bcc.n	800b0b8 <USB_SetTurnaroundTime+0x6c>
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4a32      	ldr	r2, [pc, #200]	; (800b178 <USB_SetTurnaroundTime+0x12c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d802      	bhi.n	800b0b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e041      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4a2f      	ldr	r2, [pc, #188]	; (800b178 <USB_SetTurnaroundTime+0x12c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d906      	bls.n	800b0ce <USB_SetTurnaroundTime+0x82>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	4a2e      	ldr	r2, [pc, #184]	; (800b17c <USB_SetTurnaroundTime+0x130>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d802      	bhi.n	800b0ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b0c8:	230b      	movs	r3, #11
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	e036      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	4a2a      	ldr	r2, [pc, #168]	; (800b17c <USB_SetTurnaroundTime+0x130>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d906      	bls.n	800b0e4 <USB_SetTurnaroundTime+0x98>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4a29      	ldr	r2, [pc, #164]	; (800b180 <USB_SetTurnaroundTime+0x134>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d802      	bhi.n	800b0e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b0de:	230a      	movs	r3, #10
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	e02b      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4a26      	ldr	r2, [pc, #152]	; (800b180 <USB_SetTurnaroundTime+0x134>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d906      	bls.n	800b0fa <USB_SetTurnaroundTime+0xae>
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4a25      	ldr	r2, [pc, #148]	; (800b184 <USB_SetTurnaroundTime+0x138>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d202      	bcs.n	800b0fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b0f4:	2309      	movs	r3, #9
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	e020      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4a21      	ldr	r2, [pc, #132]	; (800b184 <USB_SetTurnaroundTime+0x138>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d306      	bcc.n	800b110 <USB_SetTurnaroundTime+0xc4>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4a20      	ldr	r2, [pc, #128]	; (800b188 <USB_SetTurnaroundTime+0x13c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d802      	bhi.n	800b110 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b10a:	2308      	movs	r3, #8
 800b10c:	617b      	str	r3, [r7, #20]
 800b10e:	e015      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	4a1d      	ldr	r2, [pc, #116]	; (800b188 <USB_SetTurnaroundTime+0x13c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d906      	bls.n	800b126 <USB_SetTurnaroundTime+0xda>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <USB_SetTurnaroundTime+0x140>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d202      	bcs.n	800b126 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b120:	2307      	movs	r3, #7
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e00a      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b126:	2306      	movs	r3, #6
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	e007      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b132:	2309      	movs	r3, #9
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e001      	b.n	800b13c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b138:	2309      	movs	r3, #9
 800b13a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	029b      	lsls	r3, r3, #10
 800b150:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b154:	431a      	orrs	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	371c      	adds	r7, #28
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	00d8acbf 	.word	0x00d8acbf
 800b16c:	00e4e1c0 	.word	0x00e4e1c0
 800b170:	00f42400 	.word	0x00f42400
 800b174:	01067380 	.word	0x01067380
 800b178:	011a499f 	.word	0x011a499f
 800b17c:	01312cff 	.word	0x01312cff
 800b180:	014ca43f 	.word	0x014ca43f
 800b184:	016e3600 	.word	0x016e3600
 800b188:	01a6ab1f 	.word	0x01a6ab1f
 800b18c:	01e84800 	.word	0x01e84800

0800b190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	f043 0201 	orr.w	r2, r3, #1
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f023 0201 	bic.w	r2, r3, #1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d115      	bne.n	800b222 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b202:	2001      	movs	r0, #1
 800b204:	f7f6 ff12 	bl	800202c <HAL_Delay>
      ms++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 fa45 	bl	800c69e <USB_GetMode>
 800b214:	4603      	mov	r3, r0
 800b216:	2b01      	cmp	r3, #1
 800b218:	d01e      	beq.n	800b258 <USB_SetCurrentMode+0x84>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b31      	cmp	r3, #49	; 0x31
 800b21e:	d9f0      	bls.n	800b202 <USB_SetCurrentMode+0x2e>
 800b220:	e01a      	b.n	800b258 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d115      	bne.n	800b254 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b234:	2001      	movs	r0, #1
 800b236:	f7f6 fef9 	bl	800202c <HAL_Delay>
      ms++;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fa2c 	bl	800c69e <USB_GetMode>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <USB_SetCurrentMode+0x84>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b31      	cmp	r3, #49	; 0x31
 800b250:	d9f0      	bls.n	800b234 <USB_SetCurrentMode+0x60>
 800b252:	e001      	b.n	800b258 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e005      	b.n	800b264 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b32      	cmp	r3, #50	; 0x32
 800b25c:	d101      	bne.n	800b262 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	e000      	b.n	800b264 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b26c:	b084      	sub	sp, #16
 800b26e:	b580      	push	{r7, lr}
 800b270:	b086      	sub	sp, #24
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b286:	2300      	movs	r3, #0
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	e009      	b.n	800b2a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	3340      	adds	r3, #64	; 0x40
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	2200      	movs	r2, #0
 800b298:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	3301      	adds	r3, #1
 800b29e:	613b      	str	r3, [r7, #16]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	2b0e      	cmp	r3, #14
 800b2a4:	d9f2      	bls.n	800b28c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d11c      	bne.n	800b2e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2ba:	f043 0302 	orr.w	r3, r3, #2
 800b2be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38
 800b2e4:	e00b      	b.n	800b2fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b304:	461a      	mov	r2, r3
 800b306:	2300      	movs	r3, #0
 800b308:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b310:	4619      	mov	r1, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b318:	461a      	mov	r2, r3
 800b31a:	680b      	ldr	r3, [r1, #0]
 800b31c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	2b01      	cmp	r3, #1
 800b322:	d10c      	bne.n	800b33e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b32a:	2100      	movs	r1, #0
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f965 	bl	800b5fc <USB_SetDevSpeed>
 800b332:	e008      	b.n	800b346 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b334:	2101      	movs	r1, #1
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 f960 	bl	800b5fc <USB_SetDevSpeed>
 800b33c:	e003      	b.n	800b346 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b33e:	2103      	movs	r1, #3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f95b 	bl	800b5fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b346:	2110      	movs	r1, #16
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f8f3 	bl	800b534 <USB_FlushTxFifo>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f91f 	bl	800b59c <USB_FlushRxFifo>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36e:	461a      	mov	r2, r3
 800b370:	2300      	movs	r3, #0
 800b372:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37a:	461a      	mov	r2, r3
 800b37c:	2300      	movs	r3, #0
 800b37e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b386:	461a      	mov	r2, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b38c:	2300      	movs	r3, #0
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	e043      	b.n	800b41a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	015a      	lsls	r2, r3, #5
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4413      	add	r3, r2
 800b39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a8:	d118      	bne.n	800b3dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10a      	bne.n	800b3c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	e013      	b.n	800b3ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	e008      	b.n	800b3ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	461a      	mov	r2, r3
 800b40e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b412:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	3301      	adds	r3, #1
 800b418:	613b      	str	r3, [r7, #16]
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d3b7      	bcc.n	800b392 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b422:	2300      	movs	r3, #0
 800b424:	613b      	str	r3, [r7, #16]
 800b426:	e043      	b.n	800b4b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b43a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b43e:	d118      	bne.n	800b472 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d10a      	bne.n	800b45c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b452:	461a      	mov	r2, r3
 800b454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	e013      	b.n	800b484 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b468:	461a      	mov	r2, r3
 800b46a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	e008      	b.n	800b484 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47e:	461a      	mov	r2, r3
 800b480:	2300      	movs	r3, #0
 800b482:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b490:	461a      	mov	r2, r3
 800b492:	2300      	movs	r3, #0
 800b494:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b4a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	613b      	str	r3, [r7, #16]
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d3b7      	bcc.n	800b428 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b4d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	f043 0210 	orr.w	r2, r3, #16
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	699a      	ldr	r2, [r3, #24]
 800b4f0:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <USB_DevInit+0x2c4>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d005      	beq.n	800b50a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	f043 0208 	orr.w	r2, r3, #8
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d107      	bne.n	800b520 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b518:	f043 0304 	orr.w	r3, r3, #4
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b520:	7dfb      	ldrb	r3, [r7, #23]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b52c:	b004      	add	sp, #16
 800b52e:	4770      	bx	lr
 800b530:	803c3800 	.word	0x803c3800

0800b534 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4a13      	ldr	r2, [pc, #76]	; (800b598 <USB_FlushTxFifo+0x64>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d901      	bls.n	800b554 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e01b      	b.n	800b58c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	daf2      	bge.n	800b542 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b55c:	2300      	movs	r3, #0
 800b55e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	019b      	lsls	r3, r3, #6
 800b564:	f043 0220 	orr.w	r2, r3, #32
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4a08      	ldr	r2, [pc, #32]	; (800b598 <USB_FlushTxFifo+0x64>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d901      	bls.n	800b57e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b57a:	2303      	movs	r3, #3
 800b57c:	e006      	b.n	800b58c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b20      	cmp	r3, #32
 800b588:	d0f0      	beq.n	800b56c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr
 800b598:	00030d40 	.word	0x00030d40

0800b59c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4a11      	ldr	r2, [pc, #68]	; (800b5f8 <USB_FlushRxFifo+0x5c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d901      	bls.n	800b5ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e018      	b.n	800b5ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	daf2      	bge.n	800b5a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2210      	movs	r2, #16
 800b5ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a08      	ldr	r2, [pc, #32]	; (800b5f8 <USB_FlushRxFifo+0x5c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d901      	bls.n	800b5de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e006      	b.n	800b5ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	d0f0      	beq.n	800b5cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3714      	adds	r7, #20
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	00030d40 	.word	0x00030d40

0800b5fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	78fb      	ldrb	r3, [r7, #3]
 800b616:	68f9      	ldr	r1, [r7, #12]
 800b618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b61c:	4313      	orrs	r3, r2
 800b61e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b62e:	b480      	push	{r7}
 800b630:	b087      	sub	sp, #28
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	f003 0306 	and.w	r3, r3, #6
 800b646:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b64e:	2300      	movs	r3, #0
 800b650:	75fb      	strb	r3, [r7, #23]
 800b652:	e00a      	b.n	800b66a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b02      	cmp	r3, #2
 800b658:	d002      	beq.n	800b660 <USB_GetDevSpeed+0x32>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b06      	cmp	r3, #6
 800b65e:	d102      	bne.n	800b666 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b660:	2302      	movs	r3, #2
 800b662:	75fb      	strb	r3, [r7, #23]
 800b664:	e001      	b.n	800b66a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b666:	230f      	movs	r3, #15
 800b668:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d13a      	bne.n	800b70a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69a:	69da      	ldr	r2, [r3, #28]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	68f9      	ldr	r1, [r7, #12]
 800b6ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d155      	bne.n	800b778 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	791b      	ldrb	r3, [r3, #4]
 800b6e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	059b      	lsls	r3, r3, #22
 800b6ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	0151      	lsls	r1, r2, #5
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	440a      	add	r2, r1
 800b6fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	e036      	b.n	800b778 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b710:	69da      	ldr	r2, [r3, #28]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 030f 	and.w	r3, r3, #15
 800b71a:	2101      	movs	r1, #1
 800b71c:	fa01 f303 	lsl.w	r3, r1, r3
 800b720:	041b      	lsls	r3, r3, #16
 800b722:	68f9      	ldr	r1, [r7, #12]
 800b724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b728:	4313      	orrs	r3, r2
 800b72a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d11a      	bne.n	800b778 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	791b      	ldrb	r3, [r3, #4]
 800b75c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b75e:	430b      	orrs	r3, r1
 800b760:	4313      	orrs	r3, r2
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b776:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
	...

0800b788 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	785b      	ldrb	r3, [r3, #1]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d161      	bne.n	800b868 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7ba:	d11f      	bne.n	800b7fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	0151      	lsls	r1, r2, #5
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	440a      	add	r2, r1
 800b7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	0151      	lsls	r1, r2, #5
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	440a      	add	r2, r1
 800b7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	f003 030f 	and.w	r3, r3, #15
 800b80c:	2101      	movs	r1, #1
 800b80e:	fa01 f303 	lsl.w	r3, r1, r3
 800b812:	b29b      	uxth	r3, r3
 800b814:	43db      	mvns	r3, r3
 800b816:	68f9      	ldr	r1, [r7, #12]
 800b818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b81c:	4013      	ands	r3, r2
 800b81e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	f003 030f 	and.w	r3, r3, #15
 800b830:	2101      	movs	r1, #1
 800b832:	fa01 f303 	lsl.w	r3, r1, r3
 800b836:	b29b      	uxth	r3, r3
 800b838:	43db      	mvns	r3, r3
 800b83a:	68f9      	ldr	r1, [r7, #12]
 800b83c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b840:	4013      	ands	r3, r2
 800b842:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	0159      	lsls	r1, r3, #5
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	440b      	add	r3, r1
 800b85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85e:	4619      	mov	r1, r3
 800b860:	4b35      	ldr	r3, [pc, #212]	; (800b938 <USB_DeactivateEndpoint+0x1b0>)
 800b862:	4013      	ands	r3, r2
 800b864:	600b      	str	r3, [r1, #0]
 800b866:	e060      	b.n	800b92a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b87a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b87e:	d11f      	bne.n	800b8c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	0151      	lsls	r1, r2, #5
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	440a      	add	r2, r1
 800b896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b89a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b89e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	0151      	lsls	r1, r2, #5
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	440a      	add	r2, r1
 800b8b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	f003 030f 	and.w	r3, r3, #15
 800b8d0:	2101      	movs	r1, #1
 800b8d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d6:	041b      	lsls	r3, r3, #16
 800b8d8:	43db      	mvns	r3, r3
 800b8da:	68f9      	ldr	r1, [r7, #12]
 800b8dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ea:	69da      	ldr	r2, [r3, #28]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	f003 030f 	and.w	r3, r3, #15
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b8fa:	041b      	lsls	r3, r3, #16
 800b8fc:	43db      	mvns	r3, r3
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b904:	4013      	ands	r3, r2
 800b906:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	0159      	lsls	r1, r3, #5
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	440b      	add	r3, r1
 800b91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b922:	4619      	mov	r1, r3
 800b924:	4b05      	ldr	r3, [pc, #20]	; (800b93c <USB_DeactivateEndpoint+0x1b4>)
 800b926:	4013      	ands	r3, r2
 800b928:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	ec337800 	.word	0xec337800
 800b93c:	eff37800 	.word	0xeff37800

0800b940 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	; 0x28
 800b944:	af02      	add	r7, sp, #8
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	f040 815c 	bne.w	800bc1a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d132      	bne.n	800b9d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	0151      	lsls	r1, r2, #5
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	440a      	add	r2, r1
 800b980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b984:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b988:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b98c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	015a      	lsls	r2, r3, #5
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	4413      	add	r3, r2
 800b996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	0151      	lsls	r1, r2, #5
 800b9a0:	69fa      	ldr	r2, [r7, #28]
 800b9a2:	440a      	add	r2, r1
 800b9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	0151      	lsls	r1, r2, #5
 800b9c0:	69fa      	ldr	r2, [r7, #28]
 800b9c2:	440a      	add	r2, r1
 800b9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c8:	0cdb      	lsrs	r3, r3, #19
 800b9ca:	04db      	lsls	r3, r3, #19
 800b9cc:	6113      	str	r3, [r2, #16]
 800b9ce:	e074      	b.n	800baba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	0151      	lsls	r1, r2, #5
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	440a      	add	r2, r1
 800b9e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ea:	0cdb      	lsrs	r3, r3, #19
 800b9ec:	04db      	lsls	r3, r3, #19
 800b9ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	0151      	lsls	r1, r2, #5
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	440a      	add	r2, r1
 800ba06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	6999      	ldr	r1, [r3, #24]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	440b      	add	r3, r1
 800ba2c:	1e59      	subs	r1, r3, #1
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	fbb1 f3f3 	udiv	r3, r1, r3
 800ba36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ba38:	4b9d      	ldr	r3, [pc, #628]	; (800bcb0 <USB_EPStartXfer+0x370>)
 800ba3a:	400b      	ands	r3, r1
 800ba3c:	69b9      	ldr	r1, [r7, #24]
 800ba3e:	0148      	lsls	r0, r1, #5
 800ba40:	69f9      	ldr	r1, [r7, #28]
 800ba42:	4401      	add	r1, r0
 800ba44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba58:	691a      	ldr	r2, [r3, #16]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	699b      	ldr	r3, [r3, #24]
 800ba5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba62:	69b9      	ldr	r1, [r7, #24]
 800ba64:	0148      	lsls	r0, r1, #5
 800ba66:	69f9      	ldr	r1, [r7, #28]
 800ba68:	4401      	add	r1, r0
 800ba6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	791b      	ldrb	r3, [r3, #4]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d11f      	bne.n	800baba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	69ba      	ldr	r2, [r7, #24]
 800ba8a:	0151      	lsls	r1, r2, #5
 800ba8c:	69fa      	ldr	r2, [r7, #28]
 800ba8e:	440a      	add	r2, r1
 800ba90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ba98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	0151      	lsls	r1, r2, #5
 800baac:	69fa      	ldr	r2, [r7, #28]
 800baae:	440a      	add	r2, r1
 800bab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bab8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d14b      	bne.n	800bb58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d009      	beq.n	800badc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad4:	461a      	mov	r2, r3
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	791b      	ldrb	r3, [r3, #4]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d128      	bne.n	800bb36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d110      	bne.n	800bb16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	0151      	lsls	r1, r2, #5
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	440a      	add	r2, r1
 800bb0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	e00f      	b.n	800bb36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69ba      	ldr	r2, [r7, #24]
 800bb26:	0151      	lsls	r1, r2, #5
 800bb28:	69fa      	ldr	r2, [r7, #28]
 800bb2a:	440a      	add	r2, r1
 800bb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	69ba      	ldr	r2, [r7, #24]
 800bb46:	0151      	lsls	r1, r2, #5
 800bb48:	69fa      	ldr	r2, [r7, #28]
 800bb4a:	440a      	add	r2, r1
 800bb4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	e133      	b.n	800bdc0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	0151      	lsls	r1, r2, #5
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	440a      	add	r2, r1
 800bb6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	791b      	ldrb	r3, [r3, #4]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d015      	beq.n	800bbac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 811b 	beq.w	800bdc0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bba0:	69f9      	ldr	r1, [r7, #28]
 800bba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bba6:	4313      	orrs	r3, r2
 800bba8:	634b      	str	r3, [r1, #52]	; 0x34
 800bbaa:	e109      	b.n	800bdc0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d110      	bne.n	800bbde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69ba      	ldr	r2, [r7, #24]
 800bbcc:	0151      	lsls	r1, r2, #5
 800bbce:	69fa      	ldr	r2, [r7, #28]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	e00f      	b.n	800bbfe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	015a      	lsls	r2, r3, #5
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	69ba      	ldr	r2, [r7, #24]
 800bbee:	0151      	lsls	r1, r2, #5
 800bbf0:	69fa      	ldr	r2, [r7, #28]
 800bbf2:	440a      	add	r2, r1
 800bbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbfc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6919      	ldr	r1, [r3, #16]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	781a      	ldrb	r2, [r3, #0]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	b298      	uxth	r0, r3
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	4603      	mov	r3, r0
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 fade 	bl	800c1d4 <USB_WritePacket>
 800bc18:	e0d2      	b.n	800bdc0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	0151      	lsls	r1, r2, #5
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	440a      	add	r2, r1
 800bc30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc34:	0cdb      	lsrs	r3, r3, #19
 800bc36:	04db      	lsls	r3, r3, #19
 800bc38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	015a      	lsls	r2, r3, #5
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	4413      	add	r3, r2
 800bc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	69ba      	ldr	r2, [r7, #24]
 800bc4a:	0151      	lsls	r1, r2, #5
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	440a      	add	r2, r1
 800bc50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d126      	bne.n	800bcb4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc72:	691a      	ldr	r2, [r3, #16]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc7c:	69b9      	ldr	r1, [r7, #24]
 800bc7e:	0148      	lsls	r0, r1, #5
 800bc80:	69f9      	ldr	r1, [r7, #28]
 800bc82:	4401      	add	r1, r0
 800bc84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	0151      	lsls	r1, r2, #5
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	440a      	add	r2, r1
 800bca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcaa:	6113      	str	r3, [r2, #16]
 800bcac:	e03a      	b.n	800bd24 <USB_EPStartXfer+0x3e4>
 800bcae:	bf00      	nop
 800bcb0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	699a      	ldr	r2, [r3, #24]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	8afa      	ldrh	r2, [r7, #22]
 800bcd0:	fb03 f202 	mul.w	r2, r3, r2
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	015a      	lsls	r2, r3, #5
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	4413      	add	r3, r2
 800bce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce4:	691a      	ldr	r2, [r3, #16]
 800bce6:	8afb      	ldrh	r3, [r7, #22]
 800bce8:	04d9      	lsls	r1, r3, #19
 800bcea:	4b38      	ldr	r3, [pc, #224]	; (800bdcc <USB_EPStartXfer+0x48c>)
 800bcec:	400b      	ands	r3, r1
 800bcee:	69b9      	ldr	r1, [r7, #24]
 800bcf0:	0148      	lsls	r0, r1, #5
 800bcf2:	69f9      	ldr	r1, [r7, #28]
 800bcf4:	4401      	add	r1, r0
 800bcf6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	015a      	lsls	r2, r3, #5
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	4413      	add	r3, r2
 800bd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd14:	69b9      	ldr	r1, [r7, #24]
 800bd16:	0148      	lsls	r0, r1, #5
 800bd18:	69f9      	ldr	r1, [r7, #28]
 800bd1a:	4401      	add	r1, r0
 800bd1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bd20:	4313      	orrs	r3, r2
 800bd22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd24:	79fb      	ldrb	r3, [r7, #7]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d10d      	bne.n	800bd46 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d009      	beq.n	800bd46 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	6919      	ldr	r1, [r3, #16]
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	015a      	lsls	r2, r3, #5
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd42:	460a      	mov	r2, r1
 800bd44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	791b      	ldrb	r3, [r3, #4]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d128      	bne.n	800bda0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d110      	bne.n	800bd80 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	0151      	lsls	r1, r2, #5
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	440a      	add	r2, r1
 800bd74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	e00f      	b.n	800bda0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69ba      	ldr	r2, [r7, #24]
 800bd90:	0151      	lsls	r1, r2, #5
 800bd92:	69fa      	ldr	r2, [r7, #28]
 800bd94:	440a      	add	r2, r1
 800bd96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	015a      	lsls	r2, r3, #5
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	4413      	add	r3, r2
 800bda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	69ba      	ldr	r2, [r7, #24]
 800bdb0:	0151      	lsls	r1, r2, #5
 800bdb2:	69fa      	ldr	r2, [r7, #28]
 800bdb4:	440a      	add	r2, r1
 800bdb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3720      	adds	r7, #32
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	1ff80000 	.word	0x1ff80000

0800bdd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b087      	sub	sp, #28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	4613      	mov	r3, r2
 800bddc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	f040 80ce 	bne.w	800bf8e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d132      	bne.n	800be60 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	0151      	lsls	r1, r2, #5
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	440a      	add	r2, r1
 800be10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	015a      	lsls	r2, r3, #5
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	4413      	add	r3, r2
 800be26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	0151      	lsls	r1, r2, #5
 800be30:	697a      	ldr	r2, [r7, #20]
 800be32:	440a      	add	r2, r1
 800be34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	0151      	lsls	r1, r2, #5
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	440a      	add	r2, r1
 800be54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be58:	0cdb      	lsrs	r3, r3, #19
 800be5a:	04db      	lsls	r3, r3, #19
 800be5c:	6113      	str	r3, [r2, #16]
 800be5e:	e04e      	b.n	800befe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	0151      	lsls	r1, r2, #5
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	440a      	add	r2, r1
 800be76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7a:	0cdb      	lsrs	r3, r3, #19
 800be7c:	04db      	lsls	r3, r3, #19
 800be7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	0151      	lsls	r1, r2, #5
 800be92:	697a      	ldr	r2, [r7, #20]
 800be94:	440a      	add	r2, r1
 800be96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bea2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	699a      	ldr	r2, [r3, #24]
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	429a      	cmp	r2, r3
 800beae:	d903      	bls.n	800beb8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	440a      	add	r2, r1
 800bece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee4:	691a      	ldr	r2, [r3, #16]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beee:	6939      	ldr	r1, [r7, #16]
 800bef0:	0148      	lsls	r0, r1, #5
 800bef2:	6979      	ldr	r1, [r7, #20]
 800bef4:	4401      	add	r1, r0
 800bef6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800befa:	4313      	orrs	r3, r2
 800befc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d11e      	bne.n	800bf42 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d009      	beq.n	800bf20 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	461a      	mov	r2, r3
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	0151      	lsls	r1, r2, #5
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	440a      	add	r2, r1
 800bf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e097      	b.n	800c072 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	0151      	lsls	r1, r2, #5
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	440a      	add	r2, r1
 800bf58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf60:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	699b      	ldr	r3, [r3, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 8083 	beq.w	800c072 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f003 030f 	and.w	r3, r3, #15
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf82:	6979      	ldr	r1, [r7, #20]
 800bf84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	634b      	str	r3, [r1, #52]	; 0x34
 800bf8c:	e071      	b.n	800c072 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	015a      	lsls	r2, r3, #5
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	4413      	add	r3, r2
 800bf96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	0151      	lsls	r1, r2, #5
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	440a      	add	r2, r1
 800bfa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfa8:	0cdb      	lsrs	r3, r3, #19
 800bfaa:	04db      	lsls	r3, r3, #19
 800bfac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	0151      	lsls	r1, r2, #5
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d003      	beq.n	800bfe2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	015a      	lsls	r2, r3, #5
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	4413      	add	r3, r2
 800bff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	0151      	lsls	r1, r2, #5
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	440a      	add	r2, r1
 800c000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c020:	6939      	ldr	r1, [r7, #16]
 800c022:	0148      	lsls	r0, r1, #5
 800c024:	6979      	ldr	r1, [r7, #20]
 800c026:	4401      	add	r1, r0
 800c028:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c02c:	4313      	orrs	r3, r2
 800c02e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d10d      	bne.n	800c052 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d009      	beq.n	800c052 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	6919      	ldr	r1, [r3, #16]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04e:	460a      	mov	r2, r1
 800c050:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	015a      	lsls	r2, r3, #5
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	0151      	lsls	r1, r2, #5
 800c064:	697a      	ldr	r2, [r7, #20]
 800c066:	440a      	add	r2, r1
 800c068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c06c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c070:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	371c      	adds	r7, #28
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	785b      	ldrb	r3, [r3, #1]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d14a      	bne.n	800c134 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b6:	f040 8086 	bne.w	800c1c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	7812      	ldrb	r2, [r2, #0]
 800c0ce:	0151      	lsls	r1, r2, #5
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	440a      	add	r2, r1
 800c0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	7812      	ldrb	r2, [r2, #0]
 800c0f2:	0151      	lsls	r1, r2, #5
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	440a      	add	r2, r1
 800c0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c100:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3301      	adds	r3, #1
 800c106:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c10e:	4293      	cmp	r3, r2
 800c110:	d902      	bls.n	800c118 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	75fb      	strb	r3, [r7, #23]
          break;
 800c116:	e056      	b.n	800c1c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4413      	add	r3, r2
 800c122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c12c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c130:	d0e7      	beq.n	800c102 <USB_EPStopXfer+0x82>
 800c132:	e048      	b.n	800c1c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	015a      	lsls	r2, r3, #5
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	4413      	add	r3, r2
 800c13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c14c:	d13b      	bne.n	800c1c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	015a      	lsls	r2, r3, #5
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	4413      	add	r3, r2
 800c158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	7812      	ldrb	r2, [r2, #0]
 800c162:	0151      	lsls	r1, r2, #5
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	440a      	add	r2, r1
 800c168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c16c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c170:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	7812      	ldrb	r2, [r2, #0]
 800c186:	0151      	lsls	r1, r2, #5
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	440a      	add	r2, r1
 800c18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c194:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d902      	bls.n	800c1ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
          break;
 800c1aa:	e00c      	b.n	800c1c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1c4:	d0e7      	beq.n	800c196 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b089      	sub	sp, #36	; 0x24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	4611      	mov	r1, r2
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	71fb      	strb	r3, [r7, #7]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c1f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d123      	bne.n	800c242 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c1fa:	88bb      	ldrh	r3, [r7, #4]
 800c1fc:	3303      	adds	r3, #3
 800c1fe:	089b      	lsrs	r3, r3, #2
 800c200:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c202:	2300      	movs	r3, #0
 800c204:	61bb      	str	r3, [r7, #24]
 800c206:	e018      	b.n	800c23a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	031a      	lsls	r2, r3, #12
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c214:	461a      	mov	r2, r3
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	3301      	adds	r3, #1
 800c220:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	3301      	adds	r3, #1
 800c226:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	3301      	adds	r3, #1
 800c22c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	3301      	adds	r3, #1
 800c232:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	3301      	adds	r3, #1
 800c238:	61bb      	str	r3, [r7, #24]
 800c23a:	69ba      	ldr	r2, [r7, #24]
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d3e2      	bcc.n	800c208 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3724      	adds	r7, #36	; 0x24
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c250:	b480      	push	{r7}
 800c252:	b08b      	sub	sp, #44	; 0x2c
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4613      	mov	r3, r2
 800c25c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c266:	88fb      	ldrh	r3, [r7, #6]
 800c268:	089b      	lsrs	r3, r3, #2
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c26e:	88fb      	ldrh	r3, [r7, #6]
 800c270:	f003 0303 	and.w	r3, r3, #3
 800c274:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c276:	2300      	movs	r3, #0
 800c278:	623b      	str	r3, [r7, #32]
 800c27a:	e014      	b.n	800c2a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	601a      	str	r2, [r3, #0]
    pDest++;
 800c288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28a:	3301      	adds	r3, #1
 800c28c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	3301      	adds	r3, #1
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c296:	3301      	adds	r3, #1
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	3301      	adds	r3, #1
 800c29e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	6a3a      	ldr	r2, [r7, #32]
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d3e6      	bcc.n	800c27c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c2ae:	8bfb      	ldrh	r3, [r7, #30]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d01e      	beq.n	800c2f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f107 0310 	add.w	r3, r7, #16
 800c2c4:	6812      	ldr	r2, [r2, #0]
 800c2c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	00db      	lsls	r3, r3, #3
 800c2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d4:	b2da      	uxtb	r2, r3
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	701a      	strb	r2, [r3, #0]
      i++;
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	623b      	str	r3, [r7, #32]
      pDest++;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c2e6:	8bfb      	ldrh	r3, [r7, #30]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c2ec:	8bfb      	ldrh	r3, [r7, #30]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1ea      	bne.n	800c2c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	372c      	adds	r7, #44	; 0x2c
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	785b      	ldrb	r3, [r3, #1]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d12c      	bne.n	800c376 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	db12      	blt.n	800c354 <USB_EPSetStall+0x54>
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00f      	beq.n	800c354 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c352:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	0151      	lsls	r1, r2, #5
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	440a      	add	r2, r1
 800c36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c36e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c372:	6013      	str	r3, [r2, #0]
 800c374:	e02b      	b.n	800c3ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	015a      	lsls	r2, r3, #5
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	4413      	add	r3, r2
 800c37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	db12      	blt.n	800c3ae <USB_EPSetStall+0xae>
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00f      	beq.n	800c3ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	0151      	lsls	r1, r2, #5
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	440a      	add	r2, r1
 800c3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	0151      	lsls	r1, r2, #5
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	440a      	add	r2, r1
 800c3c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c3cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d128      	bne.n	800c44a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	015a      	lsls	r2, r3, #5
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4413      	add	r3, r2
 800c400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	0151      	lsls	r1, r2, #5
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	440a      	add	r2, r1
 800c40e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c416:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	791b      	ldrb	r3, [r3, #4]
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	d003      	beq.n	800c428 <USB_EPClearStall+0x4c>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	791b      	ldrb	r3, [r3, #4]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d138      	bne.n	800c49a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	0151      	lsls	r1, r2, #5
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	440a      	add	r2, r1
 800c43e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	e027      	b.n	800c49a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c468:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d003      	beq.n	800c47a <USB_EPClearStall+0x9e>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	791b      	ldrb	r3, [r3, #4]
 800c476:	2b02      	cmp	r3, #2
 800c478:	d10f      	bne.n	800c49a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	015a      	lsls	r2, r3, #5
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4413      	add	r3, r2
 800c482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	0151      	lsls	r1, r2, #5
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	440a      	add	r2, r1
 800c490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c498:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c4ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	78fb      	ldrb	r3, [r7, #3]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c4dc:	68f9      	ldr	r1, [r7, #12]
 800c4de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c50e:	f023 0303 	bic.w	r3, r3, #3
 800c512:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c522:	f023 0302 	bic.w	r3, r3, #2
 800c526:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c536:	b480      	push	{r7}
 800c538:	b085      	sub	sp, #20
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c550:	f023 0303 	bic.w	r3, r3, #3
 800c554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c564:	f043 0302 	orr.w	r3, r3, #2
 800c568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3714      	adds	r7, #20
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	4013      	ands	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	4013      	ands	r3, r2
 800c5c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	0c1b      	lsrs	r3, r3, #16
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	b29b      	uxth	r3, r3
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c606:	b480      	push	{r7}
 800c608:	b085      	sub	sp, #20
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	460b      	mov	r3, r1
 800c610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	015a      	lsls	r2, r3, #5
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4413      	add	r3, r2
 800c61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	4013      	ands	r3, r2
 800c632:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c634:	68bb      	ldr	r3, [r7, #8]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c642:	b480      	push	{r7}
 800c644:	b087      	sub	sp, #28
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	460b      	mov	r3, r1
 800c64c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c664:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	f003 030f 	and.w	r3, r3, #15
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	fa22 f303 	lsr.w	r3, r2, r3
 800c672:	01db      	lsls	r3, r3, #7
 800c674:	b2db      	uxtb	r3, r3
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	693a      	ldr	r2, [r7, #16]
 800c68c:	4013      	ands	r3, r2
 800c68e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c690:	68bb      	ldr	r3, [r7, #8]
}
 800c692:	4618      	mov	r0, r3
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b085      	sub	sp, #20
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c6d8:	f023 0307 	bic.w	r3, r3, #7
 800c6dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	460b      	mov	r3, r1
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	333c      	adds	r3, #60	; 0x3c
 800c716:	3304      	adds	r3, #4
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	4a26      	ldr	r2, [pc, #152]	; (800c7b8 <USB_EP0_OutStart+0xb8>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d90a      	bls.n	800c73a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c734:	d101      	bne.n	800c73a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	e037      	b.n	800c7aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c740:	461a      	mov	r2, r3
 800c742:	2300      	movs	r3, #0
 800c744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c768:	f043 0318 	orr.w	r3, r3, #24
 800c76c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c77c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c780:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c782:	7afb      	ldrb	r3, [r7, #11]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d10f      	bne.n	800c7a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c78e:	461a      	mov	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c7a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	4f54300a 	.word	0x4f54300a

0800c7bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	4a13      	ldr	r2, [pc, #76]	; (800c820 <USB_CoreReset+0x64>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d901      	bls.n	800c7da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	e01b      	b.n	800c812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	daf2      	bge.n	800c7c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	f043 0201 	orr.w	r2, r3, #1
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	4a09      	ldr	r2, [pc, #36]	; (800c820 <USB_CoreReset+0x64>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d901      	bls.n	800c804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c800:	2303      	movs	r3, #3
 800c802:	e006      	b.n	800c812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d0f0      	beq.n	800c7f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	00030d40 	.word	0x00030d40

0800c824 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c830:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c834:	f004 fbdc 	bl	8010ff0 <USBD_static_malloc>
 800c838:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d109      	bne.n	800c854 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	32b0      	adds	r2, #176	; 0xb0
 800c84a:	2100      	movs	r1, #0
 800c84c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c850:	2302      	movs	r3, #2
 800c852:	e0d4      	b.n	800c9fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c854:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c858:	2100      	movs	r1, #0
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f005 ff82 	bl	8012764 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	32b0      	adds	r2, #176	; 0xb0
 800c86a:	68f9      	ldr	r1, [r7, #12]
 800c86c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	32b0      	adds	r2, #176	; 0xb0
 800c87a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	7c1b      	ldrb	r3, [r3, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d138      	bne.n	800c8fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c88c:	4b5e      	ldr	r3, [pc, #376]	; (800ca08 <USBD_CDC_Init+0x1e4>)
 800c88e:	7819      	ldrb	r1, [r3, #0]
 800c890:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c894:	2202      	movs	r2, #2
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f004 fa87 	bl	8010daa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c89c:	4b5a      	ldr	r3, [pc, #360]	; (800ca08 <USBD_CDC_Init+0x1e4>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	f003 020f 	and.w	r2, r3, #15
 800c8a4:	6879      	ldr	r1, [r7, #4]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	3324      	adds	r3, #36	; 0x24
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c8b6:	4b55      	ldr	r3, [pc, #340]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c8b8:	7819      	ldrb	r1, [r3, #0]
 800c8ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8be:	2202      	movs	r2, #2
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f004 fa72 	bl	8010daa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c8c6:	4b51      	ldr	r3, [pc, #324]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	f003 020f 	and.w	r2, r3, #15
 800c8ce:	6879      	ldr	r1, [r7, #4]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	440b      	add	r3, r1
 800c8da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8de:	2201      	movs	r2, #1
 800c8e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c8e2:	4b4b      	ldr	r3, [pc, #300]	; (800ca10 <USBD_CDC_Init+0x1ec>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	f003 020f 	and.w	r2, r3, #15
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3326      	adds	r3, #38	; 0x26
 800c8f8:	2210      	movs	r2, #16
 800c8fa:	801a      	strh	r2, [r3, #0]
 800c8fc:	e035      	b.n	800c96a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8fe:	4b42      	ldr	r3, [pc, #264]	; (800ca08 <USBD_CDC_Init+0x1e4>)
 800c900:	7819      	ldrb	r1, [r3, #0]
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	2202      	movs	r2, #2
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f004 fa4f 	bl	8010daa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c90c:	4b3e      	ldr	r3, [pc, #248]	; (800ca08 <USBD_CDC_Init+0x1e4>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	f003 020f 	and.w	r2, r3, #15
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	440b      	add	r3, r1
 800c920:	3324      	adds	r3, #36	; 0x24
 800c922:	2201      	movs	r2, #1
 800c924:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c926:	4b39      	ldr	r3, [pc, #228]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c928:	7819      	ldrb	r1, [r3, #0]
 800c92a:	2340      	movs	r3, #64	; 0x40
 800c92c:	2202      	movs	r2, #2
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f004 fa3b 	bl	8010daa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c934:	4b35      	ldr	r3, [pc, #212]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	f003 020f 	and.w	r2, r3, #15
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	440b      	add	r3, r1
 800c948:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c94c:	2201      	movs	r2, #1
 800c94e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c950:	4b2f      	ldr	r3, [pc, #188]	; (800ca10 <USBD_CDC_Init+0x1ec>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	f003 020f 	and.w	r2, r3, #15
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	4613      	mov	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	440b      	add	r3, r1
 800c964:	3326      	adds	r3, #38	; 0x26
 800c966:	2210      	movs	r2, #16
 800c968:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c96a:	4b29      	ldr	r3, [pc, #164]	; (800ca10 <USBD_CDC_Init+0x1ec>)
 800c96c:	7819      	ldrb	r1, [r3, #0]
 800c96e:	2308      	movs	r3, #8
 800c970:	2203      	movs	r2, #3
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f004 fa19 	bl	8010daa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c978:	4b25      	ldr	r3, [pc, #148]	; (800ca10 <USBD_CDC_Init+0x1ec>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 020f 	and.w	r2, r3, #15
 800c980:	6879      	ldr	r1, [r7, #4]
 800c982:	4613      	mov	r3, r2
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	440b      	add	r3, r1
 800c98c:	3324      	adds	r3, #36	; 0x24
 800c98e:	2201      	movs	r2, #1
 800c990:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	33b0      	adds	r3, #176	; 0xb0
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4413      	add	r3, r2
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	e018      	b.n	800c9fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	7c1b      	ldrb	r3, [r3, #16]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c9d6:	7819      	ldrb	r1, [r3, #0]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f004 fad0 	bl	8010f88 <USBD_LL_PrepareReceive>
 800c9e8:	e008      	b.n	800c9fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c9ea:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <USBD_CDC_Init+0x1e8>)
 800c9ec:	7819      	ldrb	r1, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f004 fac6 	bl	8010f88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	20000093 	.word	0x20000093
 800ca0c:	20000094 	.word	0x20000094
 800ca10:	20000095 	.word	0x20000095

0800ca14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ca20:	4b3a      	ldr	r3, [pc, #232]	; (800cb0c <USBD_CDC_DeInit+0xf8>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f004 f9e5 	bl	8010df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ca2c:	4b37      	ldr	r3, [pc, #220]	; (800cb0c <USBD_CDC_DeInit+0xf8>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f003 020f 	and.w	r2, r3, #15
 800ca34:	6879      	ldr	r1, [r7, #4]
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	440b      	add	r3, r1
 800ca40:	3324      	adds	r3, #36	; 0x24
 800ca42:	2200      	movs	r2, #0
 800ca44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ca46:	4b32      	ldr	r3, [pc, #200]	; (800cb10 <USBD_CDC_DeInit+0xfc>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f004 f9d2 	bl	8010df6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ca52:	4b2f      	ldr	r3, [pc, #188]	; (800cb10 <USBD_CDC_DeInit+0xfc>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	f003 020f 	and.w	r2, r3, #15
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	440b      	add	r3, r1
 800ca66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ca6e:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <USBD_CDC_DeInit+0x100>)
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f004 f9be 	bl	8010df6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <USBD_CDC_DeInit+0x100>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f003 020f 	and.w	r2, r3, #15
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	4613      	mov	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	440b      	add	r3, r1
 800ca8e:	3324      	adds	r3, #36	; 0x24
 800ca90:	2200      	movs	r2, #0
 800ca92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ca94:	4b1f      	ldr	r3, [pc, #124]	; (800cb14 <USBD_CDC_DeInit+0x100>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	f003 020f 	and.w	r2, r3, #15
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	440b      	add	r3, r1
 800caa8:	3326      	adds	r3, #38	; 0x26
 800caaa:	2200      	movs	r2, #0
 800caac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	32b0      	adds	r2, #176	; 0xb0
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d01f      	beq.n	800cb00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	33b0      	adds	r3, #176	; 0xb0
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	32b0      	adds	r2, #176	; 0xb0
 800cade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f004 fa92 	bl	801100c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	32b0      	adds	r2, #176	; 0xb0
 800caf2:	2100      	movs	r1, #0
 800caf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	20000093 	.word	0x20000093
 800cb10:	20000094 	.word	0x20000094
 800cb14:	20000095 	.word	0x20000095

0800cb18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	32b0      	adds	r2, #176	; 0xb0
 800cb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb36:	2300      	movs	r3, #0
 800cb38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d101      	bne.n	800cb48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e0bf      	b.n	800ccc8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d050      	beq.n	800cbf6 <USBD_CDC_Setup+0xde>
 800cb54:	2b20      	cmp	r3, #32
 800cb56:	f040 80af 	bne.w	800ccb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	88db      	ldrh	r3, [r3, #6]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d03a      	beq.n	800cbd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	b25b      	sxtb	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	da1b      	bge.n	800cba4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	33b0      	adds	r3, #176	; 0xb0
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cb82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	88d2      	ldrh	r2, [r2, #6]
 800cb88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	88db      	ldrh	r3, [r3, #6]
 800cb8e:	2b07      	cmp	r3, #7
 800cb90:	bf28      	it	cs
 800cb92:	2307      	movcs	r3, #7
 800cb94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	89fa      	ldrh	r2, [r7, #14]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 fd89 	bl	800e6b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cba2:	e090      	b.n	800ccc6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	785a      	ldrb	r2, [r3, #1]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	88db      	ldrh	r3, [r3, #6]
 800cbb2:	2b3f      	cmp	r3, #63	; 0x3f
 800cbb4:	d803      	bhi.n	800cbbe <USBD_CDC_Setup+0xa6>
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	88db      	ldrh	r3, [r3, #6]
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	e000      	b.n	800cbc0 <USBD_CDC_Setup+0xa8>
 800cbbe:	2240      	movs	r2, #64	; 0x40
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cbc6:	6939      	ldr	r1, [r7, #16]
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cbce:	461a      	mov	r2, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f001 fd9b 	bl	800e70c <USBD_CtlPrepareRx>
      break;
 800cbd6:	e076      	b.n	800ccc6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	33b0      	adds	r3, #176	; 0xb0
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	7850      	ldrb	r0, [r2, #1]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	4798      	blx	r3
      break;
 800cbf4:	e067      	b.n	800ccc6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	785b      	ldrb	r3, [r3, #1]
 800cbfa:	2b0b      	cmp	r3, #11
 800cbfc:	d851      	bhi.n	800cca2 <USBD_CDC_Setup+0x18a>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <USBD_CDC_Setup+0xec>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc35 	.word	0x0800cc35
 800cc08:	0800ccb1 	.word	0x0800ccb1
 800cc0c:	0800cca3 	.word	0x0800cca3
 800cc10:	0800cca3 	.word	0x0800cca3
 800cc14:	0800cca3 	.word	0x0800cca3
 800cc18:	0800cca3 	.word	0x0800cca3
 800cc1c:	0800cca3 	.word	0x0800cca3
 800cc20:	0800cca3 	.word	0x0800cca3
 800cc24:	0800cca3 	.word	0x0800cca3
 800cc28:	0800cca3 	.word	0x0800cca3
 800cc2c:	0800cc5f 	.word	0x0800cc5f
 800cc30:	0800cc89 	.word	0x0800cc89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b03      	cmp	r3, #3
 800cc3e:	d107      	bne.n	800cc50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cc40:	f107 030a 	add.w	r3, r7, #10
 800cc44:	2202      	movs	r2, #2
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f001 fd33 	bl	800e6b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc4e:	e032      	b.n	800ccb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f001 fcbd 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	75fb      	strb	r3, [r7, #23]
          break;
 800cc5c:	e02b      	b.n	800ccb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d107      	bne.n	800cc7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cc6a:	f107 030d 	add.w	r3, r7, #13
 800cc6e:	2201      	movs	r2, #1
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f001 fd1e 	bl	800e6b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc78:	e01d      	b.n	800ccb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 fca8 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc82:	2303      	movs	r3, #3
 800cc84:	75fb      	strb	r3, [r7, #23]
          break;
 800cc86:	e016      	b.n	800ccb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d00f      	beq.n	800ccb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f001 fc9b 	bl	800e5d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cca0:	e008      	b.n	800ccb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f001 fc94 	bl	800e5d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	75fb      	strb	r3, [r7, #23]
          break;
 800ccae:	e002      	b.n	800ccb6 <USBD_CDC_Setup+0x19e>
          break;
 800ccb0:	bf00      	nop
 800ccb2:	e008      	b.n	800ccc6 <USBD_CDC_Setup+0x1ae>
          break;
 800ccb4:	bf00      	nop
      }
      break;
 800ccb6:	e006      	b.n	800ccc6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f001 fc89 	bl	800e5d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc4:	bf00      	nop
  }

  return (uint8_t)ret;
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	32b0      	adds	r2, #176	; 0xb0
 800ccee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e065      	b.n	800cdc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	32b0      	adds	r2, #176	; 0xb0
 800cd04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd0a:	78fb      	ldrb	r3, [r7, #3]
 800cd0c:	f003 020f 	and.w	r2, r3, #15
 800cd10:	6879      	ldr	r1, [r7, #4]
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	440b      	add	r3, r1
 800cd1c:	3318      	adds	r3, #24
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d02f      	beq.n	800cd84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cd24:	78fb      	ldrb	r3, [r7, #3]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	3318      	adds	r3, #24
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	78fb      	ldrb	r3, [r7, #3]
 800cd3c:	f003 010f 	and.w	r1, r3, #15
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	460b      	mov	r3, r1
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	440b      	add	r3, r1
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4403      	add	r3, r0
 800cd4c:	3348      	adds	r3, #72	; 0x48
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	fbb2 f1f3 	udiv	r1, r2, r3
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d112      	bne.n	800cd84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cd5e:	78fb      	ldrb	r3, [r7, #3]
 800cd60:	f003 020f 	and.w	r2, r3, #15
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	440b      	add	r3, r1
 800cd70:	3318      	adds	r3, #24
 800cd72:	2200      	movs	r2, #0
 800cd74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cd76:	78f9      	ldrb	r1, [r7, #3]
 800cd78:	2300      	movs	r3, #0
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f004 f8e2 	bl	8010f46 <USBD_LL_Transmit>
 800cd82:	e01f      	b.n	800cdc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	33b0      	adds	r3, #176	; 0xb0
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d010      	beq.n	800cdc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	33b0      	adds	r3, #176	; 0xb0
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4413      	add	r3, r2
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cdc0:	78fa      	ldrb	r2, [r7, #3]
 800cdc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	32b0      	adds	r2, #176	; 0xb0
 800cde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	32b0      	adds	r2, #176	; 0xb0
 800cdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	e01a      	b.n	800ce36 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	4619      	mov	r1, r3
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f004 f8e0 	bl	8010fca <USBD_LL_GetRxDataSize>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	33b0      	adds	r3, #176	; 0xb0
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce30:	4611      	mov	r1, r2
 800ce32:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	32b0      	adds	r2, #176	; 0xb0
 800ce50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce54:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	e025      	b.n	800ceac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	33b0      	adds	r3, #176	; 0xb0
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d01a      	beq.n	800ceaa <USBD_CDC_EP0_RxReady+0x6c>
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ce7a:	2bff      	cmp	r3, #255	; 0xff
 800ce7c:	d015      	beq.n	800ceaa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	33b0      	adds	r3, #176	; 0xb0
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ce96:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ce9e:	b292      	uxth	r2, r2
 800cea0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	22ff      	movs	r2, #255	; 0xff
 800cea6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cebc:	2182      	movs	r1, #130	; 0x82
 800cebe:	4818      	ldr	r0, [pc, #96]	; (800cf20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cec0:	f000 fd4f 	bl	800d962 <USBD_GetEpDesc>
 800cec4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cec6:	2101      	movs	r1, #1
 800cec8:	4815      	ldr	r0, [pc, #84]	; (800cf20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ceca:	f000 fd4a 	bl	800d962 <USBD_GetEpDesc>
 800cece:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ced0:	2181      	movs	r1, #129	; 0x81
 800ced2:	4813      	ldr	r0, [pc, #76]	; (800cf20 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ced4:	f000 fd45 	bl	800d962 <USBD_GetEpDesc>
 800ced8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	2210      	movs	r2, #16
 800cee4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d006      	beq.n	800cefa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cef4:	711a      	strb	r2, [r3, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d006      	beq.n	800cf0e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf08:	711a      	strb	r2, [r3, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2243      	movs	r2, #67	; 0x43
 800cf12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf14:	4b02      	ldr	r3, [pc, #8]	; (800cf20 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000050 	.word	0x20000050

0800cf24 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf2c:	2182      	movs	r1, #130	; 0x82
 800cf2e:	4818      	ldr	r0, [pc, #96]	; (800cf90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf30:	f000 fd17 	bl	800d962 <USBD_GetEpDesc>
 800cf34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf36:	2101      	movs	r1, #1
 800cf38:	4815      	ldr	r0, [pc, #84]	; (800cf90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf3a:	f000 fd12 	bl	800d962 <USBD_GetEpDesc>
 800cf3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf40:	2181      	movs	r1, #129	; 0x81
 800cf42:	4813      	ldr	r0, [pc, #76]	; (800cf90 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf44:	f000 fd0d 	bl	800d962 <USBD_GetEpDesc>
 800cf48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	2210      	movs	r2, #16
 800cf54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d006      	beq.n	800cf6a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	711a      	strb	r2, [r3, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f042 0202 	orr.w	r2, r2, #2
 800cf68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d006      	beq.n	800cf7e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	711a      	strb	r2, [r3, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f042 0202 	orr.w	r2, r2, #2
 800cf7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2243      	movs	r2, #67	; 0x43
 800cf82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3718      	adds	r7, #24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000050 	.word	0x20000050

0800cf94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf9c:	2182      	movs	r1, #130	; 0x82
 800cf9e:	4818      	ldr	r0, [pc, #96]	; (800d000 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cfa0:	f000 fcdf 	bl	800d962 <USBD_GetEpDesc>
 800cfa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	4815      	ldr	r0, [pc, #84]	; (800d000 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cfaa:	f000 fcda 	bl	800d962 <USBD_GetEpDesc>
 800cfae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cfb0:	2181      	movs	r1, #129	; 0x81
 800cfb2:	4813      	ldr	r0, [pc, #76]	; (800d000 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cfb4:	f000 fcd5 	bl	800d962 <USBD_GetEpDesc>
 800cfb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2210      	movs	r2, #16
 800cfc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d006      	beq.n	800cfda <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfd4:	711a      	strb	r2, [r3, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cfe8:	711a      	strb	r2, [r3, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2243      	movs	r2, #67	; 0x43
 800cff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3718      	adds	r7, #24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000050 	.word	0x20000050

0800d004 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	220a      	movs	r2, #10
 800d010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d012:	4b03      	ldr	r3, [pc, #12]	; (800d020 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d014:	4618      	mov	r0, r3
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr
 800d020:	2000000c 	.word	0x2000000c

0800d024 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d034:	2303      	movs	r3, #3
 800d036:	e009      	b.n	800d04c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	33b0      	adds	r3, #176	; 0xb0
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	32b0      	adds	r2, #176	; 0xb0
 800d06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d072:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d07a:	2303      	movs	r3, #3
 800d07c:	e008      	b.n	800d090 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	371c      	adds	r7, #28
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	32b0      	adds	r2, #176	; 0xb0
 800d0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e004      	b.n	800d0ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
	...

0800d0d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	32b0      	adds	r2, #176	; 0xb0
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	32b0      	adds	r2, #176	; 0xb0
 800d0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d106:	2303      	movs	r3, #3
 800d108:	e025      	b.n	800d156 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d110:	2b00      	cmp	r3, #0
 800d112:	d11f      	bne.n	800d154 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2201      	movs	r2, #1
 800d118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d11c:	4b10      	ldr	r3, [pc, #64]	; (800d160 <USBD_CDC_TransmitPacket+0x88>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 020f 	and.w	r2, r3, #15
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4613      	mov	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	4413      	add	r3, r2
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4403      	add	r3, r0
 800d136:	3318      	adds	r3, #24
 800d138:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d13a:	4b09      	ldr	r3, [pc, #36]	; (800d160 <USBD_CDC_TransmitPacket+0x88>)
 800d13c:	7819      	ldrb	r1, [r3, #0]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f003 fefb 	bl	8010f46 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20000093 	.word	0x20000093

0800d164 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	32b0      	adds	r2, #176	; 0xb0
 800d176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	32b0      	adds	r2, #176	; 0xb0
 800d186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d18e:	2303      	movs	r3, #3
 800d190:	e018      	b.n	800d1c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7c1b      	ldrb	r3, [r3, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10a      	bne.n	800d1b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d19a:	4b0c      	ldr	r3, [pc, #48]	; (800d1cc <USBD_CDC_ReceivePacket+0x68>)
 800d19c:	7819      	ldrb	r1, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f003 feed 	bl	8010f88 <USBD_LL_PrepareReceive>
 800d1ae:	e008      	b.n	800d1c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d1b0:	4b06      	ldr	r3, [pc, #24]	; (800d1cc <USBD_CDC_ReceivePacket+0x68>)
 800d1b2:	7819      	ldrb	r1, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1ba:	2340      	movs	r3, #64	; 0x40
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f003 fee3 	bl	8010f88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	20000094 	.word	0x20000094

0800d1d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d101      	bne.n	800d1e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e01f      	b.n	800d228 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	68ba      	ldr	r2, [r7, #8]
 800d20a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	79fa      	ldrb	r2, [r7, #7]
 800d21a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f003 fd5d 	bl	8010cdc <USBD_LL_Init>
 800d222:	4603      	mov	r3, r0
 800d224:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d226:	7dfb      	ldrb	r3, [r7, #23]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3718      	adds	r7, #24
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d244:	2303      	movs	r3, #3
 800d246:	e025      	b.n	800d294 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	32ae      	adds	r2, #174	; 0xae
 800d25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00f      	beq.n	800d284 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	32ae      	adds	r2, #174	; 0xae
 800d26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d274:	f107 020e 	add.w	r2, r7, #14
 800d278:	4610      	mov	r0, r2
 800d27a:	4798      	blx	r3
 800d27c:	4602      	mov	r2, r0
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f003 fd65 	bl	8010d74 <USBD_LL_Start>
 800d2aa:	4603      	mov	r3, r0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d009      	beq.n	800d2f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	78fa      	ldrb	r2, [r7, #3]
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	4798      	blx	r3
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	460b      	mov	r3, r1
 800d30c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	78fa      	ldrb	r2, [r7, #3]
 800d31c:	4611      	mov	r1, r2
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	4798      	blx	r3
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d328:	2303      	movs	r3, #3
 800d32a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b084      	sub	sp, #16
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d346:	6839      	ldr	r1, [r7, #0]
 800d348:	4618      	mov	r0, r3
 800d34a:	f001 f908 	bl	800e55e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d35c:	461a      	mov	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d36a:	f003 031f 	and.w	r3, r3, #31
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d01a      	beq.n	800d3a8 <USBD_LL_SetupStage+0x72>
 800d372:	2b02      	cmp	r3, #2
 800d374:	d822      	bhi.n	800d3bc <USBD_LL_SetupStage+0x86>
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <USBD_LL_SetupStage+0x4a>
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d00a      	beq.n	800d394 <USBD_LL_SetupStage+0x5e>
 800d37e:	e01d      	b.n	800d3bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fb5f 	bl	800da4c <USBD_StdDevReq>
 800d38e:	4603      	mov	r3, r0
 800d390:	73fb      	strb	r3, [r7, #15]
      break;
 800d392:	e020      	b.n	800d3d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fbc7 	bl	800db30 <USBD_StdItfReq>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d3a6:	e016      	b.n	800d3d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fc29 	bl	800dc08 <USBD_StdEPReq>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d3ba:	e00c      	b.n	800d3d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d3c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f003 fd32 	bl	8010e34 <USBD_LL_StallEP>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3d4:	bf00      	nop
  }

  return ret;
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d16e      	bne.n	800d4d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d3fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d406:	2b03      	cmp	r3, #3
 800d408:	f040 8098 	bne.w	800d53c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	689a      	ldr	r2, [r3, #8]
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	429a      	cmp	r2, r3
 800d416:	d913      	bls.n	800d440 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	689a      	ldr	r2, [r3, #8]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	1ad2      	subs	r2, r2, r3
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	68da      	ldr	r2, [r3, #12]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	4293      	cmp	r3, r2
 800d430:	bf28      	it	cs
 800d432:	4613      	movcs	r3, r2
 800d434:	461a      	mov	r2, r3
 800d436:	6879      	ldr	r1, [r7, #4]
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f001 f984 	bl	800e746 <USBD_CtlContinueRx>
 800d43e:	e07d      	b.n	800d53c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d446:	f003 031f 	and.w	r3, r3, #31
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d014      	beq.n	800d478 <USBD_LL_DataOutStage+0x98>
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d81d      	bhi.n	800d48e <USBD_LL_DataOutStage+0xae>
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <USBD_LL_DataOutStage+0x7c>
 800d456:	2b01      	cmp	r3, #1
 800d458:	d003      	beq.n	800d462 <USBD_LL_DataOutStage+0x82>
 800d45a:	e018      	b.n	800d48e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	75bb      	strb	r3, [r7, #22]
            break;
 800d460:	e018      	b.n	800d494 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	4619      	mov	r1, r3
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f000 fa5e 	bl	800d92e <USBD_CoreFindIF>
 800d472:	4603      	mov	r3, r0
 800d474:	75bb      	strb	r3, [r7, #22]
            break;
 800d476:	e00d      	b.n	800d494 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	4619      	mov	r1, r3
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	f000 fa60 	bl	800d948 <USBD_CoreFindEP>
 800d488:	4603      	mov	r3, r0
 800d48a:	75bb      	strb	r3, [r7, #22]
            break;
 800d48c:	e002      	b.n	800d494 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d48e:	2300      	movs	r3, #0
 800d490:	75bb      	strb	r3, [r7, #22]
            break;
 800d492:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d494:	7dbb      	ldrb	r3, [r7, #22]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d119      	bne.n	800d4ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	d113      	bne.n	800d4ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d4a6:	7dba      	ldrb	r2, [r7, #22]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	32ae      	adds	r2, #174	; 0xae
 800d4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00b      	beq.n	800d4ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d4b6:	7dba      	ldrb	r2, [r7, #22]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d4be:	7dba      	ldrb	r2, [r7, #22]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	32ae      	adds	r2, #174	; 0xae
 800d4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f001 f94a 	bl	800e768 <USBD_CtlSendStatus>
 800d4d4:	e032      	b.n	800d53c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d4d6:	7afb      	ldrb	r3, [r7, #11]
 800d4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	4619      	mov	r1, r3
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fa31 	bl	800d948 <USBD_CoreFindEP>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4ea:	7dbb      	ldrb	r3, [r7, #22]
 800d4ec:	2bff      	cmp	r3, #255	; 0xff
 800d4ee:	d025      	beq.n	800d53c <USBD_LL_DataOutStage+0x15c>
 800d4f0:	7dbb      	ldrb	r3, [r7, #22]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d122      	bne.n	800d53c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d117      	bne.n	800d532 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d502:	7dba      	ldrb	r2, [r7, #22]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	32ae      	adds	r2, #174	; 0xae
 800d508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50c:	699b      	ldr	r3, [r3, #24]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00f      	beq.n	800d532 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d512:	7dba      	ldrb	r2, [r7, #22]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d51a:	7dba      	ldrb	r2, [r7, #22]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	32ae      	adds	r2, #174	; 0xae
 800d520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	7afa      	ldrb	r2, [r7, #11]
 800d528:	4611      	mov	r1, r2
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	4798      	blx	r3
 800d52e:	4603      	mov	r3, r0
 800d530:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d532:	7dfb      	ldrb	r3, [r7, #23]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d538:	7dfb      	ldrb	r3, [r7, #23]
 800d53a:	e000      	b.n	800d53e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b086      	sub	sp, #24
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	60f8      	str	r0, [r7, #12]
 800d54e:	460b      	mov	r3, r1
 800d550:	607a      	str	r2, [r7, #4]
 800d552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d16f      	bne.n	800d63a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3314      	adds	r3, #20
 800d55e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d566:	2b02      	cmp	r3, #2
 800d568:	d15a      	bne.n	800d620 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	429a      	cmp	r2, r3
 800d574:	d914      	bls.n	800d5a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	689a      	ldr	r2, [r3, #8]
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	1ad2      	subs	r2, r2, r3
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	461a      	mov	r2, r3
 800d58a:	6879      	ldr	r1, [r7, #4]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f001 f8ac 	bl	800e6ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d592:	2300      	movs	r3, #0
 800d594:	2200      	movs	r2, #0
 800d596:	2100      	movs	r1, #0
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f003 fcf5 	bl	8010f88 <USBD_LL_PrepareReceive>
 800d59e:	e03f      	b.n	800d620 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	68da      	ldr	r2, [r3, #12]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d11c      	bne.n	800d5e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d316      	bcc.n	800d5e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d20f      	bcs.n	800d5e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f001 f88d 	bl	800e6ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2100      	movs	r1, #0
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f003 fcd2 	bl	8010f88 <USBD_LL_PrepareReceive>
 800d5e4:	e01c      	b.n	800d620 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d10f      	bne.n	800d612 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	68f8      	ldr	r0, [r7, #12]
 800d610:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d612:	2180      	movs	r1, #128	; 0x80
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f003 fc0d 	bl	8010e34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f001 f8b7 	bl	800e78e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d03a      	beq.n	800d6a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff fe42 	bl	800d2b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d638:	e032      	b.n	800d6a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d63a:	7afb      	ldrb	r3, [r7, #11]
 800d63c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d640:	b2db      	uxtb	r3, r3
 800d642:	4619      	mov	r1, r3
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f000 f97f 	bl	800d948 <USBD_CoreFindEP>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	2bff      	cmp	r3, #255	; 0xff
 800d652:	d025      	beq.n	800d6a0 <USBD_LL_DataInStage+0x15a>
 800d654:	7dfb      	ldrb	r3, [r7, #23]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d122      	bne.n	800d6a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b03      	cmp	r3, #3
 800d664:	d11c      	bne.n	800d6a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d666:	7dfa      	ldrb	r2, [r7, #23]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	32ae      	adds	r2, #174	; 0xae
 800d66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d014      	beq.n	800d6a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d676:	7dfa      	ldrb	r2, [r7, #23]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d67e:	7dfa      	ldrb	r2, [r7, #23]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	32ae      	adds	r2, #174	; 0xae
 800d684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	7afa      	ldrb	r2, [r7, #11]
 800d68c:	4611      	mov	r1, r2
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	4798      	blx	r3
 800d692:	4603      	mov	r3, r0
 800d694:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d696:	7dbb      	ldrb	r3, [r7, #22]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d69c:	7dbb      	ldrb	r3, [r7, #22]
 800d69e:	e000      	b.n	800d6a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b084      	sub	sp, #16
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d014      	beq.n	800d710 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00e      	beq.n	800d710 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6852      	ldr	r2, [r2, #4]
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	4611      	mov	r1, r2
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d70c:	2303      	movs	r3, #3
 800d70e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d710:	2340      	movs	r3, #64	; 0x40
 800d712:	2200      	movs	r2, #0
 800d714:	2100      	movs	r1, #0
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f003 fb47 	bl	8010daa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2240      	movs	r2, #64	; 0x40
 800d728:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	2200      	movs	r2, #0
 800d730:	2180      	movs	r1, #128	; 0x80
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f003 fb39 	bl	8010daa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2240      	movs	r2, #64	; 0x40
 800d742:	621a      	str	r2, [r3, #32]

  return ret;
 800d744:	7bfb      	ldrb	r3, [r7, #15]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d74e:	b480      	push	{r7}
 800d750:	b083      	sub	sp, #12
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	460b      	mov	r3, r1
 800d758:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	78fa      	ldrb	r2, [r7, #3]
 800d75e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2204      	movs	r2, #4
 800d788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr

0800d79a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d79a:	b480      	push	{r7}
 800d79c:	b083      	sub	sp, #12
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	2b04      	cmp	r3, #4
 800d7ac:	d106      	bne.n	800d7bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d110      	bne.n	800d800 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00b      	beq.n	800d800 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ee:	69db      	ldr	r3, [r3, #28]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d005      	beq.n	800d800 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fa:	69db      	ldr	r3, [r3, #28]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b082      	sub	sp, #8
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
 800d812:	460b      	mov	r3, r1
 800d814:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	32ae      	adds	r2, #174	; 0xae
 800d820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d828:	2303      	movs	r3, #3
 800d82a:	e01c      	b.n	800d866 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b03      	cmp	r3, #3
 800d836:	d115      	bne.n	800d864 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	32ae      	adds	r2, #174	; 0xae
 800d842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d846:	6a1b      	ldr	r3, [r3, #32]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	32ae      	adds	r2, #174	; 0xae
 800d856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	78fa      	ldrb	r2, [r7, #3]
 800d85e:	4611      	mov	r1, r2
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	32ae      	adds	r2, #174	; 0xae
 800d884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e01c      	b.n	800d8ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d115      	bne.n	800d8c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	32ae      	adds	r2, #174	; 0xae
 800d8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00b      	beq.n	800d8c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	32ae      	adds	r2, #174	; 0xae
 800d8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00e      	beq.n	800d924 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	6852      	ldr	r2, [r2, #4]
 800d912:	b2d2      	uxtb	r2, r2
 800d914:	4611      	mov	r1, r2
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	4798      	blx	r3
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d920:	2303      	movs	r3, #3
 800d922:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d924:	7bfb      	ldrb	r3, [r7, #15]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	460b      	mov	r3, r1
 800d938:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d93a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d954:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d956:	4618      	mov	r0, r3
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d962:	b580      	push	{r7, lr}
 800d964:	b086      	sub	sp, #24
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
 800d96a:	460b      	mov	r3, r1
 800d96c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	885b      	ldrh	r3, [r3, #2]
 800d97e:	b29a      	uxth	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	429a      	cmp	r2, r3
 800d988:	d920      	bls.n	800d9cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	b29b      	uxth	r3, r3
 800d990:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d992:	e013      	b.n	800d9bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d994:	f107 030a 	add.w	r3, r7, #10
 800d998:	4619      	mov	r1, r3
 800d99a:	6978      	ldr	r0, [r7, #20]
 800d99c:	f000 f81b 	bl	800d9d6 <USBD_GetNextDesc>
 800d9a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	2b05      	cmp	r3, #5
 800d9a8:	d108      	bne.n	800d9bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	789b      	ldrb	r3, [r3, #2]
 800d9b2:	78fa      	ldrb	r2, [r7, #3]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d008      	beq.n	800d9ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	897b      	ldrh	r3, [r7, #10]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d8e5      	bhi.n	800d994 <USBD_GetEpDesc+0x32>
 800d9c8:	e000      	b.n	800d9cc <USBD_GetEpDesc+0x6a>
          break;
 800d9ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d9cc:	693b      	ldr	r3, [r7, #16]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d9d6:	b480      	push	{r7}
 800d9d8:	b085      	sub	sp, #20
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	881a      	ldrh	r2, [r3, #0]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4413      	add	r3, r2
 800da00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da02:	68fb      	ldr	r3, [r7, #12]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	3301      	adds	r3, #1
 800da26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800da2e:	8a3b      	ldrh	r3, [r7, #16]
 800da30:	021b      	lsls	r3, r3, #8
 800da32:	b21a      	sxth	r2, r3
 800da34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da38:	4313      	orrs	r3, r2
 800da3a:	b21b      	sxth	r3, r3
 800da3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800da3e:	89fb      	ldrh	r3, [r7, #14]
}
 800da40:	4618      	mov	r0, r3
 800da42:	371c      	adds	r7, #28
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d005      	beq.n	800da72 <USBD_StdDevReq+0x26>
 800da66:	2b40      	cmp	r3, #64	; 0x40
 800da68:	d857      	bhi.n	800db1a <USBD_StdDevReq+0xce>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00f      	beq.n	800da8e <USBD_StdDevReq+0x42>
 800da6e:	2b20      	cmp	r3, #32
 800da70:	d153      	bne.n	800db1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	32ae      	adds	r2, #174	; 0xae
 800da7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	4798      	blx	r3
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]
      break;
 800da8c:	e04a      	b.n	800db24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	785b      	ldrb	r3, [r3, #1]
 800da92:	2b09      	cmp	r3, #9
 800da94:	d83b      	bhi.n	800db0e <USBD_StdDevReq+0xc2>
 800da96:	a201      	add	r2, pc, #4	; (adr r2, 800da9c <USBD_StdDevReq+0x50>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800daf1 	.word	0x0800daf1
 800daa0:	0800db05 	.word	0x0800db05
 800daa4:	0800db0f 	.word	0x0800db0f
 800daa8:	0800dafb 	.word	0x0800dafb
 800daac:	0800db0f 	.word	0x0800db0f
 800dab0:	0800dacf 	.word	0x0800dacf
 800dab4:	0800dac5 	.word	0x0800dac5
 800dab8:	0800db0f 	.word	0x0800db0f
 800dabc:	0800dae7 	.word	0x0800dae7
 800dac0:	0800dad9 	.word	0x0800dad9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dac4:	6839      	ldr	r1, [r7, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fa3c 	bl	800df44 <USBD_GetDescriptor>
          break;
 800dacc:	e024      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fba1 	bl	800e218 <USBD_SetAddress>
          break;
 800dad6:	e01f      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dad8:	6839      	ldr	r1, [r7, #0]
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 fbe0 	bl	800e2a0 <USBD_SetConfig>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73fb      	strb	r3, [r7, #15]
          break;
 800dae4:	e018      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fc83 	bl	800e3f4 <USBD_GetConfig>
          break;
 800daee:	e013      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fcb4 	bl	800e460 <USBD_GetStatus>
          break;
 800daf8:	e00e      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fce3 	bl	800e4c8 <USBD_SetFeature>
          break;
 800db02:	e009      	b.n	800db18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db04:	6839      	ldr	r1, [r7, #0]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fd07 	bl	800e51a <USBD_ClrFeature>
          break;
 800db0c:	e004      	b.n	800db18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fd5e 	bl	800e5d2 <USBD_CtlError>
          break;
 800db16:	bf00      	nop
      }
      break;
 800db18:	e004      	b.n	800db24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800db1a:	6839      	ldr	r1, [r7, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f000 fd58 	bl	800e5d2 <USBD_CtlError>
      break;
 800db22:	bf00      	nop
  }

  return ret;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop

0800db30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db46:	2b40      	cmp	r3, #64	; 0x40
 800db48:	d005      	beq.n	800db56 <USBD_StdItfReq+0x26>
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	d852      	bhi.n	800dbf4 <USBD_StdItfReq+0xc4>
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d001      	beq.n	800db56 <USBD_StdItfReq+0x26>
 800db52:	2b20      	cmp	r3, #32
 800db54:	d14e      	bne.n	800dbf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	3b01      	subs	r3, #1
 800db60:	2b02      	cmp	r3, #2
 800db62:	d840      	bhi.n	800dbe6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	889b      	ldrh	r3, [r3, #4]
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d836      	bhi.n	800dbdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	889b      	ldrh	r3, [r3, #4]
 800db72:	b2db      	uxtb	r3, r3
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff fed9 	bl	800d92e <USBD_CoreFindIF>
 800db7c:	4603      	mov	r3, r0
 800db7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2bff      	cmp	r3, #255	; 0xff
 800db84:	d01d      	beq.n	800dbc2 <USBD_StdItfReq+0x92>
 800db86:	7bbb      	ldrb	r3, [r7, #14]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d11a      	bne.n	800dbc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800db8c:	7bba      	ldrb	r2, [r7, #14]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	32ae      	adds	r2, #174	; 0xae
 800db92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d00f      	beq.n	800dbbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800db9c:	7bba      	ldrb	r2, [r7, #14]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dba4:	7bba      	ldrb	r2, [r7, #14]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	32ae      	adds	r2, #174	; 0xae
 800dbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	6839      	ldr	r1, [r7, #0]
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	4798      	blx	r3
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dbba:	e004      	b.n	800dbc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dbc0:	e001      	b.n	800dbc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	88db      	ldrh	r3, [r3, #6]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d110      	bne.n	800dbf0 <USBD_StdItfReq+0xc0>
 800dbce:	7bfb      	ldrb	r3, [r7, #15]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10d      	bne.n	800dbf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fdc7 	bl	800e768 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dbda:	e009      	b.n	800dbf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fcf7 	bl	800e5d2 <USBD_CtlError>
          break;
 800dbe4:	e004      	b.n	800dbf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fcf2 	bl	800e5d2 <USBD_CtlError>
          break;
 800dbee:	e000      	b.n	800dbf2 <USBD_StdItfReq+0xc2>
          break;
 800dbf0:	bf00      	nop
      }
      break;
 800dbf2:	e004      	b.n	800dbfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fceb 	bl	800e5d2 <USBD_CtlError>
      break;
 800dbfc:	bf00      	nop
  }

  return ret;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	889b      	ldrh	r3, [r3, #4]
 800dc1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc24:	2b40      	cmp	r3, #64	; 0x40
 800dc26:	d007      	beq.n	800dc38 <USBD_StdEPReq+0x30>
 800dc28:	2b40      	cmp	r3, #64	; 0x40
 800dc2a:	f200 817f 	bhi.w	800df2c <USBD_StdEPReq+0x324>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d02a      	beq.n	800dc88 <USBD_StdEPReq+0x80>
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	f040 817a 	bne.w	800df2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fe83 	bl	800d948 <USBD_CoreFindEP>
 800dc42:	4603      	mov	r3, r0
 800dc44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc46:	7b7b      	ldrb	r3, [r7, #13]
 800dc48:	2bff      	cmp	r3, #255	; 0xff
 800dc4a:	f000 8174 	beq.w	800df36 <USBD_StdEPReq+0x32e>
 800dc4e:	7b7b      	ldrb	r3, [r7, #13]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8170 	bne.w	800df36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dc56:	7b7a      	ldrb	r2, [r7, #13]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dc5e:	7b7a      	ldrb	r2, [r7, #13]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	32ae      	adds	r2, #174	; 0xae
 800dc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 8163 	beq.w	800df36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dc70:	7b7a      	ldrb	r2, [r7, #13]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	32ae      	adds	r2, #174	; 0xae
 800dc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	4798      	blx	r3
 800dc82:	4603      	mov	r3, r0
 800dc84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dc86:	e156      	b.n	800df36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	2b03      	cmp	r3, #3
 800dc8e:	d008      	beq.n	800dca2 <USBD_StdEPReq+0x9a>
 800dc90:	2b03      	cmp	r3, #3
 800dc92:	f300 8145 	bgt.w	800df20 <USBD_StdEPReq+0x318>
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f000 809b 	beq.w	800ddd2 <USBD_StdEPReq+0x1ca>
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d03c      	beq.n	800dd1a <USBD_StdEPReq+0x112>
 800dca0:	e13e      	b.n	800df20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	d002      	beq.n	800dcb4 <USBD_StdEPReq+0xac>
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	d016      	beq.n	800dce0 <USBD_StdEPReq+0xd8>
 800dcb2:	e02c      	b.n	800dd0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcb4:	7bbb      	ldrb	r3, [r7, #14]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00d      	beq.n	800dcd6 <USBD_StdEPReq+0xce>
 800dcba:	7bbb      	ldrb	r3, [r7, #14]
 800dcbc:	2b80      	cmp	r3, #128	; 0x80
 800dcbe:	d00a      	beq.n	800dcd6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcc0:	7bbb      	ldrb	r3, [r7, #14]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f003 f8b5 	bl	8010e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcca:	2180      	movs	r1, #128	; 0x80
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f003 f8b1 	bl	8010e34 <USBD_LL_StallEP>
 800dcd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcd4:	e020      	b.n	800dd18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fc7a 	bl	800e5d2 <USBD_CtlError>
              break;
 800dcde:	e01b      	b.n	800dd18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	885b      	ldrh	r3, [r3, #2]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10e      	bne.n	800dd06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dce8:	7bbb      	ldrb	r3, [r7, #14]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00b      	beq.n	800dd06 <USBD_StdEPReq+0xfe>
 800dcee:	7bbb      	ldrb	r3, [r7, #14]
 800dcf0:	2b80      	cmp	r3, #128	; 0x80
 800dcf2:	d008      	beq.n	800dd06 <USBD_StdEPReq+0xfe>
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	88db      	ldrh	r3, [r3, #6]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcfc:	7bbb      	ldrb	r3, [r7, #14]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f003 f897 	bl	8010e34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fd2e 	bl	800e768 <USBD_CtlSendStatus>

              break;
 800dd0c:	e004      	b.n	800dd18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dd0e:	6839      	ldr	r1, [r7, #0]
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 fc5e 	bl	800e5d2 <USBD_CtlError>
              break;
 800dd16:	bf00      	nop
          }
          break;
 800dd18:	e107      	b.n	800df2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b02      	cmp	r3, #2
 800dd24:	d002      	beq.n	800dd2c <USBD_StdEPReq+0x124>
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	d016      	beq.n	800dd58 <USBD_StdEPReq+0x150>
 800dd2a:	e04b      	b.n	800ddc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd2c:	7bbb      	ldrb	r3, [r7, #14]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00d      	beq.n	800dd4e <USBD_StdEPReq+0x146>
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
 800dd34:	2b80      	cmp	r3, #128	; 0x80
 800dd36:	d00a      	beq.n	800dd4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd38:	7bbb      	ldrb	r3, [r7, #14]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f003 f879 	bl	8010e34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd42:	2180      	movs	r1, #128	; 0x80
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f003 f875 	bl	8010e34 <USBD_LL_StallEP>
 800dd4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd4c:	e040      	b.n	800ddd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 fc3e 	bl	800e5d2 <USBD_CtlError>
              break;
 800dd56:	e03b      	b.n	800ddd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	885b      	ldrh	r3, [r3, #2]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d136      	bne.n	800ddce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd60:	7bbb      	ldrb	r3, [r7, #14]
 800dd62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d004      	beq.n	800dd74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd6a:	7bbb      	ldrb	r3, [r7, #14]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f003 f87f 	bl	8010e72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fcf7 	bl	800e768 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff fde2 	bl	800d948 <USBD_CoreFindEP>
 800dd84:	4603      	mov	r3, r0
 800dd86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd88:	7b7b      	ldrb	r3, [r7, #13]
 800dd8a:	2bff      	cmp	r3, #255	; 0xff
 800dd8c:	d01f      	beq.n	800ddce <USBD_StdEPReq+0x1c6>
 800dd8e:	7b7b      	ldrb	r3, [r7, #13]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d11c      	bne.n	800ddce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dd94:	7b7a      	ldrb	r2, [r7, #13]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dd9c:	7b7a      	ldrb	r2, [r7, #13]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	32ae      	adds	r2, #174	; 0xae
 800dda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d010      	beq.n	800ddce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ddac:	7b7a      	ldrb	r2, [r7, #13]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	32ae      	adds	r2, #174	; 0xae
 800ddb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	4798      	blx	r3
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ddc2:	e004      	b.n	800ddce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ddc4:	6839      	ldr	r1, [r7, #0]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 fc03 	bl	800e5d2 <USBD_CtlError>
              break;
 800ddcc:	e000      	b.n	800ddd0 <USBD_StdEPReq+0x1c8>
              break;
 800ddce:	bf00      	nop
          }
          break;
 800ddd0:	e0ab      	b.n	800df2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d002      	beq.n	800dde4 <USBD_StdEPReq+0x1dc>
 800ddde:	2b03      	cmp	r3, #3
 800dde0:	d032      	beq.n	800de48 <USBD_StdEPReq+0x240>
 800dde2:	e097      	b.n	800df14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d007      	beq.n	800ddfa <USBD_StdEPReq+0x1f2>
 800ddea:	7bbb      	ldrb	r3, [r7, #14]
 800ddec:	2b80      	cmp	r3, #128	; 0x80
 800ddee:	d004      	beq.n	800ddfa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 fbed 	bl	800e5d2 <USBD_CtlError>
                break;
 800ddf8:	e091      	b.n	800df1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	da0b      	bge.n	800de1a <USBD_StdEPReq+0x212>
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de08:	4613      	mov	r3, r2
 800de0a:	009b      	lsls	r3, r3, #2
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	3310      	adds	r3, #16
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	4413      	add	r3, r2
 800de16:	3304      	adds	r3, #4
 800de18:	e00b      	b.n	800de32 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de20:	4613      	mov	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	3304      	adds	r3, #4
 800de32:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2200      	movs	r2, #0
 800de38:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2202      	movs	r2, #2
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fc37 	bl	800e6b4 <USBD_CtlSendData>
              break;
 800de46:	e06a      	b.n	800df1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	da11      	bge.n	800de74 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de50:	7bbb      	ldrb	r3, [r7, #14]
 800de52:	f003 020f 	and.w	r2, r3, #15
 800de56:	6879      	ldr	r1, [r7, #4]
 800de58:	4613      	mov	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	440b      	add	r3, r1
 800de62:	3324      	adds	r3, #36	; 0x24
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d117      	bne.n	800de9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fbb0 	bl	800e5d2 <USBD_CtlError>
                  break;
 800de72:	e054      	b.n	800df1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de74:	7bbb      	ldrb	r3, [r7, #14]
 800de76:	f003 020f 	and.w	r2, r3, #15
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	4613      	mov	r3, r2
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	4413      	add	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	440b      	add	r3, r1
 800de86:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fb9d 	bl	800e5d2 <USBD_CtlError>
                  break;
 800de98:	e041      	b.n	800df1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	da0b      	bge.n	800deba <USBD_StdEPReq+0x2b2>
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dea8:	4613      	mov	r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	3310      	adds	r3, #16
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	4413      	add	r3, r2
 800deb6:	3304      	adds	r3, #4
 800deb8:	e00b      	b.n	800ded2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800deba:	7bbb      	ldrb	r3, [r7, #14]
 800debc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dec0:	4613      	mov	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4413      	add	r3, r2
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	4413      	add	r3, r2
 800ded0:	3304      	adds	r3, #4
 800ded2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <USBD_StdEPReq+0x2d8>
 800deda:	7bbb      	ldrb	r3, [r7, #14]
 800dedc:	2b80      	cmp	r3, #128	; 0x80
 800dede:	d103      	bne.n	800dee8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
 800dee6:	e00e      	b.n	800df06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dee8:	7bbb      	ldrb	r3, [r7, #14]
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f002 ffdf 	bl	8010eb0 <USBD_LL_IsStallEP>
 800def2:	4603      	mov	r3, r0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d003      	beq.n	800df00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2201      	movs	r2, #1
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	e002      	b.n	800df06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2202      	movs	r2, #2
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fbd1 	bl	800e6b4 <USBD_CtlSendData>
              break;
 800df12:	e004      	b.n	800df1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800df14:	6839      	ldr	r1, [r7, #0]
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fb5b 	bl	800e5d2 <USBD_CtlError>
              break;
 800df1c:	bf00      	nop
          }
          break;
 800df1e:	e004      	b.n	800df2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800df20:	6839      	ldr	r1, [r7, #0]
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fb55 	bl	800e5d2 <USBD_CtlError>
          break;
 800df28:	bf00      	nop
      }
      break;
 800df2a:	e005      	b.n	800df38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fb4f 	bl	800e5d2 <USBD_CtlError>
      break;
 800df34:	e000      	b.n	800df38 <USBD_StdEPReq+0x330>
      break;
 800df36:	bf00      	nop
  }

  return ret;
 800df38:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3710      	adds	r7, #16
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df56:	2300      	movs	r3, #0
 800df58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	885b      	ldrh	r3, [r3, #2]
 800df5e:	0a1b      	lsrs	r3, r3, #8
 800df60:	b29b      	uxth	r3, r3
 800df62:	3b01      	subs	r3, #1
 800df64:	2b06      	cmp	r3, #6
 800df66:	f200 8128 	bhi.w	800e1ba <USBD_GetDescriptor+0x276>
 800df6a:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <USBD_GetDescriptor+0x2c>)
 800df6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df70:	0800df8d 	.word	0x0800df8d
 800df74:	0800dfa5 	.word	0x0800dfa5
 800df78:	0800dfe5 	.word	0x0800dfe5
 800df7c:	0800e1bb 	.word	0x0800e1bb
 800df80:	0800e1bb 	.word	0x0800e1bb
 800df84:	0800e15b 	.word	0x0800e15b
 800df88:	0800e187 	.word	0x0800e187
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	7c12      	ldrb	r2, [r2, #16]
 800df98:	f107 0108 	add.w	r1, r7, #8
 800df9c:	4610      	mov	r0, r2
 800df9e:	4798      	blx	r3
 800dfa0:	60f8      	str	r0, [r7, #12]
      break;
 800dfa2:	e112      	b.n	800e1ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7c1b      	ldrb	r3, [r3, #16]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10d      	bne.n	800dfc8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb4:	f107 0208 	add.w	r2, r7, #8
 800dfb8:	4610      	mov	r0, r2
 800dfba:	4798      	blx	r3
 800dfbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dfc6:	e100      	b.n	800e1ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	f107 0208 	add.w	r2, r7, #8
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
 800dfd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	2202      	movs	r2, #2
 800dfe0:	701a      	strb	r2, [r3, #0]
      break;
 800dfe2:	e0f2      	b.n	800e1ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	885b      	ldrh	r3, [r3, #2]
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b05      	cmp	r3, #5
 800dfec:	f200 80ac 	bhi.w	800e148 <USBD_GetDescriptor+0x204>
 800dff0:	a201      	add	r2, pc, #4	; (adr r2, 800dff8 <USBD_GetDescriptor+0xb4>)
 800dff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff6:	bf00      	nop
 800dff8:	0800e011 	.word	0x0800e011
 800dffc:	0800e045 	.word	0x0800e045
 800e000:	0800e079 	.word	0x0800e079
 800e004:	0800e0ad 	.word	0x0800e0ad
 800e008:	0800e0e1 	.word	0x0800e0e1
 800e00c:	0800e115 	.word	0x0800e115
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00b      	beq.n	800e034 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	7c12      	ldrb	r2, [r2, #16]
 800e028:	f107 0108 	add.w	r1, r7, #8
 800e02c:	4610      	mov	r0, r2
 800e02e:	4798      	blx	r3
 800e030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e032:	e091      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 facb 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e03c:	7afb      	ldrb	r3, [r7, #11]
 800e03e:	3301      	adds	r3, #1
 800e040:	72fb      	strb	r3, [r7, #11]
          break;
 800e042:	e089      	b.n	800e158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00b      	beq.n	800e068 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	7c12      	ldrb	r2, [r2, #16]
 800e05c:	f107 0108 	add.w	r1, r7, #8
 800e060:	4610      	mov	r0, r2
 800e062:	4798      	blx	r3
 800e064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e066:	e077      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fab1 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e070:	7afb      	ldrb	r3, [r7, #11]
 800e072:	3301      	adds	r3, #1
 800e074:	72fb      	strb	r3, [r7, #11]
          break;
 800e076:	e06f      	b.n	800e158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00b      	beq.n	800e09c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7c12      	ldrb	r2, [r2, #16]
 800e090:	f107 0108 	add.w	r1, r7, #8
 800e094:	4610      	mov	r0, r2
 800e096:	4798      	blx	r3
 800e098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09a:	e05d      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fa97 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e0a4:	7afb      	ldrb	r3, [r7, #11]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0aa:	e055      	b.n	800e158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00b      	beq.n	800e0d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	7c12      	ldrb	r2, [r2, #16]
 800e0c4:	f107 0108 	add.w	r1, r7, #8
 800e0c8:	4610      	mov	r0, r2
 800e0ca:	4798      	blx	r3
 800e0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ce:	e043      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0d0:	6839      	ldr	r1, [r7, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 fa7d 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e0d8:	7afb      	ldrb	r3, [r7, #11]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e0de:	e03b      	b.n	800e158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	7c12      	ldrb	r2, [r2, #16]
 800e0f8:	f107 0108 	add.w	r1, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e102:	e029      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fa63 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e10c:	7afb      	ldrb	r3, [r7, #11]
 800e10e:	3301      	adds	r3, #1
 800e110:	72fb      	strb	r3, [r7, #11]
          break;
 800e112:	e021      	b.n	800e158 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	7c12      	ldrb	r2, [r2, #16]
 800e12c:	f107 0108 	add.w	r1, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e136:	e00f      	b.n	800e158 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fa49 	bl	800e5d2 <USBD_CtlError>
            err++;
 800e140:	7afb      	ldrb	r3, [r7, #11]
 800e142:	3301      	adds	r3, #1
 800e144:	72fb      	strb	r3, [r7, #11]
          break;
 800e146:	e007      	b.n	800e158 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fa41 	bl	800e5d2 <USBD_CtlError>
          err++;
 800e150:	7afb      	ldrb	r3, [r7, #11]
 800e152:	3301      	adds	r3, #1
 800e154:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e156:	bf00      	nop
      }
      break;
 800e158:	e037      	b.n	800e1ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	7c1b      	ldrb	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e16a:	f107 0208 	add.w	r2, r7, #8
 800e16e:	4610      	mov	r0, r2
 800e170:	4798      	blx	r3
 800e172:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e174:	e029      	b.n	800e1ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fa2a 	bl	800e5d2 <USBD_CtlError>
        err++;
 800e17e:	7afb      	ldrb	r3, [r7, #11]
 800e180:	3301      	adds	r3, #1
 800e182:	72fb      	strb	r3, [r7, #11]
      break;
 800e184:	e021      	b.n	800e1ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7c1b      	ldrb	r3, [r3, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10d      	bne.n	800e1aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e196:	f107 0208 	add.w	r2, r7, #8
 800e19a:	4610      	mov	r0, r2
 800e19c:	4798      	blx	r3
 800e19e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	2207      	movs	r2, #7
 800e1a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1a8:	e00f      	b.n	800e1ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e1aa:	6839      	ldr	r1, [r7, #0]
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fa10 	bl	800e5d2 <USBD_CtlError>
        err++;
 800e1b2:	7afb      	ldrb	r3, [r7, #11]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1b8:	e007      	b.n	800e1ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fa08 	bl	800e5d2 <USBD_CtlError>
      err++;
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1c8:	bf00      	nop
  }

  if (err != 0U)
 800e1ca:	7afb      	ldrb	r3, [r7, #11]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d11e      	bne.n	800e20e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	88db      	ldrh	r3, [r3, #6]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d016      	beq.n	800e206 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e1d8:	893b      	ldrh	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00e      	beq.n	800e1fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	88da      	ldrh	r2, [r3, #6]
 800e1e2:	893b      	ldrh	r3, [r7, #8]
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	bf28      	it	cs
 800e1e8:	4613      	movcs	r3, r2
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e1ee:	893b      	ldrh	r3, [r7, #8]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68f9      	ldr	r1, [r7, #12]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fa5d 	bl	800e6b4 <USBD_CtlSendData>
 800e1fa:	e009      	b.n	800e210 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f9e7 	bl	800e5d2 <USBD_CtlError>
 800e204:	e004      	b.n	800e210 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 faae 	bl	800e768 <USBD_CtlSendStatus>
 800e20c:	e000      	b.n	800e210 <USBD_GetDescriptor+0x2cc>
    return;
 800e20e:	bf00      	nop
  }
}
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop

0800e218 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	889b      	ldrh	r3, [r3, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d131      	bne.n	800e28e <USBD_SetAddress+0x76>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	88db      	ldrh	r3, [r3, #6]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d12d      	bne.n	800e28e <USBD_SetAddress+0x76>
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	2b7f      	cmp	r3, #127	; 0x7f
 800e238:	d829      	bhi.n	800e28e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	885b      	ldrh	r3, [r3, #2]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e244:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d104      	bne.n	800e25c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 f9bc 	bl	800e5d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e25a:	e01d      	b.n	800e298 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	7bfa      	ldrb	r2, [r7, #15]
 800e260:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f002 fe4d 	bl	8010f08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa7a 	bl	800e768 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e274:	7bfb      	ldrb	r3, [r7, #15]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d004      	beq.n	800e284 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2202      	movs	r2, #2
 800e27e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e282:	e009      	b.n	800e298 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e28c:	e004      	b.n	800e298 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f99e 	bl	800e5d2 <USBD_CtlError>
  }
}
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	885b      	ldrh	r3, [r3, #2]
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	4b4e      	ldr	r3, [pc, #312]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e2b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2b8:	4b4d      	ldr	r3, [pc, #308]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d905      	bls.n	800e2cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2c0:	6839      	ldr	r1, [r7, #0]
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 f985 	bl	800e5d2 <USBD_CtlError>
    return USBD_FAIL;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e08c      	b.n	800e3e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d002      	beq.n	800e2de <USBD_SetConfig+0x3e>
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d029      	beq.n	800e330 <USBD_SetConfig+0x90>
 800e2dc:	e075      	b.n	800e3ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e2de:	4b44      	ldr	r3, [pc, #272]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d020      	beq.n	800e328 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e2e6:	4b42      	ldr	r3, [pc, #264]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e2f0:	4b3f      	ldr	r3, [pc, #252]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7fe ffe7 	bl	800d2ca <USBD_SetClassConfig>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d008      	beq.n	800e318 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f962 	bl	800e5d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2202      	movs	r2, #2
 800e312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e316:	e065      	b.n	800e3e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fa25 	bl	800e768 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2203      	movs	r2, #3
 800e322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e326:	e05d      	b.n	800e3e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fa1d 	bl	800e768 <USBD_CtlSendStatus>
      break;
 800e32e:	e059      	b.n	800e3e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e330:	4b2f      	ldr	r3, [pc, #188]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d112      	bne.n	800e35e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2202      	movs	r2, #2
 800e33c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e340:	4b2b      	ldr	r3, [pc, #172]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e34a:	4b29      	ldr	r3, [pc, #164]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7fe ffd6 	bl	800d302 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fa06 	bl	800e768 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e35c:	e042      	b.n	800e3e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e35e:	4b24      	ldr	r3, [pc, #144]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d02a      	beq.n	800e3c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	b2db      	uxtb	r3, r3
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7fe ffc4 	bl	800d302 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e37a:	4b1d      	ldr	r3, [pc, #116]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e384:	4b1a      	ldr	r3, [pc, #104]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7fe ff9d 	bl	800d2ca <USBD_SetClassConfig>
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00f      	beq.n	800e3ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e39a:	6839      	ldr	r1, [r7, #0]
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f918 	bl	800e5d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fe ffa9 	bl	800d302 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2202      	movs	r2, #2
 800e3b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3b8:	e014      	b.n	800e3e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 f9d4 	bl	800e768 <USBD_CtlSendStatus>
      break;
 800e3c0:	e010      	b.n	800e3e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f9d0 	bl	800e768 <USBD_CtlSendStatus>
      break;
 800e3c8:	e00c      	b.n	800e3e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f900 	bl	800e5d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3d2:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <USBD_SetConfig+0x150>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7fe ff92 	bl	800d302 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e3de:	2303      	movs	r3, #3
 800e3e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e3e2:	bf00      	nop
  }

  return ret;
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	20002b18 	.word	0x20002b18

0800e3f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d004      	beq.n	800e410 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f8e2 	bl	800e5d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e40e:	e023      	b.n	800e458 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b02      	cmp	r3, #2
 800e41a:	dc02      	bgt.n	800e422 <USBD_GetConfig+0x2e>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dc03      	bgt.n	800e428 <USBD_GetConfig+0x34>
 800e420:	e015      	b.n	800e44e <USBD_GetConfig+0x5a>
 800e422:	2b03      	cmp	r3, #3
 800e424:	d00b      	beq.n	800e43e <USBD_GetConfig+0x4a>
 800e426:	e012      	b.n	800e44e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3308      	adds	r3, #8
 800e432:	2201      	movs	r2, #1
 800e434:	4619      	mov	r1, r3
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f93c 	bl	800e6b4 <USBD_CtlSendData>
        break;
 800e43c:	e00c      	b.n	800e458 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3304      	adds	r3, #4
 800e442:	2201      	movs	r2, #1
 800e444:	4619      	mov	r1, r3
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f934 	bl	800e6b4 <USBD_CtlSendData>
        break;
 800e44c:	e004      	b.n	800e458 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f8be 	bl	800e5d2 <USBD_CtlError>
        break;
 800e456:	bf00      	nop
}
 800e458:	bf00      	nop
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b082      	sub	sp, #8
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e470:	b2db      	uxtb	r3, r3
 800e472:	3b01      	subs	r3, #1
 800e474:	2b02      	cmp	r3, #2
 800e476:	d81e      	bhi.n	800e4b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	88db      	ldrh	r3, [r3, #6]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d004      	beq.n	800e48a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f8a5 	bl	800e5d2 <USBD_CtlError>
        break;
 800e488:	e01a      	b.n	800e4c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2201      	movs	r2, #1
 800e48e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e496:	2b00      	cmp	r3, #0
 800e498:	d005      	beq.n	800e4a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	68db      	ldr	r3, [r3, #12]
 800e49e:	f043 0202 	orr.w	r2, r3, #2
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f900 	bl	800e6b4 <USBD_CtlSendData>
      break;
 800e4b4:	e004      	b.n	800e4c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f88a 	bl	800e5d2 <USBD_CtlError>
      break;
 800e4be:	bf00      	nop
  }
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	885b      	ldrh	r3, [r3, #2]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d107      	bne.n	800e4ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f940 	bl	800e768 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e4e8:	e013      	b.n	800e512 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	885b      	ldrh	r3, [r3, #2]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d10b      	bne.n	800e50a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	889b      	ldrh	r3, [r3, #4]
 800e4f6:	0a1b      	lsrs	r3, r3, #8
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f930 	bl	800e768 <USBD_CtlSendStatus>
}
 800e508:	e003      	b.n	800e512 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f860 	bl	800e5d2 <USBD_CtlError>
}
 800e512:	bf00      	nop
 800e514:	3708      	adds	r7, #8
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	3b01      	subs	r3, #1
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d80b      	bhi.n	800e54a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d10c      	bne.n	800e554 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f910 	bl	800e768 <USBD_CtlSendStatus>
      }
      break;
 800e548:	e004      	b.n	800e554 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f840 	bl	800e5d2 <USBD_CtlError>
      break;
 800e552:	e000      	b.n	800e556 <USBD_ClrFeature+0x3c>
      break;
 800e554:	bf00      	nop
  }
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	781a      	ldrb	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3301      	adds	r3, #1
 800e586:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	f7ff fa41 	bl	800da10 <SWAPBYTE>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	3301      	adds	r3, #1
 800e59a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7ff fa34 	bl	800da10 <SWAPBYTE>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff fa27 	bl	800da10 <SWAPBYTE>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	80da      	strh	r2, [r3, #6]
}
 800e5ca:	bf00      	nop
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5dc:	2180      	movs	r1, #128	; 0x80
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f002 fc28 	bl	8010e34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f002 fc24 	bl	8010e34 <USBD_LL_StallEP>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d036      	beq.n	800e678 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e60e:	6938      	ldr	r0, [r7, #16]
 800e610:	f000 f836 	bl	800e680 <USBD_GetLen>
 800e614:	4603      	mov	r3, r0
 800e616:	3301      	adds	r3, #1
 800e618:	b29b      	uxth	r3, r3
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	4413      	add	r3, r2
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	7812      	ldrb	r2, [r2, #0]
 800e62c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	3301      	adds	r3, #1
 800e632:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	4413      	add	r3, r2
 800e63a:	2203      	movs	r2, #3
 800e63c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	3301      	adds	r3, #1
 800e642:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e644:	e013      	b.n	800e66e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	4413      	add	r3, r2
 800e64c:	693a      	ldr	r2, [r7, #16]
 800e64e:	7812      	ldrb	r2, [r2, #0]
 800e650:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	3301      	adds	r3, #1
 800e656:	613b      	str	r3, [r7, #16]
    idx++;
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	3301      	adds	r3, #1
 800e65c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	4413      	add	r3, r2
 800e664:	2200      	movs	r2, #0
 800e666:	701a      	strb	r2, [r3, #0]
    idx++;
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	3301      	adds	r3, #1
 800e66c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e7      	bne.n	800e646 <USBD_GetString+0x52>
 800e676:	e000      	b.n	800e67a <USBD_GetString+0x86>
    return;
 800e678:	bf00      	nop
  }
}
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e680:	b480      	push	{r7}
 800e682:	b085      	sub	sp, #20
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e688:	2300      	movs	r3, #0
 800e68a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e690:	e005      	b.n	800e69e <USBD_GetLen+0x1e>
  {
    len++;
 800e692:	7bfb      	ldrb	r3, [r7, #15]
 800e694:	3301      	adds	r3, #1
 800e696:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1f5      	bne.n	800e692 <USBD_GetLen+0x12>
  }

  return len;
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	2100      	movs	r1, #0
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f002 fc33 	bl	8010f46 <USBD_LL_Transmit>

  return USBD_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3710      	adds	r7, #16
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	68f8      	ldr	r0, [r7, #12]
 800e6fe:	f002 fc22 	bl	8010f46 <USBD_LL_Transmit>

  return USBD_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2203      	movs	r2, #3
 800e71c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	2100      	movs	r1, #0
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f002 fc26 	bl	8010f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e73c:	2300      	movs	r3, #0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b084      	sub	sp, #16
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	60f8      	str	r0, [r7, #12]
 800e74e:	60b9      	str	r1, [r7, #8]
 800e750:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	2100      	movs	r1, #0
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f002 fc15 	bl	8010f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2204      	movs	r2, #4
 800e774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e778:	2300      	movs	r3, #0
 800e77a:	2200      	movs	r2, #0
 800e77c:	2100      	movs	r1, #0
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f002 fbe1 	bl	8010f46 <USBD_LL_Transmit>

  return USBD_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2205      	movs	r2, #5
 800e79a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f002 fbef 	bl	8010f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e7c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e7c6:	2b84      	cmp	r3, #132	; 0x84
 800e7c8:	d005      	beq.n	800e7d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e7ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	3303      	adds	r3, #3
 800e7d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e7e8:	f000 fe1e 	bl	800f428 <vTaskStartScheduler>
  
  return osOK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7f4:	b089      	sub	sp, #36	; 0x24
 800e7f6:	af04      	add	r7, sp, #16
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d020      	beq.n	800e846 <osThreadCreate+0x54>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d01c      	beq.n	800e846 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685c      	ldr	r4, [r3, #4]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681d      	ldr	r5, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	691e      	ldr	r6, [r3, #16]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7ff ffc8 	bl	800e7b4 <makeFreeRtosPriority>
 800e824:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e82e:	9202      	str	r2, [sp, #8]
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	9100      	str	r1, [sp, #0]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	4632      	mov	r2, r6
 800e838:	4629      	mov	r1, r5
 800e83a:	4620      	mov	r0, r4
 800e83c:	f000 fc2c 	bl	800f098 <xTaskCreateStatic>
 800e840:	4603      	mov	r3, r0
 800e842:	60fb      	str	r3, [r7, #12]
 800e844:	e01c      	b.n	800e880 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	685c      	ldr	r4, [r3, #4]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e852:	b29e      	uxth	r6, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff ffaa 	bl	800e7b4 <makeFreeRtosPriority>
 800e860:	4602      	mov	r2, r0
 800e862:	f107 030c 	add.w	r3, r7, #12
 800e866:	9301      	str	r3, [sp, #4]
 800e868:	9200      	str	r2, [sp, #0]
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	4632      	mov	r2, r6
 800e86e:	4629      	mov	r1, r5
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fc6e 	bl	800f152 <xTaskCreate>
 800e876:	4603      	mov	r3, r0
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d001      	beq.n	800e880 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e87c:	2300      	movs	r3, #0
 800e87e:	e000      	b.n	800e882 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e880:	68fb      	ldr	r3, [r7, #12]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3714      	adds	r7, #20
 800e886:	46bd      	mov	sp, r7
 800e888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e88a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <osDelay+0x16>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	e000      	b.n	800e8a2 <osDelay+0x18>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f000 fd8c 	bl	800f3c0 <vTaskDelay>
  
  return osOK;
 800e8a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b086      	sub	sp, #24
 800e8b6:	af02      	add	r7, sp, #8
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00f      	beq.n	800e8e4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d10a      	bne.n	800e8e0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	2203      	movs	r2, #3
 800e8d0:	9200      	str	r2, [sp, #0]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	2001      	movs	r0, #1
 800e8d8:	f000 f93a 	bl	800eb50 <xQueueGenericCreateStatic>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	e016      	b.n	800e90e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e014      	b.n	800e90e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d110      	bne.n	800e90c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e8ea:	2203      	movs	r2, #3
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	f000 f9a6 	bl	800ec40 <xQueueGenericCreate>
 800e8f4:	60f8      	str	r0, [r7, #12]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d005      	beq.n	800e908 <osSemaphoreCreate+0x56>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	2200      	movs	r2, #0
 800e900:	2100      	movs	r1, #0
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 f9f6 	bl	800ecf4 <xQueueGenericSend>
      return sema;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	e000      	b.n	800e90e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e90c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e916:	b480      	push	{r7}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f103 0208 	add.w	r2, r3, #8
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f04f 32ff 	mov.w	r2, #4294967295
 800e92e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f103 0208 	add.w	r2, r3, #8
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f103 0208 	add.w	r2, r3, #8
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2200      	movs	r2, #0
 800e948:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e94a:	bf00      	nop
 800e94c:	370c      	adds	r7, #12
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e964:	bf00      	nop
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	689a      	ldr	r2, [r3, #8]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	601a      	str	r2, [r3, #0]
}
 800e9ac:	bf00      	nop
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ce:	d103      	bne.n	800e9d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	60fb      	str	r3, [r7, #12]
 800e9d6:	e00c      	b.n	800e9f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	3308      	adds	r3, #8
 800e9dc:	60fb      	str	r3, [r7, #12]
 800e9de:	e002      	b.n	800e9e6 <vListInsert+0x2e>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	60fb      	str	r3, [r7, #12]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d2f6      	bcs.n	800e9e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	685a      	ldr	r2, [r3, #4]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	1c5a      	adds	r2, r3, #1
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	601a      	str	r2, [r3, #0]
}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b085      	sub	sp, #20
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	6892      	ldr	r2, [r2, #8]
 800ea40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	6852      	ldr	r2, [r2, #4]
 800ea4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d103      	bne.n	800ea5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	689a      	ldr	r2, [r3, #8]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	1e5a      	subs	r2, r3, #1
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
	...

0800ea80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ea94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eaa6:	bf00      	nop
 800eaa8:	e7fe      	b.n	800eaa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eaaa:	f001 faf3 	bl	8010094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab6:	68f9      	ldr	r1, [r7, #12]
 800eab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eaba:	fb01 f303 	mul.w	r3, r1, r3
 800eabe:	441a      	add	r2, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681a      	ldr	r2, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eada:	3b01      	subs	r3, #1
 800eadc:	68f9      	ldr	r1, [r7, #12]
 800eade:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eae0:	fb01 f303 	mul.w	r3, r1, r3
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	22ff      	movs	r2, #255	; 0xff
 800eaee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	22ff      	movs	r2, #255	; 0xff
 800eaf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d114      	bne.n	800eb2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d01a      	beq.n	800eb3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	3310      	adds	r3, #16
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 fecd 	bl	800f8ac <xTaskRemoveFromEventList>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d012      	beq.n	800eb3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb18:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <xQueueGenericReset+0xcc>)
 800eb1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1e:	601a      	str	r2, [r3, #0]
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	e009      	b.n	800eb3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	3310      	adds	r3, #16
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7ff fef1 	bl	800e916 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3324      	adds	r3, #36	; 0x24
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff feec 	bl	800e916 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eb3e:	f001 fad9 	bl	80100f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eb42:	2301      	movs	r3, #1
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	e000ed04 	.word	0xe000ed04

0800eb50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b08e      	sub	sp, #56	; 0x38
 800eb54:	af02      	add	r7, sp, #8
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10a      	bne.n	800eb7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb68:	f383 8811 	msr	BASEPRI, r3
 800eb6c:	f3bf 8f6f 	isb	sy
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb76:	bf00      	nop
 800eb78:	e7fe      	b.n	800eb78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb92:	bf00      	nop
 800eb94:	e7fe      	b.n	800eb94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <xQueueGenericCreateStatic+0x52>
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <xQueueGenericCreateStatic+0x56>
 800eba2:	2301      	movs	r3, #1
 800eba4:	e000      	b.n	800eba8 <xQueueGenericCreateStatic+0x58>
 800eba6:	2300      	movs	r3, #0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10a      	bne.n	800ebc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	623b      	str	r3, [r7, #32]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <xQueueGenericCreateStatic+0x7e>
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <xQueueGenericCreateStatic+0x82>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e000      	b.n	800ebd4 <xQueueGenericCreateStatic+0x84>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d10a      	bne.n	800ebee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ebd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebdc:	f383 8811 	msr	BASEPRI, r3
 800ebe0:	f3bf 8f6f 	isb	sy
 800ebe4:	f3bf 8f4f 	dsb	sy
 800ebe8:	61fb      	str	r3, [r7, #28]
}
 800ebea:	bf00      	nop
 800ebec:	e7fe      	b.n	800ebec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ebee:	2348      	movs	r3, #72	; 0x48
 800ebf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b48      	cmp	r3, #72	; 0x48
 800ebf6:	d00a      	beq.n	800ec0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	61bb      	str	r3, [r7, #24]
}
 800ec0a:	bf00      	nop
 800ec0c:	e7fe      	b.n	800ec0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ec0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00d      	beq.n	800ec36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	68b9      	ldr	r1, [r7, #8]
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f000 f83f 	bl	800ecb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3730      	adds	r7, #48	; 0x30
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08a      	sub	sp, #40	; 0x28
 800ec44:	af02      	add	r7, sp, #8
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d10a      	bne.n	800ec6a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	613b      	str	r3, [r7, #16]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	fb02 f303 	mul.w	r3, r2, r3
 800ec72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	3348      	adds	r3, #72	; 0x48
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f001 faed 	bl	8010258 <pvPortMalloc>
 800ec7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ec80:	69bb      	ldr	r3, [r7, #24]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d011      	beq.n	800ecaa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	3348      	adds	r3, #72	; 0x48
 800ec8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec98:	79fa      	ldrb	r2, [r7, #7]
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	68b9      	ldr	r1, [r7, #8]
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f000 f805 	bl	800ecb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
	}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3720      	adds	r7, #32
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	607a      	str	r2, [r7, #4]
 800ecc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d103      	bne.n	800ecd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	69ba      	ldr	r2, [r7, #24]
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	e002      	b.n	800ecd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ece2:	2101      	movs	r1, #1
 800ece4:	69b8      	ldr	r0, [r7, #24]
 800ece6:	f7ff fecb 	bl	800ea80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ecea:	bf00      	nop
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
	...

0800ecf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b08e      	sub	sp, #56	; 0x38
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ed02:	2300      	movs	r3, #0
 800ed04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ed0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d10a      	bne.n	800ed26 <xQueueGenericSend+0x32>
	__asm volatile
 800ed10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed22:	bf00      	nop
 800ed24:	e7fe      	b.n	800ed24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d103      	bne.n	800ed34 <xQueueGenericSend+0x40>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d101      	bne.n	800ed38 <xQueueGenericSend+0x44>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e000      	b.n	800ed3a <xQueueGenericSend+0x46>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <xQueueGenericSend+0x60>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed50:	bf00      	nop
 800ed52:	e7fe      	b.n	800ed52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d103      	bne.n	800ed62 <xQueueGenericSend+0x6e>
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d101      	bne.n	800ed66 <xQueueGenericSend+0x72>
 800ed62:	2301      	movs	r3, #1
 800ed64:	e000      	b.n	800ed68 <xQueueGenericSend+0x74>
 800ed66:	2300      	movs	r3, #0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10a      	bne.n	800ed82 <xQueueGenericSend+0x8e>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	623b      	str	r3, [r7, #32]
}
 800ed7e:	bf00      	nop
 800ed80:	e7fe      	b.n	800ed80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed82:	f000 ff4f 	bl	800fc24 <xTaskGetSchedulerState>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d102      	bne.n	800ed92 <xQueueGenericSend+0x9e>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <xQueueGenericSend+0xa2>
 800ed92:	2301      	movs	r3, #1
 800ed94:	e000      	b.n	800ed98 <xQueueGenericSend+0xa4>
 800ed96:	2300      	movs	r3, #0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d10a      	bne.n	800edb2 <xQueueGenericSend+0xbe>
	__asm volatile
 800ed9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda0:	f383 8811 	msr	BASEPRI, r3
 800eda4:	f3bf 8f6f 	isb	sy
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	61fb      	str	r3, [r7, #28]
}
 800edae:	bf00      	nop
 800edb0:	e7fe      	b.n	800edb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edb2:	f001 f96f 	bl	8010094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d302      	bcc.n	800edc8 <xQueueGenericSend+0xd4>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b02      	cmp	r3, #2
 800edc6:	d129      	bne.n	800ee1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edce:	f000 f88f 	bl	800eef0 <prvCopyDataToQueue>
 800edd2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800edd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d010      	beq.n	800edfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edde:	3324      	adds	r3, #36	; 0x24
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fd63 	bl	800f8ac <xTaskRemoveFromEventList>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d013      	beq.n	800ee14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800edec:	4b3f      	ldr	r3, [pc, #252]	; (800eeec <xQueueGenericSend+0x1f8>)
 800edee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	f3bf 8f4f 	dsb	sy
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	e00a      	b.n	800ee14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d007      	beq.n	800ee14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ee04:	4b39      	ldr	r3, [pc, #228]	; (800eeec <xQueueGenericSend+0x1f8>)
 800ee06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee14:	f001 f96e 	bl	80100f4 <vPortExitCritical>
				return pdPASS;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e063      	b.n	800eee4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d103      	bne.n	800ee2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee22:	f001 f967 	bl	80100f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e05c      	b.n	800eee4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d106      	bne.n	800ee3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee30:	f107 0314 	add.w	r3, r7, #20
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 fd9b 	bl	800f970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee3e:	f001 f959 	bl	80100f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee42:	f000 fb51 	bl	800f4e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee46:	f001 f925 	bl	8010094 <vPortEnterCritical>
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee50:	b25b      	sxtb	r3, r3
 800ee52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee56:	d103      	bne.n	800ee60 <xQueueGenericSend+0x16c>
 800ee58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee66:	b25b      	sxtb	r3, r3
 800ee68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6c:	d103      	bne.n	800ee76 <xQueueGenericSend+0x182>
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee76:	f001 f93d 	bl	80100f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee7a:	1d3a      	adds	r2, r7, #4
 800ee7c:	f107 0314 	add.w	r3, r7, #20
 800ee80:	4611      	mov	r1, r2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 fd8a 	bl	800f99c <xTaskCheckForTimeOut>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d124      	bne.n	800eed8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ee8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee90:	f000 f8ea 	bl	800f068 <prvIsQueueFull>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d018      	beq.n	800eecc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ee9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9c:	3310      	adds	r3, #16
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f000 fcde 	bl	800f864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeaa:	f000 f88b 	bl	800efc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eeae:	f000 fb29 	bl	800f504 <xTaskResumeAll>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f47f af7c 	bne.w	800edb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eeba:	4b0c      	ldr	r3, [pc, #48]	; (800eeec <xQueueGenericSend+0x1f8>)
 800eebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	e772      	b.n	800edb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eece:	f000 f879 	bl	800efc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eed2:	f000 fb17 	bl	800f504 <xTaskResumeAll>
 800eed6:	e76c      	b.n	800edb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeda:	f000 f873 	bl	800efc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eede:	f000 fb11 	bl	800f504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eee2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3738      	adds	r7, #56	; 0x38
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	e000ed04 	.word	0xe000ed04

0800eef0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eefc:	2300      	movs	r3, #0
 800eefe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10d      	bne.n	800ef2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d14d      	bne.n	800efb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	689b      	ldr	r3, [r3, #8]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fea0 	bl	800fc60 <xTaskPriorityDisinherit>
 800ef20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	609a      	str	r2, [r3, #8]
 800ef28:	e043      	b.n	800efb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d119      	bne.n	800ef64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6858      	ldr	r0, [r3, #4]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef38:	461a      	mov	r2, r3
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	f003 fc04 	bl	8012748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	685a      	ldr	r2, [r3, #4]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef48:	441a      	add	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d32b      	bcc.n	800efb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	605a      	str	r2, [r3, #4]
 800ef62:	e026      	b.n	800efb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	68d8      	ldr	r0, [r3, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	68b9      	ldr	r1, [r7, #8]
 800ef70:	f003 fbea 	bl	8012748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68da      	ldr	r2, [r3, #12]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7c:	425b      	negs	r3, r3
 800ef7e:	441a      	add	r2, r3
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	68da      	ldr	r2, [r3, #12]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d207      	bcs.n	800efa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	689a      	ldr	r2, [r3, #8]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef98:	425b      	negs	r3, r3
 800ef9a:	441a      	add	r2, r3
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d105      	bne.n	800efb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	3b01      	subs	r3, #1
 800efb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	1c5a      	adds	r2, r3, #1
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800efba:	697b      	ldr	r3, [r7, #20]
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b084      	sub	sp, #16
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efcc:	f001 f862 	bl	8010094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efd8:	e011      	b.n	800effe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d012      	beq.n	800f008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	3324      	adds	r3, #36	; 0x24
 800efe6:	4618      	mov	r0, r3
 800efe8:	f000 fc60 	bl	800f8ac <xTaskRemoveFromEventList>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eff2:	f000 fd35 	bl	800fa60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eff6:	7bfb      	ldrb	r3, [r7, #15]
 800eff8:	3b01      	subs	r3, #1
 800effa:	b2db      	uxtb	r3, r3
 800effc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800effe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f002:	2b00      	cmp	r3, #0
 800f004:	dce9      	bgt.n	800efda <prvUnlockQueue+0x16>
 800f006:	e000      	b.n	800f00a <prvUnlockQueue+0x46>
					break;
 800f008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	22ff      	movs	r2, #255	; 0xff
 800f00e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f012:	f001 f86f 	bl	80100f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f016:	f001 f83d 	bl	8010094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f022:	e011      	b.n	800f048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d012      	beq.n	800f052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3310      	adds	r3, #16
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fc3b 	bl	800f8ac <xTaskRemoveFromEventList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f03c:	f000 fd10 	bl	800fa60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f040:	7bbb      	ldrb	r3, [r7, #14]
 800f042:	3b01      	subs	r3, #1
 800f044:	b2db      	uxtb	r3, r3
 800f046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	dce9      	bgt.n	800f024 <prvUnlockQueue+0x60>
 800f050:	e000      	b.n	800f054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	22ff      	movs	r2, #255	; 0xff
 800f058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f05c:	f001 f84a 	bl	80100f4 <vPortExitCritical>
}
 800f060:	bf00      	nop
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f070:	f001 f810 	bl	8010094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d102      	bne.n	800f086 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	e001      	b.n	800f08a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f08a:	f001 f833 	bl	80100f4 <vPortExitCritical>

	return xReturn;
 800f08e:	68fb      	ldr	r3, [r7, #12]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08e      	sub	sp, #56	; 0x38
 800f09c:	af04      	add	r7, sp, #16
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	607a      	str	r2, [r7, #4]
 800f0a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10a      	bne.n	800f0c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b0:	f383 8811 	msr	BASEPRI, r3
 800f0b4:	f3bf 8f6f 	isb	sy
 800f0b8:	f3bf 8f4f 	dsb	sy
 800f0bc:	623b      	str	r3, [r7, #32]
}
 800f0be:	bf00      	nop
 800f0c0:	e7fe      	b.n	800f0c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d10a      	bne.n	800f0de <xTaskCreateStatic+0x46>
	__asm volatile
 800f0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0cc:	f383 8811 	msr	BASEPRI, r3
 800f0d0:	f3bf 8f6f 	isb	sy
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	61fb      	str	r3, [r7, #28]
}
 800f0da:	bf00      	nop
 800f0dc:	e7fe      	b.n	800f0dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f0de:	2354      	movs	r3, #84	; 0x54
 800f0e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	2b54      	cmp	r3, #84	; 0x54
 800f0e6:	d00a      	beq.n	800f0fe <xTaskCreateStatic+0x66>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	61bb      	str	r3, [r7, #24]
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f0fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	2b00      	cmp	r3, #0
 800f104:	d01e      	beq.n	800f144 <xTaskCreateStatic+0xac>
 800f106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d01b      	beq.n	800f144 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f114:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	2202      	movs	r2, #2
 800f11a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f11e:	2300      	movs	r3, #0
 800f120:	9303      	str	r3, [sp, #12]
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	9302      	str	r3, [sp, #8]
 800f126:	f107 0314 	add.w	r3, r7, #20
 800f12a:	9301      	str	r3, [sp, #4]
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	68b9      	ldr	r1, [r7, #8]
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f000 f850 	bl	800f1dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f13e:	f000 f8d5 	bl	800f2ec <prvAddNewTaskToReadyList>
 800f142:	e001      	b.n	800f148 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f144:	2300      	movs	r3, #0
 800f146:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f148:	697b      	ldr	r3, [r7, #20]
	}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3728      	adds	r7, #40	; 0x28
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f152:	b580      	push	{r7, lr}
 800f154:	b08c      	sub	sp, #48	; 0x30
 800f156:	af04      	add	r7, sp, #16
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	60b9      	str	r1, [r7, #8]
 800f15c:	603b      	str	r3, [r7, #0]
 800f15e:	4613      	mov	r3, r2
 800f160:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f162:	88fb      	ldrh	r3, [r7, #6]
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	4618      	mov	r0, r3
 800f168:	f001 f876 	bl	8010258 <pvPortMalloc>
 800f16c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d00e      	beq.n	800f192 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f174:	2054      	movs	r0, #84	; 0x54
 800f176:	f001 f86f 	bl	8010258 <pvPortMalloc>
 800f17a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d003      	beq.n	800f18a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f182:	69fb      	ldr	r3, [r7, #28]
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	631a      	str	r2, [r3, #48]	; 0x30
 800f188:	e005      	b.n	800f196 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f18a:	6978      	ldr	r0, [r7, #20]
 800f18c:	f001 f930 	bl	80103f0 <vPortFree>
 800f190:	e001      	b.n	800f196 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f192:	2300      	movs	r3, #0
 800f194:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d017      	beq.n	800f1cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f1a4:	88fa      	ldrh	r2, [r7, #6]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	9303      	str	r3, [sp, #12]
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	9302      	str	r3, [sp, #8]
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	68b9      	ldr	r1, [r7, #8]
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f000 f80e 	bl	800f1dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1c0:	69f8      	ldr	r0, [r7, #28]
 800f1c2:	f000 f893 	bl	800f2ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	61bb      	str	r3, [r7, #24]
 800f1ca:	e002      	b.n	800f1d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f1d2:	69bb      	ldr	r3, [r7, #24]
	}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3720      	adds	r7, #32
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
 800f1e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	4413      	add	r3, r2
 800f1fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	f023 0307 	bic.w	r3, r3, #7
 800f202:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	f003 0307 	and.w	r3, r3, #7
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	617b      	str	r3, [r7, #20]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d01f      	beq.n	800f26a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f22a:	2300      	movs	r3, #0
 800f22c:	61fb      	str	r3, [r7, #28]
 800f22e:	e012      	b.n	800f256 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f230:	68ba      	ldr	r2, [r7, #8]
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	4413      	add	r3, r2
 800f236:	7819      	ldrb	r1, [r3, #0]
 800f238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	4413      	add	r3, r2
 800f23e:	3334      	adds	r3, #52	; 0x34
 800f240:	460a      	mov	r2, r1
 800f242:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	4413      	add	r3, r2
 800f24a:	781b      	ldrb	r3, [r3, #0]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d006      	beq.n	800f25e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	3301      	adds	r3, #1
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	2b0f      	cmp	r3, #15
 800f25a:	d9e9      	bls.n	800f230 <prvInitialiseNewTask+0x54>
 800f25c:	e000      	b.n	800f260 <prvInitialiseNewTask+0x84>
			{
				break;
 800f25e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f262:	2200      	movs	r2, #0
 800f264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f268:	e003      	b.n	800f272 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f274:	2b06      	cmp	r3, #6
 800f276:	d901      	bls.n	800f27c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f278:	2306      	movs	r3, #6
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f280:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f286:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	2200      	movs	r2, #0
 800f28c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	3304      	adds	r3, #4
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fb5f 	bl	800e956 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	3318      	adds	r3, #24
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff fb5a 	bl	800e956 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	f1c3 0207 	rsb	r2, r3, #7
 800f2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	68f9      	ldr	r1, [r7, #12]
 800f2ca:	69b8      	ldr	r0, [r7, #24]
 800f2cc:	f000 fdb4 	bl	800fe38 <pxPortInitialiseStack>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2e2:	bf00      	nop
 800f2e4:	3720      	adds	r7, #32
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f2f4:	f000 fece 	bl	8010094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f2f8:	4b2a      	ldr	r3, [pc, #168]	; (800f3a4 <prvAddNewTaskToReadyList+0xb8>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	4a29      	ldr	r2, [pc, #164]	; (800f3a4 <prvAddNewTaskToReadyList+0xb8>)
 800f300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f302:	4b29      	ldr	r3, [pc, #164]	; (800f3a8 <prvAddNewTaskToReadyList+0xbc>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d109      	bne.n	800f31e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f30a:	4a27      	ldr	r2, [pc, #156]	; (800f3a8 <prvAddNewTaskToReadyList+0xbc>)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f310:	4b24      	ldr	r3, [pc, #144]	; (800f3a4 <prvAddNewTaskToReadyList+0xb8>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d110      	bne.n	800f33a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f318:	f000 fbc6 	bl	800faa8 <prvInitialiseTaskLists>
 800f31c:	e00d      	b.n	800f33a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f31e:	4b23      	ldr	r3, [pc, #140]	; (800f3ac <prvAddNewTaskToReadyList+0xc0>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d109      	bne.n	800f33a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f326:	4b20      	ldr	r3, [pc, #128]	; (800f3a8 <prvAddNewTaskToReadyList+0xbc>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f330:	429a      	cmp	r2, r3
 800f332:	d802      	bhi.n	800f33a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f334:	4a1c      	ldr	r2, [pc, #112]	; (800f3a8 <prvAddNewTaskToReadyList+0xbc>)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f33a:	4b1d      	ldr	r3, [pc, #116]	; (800f3b0 <prvAddNewTaskToReadyList+0xc4>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3301      	adds	r3, #1
 800f340:	4a1b      	ldr	r2, [pc, #108]	; (800f3b0 <prvAddNewTaskToReadyList+0xc4>)
 800f342:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f348:	2201      	movs	r2, #1
 800f34a:	409a      	lsls	r2, r3
 800f34c:	4b19      	ldr	r3, [pc, #100]	; (800f3b4 <prvAddNewTaskToReadyList+0xc8>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4313      	orrs	r3, r2
 800f352:	4a18      	ldr	r2, [pc, #96]	; (800f3b4 <prvAddNewTaskToReadyList+0xc8>)
 800f354:	6013      	str	r3, [r2, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35a:	4613      	mov	r3, r2
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	4413      	add	r3, r2
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4a15      	ldr	r2, [pc, #84]	; (800f3b8 <prvAddNewTaskToReadyList+0xcc>)
 800f364:	441a      	add	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3304      	adds	r3, #4
 800f36a:	4619      	mov	r1, r3
 800f36c:	4610      	mov	r0, r2
 800f36e:	f7ff faff 	bl	800e970 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f372:	f000 febf 	bl	80100f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f376:	4b0d      	ldr	r3, [pc, #52]	; (800f3ac <prvAddNewTaskToReadyList+0xc0>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00e      	beq.n	800f39c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f37e:	4b0a      	ldr	r3, [pc, #40]	; (800f3a8 <prvAddNewTaskToReadyList+0xbc>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f388:	429a      	cmp	r2, r3
 800f38a:	d207      	bcs.n	800f39c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f38c:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <prvAddNewTaskToReadyList+0xd0>)
 800f38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f39c:	bf00      	nop
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	20002c1c 	.word	0x20002c1c
 800f3a8:	20002b1c 	.word	0x20002b1c
 800f3ac:	20002c28 	.word	0x20002c28
 800f3b0:	20002c38 	.word	0x20002c38
 800f3b4:	20002c24 	.word	0x20002c24
 800f3b8:	20002b20 	.word	0x20002b20
 800f3bc:	e000ed04 	.word	0xe000ed04

0800f3c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d017      	beq.n	800f402 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f3d2:	4b13      	ldr	r3, [pc, #76]	; (800f420 <vTaskDelay+0x60>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00a      	beq.n	800f3f0 <vTaskDelay+0x30>
	__asm volatile
 800f3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	60bb      	str	r3, [r7, #8]
}
 800f3ec:	bf00      	nop
 800f3ee:	e7fe      	b.n	800f3ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f3f0:	f000 f87a 	bl	800f4e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fcb8 	bl	800fd6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3fc:	f000 f882 	bl	800f504 <xTaskResumeAll>
 800f400:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d107      	bne.n	800f418 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f408:	4b06      	ldr	r3, [pc, #24]	; (800f424 <vTaskDelay+0x64>)
 800f40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f40e:	601a      	str	r2, [r3, #0]
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f418:	bf00      	nop
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	20002c44 	.word	0x20002c44
 800f424:	e000ed04 	.word	0xe000ed04

0800f428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	; 0x28
 800f42c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f42e:	2300      	movs	r3, #0
 800f430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f432:	2300      	movs	r3, #0
 800f434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f436:	463a      	mov	r2, r7
 800f438:	1d39      	adds	r1, r7, #4
 800f43a:	f107 0308 	add.w	r3, r7, #8
 800f43e:	4618      	mov	r0, r3
 800f440:	f7f1 f8d6 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	9202      	str	r2, [sp, #8]
 800f44c:	9301      	str	r3, [sp, #4]
 800f44e:	2300      	movs	r3, #0
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	2300      	movs	r3, #0
 800f454:	460a      	mov	r2, r1
 800f456:	491e      	ldr	r1, [pc, #120]	; (800f4d0 <vTaskStartScheduler+0xa8>)
 800f458:	481e      	ldr	r0, [pc, #120]	; (800f4d4 <vTaskStartScheduler+0xac>)
 800f45a:	f7ff fe1d 	bl	800f098 <xTaskCreateStatic>
 800f45e:	4603      	mov	r3, r0
 800f460:	4a1d      	ldr	r2, [pc, #116]	; (800f4d8 <vTaskStartScheduler+0xb0>)
 800f462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f464:	4b1c      	ldr	r3, [pc, #112]	; (800f4d8 <vTaskStartScheduler+0xb0>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f46c:	2301      	movs	r3, #1
 800f46e:	617b      	str	r3, [r7, #20]
 800f470:	e001      	b.n	800f476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f472:	2300      	movs	r3, #0
 800f474:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d116      	bne.n	800f4aa <vTaskStartScheduler+0x82>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	613b      	str	r3, [r7, #16]
}
 800f48e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f490:	4b12      	ldr	r3, [pc, #72]	; (800f4dc <vTaskStartScheduler+0xb4>)
 800f492:	f04f 32ff 	mov.w	r2, #4294967295
 800f496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f498:	4b11      	ldr	r3, [pc, #68]	; (800f4e0 <vTaskStartScheduler+0xb8>)
 800f49a:	2201      	movs	r2, #1
 800f49c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f49e:	4b11      	ldr	r3, [pc, #68]	; (800f4e4 <vTaskStartScheduler+0xbc>)
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f4a4:	f000 fd54 	bl	800ff50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f4a8:	e00e      	b.n	800f4c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b0:	d10a      	bne.n	800f4c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b6:	f383 8811 	msr	BASEPRI, r3
 800f4ba:	f3bf 8f6f 	isb	sy
 800f4be:	f3bf 8f4f 	dsb	sy
 800f4c2:	60fb      	str	r3, [r7, #12]
}
 800f4c4:	bf00      	nop
 800f4c6:	e7fe      	b.n	800f4c6 <vTaskStartScheduler+0x9e>
}
 800f4c8:	bf00      	nop
 800f4ca:	3718      	adds	r7, #24
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	080127e0 	.word	0x080127e0
 800f4d4:	0800fa79 	.word	0x0800fa79
 800f4d8:	20002c40 	.word	0x20002c40
 800f4dc:	20002c3c 	.word	0x20002c3c
 800f4e0:	20002c28 	.word	0x20002c28
 800f4e4:	20002c20 	.word	0x20002c20

0800f4e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f4ec:	4b04      	ldr	r3, [pc, #16]	; (800f500 <vTaskSuspendAll+0x18>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	4a03      	ldr	r2, [pc, #12]	; (800f500 <vTaskSuspendAll+0x18>)
 800f4f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f4f6:	bf00      	nop
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr
 800f500:	20002c44 	.word	0x20002c44

0800f504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f50e:	2300      	movs	r3, #0
 800f510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f512:	4b41      	ldr	r3, [pc, #260]	; (800f618 <xTaskResumeAll+0x114>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d10a      	bne.n	800f530 <xTaskResumeAll+0x2c>
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	603b      	str	r3, [r7, #0]
}
 800f52c:	bf00      	nop
 800f52e:	e7fe      	b.n	800f52e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f530:	f000 fdb0 	bl	8010094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f534:	4b38      	ldr	r3, [pc, #224]	; (800f618 <xTaskResumeAll+0x114>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	3b01      	subs	r3, #1
 800f53a:	4a37      	ldr	r2, [pc, #220]	; (800f618 <xTaskResumeAll+0x114>)
 800f53c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f53e:	4b36      	ldr	r3, [pc, #216]	; (800f618 <xTaskResumeAll+0x114>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d161      	bne.n	800f60a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f546:	4b35      	ldr	r3, [pc, #212]	; (800f61c <xTaskResumeAll+0x118>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d05d      	beq.n	800f60a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f54e:	e02e      	b.n	800f5ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f550:	4b33      	ldr	r3, [pc, #204]	; (800f620 <xTaskResumeAll+0x11c>)
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3318      	adds	r3, #24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fa64 	bl	800ea2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	3304      	adds	r3, #4
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff fa5f 	bl	800ea2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f570:	2201      	movs	r2, #1
 800f572:	409a      	lsls	r2, r3
 800f574:	4b2b      	ldr	r3, [pc, #172]	; (800f624 <xTaskResumeAll+0x120>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4313      	orrs	r3, r2
 800f57a:	4a2a      	ldr	r2, [pc, #168]	; (800f624 <xTaskResumeAll+0x120>)
 800f57c:	6013      	str	r3, [r2, #0]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f582:	4613      	mov	r3, r2
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4a27      	ldr	r2, [pc, #156]	; (800f628 <xTaskResumeAll+0x124>)
 800f58c:	441a      	add	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	3304      	adds	r3, #4
 800f592:	4619      	mov	r1, r3
 800f594:	4610      	mov	r0, r2
 800f596:	f7ff f9eb 	bl	800e970 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f59e:	4b23      	ldr	r3, [pc, #140]	; (800f62c <xTaskResumeAll+0x128>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d302      	bcc.n	800f5ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f5a8:	4b21      	ldr	r3, [pc, #132]	; (800f630 <xTaskResumeAll+0x12c>)
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f5ae:	4b1c      	ldr	r3, [pc, #112]	; (800f620 <xTaskResumeAll+0x11c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1cc      	bne.n	800f550 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f5bc:	f000 fb12 	bl	800fbe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f5c0:	4b1c      	ldr	r3, [pc, #112]	; (800f634 <xTaskResumeAll+0x130>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d010      	beq.n	800f5ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f5cc:	f000 f836 	bl	800f63c <xTaskIncrementTick>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d002      	beq.n	800f5dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f5d6:	4b16      	ldr	r3, [pc, #88]	; (800f630 <xTaskResumeAll+0x12c>)
 800f5d8:	2201      	movs	r2, #1
 800f5da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1f1      	bne.n	800f5cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f5e8:	4b12      	ldr	r3, [pc, #72]	; (800f634 <xTaskResumeAll+0x130>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f5ee:	4b10      	ldr	r3, [pc, #64]	; (800f630 <xTaskResumeAll+0x12c>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d009      	beq.n	800f60a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f5fa:	4b0f      	ldr	r3, [pc, #60]	; (800f638 <xTaskResumeAll+0x134>)
 800f5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f600:	601a      	str	r2, [r3, #0]
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f60a:	f000 fd73 	bl	80100f4 <vPortExitCritical>

	return xAlreadyYielded;
 800f60e:	68bb      	ldr	r3, [r7, #8]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3710      	adds	r7, #16
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	20002c44 	.word	0x20002c44
 800f61c:	20002c1c 	.word	0x20002c1c
 800f620:	20002bdc 	.word	0x20002bdc
 800f624:	20002c24 	.word	0x20002c24
 800f628:	20002b20 	.word	0x20002b20
 800f62c:	20002b1c 	.word	0x20002b1c
 800f630:	20002c30 	.word	0x20002c30
 800f634:	20002c2c 	.word	0x20002c2c
 800f638:	e000ed04 	.word	0xe000ed04

0800f63c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f642:	2300      	movs	r3, #0
 800f644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f646:	4b4e      	ldr	r3, [pc, #312]	; (800f780 <xTaskIncrementTick+0x144>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	f040 808e 	bne.w	800f76c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f650:	4b4c      	ldr	r3, [pc, #304]	; (800f784 <xTaskIncrementTick+0x148>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3301      	adds	r3, #1
 800f656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f658:	4a4a      	ldr	r2, [pc, #296]	; (800f784 <xTaskIncrementTick+0x148>)
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f65e:	693b      	ldr	r3, [r7, #16]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d120      	bne.n	800f6a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f664:	4b48      	ldr	r3, [pc, #288]	; (800f788 <xTaskIncrementTick+0x14c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00a      	beq.n	800f684 <xTaskIncrementTick+0x48>
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	603b      	str	r3, [r7, #0]
}
 800f680:	bf00      	nop
 800f682:	e7fe      	b.n	800f682 <xTaskIncrementTick+0x46>
 800f684:	4b40      	ldr	r3, [pc, #256]	; (800f788 <xTaskIncrementTick+0x14c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	4b40      	ldr	r3, [pc, #256]	; (800f78c <xTaskIncrementTick+0x150>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a3e      	ldr	r2, [pc, #248]	; (800f788 <xTaskIncrementTick+0x14c>)
 800f690:	6013      	str	r3, [r2, #0]
 800f692:	4a3e      	ldr	r2, [pc, #248]	; (800f78c <xTaskIncrementTick+0x150>)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	4b3d      	ldr	r3, [pc, #244]	; (800f790 <xTaskIncrementTick+0x154>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	3301      	adds	r3, #1
 800f69e:	4a3c      	ldr	r2, [pc, #240]	; (800f790 <xTaskIncrementTick+0x154>)
 800f6a0:	6013      	str	r3, [r2, #0]
 800f6a2:	f000 fa9f 	bl	800fbe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6a6:	4b3b      	ldr	r3, [pc, #236]	; (800f794 <xTaskIncrementTick+0x158>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	693a      	ldr	r2, [r7, #16]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d348      	bcc.n	800f742 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6b0:	4b35      	ldr	r3, [pc, #212]	; (800f788 <xTaskIncrementTick+0x14c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d104      	bne.n	800f6c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ba:	4b36      	ldr	r3, [pc, #216]	; (800f794 <xTaskIncrementTick+0x158>)
 800f6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c0:	601a      	str	r2, [r3, #0]
					break;
 800f6c2:	e03e      	b.n	800f742 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c4:	4b30      	ldr	r3, [pc, #192]	; (800f788 <xTaskIncrementTick+0x14c>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6d4:	693a      	ldr	r2, [r7, #16]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d203      	bcs.n	800f6e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f6dc:	4a2d      	ldr	r2, [pc, #180]	; (800f794 <xTaskIncrementTick+0x158>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f6e2:	e02e      	b.n	800f742 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff f99e 	bl	800ea2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d004      	beq.n	800f700 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3318      	adds	r3, #24
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7ff f995 	bl	800ea2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f704:	2201      	movs	r2, #1
 800f706:	409a      	lsls	r2, r3
 800f708:	4b23      	ldr	r3, [pc, #140]	; (800f798 <xTaskIncrementTick+0x15c>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	4a22      	ldr	r2, [pc, #136]	; (800f798 <xTaskIncrementTick+0x15c>)
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f716:	4613      	mov	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	4a1f      	ldr	r2, [pc, #124]	; (800f79c <xTaskIncrementTick+0x160>)
 800f720:	441a      	add	r2, r3
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	3304      	adds	r3, #4
 800f726:	4619      	mov	r1, r3
 800f728:	4610      	mov	r0, r2
 800f72a:	f7ff f921 	bl	800e970 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f732:	4b1b      	ldr	r3, [pc, #108]	; (800f7a0 <xTaskIncrementTick+0x164>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f738:	429a      	cmp	r2, r3
 800f73a:	d3b9      	bcc.n	800f6b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f73c:	2301      	movs	r3, #1
 800f73e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f740:	e7b6      	b.n	800f6b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f742:	4b17      	ldr	r3, [pc, #92]	; (800f7a0 <xTaskIncrementTick+0x164>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f748:	4914      	ldr	r1, [pc, #80]	; (800f79c <xTaskIncrementTick+0x160>)
 800f74a:	4613      	mov	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	4413      	add	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	440b      	add	r3, r1
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d901      	bls.n	800f75e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f75a:	2301      	movs	r3, #1
 800f75c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f75e:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <xTaskIncrementTick+0x168>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f766:	2301      	movs	r3, #1
 800f768:	617b      	str	r3, [r7, #20]
 800f76a:	e004      	b.n	800f776 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f76c:	4b0e      	ldr	r3, [pc, #56]	; (800f7a8 <xTaskIncrementTick+0x16c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3301      	adds	r3, #1
 800f772:	4a0d      	ldr	r2, [pc, #52]	; (800f7a8 <xTaskIncrementTick+0x16c>)
 800f774:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f776:	697b      	ldr	r3, [r7, #20]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	20002c44 	.word	0x20002c44
 800f784:	20002c20 	.word	0x20002c20
 800f788:	20002bd4 	.word	0x20002bd4
 800f78c:	20002bd8 	.word	0x20002bd8
 800f790:	20002c34 	.word	0x20002c34
 800f794:	20002c3c 	.word	0x20002c3c
 800f798:	20002c24 	.word	0x20002c24
 800f79c:	20002b20 	.word	0x20002b20
 800f7a0:	20002b1c 	.word	0x20002b1c
 800f7a4:	20002c30 	.word	0x20002c30
 800f7a8:	20002c2c 	.word	0x20002c2c

0800f7ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b087      	sub	sp, #28
 800f7b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7b2:	4b27      	ldr	r3, [pc, #156]	; (800f850 <vTaskSwitchContext+0xa4>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d003      	beq.n	800f7c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f7ba:	4b26      	ldr	r3, [pc, #152]	; (800f854 <vTaskSwitchContext+0xa8>)
 800f7bc:	2201      	movs	r2, #1
 800f7be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f7c0:	e03f      	b.n	800f842 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f7c2:	4b24      	ldr	r3, [pc, #144]	; (800f854 <vTaskSwitchContext+0xa8>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7c8:	4b23      	ldr	r3, [pc, #140]	; (800f858 <vTaskSwitchContext+0xac>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	fab3 f383 	clz	r3, r3
 800f7d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f7d6:	7afb      	ldrb	r3, [r7, #11]
 800f7d8:	f1c3 031f 	rsb	r3, r3, #31
 800f7dc:	617b      	str	r3, [r7, #20]
 800f7de:	491f      	ldr	r1, [pc, #124]	; (800f85c <vTaskSwitchContext+0xb0>)
 800f7e0:	697a      	ldr	r2, [r7, #20]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	4413      	add	r3, r2
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	440b      	add	r3, r1
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d10a      	bne.n	800f808 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f6:	f383 8811 	msr	BASEPRI, r3
 800f7fa:	f3bf 8f6f 	isb	sy
 800f7fe:	f3bf 8f4f 	dsb	sy
 800f802:	607b      	str	r3, [r7, #4]
}
 800f804:	bf00      	nop
 800f806:	e7fe      	b.n	800f806 <vTaskSwitchContext+0x5a>
 800f808:	697a      	ldr	r2, [r7, #20]
 800f80a:	4613      	mov	r3, r2
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	4413      	add	r3, r2
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	4a12      	ldr	r2, [pc, #72]	; (800f85c <vTaskSwitchContext+0xb0>)
 800f814:	4413      	add	r3, r2
 800f816:	613b      	str	r3, [r7, #16]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	685b      	ldr	r3, [r3, #4]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	605a      	str	r2, [r3, #4]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	685a      	ldr	r2, [r3, #4]
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	3308      	adds	r3, #8
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d104      	bne.n	800f838 <vTaskSwitchContext+0x8c>
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	605a      	str	r2, [r3, #4]
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	4a08      	ldr	r2, [pc, #32]	; (800f860 <vTaskSwitchContext+0xb4>)
 800f840:	6013      	str	r3, [r2, #0]
}
 800f842:	bf00      	nop
 800f844:	371c      	adds	r7, #28
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	20002c44 	.word	0x20002c44
 800f854:	20002c30 	.word	0x20002c30
 800f858:	20002c24 	.word	0x20002c24
 800f85c:	20002b20 	.word	0x20002b20
 800f860:	20002b1c 	.word	0x20002b1c

0800f864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10a      	bne.n	800f88a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	60fb      	str	r3, [r7, #12]
}
 800f886:	bf00      	nop
 800f888:	e7fe      	b.n	800f888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f88a:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <vTaskPlaceOnEventList+0x44>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	3318      	adds	r3, #24
 800f890:	4619      	mov	r1, r3
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7ff f890 	bl	800e9b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f898:	2101      	movs	r1, #1
 800f89a:	6838      	ldr	r0, [r7, #0]
 800f89c:	f000 fa66 	bl	800fd6c <prvAddCurrentTaskToDelayedList>
}
 800f8a0:	bf00      	nop
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	20002b1c 	.word	0x20002b1c

0800f8ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d10a      	bne.n	800f8d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	60fb      	str	r3, [r7, #12]
}
 800f8d4:	bf00      	nop
 800f8d6:	e7fe      	b.n	800f8d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	3318      	adds	r3, #24
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff f8a4 	bl	800ea2a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8e2:	4b1d      	ldr	r3, [pc, #116]	; (800f958 <xTaskRemoveFromEventList+0xac>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d11c      	bne.n	800f924 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7ff f89b 	bl	800ea2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	409a      	lsls	r2, r3
 800f8fc:	4b17      	ldr	r3, [pc, #92]	; (800f95c <xTaskRemoveFromEventList+0xb0>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4313      	orrs	r3, r2
 800f902:	4a16      	ldr	r2, [pc, #88]	; (800f95c <xTaskRemoveFromEventList+0xb0>)
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90a:	4613      	mov	r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	4413      	add	r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4a13      	ldr	r2, [pc, #76]	; (800f960 <xTaskRemoveFromEventList+0xb4>)
 800f914:	441a      	add	r2, r3
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	3304      	adds	r3, #4
 800f91a:	4619      	mov	r1, r3
 800f91c:	4610      	mov	r0, r2
 800f91e:	f7ff f827 	bl	800e970 <vListInsertEnd>
 800f922:	e005      	b.n	800f930 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	3318      	adds	r3, #24
 800f928:	4619      	mov	r1, r3
 800f92a:	480e      	ldr	r0, [pc, #56]	; (800f964 <xTaskRemoveFromEventList+0xb8>)
 800f92c:	f7ff f820 	bl	800e970 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f934:	4b0c      	ldr	r3, [pc, #48]	; (800f968 <xTaskRemoveFromEventList+0xbc>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d905      	bls.n	800f94a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f93e:	2301      	movs	r3, #1
 800f940:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f942:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <xTaskRemoveFromEventList+0xc0>)
 800f944:	2201      	movs	r2, #1
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	e001      	b.n	800f94e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f94a:	2300      	movs	r3, #0
 800f94c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f94e:	697b      	ldr	r3, [r7, #20]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20002c44 	.word	0x20002c44
 800f95c:	20002c24 	.word	0x20002c24
 800f960:	20002b20 	.word	0x20002b20
 800f964:	20002bdc 	.word	0x20002bdc
 800f968:	20002b1c 	.word	0x20002b1c
 800f96c:	20002c30 	.word	0x20002c30

0800f970 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f978:	4b06      	ldr	r3, [pc, #24]	; (800f994 <vTaskInternalSetTimeOutState+0x24>)
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f980:	4b05      	ldr	r3, [pc, #20]	; (800f998 <vTaskInternalSetTimeOutState+0x28>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	605a      	str	r2, [r3, #4]
}
 800f988:	bf00      	nop
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	20002c34 	.word	0x20002c34
 800f998:	20002c20 	.word	0x20002c20

0800f99c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b088      	sub	sp, #32
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10a      	bne.n	800f9c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	613b      	str	r3, [r7, #16]
}
 800f9be:	bf00      	nop
 800f9c0:	e7fe      	b.n	800f9c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d10a      	bne.n	800f9de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	60fb      	str	r3, [r7, #12]
}
 800f9da:	bf00      	nop
 800f9dc:	e7fe      	b.n	800f9dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f9de:	f000 fb59 	bl	8010094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f9e2:	4b1d      	ldr	r3, [pc, #116]	; (800fa58 <xTaskCheckForTimeOut+0xbc>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	69ba      	ldr	r2, [r7, #24]
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fa:	d102      	bne.n	800fa02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	61fb      	str	r3, [r7, #28]
 800fa00:	e023      	b.n	800fa4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	4b15      	ldr	r3, [pc, #84]	; (800fa5c <xTaskCheckForTimeOut+0xc0>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d007      	beq.n	800fa1e <xTaskCheckForTimeOut+0x82>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	69ba      	ldr	r2, [r7, #24]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d302      	bcc.n	800fa1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	61fb      	str	r3, [r7, #28]
 800fa1c:	e015      	b.n	800fa4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	697a      	ldr	r2, [r7, #20]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d20b      	bcs.n	800fa40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7ff ff9b 	bl	800f970 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	61fb      	str	r3, [r7, #28]
 800fa3e:	e004      	b.n	800fa4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	2200      	movs	r2, #0
 800fa44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fa46:	2301      	movs	r3, #1
 800fa48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fa4a:	f000 fb53 	bl	80100f4 <vPortExitCritical>

	return xReturn;
 800fa4e:	69fb      	ldr	r3, [r7, #28]
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3720      	adds	r7, #32
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20002c20 	.word	0x20002c20
 800fa5c:	20002c34 	.word	0x20002c34

0800fa60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fa60:	b480      	push	{r7}
 800fa62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fa64:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <vTaskMissedYield+0x14>)
 800fa66:	2201      	movs	r2, #1
 800fa68:	601a      	str	r2, [r3, #0]
}
 800fa6a:	bf00      	nop
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	20002c30 	.word	0x20002c30

0800fa78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fa80:	f000 f852 	bl	800fb28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fa84:	4b06      	ldr	r3, [pc, #24]	; (800faa0 <prvIdleTask+0x28>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d9f9      	bls.n	800fa80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fa8c:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <prvIdleTask+0x2c>)
 800fa8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fa9c:	e7f0      	b.n	800fa80 <prvIdleTask+0x8>
 800fa9e:	bf00      	nop
 800faa0:	20002b20 	.word	0x20002b20
 800faa4:	e000ed04 	.word	0xe000ed04

0800faa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800faae:	2300      	movs	r3, #0
 800fab0:	607b      	str	r3, [r7, #4]
 800fab2:	e00c      	b.n	800face <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	4613      	mov	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	4413      	add	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	4a12      	ldr	r2, [pc, #72]	; (800fb08 <prvInitialiseTaskLists+0x60>)
 800fac0:	4413      	add	r3, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe ff27 	bl	800e916 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	3301      	adds	r3, #1
 800facc:	607b      	str	r3, [r7, #4]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b06      	cmp	r3, #6
 800fad2:	d9ef      	bls.n	800fab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fad4:	480d      	ldr	r0, [pc, #52]	; (800fb0c <prvInitialiseTaskLists+0x64>)
 800fad6:	f7fe ff1e 	bl	800e916 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fada:	480d      	ldr	r0, [pc, #52]	; (800fb10 <prvInitialiseTaskLists+0x68>)
 800fadc:	f7fe ff1b 	bl	800e916 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fae0:	480c      	ldr	r0, [pc, #48]	; (800fb14 <prvInitialiseTaskLists+0x6c>)
 800fae2:	f7fe ff18 	bl	800e916 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fae6:	480c      	ldr	r0, [pc, #48]	; (800fb18 <prvInitialiseTaskLists+0x70>)
 800fae8:	f7fe ff15 	bl	800e916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800faec:	480b      	ldr	r0, [pc, #44]	; (800fb1c <prvInitialiseTaskLists+0x74>)
 800faee:	f7fe ff12 	bl	800e916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800faf2:	4b0b      	ldr	r3, [pc, #44]	; (800fb20 <prvInitialiseTaskLists+0x78>)
 800faf4:	4a05      	ldr	r2, [pc, #20]	; (800fb0c <prvInitialiseTaskLists+0x64>)
 800faf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800faf8:	4b0a      	ldr	r3, [pc, #40]	; (800fb24 <prvInitialiseTaskLists+0x7c>)
 800fafa:	4a05      	ldr	r2, [pc, #20]	; (800fb10 <prvInitialiseTaskLists+0x68>)
 800fafc:	601a      	str	r2, [r3, #0]
}
 800fafe:	bf00      	nop
 800fb00:	3708      	adds	r7, #8
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	20002b20 	.word	0x20002b20
 800fb0c:	20002bac 	.word	0x20002bac
 800fb10:	20002bc0 	.word	0x20002bc0
 800fb14:	20002bdc 	.word	0x20002bdc
 800fb18:	20002bf0 	.word	0x20002bf0
 800fb1c:	20002c08 	.word	0x20002c08
 800fb20:	20002bd4 	.word	0x20002bd4
 800fb24:	20002bd8 	.word	0x20002bd8

0800fb28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb2e:	e019      	b.n	800fb64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fb30:	f000 fab0 	bl	8010094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb34:	4b10      	ldr	r3, [pc, #64]	; (800fb78 <prvCheckTasksWaitingTermination+0x50>)
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	3304      	adds	r3, #4
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe ff72 	bl	800ea2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb46:	4b0d      	ldr	r3, [pc, #52]	; (800fb7c <prvCheckTasksWaitingTermination+0x54>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	4a0b      	ldr	r2, [pc, #44]	; (800fb7c <prvCheckTasksWaitingTermination+0x54>)
 800fb4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb50:	4b0b      	ldr	r3, [pc, #44]	; (800fb80 <prvCheckTasksWaitingTermination+0x58>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	4a0a      	ldr	r2, [pc, #40]	; (800fb80 <prvCheckTasksWaitingTermination+0x58>)
 800fb58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fb5a:	f000 facb 	bl	80100f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f810 	bl	800fb84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <prvCheckTasksWaitingTermination+0x58>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1e1      	bne.n	800fb30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fb6c:	bf00      	nop
 800fb6e:	bf00      	nop
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20002bf0 	.word	0x20002bf0
 800fb7c:	20002c1c 	.word	0x20002c1c
 800fb80:	20002c04 	.word	0x20002c04

0800fb84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d108      	bne.n	800fba8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 fc28 	bl	80103f0 <vPortFree>
				vPortFree( pxTCB );
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fc25 	bl	80103f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fba6:	e018      	b.n	800fbda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d103      	bne.n	800fbba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc1c 	bl	80103f0 <vPortFree>
	}
 800fbb8:	e00f      	b.n	800fbda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d00a      	beq.n	800fbda <prvDeleteTCB+0x56>
	__asm volatile
 800fbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc8:	f383 8811 	msr	BASEPRI, r3
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f3bf 8f4f 	dsb	sy
 800fbd4:	60fb      	str	r3, [r7, #12]
}
 800fbd6:	bf00      	nop
 800fbd8:	e7fe      	b.n	800fbd8 <prvDeleteTCB+0x54>
	}
 800fbda:	bf00      	nop
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbea:	4b0c      	ldr	r3, [pc, #48]	; (800fc1c <prvResetNextTaskUnblockTime+0x38>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d104      	bne.n	800fbfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fbf4:	4b0a      	ldr	r3, [pc, #40]	; (800fc20 <prvResetNextTaskUnblockTime+0x3c>)
 800fbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fbfc:	e008      	b.n	800fc10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbfe:	4b07      	ldr	r3, [pc, #28]	; (800fc1c <prvResetNextTaskUnblockTime+0x38>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4a04      	ldr	r2, [pc, #16]	; (800fc20 <prvResetNextTaskUnblockTime+0x3c>)
 800fc0e:	6013      	str	r3, [r2, #0]
}
 800fc10:	bf00      	nop
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr
 800fc1c:	20002bd4 	.word	0x20002bd4
 800fc20:	20002c3c 	.word	0x20002c3c

0800fc24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <xTaskGetSchedulerState+0x34>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d102      	bne.n	800fc38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc32:	2301      	movs	r3, #1
 800fc34:	607b      	str	r3, [r7, #4]
 800fc36:	e008      	b.n	800fc4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc38:	4b08      	ldr	r3, [pc, #32]	; (800fc5c <xTaskGetSchedulerState+0x38>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d102      	bne.n	800fc46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fc40:	2302      	movs	r3, #2
 800fc42:	607b      	str	r3, [r7, #4]
 800fc44:	e001      	b.n	800fc4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc46:	2300      	movs	r3, #0
 800fc48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fc4a:	687b      	ldr	r3, [r7, #4]
	}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	20002c28 	.word	0x20002c28
 800fc5c:	20002c44 	.word	0x20002c44

0800fc60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d06e      	beq.n	800fd54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fc76:	4b3a      	ldr	r3, [pc, #232]	; (800fd60 <xTaskPriorityDisinherit+0x100>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d00a      	beq.n	800fc96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	60fb      	str	r3, [r7, #12]
}
 800fc92:	bf00      	nop
 800fc94:	e7fe      	b.n	800fc94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d10a      	bne.n	800fcb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	60bb      	str	r3, [r7, #8]
}
 800fcb0:	bf00      	nop
 800fcb2:	e7fe      	b.n	800fcb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcb8:	1e5a      	subs	r2, r3, #1
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d044      	beq.n	800fd54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d140      	bne.n	800fd54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	3304      	adds	r3, #4
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fe fea7 	bl	800ea2a <uxListRemove>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d115      	bne.n	800fd0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce6:	491f      	ldr	r1, [pc, #124]	; (800fd64 <xTaskPriorityDisinherit+0x104>)
 800fce8:	4613      	mov	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	440b      	add	r3, r1
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d10a      	bne.n	800fd0e <xTaskPriorityDisinherit+0xae>
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	fa02 f303 	lsl.w	r3, r2, r3
 800fd02:	43da      	mvns	r2, r3
 800fd04:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <xTaskPriorityDisinherit+0x108>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4013      	ands	r3, r2
 800fd0a:	4a17      	ldr	r2, [pc, #92]	; (800fd68 <xTaskPriorityDisinherit+0x108>)
 800fd0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1a:	f1c3 0207 	rsb	r2, r3, #7
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd26:	2201      	movs	r2, #1
 800fd28:	409a      	lsls	r2, r3
 800fd2a:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <xTaskPriorityDisinherit+0x108>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	4a0d      	ldr	r2, [pc, #52]	; (800fd68 <xTaskPriorityDisinherit+0x108>)
 800fd32:	6013      	str	r3, [r2, #0]
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd38:	4613      	mov	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4413      	add	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	4a08      	ldr	r2, [pc, #32]	; (800fd64 <xTaskPriorityDisinherit+0x104>)
 800fd42:	441a      	add	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	3304      	adds	r3, #4
 800fd48:	4619      	mov	r1, r3
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	f7fe fe10 	bl	800e970 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fd50:	2301      	movs	r3, #1
 800fd52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd54:	697b      	ldr	r3, [r7, #20]
	}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3718      	adds	r7, #24
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20002b1c 	.word	0x20002b1c
 800fd64:	20002b20 	.word	0x20002b20
 800fd68:	20002c24 	.word	0x20002c24

0800fd6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd76:	4b29      	ldr	r3, [pc, #164]	; (800fe1c <prvAddCurrentTaskToDelayedList+0xb0>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd7c:	4b28      	ldr	r3, [pc, #160]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3304      	adds	r3, #4
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fe51 	bl	800ea2a <uxListRemove>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10b      	bne.n	800fda6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fd8e:	4b24      	ldr	r3, [pc, #144]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd94:	2201      	movs	r2, #1
 800fd96:	fa02 f303 	lsl.w	r3, r2, r3
 800fd9a:	43da      	mvns	r2, r3
 800fd9c:	4b21      	ldr	r3, [pc, #132]	; (800fe24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4013      	ands	r3, r2
 800fda2:	4a20      	ldr	r2, [pc, #128]	; (800fe24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fda4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdac:	d10a      	bne.n	800fdc4 <prvAddCurrentTaskToDelayedList+0x58>
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d007      	beq.n	800fdc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdb4:	4b1a      	ldr	r3, [pc, #104]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	4619      	mov	r1, r3
 800fdbc:	481a      	ldr	r0, [pc, #104]	; (800fe28 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fdbe:	f7fe fdd7 	bl	800e970 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fdc2:	e026      	b.n	800fe12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4413      	add	r3, r2
 800fdca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fdcc:	4b14      	ldr	r3, [pc, #80]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68ba      	ldr	r2, [r7, #8]
 800fdd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d209      	bcs.n	800fdf0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fddc:	4b13      	ldr	r3, [pc, #76]	; (800fe2c <prvAddCurrentTaskToDelayedList+0xc0>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	4b0f      	ldr	r3, [pc, #60]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	3304      	adds	r3, #4
 800fde6:	4619      	mov	r1, r3
 800fde8:	4610      	mov	r0, r2
 800fdea:	f7fe fde5 	bl	800e9b8 <vListInsert>
}
 800fdee:	e010      	b.n	800fe12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdf0:	4b0f      	ldr	r3, [pc, #60]	; (800fe30 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	4b0a      	ldr	r3, [pc, #40]	; (800fe20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	3304      	adds	r3, #4
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	f7fe fddb 	bl	800e9b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fe02:	4b0c      	ldr	r3, [pc, #48]	; (800fe34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d202      	bcs.n	800fe12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fe0c:	4a09      	ldr	r2, [pc, #36]	; (800fe34 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	6013      	str	r3, [r2, #0]
}
 800fe12:	bf00      	nop
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20002c20 	.word	0x20002c20
 800fe20:	20002b1c 	.word	0x20002b1c
 800fe24:	20002c24 	.word	0x20002c24
 800fe28:	20002c08 	.word	0x20002c08
 800fe2c:	20002bd8 	.word	0x20002bd8
 800fe30:	20002bd4 	.word	0x20002bd4
 800fe34:	20002c3c 	.word	0x20002c3c

0800fe38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	3b04      	subs	r3, #4
 800fe48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	3b04      	subs	r3, #4
 800fe56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	f023 0201 	bic.w	r2, r3, #1
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3b04      	subs	r3, #4
 800fe66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe68:	4a0c      	ldr	r2, [pc, #48]	; (800fe9c <pxPortInitialiseStack+0x64>)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	3b14      	subs	r3, #20
 800fe72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	3b04      	subs	r3, #4
 800fe7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f06f 0202 	mvn.w	r2, #2
 800fe86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	3b20      	subs	r3, #32
 800fe8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3714      	adds	r7, #20
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	0800fea1 	.word	0x0800fea1

0800fea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fea0:	b480      	push	{r7}
 800fea2:	b085      	sub	sp, #20
 800fea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800feaa:	4b12      	ldr	r3, [pc, #72]	; (800fef4 <prvTaskExitError+0x54>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb2:	d00a      	beq.n	800feca <prvTaskExitError+0x2a>
	__asm volatile
 800feb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	60fb      	str	r3, [r7, #12]
}
 800fec6:	bf00      	nop
 800fec8:	e7fe      	b.n	800fec8 <prvTaskExitError+0x28>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	60bb      	str	r3, [r7, #8]
}
 800fedc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fede:	bf00      	nop
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d0fc      	beq.n	800fee0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fee6:	bf00      	nop
 800fee8:	bf00      	nop
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	20000098 	.word	0x20000098
	...

0800ff00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ff00:	4b07      	ldr	r3, [pc, #28]	; (800ff20 <pxCurrentTCBConst2>)
 800ff02:	6819      	ldr	r1, [r3, #0]
 800ff04:	6808      	ldr	r0, [r1, #0]
 800ff06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff0a:	f380 8809 	msr	PSP, r0
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f04f 0000 	mov.w	r0, #0
 800ff16:	f380 8811 	msr	BASEPRI, r0
 800ff1a:	4770      	bx	lr
 800ff1c:	f3af 8000 	nop.w

0800ff20 <pxCurrentTCBConst2>:
 800ff20:	20002b1c 	.word	0x20002b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ff24:	bf00      	nop
 800ff26:	bf00      	nop

0800ff28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ff28:	4808      	ldr	r0, [pc, #32]	; (800ff4c <prvPortStartFirstTask+0x24>)
 800ff2a:	6800      	ldr	r0, [r0, #0]
 800ff2c:	6800      	ldr	r0, [r0, #0]
 800ff2e:	f380 8808 	msr	MSP, r0
 800ff32:	f04f 0000 	mov.w	r0, #0
 800ff36:	f380 8814 	msr	CONTROL, r0
 800ff3a:	b662      	cpsie	i
 800ff3c:	b661      	cpsie	f
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	f3bf 8f6f 	isb	sy
 800ff46:	df00      	svc	0
 800ff48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ff4a:	bf00      	nop
 800ff4c:	e000ed08 	.word	0xe000ed08

0800ff50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ff56:	4b46      	ldr	r3, [pc, #280]	; (8010070 <xPortStartScheduler+0x120>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4a46      	ldr	r2, [pc, #280]	; (8010074 <xPortStartScheduler+0x124>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d10a      	bne.n	800ff76 <xPortStartScheduler+0x26>
	__asm volatile
 800ff60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff64:	f383 8811 	msr	BASEPRI, r3
 800ff68:	f3bf 8f6f 	isb	sy
 800ff6c:	f3bf 8f4f 	dsb	sy
 800ff70:	613b      	str	r3, [r7, #16]
}
 800ff72:	bf00      	nop
 800ff74:	e7fe      	b.n	800ff74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ff76:	4b3e      	ldr	r3, [pc, #248]	; (8010070 <xPortStartScheduler+0x120>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a3f      	ldr	r2, [pc, #252]	; (8010078 <xPortStartScheduler+0x128>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d10a      	bne.n	800ff96 <xPortStartScheduler+0x46>
	__asm volatile
 800ff80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff84:	f383 8811 	msr	BASEPRI, r3
 800ff88:	f3bf 8f6f 	isb	sy
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	60fb      	str	r3, [r7, #12]
}
 800ff92:	bf00      	nop
 800ff94:	e7fe      	b.n	800ff94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff96:	4b39      	ldr	r3, [pc, #228]	; (801007c <xPortStartScheduler+0x12c>)
 800ff98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	22ff      	movs	r2, #255	; 0xff
 800ffa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ffb0:	78fb      	ldrb	r3, [r7, #3]
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffb8:	b2da      	uxtb	r2, r3
 800ffba:	4b31      	ldr	r3, [pc, #196]	; (8010080 <xPortStartScheduler+0x130>)
 800ffbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ffbe:	4b31      	ldr	r3, [pc, #196]	; (8010084 <xPortStartScheduler+0x134>)
 800ffc0:	2207      	movs	r2, #7
 800ffc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffc4:	e009      	b.n	800ffda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ffc6:	4b2f      	ldr	r3, [pc, #188]	; (8010084 <xPortStartScheduler+0x134>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	4a2d      	ldr	r2, [pc, #180]	; (8010084 <xPortStartScheduler+0x134>)
 800ffce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ffd0:	78fb      	ldrb	r3, [r7, #3]
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	005b      	lsls	r3, r3, #1
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ffda:	78fb      	ldrb	r3, [r7, #3]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ffe2:	2b80      	cmp	r3, #128	; 0x80
 800ffe4:	d0ef      	beq.n	800ffc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ffe6:	4b27      	ldr	r3, [pc, #156]	; (8010084 <xPortStartScheduler+0x134>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f1c3 0307 	rsb	r3, r3, #7
 800ffee:	2b04      	cmp	r3, #4
 800fff0:	d00a      	beq.n	8010008 <xPortStartScheduler+0xb8>
	__asm volatile
 800fff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff6:	f383 8811 	msr	BASEPRI, r3
 800fffa:	f3bf 8f6f 	isb	sy
 800fffe:	f3bf 8f4f 	dsb	sy
 8010002:	60bb      	str	r3, [r7, #8]
}
 8010004:	bf00      	nop
 8010006:	e7fe      	b.n	8010006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010008:	4b1e      	ldr	r3, [pc, #120]	; (8010084 <xPortStartScheduler+0x134>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	021b      	lsls	r3, r3, #8
 801000e:	4a1d      	ldr	r2, [pc, #116]	; (8010084 <xPortStartScheduler+0x134>)
 8010010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010012:	4b1c      	ldr	r3, [pc, #112]	; (8010084 <xPortStartScheduler+0x134>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801001a:	4a1a      	ldr	r2, [pc, #104]	; (8010084 <xPortStartScheduler+0x134>)
 801001c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	b2da      	uxtb	r2, r3
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010026:	4b18      	ldr	r3, [pc, #96]	; (8010088 <xPortStartScheduler+0x138>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a17      	ldr	r2, [pc, #92]	; (8010088 <xPortStartScheduler+0x138>)
 801002c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010032:	4b15      	ldr	r3, [pc, #84]	; (8010088 <xPortStartScheduler+0x138>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a14      	ldr	r2, [pc, #80]	; (8010088 <xPortStartScheduler+0x138>)
 8010038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801003c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801003e:	f000 f8dd 	bl	80101fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010042:	4b12      	ldr	r3, [pc, #72]	; (801008c <xPortStartScheduler+0x13c>)
 8010044:	2200      	movs	r2, #0
 8010046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010048:	f000 f8fc 	bl	8010244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801004c:	4b10      	ldr	r3, [pc, #64]	; (8010090 <xPortStartScheduler+0x140>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a0f      	ldr	r2, [pc, #60]	; (8010090 <xPortStartScheduler+0x140>)
 8010052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010058:	f7ff ff66 	bl	800ff28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801005c:	f7ff fba6 	bl	800f7ac <vTaskSwitchContext>
	prvTaskExitError();
 8010060:	f7ff ff1e 	bl	800fea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	e000ed00 	.word	0xe000ed00
 8010074:	410fc271 	.word	0x410fc271
 8010078:	410fc270 	.word	0x410fc270
 801007c:	e000e400 	.word	0xe000e400
 8010080:	20002c48 	.word	0x20002c48
 8010084:	20002c4c 	.word	0x20002c4c
 8010088:	e000ed20 	.word	0xe000ed20
 801008c:	20000098 	.word	0x20000098
 8010090:	e000ef34 	.word	0xe000ef34

08010094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	607b      	str	r3, [r7, #4]
}
 80100ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80100ae:	4b0f      	ldr	r3, [pc, #60]	; (80100ec <vPortEnterCritical+0x58>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	3301      	adds	r3, #1
 80100b4:	4a0d      	ldr	r2, [pc, #52]	; (80100ec <vPortEnterCritical+0x58>)
 80100b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80100b8:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <vPortEnterCritical+0x58>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d10f      	bne.n	80100e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80100c0:	4b0b      	ldr	r3, [pc, #44]	; (80100f0 <vPortEnterCritical+0x5c>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00a      	beq.n	80100e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80100ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	603b      	str	r3, [r7, #0]
}
 80100dc:	bf00      	nop
 80100de:	e7fe      	b.n	80100de <vPortEnterCritical+0x4a>
	}
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr
 80100ec:	20000098 	.word	0x20000098
 80100f0:	e000ed04 	.word	0xe000ed04

080100f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80100fa:	4b12      	ldr	r3, [pc, #72]	; (8010144 <vPortExitCritical+0x50>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d10a      	bne.n	8010118 <vPortExitCritical+0x24>
	__asm volatile
 8010102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010106:	f383 8811 	msr	BASEPRI, r3
 801010a:	f3bf 8f6f 	isb	sy
 801010e:	f3bf 8f4f 	dsb	sy
 8010112:	607b      	str	r3, [r7, #4]
}
 8010114:	bf00      	nop
 8010116:	e7fe      	b.n	8010116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <vPortExitCritical+0x50>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	3b01      	subs	r3, #1
 801011e:	4a09      	ldr	r2, [pc, #36]	; (8010144 <vPortExitCritical+0x50>)
 8010120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010122:	4b08      	ldr	r3, [pc, #32]	; (8010144 <vPortExitCritical+0x50>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d105      	bne.n	8010136 <vPortExitCritical+0x42>
 801012a:	2300      	movs	r3, #0
 801012c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010136:	bf00      	nop
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	20000098 	.word	0x20000098
	...

08010150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010150:	f3ef 8009 	mrs	r0, PSP
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	4b15      	ldr	r3, [pc, #84]	; (80101b0 <pxCurrentTCBConst>)
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	f01e 0f10 	tst.w	lr, #16
 8010160:	bf08      	it	eq
 8010162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016a:	6010      	str	r0, [r2, #0]
 801016c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010174:	f380 8811 	msr	BASEPRI, r0
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	f3bf 8f6f 	isb	sy
 8010180:	f7ff fb14 	bl	800f7ac <vTaskSwitchContext>
 8010184:	f04f 0000 	mov.w	r0, #0
 8010188:	f380 8811 	msr	BASEPRI, r0
 801018c:	bc09      	pop	{r0, r3}
 801018e:	6819      	ldr	r1, [r3, #0]
 8010190:	6808      	ldr	r0, [r1, #0]
 8010192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010196:	f01e 0f10 	tst.w	lr, #16
 801019a:	bf08      	it	eq
 801019c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80101a0:	f380 8809 	msr	PSP, r0
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	f3af 8000 	nop.w

080101b0 <pxCurrentTCBConst>:
 80101b0:	20002b1c 	.word	0x20002b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop

080101b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
	__asm volatile
 80101be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	607b      	str	r3, [r7, #4]
}
 80101d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80101d2:	f7ff fa33 	bl	800f63c <xTaskIncrementTick>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d003      	beq.n	80101e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80101dc:	4b06      	ldr	r3, [pc, #24]	; (80101f8 <SysTick_Handler+0x40>)
 80101de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101e2:	601a      	str	r2, [r3, #0]
 80101e4:	2300      	movs	r3, #0
 80101e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	f383 8811 	msr	BASEPRI, r3
}
 80101ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	e000ed04 	.word	0xe000ed04

080101fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <vPortSetupTimerInterrupt+0x34>)
 8010202:	2200      	movs	r2, #0
 8010204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010206:	4b0b      	ldr	r3, [pc, #44]	; (8010234 <vPortSetupTimerInterrupt+0x38>)
 8010208:	2200      	movs	r2, #0
 801020a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801020c:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <vPortSetupTimerInterrupt+0x3c>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a0a      	ldr	r2, [pc, #40]	; (801023c <vPortSetupTimerInterrupt+0x40>)
 8010212:	fba2 2303 	umull	r2, r3, r2, r3
 8010216:	099b      	lsrs	r3, r3, #6
 8010218:	4a09      	ldr	r2, [pc, #36]	; (8010240 <vPortSetupTimerInterrupt+0x44>)
 801021a:	3b01      	subs	r3, #1
 801021c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801021e:	4b04      	ldr	r3, [pc, #16]	; (8010230 <vPortSetupTimerInterrupt+0x34>)
 8010220:	2207      	movs	r2, #7
 8010222:	601a      	str	r2, [r3, #0]
}
 8010224:	bf00      	nop
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	e000e010 	.word	0xe000e010
 8010234:	e000e018 	.word	0xe000e018
 8010238:	20000000 	.word	0x20000000
 801023c:	10624dd3 	.word	0x10624dd3
 8010240:	e000e014 	.word	0xe000e014

08010244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010254 <vPortEnableVFP+0x10>
 8010248:	6801      	ldr	r1, [r0, #0]
 801024a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801024e:	6001      	str	r1, [r0, #0]
 8010250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010252:	bf00      	nop
 8010254:	e000ed88 	.word	0xe000ed88

08010258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010260:	2300      	movs	r3, #0
 8010262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010264:	f7ff f940 	bl	800f4e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010268:	4b5b      	ldr	r3, [pc, #364]	; (80103d8 <pvPortMalloc+0x180>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010270:	f000 f920 	bl	80104b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010274:	4b59      	ldr	r3, [pc, #356]	; (80103dc <pvPortMalloc+0x184>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4013      	ands	r3, r2
 801027c:	2b00      	cmp	r3, #0
 801027e:	f040 8093 	bne.w	80103a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01d      	beq.n	80102c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010288:	2208      	movs	r2, #8
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4413      	add	r3, r2
 801028e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f003 0307 	and.w	r3, r3, #7
 8010296:	2b00      	cmp	r3, #0
 8010298:	d014      	beq.n	80102c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f023 0307 	bic.w	r3, r3, #7
 80102a0:	3308      	adds	r3, #8
 80102a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <pvPortMalloc+0x6c>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	617b      	str	r3, [r7, #20]
}
 80102c0:	bf00      	nop
 80102c2:	e7fe      	b.n	80102c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d06e      	beq.n	80103a8 <pvPortMalloc+0x150>
 80102ca:	4b45      	ldr	r3, [pc, #276]	; (80103e0 <pvPortMalloc+0x188>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d869      	bhi.n	80103a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80102d4:	4b43      	ldr	r3, [pc, #268]	; (80103e4 <pvPortMalloc+0x18c>)
 80102d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80102d8:	4b42      	ldr	r3, [pc, #264]	; (80103e4 <pvPortMalloc+0x18c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102de:	e004      	b.n	80102ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d903      	bls.n	80102fc <pvPortMalloc+0xa4>
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1f1      	bne.n	80102e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80102fc:	4b36      	ldr	r3, [pc, #216]	; (80103d8 <pvPortMalloc+0x180>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010302:	429a      	cmp	r2, r3
 8010304:	d050      	beq.n	80103a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2208      	movs	r2, #8
 801030c:	4413      	add	r3, r2
 801030e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	1ad2      	subs	r2, r2, r3
 8010320:	2308      	movs	r3, #8
 8010322:	005b      	lsls	r3, r3, #1
 8010324:	429a      	cmp	r2, r3
 8010326:	d91f      	bls.n	8010368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4413      	add	r3, r2
 801032e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	f003 0307 	and.w	r3, r3, #7
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <pvPortMalloc+0xf8>
	__asm volatile
 801033a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033e:	f383 8811 	msr	BASEPRI, r3
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	613b      	str	r3, [r7, #16]
}
 801034c:	bf00      	nop
 801034e:	e7fe      	b.n	801034e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	685a      	ldr	r2, [r3, #4]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	1ad2      	subs	r2, r2, r3
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010362:	69b8      	ldr	r0, [r7, #24]
 8010364:	f000 f908 	bl	8010578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010368:	4b1d      	ldr	r3, [pc, #116]	; (80103e0 <pvPortMalloc+0x188>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	4a1b      	ldr	r2, [pc, #108]	; (80103e0 <pvPortMalloc+0x188>)
 8010374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010376:	4b1a      	ldr	r3, [pc, #104]	; (80103e0 <pvPortMalloc+0x188>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	4b1b      	ldr	r3, [pc, #108]	; (80103e8 <pvPortMalloc+0x190>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	429a      	cmp	r2, r3
 8010380:	d203      	bcs.n	801038a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010382:	4b17      	ldr	r3, [pc, #92]	; (80103e0 <pvPortMalloc+0x188>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a18      	ldr	r2, [pc, #96]	; (80103e8 <pvPortMalloc+0x190>)
 8010388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	685a      	ldr	r2, [r3, #4]
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <pvPortMalloc+0x184>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	431a      	orrs	r2, r3
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801039e:	4b13      	ldr	r3, [pc, #76]	; (80103ec <pvPortMalloc+0x194>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3301      	adds	r3, #1
 80103a4:	4a11      	ldr	r2, [pc, #68]	; (80103ec <pvPortMalloc+0x194>)
 80103a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103a8:	f7ff f8ac 	bl	800f504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	f003 0307 	and.w	r3, r3, #7
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00a      	beq.n	80103cc <pvPortMalloc+0x174>
	__asm volatile
 80103b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ba:	f383 8811 	msr	BASEPRI, r3
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f3bf 8f4f 	dsb	sy
 80103c6:	60fb      	str	r3, [r7, #12]
}
 80103c8:	bf00      	nop
 80103ca:	e7fe      	b.n	80103ca <pvPortMalloc+0x172>
	return pvReturn;
 80103cc:	69fb      	ldr	r3, [r7, #28]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3728      	adds	r7, #40	; 0x28
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	20006858 	.word	0x20006858
 80103dc:	2000686c 	.word	0x2000686c
 80103e0:	2000685c 	.word	0x2000685c
 80103e4:	20006850 	.word	0x20006850
 80103e8:	20006860 	.word	0x20006860
 80103ec:	20006864 	.word	0x20006864

080103f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d04d      	beq.n	801049e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010402:	2308      	movs	r3, #8
 8010404:	425b      	negs	r3, r3
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	4413      	add	r3, r2
 801040a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	685a      	ldr	r2, [r3, #4]
 8010414:	4b24      	ldr	r3, [pc, #144]	; (80104a8 <vPortFree+0xb8>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4013      	ands	r3, r2
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10a      	bne.n	8010434 <vPortFree+0x44>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	60fb      	str	r3, [r7, #12]
}
 8010430:	bf00      	nop
 8010432:	e7fe      	b.n	8010432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00a      	beq.n	8010452 <vPortFree+0x62>
	__asm volatile
 801043c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	60bb      	str	r3, [r7, #8]
}
 801044e:	bf00      	nop
 8010450:	e7fe      	b.n	8010450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <vPortFree+0xb8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d01e      	beq.n	801049e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d11a      	bne.n	801049e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <vPortFree+0xb8>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	43db      	mvns	r3, r3
 8010472:	401a      	ands	r2, r3
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010478:	f7ff f836 	bl	800f4e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	685a      	ldr	r2, [r3, #4]
 8010480:	4b0a      	ldr	r3, [pc, #40]	; (80104ac <vPortFree+0xbc>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4413      	add	r3, r2
 8010486:	4a09      	ldr	r2, [pc, #36]	; (80104ac <vPortFree+0xbc>)
 8010488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801048a:	6938      	ldr	r0, [r7, #16]
 801048c:	f000 f874 	bl	8010578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010490:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <vPortFree+0xc0>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3301      	adds	r3, #1
 8010496:	4a06      	ldr	r2, [pc, #24]	; (80104b0 <vPortFree+0xc0>)
 8010498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801049a:	f7ff f833 	bl	800f504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801049e:	bf00      	nop
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	2000686c 	.word	0x2000686c
 80104ac:	2000685c 	.word	0x2000685c
 80104b0:	20006868 	.word	0x20006868

080104b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80104be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104c0:	4b27      	ldr	r3, [pc, #156]	; (8010560 <prvHeapInit+0xac>)
 80104c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00c      	beq.n	80104e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3307      	adds	r3, #7
 80104d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f023 0307 	bic.w	r3, r3, #7
 80104da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	4a1f      	ldr	r2, [pc, #124]	; (8010560 <prvHeapInit+0xac>)
 80104e4:	4413      	add	r3, r2
 80104e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80104ec:	4a1d      	ldr	r2, [pc, #116]	; (8010564 <prvHeapInit+0xb0>)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80104f2:	4b1c      	ldr	r3, [pc, #112]	; (8010564 <prvHeapInit+0xb0>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	4413      	add	r3, r2
 80104fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010500:	2208      	movs	r2, #8
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f023 0307 	bic.w	r3, r3, #7
 801050e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	4a15      	ldr	r2, [pc, #84]	; (8010568 <prvHeapInit+0xb4>)
 8010514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010516:	4b14      	ldr	r3, [pc, #80]	; (8010568 <prvHeapInit+0xb4>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801051e:	4b12      	ldr	r3, [pc, #72]	; (8010568 <prvHeapInit+0xb4>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	1ad2      	subs	r2, r2, r3
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010534:	4b0c      	ldr	r3, [pc, #48]	; (8010568 <prvHeapInit+0xb4>)
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	4a0a      	ldr	r2, [pc, #40]	; (801056c <prvHeapInit+0xb8>)
 8010542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4a09      	ldr	r2, [pc, #36]	; (8010570 <prvHeapInit+0xbc>)
 801054a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801054c:	4b09      	ldr	r3, [pc, #36]	; (8010574 <prvHeapInit+0xc0>)
 801054e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010552:	601a      	str	r2, [r3, #0]
}
 8010554:	bf00      	nop
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	20002c50 	.word	0x20002c50
 8010564:	20006850 	.word	0x20006850
 8010568:	20006858 	.word	0x20006858
 801056c:	20006860 	.word	0x20006860
 8010570:	2000685c 	.word	0x2000685c
 8010574:	2000686c 	.word	0x2000686c

08010578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010580:	4b28      	ldr	r3, [pc, #160]	; (8010624 <prvInsertBlockIntoFreeList+0xac>)
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	e002      	b.n	801058c <prvInsertBlockIntoFreeList+0x14>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	60fb      	str	r3, [r7, #12]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	429a      	cmp	r2, r3
 8010594:	d8f7      	bhi.n	8010586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	4413      	add	r3, r2
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d108      	bne.n	80105ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685a      	ldr	r2, [r3, #4]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	441a      	add	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	441a      	add	r2, r3
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d118      	bne.n	8010600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b15      	ldr	r3, [pc, #84]	; (8010628 <prvInsertBlockIntoFreeList+0xb0>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d00d      	beq.n	80105f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685a      	ldr	r2, [r3, #4]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	441a      	add	r2, r3
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	601a      	str	r2, [r3, #0]
 80105f4:	e008      	b.n	8010608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80105f6:	4b0c      	ldr	r3, [pc, #48]	; (8010628 <prvInsertBlockIntoFreeList+0xb0>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	e003      	b.n	8010608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d002      	beq.n	8010616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010616:	bf00      	nop
 8010618:	3714      	adds	r7, #20
 801061a:	46bd      	mov	sp, r7
 801061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	20006850 	.word	0x20006850
 8010628:	20006858 	.word	0x20006858

0801062c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010630:	2200      	movs	r2, #0
 8010632:	4912      	ldr	r1, [pc, #72]	; (801067c <MX_USB_DEVICE_Init+0x50>)
 8010634:	4812      	ldr	r0, [pc, #72]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 8010636:	f7fc fdcb 	bl	800d1d0 <USBD_Init>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d001      	beq.n	8010644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010640:	f7f0 faac 	bl	8000b9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010644:	490f      	ldr	r1, [pc, #60]	; (8010684 <MX_USB_DEVICE_Init+0x58>)
 8010646:	480e      	ldr	r0, [pc, #56]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 8010648:	f7fc fdf2 	bl	800d230 <USBD_RegisterClass>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010652:	f7f0 faa3 	bl	8000b9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010656:	490c      	ldr	r1, [pc, #48]	; (8010688 <MX_USB_DEVICE_Init+0x5c>)
 8010658:	4809      	ldr	r0, [pc, #36]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 801065a:	f7fc fce3 	bl	800d024 <USBD_CDC_RegisterInterface>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010664:	f7f0 fa9a 	bl	8000b9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010668:	4805      	ldr	r0, [pc, #20]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 801066a:	f7fc fe17 	bl	800d29c <USBD_Start>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010674:	f7f0 fa92 	bl	8000b9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010678:	bf00      	nop
 801067a:	bd80      	pop	{r7, pc}
 801067c:	200000b0 	.word	0x200000b0
 8010680:	20006870 	.word	0x20006870
 8010684:	20000018 	.word	0x20000018
 8010688:	2000009c 	.word	0x2000009c

0801068c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010690:	2200      	movs	r2, #0
 8010692:	4905      	ldr	r1, [pc, #20]	; (80106a8 <CDC_Init_FS+0x1c>)
 8010694:	4805      	ldr	r0, [pc, #20]	; (80106ac <CDC_Init_FS+0x20>)
 8010696:	f7fc fcdf 	bl	800d058 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801069a:	4905      	ldr	r1, [pc, #20]	; (80106b0 <CDC_Init_FS+0x24>)
 801069c:	4803      	ldr	r0, [pc, #12]	; (80106ac <CDC_Init_FS+0x20>)
 801069e:	f7fc fcfd 	bl	800d09c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80106a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	20006f34 	.word	0x20006f34
 80106ac:	20006870 	.word	0x20006870
 80106b0:	20006b4c 	.word	0x20006b4c

080106b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80106b4:	b480      	push	{r7}
 80106b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80106b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	6039      	str	r1, [r7, #0]
 80106ce:	71fb      	strb	r3, [r7, #7]
 80106d0:	4613      	mov	r3, r2
 80106d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80106d4:	79fb      	ldrb	r3, [r7, #7]
 80106d6:	2b23      	cmp	r3, #35	; 0x23
 80106d8:	d84a      	bhi.n	8010770 <CDC_Control_FS+0xac>
 80106da:	a201      	add	r2, pc, #4	; (adr r2, 80106e0 <CDC_Control_FS+0x1c>)
 80106dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e0:	08010771 	.word	0x08010771
 80106e4:	08010771 	.word	0x08010771
 80106e8:	08010771 	.word	0x08010771
 80106ec:	08010771 	.word	0x08010771
 80106f0:	08010771 	.word	0x08010771
 80106f4:	08010771 	.word	0x08010771
 80106f8:	08010771 	.word	0x08010771
 80106fc:	08010771 	.word	0x08010771
 8010700:	08010771 	.word	0x08010771
 8010704:	08010771 	.word	0x08010771
 8010708:	08010771 	.word	0x08010771
 801070c:	08010771 	.word	0x08010771
 8010710:	08010771 	.word	0x08010771
 8010714:	08010771 	.word	0x08010771
 8010718:	08010771 	.word	0x08010771
 801071c:	08010771 	.word	0x08010771
 8010720:	08010771 	.word	0x08010771
 8010724:	08010771 	.word	0x08010771
 8010728:	08010771 	.word	0x08010771
 801072c:	08010771 	.word	0x08010771
 8010730:	08010771 	.word	0x08010771
 8010734:	08010771 	.word	0x08010771
 8010738:	08010771 	.word	0x08010771
 801073c:	08010771 	.word	0x08010771
 8010740:	08010771 	.word	0x08010771
 8010744:	08010771 	.word	0x08010771
 8010748:	08010771 	.word	0x08010771
 801074c:	08010771 	.word	0x08010771
 8010750:	08010771 	.word	0x08010771
 8010754:	08010771 	.word	0x08010771
 8010758:	08010771 	.word	0x08010771
 801075c:	08010771 	.word	0x08010771
 8010760:	08010771 	.word	0x08010771
 8010764:	08010771 	.word	0x08010771
 8010768:	08010771 	.word	0x08010771
 801076c:	08010771 	.word	0x08010771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010770:	bf00      	nop
  }

  return (USBD_OK);
 8010772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010774:	4618      	mov	r0, r3
 8010776:	370c      	adds	r7, #12
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801078a:	6879      	ldr	r1, [r7, #4]
 801078c:	480e      	ldr	r0, [pc, #56]	; (80107c8 <CDC_Receive_FS+0x48>)
 801078e:	f7fc fc85 	bl	800d09c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010792:	480d      	ldr	r0, [pc, #52]	; (80107c8 <CDC_Receive_FS+0x48>)
 8010794:	f7fc fce6 	bl	800d164 <USBD_CDC_ReceivePacket>

  dataUsb_rxlength =  (uint8_t)* Len;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	b2da      	uxtb	r2, r3
 801079e:	4b0b      	ldr	r3, [pc, #44]	; (80107cc <CDC_Receive_FS+0x4c>)
 80107a0:	701a      	strb	r2, [r3, #0]
  memcpy(dataUsb_rx,Buf,dataUsb_rxlength);
 80107a2:	4b0a      	ldr	r3, [pc, #40]	; (80107cc <CDC_Receive_FS+0x4c>)
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	4809      	ldr	r0, [pc, #36]	; (80107d0 <CDC_Receive_FS+0x50>)
 80107ac:	f001 ffcc 	bl	8012748 <memcpy>
  AnalyserCMD(dataUsb_rx,dataUsb_rxlength, USB);
 80107b0:	4b06      	ldr	r3, [pc, #24]	; (80107cc <CDC_Receive_FS+0x4c>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2201      	movs	r2, #1
 80107b6:	4619      	mov	r1, r3
 80107b8:	4805      	ldr	r0, [pc, #20]	; (80107d0 <CDC_Receive_FS+0x50>)
 80107ba:	f001 fcd1 	bl	8012160 <AnalyserCMD>

  return (USBD_OK);
 80107be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	20006870 	.word	0x20006870
 80107cc:	20009045 	.word	0x20009045
 80107d0:	20009048 	.word	0x20009048

080107d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80107e4:	4b0d      	ldr	r3, [pc, #52]	; (801081c <CDC_Transmit_FS+0x48>)
 80107e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d001      	beq.n	80107fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80107f6:	2301      	movs	r3, #1
 80107f8:	e00b      	b.n	8010812 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80107fa:	887b      	ldrh	r3, [r7, #2]
 80107fc:	461a      	mov	r2, r3
 80107fe:	6879      	ldr	r1, [r7, #4]
 8010800:	4806      	ldr	r0, [pc, #24]	; (801081c <CDC_Transmit_FS+0x48>)
 8010802:	f7fc fc29 	bl	800d058 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010806:	4805      	ldr	r0, [pc, #20]	; (801081c <CDC_Transmit_FS+0x48>)
 8010808:	f7fc fc66 	bl	800d0d8 <USBD_CDC_TransmitPacket>
 801080c:	4603      	mov	r3, r0
 801080e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010810:	7bfb      	ldrb	r3, [r7, #15]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3710      	adds	r7, #16
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20006870 	.word	0x20006870

08010820 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010820:	b480      	push	{r7}
 8010822:	b087      	sub	sp, #28
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	4613      	mov	r3, r2
 801082c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010836:	4618      	mov	r0, r3
 8010838:	371c      	adds	r7, #28
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr
	...

08010844 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	4603      	mov	r3, r0
 801084c:	6039      	str	r1, [r7, #0]
 801084e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2212      	movs	r2, #18
 8010854:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010856:	4b03      	ldr	r3, [pc, #12]	; (8010864 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010858:	4618      	mov	r0, r3
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	200000cc 	.word	0x200000cc

08010868 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	4603      	mov	r3, r0
 8010870:	6039      	str	r1, [r7, #0]
 8010872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	2204      	movs	r2, #4
 8010878:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801087a:	4b03      	ldr	r3, [pc, #12]	; (8010888 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	200000e0 	.word	0x200000e0

0801088c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	6039      	str	r1, [r7, #0]
 8010896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010898:	79fb      	ldrb	r3, [r7, #7]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d105      	bne.n	80108aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	4907      	ldr	r1, [pc, #28]	; (80108c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80108a2:	4808      	ldr	r0, [pc, #32]	; (80108c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80108a4:	f7fd fea6 	bl	800e5f4 <USBD_GetString>
 80108a8:	e004      	b.n	80108b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	4904      	ldr	r1, [pc, #16]	; (80108c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80108ae:	4805      	ldr	r0, [pc, #20]	; (80108c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80108b0:	f7fd fea0 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108b4:	4b02      	ldr	r3, [pc, #8]	; (80108c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	2000731c 	.word	0x2000731c
 80108c4:	080127e8 	.word	0x080127e8

080108c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	6039      	str	r1, [r7, #0]
 80108d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	4904      	ldr	r1, [pc, #16]	; (80108e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80108d8:	4804      	ldr	r0, [pc, #16]	; (80108ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80108da:	f7fd fe8b 	bl	800e5f4 <USBD_GetString>
  return USBD_StrDesc;
 80108de:	4b02      	ldr	r3, [pc, #8]	; (80108e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	2000731c 	.word	0x2000731c
 80108ec:	080127f8 	.word	0x080127f8

080108f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	4603      	mov	r3, r0
 80108f8:	6039      	str	r1, [r7, #0]
 80108fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	221a      	movs	r2, #26
 8010900:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010902:	f000 f843 	bl	801098c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010906:	4b02      	ldr	r3, [pc, #8]	; (8010910 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010908:	4618      	mov	r0, r3
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	200000e4 	.word	0x200000e4

08010914 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	4603      	mov	r3, r0
 801091c:	6039      	str	r1, [r7, #0]
 801091e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d105      	bne.n	8010932 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	4907      	ldr	r1, [pc, #28]	; (8010948 <USBD_FS_ConfigStrDescriptor+0x34>)
 801092a:	4808      	ldr	r0, [pc, #32]	; (801094c <USBD_FS_ConfigStrDescriptor+0x38>)
 801092c:	f7fd fe62 	bl	800e5f4 <USBD_GetString>
 8010930:	e004      	b.n	801093c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	4904      	ldr	r1, [pc, #16]	; (8010948 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010936:	4805      	ldr	r0, [pc, #20]	; (801094c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010938:	f7fd fe5c 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801093c:	4b02      	ldr	r3, [pc, #8]	; (8010948 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801093e:	4618      	mov	r0, r3
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	2000731c 	.word	0x2000731c
 801094c:	08012800 	.word	0x08012800

08010950 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	4603      	mov	r3, r0
 8010958:	6039      	str	r1, [r7, #0]
 801095a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801095c:	79fb      	ldrb	r3, [r7, #7]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d105      	bne.n	801096e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010962:	683a      	ldr	r2, [r7, #0]
 8010964:	4907      	ldr	r1, [pc, #28]	; (8010984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010966:	4808      	ldr	r0, [pc, #32]	; (8010988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010968:	f7fd fe44 	bl	800e5f4 <USBD_GetString>
 801096c:	e004      	b.n	8010978 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801096e:	683a      	ldr	r2, [r7, #0]
 8010970:	4904      	ldr	r1, [pc, #16]	; (8010984 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010972:	4805      	ldr	r0, [pc, #20]	; (8010988 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010974:	f7fd fe3e 	bl	800e5f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010978:	4b02      	ldr	r3, [pc, #8]	; (8010984 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2000731c 	.word	0x2000731c
 8010988:	0801280c 	.word	0x0801280c

0801098c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010992:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <Get_SerialNum+0x44>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010998:	4b0e      	ldr	r3, [pc, #56]	; (80109d4 <Get_SerialNum+0x48>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801099e:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <Get_SerialNum+0x4c>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	4413      	add	r3, r2
 80109aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d009      	beq.n	80109c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109b2:	2208      	movs	r2, #8
 80109b4:	4909      	ldr	r1, [pc, #36]	; (80109dc <Get_SerialNum+0x50>)
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f000 f814 	bl	80109e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80109bc:	2204      	movs	r2, #4
 80109be:	4908      	ldr	r1, [pc, #32]	; (80109e0 <Get_SerialNum+0x54>)
 80109c0:	68b8      	ldr	r0, [r7, #8]
 80109c2:	f000 f80f 	bl	80109e4 <IntToUnicode>
  }
}
 80109c6:	bf00      	nop
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	1fff7a10 	.word	0x1fff7a10
 80109d4:	1fff7a14 	.word	0x1fff7a14
 80109d8:	1fff7a18 	.word	0x1fff7a18
 80109dc:	200000e6 	.word	0x200000e6
 80109e0:	200000f6 	.word	0x200000f6

080109e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b087      	sub	sp, #28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	4613      	mov	r3, r2
 80109f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80109f6:	2300      	movs	r3, #0
 80109f8:	75fb      	strb	r3, [r7, #23]
 80109fa:	e027      	b.n	8010a4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	0f1b      	lsrs	r3, r3, #28
 8010a00:	2b09      	cmp	r3, #9
 8010a02:	d80b      	bhi.n	8010a1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	0f1b      	lsrs	r3, r3, #28
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	7dfb      	ldrb	r3, [r7, #23]
 8010a0c:	005b      	lsls	r3, r3, #1
 8010a0e:	4619      	mov	r1, r3
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	440b      	add	r3, r1
 8010a14:	3230      	adds	r2, #48	; 0x30
 8010a16:	b2d2      	uxtb	r2, r2
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	e00a      	b.n	8010a32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	0f1b      	lsrs	r3, r3, #28
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	7dfb      	ldrb	r3, [r7, #23]
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4619      	mov	r1, r3
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	440b      	add	r3, r1
 8010a2c:	3237      	adds	r2, #55	; 0x37
 8010a2e:	b2d2      	uxtb	r2, r2
 8010a30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	011b      	lsls	r3, r3, #4
 8010a36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	68ba      	ldr	r2, [r7, #8]
 8010a40:	4413      	add	r3, r2
 8010a42:	2200      	movs	r2, #0
 8010a44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	75fb      	strb	r3, [r7, #23]
 8010a4c:	7dfa      	ldrb	r2, [r7, #23]
 8010a4e:	79fb      	ldrb	r3, [r7, #7]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d3d3      	bcc.n	80109fc <IntToUnicode+0x18>
  }
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop
 8010a58:	371c      	adds	r7, #28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr
	...

08010a64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08a      	sub	sp, #40	; 0x28
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a6c:	f107 0314 	add.w	r3, r7, #20
 8010a70:	2200      	movs	r2, #0
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	605a      	str	r2, [r3, #4]
 8010a76:	609a      	str	r2, [r3, #8]
 8010a78:	60da      	str	r2, [r3, #12]
 8010a7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a84:	d13a      	bne.n	8010afc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a86:	2300      	movs	r3, #0
 8010a88:	613b      	str	r3, [r7, #16]
 8010a8a:	4b1e      	ldr	r3, [pc, #120]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a8e:	4a1d      	ldr	r2, [pc, #116]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010a90:	f043 0301 	orr.w	r3, r3, #1
 8010a94:	6313      	str	r3, [r2, #48]	; 0x30
 8010a96:	4b1b      	ldr	r3, [pc, #108]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a9a:	f003 0301 	and.w	r3, r3, #1
 8010a9e:	613b      	str	r3, [r7, #16]
 8010aa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aac:	2300      	movs	r3, #0
 8010aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ab0:	2303      	movs	r3, #3
 8010ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ab4:	230a      	movs	r3, #10
 8010ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ab8:	f107 0314 	add.w	r3, r7, #20
 8010abc:	4619      	mov	r1, r3
 8010abe:	4812      	ldr	r0, [pc, #72]	; (8010b08 <HAL_PCD_MspInit+0xa4>)
 8010ac0:	f7f2 f866 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ac4:	4b0f      	ldr	r3, [pc, #60]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac8:	4a0e      	ldr	r2, [pc, #56]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ace:	6353      	str	r3, [r2, #52]	; 0x34
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	60fb      	str	r3, [r7, #12]
 8010ad4:	4b0b      	ldr	r3, [pc, #44]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad8:	4a0a      	ldr	r2, [pc, #40]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ade:	6453      	str	r3, [r2, #68]	; 0x44
 8010ae0:	4b08      	ldr	r3, [pc, #32]	; (8010b04 <HAL_PCD_MspInit+0xa0>)
 8010ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010aec:	2200      	movs	r2, #0
 8010aee:	2105      	movs	r1, #5
 8010af0:	2043      	movs	r0, #67	; 0x43
 8010af2:	f7f1 fb9b 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010af6:	2043      	movs	r0, #67	; 0x43
 8010af8:	f7f1 fbb4 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010afc:	bf00      	nop
 8010afe:	3728      	adds	r7, #40	; 0x28
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	40023800 	.word	0x40023800
 8010b08:	40020000 	.word	0x40020000

08010b0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b20:	4619      	mov	r1, r3
 8010b22:	4610      	mov	r0, r2
 8010b24:	f7fc fc07 	bl	800d336 <USBD_LL_SetupStage>
}
 8010b28:	bf00      	nop
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b42:	78fa      	ldrb	r2, [r7, #3]
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	4613      	mov	r3, r2
 8010b48:	00db      	lsls	r3, r3, #3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	78fb      	ldrb	r3, [r7, #3]
 8010b58:	4619      	mov	r1, r3
 8010b5a:	f7fc fc41 	bl	800d3e0 <USBD_LL_DataOutStage>
}
 8010b5e:	bf00      	nop
 8010b60:	3708      	adds	r7, #8
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b082      	sub	sp, #8
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	460b      	mov	r3, r1
 8010b70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b78:	78fa      	ldrb	r2, [r7, #3]
 8010b7a:	6879      	ldr	r1, [r7, #4]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	4413      	add	r3, r2
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	440b      	add	r3, r1
 8010b86:	334c      	adds	r3, #76	; 0x4c
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	78fb      	ldrb	r3, [r7, #3]
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	f7fc fcda 	bl	800d546 <USBD_LL_DataInStage>
}
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b082      	sub	sp, #8
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fc fe0e 	bl	800d7ca <USBD_LL_SOF>
}
 8010bae:	bf00      	nop
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b084      	sub	sp, #16
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d001      	beq.n	8010bce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010bca:	f7ef ffe7 	bl	8000b9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bd4:	7bfa      	ldrb	r2, [r7, #15]
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fc fdb8 	bl	800d74e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fc fd60 	bl	800d6aa <USBD_LL_Reset>
}
 8010bea:	bf00      	nop
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fc fdb3 	bl	800d76e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	6812      	ldr	r2, [r2, #0]
 8010c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c1a:	f043 0301 	orr.w	r3, r3, #1
 8010c1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6a1b      	ldr	r3, [r3, #32]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d005      	beq.n	8010c34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c28:	4b04      	ldr	r3, [pc, #16]	; (8010c3c <HAL_PCD_SuspendCallback+0x48>)
 8010c2a:	691b      	ldr	r3, [r3, #16]
 8010c2c:	4a03      	ldr	r2, [pc, #12]	; (8010c3c <HAL_PCD_SuspendCallback+0x48>)
 8010c2e:	f043 0306 	orr.w	r3, r3, #6
 8010c32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	e000ed00 	.word	0xe000ed00

08010c40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fc fda3 	bl	800d79a <USBD_LL_Resume>
}
 8010c54:	bf00      	nop
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c6e:	78fa      	ldrb	r2, [r7, #3]
 8010c70:	4611      	mov	r1, r2
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fc fdfb 	bl	800d86e <USBD_LL_IsoOUTIncomplete>
}
 8010c78:	bf00      	nop
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	460b      	mov	r3, r1
 8010c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c92:	78fa      	ldrb	r2, [r7, #3]
 8010c94:	4611      	mov	r1, r2
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fc fdb7 	bl	800d80a <USBD_LL_IsoINIncomplete>
}
 8010c9c:	bf00      	nop
 8010c9e:	3708      	adds	r7, #8
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fc fe0d 	bl	800d8d2 <USBD_LL_DevConnected>
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fc fe0a 	bl	800d8e8 <USBD_LL_DevDisconnected>
}
 8010cd4:	bf00      	nop
 8010cd6:	3708      	adds	r7, #8
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d13c      	bne.n	8010d66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010cec:	4a20      	ldr	r2, [pc, #128]	; (8010d70 <USBD_LL_Init+0x94>)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	4a1e      	ldr	r2, [pc, #120]	; (8010d70 <USBD_LL_Init+0x94>)
 8010cf8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010cfc:	4b1c      	ldr	r3, [pc, #112]	; (8010d70 <USBD_LL_Init+0x94>)
 8010cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010d04:	4b1a      	ldr	r3, [pc, #104]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d06:	2204      	movs	r2, #4
 8010d08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d0a:	4b19      	ldr	r3, [pc, #100]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d0c:	2202      	movs	r2, #2
 8010d0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d10:	4b17      	ldr	r3, [pc, #92]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d16:	4b16      	ldr	r3, [pc, #88]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d18:	2202      	movs	r2, #2
 8010d1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d1c:	4b14      	ldr	r3, [pc, #80]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d22:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d28:	4b11      	ldr	r3, [pc, #68]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d2e:	4b10      	ldr	r3, [pc, #64]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d34:	4b0e      	ldr	r3, [pc, #56]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d3a:	480d      	ldr	r0, [pc, #52]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d3c:	f7f4 fa4f 	bl	80051de <HAL_PCD_Init>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010d46:	f7ef ff29 	bl	8000b9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010d4a:	2180      	movs	r1, #128	; 0x80
 8010d4c:	4808      	ldr	r0, [pc, #32]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d4e:	f7f5 fca6 	bl	800669e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010d52:	2240      	movs	r2, #64	; 0x40
 8010d54:	2100      	movs	r1, #0
 8010d56:	4806      	ldr	r0, [pc, #24]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d58:	f7f5 fc5a 	bl	8006610 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010d5c:	2280      	movs	r2, #128	; 0x80
 8010d5e:	2101      	movs	r1, #1
 8010d60:	4803      	ldr	r0, [pc, #12]	; (8010d70 <USBD_LL_Init+0x94>)
 8010d62:	f7f5 fc55 	bl	8006610 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	2000751c 	.word	0x2000751c

08010d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d80:	2300      	movs	r3, #0
 8010d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7f4 fb44 	bl	8005418 <HAL_PCD_Start>
 8010d90:	4603      	mov	r3, r0
 8010d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f000 f942 	bl	8011020 <USBD_Get_USB_Status>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b084      	sub	sp, #16
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
 8010db2:	4608      	mov	r0, r1
 8010db4:	4611      	mov	r1, r2
 8010db6:	461a      	mov	r2, r3
 8010db8:	4603      	mov	r3, r0
 8010dba:	70fb      	strb	r3, [r7, #3]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	70bb      	strb	r3, [r7, #2]
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010dd2:	78bb      	ldrb	r3, [r7, #2]
 8010dd4:	883a      	ldrh	r2, [r7, #0]
 8010dd6:	78f9      	ldrb	r1, [r7, #3]
 8010dd8:	f7f5 f815 	bl	8005e06 <HAL_PCD_EP_Open>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f000 f91c 	bl	8011020 <USBD_Get_USB_Status>
 8010de8:	4603      	mov	r3, r0
 8010dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b084      	sub	sp, #16
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
 8010dfe:	460b      	mov	r3, r1
 8010e00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e02:	2300      	movs	r3, #0
 8010e04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e10:	78fa      	ldrb	r2, [r7, #3]
 8010e12:	4611      	mov	r1, r2
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7f5 f85e 	bl	8005ed6 <HAL_PCD_EP_Close>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e1e:	7bfb      	ldrb	r3, [r7, #15]
 8010e20:	4618      	mov	r0, r3
 8010e22:	f000 f8fd 	bl	8011020 <USBD_Get_USB_Status>
 8010e26:	4603      	mov	r3, r0
 8010e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e40:	2300      	movs	r3, #0
 8010e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e44:	2300      	movs	r3, #0
 8010e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e4e:	78fa      	ldrb	r2, [r7, #3]
 8010e50:	4611      	mov	r1, r2
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f5 f936 	bl	80060c4 <HAL_PCD_EP_SetStall>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e5c:	7bfb      	ldrb	r3, [r7, #15]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 f8de 	bl	8011020 <USBD_Get_USB_Status>
 8010e64:	4603      	mov	r3, r0
 8010e66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e68:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b084      	sub	sp, #16
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e8c:	78fa      	ldrb	r2, [r7, #3]
 8010e8e:	4611      	mov	r1, r2
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f5 f97b 	bl	800618c <HAL_PCD_EP_ClrStall>
 8010e96:	4603      	mov	r3, r0
 8010e98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e9a:	7bfb      	ldrb	r3, [r7, #15]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f000 f8bf 	bl	8011020 <USBD_Get_USB_Status>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ea6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b085      	sub	sp, #20
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	460b      	mov	r3, r1
 8010eba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ec2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	da0b      	bge.n	8010ee4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ecc:	78fb      	ldrb	r3, [r7, #3]
 8010ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ed2:	68f9      	ldr	r1, [r7, #12]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	00db      	lsls	r3, r3, #3
 8010ed8:	4413      	add	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	440b      	add	r3, r1
 8010ede:	333e      	adds	r3, #62	; 0x3e
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	e00b      	b.n	8010efc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	4613      	mov	r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	440b      	add	r3, r1
 8010ef6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010efa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3714      	adds	r7, #20
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	460b      	mov	r3, r1
 8010f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f14:	2300      	movs	r3, #0
 8010f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f22:	78fa      	ldrb	r2, [r7, #3]
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7f4 ff48 	bl	8005dbc <HAL_PCD_SetAddress>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f000 f874 	bl	8011020 <USBD_Get_USB_Status>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b086      	sub	sp, #24
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	60f8      	str	r0, [r7, #12]
 8010f4e:	607a      	str	r2, [r7, #4]
 8010f50:	603b      	str	r3, [r7, #0]
 8010f52:	460b      	mov	r3, r1
 8010f54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f56:	2300      	movs	r3, #0
 8010f58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f64:	7af9      	ldrb	r1, [r7, #11]
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	f7f5 f861 	bl	8006030 <HAL_PCD_EP_Transmit>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f72:	7dfb      	ldrb	r3, [r7, #23]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f000 f853 	bl	8011020 <USBD_Get_USB_Status>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3718      	adds	r7, #24
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	607a      	str	r2, [r7, #4]
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	460b      	mov	r3, r1
 8010f96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010fa6:	7af9      	ldrb	r1, [r7, #11]
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	687a      	ldr	r2, [r7, #4]
 8010fac:	f7f4 ffdd 	bl	8005f6a <HAL_PCD_EP_Receive>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fb4:	7dfb      	ldrb	r3, [r7, #23]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f000 f832 	bl	8011020 <USBD_Get_USB_Status>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3718      	adds	r7, #24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b082      	sub	sp, #8
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fdc:	78fa      	ldrb	r2, [r7, #3]
 8010fde:	4611      	mov	r1, r2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f5 f80d 	bl	8006000 <HAL_PCD_EP_GetRxCount>
 8010fe6:	4603      	mov	r3, r0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010ff8:	4b03      	ldr	r3, [pc, #12]	; (8011008 <USBD_static_malloc+0x18>)
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	20007a28 	.word	0x20007a28

0801100c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801100c:	b480      	push	{r7}
 801100e:	b083      	sub	sp, #12
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]

}
 8011014:	bf00      	nop
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr

08011020 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	4603      	mov	r3, r0
 8011028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801102e:	79fb      	ldrb	r3, [r7, #7]
 8011030:	2b03      	cmp	r3, #3
 8011032:	d817      	bhi.n	8011064 <USBD_Get_USB_Status+0x44>
 8011034:	a201      	add	r2, pc, #4	; (adr r2, 801103c <USBD_Get_USB_Status+0x1c>)
 8011036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103a:	bf00      	nop
 801103c:	0801104d 	.word	0x0801104d
 8011040:	08011053 	.word	0x08011053
 8011044:	08011059 	.word	0x08011059
 8011048:	0801105f 	.word	0x0801105f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	73fb      	strb	r3, [r7, #15]
    break;
 8011050:	e00b      	b.n	801106a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011052:	2303      	movs	r3, #3
 8011054:	73fb      	strb	r3, [r7, #15]
    break;
 8011056:	e008      	b.n	801106a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011058:	2301      	movs	r3, #1
 801105a:	73fb      	strb	r3, [r7, #15]
    break;
 801105c:	e005      	b.n	801106a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801105e:	2303      	movs	r3, #3
 8011060:	73fb      	strb	r3, [r7, #15]
    break;
 8011062:	e002      	b.n	801106a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011064:	2303      	movs	r3, #3
 8011066:	73fb      	strb	r3, [r7, #15]
    break;
 8011068:	bf00      	nop
  }
  return usb_status;
 801106a:	7bfb      	ldrb	r3, [r7, #15]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3714      	adds	r7, #20
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <Checksum>:
uint32_t i2c_code_error;
uint8_t numerr=0;
uint8_t crcval=0;

uint8_t Checksum(uint8_t *data, uint8_t length)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	460b      	mov	r3, r1
 8011082:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t Sum = 0;
 8011084:	2300      	movs	r3, #0
 8011086:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 8011088:	2300      	movs	r3, #0
 801108a:	73fb      	strb	r3, [r7, #15]
 801108c:	e009      	b.n	80110a2 <Checksum+0x2a>
		Sum = Sum + data[count];
 801108e:	7bfb      	ldrb	r3, [r7, #15]
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	4413      	add	r3, r2
 8011094:	781a      	ldrb	r2, [r3, #0]
 8011096:	7bbb      	ldrb	r3, [r7, #14]
 8011098:	4413      	add	r3, r2
 801109a:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 801109c:	7bfb      	ldrb	r3, [r7, #15]
 801109e:	3301      	adds	r3, #1
 80110a0:	73fb      	strb	r3, [r7, #15]
 80110a2:	7bfa      	ldrb	r2, [r7, #15]
 80110a4:	78fb      	ldrb	r3, [r7, #3]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d3f1      	bcc.n	801108e <Checksum+0x16>
	Sum = -Sum;
 80110aa:	7bbb      	ldrb	r3, [r7, #14]
 80110ac:	425b      	negs	r3, r3
 80110ae:	73bb      	strb	r3, [r7, #14]
	return (Sum & 0xFF);
 80110b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
	...

080110c0 <HAL_I2C_AddrCallback>:

// I2C-Interface , callback khi co  read/write i2c
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
 80110cc:	4613      	mov	r3, r2
 80110ce:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C1)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4a07      	ldr	r2, [pc, #28]	; (80110f4 <HAL_I2C_AddrCallback+0x34>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d108      	bne.n	80110ec <HAL_I2C_AddrCallback+0x2c>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // neu i2c master write to slave
 80110da:	78fb      	ldrb	r3, [r7, #3]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d105      	bne.n	80110ec <HAL_I2C_AddrCallback+0x2c>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1,data_chessclock,15,I2C_FIRST_AND_LAST_FRAME); // thi luu data bang dma
 80110e0:	2308      	movs	r3, #8
 80110e2:	220f      	movs	r2, #15
 80110e4:	4904      	ldr	r1, [pc, #16]	; (80110f8 <HAL_I2C_AddrCallback+0x38>)
 80110e6:	4805      	ldr	r0, [pc, #20]	; (80110fc <HAL_I2C_AddrCallback+0x3c>)
 80110e8:	f7f2 f948 	bl	800337c <HAL_I2C_Slave_Seq_Receive_DMA>
		}
	}
}
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	40005400 	.word	0x40005400
 80110f8:	20007c4c 	.word	0x20007c4c
 80110fc:	200023d8 	.word	0x200023d8

08011100 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);  // bat laij ngat
 8011108:	4803      	ldr	r0, [pc, #12]	; (8011118 <HAL_I2C_ListenCpltCallback+0x18>)
 801110a:	f7f2 fa71 	bl	80035f0 <HAL_I2C_EnableListen_IT>
}
 801110e:	bf00      	nop
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	200023d8 	.word	0x200023d8

0801111c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a0b      	ldr	r2, [pc, #44]	; (8011158 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d110      	bne.n	8011150 <HAL_I2C_SlaveRxCpltCallback+0x34>
	{
		crcval = Checksum(data_chessclock, 14);
 801112e:	210e      	movs	r1, #14
 8011130:	480a      	ldr	r0, [pc, #40]	; (801115c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8011132:	f7ff ffa1 	bl	8011078 <Checksum>
 8011136:	4603      	mov	r3, r0
 8011138:	461a      	mov	r2, r3
 801113a:	4b09      	ldr	r3, [pc, #36]	; (8011160 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 801113c:	701a      	strb	r2, [r3, #0]
		if(crcval == data_chessclock[14]){
 801113e:	4b07      	ldr	r3, [pc, #28]	; (801115c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8011140:	7b9a      	ldrb	r2, [r3, #14]
 8011142:	4b07      	ldr	r3, [pc, #28]	; (8011160 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	429a      	cmp	r2, r3
 8011148:	d102      	bne.n	8011150 <HAL_I2C_SlaveRxCpltCallback+0x34>
			chessclock_interrup = true; // bat flag khi co data clock
 801114a:	4b06      	ldr	r3, [pc, #24]	; (8011164 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 801114c:	2201      	movs	r2, #1
 801114e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	40005400 	.word	0x40005400
 801115c:	20007c4c 	.word	0x20007c4c
 8011160:	20007c61 	.word	0x20007c61
 8011164:	20007c48 	.word	0x20007c48

08011168 <HAL_I2C_ErrorCallback>:
// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4a0d      	ldr	r2, [pc, #52]	; (80111ac <HAL_I2C_ErrorCallback+0x44>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d114      	bne.n	80111a4 <HAL_I2C_ErrorCallback+0x3c>
		i2c_code_error = hi2c->ErrorCode;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117e:	4a0c      	ldr	r2, [pc, #48]	; (80111b0 <HAL_I2C_ErrorCallback+0x48>)
 8011180:	6013      	str	r3, [r2, #0]
		Status_Set(STT_I2C_ERROR);
 8011182:	2001      	movs	r0, #1
 8011184:	f000 fd60 	bl	8011c48 <Status_Set>
		numerr++;
 8011188:	4b0a      	ldr	r3, [pc, #40]	; (80111b4 <HAL_I2C_ErrorCallback+0x4c>)
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	3301      	adds	r3, #1
 801118e:	b2da      	uxtb	r2, r3
 8011190:	4b08      	ldr	r3, [pc, #32]	; (80111b4 <HAL_I2C_ErrorCallback+0x4c>)
 8011192:	701a      	strb	r2, [r3, #0]
		//HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
		HAL_I2C_DeInit(&hi2c1);
 8011194:	4808      	ldr	r0, [pc, #32]	; (80111b8 <HAL_I2C_ErrorCallback+0x50>)
 8011196:	f7f2 f8c1 	bl	800331c <HAL_I2C_DeInit>
		MMX_I2C1_Init();
 801119a:	f000 f819 	bl	80111d0 <MMX_I2C1_Init>
		HAL_I2C_EnableListen_IT(&hi2c1);
 801119e:	4806      	ldr	r0, [pc, #24]	; (80111b8 <HAL_I2C_ErrorCallback+0x50>)
 80111a0:	f7f2 fa26 	bl	80035f0 <HAL_I2C_EnableListen_IT>
	}
}
 80111a4:	bf00      	nop
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	40005400 	.word	0x40005400
 80111b0:	20007c5c 	.word	0x20007c5c
 80111b4:	20007c60 	.word	0x20007c60
 80111b8:	200023d8 	.word	0x200023d8

080111bc <ChessClock_Init>:

void ChessClock_Init()
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	af00      	add	r7, sp, #0
	HAL_I2C_EnableListen_IT(&hi2c1);   // bat ngat I2C, khi co thao tac read/write
 80111c0:	4802      	ldr	r0, [pc, #8]	; (80111cc <ChessClock_Init+0x10>)
 80111c2:	f7f2 fa15 	bl	80035f0 <HAL_I2C_EnableListen_IT>
}
 80111c6:	bf00      	nop
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	200023d8 	.word	0x200023d8

080111d0 <MMX_I2C1_Init>:

static void MMX_I2C1_Init(void)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80111d4:	4b12      	ldr	r3, [pc, #72]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111d6:	4a13      	ldr	r2, [pc, #76]	; (8011224 <MMX_I2C1_Init+0x54>)
 80111d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80111da:	4b11      	ldr	r3, [pc, #68]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111dc:	4a12      	ldr	r2, [pc, #72]	; (8011228 <MMX_I2C1_Init+0x58>)
 80111de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80111e0:	4b0f      	ldr	r3, [pc, #60]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x50;
 80111e6:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111e8:	2250      	movs	r2, #80	; 0x50
 80111ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80111ec:	4b0c      	ldr	r3, [pc, #48]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80111f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80111f4:	4b0a      	ldr	r3, [pc, #40]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0x50;
 80111fa:	4b09      	ldr	r3, [pc, #36]	; (8011220 <MMX_I2C1_Init+0x50>)
 80111fc:	2250      	movs	r2, #80	; 0x50
 80111fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <MMX_I2C1_Init+0x50>)
 8011202:	2200      	movs	r2, #0
 8011204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011206:	4b06      	ldr	r3, [pc, #24]	; (8011220 <MMX_I2C1_Init+0x50>)
 8011208:	2200      	movs	r2, #0
 801120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801120c:	4804      	ldr	r0, [pc, #16]	; (8011220 <MMX_I2C1_Init+0x50>)
 801120e:	f7f1 ff41 	bl	8003094 <HAL_I2C_Init>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d001      	beq.n	801121c <MMX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8011218:	f7ef fcc0 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 801121c:	bf00      	nop
 801121e:	bd80      	pop	{r7, pc}
 8011220:	200023d8 	.word	0x200023d8
 8011224:	40005400 	.word	0x40005400
 8011228:	000186a0 	.word	0x000186a0

0801122c <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 8011232:	2304      	movs	r3, #4
 8011234:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 8011236:	2200      	movs	r2, #0
 8011238:	2110      	movs	r1, #16
 801123a:	480b      	ldr	r0, [pc, #44]	; (8011268 <WriteProtect+0x3c>)
 801123c:	f7f1 ff10 	bl	8003060 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011240:	1d39      	adds	r1, r7, #4
 8011242:	2301      	movs	r3, #1
 8011244:	2201      	movs	r2, #1
 8011246:	4809      	ldr	r0, [pc, #36]	; (801126c <WriteProtect+0x40>)
 8011248:	f7f6 fb5f 	bl	800790a <HAL_SPI_Transmit>
 801124c:	4603      	mov	r3, r0
 801124e:	461a      	mov	r2, r3
 8011250:	4b07      	ldr	r3, [pc, #28]	; (8011270 <WriteProtect+0x44>)
 8011252:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 8011254:	2201      	movs	r2, #1
 8011256:	2110      	movs	r1, #16
 8011258:	4803      	ldr	r0, [pc, #12]	; (8011268 <WriteProtect+0x3c>)
 801125a:	f7f1 ff01 	bl	8003060 <HAL_GPIO_WritePin>
}
 801125e:	bf00      	nop
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	40020000 	.word	0x40020000
 801126c:	200024ac 	.word	0x200024ac
 8011270:	20007c62 	.word	0x20007c62

08011274 <WriteEnable>:
	MB85RS_CS_LOW;
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
	MB85RS_CS_HIGH;
	return reg[1];
}
void WriteEnable(){
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 801127a:	2306      	movs	r3, #6
 801127c:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 801127e:	2200      	movs	r2, #0
 8011280:	2110      	movs	r1, #16
 8011282:	480b      	ldr	r0, [pc, #44]	; (80112b0 <WriteEnable+0x3c>)
 8011284:	f7f1 feec 	bl	8003060 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011288:	1d39      	adds	r1, r7, #4
 801128a:	2301      	movs	r3, #1
 801128c:	2201      	movs	r2, #1
 801128e:	4809      	ldr	r0, [pc, #36]	; (80112b4 <WriteEnable+0x40>)
 8011290:	f7f6 fb3b 	bl	800790a <HAL_SPI_Transmit>
 8011294:	4603      	mov	r3, r0
 8011296:	461a      	mov	r2, r3
 8011298:	4b07      	ldr	r3, [pc, #28]	; (80112b8 <WriteEnable+0x44>)
 801129a:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 801129c:	2201      	movs	r2, #1
 801129e:	2110      	movs	r1, #16
 80112a0:	4803      	ldr	r0, [pc, #12]	; (80112b0 <WriteEnable+0x3c>)
 80112a2:	f7f1 fedd 	bl	8003060 <HAL_GPIO_WritePin>
}
 80112a6:	bf00      	nop
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	40020000 	.word	0x40020000
 80112b4:	200024ac 	.word	0x200024ac
 80112b8:	20007c62 	.word	0x20007c62

080112bc <MB85RS_erase>:
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
	MB85RS_CS_HIGH;
}

void MB85RS_erase()
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b0a4      	sub	sp, #144	; 0x90
 80112c0:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80112c2:	2302      	movs	r3, #2
 80112c4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 80112ce:	2300      	movs	r3, #0
 80112d0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 80112d4:	f7ff ffce 	bl	8011274 <WriteEnable>
	MB85RS_CS_LOW;
 80112d8:	2200      	movs	r2, #0
 80112da:	2110      	movs	r1, #16
 80112dc:	481d      	ldr	r0, [pc, #116]	; (8011354 <MB85RS_erase+0x98>)
 80112de:	f7f1 febf 	bl	8003060 <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 80112e2:	2300      	movs	r3, #0
 80112e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80112e8:	e00a      	b.n	8011300 <MB85RS_erase+0x44>
		datanull[i]=0;
 80112ea:	1d3a      	adds	r2, r7, #4
 80112ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112f0:	4413      	add	r3, r2
 80112f2:	2200      	movs	r2, #0
 80112f4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 80112f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112fa:	3301      	adds	r3, #1
 80112fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011304:	2b7f      	cmp	r3, #127	; 0x7f
 8011306:	ddf0      	ble.n	80112ea <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8011308:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801130c:	2364      	movs	r3, #100	; 0x64
 801130e:	2203      	movs	r2, #3
 8011310:	4811      	ldr	r0, [pc, #68]	; (8011358 <MB85RS_erase+0x9c>)
 8011312:	f7f6 fafa 	bl	800790a <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011316:	2300      	movs	r3, #0
 8011318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801131c:	e00a      	b.n	8011334 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 801131e:	1d39      	adds	r1, r7, #4
 8011320:	2364      	movs	r3, #100	; 0x64
 8011322:	2280      	movs	r2, #128	; 0x80
 8011324:	480c      	ldr	r0, [pc, #48]	; (8011358 <MB85RS_erase+0x9c>)
 8011326:	f7f6 faf0 	bl	800790a <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 801132a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801132e:	3301      	adds	r3, #1
 8011330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801133c:	ddef      	ble.n	801131e <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 801133e:	2201      	movs	r2, #1
 8011340:	2110      	movs	r1, #16
 8011342:	4804      	ldr	r0, [pc, #16]	; (8011354 <MB85RS_erase+0x98>)
 8011344:	f7f1 fe8c 	bl	8003060 <HAL_GPIO_WritePin>
	WriteProtect();
 8011348:	f7ff ff70 	bl	801122c <WriteProtect>
}
 801134c:	bf00      	nop
 801134e:	3790      	adds	r7, #144	; 0x90
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	40020000 	.word	0x40020000
 8011358:	200024ac 	.word	0x200024ac

0801135c <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;


/* data=6byte /second/minute/hour/day/month/year */
void RTC_SetTime(uint8_t* datatime)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b088      	sub	sp, #32
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime = {0};
 8011364:	f107 030c 	add.w	r3, r7, #12
 8011368:	2200      	movs	r2, #0
 801136a:	601a      	str	r2, [r3, #0]
 801136c:	605a      	str	r2, [r3, #4]
 801136e:	609a      	str	r2, [r3, #8]
 8011370:	60da      	str	r2, [r3, #12]
 8011372:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011374:	2300      	movs	r3, #0
 8011376:	60bb      	str	r3, [r7, #8]
  sTime.Hours = datatime[2];
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	789b      	ldrb	r3, [r3, #2]
 801137c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = datatime[1];
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	785b      	ldrb	r3, [r3, #1]
 8011382:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = datatime[0];
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801138a:	2300      	movs	r3, #0
 801138c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8011392:	f107 030c 	add.w	r3, r7, #12
 8011396:	2200      	movs	r2, #0
 8011398:	4619      	mov	r1, r3
 801139a:	4811      	ldr	r0, [pc, #68]	; (80113e0 <RTC_SetTime+0x84>)
 801139c:	f7f5 ff8a 	bl	80072b4 <HAL_RTC_SetTime>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d001      	beq.n	80113aa <RTC_SetTime+0x4e>
  {
    Error_Handler();
 80113a6:	f7ef fbf9 	bl	8000b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80113aa:	2301      	movs	r3, #1
 80113ac:	723b      	strb	r3, [r7, #8]
  sDate.Month = datatime[4];
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	791b      	ldrb	r3, [r3, #4]
 80113b2:	727b      	strb	r3, [r7, #9]
  sDate.Date = datatime[3];
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	78db      	ldrb	r3, [r3, #3]
 80113b8:	72bb      	strb	r3, [r7, #10]
  sDate.Year = datatime[5];
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	795b      	ldrb	r3, [r3, #5]
 80113be:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80113c0:	f107 0308 	add.w	r3, r7, #8
 80113c4:	2200      	movs	r2, #0
 80113c6:	4619      	mov	r1, r3
 80113c8:	4805      	ldr	r0, [pc, #20]	; (80113e0 <RTC_SetTime+0x84>)
 80113ca:	f7f6 f86b 	bl	80074a4 <HAL_RTC_SetDate>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <RTC_SetTime+0x7c>
  {
    Error_Handler();
 80113d4:	f7ef fbe2 	bl	8000b9c <Error_Handler>
  }
}
 80113d8:	bf00      	nop
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	2000248c 	.word	0x2000248c

080113e4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t responce_length;
uint16_t responce_period;


/* hàm callback khi phát pulse hoàn thành */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
	if(is_start_measure ==true){
 80113ec:	4b07      	ldr	r3, [pc, #28]	; (801140c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d004      	beq.n	80113fe <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		point_start_measure = TIM4->CNT;  // điểm bắt đầu đo đạc là giá trị TIM4->CNT hiện tại
 80113f4:	4b06      	ldr	r3, [pc, #24]	; (8011410 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80113f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	4b06      	ldr	r3, [pc, #24]	; (8011414 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80113fc:	801a      	strh	r2, [r3, #0]
	}
}
 80113fe:	bf00      	nop
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	20007c66 	.word	0x20007c66
 8011410:	40000800 	.word	0x40000800
 8011414:	20007c64 	.word	0x20007c64

08011418 <ScanPiecesInit>:

void ScanPiecesInit()
{
 8011418:	b580      	push	{r7, lr}
 801141a:	af00      	add	r7, sp, #0
	/*	mặc định kênh TIM_CCxN bị tắt, cần phải bật nó lên để có thể xuất xung PWM trên nó	*/
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 801141c:	4b09      	ldr	r3, [pc, #36]	; (8011444 <ScanPiecesInit+0x2c>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2204      	movs	r2, #4
 8011422:	2108      	movs	r1, #8
 8011424:	4618      	mov	r0, r3
 8011426:	f7f8 fa81 	bl	800992c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 801142a:	4b06      	ldr	r3, [pc, #24]	; (8011444 <ScanPiecesInit+0x2c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2204      	movs	r2, #4
 8011430:	2104      	movs	r1, #4
 8011432:	4618      	mov	r0, r3
 8011434:	f7f8 fa7a 	bl	800992c <TIM_CCxChannelCmd>
	HAL_TIM_Base_Start_IT(&htim4);
 8011438:	4803      	ldr	r0, [pc, #12]	; (8011448 <ScanPiecesInit+0x30>)
 801143a:	f7f6 fcbd 	bl	8007db8 <HAL_TIM_Base_Start_IT>
}
 801143e:	bf00      	nop
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	2000254c 	.word	0x2000254c
 8011448:	20002624 	.word	0x20002624

0801144c <PulseOut>:
// độ dài tối đa của length=20
void PulseOut(uint8_t type,uint8_t length,uint8_t outCoil)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	71fb      	strb	r3, [r7, #7]
 8011456:	460b      	mov	r3, r1
 8011458:	71bb      	strb	r3, [r7, #6]
 801145a:	4613      	mov	r3, r2
 801145c:	717b      	strb	r3, [r7, #5]
	uint16_t _length = length;
 801145e:	79bb      	ldrb	r3, [r7, #6]
 8011460:	827b      	strh	r3, [r7, #18]
	uint16_t period = 84000/ListFrequency[type]; // tính toán chu kỳ
 8011462:	79fb      	ldrb	r3, [r7, #7]
 8011464:	4a52      	ldr	r2, [pc, #328]	; (80115b0 <PulseOut+0x164>)
 8011466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801146a:	461a      	mov	r2, r3
 801146c:	4b51      	ldr	r3, [pc, #324]	; (80115b4 <PulseOut+0x168>)
 801146e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011472:	823b      	strh	r3, [r7, #16]
	uint16_t duty	 = period/2;
 8011474:	8a3b      	ldrh	r3, [r7, #16]
 8011476:	085b      	lsrs	r3, r3, #1
 8011478:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<_length;i++){
 801147a:	2300      	movs	r3, #0
 801147c:	617b      	str	r3, [r7, #20]
 801147e:	e00c      	b.n	801149a <PulseOut+0x4e>
			 pwmdata[i] = duty;
 8011480:	494d      	ldr	r1, [pc, #308]	; (80115b8 <PulseOut+0x16c>)
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	89fa      	ldrh	r2, [r7, #14]
 8011486:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			 pwmdata32[i] = (uint32_t)duty;
 801148a:	89fa      	ldrh	r2, [r7, #14]
 801148c:	494b      	ldr	r1, [pc, #300]	; (80115bc <PulseOut+0x170>)
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<_length;i++){
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	3301      	adds	r3, #1
 8011498:	617b      	str	r3, [r7, #20]
 801149a:	8a7b      	ldrh	r3, [r7, #18]
 801149c:	697a      	ldr	r2, [r7, #20]
 801149e:	429a      	cmp	r2, r3
 80114a0:	dbee      	blt.n	8011480 <PulseOut+0x34>
	}
	pwmdata[_length] =0;
 80114a2:	8a7b      	ldrh	r3, [r7, #18]
 80114a4:	4a44      	ldr	r2, [pc, #272]	; (80115b8 <PulseOut+0x16c>)
 80114a6:	2100      	movs	r1, #0
 80114a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pwmdata32[_length]=0;
 80114ac:	8a7b      	ldrh	r3, [r7, #18]
 80114ae:	4a43      	ldr	r2, [pc, #268]	; (80115bc <PulseOut+0x170>)
 80114b0:	2100      	movs	r1, #0
 80114b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	switch(outCoil){
 80114b6:	797b      	ldrb	r3, [r7, #5]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	2b07      	cmp	r3, #7
 80114bc:	d874      	bhi.n	80115a8 <PulseOut+0x15c>
 80114be:	a201      	add	r2, pc, #4	; (adr r2, 80114c4 <PulseOut+0x78>)
 80114c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114c4:	080114e5 	.word	0x080114e5
 80114c8:	080114fd 	.word	0x080114fd
 80114cc:	08011517 	.word	0x08011517
 80114d0:	0801152f 	.word	0x0801152f
 80114d4:	08011547 	.word	0x08011547
 80114d8:	0801155f 	.word	0x0801155f
 80114dc:	08011579 	.word	0x08011579
 80114e0:	08011591 	.word	0x08011591
	case 1:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 80114e4:	4a36      	ldr	r2, [pc, #216]	; (80115c0 <PulseOut+0x174>)
 80114e6:	8a3b      	ldrh	r3, [r7, #16]
 80114e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114ea:	8a7b      	ldrh	r3, [r7, #18]
 80114ec:	3301      	adds	r3, #1
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	4a31      	ldr	r2, [pc, #196]	; (80115b8 <PulseOut+0x16c>)
 80114f2:	2100      	movs	r1, #0
 80114f4:	4833      	ldr	r0, [pc, #204]	; (80115c4 <PulseOut+0x178>)
 80114f6:	f7f6 fd1b 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 80114fa:	e055      	b.n	80115a8 <PulseOut+0x15c>
	case 2:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *)pwmdata32, _length+1); 	break;
 80114fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011500:	8a3b      	ldrh	r3, [r7, #16]
 8011502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011504:	8a7b      	ldrh	r3, [r7, #18]
 8011506:	3301      	adds	r3, #1
 8011508:	b29b      	uxth	r3, r3
 801150a:	4a2c      	ldr	r2, [pc, #176]	; (80115bc <PulseOut+0x170>)
 801150c:	2104      	movs	r1, #4
 801150e:	482e      	ldr	r0, [pc, #184]	; (80115c8 <PulseOut+0x17c>)
 8011510:	f7f6 fd0e 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 8011514:	e048      	b.n	80115a8 <PulseOut+0x15c>
	case 3:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011516:	4a2d      	ldr	r2, [pc, #180]	; (80115cc <PulseOut+0x180>)
 8011518:	8a3b      	ldrh	r3, [r7, #16]
 801151a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801151c:	8a7b      	ldrh	r3, [r7, #18]
 801151e:	3301      	adds	r3, #1
 8011520:	b29b      	uxth	r3, r3
 8011522:	4a25      	ldr	r2, [pc, #148]	; (80115b8 <PulseOut+0x16c>)
 8011524:	2100      	movs	r1, #0
 8011526:	482a      	ldr	r0, [pc, #168]	; (80115d0 <PulseOut+0x184>)
 8011528:	f7f6 fd02 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 801152c:	e03c      	b.n	80115a8 <PulseOut+0x15c>
	case 4: TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 801152e:	4a27      	ldr	r2, [pc, #156]	; (80115cc <PulseOut+0x180>)
 8011530:	8a3b      	ldrh	r3, [r7, #16]
 8011532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011534:	8a7b      	ldrh	r3, [r7, #18]
 8011536:	3301      	adds	r3, #1
 8011538:	b29b      	uxth	r3, r3
 801153a:	4a1f      	ldr	r2, [pc, #124]	; (80115b8 <PulseOut+0x16c>)
 801153c:	2108      	movs	r1, #8
 801153e:	4824      	ldr	r0, [pc, #144]	; (80115d0 <PulseOut+0x184>)
 8011540:	f7f6 fcf6 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 8011544:	e030      	b.n	80115a8 <PulseOut+0x15c>
	case 5:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,(uint32_t *)pwmdata, _length+1); 	break;
 8011546:	4a21      	ldr	r2, [pc, #132]	; (80115cc <PulseOut+0x180>)
 8011548:	8a3b      	ldrh	r3, [r7, #16]
 801154a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801154c:	8a7b      	ldrh	r3, [r7, #18]
 801154e:	3301      	adds	r3, #1
 8011550:	b29b      	uxth	r3, r3
 8011552:	4a19      	ldr	r2, [pc, #100]	; (80115b8 <PulseOut+0x16c>)
 8011554:	2104      	movs	r1, #4
 8011556:	481e      	ldr	r0, [pc, #120]	; (80115d0 <PulseOut+0x184>)
 8011558:	f7f6 fcea 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 801155c:	e024      	b.n	80115a8 <PulseOut+0x15c>
	case 6:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3,(uint32_t *)pwmdata32, _length+1); 	break;
 801155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011562:	8a3b      	ldrh	r3, [r7, #16]
 8011564:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011566:	8a7b      	ldrh	r3, [r7, #18]
 8011568:	3301      	adds	r3, #1
 801156a:	b29b      	uxth	r3, r3
 801156c:	4a13      	ldr	r2, [pc, #76]	; (80115bc <PulseOut+0x170>)
 801156e:	2108      	movs	r1, #8
 8011570:	4815      	ldr	r0, [pc, #84]	; (80115c8 <PulseOut+0x17c>)
 8011572:	f7f6 fcdd 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 8011576:	e017      	b.n	80115a8 <PulseOut+0x15c>
	case 7:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,(uint32_t *)pwmdata, _length+1); 	break;
 8011578:	4a11      	ldr	r2, [pc, #68]	; (80115c0 <PulseOut+0x174>)
 801157a:	8a3b      	ldrh	r3, [r7, #16]
 801157c:	62d3      	str	r3, [r2, #44]	; 0x2c
 801157e:	8a7b      	ldrh	r3, [r7, #18]
 8011580:	3301      	adds	r3, #1
 8011582:	b29b      	uxth	r3, r3
 8011584:	4a0c      	ldr	r2, [pc, #48]	; (80115b8 <PulseOut+0x16c>)
 8011586:	210c      	movs	r1, #12
 8011588:	480e      	ldr	r0, [pc, #56]	; (80115c4 <PulseOut+0x178>)
 801158a:	f7f6 fcd1 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 801158e:	e00b      	b.n	80115a8 <PulseOut+0x15c>
	case 8:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011590:	4a0b      	ldr	r2, [pc, #44]	; (80115c0 <PulseOut+0x174>)
 8011592:	8a3b      	ldrh	r3, [r7, #16]
 8011594:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011596:	8a7b      	ldrh	r3, [r7, #18]
 8011598:	3301      	adds	r3, #1
 801159a:	b29b      	uxth	r3, r3
 801159c:	4a06      	ldr	r2, [pc, #24]	; (80115b8 <PulseOut+0x16c>)
 801159e:	2108      	movs	r1, #8
 80115a0:	4808      	ldr	r0, [pc, #32]	; (80115c4 <PulseOut+0x178>)
 80115a2:	f7f6 fcc5 	bl	8007f30 <HAL_TIM_PWM_Start_DMA>
 80115a6:	bf00      	nop
	}
}
 80115a8:	bf00      	nop
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	0801283c 	.word	0x0801283c
 80115b4:	00014820 	.word	0x00014820
 80115b8:	20008ee8 	.word	0x20008ee8
 80115bc:	20008f38 	.word	0x20008f38
 80115c0:	40000400 	.word	0x40000400
 80115c4:	200025dc 	.word	0x200025dc
 80115c8:	20002594 	.word	0x20002594
 80115cc:	40010000 	.word	0x40010000
 80115d0:	2000254c 	.word	0x2000254c

080115d4 <SelectReadCoil>:
void SelectReadCoil(uint8_t readCoil)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
	switch(readCoil){
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	3b01      	subs	r3, #1
 80115e2:	2b07      	cmp	r3, #7
 80115e4:	f200 809c 	bhi.w	8011720 <SelectReadCoil+0x14c>
 80115e8:	a201      	add	r2, pc, #4	; (adr r2, 80115f0 <SelectReadCoil+0x1c>)
 80115ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ee:	bf00      	nop
 80115f0:	08011611 	.word	0x08011611
 80115f4:	08011633 	.word	0x08011633
 80115f8:	08011655 	.word	0x08011655
 80115fc:	08011677 	.word	0x08011677
 8011600:	08011699 	.word	0x08011699
 8011604:	080116bb 	.word	0x080116bb
 8011608:	080116dd 	.word	0x080116dd
 801160c:	080116ff 	.word	0x080116ff
		case 1: CD4051_A_1; CD4051_B_0; CD4051_C_1;break; //coil_1 <-> X5
 8011610:	2201      	movs	r2, #1
 8011612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011616:	4844      	ldr	r0, [pc, #272]	; (8011728 <SelectReadCoil+0x154>)
 8011618:	f7f1 fd22 	bl	8003060 <HAL_GPIO_WritePin>
 801161c:	2200      	movs	r2, #0
 801161e:	2120      	movs	r1, #32
 8011620:	4842      	ldr	r0, [pc, #264]	; (801172c <SelectReadCoil+0x158>)
 8011622:	f7f1 fd1d 	bl	8003060 <HAL_GPIO_WritePin>
 8011626:	2201      	movs	r2, #1
 8011628:	2140      	movs	r1, #64	; 0x40
 801162a:	4840      	ldr	r0, [pc, #256]	; (801172c <SelectReadCoil+0x158>)
 801162c:	f7f1 fd18 	bl	8003060 <HAL_GPIO_WritePin>
 8011630:	e076      	b.n	8011720 <SelectReadCoil+0x14c>
		case 2: CD4051_A_1; CD4051_B_1; CD4051_C_1;break; //coil_2 <-> X7
 8011632:	2201      	movs	r2, #1
 8011634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011638:	483b      	ldr	r0, [pc, #236]	; (8011728 <SelectReadCoil+0x154>)
 801163a:	f7f1 fd11 	bl	8003060 <HAL_GPIO_WritePin>
 801163e:	2201      	movs	r2, #1
 8011640:	2120      	movs	r1, #32
 8011642:	483a      	ldr	r0, [pc, #232]	; (801172c <SelectReadCoil+0x158>)
 8011644:	f7f1 fd0c 	bl	8003060 <HAL_GPIO_WritePin>
 8011648:	2201      	movs	r2, #1
 801164a:	2140      	movs	r1, #64	; 0x40
 801164c:	4837      	ldr	r0, [pc, #220]	; (801172c <SelectReadCoil+0x158>)
 801164e:	f7f1 fd07 	bl	8003060 <HAL_GPIO_WritePin>
 8011652:	e065      	b.n	8011720 <SelectReadCoil+0x14c>
		case 3: CD4051_A_0; CD4051_B_1; CD4051_C_1;break; //coil_3 <-> X6
 8011654:	2200      	movs	r2, #0
 8011656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801165a:	4833      	ldr	r0, [pc, #204]	; (8011728 <SelectReadCoil+0x154>)
 801165c:	f7f1 fd00 	bl	8003060 <HAL_GPIO_WritePin>
 8011660:	2201      	movs	r2, #1
 8011662:	2120      	movs	r1, #32
 8011664:	4831      	ldr	r0, [pc, #196]	; (801172c <SelectReadCoil+0x158>)
 8011666:	f7f1 fcfb 	bl	8003060 <HAL_GPIO_WritePin>
 801166a:	2201      	movs	r2, #1
 801166c:	2140      	movs	r1, #64	; 0x40
 801166e:	482f      	ldr	r0, [pc, #188]	; (801172c <SelectReadCoil+0x158>)
 8011670:	f7f1 fcf6 	bl	8003060 <HAL_GPIO_WritePin>
 8011674:	e054      	b.n	8011720 <SelectReadCoil+0x14c>
		case 4: CD4051_A_0; CD4051_B_0; CD4051_C_1;break; //coil_4 <-> X4
 8011676:	2200      	movs	r2, #0
 8011678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801167c:	482a      	ldr	r0, [pc, #168]	; (8011728 <SelectReadCoil+0x154>)
 801167e:	f7f1 fcef 	bl	8003060 <HAL_GPIO_WritePin>
 8011682:	2200      	movs	r2, #0
 8011684:	2120      	movs	r1, #32
 8011686:	4829      	ldr	r0, [pc, #164]	; (801172c <SelectReadCoil+0x158>)
 8011688:	f7f1 fcea 	bl	8003060 <HAL_GPIO_WritePin>
 801168c:	2201      	movs	r2, #1
 801168e:	2140      	movs	r1, #64	; 0x40
 8011690:	4826      	ldr	r0, [pc, #152]	; (801172c <SelectReadCoil+0x158>)
 8011692:	f7f1 fce5 	bl	8003060 <HAL_GPIO_WritePin>
 8011696:	e043      	b.n	8011720 <SelectReadCoil+0x14c>
		case 5: CD4051_A_0; CD4051_B_1; CD4051_C_0;break; //coil_5 <-> X2
 8011698:	2200      	movs	r2, #0
 801169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801169e:	4822      	ldr	r0, [pc, #136]	; (8011728 <SelectReadCoil+0x154>)
 80116a0:	f7f1 fcde 	bl	8003060 <HAL_GPIO_WritePin>
 80116a4:	2201      	movs	r2, #1
 80116a6:	2120      	movs	r1, #32
 80116a8:	4820      	ldr	r0, [pc, #128]	; (801172c <SelectReadCoil+0x158>)
 80116aa:	f7f1 fcd9 	bl	8003060 <HAL_GPIO_WritePin>
 80116ae:	2200      	movs	r2, #0
 80116b0:	2140      	movs	r1, #64	; 0x40
 80116b2:	481e      	ldr	r0, [pc, #120]	; (801172c <SelectReadCoil+0x158>)
 80116b4:	f7f1 fcd4 	bl	8003060 <HAL_GPIO_WritePin>
 80116b8:	e032      	b.n	8011720 <SelectReadCoil+0x14c>
		case 6: CD4051_A_1; CD4051_B_0; CD4051_C_0;break; //coil_6 <-> X1
 80116ba:	2201      	movs	r2, #1
 80116bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80116c0:	4819      	ldr	r0, [pc, #100]	; (8011728 <SelectReadCoil+0x154>)
 80116c2:	f7f1 fccd 	bl	8003060 <HAL_GPIO_WritePin>
 80116c6:	2200      	movs	r2, #0
 80116c8:	2120      	movs	r1, #32
 80116ca:	4818      	ldr	r0, [pc, #96]	; (801172c <SelectReadCoil+0x158>)
 80116cc:	f7f1 fcc8 	bl	8003060 <HAL_GPIO_WritePin>
 80116d0:	2200      	movs	r2, #0
 80116d2:	2140      	movs	r1, #64	; 0x40
 80116d4:	4815      	ldr	r0, [pc, #84]	; (801172c <SelectReadCoil+0x158>)
 80116d6:	f7f1 fcc3 	bl	8003060 <HAL_GPIO_WritePin>
 80116da:	e021      	b.n	8011720 <SelectReadCoil+0x14c>
		case 7: CD4051_A_0; CD4051_B_0; CD4051_C_0;break; //coil_7 <-> X0
 80116dc:	2200      	movs	r2, #0
 80116de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80116e2:	4811      	ldr	r0, [pc, #68]	; (8011728 <SelectReadCoil+0x154>)
 80116e4:	f7f1 fcbc 	bl	8003060 <HAL_GPIO_WritePin>
 80116e8:	2200      	movs	r2, #0
 80116ea:	2120      	movs	r1, #32
 80116ec:	480f      	ldr	r0, [pc, #60]	; (801172c <SelectReadCoil+0x158>)
 80116ee:	f7f1 fcb7 	bl	8003060 <HAL_GPIO_WritePin>
 80116f2:	2200      	movs	r2, #0
 80116f4:	2140      	movs	r1, #64	; 0x40
 80116f6:	480d      	ldr	r0, [pc, #52]	; (801172c <SelectReadCoil+0x158>)
 80116f8:	f7f1 fcb2 	bl	8003060 <HAL_GPIO_WritePin>
 80116fc:	e010      	b.n	8011720 <SelectReadCoil+0x14c>
		case 8: CD4051_A_1; CD4051_B_1; CD4051_C_0;break; //coil_8 <-> X3
 80116fe:	2201      	movs	r2, #1
 8011700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011704:	4808      	ldr	r0, [pc, #32]	; (8011728 <SelectReadCoil+0x154>)
 8011706:	f7f1 fcab 	bl	8003060 <HAL_GPIO_WritePin>
 801170a:	2201      	movs	r2, #1
 801170c:	2120      	movs	r1, #32
 801170e:	4807      	ldr	r0, [pc, #28]	; (801172c <SelectReadCoil+0x158>)
 8011710:	f7f1 fca6 	bl	8003060 <HAL_GPIO_WritePin>
 8011714:	2200      	movs	r2, #0
 8011716:	2140      	movs	r1, #64	; 0x40
 8011718:	4804      	ldr	r0, [pc, #16]	; (801172c <SelectReadCoil+0x158>)
 801171a:	f7f1 fca1 	bl	8003060 <HAL_GPIO_WritePin>
 801171e:	bf00      	nop
	}
}
 8011720:	bf00      	nop
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	40020000 	.word	0x40020000
 801172c:	40020400 	.word	0x40020400

08011730 <StartInputPWM>:
void StartInputPWM(uint8_t type)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	4603      	mov	r3, r0
 8011738:	71fb      	strb	r3, [r7, #7]
	is_start_measure = true;  															// bật flag measure
 801173a:	4b0c      	ldr	r3, [pc, #48]	; (801176c <StartInputPWM+0x3c>)
 801173c:	2201      	movs	r2, #1
 801173e:	701a      	strb	r2, [r3, #0]
	memset(inputCapture_data,0,sizeof(inputCapture_data)); 								// clear ic_data
 8011740:	2264      	movs	r2, #100	; 0x64
 8011742:	2100      	movs	r1, #0
 8011744:	480a      	ldr	r0, [pc, #40]	; (8011770 <StartInputPWM+0x40>)
 8011746:	f001 f80d 	bl	8012764 <memset>
	TIM4->ARR = ListIC_measure[type];  													// xác định khoảng đo tối đa
 801174a:	79fb      	ldrb	r3, [r7, #7]
 801174c:	4a09      	ldr	r2, [pc, #36]	; (8011774 <StartInputPWM+0x44>)
 801174e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011752:	4b09      	ldr	r3, [pc, #36]	; (8011778 <StartInputPWM+0x48>)
 8011754:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
 8011756:	2332      	movs	r3, #50	; 0x32
 8011758:	4a05      	ldr	r2, [pc, #20]	; (8011770 <StartInputPWM+0x40>)
 801175a:	2104      	movs	r1, #4
 801175c:	4807      	ldr	r0, [pc, #28]	; (801177c <StartInputPWM+0x4c>)
 801175e:	f7f6 fdf1 	bl	8008344 <HAL_TIM_IC_Start_DMA>
}
 8011762:	bf00      	nop
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	20007c66 	.word	0x20007c66
 8011770:	20008fd8 	.word	0x20008fd8
 8011774:	08012888 	.word	0x08012888
 8011778:	40000800 	.word	0x40000800
 801177c:	20002624 	.word	0x20002624

08011780 <Measure>:
void Measure(uint8_t type,uint8_t outCoil,uint8_t readCoil)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	71fb      	strb	r3, [r7, #7]
 801178a:	460b      	mov	r3, r1
 801178c:	71bb      	strb	r3, [r7, #6]
 801178e:	4613      	mov	r3, r2
 8011790:	717b      	strb	r3, [r7, #5]
	PulseOut(type,10, outCoil);
 8011792:	79ba      	ldrb	r2, [r7, #6]
 8011794:	79fb      	ldrb	r3, [r7, #7]
 8011796:	210a      	movs	r1, #10
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fe57 	bl	801144c <PulseOut>
	SelectReadCoil(readCoil);
 801179e:	797b      	ldrb	r3, [r7, #5]
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff ff17 	bl	80115d4 <SelectReadCoil>
	StartInputPWM(type);
 80117a6:	79fb      	ldrb	r3, [r7, #7]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7ff ffc1 	bl	8011730 <StartInputPWM>
	startmeasure=0;
 80117ae:	4b66      	ldr	r3, [pc, #408]	; (8011948 <Measure+0x1c8>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	801a      	strh	r2, [r3, #0]
	stopmeasure=0;
 80117b4:	4b65      	ldr	r3, [pc, #404]	; (801194c <Measure+0x1cc>)
 80117b6:	2200      	movs	r2, #0
 80117b8:	801a      	strh	r2, [r3, #0]
	responce_length=0;
 80117ba:	4b65      	ldr	r3, [pc, #404]	; (8011950 <Measure+0x1d0>)
 80117bc:	2200      	movs	r2, #0
 80117be:	701a      	strb	r2, [r3, #0]
	responce_period=0;
 80117c0:	4b64      	ldr	r3, [pc, #400]	; (8011954 <Measure+0x1d4>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	801a      	strh	r2, [r3, #0]
	uint8_t sq = FileRankToSquare(outCoil, readCoil);
 80117c6:	797a      	ldrb	r2, [r7, #5]
 80117c8:	79bb      	ldrb	r3, [r7, #6]
 80117ca:	4611      	mov	r1, r2
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 f95b 	bl	8011a88 <FileRankToSquare>
 80117d2:	4603      	mov	r3, r0
 80117d4:	73fb      	strb	r3, [r7, #15]

	while(is_start_measure){};  // chờ cho quá trình đo PWM hoàn thành
 80117d6:	bf00      	nop
 80117d8:	4b5f      	ldr	r3, [pc, #380]	; (8011958 <Measure+0x1d8>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1fb      	bne.n	80117d8 <Measure+0x58>

	/* Pulse input được đo từ lúc phát PulseOut đến timesIC_measure[tupe]
	 * để xác định số Pulses ta chỉ tính Pulse phản hồi (từ lúc phát Pulse kết thúc) đến giới hạn thời gian đo */

	// xác định điểm đầu Measure
	for(int i=0;i<IC_MAX;i++){
 80117e0:	2300      	movs	r3, #0
 80117e2:	617b      	str	r3, [r7, #20]
 80117e4:	e02d      	b.n	8011842 <Measure+0xc2>
		if(inputCapture_data[i] >point_start_measure){
 80117e6:	4a5d      	ldr	r2, [pc, #372]	; (801195c <Measure+0x1dc>)
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80117ee:	4b5c      	ldr	r3, [pc, #368]	; (8011960 <Measure+0x1e0>)
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d904      	bls.n	8011800 <Measure+0x80>
			startmeasure=i;
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	4b53      	ldr	r3, [pc, #332]	; (8011948 <Measure+0x1c8>)
 80117fc:	801a      	strh	r2, [r3, #0]
			break;
 80117fe:	e023      	b.n	8011848 <Measure+0xc8>
		}else if(inputCapture_data[i]==0){ // nếu ko có xung nào nhận được
 8011800:	4a56      	ldr	r2, [pc, #344]	; (801195c <Measure+0x1dc>)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d117      	bne.n	801183c <Measure+0xbc>
			responce_length=0;
 801180c:	4b50      	ldr	r3, [pc, #320]	; (8011950 <Measure+0x1d0>)
 801180e:	2200      	movs	r2, #0
 8011810:	701a      	strb	r2, [r3, #0]
			responce_period=0;
 8011812:	4b50      	ldr	r3, [pc, #320]	; (8011954 <Measure+0x1d4>)
 8011814:	2200      	movs	r2, #0
 8011816:	801a      	strh	r2, [r3, #0]
			datapieces[type][sq][PULSES]=0;
 8011818:	79fa      	ldrb	r2, [r7, #7]
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	4951      	ldr	r1, [pc, #324]	; (8011964 <Measure+0x1e4>)
 801181e:	0192      	lsls	r2, r2, #6
 8011820:	4413      	add	r3, r2
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	440b      	add	r3, r1
 8011826:	2200      	movs	r2, #0
 8011828:	805a      	strh	r2, [r3, #2]
			datapieces[type][sq][PERIOD]=0;
 801182a:	79fa      	ldrb	r2, [r7, #7]
 801182c:	7bfb      	ldrb	r3, [r7, #15]
 801182e:	494d      	ldr	r1, [pc, #308]	; (8011964 <Measure+0x1e4>)
 8011830:	0192      	lsls	r2, r2, #6
 8011832:	4413      	add	r3, r2
 8011834:	2200      	movs	r2, #0
 8011836:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			return;
 801183a:	e082      	b.n	8011942 <Measure+0x1c2>
	for(int i=0;i<IC_MAX;i++){
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	3301      	adds	r3, #1
 8011840:	617b      	str	r3, [r7, #20]
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2b31      	cmp	r3, #49	; 0x31
 8011846:	ddce      	ble.n	80117e6 <Measure+0x66>
		}
	}

	// xác định điểm cuối Measure
	for(int i=startmeasure;i<IC_MAX-1;i++){
 8011848:	4b3f      	ldr	r3, [pc, #252]	; (8011948 <Measure+0x1c8>)
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	613b      	str	r3, [r7, #16]
 801184e:	e011      	b.n	8011874 <Measure+0xf4>
		stopmeasure=i;
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	b29a      	uxth	r2, r3
 8011854:	4b3d      	ldr	r3, [pc, #244]	; (801194c <Measure+0x1cc>)
 8011856:	801a      	strh	r2, [r3, #0]
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	3301      	adds	r3, #1
 801185c:	4a3f      	ldr	r2, [pc, #252]	; (801195c <Measure+0x1dc>)
 801185e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8011862:	493e      	ldr	r1, [pc, #248]	; (801195c <Measure+0x1dc>)
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801186a:	429a      	cmp	r2, r3
 801186c:	d306      	bcc.n	801187c <Measure+0xfc>
	for(int i=startmeasure;i<IC_MAX-1;i++){
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	3301      	adds	r3, #1
 8011872:	613b      	str	r3, [r7, #16]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	2b30      	cmp	r3, #48	; 0x30
 8011878:	ddea      	ble.n	8011850 <Measure+0xd0>
 801187a:	e000      	b.n	801187e <Measure+0xfe>
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 801187c:	bf00      	nop
	}
	if(inputCapture_data[IC_MAX-1]!=0) stopmeasure=IC_MAX;
 801187e:	4b37      	ldr	r3, [pc, #220]	; (801195c <Measure+0x1dc>)
 8011880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011884:	2b00      	cmp	r3, #0
 8011886:	d002      	beq.n	801188e <Measure+0x10e>
 8011888:	4b30      	ldr	r3, [pc, #192]	; (801194c <Measure+0x1cc>)
 801188a:	2232      	movs	r2, #50	; 0x32
 801188c:	801a      	strh	r2, [r3, #0]

	// tính toán số lượng Pulses phản hồi
	responce_length = stopmeasure-startmeasure;
 801188e:	4b2f      	ldr	r3, [pc, #188]	; (801194c <Measure+0x1cc>)
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	b2da      	uxtb	r2, r3
 8011894:	4b2c      	ldr	r3, [pc, #176]	; (8011948 <Measure+0x1c8>)
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	b2db      	uxtb	r3, r3
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	b2da      	uxtb	r2, r3
 801189e:	4b2c      	ldr	r3, [pc, #176]	; (8011950 <Measure+0x1d0>)
 80118a0:	701a      	strb	r2, [r3, #0]

	// tính period phản hồi
	if(responce_length>=5){
 80118a2:	4b2b      	ldr	r3, [pc, #172]	; (8011950 <Measure+0x1d0>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	2b04      	cmp	r3, #4
 80118a8:	d917      	bls.n	80118da <Measure+0x15a>
		responce_period = (inputCapture_data[startmeasure+5] - inputCapture_data[startmeasure]) / 5;
 80118aa:	4b27      	ldr	r3, [pc, #156]	; (8011948 <Measure+0x1c8>)
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	3305      	adds	r3, #5
 80118b0:	4a2a      	ldr	r2, [pc, #168]	; (801195c <Measure+0x1dc>)
 80118b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118b6:	461a      	mov	r2, r3
 80118b8:	4b23      	ldr	r3, [pc, #140]	; (8011948 <Measure+0x1c8>)
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	4619      	mov	r1, r3
 80118be:	4b27      	ldr	r3, [pc, #156]	; (801195c <Measure+0x1dc>)
 80118c0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	4a28      	ldr	r2, [pc, #160]	; (8011968 <Measure+0x1e8>)
 80118c8:	fb82 1203 	smull	r1, r2, r2, r3
 80118cc:	1052      	asrs	r2, r2, #1
 80118ce:	17db      	asrs	r3, r3, #31
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	4b1f      	ldr	r3, [pc, #124]	; (8011954 <Measure+0x1d4>)
 80118d6:	801a      	strh	r2, [r3, #0]
 80118d8:	e01d      	b.n	8011916 <Measure+0x196>
	}else if(responce_length>3){
 80118da:	4b1d      	ldr	r3, [pc, #116]	; (8011950 <Measure+0x1d0>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	2b03      	cmp	r3, #3
 80118e0:	d919      	bls.n	8011916 <Measure+0x196>
		responce_period = (inputCapture_data[startmeasure+responce_length-1]-inputCapture_data[startmeasure])/(responce_length-1);
 80118e2:	4b19      	ldr	r3, [pc, #100]	; (8011948 <Measure+0x1c8>)
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	461a      	mov	r2, r3
 80118e8:	4b19      	ldr	r3, [pc, #100]	; (8011950 <Measure+0x1d0>)
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	4413      	add	r3, r2
 80118ee:	3b01      	subs	r3, #1
 80118f0:	4a1a      	ldr	r2, [pc, #104]	; (801195c <Measure+0x1dc>)
 80118f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118f6:	461a      	mov	r2, r3
 80118f8:	4b13      	ldr	r3, [pc, #76]	; (8011948 <Measure+0x1c8>)
 80118fa:	881b      	ldrh	r3, [r3, #0]
 80118fc:	4619      	mov	r1, r3
 80118fe:	4b17      	ldr	r3, [pc, #92]	; (801195c <Measure+0x1dc>)
 8011900:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8011904:	1ad2      	subs	r2, r2, r3
 8011906:	4b12      	ldr	r3, [pc, #72]	; (8011950 <Measure+0x1d0>)
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	3b01      	subs	r3, #1
 801190c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011910:	b29a      	uxth	r2, r3
 8011912:	4b10      	ldr	r3, [pc, #64]	; (8011954 <Measure+0x1d4>)
 8011914:	801a      	strh	r2, [r3, #0]
	}
	// đặt số xung phản hồi vào từng ô
	datapieces[type][sq][PULSES]=responce_length;
 8011916:	4b0e      	ldr	r3, [pc, #56]	; (8011950 <Measure+0x1d0>)
 8011918:	7819      	ldrb	r1, [r3, #0]
 801191a:	79fa      	ldrb	r2, [r7, #7]
 801191c:	7bfb      	ldrb	r3, [r7, #15]
 801191e:	b288      	uxth	r0, r1
 8011920:	4910      	ldr	r1, [pc, #64]	; (8011964 <Measure+0x1e4>)
 8011922:	0192      	lsls	r2, r2, #6
 8011924:	4413      	add	r3, r2
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	440b      	add	r3, r1
 801192a:	4602      	mov	r2, r0
 801192c:	805a      	strh	r2, [r3, #2]
	datapieces[type][sq][PERIOD]=responce_period;
 801192e:	79fa      	ldrb	r2, [r7, #7]
 8011930:	7bfb      	ldrb	r3, [r7, #15]
 8011932:	4908      	ldr	r1, [pc, #32]	; (8011954 <Measure+0x1d4>)
 8011934:	8808      	ldrh	r0, [r1, #0]
 8011936:	490b      	ldr	r1, [pc, #44]	; (8011964 <Measure+0x1e4>)
 8011938:	0192      	lsls	r2, r2, #6
 801193a:	4413      	add	r3, r2
 801193c:	4602      	mov	r2, r0
 801193e:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
}
 8011942:	3718      	adds	r7, #24
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	2000903c 	.word	0x2000903c
 801194c:	2000903e 	.word	0x2000903e
 8011950:	20009040 	.word	0x20009040
 8011954:	20009042 	.word	0x20009042
 8011958:	20007c66 	.word	0x20007c66
 801195c:	20008fd8 	.word	0x20008fd8
 8011960:	20007c64 	.word	0x20007c64
 8011964:	20007c68 	.word	0x20007c68
 8011968:	66666667 	.word	0x66666667

0801196c <Scan>:
/* hàm quét Pieces
 * Return 0: quá trình quét hoàn tất và không phát hiện sự thay đổi của FEN
 * Return 1: quá trình quét hoàn tất và phát hiện có sự thay đổi FEN
 * Return 2: quá trình quét có xảy ra ChessClock Side Thay đổi */
uint8_t Scan()
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
	bool isChessclockInterrupt = false;
 8011972:	2300      	movs	r3, #0
 8011974:	75fb      	strb	r3, [r7, #23]
	CHESSCLOCKINTERRUPT:
	memset(datamain,0,sizeof(datamain)); // clear data
 8011976:	2240      	movs	r2, #64	; 0x40
 8011978:	2100      	movs	r1, #0
 801197a:	4841      	ldr	r0, [pc, #260]	; (8011a80 <Scan+0x114>)
 801197c:	f000 fef2 	bl	8012764 <memset>
	for(int type=17;type>=0;type--){
 8011980:	2311      	movs	r3, #17
 8011982:	613b      	str	r3, [r7, #16]
 8011984:	e068      	b.n	8011a58 <Scan+0xec>
		for(int outCoil=1;outCoil<=8;outCoil++){
 8011986:	2301      	movs	r3, #1
 8011988:	60fb      	str	r3, [r7, #12]
 801198a:	e02d      	b.n	80119e8 <Scan+0x7c>
			for(int readCoil=1;readCoil<=8;readCoil++){
 801198c:	2301      	movs	r3, #1
 801198e:	60bb      	str	r3, [r7, #8]
 8011990:	e024      	b.n	80119dc <Scan+0x70>

				if(chessclock_interrup==true){
 8011992:	4b3c      	ldr	r3, [pc, #240]	; (8011a84 <Scan+0x118>)
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d005      	beq.n	80119a6 <Scan+0x3a>
					chessclock_interrup=false;
 801199a:	4b3a      	ldr	r3, [pc, #232]	; (8011a84 <Scan+0x118>)
 801199c:	2200      	movs	r2, #0
 801199e:	701a      	strb	r2, [r3, #0]
					isChessclockInterrupt = true;
 80119a0:	2301      	movs	r3, #1
 80119a2:	75fb      	strb	r3, [r7, #23]
 80119a4:	e7e7      	b.n	8011976 <Scan+0xa>
					goto CHESSCLOCKINTERRUPT; // tiến hành quét lại từ đầu
				}

				uint8_t sq = FileRankToSquare(outCoil, readCoil);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	68ba      	ldr	r2, [r7, #8]
 80119ac:	b2d2      	uxtb	r2, r2
 80119ae:	4611      	mov	r1, r2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f000 f869 	bl	8011a88 <FileRankToSquare>
 80119b6:	4603      	mov	r3, r0
 80119b8:	71fb      	strb	r3, [r7, #7]
				if(datamain[sq]==0){  // nếu ô quét chưa thấy piece nào thì tiến hành đo đạc
 80119ba:	79fb      	ldrb	r3, [r7, #7]
 80119bc:	4a30      	ldr	r2, [pc, #192]	; (8011a80 <Scan+0x114>)
 80119be:	5cd3      	ldrb	r3, [r2, r3]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d108      	bne.n	80119d6 <Scan+0x6a>
					Measure(type,outCoil,readCoil);
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	68fa      	ldr	r2, [r7, #12]
 80119ca:	b2d1      	uxtb	r1, r2
 80119cc:	68ba      	ldr	r2, [r7, #8]
 80119ce:	b2d2      	uxtb	r2, r2
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7ff fed5 	bl	8011780 <Measure>
			for(int readCoil=1;readCoil<=8;readCoil++){
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3301      	adds	r3, #1
 80119da:	60bb      	str	r3, [r7, #8]
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	2b08      	cmp	r3, #8
 80119e0:	ddd7      	ble.n	8011992 <Scan+0x26>
		for(int outCoil=1;outCoil<=8;outCoil++){
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3301      	adds	r3, #1
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b08      	cmp	r3, #8
 80119ec:	ddce      	ble.n	801198c <Scan+0x20>
				}
			}
		}
		// chọn piece mạnh nhất
		SQData firstMax,secondMax;
		FindMax(type, &firstMax, &secondMax);
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	463a      	mov	r2, r7
 80119f4:	1d39      	adds	r1, r7, #4
 80119f6:	4618      	mov	r0, r3
 80119f8:	f000 f88e 	bl	8011b18 <FindMax>

		// WKING & BKING chỉ chọn 1 giá trị lớn nhất
		if(type == 0 || type==5){
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d002      	beq.n	8011a08 <Scan+0x9c>
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	2b05      	cmp	r3, #5
 8011a06:	d10c      	bne.n	8011a22 <Scan+0xb6>
			if(firstMax.square >=0){
 8011a08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	db20      	blt.n	8011a52 <Scan+0xe6>
				datamain[firstMax.square] = type+1;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	b2d9      	uxtb	r1, r3
 8011a1c:	4b18      	ldr	r3, [pc, #96]	; (8011a80 <Scan+0x114>)
 8011a1e:	5499      	strb	r1, [r3, r2]
			if(firstMax.square >=0){
 8011a20:	e017      	b.n	8011a52 <Scan+0xe6>
			}
		}else{
			if(firstMax.square >=0){
 8011a22:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	db07      	blt.n	8011a3a <Scan+0xce>
				datamain[firstMax.square] = type+1;
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8011a32:	3301      	adds	r3, #1
 8011a34:	b2d9      	uxtb	r1, r3
 8011a36:	4b12      	ldr	r3, [pc, #72]	; (8011a80 <Scan+0x114>)
 8011a38:	5499      	strb	r1, [r3, r2]
			}
			if(secondMax.square >=0){
 8011a3a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	db07      	blt.n	8011a52 <Scan+0xe6>
				datamain[secondMax.square] = type+1;
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	b2d9      	uxtb	r1, r3
 8011a4e:	4b0c      	ldr	r3, [pc, #48]	; (8011a80 <Scan+0x114>)
 8011a50:	5499      	strb	r1, [r3, r2]
	for(int type=17;type>=0;type--){
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	3b01      	subs	r3, #1
 8011a56:	613b      	str	r3, [r7, #16]
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	da93      	bge.n	8011986 <Scan+0x1a>
			}
		}
	}
	if(DetectFenChange()) return 1;
 8011a5e:	f000 f82d 	bl	8011abc <DetectFenChange>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <Scan+0x100>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e005      	b.n	8011a78 <Scan+0x10c>
	if(isChessclockInterrupt) return 2;
 8011a6c:	7dfb      	ldrb	r3, [r7, #23]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <Scan+0x10a>
 8011a72:	2302      	movs	r3, #2
 8011a74:	e000      	b.n	8011a78 <Scan+0x10c>
	return 0;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3718      	adds	r7, #24
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	20008e68 	.word	0x20008e68
 8011a84:	20007c48 	.word	0x20007c48

08011a88 <FileRankToSquare>:


// file:1->8 rank:1->8 (file=outCoil , rank=readCoil)
uint8_t FileRankToSquare(uint8_t file,uint8_t rank)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	4603      	mov	r3, r0
 8011a90:	460a      	mov	r2, r1
 8011a92:	71fb      	strb	r3, [r7, #7]
 8011a94:	4613      	mov	r3, r2
 8011a96:	71bb      	strb	r3, [r7, #6]
	return (8-file)*8 + rank-1;
 8011a98:	79fb      	ldrb	r3, [r7, #7]
 8011a9a:	f1c3 0308 	rsb	r3, r3, #8
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	00db      	lsls	r3, r3, #3
 8011aa2:	b2da      	uxtb	r2, r3
 8011aa4:	79bb      	ldrb	r3, [r7, #6]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	b2db      	uxtb	r3, r3
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
	...

08011abc <DetectFenChange>:

/* Tìm sự thay đổi của FEN */
bool DetectFenChange()
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
	bool resuft=false;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<64;i++){
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	603b      	str	r3, [r7, #0]
 8011aca:	e017      	b.n	8011afc <DetectFenChange+0x40>
		if(datamain[i] != datamain_old[i]){
 8011acc:	4a10      	ldr	r2, [pc, #64]	; (8011b10 <DetectFenChange+0x54>)
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	781a      	ldrb	r2, [r3, #0]
 8011ad4:	490f      	ldr	r1, [pc, #60]	; (8011b14 <DetectFenChange+0x58>)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	440b      	add	r3, r1
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d00a      	beq.n	8011af6 <DetectFenChange+0x3a>
			resuft = true;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	71fb      	strb	r3, [r7, #7]
			datamain_old[i] = datamain[i];
 8011ae4:	4a0a      	ldr	r2, [pc, #40]	; (8011b10 <DetectFenChange+0x54>)
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	4413      	add	r3, r2
 8011aea:	7819      	ldrb	r1, [r3, #0]
 8011aec:	4a09      	ldr	r2, [pc, #36]	; (8011b14 <DetectFenChange+0x58>)
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	4413      	add	r3, r2
 8011af2:	460a      	mov	r2, r1
 8011af4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	3301      	adds	r3, #1
 8011afa:	603b      	str	r3, [r7, #0]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	2b3f      	cmp	r3, #63	; 0x3f
 8011b00:	dde4      	ble.n	8011acc <DetectFenChange+0x10>
		}
	}
	return resuft;
 8011b02:	79fb      	ldrb	r3, [r7, #7]
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr
 8011b10:	20008e68 	.word	0x20008e68
 8011b14:	20008ea8 	.word	0x20008ea8

08011b18 <FindMax>:


void FindMax(uint8_t type, SQData *sqFirstMax,SQData *sqSecondMax)
{
 8011b18:	b590      	push	{r4, r7, lr}
 8011b1a:	b087      	sub	sp, #28
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	73fb      	strb	r3, [r7, #15]
	// hàm tìm ra 2 ô có tín hiệu trong khoảng tần số và và số xung phản hồi đạt ngưỡng
	sqFirstMax->pulses	= -1;	sqFirstMax->square 	= -1;
 8011b26:	68bb      	ldr	r3, [r7, #8]
 8011b28:	22ff      	movs	r2, #255	; 0xff
 8011b2a:	701a      	strb	r2, [r3, #0]
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	22ff      	movs	r2, #255	; 0xff
 8011b30:	705a      	strb	r2, [r3, #1]
	sqSecondMax->pulses = -2;	sqSecondMax->square = -2;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	22fe      	movs	r2, #254	; 0xfe
 8011b36:	701a      	strb	r2, [r3, #0]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	22fe      	movs	r2, #254	; 0xfe
 8011b3c:	705a      	strb	r2, [r3, #1]
	for(int sq=0;sq<64;sq++){
 8011b3e:	2300      	movs	r3, #0
 8011b40:	617b      	str	r3, [r7, #20]
 8011b42:	e075      	b.n	8011c30 <FindMax+0x118>
		// số xung phải lớn hơn ngưỡng calibase
		if(datapieces[type][sq][PULSES] >= getMarkSq(type, sq))
 8011b44:	7bfb      	ldrb	r3, [r7, #15]
 8011b46:	493e      	ldr	r1, [pc, #248]	; (8011c40 <FindMax+0x128>)
 8011b48:	019a      	lsls	r2, r3, #6
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	440b      	add	r3, r1
 8011b52:	885c      	ldrh	r4, [r3, #2]
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
 8011b5a:	4611      	mov	r1, r2
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f000 f947 	bl	8011df0 <getMarkSq>
 8011b62:	4603      	mov	r3, r0
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	429c      	cmp	r4, r3
 8011b68:	d35f      	bcc.n	8011c2a <FindMax+0x112>
		{	// period phải nằm trong khoảng của type piece
			if(datapieces[type][sq][PERIOD] <= mark_period[type] && datapieces[type][sq][PERIOD] >mark_period[type+1])
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	4934      	ldr	r1, [pc, #208]	; (8011c40 <FindMax+0x128>)
 8011b6e:	019a      	lsls	r2, r3, #6
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	4413      	add	r3, r2
 8011b74:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
 8011b7a:	4932      	ldr	r1, [pc, #200]	; (8011c44 <FindMax+0x12c>)
 8011b7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d852      	bhi.n	8011c2a <FindMax+0x112>
 8011b84:	7bfb      	ldrb	r3, [r7, #15]
 8011b86:	492e      	ldr	r1, [pc, #184]	; (8011c40 <FindMax+0x128>)
 8011b88:	019a      	lsls	r2, r3, #6
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8011b92:	7bfb      	ldrb	r3, [r7, #15]
 8011b94:	3301      	adds	r3, #1
 8011b96:	492b      	ldr	r1, [pc, #172]	; (8011c44 <FindMax+0x12c>)
 8011b98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d944      	bls.n	8011c2a <FindMax+0x112>
			{	// nếu NewValue >= FirstMax thì FirstMax = NewValue và SecondMax = FirstMax
				if(datapieces[type][sq][PULSES] >= sqFirstMax->pulses){
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
 8011ba2:	4927      	ldr	r1, [pc, #156]	; (8011c40 <FindMax+0x128>)
 8011ba4:	019a      	lsls	r2, r3, #6
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	4413      	add	r3, r2
 8011baa:	009b      	lsls	r3, r3, #2
 8011bac:	440b      	add	r3, r1
 8011bae:	885b      	ldrh	r3, [r3, #2]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	db19      	blt.n	8011bf0 <FindMax+0xd8>
					sqSecondMax->pulses = sqFirstMax->pulses;
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	f993 2000 	ldrsb.w	r2, [r3]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	701a      	strb	r2, [r3, #0]
					sqSecondMax->square = sqFirstMax->square;
 8011bc6:	68bb      	ldr	r3, [r7, #8]
 8011bc8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	705a      	strb	r2, [r3, #1]
					sqFirstMax->pulses = datapieces[type][sq][PULSES];
 8011bd0:	7bfb      	ldrb	r3, [r7, #15]
 8011bd2:	491b      	ldr	r1, [pc, #108]	; (8011c40 <FindMax+0x128>)
 8011bd4:	019a      	lsls	r2, r3, #6
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	4413      	add	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	885b      	ldrh	r3, [r3, #2]
 8011be0:	b25a      	sxtb	r2, r3
 8011be2:	68bb      	ldr	r3, [r7, #8]
 8011be4:	701a      	strb	r2, [r3, #0]
					sqFirstMax->square = sq;
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	b25a      	sxtb	r2, r3
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	705a      	strb	r2, [r3, #1]
 8011bee:	e01c      	b.n	8011c2a <FindMax+0x112>
				}else if(datapieces[type][sq][PULSES] > sqSecondMax->pulses){ // nếu NewValue Chỉ > SecondMax thì SecondMax=NewValue
 8011bf0:	7bfb      	ldrb	r3, [r7, #15]
 8011bf2:	4913      	ldr	r1, [pc, #76]	; (8011c40 <FindMax+0x128>)
 8011bf4:	019a      	lsls	r2, r3, #6
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	440b      	add	r3, r1
 8011bfe:	885b      	ldrh	r3, [r3, #2]
 8011c00:	461a      	mov	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f993 3000 	ldrsb.w	r3, [r3]
 8011c08:	429a      	cmp	r2, r3
 8011c0a:	dd0e      	ble.n	8011c2a <FindMax+0x112>
					sqSecondMax->pulses = datapieces[type][sq][PULSES];
 8011c0c:	7bfb      	ldrb	r3, [r7, #15]
 8011c0e:	490c      	ldr	r1, [pc, #48]	; (8011c40 <FindMax+0x128>)
 8011c10:	019a      	lsls	r2, r3, #6
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	4413      	add	r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	440b      	add	r3, r1
 8011c1a:	885b      	ldrh	r3, [r3, #2]
 8011c1c:	b25a      	sxtb	r2, r3
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	701a      	strb	r2, [r3, #0]
					sqSecondMax->square = sq;
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	b25a      	sxtb	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	705a      	strb	r2, [r3, #1]
	for(int sq=0;sq<64;sq++){
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	617b      	str	r3, [r7, #20]
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	2b3f      	cmp	r3, #63	; 0x3f
 8011c34:	dd86      	ble.n	8011b44 <FindMax+0x2c>
				}
			}
		}
	}
}
 8011c36:	bf00      	nop
 8011c38:	bf00      	nop
 8011c3a:	371c      	adds	r7, #28
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd90      	pop	{r4, r7, pc}
 8011c40:	20007c68 	.word	0x20007c68
 8011c44:	08012860 	.word	0x08012860

08011c48 <Status_Set>:
uint16_t led_duty=100;
uint16_t led_period =200;
uint16_t led_frequency = 10;

void Status_Set(uint8_t stt)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b083      	sub	sp, #12
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	4603      	mov	r3, r0
 8011c50:	71fb      	strb	r3, [r7, #7]
	Status = stt;
 8011c52:	4a04      	ldr	r2, [pc, #16]	; (8011c64 <Status_Set+0x1c>)
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	7013      	strb	r3, [r2, #0]
}
 8011c58:	bf00      	nop
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr
 8011c64:	20009044 	.word	0x20009044

08011c68 <Led_Blink>:


void Led_Blink(uint8_t blink,uint16_t duty)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	4603      	mov	r3, r0
 8011c70:	460a      	mov	r2, r1
 8011c72:	71fb      	strb	r3, [r7, #7]
 8011c74:	4613      	mov	r3, r2
 8011c76:	80bb      	strh	r3, [r7, #4]
	for(int i=0;i<blink;i++){
 8011c78:	2300      	movs	r3, #0
 8011c7a:	60fb      	str	r3, [r7, #12]
 8011c7c:	e014      	b.n	8011ca8 <Led_Blink+0x40>
		LED_OFF;
 8011c7e:	2200      	movs	r2, #0
 8011c80:	2104      	movs	r1, #4
 8011c82:	480e      	ldr	r0, [pc, #56]	; (8011cbc <Led_Blink+0x54>)
 8011c84:	f7f1 f9ec 	bl	8003060 <HAL_GPIO_WritePin>
		osDelay(duty);
 8011c88:	88bb      	ldrh	r3, [r7, #4]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fc fdfd 	bl	800e88a <osDelay>
		LED_ON;
 8011c90:	2201      	movs	r2, #1
 8011c92:	2104      	movs	r1, #4
 8011c94:	4809      	ldr	r0, [pc, #36]	; (8011cbc <Led_Blink+0x54>)
 8011c96:	f7f1 f9e3 	bl	8003060 <HAL_GPIO_WritePin>
		osDelay(duty);
 8011c9a:	88bb      	ldrh	r3, [r7, #4]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7fc fdf4 	bl	800e88a <osDelay>
	for(int i=0;i<blink;i++){
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	79fb      	ldrb	r3, [r7, #7]
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	dbe6      	blt.n	8011c7e <Led_Blink+0x16>
	}
}
 8011cb0:	bf00      	nop
 8011cb2:	bf00      	nop
 8011cb4:	3710      	adds	r7, #16
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	40020400 	.word	0x40020400

08011cc0 <Status_Task>:

void Status_Task()
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	af00      	add	r7, sp, #0
	LED_ON;
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	2104      	movs	r1, #4
 8011cc8:	4814      	ldr	r0, [pc, #80]	; (8011d1c <Status_Task+0x5c>)
 8011cca:	f7f1 f9c9 	bl	8003060 <HAL_GPIO_WritePin>
	osDelay(1000);
 8011cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cd2:	f7fc fdda 	bl	800e88a <osDelay>
	if(Status != STT_ALL_OK){
 8011cd6:	4b12      	ldr	r3, [pc, #72]	; (8011d20 <Status_Task+0x60>)
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d01c      	beq.n	8011d18 <Status_Task+0x58>
		if(Status==STT_I2C_ERROR){
 8011cde:	4b10      	ldr	r3, [pc, #64]	; (8011d20 <Status_Task+0x60>)
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d104      	bne.n	8011cf0 <Status_Task+0x30>
			Led_Blink(1, 200);
 8011ce6:	21c8      	movs	r1, #200	; 0xc8
 8011ce8:	2001      	movs	r0, #1
 8011cea:	f7ff ffbd 	bl	8011c68 <Led_Blink>
 8011cee:	e010      	b.n	8011d12 <Status_Task+0x52>
		}else if(Status==STT_RS485_ERROR){
 8011cf0:	4b0b      	ldr	r3, [pc, #44]	; (8011d20 <Status_Task+0x60>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	d104      	bne.n	8011d02 <Status_Task+0x42>
			Led_Blink(2, 200);
 8011cf8:	21c8      	movs	r1, #200	; 0xc8
 8011cfa:	2002      	movs	r0, #2
 8011cfc:	f7ff ffb4 	bl	8011c68 <Led_Blink>
 8011d00:	e007      	b.n	8011d12 <Status_Task+0x52>
		}else if(Status==STT_BLE_ERROR){
 8011d02:	4b07      	ldr	r3, [pc, #28]	; (8011d20 <Status_Task+0x60>)
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	2b03      	cmp	r3, #3
 8011d08:	d103      	bne.n	8011d12 <Status_Task+0x52>
			Led_Blink(3, 200);
 8011d0a:	21c8      	movs	r1, #200	; 0xc8
 8011d0c:	2003      	movs	r0, #3
 8011d0e:	f7ff ffab 	bl	8011c68 <Led_Blink>
		}
		Status = STT_ALL_OK;
 8011d12:	4b03      	ldr	r3, [pc, #12]	; (8011d20 <Status_Task+0x60>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	701a      	strb	r2, [r3, #0]
	}
}
 8011d18:	bf00      	nop
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	40020400 	.word	0x40020400
 8011d20:	20009044 	.word	0x20009044

08011d24 <StartTaskScanPiece>:
 * mainChange=true : khi App lấy dữ liệu sẽ gửi toàn bộ dữ liệu (FEN ,CLOCK),sau đó sẽ reset biến mainChange=false
 * mainChange=false: khi App lấy dữ liệu sẽ gửi những giữ liệu đơn giản */
bool mainChange = true;

uint16_t tik3=0;
void StartTaskScanPiece(void const * argument){
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 8011d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011d30:	f7fc fdab 	bl	800e88a <osDelay>
	ScanPiecesInit();
 8011d34:	f7ff fb70 	bl	8011418 <ScanPiecesInit>
		if(tik3>500){
		//	HAL_GPIO_TogglePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
			tik3=0;
		}
#else
	uint8_t resuft = Scan();
 8011d38:	f7ff fe18 	bl	801196c <Scan>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	73fb      	strb	r3, [r7, #15]
	if(resuft==1){	// có thay đổi Fen
 8011d40:	7bfb      	ldrb	r3, [r7, #15]
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d103      	bne.n	8011d4e <StartTaskScanPiece+0x2a>
		mainChange = true;
 8011d46:	4b08      	ldr	r3, [pc, #32]	; (8011d68 <StartTaskScanPiece+0x44>)
 8011d48:	2201      	movs	r2, #1
 8011d4a:	701a      	strb	r2, [r3, #0]
 8011d4c:	e005      	b.n	8011d5a <StartTaskScanPiece+0x36>
	}else if(resuft==2){ // có thay đổi ChessClock
 8011d4e:	7bfb      	ldrb	r3, [r7, #15]
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	d102      	bne.n	8011d5a <StartTaskScanPiece+0x36>
		mainChange=true;
 8011d54:	4b04      	ldr	r3, [pc, #16]	; (8011d68 <StartTaskScanPiece+0x44>)
 8011d56:	2201      	movs	r2, #1
 8011d58:	701a      	strb	r2, [r3, #0]
	}else if(resuft==0){ // ko có thay đổi gì

	}
	UsbSendDataCalibase();
 8011d5a:	f000 fc39 	bl	80125d0 <UsbSendDataCalibase>
	osDelay(1);
 8011d5e:	2001      	movs	r0, #1
 8011d60:	f7fc fd93 	bl	800e88a <osDelay>
	while(1){
 8011d64:	e7e8      	b.n	8011d38 <StartTaskScanPiece+0x14>
 8011d66:	bf00      	nop
 8011d68:	200000fe 	.word	0x200000fe

08011d6c <CalculateCRC>:
{
	return ((uint32_t)byteA)*64516 +  ((uint32_t)byteB)*254 +  (uint32_t)byteC;
}

uint16_t CalculateCRC(uint8_t* buffer,uint16_t offset,uint16_t count)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b085      	sub	sp, #20
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	460b      	mov	r3, r1
 8011d76:	807b      	strh	r3, [r7, #2]
 8011d78:	4613      	mov	r3, r2
 8011d7a:	803b      	strh	r3, [r7, #0]
	uint16_t crc = 0xFFFF;
 8011d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d80:	81fb      	strh	r3, [r7, #14]

	for(uint16_t j=offset;j<(count+offset);j++)
 8011d82:	887b      	ldrh	r3, [r7, #2]
 8011d84:	81bb      	strh	r3, [r7, #12]
 8011d86:	e026      	b.n	8011dd6 <CalculateCRC+0x6a>
	{
		crc ^= (uint16_t)buffer[j];
 8011d88:	89bb      	ldrh	r3, [r7, #12]
 8011d8a:	687a      	ldr	r2, [r7, #4]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	89fb      	ldrh	r3, [r7, #14]
 8011d94:	4053      	eors	r3, r2
 8011d96:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 8011d98:	2300      	movs	r3, #0
 8011d9a:	60bb      	str	r3, [r7, #8]
 8011d9c:	e015      	b.n	8011dca <CalculateCRC+0x5e>
		{
			if ((crc & 0x0001) != 0)
 8011d9e:	89fb      	ldrh	r3, [r7, #14]
 8011da0:	f003 0301 	and.w	r3, r3, #1
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00a      	beq.n	8011dbe <CalculateCRC+0x52>
			{
				crc >>= 1;
 8011da8:	89fb      	ldrh	r3, [r7, #14]
 8011daa:	085b      	lsrs	r3, r3, #1
 8011dac:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8011dae:	89fb      	ldrh	r3, [r7, #14]
 8011db0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8011db4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8011db8:	43db      	mvns	r3, r3
 8011dba:	81fb      	strh	r3, [r7, #14]
 8011dbc:	e002      	b.n	8011dc4 <CalculateCRC+0x58>
			}
			else
			{
				crc >>= 1;
 8011dbe:	89fb      	ldrh	r3, [r7, #14]
 8011dc0:	085b      	lsrs	r3, r3, #1
 8011dc2:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	60bb      	str	r3, [r7, #8]
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2b07      	cmp	r3, #7
 8011dce:	dde6      	ble.n	8011d9e <CalculateCRC+0x32>
	for(uint16_t j=offset;j<(count+offset);j++)
 8011dd0:	89bb      	ldrh	r3, [r7, #12]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	81bb      	strh	r3, [r7, #12]
 8011dd6:	89ba      	ldrh	r2, [r7, #12]
 8011dd8:	8839      	ldrh	r1, [r7, #0]
 8011dda:	887b      	ldrh	r3, [r7, #2]
 8011ddc:	440b      	add	r3, r1
 8011dde:	429a      	cmp	r2, r3
 8011de0:	dbd2      	blt.n	8011d88 <CalculateCRC+0x1c>
			}
		}
	}
	return crc;
 8011de2:	89fb      	ldrh	r3, [r7, #14]
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <getMarkSq>:
		14,14,14,14,12,12,14,14,	//3
		14,14,14,14,14,14,14,14,	//2
		14,14,14,14,14,14,14,14};	//1
//       a  b  c  d  e  f  g  h

uint8_t getMarkSq(uint8_t type,uint8_t squamark){
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	4603      	mov	r3, r0
 8011df8:	460a      	mov	r2, r1
 8011dfa:	71fb      	strb	r3, [r7, #7]
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	71bb      	strb	r3, [r7, #6]
	uint8_t pulses_mark=0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	73fb      	strb	r3, [r7, #15]
	switch(type){
 8011e04:	79fb      	ldrb	r3, [r7, #7]
 8011e06:	2b11      	cmp	r3, #17
 8011e08:	f200 8082 	bhi.w	8011f10 <getMarkSq+0x120>
 8011e0c:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <getMarkSq+0x24>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	08011e5d 	.word	0x08011e5d
 8011e18:	08011e67 	.word	0x08011e67
 8011e1c:	08011e71 	.word	0x08011e71
 8011e20:	08011e7b 	.word	0x08011e7b
 8011e24:	08011e85 	.word	0x08011e85
 8011e28:	08011e8f 	.word	0x08011e8f
 8011e2c:	08011e99 	.word	0x08011e99
 8011e30:	08011ea3 	.word	0x08011ea3
 8011e34:	08011ead 	.word	0x08011ead
 8011e38:	08011eb7 	.word	0x08011eb7
 8011e3c:	08011ec1 	.word	0x08011ec1
 8011e40:	08011ecb 	.word	0x08011ecb
 8011e44:	08011ed5 	.word	0x08011ed5
 8011e48:	08011edf 	.word	0x08011edf
 8011e4c:	08011ee9 	.word	0x08011ee9
 8011e50:	08011ef3 	.word	0x08011ef3
 8011e54:	08011efd 	.word	0x08011efd
 8011e58:	08011f07 	.word	0x08011f07
	case 0:pulses_mark = mark_pulse0[squamark]; break;
 8011e5c:	79bb      	ldrb	r3, [r7, #6]
 8011e5e:	4a30      	ldr	r2, [pc, #192]	; (8011f20 <getMarkSq+0x130>)
 8011e60:	5cd3      	ldrb	r3, [r2, r3]
 8011e62:	73fb      	strb	r3, [r7, #15]
 8011e64:	e054      	b.n	8011f10 <getMarkSq+0x120>
	case 1:pulses_mark = mark_pulse1[squamark]; break;
 8011e66:	79bb      	ldrb	r3, [r7, #6]
 8011e68:	4a2e      	ldr	r2, [pc, #184]	; (8011f24 <getMarkSq+0x134>)
 8011e6a:	5cd3      	ldrb	r3, [r2, r3]
 8011e6c:	73fb      	strb	r3, [r7, #15]
 8011e6e:	e04f      	b.n	8011f10 <getMarkSq+0x120>
	case 2:pulses_mark = mark_pulse2[squamark]; break;
 8011e70:	79bb      	ldrb	r3, [r7, #6]
 8011e72:	4a2d      	ldr	r2, [pc, #180]	; (8011f28 <getMarkSq+0x138>)
 8011e74:	5cd3      	ldrb	r3, [r2, r3]
 8011e76:	73fb      	strb	r3, [r7, #15]
 8011e78:	e04a      	b.n	8011f10 <getMarkSq+0x120>
	case 3:pulses_mark = mark_pulse3[squamark]; break;
 8011e7a:	79bb      	ldrb	r3, [r7, #6]
 8011e7c:	4a2b      	ldr	r2, [pc, #172]	; (8011f2c <getMarkSq+0x13c>)
 8011e7e:	5cd3      	ldrb	r3, [r2, r3]
 8011e80:	73fb      	strb	r3, [r7, #15]
 8011e82:	e045      	b.n	8011f10 <getMarkSq+0x120>
	case 4:pulses_mark = mark_pulse4[squamark]; break;
 8011e84:	79bb      	ldrb	r3, [r7, #6]
 8011e86:	4a2a      	ldr	r2, [pc, #168]	; (8011f30 <getMarkSq+0x140>)
 8011e88:	5cd3      	ldrb	r3, [r2, r3]
 8011e8a:	73fb      	strb	r3, [r7, #15]
 8011e8c:	e040      	b.n	8011f10 <getMarkSq+0x120>
	case 5:pulses_mark = mark_pulse5[squamark]; break;
 8011e8e:	79bb      	ldrb	r3, [r7, #6]
 8011e90:	4a28      	ldr	r2, [pc, #160]	; (8011f34 <getMarkSq+0x144>)
 8011e92:	5cd3      	ldrb	r3, [r2, r3]
 8011e94:	73fb      	strb	r3, [r7, #15]
 8011e96:	e03b      	b.n	8011f10 <getMarkSq+0x120>
	case 6:pulses_mark = mark_pulse6[squamark]; break;
 8011e98:	79bb      	ldrb	r3, [r7, #6]
 8011e9a:	4a27      	ldr	r2, [pc, #156]	; (8011f38 <getMarkSq+0x148>)
 8011e9c:	5cd3      	ldrb	r3, [r2, r3]
 8011e9e:	73fb      	strb	r3, [r7, #15]
 8011ea0:	e036      	b.n	8011f10 <getMarkSq+0x120>
	case 7:pulses_mark = mark_pulse7[squamark]; break;
 8011ea2:	79bb      	ldrb	r3, [r7, #6]
 8011ea4:	4a25      	ldr	r2, [pc, #148]	; (8011f3c <getMarkSq+0x14c>)
 8011ea6:	5cd3      	ldrb	r3, [r2, r3]
 8011ea8:	73fb      	strb	r3, [r7, #15]
 8011eaa:	e031      	b.n	8011f10 <getMarkSq+0x120>
	case 8:pulses_mark = mark_pulse8[squamark]; break;
 8011eac:	79bb      	ldrb	r3, [r7, #6]
 8011eae:	4a24      	ldr	r2, [pc, #144]	; (8011f40 <getMarkSq+0x150>)
 8011eb0:	5cd3      	ldrb	r3, [r2, r3]
 8011eb2:	73fb      	strb	r3, [r7, #15]
 8011eb4:	e02c      	b.n	8011f10 <getMarkSq+0x120>
	case 9:pulses_mark = mark_pulse9[squamark]; break;
 8011eb6:	79bb      	ldrb	r3, [r7, #6]
 8011eb8:	4a22      	ldr	r2, [pc, #136]	; (8011f44 <getMarkSq+0x154>)
 8011eba:	5cd3      	ldrb	r3, [r2, r3]
 8011ebc:	73fb      	strb	r3, [r7, #15]
 8011ebe:	e027      	b.n	8011f10 <getMarkSq+0x120>
	case 10:pulses_mark = mark_pulse10[squamark]; break;
 8011ec0:	79bb      	ldrb	r3, [r7, #6]
 8011ec2:	4a21      	ldr	r2, [pc, #132]	; (8011f48 <getMarkSq+0x158>)
 8011ec4:	5cd3      	ldrb	r3, [r2, r3]
 8011ec6:	73fb      	strb	r3, [r7, #15]
 8011ec8:	e022      	b.n	8011f10 <getMarkSq+0x120>
	case 11:pulses_mark = mark_pulse11[squamark]; break;
 8011eca:	79bb      	ldrb	r3, [r7, #6]
 8011ecc:	4a1f      	ldr	r2, [pc, #124]	; (8011f4c <getMarkSq+0x15c>)
 8011ece:	5cd3      	ldrb	r3, [r2, r3]
 8011ed0:	73fb      	strb	r3, [r7, #15]
 8011ed2:	e01d      	b.n	8011f10 <getMarkSq+0x120>
	case 12:pulses_mark = mark_pulse12[squamark]; break;
 8011ed4:	79bb      	ldrb	r3, [r7, #6]
 8011ed6:	4a1e      	ldr	r2, [pc, #120]	; (8011f50 <getMarkSq+0x160>)
 8011ed8:	5cd3      	ldrb	r3, [r2, r3]
 8011eda:	73fb      	strb	r3, [r7, #15]
 8011edc:	e018      	b.n	8011f10 <getMarkSq+0x120>
	case 13:pulses_mark = mark_pulse13[squamark]; break;
 8011ede:	79bb      	ldrb	r3, [r7, #6]
 8011ee0:	4a1c      	ldr	r2, [pc, #112]	; (8011f54 <getMarkSq+0x164>)
 8011ee2:	5cd3      	ldrb	r3, [r2, r3]
 8011ee4:	73fb      	strb	r3, [r7, #15]
 8011ee6:	e013      	b.n	8011f10 <getMarkSq+0x120>
	case 14:pulses_mark = mark_pulse14[squamark]; break;
 8011ee8:	79bb      	ldrb	r3, [r7, #6]
 8011eea:	4a1b      	ldr	r2, [pc, #108]	; (8011f58 <getMarkSq+0x168>)
 8011eec:	5cd3      	ldrb	r3, [r2, r3]
 8011eee:	73fb      	strb	r3, [r7, #15]
 8011ef0:	e00e      	b.n	8011f10 <getMarkSq+0x120>
	case 15:pulses_mark = mark_pulse15[squamark]; break;
 8011ef2:	79bb      	ldrb	r3, [r7, #6]
 8011ef4:	4a19      	ldr	r2, [pc, #100]	; (8011f5c <getMarkSq+0x16c>)
 8011ef6:	5cd3      	ldrb	r3, [r2, r3]
 8011ef8:	73fb      	strb	r3, [r7, #15]
 8011efa:	e009      	b.n	8011f10 <getMarkSq+0x120>
	case 16:pulses_mark = mark_pulse16[squamark]; break;
 8011efc:	79bb      	ldrb	r3, [r7, #6]
 8011efe:	4a18      	ldr	r2, [pc, #96]	; (8011f60 <getMarkSq+0x170>)
 8011f00:	5cd3      	ldrb	r3, [r2, r3]
 8011f02:	73fb      	strb	r3, [r7, #15]
 8011f04:	e004      	b.n	8011f10 <getMarkSq+0x120>
	case 17:pulses_mark = mark_pulse17[squamark]; break;
 8011f06:	79bb      	ldrb	r3, [r7, #6]
 8011f08:	4a16      	ldr	r2, [pc, #88]	; (8011f64 <getMarkSq+0x174>)
 8011f0a:	5cd3      	ldrb	r3, [r2, r3]
 8011f0c:	73fb      	strb	r3, [r7, #15]
 8011f0e:	bf00      	nop
	}
	return pulses_mark;
 8011f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3714      	adds	r7, #20
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
 8011f1e:	bf00      	nop
 8011f20:	08012cec 	.word	0x08012cec
 8011f24:	08012cac 	.word	0x08012cac
 8011f28:	08012c6c 	.word	0x08012c6c
 8011f2c:	08012c2c 	.word	0x08012c2c
 8011f30:	08012bec 	.word	0x08012bec
 8011f34:	08012bac 	.word	0x08012bac
 8011f38:	08012b6c 	.word	0x08012b6c
 8011f3c:	08012b2c 	.word	0x08012b2c
 8011f40:	08012aec 	.word	0x08012aec
 8011f44:	08012aac 	.word	0x08012aac
 8011f48:	08012a6c 	.word	0x08012a6c
 8011f4c:	08012a2c 	.word	0x08012a2c
 8011f50:	080129ec 	.word	0x080129ec
 8011f54:	080129ac 	.word	0x080129ac
 8011f58:	0801296c 	.word	0x0801296c
 8011f5c:	0801292c 	.word	0x0801292c
 8011f60:	080128ec 	.word	0x080128ec
 8011f64:	080128ac 	.word	0x080128ac

08011f68 <HAL_UARTEx_RxEventCallback>:
	extern uint8_t datamain[64];				// chứa dữ liệu chính của pieces
	extern RTC_HandleTypeDef hrtc;
	extern USBD_HandleTypeDef hUsbDeviceFS;
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011f68:	b5b0      	push	{r4, r5, r7, lr}
 8011f6a:	b086      	sub	sp, #24
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	460b      	mov	r3, r1
 8011f72:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a2d      	ldr	r2, [pc, #180]	; (8012030 <HAL_UARTEx_RxEventCallback+0xc8>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d153      	bne.n	8012026 <HAL_UARTEx_RxEventCallback+0xbe>
		memcpy(uart1_main_buf,uart1_rx_buf,UART1_BUFFER_LENGTH);
 8011f7e:	4a2d      	ldr	r2, [pc, #180]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011f80:	4b2d      	ldr	r3, [pc, #180]	; (8012038 <HAL_UARTEx_RxEventCallback+0xd0>)
 8011f82:	4614      	mov	r4, r2
 8011f84:	461d      	mov	r5, r3
 8011f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011f8a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8011f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uart1_onData=true;
 8011f92:	4b2a      	ldr	r3, [pc, #168]	; (801203c <HAL_UARTEx_RxEventCallback+0xd4>)
 8011f94:	2201      	movs	r2, #1
 8011f96:	701a      	strb	r2, [r3, #0]
		uart1_data_length=Size;
 8011f98:	887b      	ldrh	r3, [r7, #2]
 8011f9a:	b2da      	uxtb	r2, r3
 8011f9c:	4b28      	ldr	r3, [pc, #160]	; (8012040 <HAL_UARTEx_RxEventCallback+0xd8>)
 8011f9e:	701a      	strb	r2, [r3, #0]

		if(uart1_main_buf[0]=='S' || uart1_main_buf[0]=='G'){  // Scan Code
 8011fa0:	4b24      	ldr	r3, [pc, #144]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	2b53      	cmp	r3, #83	; 0x53
 8011fa6:	d003      	beq.n	8011fb0 <HAL_UARTEx_RxEventCallback+0x48>
 8011fa8:	4b22      	ldr	r3, [pc, #136]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b47      	cmp	r3, #71	; 0x47
 8011fae:	d135      	bne.n	801201c <HAL_UARTEx_RxEventCallback+0xb4>
			uint32_t addr = ((uint32_t)(uart1_main_buf[1]))*64516 +  ((uint32_t)uart1_main_buf[2])*254 +  (uint32_t)uart1_main_buf[3];
 8011fb0:	4b20      	ldr	r3, [pc, #128]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011fb2:	785b      	ldrb	r3, [r3, #1]
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	f64f 4304 	movw	r3, #64516	; 0xfc04
 8011fba:	fb03 f202 	mul.w	r2, r3, r2
 8011fbe:	4b1d      	ldr	r3, [pc, #116]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011fc0:	789b      	ldrb	r3, [r3, #2]
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	01db      	lsls	r3, r3, #7
 8011fc8:	1a5b      	subs	r3, r3, r1
 8011fca:	005b      	lsls	r3, r3, #1
 8011fcc:	4413      	add	r3, r2
 8011fce:	4a19      	ldr	r2, [pc, #100]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011fd0:	78d2      	ldrb	r2, [r2, #3]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	617b      	str	r3, [r7, #20]
			if(addr==ADDRESSBOARD){
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d11f      	bne.n	801201c <HAL_UARTEx_RxEventCallback+0xb4>
				if(uart1_main_buf[0]=='S'){
 8011fdc:	4b15      	ldr	r3, [pc, #84]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	2b53      	cmp	r3, #83	; 0x53
 8011fe2:	d111      	bne.n	8012008 <HAL_UARTEx_RxEventCallback+0xa0>
					uint8_t res[5];
					res[0] = ADDR_PART0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	733b      	strb	r3, [r7, #12]
					res[1] = ADDR_PART1;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	737b      	strb	r3, [r7, #13]
					res[2] = ADDR_PART2;
 8011fec:	2301      	movs	r3, #1
 8011fee:	73bb      	strb	r3, [r7, #14]
					res[3] = 'R';	// interface is RS485
 8011ff0:	2352      	movs	r3, #82	; 0x52
 8011ff2:	73fb      	strb	r3, [r7, #15]
					res[4] = 255;
 8011ff4:	23ff      	movs	r3, #255	; 0xff
 8011ff6:	743b      	strb	r3, [r7, #16]
					HAL_UART_Transmit(&huart1, res, 5, 100);
 8011ff8:	f107 010c 	add.w	r1, r7, #12
 8011ffc:	2364      	movs	r3, #100	; 0x64
 8011ffe:	2205      	movs	r2, #5
 8012000:	4810      	ldr	r0, [pc, #64]	; (8012044 <HAL_UARTEx_RxEventCallback+0xdc>)
 8012002:	f7f7 fdda 	bl	8009bba <HAL_UART_Transmit>
 8012006:	e006      	b.n	8012016 <HAL_UARTEx_RxEventCallback+0xae>
				}else if(uart1_main_buf[0]=='G'){
 8012008:	4b0a      	ldr	r3, [pc, #40]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	2b47      	cmp	r3, #71	; 0x47
 801200e:	d102      	bne.n	8012016 <HAL_UARTEx_RxEventCallback+0xae>
					flag_masterGetData = 1;	//interface: 1=RS485 2=USB
 8012010:	4b0d      	ldr	r3, [pc, #52]	; (8012048 <HAL_UARTEx_RxEventCallback+0xe0>)
 8012012:	2201      	movs	r2, #1
 8012014:	701a      	strb	r2, [r3, #0]
				}
				uart1_main_buf[0]=0;
 8012016:	4b07      	ldr	r3, [pc, #28]	; (8012034 <HAL_UARTEx_RxEventCallback+0xcc>)
 8012018:	2200      	movs	r2, #0
 801201a:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 801201c:	2220      	movs	r2, #32
 801201e:	4906      	ldr	r1, [pc, #24]	; (8012038 <HAL_UARTEx_RxEventCallback+0xd0>)
 8012020:	4808      	ldr	r0, [pc, #32]	; (8012044 <HAL_UARTEx_RxEventCallback+0xdc>)
 8012022:	f7f7 fe5c 	bl	8009cde <HAL_UARTEx_ReceiveToIdle_DMA>
			uart2_onData=true;
			uart2_data_length=Size;
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
	}
#endif
}
 8012026:	bf00      	nop
 8012028:	3718      	adds	r7, #24
 801202a:	46bd      	mov	sp, r7
 801202c:	bdb0      	pop	{r4, r5, r7, pc}
 801202e:	bf00      	nop
 8012030:	40011000 	.word	0x40011000
 8012034:	200090ac 	.word	0x200090ac
 8012038:	2000908c 	.word	0x2000908c
 801203c:	200090cc 	.word	0x200090cc
 8012040:	200090cd 	.word	0x200090cd
 8012044:	200029cc 	.word	0x200029cc
 8012048:	20009088 	.word	0x20009088

0801204c <initReceiverUart>:


void initReceiverUart(){
 801204c:	b580      	push	{r7, lr}
 801204e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012050:	2220      	movs	r2, #32
 8012052:	4907      	ldr	r1, [pc, #28]	; (8012070 <initReceiverUart+0x24>)
 8012054:	4807      	ldr	r0, [pc, #28]	; (8012074 <initReceiverUart+0x28>)
 8012056:	f7f7 fe42 	bl	8009cde <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 801205a:	4b07      	ldr	r3, [pc, #28]	; (8012078 <initReceiverUart+0x2c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	4b05      	ldr	r3, [pc, #20]	; (8012078 <initReceiverUart+0x2c>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f022 0208 	bic.w	r2, r2, #8
 8012068:	601a      	str	r2, [r3, #0]
}
 801206a:	bf00      	nop
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	2000908c 	.word	0x2000908c
 8012074:	200029cc 	.word	0x200029cc
 8012078:	20002a54 	.word	0x20002a54

0801207c <byteToPiece>:
 *  xxxx: 0->12 piece A
 *  yyyy: 0->12 piece B
 *  0:EMTY, 1:WKING, 2:WQUEEN, 3:WBISHOP, 4:WKNIGHT, 5:WROOK, 6:WPAWN,
 *  		7:BKING, 8:BQUEEN, 9:BBISHOP,10:BKNIGHT,11:BROOK,12:BPAWN.
 * 		*/
uint8_t byteToPiece(uint8_t piece){
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	4603      	mov	r3, r0
 8012084:	71fb      	strb	r3, [r7, #7]
	uint8_t pi;
	switch(piece){
 8012086:	79fb      	ldrb	r3, [r7, #7]
 8012088:	2b12      	cmp	r3, #18
 801208a:	d862      	bhi.n	8012152 <byteToPiece+0xd6>
 801208c:	a201      	add	r2, pc, #4	; (adr r2, 8012094 <byteToPiece+0x18>)
 801208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012092:	bf00      	nop
 8012094:	080120e1 	.word	0x080120e1
 8012098:	080120e7 	.word	0x080120e7
 801209c:	080120ed 	.word	0x080120ed
 80120a0:	080120f3 	.word	0x080120f3
 80120a4:	080120f9 	.word	0x080120f9
 80120a8:	080120ff 	.word	0x080120ff
 80120ac:	08012105 	.word	0x08012105
 80120b0:	0801210b 	.word	0x0801210b
 80120b4:	08012111 	.word	0x08012111
 80120b8:	08012117 	.word	0x08012117
 80120bc:	0801211d 	.word	0x0801211d
 80120c0:	08012123 	.word	0x08012123
 80120c4:	08012129 	.word	0x08012129
 80120c8:	0801212f 	.word	0x0801212f
 80120cc:	08012135 	.word	0x08012135
 80120d0:	0801213b 	.word	0x0801213b
 80120d4:	08012141 	.word	0x08012141
 80120d8:	08012147 	.word	0x08012147
 80120dc:	0801214d 	.word	0x0801214d
	case 0: pi=EMTY;	break;
 80120e0:	2300      	movs	r3, #0
 80120e2:	73fb      	strb	r3, [r7, #15]
 80120e4:	e035      	b.n	8012152 <byteToPiece+0xd6>
	case 1: pi=WKING; 	break;
 80120e6:	2301      	movs	r3, #1
 80120e8:	73fb      	strb	r3, [r7, #15]
 80120ea:	e032      	b.n	8012152 <byteToPiece+0xd6>
	case 2: pi=WQUEEN; 	break;
 80120ec:	2302      	movs	r3, #2
 80120ee:	73fb      	strb	r3, [r7, #15]
 80120f0:	e02f      	b.n	8012152 <byteToPiece+0xd6>
	case 3: pi=WBISHOP; break;
 80120f2:	2303      	movs	r3, #3
 80120f4:	73fb      	strb	r3, [r7, #15]
 80120f6:	e02c      	b.n	8012152 <byteToPiece+0xd6>
	case 4: pi=WKNIGHT; break;
 80120f8:	2304      	movs	r3, #4
 80120fa:	73fb      	strb	r3, [r7, #15]
 80120fc:	e029      	b.n	8012152 <byteToPiece+0xd6>
	case 5: pi=WROOK; 	break;
 80120fe:	2305      	movs	r3, #5
 8012100:	73fb      	strb	r3, [r7, #15]
 8012102:	e026      	b.n	8012152 <byteToPiece+0xd6>
	case 6: pi=BKING; 	break;
 8012104:	2307      	movs	r3, #7
 8012106:	73fb      	strb	r3, [r7, #15]
 8012108:	e023      	b.n	8012152 <byteToPiece+0xd6>
	case 7: pi=BQUEEN; 	break;
 801210a:	2308      	movs	r3, #8
 801210c:	73fb      	strb	r3, [r7, #15]
 801210e:	e020      	b.n	8012152 <byteToPiece+0xd6>
	case 8: pi=BBISHOP; break;
 8012110:	2309      	movs	r3, #9
 8012112:	73fb      	strb	r3, [r7, #15]
 8012114:	e01d      	b.n	8012152 <byteToPiece+0xd6>
	case 9: pi=BKNIGHT; break;
 8012116:	230a      	movs	r3, #10
 8012118:	73fb      	strb	r3, [r7, #15]
 801211a:	e01a      	b.n	8012152 <byteToPiece+0xd6>
	case 10:pi=BROOK; 	break;
 801211c:	230b      	movs	r3, #11
 801211e:	73fb      	strb	r3, [r7, #15]
 8012120:	e017      	b.n	8012152 <byteToPiece+0xd6>
	case 11:pi=BPAWN; 	break;
 8012122:	230c      	movs	r3, #12
 8012124:	73fb      	strb	r3, [r7, #15]
 8012126:	e014      	b.n	8012152 <byteToPiece+0xd6>
	case 12:pi=BPAWN; 	break;
 8012128:	230c      	movs	r3, #12
 801212a:	73fb      	strb	r3, [r7, #15]
 801212c:	e011      	b.n	8012152 <byteToPiece+0xd6>
	case 13:pi=BPAWN; 	break;
 801212e:	230c      	movs	r3, #12
 8012130:	73fb      	strb	r3, [r7, #15]
 8012132:	e00e      	b.n	8012152 <byteToPiece+0xd6>
	case 14:pi=BPAWN; 	break;
 8012134:	230c      	movs	r3, #12
 8012136:	73fb      	strb	r3, [r7, #15]
 8012138:	e00b      	b.n	8012152 <byteToPiece+0xd6>
	case 15:pi=WPAWN; 	break;
 801213a:	2306      	movs	r3, #6
 801213c:	73fb      	strb	r3, [r7, #15]
 801213e:	e008      	b.n	8012152 <byteToPiece+0xd6>
	case 16:pi=WPAWN; 	break;
 8012140:	2306      	movs	r3, #6
 8012142:	73fb      	strb	r3, [r7, #15]
 8012144:	e005      	b.n	8012152 <byteToPiece+0xd6>
	case 17:pi=WPAWN; 	break;
 8012146:	2306      	movs	r3, #6
 8012148:	73fb      	strb	r3, [r7, #15]
 801214a:	e002      	b.n	8012152 <byteToPiece+0xd6>
	case 18:pi=WPAWN; 	break;
 801214c:	2306      	movs	r3, #6
 801214e:	73fb      	strb	r3, [r7, #15]
 8012150:	bf00      	nop
	}
	return pi;
 8012152:	7bfb      	ldrb	r3, [r7, #15]
}
 8012154:	4618      	mov	r0, r3
 8012156:	3714      	adds	r7, #20
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <AnalyserCMD>:

/*phân tích dữ liệu nhận được */


void AnalyserCMD(uint8_t *data,uint8_t length,TypeConnection typeconnect )
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
 801216c:	4613      	mov	r3, r2
 801216e:	70bb      	strb	r3, [r7, #2]
	uint16_t crc;
	uint8_t crcval[2];
#ifdef CALIBASE
	if(data[0]==CMD_ENABLE_CALIBASE_MODE){ // Enable Calibase Mode
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	2b63      	cmp	r3, #99	; 0x63
 8012176:	d103      	bne.n	8012180 <AnalyserCMD+0x20>
		isCalibaseMode = true;
 8012178:	4b5d      	ldr	r3, [pc, #372]	; (80122f0 <AnalyserCMD+0x190>)
 801217a:	2201      	movs	r2, #1
 801217c:	701a      	strb	r2, [r3, #0]
 801217e:	e033      	b.n	80121e8 <AnalyserCMD+0x88>
	}else if(data[0]==CMD_CALIBASE_SET_TYPE){  // Calibase Code: 'C' + 'Type'
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	2b43      	cmp	r3, #67	; 0x43
 8012186:	d104      	bne.n	8012192 <AnalyserCMD+0x32>
		calibase_type = data[1];
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	785a      	ldrb	r2, [r3, #1]
 801218c:	4b59      	ldr	r3, [pc, #356]	; (80122f4 <AnalyserCMD+0x194>)
 801218e:	701a      	strb	r2, [r3, #0]
 8012190:	e02a      	b.n	80121e8 <AnalyserCMD+0x88>
	}else if(data[0]==CMD_SET_REAL_TIME){
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	2b54      	cmp	r3, #84	; 0x54
 8012198:	d119      	bne.n	80121ce <AnalyserCMD+0x6e>
		uint8_t datatime[6];
		for(int i=0;i<6;i++){
 801219a:	2300      	movs	r3, #0
 801219c:	617b      	str	r3, [r7, #20]
 801219e:	e00d      	b.n	80121bc <AnalyserCMD+0x5c>
			datatime[i] = data[i+1];
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	3301      	adds	r3, #1
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	4413      	add	r3, r2
 80121a8:	7819      	ldrb	r1, [r3, #0]
 80121aa:	f107 0208 	add.w	r2, r7, #8
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	4413      	add	r3, r2
 80121b2:	460a      	mov	r2, r1
 80121b4:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<6;i++){
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	3301      	adds	r3, #1
 80121ba:	617b      	str	r3, [r7, #20]
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	2b05      	cmp	r3, #5
 80121c0:	ddee      	ble.n	80121a0 <AnalyserCMD+0x40>
		}
		RTC_SetTime(datatime);
 80121c2:	f107 0308 	add.w	r3, r7, #8
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff f8c8 	bl	801135c <RTC_SetTime>
 80121cc:	e00c      	b.n	80121e8 <AnalyserCMD+0x88>
	}else if(data[0]==CMD_READ_REAL_TIME){
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	2b74      	cmp	r3, #116	; 0x74
 80121d4:	d102      	bne.n	80121dc <AnalyserCMD+0x7c>
		UsbSendDateTime();
 80121d6:	f000 f9d1 	bl	801257c <UsbSendDateTime>
 80121da:	e005      	b.n	80121e8 <AnalyserCMD+0x88>
	}else if(data[0]==CMD_FRAM_ERASE){
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b45      	cmp	r3, #69	; 0x45
 80121e2:	d101      	bne.n	80121e8 <AnalyserCMD+0x88>
		MB85RS_erase();
 80121e4:	f7ff f86a 	bl	80112bc <MB85RS_erase>
	}
	if(isCalibaseMode) return;
 80121e8:	4b41      	ldr	r3, [pc, #260]	; (80122f0 <AnalyserCMD+0x190>)
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d175      	bne.n	80122dc <AnalyserCMD+0x17c>
#endif



	/* kiểm tra khớp địa chỉ */
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	3301      	adds	r3, #1
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d172      	bne.n	80122e0 <AnalyserCMD+0x180>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	3302      	adds	r3, #2
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d16d      	bne.n	80122e0 <AnalyserCMD+0x180>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	3303      	adds	r3, #3
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d168      	bne.n	80122e0 <AnalyserCMD+0x180>
	/* Kiểm tra CRC */
	if(length==7)	// các lệnh Get có độ dài 7byte
 801220e:	78fb      	ldrb	r3, [r7, #3]
 8012210:	2b07      	cmp	r3, #7
 8012212:	d11b      	bne.n	801224c <AnalyserCMD+0xec>
	{
		crc = CalculateCRC(data, 1, 4);
 8012214:	2204      	movs	r2, #4
 8012216:	2101      	movs	r1, #1
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff fda7 	bl	8011d6c <CalculateCRC>
 801221e:	4603      	mov	r3, r0
 8012220:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012222:	8a7b      	ldrh	r3, [r7, #18]
 8012224:	0a1b      	lsrs	r3, r3, #8
 8012226:	b29b      	uxth	r3, r3
 8012228:	b2db      	uxtb	r3, r3
 801222a:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 801222c:	8a7b      	ldrh	r3, [r7, #18]
 801222e:	b2db      	uxtb	r3, r3
 8012230:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012232:	7c3a      	ldrb	r2, [r7, #16]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3305      	adds	r3, #5
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	429a      	cmp	r2, r3
 801223c:	d152      	bne.n	80122e4 <AnalyserCMD+0x184>
 801223e:	7c7a      	ldrb	r2, [r7, #17]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	3306      	adds	r3, #6
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	429a      	cmp	r2, r3
 8012248:	d01e      	beq.n	8012288 <AnalyserCMD+0x128>
 801224a:	e04b      	b.n	80122e4 <AnalyserCMD+0x184>
	}else if(length==13) // lệnh Set Time RTC có độ dài 13 byte
 801224c:	78fb      	ldrb	r3, [r7, #3]
 801224e:	2b0d      	cmp	r3, #13
 8012250:	d11a      	bne.n	8012288 <AnalyserCMD+0x128>
	{
		crc = CalculateCRC(data, 1, 10);
 8012252:	220a      	movs	r2, #10
 8012254:	2101      	movs	r1, #1
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff fd88 	bl	8011d6c <CalculateCRC>
 801225c:	4603      	mov	r3, r0
 801225e:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012260:	8a7b      	ldrh	r3, [r7, #18]
 8012262:	0a1b      	lsrs	r3, r3, #8
 8012264:	b29b      	uxth	r3, r3
 8012266:	b2db      	uxtb	r3, r3
 8012268:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 801226a:	8a7b      	ldrh	r3, [r7, #18]
 801226c:	b2db      	uxtb	r3, r3
 801226e:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012270:	7c3a      	ldrb	r2, [r7, #16]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	330b      	adds	r3, #11
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	429a      	cmp	r2, r3
 801227a:	d135      	bne.n	80122e8 <AnalyserCMD+0x188>
 801227c:	7c7a      	ldrb	r2, [r7, #17]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	330c      	adds	r3, #12
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	429a      	cmp	r2, r3
 8012286:	d12f      	bne.n	80122e8 <AnalyserCMD+0x188>
	}


	if(data[4]==CMD_CHECKBOARD)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3304      	adds	r3, #4
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	2b31      	cmp	r3, #49	; 0x31
 8012290:	d104      	bne.n	801229c <AnalyserCMD+0x13c>
	{
		Response_CheckAddress(typeconnect);
 8012292:	78bb      	ldrb	r3, [r7, #2]
 8012294:	4618      	mov	r0, r3
 8012296:	f000 f82f 	bl	80122f8 <Response_CheckAddress>
 801229a:	e026      	b.n	80122ea <AnalyserCMD+0x18a>
	}else if(data[4]==CMD_GETBOARDDATA)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3304      	adds	r3, #4
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	2b32      	cmp	r3, #50	; 0x32
 80122a4:	d105      	bne.n	80122b2 <AnalyserCMD+0x152>
	{
		Responce_GetBoardData(true,typeconnect);
 80122a6:	78bb      	ldrb	r3, [r7, #2]
 80122a8:	4619      	mov	r1, r3
 80122aa:	2001      	movs	r0, #1
 80122ac:	f000 f854 	bl	8012358 <Responce_GetBoardData>
 80122b0:	e01b      	b.n	80122ea <AnalyserCMD+0x18a>
	}else if(data[4] == CMD_GETBOARDDATAFULL)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	3304      	adds	r3, #4
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	2b33      	cmp	r3, #51	; 0x33
 80122ba:	d105      	bne.n	80122c8 <AnalyserCMD+0x168>
	{
		Responce_GetBoardData(false, typeconnect);
 80122bc:	78bb      	ldrb	r3, [r7, #2]
 80122be:	4619      	mov	r1, r3
 80122c0:	2000      	movs	r0, #0
 80122c2:	f000 f849 	bl	8012358 <Responce_GetBoardData>
 80122c6:	e010      	b.n	80122ea <AnalyserCMD+0x18a>
	}else if(data[4] == CMD_SETTIMERTC)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	3304      	adds	r3, #4
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b34      	cmp	r3, #52	; 0x34
 80122d0:	d10b      	bne.n	80122ea <AnalyserCMD+0x18a>
	{
		Responce_SetTimeRTC(data,USB);
 80122d2:	2101      	movs	r1, #1
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f000 f907 	bl	80124e8 <Responce_SetTimeRTC>
 80122da:	e006      	b.n	80122ea <AnalyserCMD+0x18a>
	if(isCalibaseMode) return;
 80122dc:	bf00      	nop
 80122de:	e004      	b.n	80122ea <AnalyserCMD+0x18a>
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 80122e0:	bf00      	nop
 80122e2:	e002      	b.n	80122ea <AnalyserCMD+0x18a>
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 80122e4:	bf00      	nop
 80122e6:	e000      	b.n	80122ea <AnalyserCMD+0x18a>
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 80122e8:	bf00      	nop
	}
}
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	200090cf 	.word	0x200090cf
 80122f4:	200090ce 	.word	0x200090ce

080122f8 <Response_CheckAddress>:


void Response_CheckAddress(TypeConnection typeconnect)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	71fb      	strb	r3, [r7, #7]
	uint8_t data[7];
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8012302:	233a      	movs	r3, #58	; 0x3a
 8012304:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 8012306:	2300      	movs	r3, #0
 8012308:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 801230a:	2300      	movs	r3, #0
 801230c:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 801230e:	2301      	movs	r3, #1
 8012310:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_CHECKBOARD;
 8012312:	2331      	movs	r3, #49	; 0x31
 8012314:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 8012316:	f107 030c 	add.w	r3, r7, #12
 801231a:	2204      	movs	r2, #4
 801231c:	2101      	movs	r1, #1
 801231e:	4618      	mov	r0, r3
 8012320:	f7ff fd24 	bl	8011d6c <CalculateCRC>
 8012324:	4603      	mov	r3, r0
 8012326:	82fb      	strh	r3, [r7, #22]
	data[5] = (uint8_t)((crc & 0xFF00)>>8);
 8012328:	8afb      	ldrh	r3, [r7, #22]
 801232a:	0a1b      	lsrs	r3, r3, #8
 801232c:	b29b      	uxth	r3, r3
 801232e:	b2db      	uxtb	r3, r3
 8012330:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(crc & 0x00FF);
 8012332:	8afb      	ldrh	r3, [r7, #22]
 8012334:	b2db      	uxtb	r3, r3
 8012336:	74bb      	strb	r3, [r7, #18]

	if(typeconnect ==RS485){
 8012338:	79fb      	ldrb	r3, [r7, #7]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d008      	beq.n	8012350 <Response_CheckAddress+0x58>

	}else if(typeconnect == USB){
 801233e:	79fb      	ldrb	r3, [r7, #7]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d105      	bne.n	8012350 <Response_CheckAddress+0x58>
		CDC_Transmit_FS(data, 7);
 8012344:	f107 030c 	add.w	r3, r7, #12
 8012348:	2107      	movs	r1, #7
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe fa42 	bl	80107d4 <CDC_Transmit_FS>
	}else if(typeconnect == BLE){

	}
}
 8012350:	bf00      	nop
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <Responce_GetBoardData>:
/* autoSend==true : chỉ gửi dữ liệu khi có sự thay đổi (mainChange==true)
 * 					nếu mainChange==false thì gửi lại Response thôi
 * autoSend==false : gửi toàn bộ dữ liệu bất chấp mainChange */
void Responce_GetBoardData(bool autoSend, TypeConnection typeconnect)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b094      	sub	sp, #80	; 0x50
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	460a      	mov	r2, r1
 8012362:	71fb      	strb	r3, [r7, #7]
 8012364:	4613      	mov	r3, r2
 8012366:	71bb      	strb	r3, [r7, #6]
	uint8_t data[53];
	uint8_t pieceA,pieceB,pie=0;
 8012368:	2300      	movs	r3, #0
 801236a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t crc;

	data[0] = CMD_BEGIN;
 801236e:	233a      	movs	r3, #58	; 0x3a
 8012370:	723b      	strb	r3, [r7, #8]
	data[1] = ADDRESSBOARD_PART0;
 8012372:	2300      	movs	r3, #0
 8012374:	727b      	strb	r3, [r7, #9]
	data[2] = ADDRESSBOARD_PART1;
 8012376:	2300      	movs	r3, #0
 8012378:	72bb      	strb	r3, [r7, #10]
	data[3] = ADDRESSBOARD_PART2;
 801237a:	2301      	movs	r3, #1
 801237c:	72fb      	strb	r3, [r7, #11]
	data[4] = CMD_GETBOARDDATA;
 801237e:	2332      	movs	r3, #50	; 0x32
 8012380:	733b      	strb	r3, [r7, #12]
	if(mainChange==true || autoSend==false)
 8012382:	4b56      	ldr	r3, [pc, #344]	; (80124dc <Responce_GetBoardData+0x184>)
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d105      	bne.n	8012396 <Responce_GetBoardData+0x3e>
 801238a:	79fb      	ldrb	r3, [r7, #7]
 801238c:	f083 0301 	eor.w	r3, r3, #1
 8012390:	b2db      	uxtb	r3, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	d07d      	beq.n	8012492 <Responce_GetBoardData+0x13a>
	{
	/* gắn datamain vào 32 byte tiếp theo */
		for(int i=0;i<32;i++){
 8012396:	2300      	movs	r3, #0
 8012398:	64bb      	str	r3, [r7, #72]	; 0x48
 801239a:	e03e      	b.n	801241a <Responce_GetBoardData+0xc2>
			pieceA = byteToPiece(datamain_old[pie]);
 801239c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123a0:	4a4f      	ldr	r2, [pc, #316]	; (80124e0 <Responce_GetBoardData+0x188>)
 80123a2:	5cd3      	ldrb	r3, [r2, r3]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff fe69 	bl	801207c <byteToPiece>
 80123aa:	4603      	mov	r3, r0
 80123ac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			//data_mainpiece[pie] = pieceA;
			data[i+5] = pieceA;
 80123b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123b2:	3305      	adds	r3, #5
 80123b4:	3350      	adds	r3, #80	; 0x50
 80123b6:	443b      	add	r3, r7
 80123b8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80123bc:	f803 2c48 	strb.w	r2, [r3, #-72]
			pie++;
 80123c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123c4:	3301      	adds	r3, #1
 80123c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pieceB = byteToPiece(datamain_old[pie]);
 80123ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123ce:	4a44      	ldr	r2, [pc, #272]	; (80124e0 <Responce_GetBoardData+0x188>)
 80123d0:	5cd3      	ldrb	r3, [r2, r3]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff fe52 	bl	801207c <byteToPiece>
 80123d8:	4603      	mov	r3, r0
 80123da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			//data_mainpiece[pie] = pieceB;
			data[i+5] = pieceB;
 80123de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123e0:	3305      	adds	r3, #5
 80123e2:	3350      	adds	r3, #80	; 0x50
 80123e4:	443b      	add	r3, r7
 80123e6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80123ea:	f803 2c48 	strb.w	r2, [r3, #-72]
			pie++;
 80123ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80123f2:	3301      	adds	r3, #1
 80123f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			data[i+5]=(pieceA<<4)+pieceB;
 80123f8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80123fc:	011b      	lsls	r3, r3, #4
 80123fe:	b2d9      	uxtb	r1, r3
 8012400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012402:	3305      	adds	r3, #5
 8012404:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8012408:	440a      	add	r2, r1
 801240a:	b2d2      	uxtb	r2, r2
 801240c:	3350      	adds	r3, #80	; 0x50
 801240e:	443b      	add	r3, r7
 8012410:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<32;i++){
 8012414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012416:	3301      	adds	r3, #1
 8012418:	64bb      	str	r3, [r7, #72]	; 0x48
 801241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801241c:	2b1f      	cmp	r3, #31
 801241e:	ddbd      	ble.n	801239c <Responce_GetBoardData+0x44>
		}
		for(int i=0;i<14;i++){
 8012420:	2300      	movs	r3, #0
 8012422:	647b      	str	r3, [r7, #68]	; 0x44
 8012424:	e00c      	b.n	8012440 <Responce_GetBoardData+0xe8>
			data[37+i] = data_chessclock[i];
 8012426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012428:	3325      	adds	r3, #37	; 0x25
 801242a:	492e      	ldr	r1, [pc, #184]	; (80124e4 <Responce_GetBoardData+0x18c>)
 801242c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801242e:	440a      	add	r2, r1
 8012430:	7812      	ldrb	r2, [r2, #0]
 8012432:	3350      	adds	r3, #80	; 0x50
 8012434:	443b      	add	r3, r7
 8012436:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<14;i++){
 801243a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801243c:	3301      	adds	r3, #1
 801243e:	647b      	str	r3, [r7, #68]	; 0x44
 8012440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012442:	2b0d      	cmp	r3, #13
 8012444:	ddef      	ble.n	8012426 <Responce_GetBoardData+0xce>
		}
		crc = CalculateCRC(data, 1, 50);
 8012446:	f107 0308 	add.w	r3, r7, #8
 801244a:	2232      	movs	r2, #50	; 0x32
 801244c:	2101      	movs	r1, #1
 801244e:	4618      	mov	r0, r3
 8012450:	f7ff fc8c 	bl	8011d6c <CalculateCRC>
 8012454:	4603      	mov	r3, r0
 8012456:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[51] = (uint8_t)((crc &0xFF00)>>8);
 801245a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801245e:	0a1b      	lsrs	r3, r3, #8
 8012460:	b29b      	uxth	r3, r3
 8012462:	b2db      	uxtb	r3, r3
 8012464:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		data[52] = (uint8_t)(crc &0x00FF);
 8012468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801246c:	b2db      	uxtb	r3, r3
 801246e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		/* Send Data*/
		if(typeconnect ==RS485){
 8012472:	79bb      	ldrb	r3, [r7, #6]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d008      	beq.n	801248a <Responce_GetBoardData+0x132>

		}else if(typeconnect == USB){
 8012478:	79bb      	ldrb	r3, [r7, #6]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d105      	bne.n	801248a <Responce_GetBoardData+0x132>
			CDC_Transmit_FS(data, 53);
 801247e:	f107 0308 	add.w	r3, r7, #8
 8012482:	2135      	movs	r1, #53	; 0x35
 8012484:	4618      	mov	r0, r3
 8012486:	f7fe f9a5 	bl	80107d4 <CDC_Transmit_FS>
		}else if(typeconnect == BLE){

		}
		mainChange=false;
 801248a:	4b14      	ldr	r3, [pc, #80]	; (80124dc <Responce_GetBoardData+0x184>)
 801248c:	2200      	movs	r2, #0
 801248e:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(data, 7);
		}else if(typeconnect == BLE){

		}
	}
}
 8012490:	e01f      	b.n	80124d2 <Responce_GetBoardData+0x17a>
		crc = CalculateCRC(data, 1, 4);
 8012492:	f107 0308 	add.w	r3, r7, #8
 8012496:	2204      	movs	r2, #4
 8012498:	2101      	movs	r1, #1
 801249a:	4618      	mov	r0, r3
 801249c:	f7ff fc66 	bl	8011d6c <CalculateCRC>
 80124a0:	4603      	mov	r3, r0
 80124a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[5] = (uint8_t)((crc &0xFF00)>>8);
 80124a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124aa:	0a1b      	lsrs	r3, r3, #8
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t)(crc &0x00FF);
 80124b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	73bb      	strb	r3, [r7, #14]
		if(typeconnect ==RS485){
 80124ba:	79bb      	ldrb	r3, [r7, #6]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d008      	beq.n	80124d2 <Responce_GetBoardData+0x17a>
		}else if(typeconnect == USB){
 80124c0:	79bb      	ldrb	r3, [r7, #6]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d105      	bne.n	80124d2 <Responce_GetBoardData+0x17a>
			CDC_Transmit_FS(data, 7);
 80124c6:	f107 0308 	add.w	r3, r7, #8
 80124ca:	2107      	movs	r1, #7
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe f981 	bl	80107d4 <CDC_Transmit_FS>
}
 80124d2:	bf00      	nop
 80124d4:	3750      	adds	r7, #80	; 0x50
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	200000fe 	.word	0x200000fe
 80124e0:	20008ea8 	.word	0x20008ea8
 80124e4:	20007c4c 	.word	0x20007c4c

080124e8 <Responce_SetTimeRTC>:
void Responce_SetTimeRTC(uint8_t *dat, TypeConnection typeconnect)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b088      	sub	sp, #32
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	460b      	mov	r3, r1
 80124f2:	70fb      	strb	r3, [r7, #3]
	uint8_t datatime[6];
	uint8_t data[7];
	for(int i=0;i<6;i++){
 80124f4:	2300      	movs	r3, #0
 80124f6:	61fb      	str	r3, [r7, #28]
 80124f8:	e00d      	b.n	8012516 <Responce_SetTimeRTC+0x2e>
		datatime[i] = dat[i+5];
 80124fa:	69fb      	ldr	r3, [r7, #28]
 80124fc:	3305      	adds	r3, #5
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	4413      	add	r3, r2
 8012502:	7819      	ldrb	r1, [r3, #0]
 8012504:	f107 0214 	add.w	r2, r7, #20
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	4413      	add	r3, r2
 801250c:	460a      	mov	r2, r1
 801250e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	3301      	adds	r3, #1
 8012514:	61fb      	str	r3, [r7, #28]
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	2b05      	cmp	r3, #5
 801251a:	ddee      	ble.n	80124fa <Responce_SetTimeRTC+0x12>
	}
	RTC_SetTime(datatime);
 801251c:	f107 0314 	add.w	r3, r7, #20
 8012520:	4618      	mov	r0, r3
 8012522:	f7fe ff1b 	bl	801135c <RTC_SetTime>
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8012526:	233a      	movs	r3, #58	; 0x3a
 8012528:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 801252a:	2300      	movs	r3, #0
 801252c:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 801252e:	2300      	movs	r3, #0
 8012530:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 8012532:	2301      	movs	r3, #1
 8012534:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_SETTIMERTC;
 8012536:	2334      	movs	r3, #52	; 0x34
 8012538:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 801253a:	f107 030c 	add.w	r3, r7, #12
 801253e:	2204      	movs	r2, #4
 8012540:	2101      	movs	r1, #1
 8012542:	4618      	mov	r0, r3
 8012544:	f7ff fc12 	bl	8011d6c <CalculateCRC>
 8012548:	4603      	mov	r3, r0
 801254a:	837b      	strh	r3, [r7, #26]
	data[5] = (uint8_t)((crc & 0xFF00)>>8);
 801254c:	8b7b      	ldrh	r3, [r7, #26]
 801254e:	0a1b      	lsrs	r3, r3, #8
 8012550:	b29b      	uxth	r3, r3
 8012552:	b2db      	uxtb	r3, r3
 8012554:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(crc & 0x00FF);
 8012556:	8b7b      	ldrh	r3, [r7, #26]
 8012558:	b2db      	uxtb	r3, r3
 801255a:	74bb      	strb	r3, [r7, #18]

	if(typeconnect ==RS485){
 801255c:	78fb      	ldrb	r3, [r7, #3]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d008      	beq.n	8012574 <Responce_SetTimeRTC+0x8c>

	}else if(typeconnect == USB){
 8012562:	78fb      	ldrb	r3, [r7, #3]
 8012564:	2b01      	cmp	r3, #1
 8012566:	d105      	bne.n	8012574 <Responce_SetTimeRTC+0x8c>
			CDC_Transmit_FS(data, 7);
 8012568:	f107 030c 	add.w	r3, r7, #12
 801256c:	2107      	movs	r1, #7
 801256e:	4618      	mov	r0, r3
 8012570:	f7fe f930 	bl	80107d4 <CDC_Transmit_FS>
	}else if(typeconnect == BLE){

	}
}
 8012574:	bf00      	nop
 8012576:	3720      	adds	r7, #32
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}

0801257c <UsbSendDateTime>:
void Responce_GetDataGameSave();
void Responce_EraseGameSave();


void UsbSendDateTime()
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b088      	sub	sp, #32
 8012580:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	uint8_t dat[7];
	RTC_TimeTypeDef 	sTime;
	RTC_DateTypeDef 	sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8012582:	1d3b      	adds	r3, r7, #4
 8012584:	2200      	movs	r2, #0
 8012586:	4619      	mov	r1, r3
 8012588:	4810      	ldr	r0, [pc, #64]	; (80125cc <UsbSendDateTime+0x50>)
 801258a:	f7f4 ff2d 	bl	80073e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 801258e:	463b      	mov	r3, r7
 8012590:	2200      	movs	r2, #0
 8012592:	4619      	mov	r1, r3
 8012594:	480d      	ldr	r0, [pc, #52]	; (80125cc <UsbSendDateTime+0x50>)
 8012596:	f7f5 f809 	bl	80075ac <HAL_RTC_GetDate>
	dat[0] = sTime.Seconds;
 801259a:	79bb      	ldrb	r3, [r7, #6]
 801259c:	763b      	strb	r3, [r7, #24]
	dat[1] = sTime.Minutes;
 801259e:	797b      	ldrb	r3, [r7, #5]
 80125a0:	767b      	strb	r3, [r7, #25]
	dat[2] = sTime.Hours;
 80125a2:	793b      	ldrb	r3, [r7, #4]
 80125a4:	76bb      	strb	r3, [r7, #26]
	dat[3] = sDate.Date;
 80125a6:	78bb      	ldrb	r3, [r7, #2]
 80125a8:	76fb      	strb	r3, [r7, #27]
	dat[4] = sDate.Month;
 80125aa:	787b      	ldrb	r3, [r7, #1]
 80125ac:	773b      	strb	r3, [r7, #28]
	dat[5] = sDate.Year;
 80125ae:	78fb      	ldrb	r3, [r7, #3]
 80125b0:	777b      	strb	r3, [r7, #29]
	dat[6] = NEWLINE;
 80125b2:	23ff      	movs	r3, #255	; 0xff
 80125b4:	77bb      	strb	r3, [r7, #30]
	CDC_Transmit_FS(dat, 7);
 80125b6:	f107 0318 	add.w	r3, r7, #24
 80125ba:	2107      	movs	r1, #7
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fe f909 	bl	80107d4 <CDC_Transmit_FS>
#endif
}
 80125c2:	bf00      	nop
 80125c4:	3720      	adds	r7, #32
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	2000248c 	.word	0x2000248c

080125d0 <UsbSendDataCalibase>:

void UsbSendDataCalibase()
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	// nếu USB không được kết nối thì return
	if(hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 80125d6:	4b43      	ldr	r3, [pc, #268]	; (80126e4 <UsbSendDataCalibase+0x114>)
 80125d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	2b03      	cmp	r3, #3
 80125e0:	d003      	beq.n	80125ea <UsbSendDataCalibase+0x1a>
	{
		isCalibaseMode = false;
 80125e2:	4b41      	ldr	r3, [pc, #260]	; (80126e8 <UsbSendDataCalibase+0x118>)
 80125e4:	2200      	movs	r2, #0
 80125e6:	701a      	strb	r2, [r3, #0]
		return;
 80125e8:	e078      	b.n	80126dc <UsbSendDataCalibase+0x10c>
	}

	if(isCalibaseMode==true){
 80125ea:	4b3f      	ldr	r3, [pc, #252]	; (80126e8 <UsbSendDataCalibase+0x118>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d074      	beq.n	80126dc <UsbSendDataCalibase+0x10c>
		if(calibase_type>17) calibase_type=0;
 80125f2:	4b3e      	ldr	r3, [pc, #248]	; (80126ec <UsbSendDataCalibase+0x11c>)
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b11      	cmp	r3, #17
 80125f8:	d902      	bls.n	8012600 <UsbSendDataCalibase+0x30>
 80125fa:	4b3c      	ldr	r3, [pc, #240]	; (80126ec <UsbSendDataCalibase+0x11c>)
 80125fc:	2200      	movs	r2, #0
 80125fe:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 8012600:	2300      	movs	r3, #0
 8012602:	60fb      	str	r3, [r7, #12]
 8012604:	e011      	b.n	801262a <UsbSendDataCalibase+0x5a>
			dataUsbCalibase[i]= (uint8_t)datapieces[calibase_type][i][PULSES];
 8012606:	4b39      	ldr	r3, [pc, #228]	; (80126ec <UsbSendDataCalibase+0x11c>)
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	4939      	ldr	r1, [pc, #228]	; (80126f0 <UsbSendDataCalibase+0x120>)
 801260c:	019a      	lsls	r2, r3, #6
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	4413      	add	r3, r2
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	440b      	add	r3, r1
 8012616:	885b      	ldrh	r3, [r3, #2]
 8012618:	b2d9      	uxtb	r1, r3
 801261a:	4a36      	ldr	r2, [pc, #216]	; (80126f4 <UsbSendDataCalibase+0x124>)
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4413      	add	r3, r2
 8012620:	460a      	mov	r2, r1
 8012622:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	3301      	adds	r3, #1
 8012628:	60fb      	str	r3, [r7, #12]
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2b3f      	cmp	r3, #63	; 0x3f
 801262e:	ddea      	ble.n	8012606 <UsbSendDataCalibase+0x36>
		}
		int inx =0;
 8012630:	2300      	movs	r3, #0
 8012632:	60bb      	str	r3, [r7, #8]
		for(int i=0;i<64;i++){
 8012634:	2300      	movs	r3, #0
 8012636:	607b      	str	r3, [r7, #4]
 8012638:	e033      	b.n	80126a2 <UsbSendDataCalibase+0xd2>
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]/254;
 801263a:	4b2c      	ldr	r3, [pc, #176]	; (80126ec <UsbSendDataCalibase+0x11c>)
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	492c      	ldr	r1, [pc, #176]	; (80126f0 <UsbSendDataCalibase+0x120>)
 8012640:	019a      	lsls	r2, r3, #6
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4413      	add	r3, r2
 8012646:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 801264a:	085b      	lsrs	r3, r3, #1
 801264c:	4a2a      	ldr	r2, [pc, #168]	; (80126f8 <UsbSendDataCalibase+0x128>)
 801264e:	fba2 2303 	umull	r2, r3, r2, r3
 8012652:	099b      	lsrs	r3, r3, #6
 8012654:	b29a      	uxth	r2, r3
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	3340      	adds	r3, #64	; 0x40
 801265a:	b2d1      	uxtb	r1, r2
 801265c:	4a25      	ldr	r2, [pc, #148]	; (80126f4 <UsbSendDataCalibase+0x124>)
 801265e:	54d1      	strb	r1, [r2, r3]
			inx++;
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	3301      	adds	r3, #1
 8012664:	60bb      	str	r3, [r7, #8]
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]%254;
 8012666:	4b21      	ldr	r3, [pc, #132]	; (80126ec <UsbSendDataCalibase+0x11c>)
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	4921      	ldr	r1, [pc, #132]	; (80126f0 <UsbSendDataCalibase+0x120>)
 801266c:	019a      	lsls	r2, r3, #6
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4413      	add	r3, r2
 8012672:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8012676:	0853      	lsrs	r3, r2, #1
 8012678:	491f      	ldr	r1, [pc, #124]	; (80126f8 <UsbSendDataCalibase+0x128>)
 801267a:	fba1 1303 	umull	r1, r3, r1, r3
 801267e:	0999      	lsrs	r1, r3, #6
 8012680:	460b      	mov	r3, r1
 8012682:	01db      	lsls	r3, r3, #7
 8012684:	1a5b      	subs	r3, r3, r1
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	1ad3      	subs	r3, r2, r3
 801268a:	b29a      	uxth	r2, r3
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	3340      	adds	r3, #64	; 0x40
 8012690:	b2d1      	uxtb	r1, r2
 8012692:	4a18      	ldr	r2, [pc, #96]	; (80126f4 <UsbSendDataCalibase+0x124>)
 8012694:	54d1      	strb	r1, [r2, r3]
			inx++;
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	3301      	adds	r3, #1
 801269a:	60bb      	str	r3, [r7, #8]
		for(int i=0;i<64;i++){
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3301      	adds	r3, #1
 80126a0:	607b      	str	r3, [r7, #4]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b3f      	cmp	r3, #63	; 0x3f
 80126a6:	ddc8      	ble.n	801263a <UsbSendDataCalibase+0x6a>
		}
		for(int i=0;i<64;i++){
 80126a8:	2300      	movs	r3, #0
 80126aa:	603b      	str	r3, [r7, #0]
 80126ac:	e00a      	b.n	80126c4 <UsbSendDataCalibase+0xf4>
			dataUsbCalibase[192+i] = datamain[i];
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	33c0      	adds	r3, #192	; 0xc0
 80126b2:	4912      	ldr	r1, [pc, #72]	; (80126fc <UsbSendDataCalibase+0x12c>)
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	440a      	add	r2, r1
 80126b8:	7811      	ldrb	r1, [r2, #0]
 80126ba:	4a0e      	ldr	r2, [pc, #56]	; (80126f4 <UsbSendDataCalibase+0x124>)
 80126bc:	54d1      	strb	r1, [r2, r3]
		for(int i=0;i<64;i++){
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	3301      	adds	r3, #1
 80126c2:	603b      	str	r3, [r7, #0]
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	2b3f      	cmp	r3, #63	; 0x3f
 80126c8:	ddf1      	ble.n	80126ae <UsbSendDataCalibase+0xde>
		}
		dataUsbCalibase[256]=255;
 80126ca:	4b0a      	ldr	r3, [pc, #40]	; (80126f4 <UsbSendDataCalibase+0x124>)
 80126cc:	22ff      	movs	r2, #255	; 0xff
 80126ce:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		CDC_Transmit_FS(dataUsbCalibase,257);
 80126d2:	f240 1101 	movw	r1, #257	; 0x101
 80126d6:	4807      	ldr	r0, [pc, #28]	; (80126f4 <UsbSendDataCalibase+0x124>)
 80126d8:	f7fe f87c 	bl	80107d4 <CDC_Transmit_FS>
	}
#endif

}
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	20006870 	.word	0x20006870
 80126e8:	200090cf 	.word	0x200090cf
 80126ec:	200090ce 	.word	0x200090ce
 80126f0:	20007c68 	.word	0x20007c68
 80126f4:	200090d0 	.word	0x200090d0
 80126f8:	81020409 	.word	0x81020409
 80126fc:	20008e68 	.word	0x20008e68

08012700 <__libc_init_array>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	4d0d      	ldr	r5, [pc, #52]	; (8012738 <__libc_init_array+0x38>)
 8012704:	4c0d      	ldr	r4, [pc, #52]	; (801273c <__libc_init_array+0x3c>)
 8012706:	1b64      	subs	r4, r4, r5
 8012708:	10a4      	asrs	r4, r4, #2
 801270a:	2600      	movs	r6, #0
 801270c:	42a6      	cmp	r6, r4
 801270e:	d109      	bne.n	8012724 <__libc_init_array+0x24>
 8012710:	4d0b      	ldr	r5, [pc, #44]	; (8012740 <__libc_init_array+0x40>)
 8012712:	4c0c      	ldr	r4, [pc, #48]	; (8012744 <__libc_init_array+0x44>)
 8012714:	f000 f82e 	bl	8012774 <_init>
 8012718:	1b64      	subs	r4, r4, r5
 801271a:	10a4      	asrs	r4, r4, #2
 801271c:	2600      	movs	r6, #0
 801271e:	42a6      	cmp	r6, r4
 8012720:	d105      	bne.n	801272e <__libc_init_array+0x2e>
 8012722:	bd70      	pop	{r4, r5, r6, pc}
 8012724:	f855 3b04 	ldr.w	r3, [r5], #4
 8012728:	4798      	blx	r3
 801272a:	3601      	adds	r6, #1
 801272c:	e7ee      	b.n	801270c <__libc_init_array+0xc>
 801272e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012732:	4798      	blx	r3
 8012734:	3601      	adds	r6, #1
 8012736:	e7f2      	b.n	801271e <__libc_init_array+0x1e>
 8012738:	08012d34 	.word	0x08012d34
 801273c:	08012d34 	.word	0x08012d34
 8012740:	08012d34 	.word	0x08012d34
 8012744:	08012d38 	.word	0x08012d38

08012748 <memcpy>:
 8012748:	440a      	add	r2, r1
 801274a:	4291      	cmp	r1, r2
 801274c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012750:	d100      	bne.n	8012754 <memcpy+0xc>
 8012752:	4770      	bx	lr
 8012754:	b510      	push	{r4, lr}
 8012756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801275a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801275e:	4291      	cmp	r1, r2
 8012760:	d1f9      	bne.n	8012756 <memcpy+0xe>
 8012762:	bd10      	pop	{r4, pc}

08012764 <memset>:
 8012764:	4402      	add	r2, r0
 8012766:	4603      	mov	r3, r0
 8012768:	4293      	cmp	r3, r2
 801276a:	d100      	bne.n	801276e <memset+0xa>
 801276c:	4770      	bx	lr
 801276e:	f803 1b01 	strb.w	r1, [r3], #1
 8012772:	e7f9      	b.n	8012768 <memset+0x4>

08012774 <_init>:
 8012774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012776:	bf00      	nop
 8012778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801277a:	bc08      	pop	{r3}
 801277c:	469e      	mov	lr, r3
 801277e:	4770      	bx	lr

08012780 <_fini>:
 8012780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012782:	bf00      	nop
 8012784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012786:	bc08      	pop	{r3}
 8012788:	469e      	mov	lr, r3
 801278a:	4770      	bx	lr
