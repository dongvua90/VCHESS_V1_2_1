
VCHESS_V1.2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013150  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  080132f0  080132f0  000232f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138a4  080138a4  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  080138a4  080138a4  000238a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138ac  080138ac  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138ac  080138ac  000238ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138b0  080138b0  000238b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080138b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000090ec  20000100  080139b4  00030100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200091ec  080139b4  000391ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf02  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006eb3  00000000  00000000  0005d032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002410  00000000  00000000  00063ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002128  00000000  00000000  000662f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020647  00000000  00000000  00068420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031dd3  00000000  00000000  00088a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6040  00000000  00000000  000ba83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016087a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009388  00000000  00000000  001608cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080132d8 	.word	0x080132d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	080132d8 	.word	0x080132d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <MX_DMA_Init+0x108>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a3e      	ldr	r2, [pc, #248]	; (80005ec <MX_DMA_Init+0x108>)
 80004f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_DMA_Init+0x108>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <MX_DMA_Init+0x108>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a37      	ldr	r2, [pc, #220]	; (80005ec <MX_DMA_Init+0x108>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_DMA_Init+0x108>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2105      	movs	r1, #5
 8000526:	200b      	movs	r0, #11
 8000528:	f001 fe97 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800052c:	200b      	movs	r0, #11
 800052e:	f001 feb0 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2105      	movs	r1, #5
 8000536:	200c      	movs	r0, #12
 8000538:	f001 fe8f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800053c:	200c      	movs	r0, #12
 800053e:	f001 fea8 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200d      	movs	r0, #13
 8000548:	f001 fe87 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800054c:	200d      	movs	r0, #13
 800054e:	f001 fea0 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2105      	movs	r1, #5
 8000556:	200e      	movs	r0, #14
 8000558:	f001 fe7f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800055c:	200e      	movs	r0, #14
 800055e:	f001 fe98 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2105      	movs	r1, #5
 8000566:	200f      	movs	r0, #15
 8000568:	f001 fe77 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800056c:	200f      	movs	r0, #15
 800056e:	f001 fe90 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2105      	movs	r1, #5
 8000576:	2011      	movs	r0, #17
 8000578:	f001 fe6f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800057c:	2011      	movs	r0, #17
 800057e:	f001 fe88 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	202f      	movs	r0, #47	; 0x2f
 8000588:	f001 fe67 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800058c:	202f      	movs	r0, #47	; 0x2f
 800058e:	f001 fe80 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2039      	movs	r0, #57	; 0x39
 8000598:	f001 fe5f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800059c:	2039      	movs	r0, #57	; 0x39
 800059e:	f001 fe78 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	203a      	movs	r0, #58	; 0x3a
 80005a8:	f001 fe57 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ac:	203a      	movs	r0, #58	; 0x3a
 80005ae:	f001 fe70 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2105      	movs	r1, #5
 80005b6:	2044      	movs	r0, #68	; 0x44
 80005b8:	f001 fe4f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80005bc:	2044      	movs	r0, #68	; 0x44
 80005be:	f001 fe68 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2105      	movs	r1, #5
 80005c6:	2045      	movs	r0, #69	; 0x45
 80005c8:	f001 fe47 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005cc:	2045      	movs	r0, #69	; 0x45
 80005ce:	f001 fe60 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2105      	movs	r1, #5
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 fe3f 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 fe58 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20002184 	.word	0x20002184
 8000620:	200021d8 	.word	0x200021d8

08000624 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binarySemGetFRAM */
  osSemaphoreDef(binarySemGetFRAM);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  binarySemGetFRAMHandle = osSemaphoreCreate(osSemaphore(binarySemGetFRAM), 1);
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f00e fc64 	bl	800ef06 <osSemaphoreCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_FREERTOS_Init+0xa4>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemMasterGetData */
  osSemaphoreDef(binarySemMasterGetData);
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
 8000648:	2300      	movs	r3, #0
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  binarySemMasterGetDataHandle = osSemaphoreCreate(osSemaphore(binarySemMasterGetData), 1);
 800064c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f00e fc57 	bl	800ef06 <osSemaphoreCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_FREERTOS_Init+0xa8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* definition and creation of binarySemI2C_Status */
  osSemaphoreDef(binarySemI2C_Status);
 800065e:	2300      	movs	r3, #0
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
 8000662:	2300      	movs	r3, #0
 8000664:	63fb      	str	r3, [r7, #60]	; 0x3c
  binarySemI2C_StatusHandle = osSemaphoreCreate(osSemaphore(binarySemI2C_Status), 1);
 8000666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f00e fc4a 	bl	800ef06 <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_FREERTOS_Init+0xac>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_FREERTOS_Init+0xb0>)
 800067a:	f107 041c 	add.w	r4, r7, #28
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00e fbd7 	bl	800ee46 <osThreadCreate>
 8000698:	4603      	mov	r3, r0
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0xb4>)
 800069c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskScanPiece */
  osThreadStaticDef(taskScanPiece, StartTaskScanPiece, osPriorityHigh, 0, 2048, taskScanPieceBuffer, &taskScanPieceControlBlock);
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FREERTOS_Init+0xb8>)
 80006a0:	463c      	mov	r4, r7
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskScanPieceHandle = osThreadCreate(osThread(taskScanPiece), NULL);
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f00e fbc6 	bl	800ee46 <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_FREERTOS_Init+0xbc>)
 80006be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	20002178 	.word	0x20002178
 80006cc:	2000217c 	.word	0x2000217c
 80006d0:	20002180 	.word	0x20002180
 80006d4:	0801330c 	.word	0x0801330c
 80006d8:	2000011c 	.word	0x2000011c
 80006dc:	08013328 	.word	0x08013328
 80006e0:	20000120 	.word	0x20000120

080006e4 <StartDefaultTask>:
  */
uint8_t cmd_test=0;

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f010 fac6 	bl	8010c7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  ChessClock_Init();
 80006f0:	f011 f88c 	bl	801180c <ChessClock_Init>

  /* Infinite loop */
  for(;;)
  {
	  Status_Task();
 80006f4:	f011 ffd0 	bl	8012698 <Status_Task>
	  osDelay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f00e fbf0 	bl	800eede <osDelay>
	  Status_Task();
 80006fe:	e7f9      	b.n	80006f4 <StartDefaultTask+0x10>

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <MX_GPIO_Init+0x148>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4a      	ldr	r2, [pc, #296]	; (8000848 <MX_GPIO_Init+0x148>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <MX_GPIO_Init+0x148>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <MX_GPIO_Init+0x148>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a43      	ldr	r2, [pc, #268]	; (8000848 <MX_GPIO_Init+0x148>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_GPIO_Init+0x148>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <MX_GPIO_Init+0x148>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a3c      	ldr	r2, [pc, #240]	; (8000848 <MX_GPIO_Init+0x148>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <MX_GPIO_Init+0x148>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a35      	ldr	r2, [pc, #212]	; (8000848 <MX_GPIO_Init+0x148>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	482f      	ldr	r0, [pc, #188]	; (800084c <MX_GPIO_Init+0x14c>)
 800078e:	f002 fc83 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_PWRC_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2112      	movs	r1, #18
 8000796:	482e      	ldr	r0, [pc, #184]	; (8000850 <MX_GPIO_Init+0x150>)
 8000798:	f002 fc7e 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2164      	movs	r1, #100	; 0x64
 80007a0:	482c      	ldr	r0, [pc, #176]	; (8000854 <MX_GPIO_Init+0x154>)
 80007a2:	f002 fc79 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CD4051_A_GPIO_Port, CD4051_A_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4828      	ldr	r0, [pc, #160]	; (8000850 <MX_GPIO_Init+0x150>)
 80007ae:	f002 fc73 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4820      	ldr	r0, [pc, #128]	; (800084c <MX_GPIO_Init+0x14c>)
 80007cc:	f002 f9fc 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_STA_Pin;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_STA_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <MX_GPIO_Init+0x150>)
 80007e4:	f002 f9f0 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_PWRC_Pin|CD4051_A_Pin;
 80007e8:	f248 0302 	movw	r3, #32770	; 0x8002
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_GPIO_Init+0x150>)
 8000802:	f002 f9e1 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000806:	2310      	movs	r3, #16
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_GPIO_Init+0x150>)
 800081e:	f002 f9d3 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|CD4051_B_Pin|CD4051_C_Pin;
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_GPIO_Init+0x154>)
 800083a:	f002 f9c5 	bl	8002bc8 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 160;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	22a0      	movs	r2, #160	; 0xa0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f002 fc19 	bl	80030cc <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f97c 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200023d8 	.word	0x200023d8
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <HAL_I2C_MspInit+0x104>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d16b      	bne.n	80009ae <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b38      	ldr	r3, [pc, #224]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_I2C_MspInit+0x108>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	482c      	ldr	r0, [pc, #176]	; (80009c0 <HAL_I2C_MspInit+0x10c>)
 8000910:	f002 f95a 	bl	8002bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b28      	ldr	r3, [pc, #160]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <HAL_I2C_MspInit+0x108>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_I2C_MspInit+0x108>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <HAL_I2C_MspInit+0x114>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800093c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800094c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000950:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800096a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000974:	f001 fcae 	bl	80022d4 <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800097e:	f000 f90d 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
 8000988:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_I2C_MspInit+0x110>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201f      	movs	r0, #31
 8000994:	f001 fc61 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000998:	201f      	movs	r0, #31
 800099a:	f001 fc7a 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2020      	movs	r0, #32
 80009a4:	f001 fc59 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009a8:	2020      	movs	r0, #32
 80009aa:	f001 fc72 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	2000242c 	.word	0x2000242c
 80009c8:	40026010 	.word	0x40026010

080009cc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_I2C_MspDeInit+0x50>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d11a      	bne.n	8000a14 <HAL_I2C_MspDeInit+0x48>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_I2C_MspDeInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_I2C_MspDeInit+0x54>)
 80009e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80009ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <HAL_I2C_MspDeInit+0x58>)
 80009f0:	f002 fa6e 	bl	8002ed0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80009f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <HAL_I2C_MspDeInit+0x58>)
 80009fa:	f002 fa69 	bl	8002ed0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fd14 	bl	8002430 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000a08:	201f      	movs	r0, #31
 8000a0a:	f001 fc50 	bl	80022ae <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000a0e:	2020      	movs	r0, #32
 8000a10:	f001 fc4d 	bl	80022ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f001 fabc 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f81e 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fe64 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a38:	f7ff fd54 	bl	80004e4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a3c:	f000 fb92 	bl	8001164 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a40:	f000 fc4a 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a44:	f000 fcc8 	bl	80013d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a48:	f000 fd52 	bl	80014f0 <MX_TIM4_Init>
  MX_I2C1_Init();
 8000a4c:	f7ff ff04 	bl	8000858 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a50:	f000 f95a 	bl	8000d08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a54:	f001 f948 	bl	8001ce8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000a58:	f001 f91c 	bl	8001c94 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000a5c:	f000 f8a4 	bl	8000ba8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  initReceiverUart();
 8000a60:	f011 fffe 	bl	8012a60 <initReceiverUart>
  //TaskScanPieceInit();
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a64:	f7ff fdde 	bl	8000624 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a68:	f00e f9e6 	bl	800ee38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x44>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f012 fc22 	bl	80132c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <SystemClock_Config+0xd4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <SystemClock_Config+0xd8>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae8:	2319      	movs	r3, #25
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 fe06 	bl	8006710 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f847 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f006 f868 	bl	8006c00 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b36:	f000 f831 	bl	8000b9c <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d102      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000b5e:	f001 fa45 	bl	8001fec <HAL_IncTick>
		  is_start_measure = false;
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000b62:	e00f      	b.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
  else if(htim->Instance == TIM4){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10a      	bne.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
	  if(is_start_measure==true){
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x38>
		  is_start_measure = false;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_2);
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b80:	f008 f8b0 	bl	8008ce4 <HAL_TIM_IC_Stop_DMA>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40014800 	.word	0x40014800
 8000b90:	40000800 	.word	0x40000800
 8000b94:	20007cde 	.word	0x20007cde
 8000b98:	20002624 	.word	0x20002624

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	if(RTC->BKP1R==1990){
 8000bae:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bb2:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d11d      	bne.n	8000bf6 <MX_RTC_Init+0x4e>
		 hrtc.Instance = RTC;
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_RTC_Init+0x104>)
 8000bbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000bbe:	601a      	str	r2, [r3, #0]
		  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_RTC_Init+0x104>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
		  hrtc.Init.AsynchPrediv = 127;
 8000bc6:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_RTC_Init+0x104>)
 8000bc8:	227f      	movs	r2, #127	; 0x7f
 8000bca:	609a      	str	r2, [r3, #8]
		  hrtc.Init.SynchPrediv = 255;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_RTC_Init+0x104>)
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	60da      	str	r2, [r3, #12]
		  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <MX_RTC_Init+0x104>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
		  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_RTC_Init+0x104>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
		  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <MX_RTC_Init+0x104>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
		  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be4:	4831      	ldr	r0, [pc, #196]	; (8000cac <MX_RTC_Init+0x104>)
 8000be6:	f006 fb0b 	bl	8007200 <HAL_RTC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d057      	beq.n	8000ca0 <MX_RTC_Init+0xf8>
		  {
		    Error_Handler();
 8000bf0:	f7ff ffd4 	bl	8000b9c <Error_Handler>
 8000bf4:	e055      	b.n	8000ca2 <MX_RTC_Init+0xfa>
		  }
		return;
	}
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_RTC_Init+0x104>)
 8000c0a:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_RTC_Init+0x100>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_RTC_Init+0x104>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_RTC_Init+0x104>)
 8000c16:	227f      	movs	r2, #127	; 0x7f
 8000c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <MX_RTC_Init+0x104>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_RTC_Init+0x104>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_RTC_Init+0x104>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_RTC_Init+0x104>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c32:	481e      	ldr	r0, [pc, #120]	; (8000cac <MX_RTC_Init+0x104>)
 8000c34:	f006 fae4 	bl	8007200 <HAL_RTC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000c3e:	f7ff ffad 	bl	8000b9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_RTC_Init+0x104>)
 8000c5e:	f006 fb45 	bl	80072ec <HAL_RTC_SetTime>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000c68:	f7ff ff98 	bl	8000b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8000c70:	2309      	movs	r3, #9
 8000c72:	707b      	strb	r3, [r7, #1]
  sDate.Date = 9;
 8000c74:	2309      	movs	r3, #9
 8000c76:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 22;
 8000c78:	2316      	movs	r3, #22
 8000c7a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4619      	mov	r1, r3
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <MX_RTC_Init+0x104>)
 8000c84:	f006 fc2a 	bl	80074dc <HAL_RTC_SetDate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_RTC_Init+0xea>
  {
    Error_Handler();
 8000c8e:	f7ff ff85 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 1990);
 8000c92:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8000c96:	2101      	movs	r1, #1
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_RTC_Init+0x104>)
 8000c9a:	f006 fdaf 	bl	80077fc <HAL_RTCEx_BKUPWrite>
 8000c9e:	e000      	b.n	8000ca2 <MX_RTC_Init+0xfa>
		return;
 8000ca0:	bf00      	nop
  /* USER CODE END RTC_Init 2 */

}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40002800 	.word	0x40002800
 8000cac:	2000248c 	.word	0x2000248c

08000cb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <HAL_RTC_MspInit+0x50>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d111      	bne.n	8000cf6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 f99f 	bl	8007024 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000cec:	f7ff ff56 	bl	8000b9c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_RTC_MspInit+0x54>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40002800 	.word	0x40002800
 8000d04:	42470e3c 	.word	0x42470e3c

08000d08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <MX_SPI1_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d54:	220a      	movs	r2, #10
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_SPI1_Init+0x64>)
 8000d5a:	f006 fd69 	bl	8007830 <HAL_SPI_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d64:	f7ff ff1a 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200024ac 	.word	0x200024ac
 8000d70:	40013000 	.word	0x40013000

08000d74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <HAL_SPI_MspInit+0x84>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d12b      	bne.n	8000dee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_SPI_MspInit+0x8c>)
 8000dea:	f001 feed 	bl	8002bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_MspInit+0x54>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <HAL_MspInit+0x54>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x54>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_MspInit+0x54>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_MspInit+0x54>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_MspInit+0x54>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
 8000e4a:	f001 fa06 	bl	800225a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_InitTick+0xd0>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e88:	f107 020c 	add.w	r2, r7, #12
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 f894 	bl	8006fc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e98:	f006 f87e 	bl	8006f98 <HAL_RCC_GetPCLK2Freq>
 8000e9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_InitTick+0xd4>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_InitTick+0xd8>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_InitTick+0xdc>)
 8000eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_InitTick+0xd8>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ed4:	f007 fa54 	bl	8008380 <HAL_TIM_Base_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d11b      	bne.n	8000f1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000ee6:	4813      	ldr	r0, [pc, #76]	; (8000f34 <HAL_InitTick+0xd8>)
 8000ee8:	f007 fa9a 	bl	8008420 <HAL_TIM_Base_Start_IT>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000efa:	201a      	movs	r0, #26
 8000efc:	f001 f9c9 	bl	8002292 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d808      	bhi.n	8000f18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	201a      	movs	r0, #26
 8000f0c:	f001 f9a5 	bl	800225a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_InitTick+0xe0>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e002      	b.n	8000f1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3730      	adds	r7, #48	; 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	431bde83 	.word	0x431bde83
 8000f34:	20002504 	.word	0x20002504
 8000f38:	40014800 	.word	0x40014800
 8000f3c:	20000004 	.word	0x20000004

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream0_IRQHandler+0x10>)
 8000f72:	f001 fba5 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000242c 	.word	0x2000242c

08000f80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3_up);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream1_IRQHandler+0x10>)
 8000f86:	f001 fb9b 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000278c 	.word	0x2000278c

08000f94 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream2_IRQHandler+0x10>)
 8000f9a:	f001 fb91 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000290c 	.word	0x2000290c

08000fa8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Stream3_IRQHandler+0x10>)
 8000fae:	f001 fb87 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000296c 	.word	0x2000296c

08000fbc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Stream4_IRQHandler+0x10>)
 8000fc2:	f001 fb7d 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000284c 	.word	0x2000284c

08000fd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream6_IRQHandler+0x10>)
 8000fd6:	f001 fb73 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200027ec 	.word	0x200027ec

08000fe4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000fea:	f007 ff3d 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000254c 	.word	0x2000254c

08000ff8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ffe:	f007 ff33 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000254c 	.word	0x2000254c

0800100c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001012:	f007 ff29 	bl	8008e68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001018:	f007 ff26 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000254c 	.word	0x2000254c
 8001024:	20002504 	.word	0x20002504

08001028 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM1_CC_IRQHandler+0x10>)
 800102e:	f007 ff1b 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000254c 	.word	0x2000254c

0800103c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM2_IRQHandler+0x10>)
 8001042:	f007 ff11 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20002594 	.word	0x20002594

08001050 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM3_IRQHandler+0x10>)
 8001056:	f007 ff07 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200025dc 	.word	0x200025dc

08001064 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM4_IRQHandler+0x10>)
 800106a:	f007 fefd 	bl	8008e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20002624 	.word	0x20002624

08001078 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <I2C1_EV_IRQHandler+0x10>)
 800107e:	f002 fb09 	bl	8003694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200023d8 	.word	0x200023d8

0800108c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <I2C1_ER_IRQHandler+0x10>)
 8001092:	f002 fc70 	bl	8003976 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200023d8 	.word	0x200023d8

080010a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART1_IRQHandler+0x10>)
 80010a6:	f009 f9b3 	bl	800a410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200029cc 	.word	0x200029cc

080010b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Stream7_IRQHandler+0x10>)
 80010ba:	f001 fb01 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200028ac 	.word	0x200028ac

080010c8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA2_Stream1_IRQHandler+0x10>)
 80010ce:	f001 faf7 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000266c 	.word	0x2000266c

080010dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA2_Stream2_IRQHandler+0x10>)
 80010e2:	f001 faed 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200026cc 	.word	0x200026cc

080010f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <OTG_FS_IRQHandler+0x10>)
 80010f6:	f004 f9de 	bl	80054b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20007560 	.word	0x20007560

08001104 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA2_Stream5_IRQHandler+0x10>)
 800110a:	f001 fad9 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20002a54 	.word	0x20002a54

08001118 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <DMA2_Stream6_IRQHandler+0x10>)
 800111e:	f001 facf 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000272c 	.word	0x2000272c

0800112c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <DMA2_Stream7_IRQHandler+0x10>)
 8001132:	f001 fac5 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20002ab4 	.word	0x20002ab4

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b096      	sub	sp, #88	; 0x58
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f012 f893 	bl	80132c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a2:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011a4:	4a4b      	ldr	r2, [pc, #300]	; (80012d4 <MX_TIM1_Init+0x170>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80011b4:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c2:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c8:	4b41      	ldr	r3, [pc, #260]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011ca:	2280      	movs	r2, #128	; 0x80
 80011cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ce:	4840      	ldr	r0, [pc, #256]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011d0:	f007 f8d6 	bl	8008380 <HAL_TIM_Base_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011da:	f7ff fcdf 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e8:	4619      	mov	r1, r3
 80011ea:	4839      	ldr	r0, [pc, #228]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011ec:	f008 f8a2 	bl	8009334 <HAL_TIM_ConfigClockSource>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011f6:	f7ff fcd1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	4835      	ldr	r0, [pc, #212]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80011fc:	f007 f972 	bl	80084e4 <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001206:	f7ff fcc9 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001216:	4619      	mov	r1, r3
 8001218:	482d      	ldr	r0, [pc, #180]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800121a:	f008 fee1 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001224:	f7ff fcba 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4820      	ldr	r0, [pc, #128]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800124e:	f007 ffaf 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001258:	f7ff fca0 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800125c:	2370      	movs	r3, #112	; 0x70
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	2204      	movs	r2, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_TIM1_Init+0x16c>)
 800126a:	f007 ffa1 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001274:	f7ff fc92 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	2208      	movs	r2, #8
 800127e:	4619      	mov	r1, r3
 8001280:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_TIM1_Init+0x16c>)
 8001282:	f007 ff95 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800128c:	f7ff fc86 	bl	8000b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80012b4:	f008 ff02 	bl	800a0bc <HAL_TIMEx_ConfigBreakDeadTime>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80012be:	f7ff fc6d 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM1_Init+0x16c>)
 80012c4:	f000 fc40 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80012c8:	bf00      	nop
 80012ca:	3758      	adds	r7, #88	; 0x58
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000254c 	.word	0x2000254c
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001308:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800131e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4828      	ldr	r0, [pc, #160]	; (80013d4 <MX_TIM2_Init+0xfc>)
 8001332:	f007 f825 	bl	8008380 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff fc2e 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800134e:	f007 fff1 	bl	8009334 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001358:	f7ff fc20 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800135e:	f007 f8c1 	bl	80084e4 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001368:	f7ff fc18 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4619      	mov	r1, r3
 800137a:	4816      	ldr	r0, [pc, #88]	; (80013d4 <MX_TIM2_Init+0xfc>)
 800137c:	f008 fe30 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001386:	f7ff fc09 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013a2:	f007 ff05 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013ac:	f7ff fbf6 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2208      	movs	r2, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013b8:	f007 fefa 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013c2:	f7ff fbeb 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM2_Init+0xfc>)
 80013c8:	f000 fbbe 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20002594 	.word	0x20002594

080013d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_TIM3_Init+0x110>)
 800140a:	4a38      	ldr	r2, [pc, #224]	; (80014ec <MX_TIM3_Init+0x114>)
 800140c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_TIM3_Init+0x110>)
 800141c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <MX_TIM3_Init+0x110>)
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142e:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM3_Init+0x110>)
 8001430:	f006 ffa6 	bl	8008380 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800143a:	f7ff fbaf 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	4827      	ldr	r0, [pc, #156]	; (80014e8 <MX_TIM3_Init+0x110>)
 800144c:	f007 ff72 	bl	8009334 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001456:	f7ff fba1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800145a:	4823      	ldr	r0, [pc, #140]	; (80014e8 <MX_TIM3_Init+0x110>)
 800145c:	f007 f842 	bl	80084e4 <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001466:	f7ff fb99 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	481b      	ldr	r0, [pc, #108]	; (80014e8 <MX_TIM3_Init+0x110>)
 800147a:	f008 fdb1 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001484:	f7ff fb8a 	bl	8000b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014a0:	f007 fe86 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014aa:	f7ff fb77 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2208      	movs	r2, #8
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014b6:	f007 fe7b 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014c0:	f7ff fb6c 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	220c      	movs	r2, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014cc:	f007 fe70 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80014d6:	f7ff fb61 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM3_Init+0x110>)
 80014dc:	f000 fb34 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	; 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200025dc 	.word	0x200025dc
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <MX_TIM4_Init+0xdc>)
 800151e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001532:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001540:	4821      	ldr	r0, [pc, #132]	; (80015c8 <MX_TIM4_Init+0xd8>)
 8001542:	f006 ff1d 	bl	8008380 <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800154c:	f7ff fb26 	bl	8000b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001554:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	481a      	ldr	r0, [pc, #104]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800155e:	f007 fee9 	bl	8009334 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001568:	f7ff fb18 	bl	8000b9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800156e:	f007 f9c3 	bl	80088f8 <HAL_TIM_IC_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001578:	f7ff fb10 	bl	8000b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_TIM4_Init+0xd8>)
 800158c:	f008 fd28 	bl	8009fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001596:	f7ff fb01 	bl	8000b9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015aa:	463b      	mov	r3, r7
 80015ac:	2204      	movs	r2, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM4_Init+0xd8>)
 80015b2:	f007 fd61 	bl	8009078 <HAL_TIM_IC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80015bc:	f7ff faee 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20002624 	.word	0x20002624
 80015cc:	40000800 	.word	0x40000800

080015d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a62      	ldr	r2, [pc, #392]	; (8001778 <HAL_TIM_Base_MspInit+0x1a8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 80d2 	bne.w	8001798 <HAL_TIM_Base_MspInit+0x1c8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	4a5f      	ldr	r2, [pc, #380]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6453      	str	r3, [r2, #68]	; 0x44
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_TIM_Base_MspInit+0x1ac>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001610:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001612:	4a5c      	ldr	r2, [pc, #368]	; (8001784 <HAL_TIM_Base_MspInit+0x1b4>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001618:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800161c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161e:	4b58      	ldr	r3, [pc, #352]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001620:	2240      	movs	r2, #64	; 0x40
 8001622:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001644:	2200      	movs	r2, #0
 8001646:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800164a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001656:	484a      	ldr	r0, [pc, #296]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 8001658:	f000 fe3c 	bl	80022d4 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_TIM_Base_MspInit+0x96>
    {
      Error_Handler();
 8001662:	f7ff fa9b 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a45      	ldr	r2, [pc, #276]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_TIM_Base_MspInit+0x1b0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001672:	4b45      	ldr	r3, [pc, #276]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_TIM_Base_MspInit+0x1bc>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800167a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800167e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001682:	2240      	movs	r2, #64	; 0x40
 8001684:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 8001696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169c:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 800169e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80016a4:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016aa:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80016b8:	4833      	ldr	r0, [pc, #204]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016ba:	f000 fe0b 	bl	80022d4 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_TIM_Base_MspInit+0xf8>
    {
      Error_Handler();
 80016c4:	f7ff fa6a 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <HAL_TIM_Base_MspInit+0x1b8>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016d6:	4a2f      	ldr	r2, [pc, #188]	; (8001794 <HAL_TIM_Base_MspInit+0x1c4>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016dc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 80016f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fc:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fe:	4b24      	ldr	r3, [pc, #144]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001704:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800171a:	481d      	ldr	r0, [pc, #116]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800171c:	f000 fdda 	bl	80022d4 <HAL_DMA_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_TIM_Base_MspInit+0x15a>
    {
      Error_Handler();
 8001726:	f7ff fa39 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_TIM_Base_MspInit+0x1c0>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	2018      	movs	r0, #24
 800173c:	f000 fd8d 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001740:	2018      	movs	r0, #24
 8001742:	f000 fda6 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2105      	movs	r1, #5
 800174a:	2019      	movs	r0, #25
 800174c:	f000 fd85 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001750:	2019      	movs	r0, #25
 8001752:	f000 fd9e 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	210f      	movs	r1, #15
 800175a:	201a      	movs	r0, #26
 800175c:	f000 fd7d 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001760:	201a      	movs	r0, #26
 8001762:	f000 fd96 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2105      	movs	r1, #5
 800176a:	201b      	movs	r0, #27
 800176c:	f000 fd75 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001770:	201b      	movs	r0, #27
 8001772:	f000 fd8e 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001776:	e1cb      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
 8001778:	40010000 	.word	0x40010000
 800177c:	40023800 	.word	0x40023800
 8001780:	2000266c 	.word	0x2000266c
 8001784:	40026428 	.word	0x40026428
 8001788:	200026cc 	.word	0x200026cc
 800178c:	40026440 	.word	0x40026440
 8001790:	2000272c 	.word	0x2000272c
 8001794:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	f040 8090 	bne.w	80018c4 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a40      	ldr	r2, [pc, #256]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_TIM_Base_MspInit+0x2e0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    hdma_tim2_ch3_up.Instance = DMA1_Stream1;
 80017c0:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017c2:	4a3d      	ldr	r2, [pc, #244]	; (80018b8 <HAL_TIM_Base_MspInit+0x2e8>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3_up.Init.Channel = DMA_CHANNEL_3;
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017cc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ce:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3_up.Init.Mode = DMA_NORMAL;
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 80017fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fe:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3_up) != HAL_OK)
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001808:	f000 fd64 	bl	80022d4 <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_TIM_Base_MspInit+0x246>
      Error_Handler();
 8001812:	f7ff f9c3 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3_up);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_ch3_up);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 8001826:	621a      	str	r2, [r3, #32]
 8001828:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_TIM_Base_MspInit+0x2e4>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_TIM_Base_MspInit+0x2f0>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001836:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800183a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800183e:	2240      	movs	r2, #64	; 0x40
 8001840:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001856:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800185a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001868:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001876:	f000 fd2d 	bl	80022d4 <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_MspInit+0x2b4>
      Error_Handler();
 8001880:	f7ff f98c 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
 800188a:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_TIM_Base_MspInit+0x2ec>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2105      	movs	r1, #5
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 fcda 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a6:	201c      	movs	r0, #28
 80018a8:	f000 fcf3 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 80018ac:	e130      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	2000278c 	.word	0x2000278c
 80018b8:	40026028 	.word	0x40026028
 80018bc:	200027ec 	.word	0x200027ec
 80018c0:	400260a0 	.word	0x400260a0
  else if(tim_baseHandle->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a93      	ldr	r2, [pc, #588]	; (8001b18 <HAL_TIM_Base_MspInit+0x548>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	f040 80b6 	bne.w	8001a3c <HAL_TIM_Base_MspInit+0x46c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b8e      	ldr	r3, [pc, #568]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018ee:	4a8d      	ldr	r2, [pc, #564]	; (8001b24 <HAL_TIM_Base_MspInit+0x554>)
 80018f0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018f8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001900:	4b87      	ldr	r3, [pc, #540]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001906:	4b86      	ldr	r3, [pc, #536]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190e:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001914:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001916:	4b82      	ldr	r3, [pc, #520]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800191e:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001920:	2200      	movs	r2, #0
 8001922:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001924:	4b7e      	ldr	r3, [pc, #504]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800192a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192c:	4b7c      	ldr	r3, [pc, #496]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001932:	487b      	ldr	r0, [pc, #492]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001934:	f000 fcce 	bl	80022d4 <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_TIM_Base_MspInit+0x372>
      Error_Handler();
 800193e:	f7ff f92d 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
 8001948:	4a75      	ldr	r2, [pc, #468]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a73      	ldr	r2, [pc, #460]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
 8001954:	4a72      	ldr	r2, [pc, #456]	; (8001b20 <HAL_TIM_Base_MspInit+0x550>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800195c:	4a73      	ldr	r2, [pc, #460]	; (8001b2c <HAL_TIM_Base_MspInit+0x55c>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8001960:	4b71      	ldr	r3, [pc, #452]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001962:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b6e      	ldr	r3, [pc, #440]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800197e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001982:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001984:	4b68      	ldr	r3, [pc, #416]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800198c:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001992:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 8001994:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001998:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80019a0:	4861      	ldr	r0, [pc, #388]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019a2:	f000 fc97 	bl	80022d4 <HAL_DMA_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_TIM_Base_MspInit+0x3e0>
      Error_Handler();
 80019ac:	f7ff f8f6 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019b6:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_TIM_Base_MspInit+0x558>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 80019bc:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019be:	4a5d      	ldr	r2, [pc, #372]	; (8001b34 <HAL_TIM_Base_MspInit+0x564>)
 80019c0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019c4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019fa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001a02:	484b      	ldr	r0, [pc, #300]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a04:	f000 fc66 	bl	80022d4 <HAL_DMA_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_TIM_Base_MspInit+0x442>
      Error_Handler();
 8001a0e:	f7ff f8c5 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a22:	621a      	str	r2, [r3, #32]
 8001a24:	4a42      	ldr	r2, [pc, #264]	; (8001b30 <HAL_TIM_Base_MspInit+0x560>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2105      	movs	r1, #5
 8001a2e:	201d      	movs	r0, #29
 8001a30:	f000 fc13 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a34:	201d      	movs	r0, #29
 8001a36:	f000 fc2c 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 8001a3a:	e069      	b.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
  else if(tim_baseHandle->Instance==TIM4)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3d      	ldr	r2, [pc, #244]	; (8001b38 <HAL_TIM_Base_MspInit+0x568>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d164      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x540>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a2c      	ldr	r2, [pc, #176]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_TIM_Base_MspInit+0x54c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IC_IN_TIM4_CH2_Pin;
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IC_IN_TIM4_CH2_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4828      	ldr	r0, [pc, #160]	; (8001b3c <HAL_TIM_Base_MspInit+0x56c>)
 8001a9a:	f001 f895 	bl	8002bc8 <HAL_GPIO_Init>
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_TIM_Base_MspInit+0x574>)
 8001aa2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aaa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aac:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001abe:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001adc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8001ae4:	4816      	ldr	r0, [pc, #88]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001ae6:	f000 fbf5 	bl	80022d4 <HAL_DMA_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_MspInit+0x524>
      Error_Handler();
 8001af0:	f7ff f854 	bl	8000b9c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_TIM_Base_MspInit+0x570>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2105      	movs	r1, #5
 8001b04:	201e      	movs	r0, #30
 8001b06:	f000 fba8 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b0a:	201e      	movs	r0, #30
 8001b0c:	f000 fbc1 	bl	8002292 <HAL_NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	3730      	adds	r7, #48	; 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	2000284c 	.word	0x2000284c
 8001b24:	40026070 	.word	0x40026070
 8001b28:	200028ac 	.word	0x200028ac
 8001b2c:	400260b8 	.word	0x400260b8
 8001b30:	2000290c 	.word	0x2000290c
 8001b34:	40026040 	.word	0x40026040
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	2000296c 	.word	0x2000296c
 8001b44:	40026058 	.word	0x40026058

08001b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_TIM_MspPostInit+0x138>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13e      	bne.n	8001be8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a44      	ldr	r2, [pc, #272]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a3d      	ldr	r2, [pc, #244]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4832      	ldr	r0, [pc, #200]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001bc0:	f001 f802 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	482a      	ldr	r0, [pc, #168]	; (8001c8c <HAL_TIM_MspPostInit+0x144>)
 8001be2:	f000 fff1 	bl	8002bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be6:	e047      	b.n	8001c78 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d11f      	bne.n	8001c32 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001c0e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4817      	ldr	r0, [pc, #92]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001c2c:	f000 ffcc 	bl	8002bc8 <HAL_GPIO_Init>
}
 8001c30:	e022      	b.n	8001c78 <HAL_TIM_MspPostInit+0x130>
  else if(timHandle->Instance==TIM3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_TIM_MspPostInit+0x148>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d11d      	bne.n	8001c78 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_TIM_MspPostInit+0x13c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001c58:	2313      	movs	r3, #19
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_MspPostInit+0x140>)
 8001c74:	f000 ffa8 	bl	8002bc8 <HAL_GPIO_Init>
}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	; 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40000400 	.word	0x40000400

08001c94 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART1_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f008 fa5c 	bl	800a188 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f7fe ff61 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200029cc 	.word	0x200029cc
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_USART2_UART_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f008 fa32 	bl	800a188 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f7fe ff37 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20002a10 	.word	0x20002a10
 8001d38:	40004400 	.word	0x40004400

08001d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a76      	ldr	r2, [pc, #472]	; (8001f34 <HAL_UART_MspInit+0x1f8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 80a5 	bne.w	8001eaa <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d70:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001daa:	2307      	movs	r3, #7
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4861      	ldr	r0, [pc, #388]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001db6:	f000 ff07 	bl	8002bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4859      	ldr	r0, [pc, #356]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001dd8:	f000 fef6 	bl	8002bc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001ddc:	4b58      	ldr	r3, [pc, #352]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001dde:	4a59      	ldr	r2, [pc, #356]	; (8001f44 <HAL_UART_MspInit+0x208>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001de2:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001de4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b55      	ldr	r3, [pc, #340]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e1e:	4848      	ldr	r0, [pc, #288]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e20:	f000 fa58 	bl	80022d4 <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001e2a:	f7fe feb7 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
 8001e34:	4a42      	ldr	r2, [pc, #264]	; (8001f40 <HAL_UART_MspInit+0x204>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e3c:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <HAL_UART_MspInit+0x210>)
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e4a:	2240      	movs	r2, #64	; 0x40
 8001e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e68:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e74:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e7c:	4832      	ldr	r0, [pc, #200]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e7e:	f000 fa29 	bl	80022d4 <HAL_DMA_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8001e88:	f7fe fe88 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_UART_MspInit+0x20c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2105      	movs	r1, #5
 8001e9c:	2025      	movs	r0, #37	; 0x25
 8001e9e:	f000 f9dc 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ea2:	2025      	movs	r0, #37	; 0x25
 8001ea4:	f000 f9f5 	bl	8002292 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ea8:	e040      	b.n	8001f2c <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a28      	ldr	r2, [pc, #160]	; (8001f50 <HAL_UART_MspInit+0x214>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d13b      	bne.n	8001f2c <HAL_UART_MspInit+0x1f0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_UART_MspInit+0x1fc>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eec:	2304      	movs	r3, #4
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efc:	2307      	movs	r3, #7
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001f08:	f000 fe5e 	bl	8002bc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <HAL_UART_MspInit+0x200>)
 8001f28:	f000 fe4e 	bl	8002bc8 <HAL_GPIO_Init>
}
 8001f2c:	bf00      	nop
 8001f2e:	3730      	adds	r7, #48	; 0x30
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40011000 	.word	0x40011000
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	20002a54 	.word	0x20002a54
 8001f44:	40026488 	.word	0x40026488
 8001f48:	20002ab4 	.word	0x20002ab4
 8001f4c:	400264b8 	.word	0x400264b8
 8001f50:	40004400 	.word	0x40004400

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff f8df 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f011 f96f 	bl	8013264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fd4f 	bl	8000a28 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001f98:	080138b4 	.word	0x080138b4
  ldr r2, =_sbss
 8001f9c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001fa0:	200091ec 	.word	0x200091ec

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f937 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f7fe ff40 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7fe ff12 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008
 8002010:	20002b14 	.word	0x20002b14

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20002b14 	.word	0x20002b14

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db12      	blt.n	800214c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	490a      	ldr	r1, [pc, #40]	; (8002158 <__NVIC_DisableIRQ+0x44>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	3320      	adds	r3, #32
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002140:	f3bf 8f4f 	dsb	sy
}
 8002144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002146:	f3bf 8f6f 	isb	sy
}
 800214a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800221c:	f3bf 8f4f 	dsb	sy
}
 8002220:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <__NVIC_SystemReset+0x24>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800222a:	4904      	ldr	r1, [pc, #16]	; (800223c <__NVIC_SystemReset+0x24>)
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_SystemReset+0x28>)
 800222e:	4313      	orrs	r3, r2
 8002230:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002232:	f3bf 8f4f 	dsb	sy
}
 8002236:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <__NVIC_SystemReset+0x20>
 800223c:	e000ed00 	.word	0xe000ed00
 8002240:	05fa0004 	.word	0x05fa0004

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff11 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff26 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff9a 	bl	80021b0 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff69 	bl	800215c <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff19 	bl	80020d8 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_DisableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80022ce:	f7ff ffa3 	bl	8002218 <__NVIC_SystemReset>
	...

080022d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fe98 	bl	8002014 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e099      	b.n	8002424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e00f      	b.n	8002332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff fe7f 	bl	8002014 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d908      	bls.n	8002332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e078      	b.n	8002424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e8      	bne.n	8002312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_DMA_Init+0x158>)
 800234c:	4013      	ands	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0307 	bic.w	r3, r3, #7
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d117      	bne.n	80023f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fb79 	bl	8002ad0 <DMA_CheckFifoParam>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023f2:	2301      	movs	r3, #1
 80023f4:	e016      	b.n	8002424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fb30 	bl	8002a64 <DMA_CalcBaseAndBitshift>
 8002404:	4603      	mov	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	223f      	movs	r2, #63	; 0x3f
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f010803f 	.word	0xf010803f

08002430 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e050      	b.n	80024e4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d101      	bne.n	8002452 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
 8002450:	e048      	b.n	80024e4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2221      	movs	r2, #33	; 0x21
 8002490:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fae6 	bl	8002a64 <DMA_CalcBaseAndBitshift>
 8002498:	4603      	mov	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_DMA_Start_IT+0x26>
 800250e:	2302      	movs	r3, #2
 8002510:	e040      	b.n	8002594 <HAL_DMA_Start_IT+0xa8>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d12f      	bne.n	8002586 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa64 	bl	8002a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	223f      	movs	r2, #63	; 0x3f
 8002546:	409a      	lsls	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0216 	orr.w	r2, r2, #22
 800255a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0208 	orr.w	r2, r2, #8
 8002572:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e005      	b.n	8002592 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800258e:	2302      	movs	r3, #2
 8002590:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025aa:	f7ff fd33 	bl	8002014 <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d008      	beq.n	80025ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e052      	b.n	8002674 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_Abort+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261e:	e013      	b.n	8002648 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002620:	f7ff fcf8 	bl	8002014 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d90c      	bls.n	8002648 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2203      	movs	r2, #3
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e015      	b.n	8002674 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e4      	bne.n	8002620 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d004      	beq.n	800269a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00c      	b.n	80026b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2205      	movs	r2, #5
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026cc:	4b8e      	ldr	r3, [pc, #568]	; (8002908 <HAL_DMA_IRQHandler+0x248>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a8e      	ldr	r2, [pc, #568]	; (800290c <HAL_DMA_IRQHandler+0x24c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2208      	movs	r2, #8
 80026ec:	409a      	lsls	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01a      	beq.n	800272c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2208      	movs	r2, #8
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2201      	movs	r2, #1
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2204      	movs	r2, #4
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2204      	movs	r2, #4
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0204 	orr.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2210      	movs	r2, #16
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d043      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03c      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2210      	movs	r2, #16
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d024      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
 80027ee:	e01f      	b.n	8002830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e016      	b.n	8002830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0208 	bic.w	r2, r2, #8
 800281e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2220      	movs	r2, #32
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 808f 	beq.w	8002960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8087 	beq.w	8002960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	2220      	movs	r2, #32
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b05      	cmp	r3, #5
 8002868:	d136      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0216 	bic.w	r2, r2, #22
 8002878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_DMA_IRQHandler+0x1da>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0208 	bic.w	r2, r2, #8
 80028a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	223f      	movs	r2, #63	; 0x3f
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d07e      	beq.n	80029cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
        }
        return;
 80028d6:	e079      	b.n	80029cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01d      	beq.n	8002922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10d      	bne.n	8002910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e02c      	b.n	8002960 <HAL_DMA_IRQHandler+0x2a0>
 8002906:	bf00      	nop
 8002908:	20000000 	.word	0x20000000
 800290c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
 8002920:	e01e      	b.n	8002960 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10f      	bne.n	8002950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0210 	bic.w	r2, r2, #16
 800293e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	2b00      	cmp	r3, #0
 8002966:	d032      	beq.n	80029ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2205      	movs	r2, #5
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d307      	bcc.n	80029a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f2      	bne.n	800298c <HAL_DMA_IRQHandler+0x2cc>
 80029a6:	e000      	b.n	80029aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
 80029ca:	e000      	b.n	80029ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80029cc:	bf00      	nop
    }
  }
}
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e2:	b2db      	uxtb	r3, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d108      	bne.n	8002a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a46:	e007      	b.n	8002a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3b10      	subs	r3, #16
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <DMA_CalcBaseAndBitshift+0x68>)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d909      	bls.n	8002aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	; 0x58
 8002aa4:	e007      	b.n	8002ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	aaaaaaab 	.word	0xaaaaaaab
 8002acc:	08013398 	.word	0x08013398

08002ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11f      	bne.n	8002b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d856      	bhi.n	8002b9e <DMA_CheckFifoParam+0xce>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <DMA_CheckFifoParam+0x28>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b1b 	.word	0x08002b1b
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b9f 	.word	0x08002b9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d046      	beq.n	8002ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e043      	b.n	8002ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b22:	d140      	bne.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e03d      	b.n	8002ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	d121      	bne.n	8002b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d837      	bhi.n	8002baa <DMA_CheckFifoParam+0xda>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <DMA_CheckFifoParam+0x70>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b57 	.word	0x08002b57
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002b69 	.word	0x08002b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e030      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d025      	beq.n	8002bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b66:	e022      	b.n	8002bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b70:	d11f      	bne.n	8002bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b76:	e01c      	b.n	8002bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d903      	bls.n	8002b86 <DMA_CheckFifoParam+0xb6>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d003      	beq.n	8002b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b84:	e018      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8a:	e015      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e00b      	b.n	8002bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e00a      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e008      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e006      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e004      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e159      	b.n	8002e98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8148 	bne.w	8002e92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80a2 	beq.w	8002e92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b54      	ldr	r3, [pc, #336]	; (8002eb0 <HAL_GPIO_Init+0x2e8>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6a:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	3302      	adds	r3, #2
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	220f      	movs	r2, #15
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x2f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x202>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <HAL_GPIO_Init+0x2f4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fe>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a47      	ldr	r2, [pc, #284]	; (8002ec0 <HAL_GPIO_Init+0x2f8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x1fa>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a46      	ldr	r2, [pc, #280]	; (8002ec4 <HAL_GPIO_Init+0x2fc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x1f6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a45      	ldr	r2, [pc, #276]	; (8002ec8 <HAL_GPIO_Init+0x300>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x1f2>
 8002db6:	2304      	movs	r3, #4
 8002db8:	e008      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e006      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e004      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x204>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f002 0203 	and.w	r2, r2, #3
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	4093      	lsls	r3, r2
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ddc:	4935      	ldr	r1, [pc, #212]	; (8002eb4 <HAL_GPIO_Init+0x2ec>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3301      	adds	r3, #1
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f67f aea2 	bls.w	8002be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40020000 	.word	0x40020000
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	40020800 	.word	0x40020800
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40013c00 	.word	0x40013c00

08002ed0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e0bb      	b.n	8003064 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f040 80ab 	bne.w	800305e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f08:	4a5c      	ldr	r2, [pc, #368]	; (800307c <HAL_GPIO_DeInit+0x1ac>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f14:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_GPIO_DeInit+0x1b0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_DeInit+0x96>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a53      	ldr	r2, [pc, #332]	; (8003084 <HAL_GPIO_DeInit+0x1b4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_DeInit+0x92>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_DeInit+0x1b8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_DeInit+0x8e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_DeInit+0x1bc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_DeInit+0x8a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_DeInit+0x1c0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_DeInit+0x86>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e008      	b.n	8002f68 <HAL_GPIO_DeInit+0x98>
 8002f56:	2307      	movs	r3, #7
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_DeInit+0x98>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e004      	b.n	8002f68 <HAL_GPIO_DeInit+0x98>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_DeInit+0x98>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_DeInit+0x98>
 8002f66:	2300      	movs	r3, #0
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	f002 0203 	and.w	r2, r2, #3
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	4093      	lsls	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d132      	bne.n	8002fde <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4944      	ldr	r1, [pc, #272]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	4941      	ldr	r1, [pc, #260]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	493d      	ldr	r1, [pc, #244]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fa2:	4b3c      	ldr	r3, [pc, #240]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	493a      	ldr	r1, [pc, #232]	; (8003094 <HAL_GPIO_DeInit+0x1c4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_GPIO_DeInit+0x1ac>)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	482a      	ldr	r0, [pc, #168]	; (800307c <HAL_GPIO_DeInit+0x1ac>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	3302      	adds	r3, #2
 8002fda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	08d2      	lsrs	r2, r2, #3
 8003014:	4019      	ands	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2103      	movs	r1, #3
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	2101      	movs	r1, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2103      	movs	r1, #3
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	401a      	ands	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f af40 	bls.w	8002eec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40013800 	.word	0x40013800
 8003080:	40020000 	.word	0x40020000
 8003084:	40020400 	.word	0x40020400
 8003088:	40020800 	.word	0x40020800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021000 	.word	0x40021000
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fbde 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f003 ff1e 	bl	8006f70 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	; (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	; (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	; (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	; (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	; (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	; (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	; (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e021      	b.n	80033aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2224      	movs	r2, #36	; 0x24
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fb24 	bl	80009cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033d0:	2b28      	cmp	r3, #40	; 0x28
 80033d2:	f040 811e 	bne.w	8003612 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e116      	b.n	8003614 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e10f      	b.n	8003614 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800340a:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b2a      	cmp	r3, #42	; 0x2a
 8003416:	d127      	bne.n	8003468 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003426:	d14c      	bne.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d048      	beq.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343e:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	4a75      	ldr	r2, [pc, #468]	; (800361c <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8003446:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f915 	bl	800267c <HAL_DMA_Abort_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d034      	beq.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
 8003466:	e02c      	b.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b29      	cmp	r3, #41	; 0x29
 8003472:	d126      	bne.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003482:	d11e      	bne.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a0:	4a5e      	ldr	r2, [pc, #376]	; (800361c <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80034a2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f8e7 	bl	800267c <HAL_DMA_Abort_IT>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034be:	4610      	mov	r0, r2
 80034c0:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	222a      	movs	r2, #42	; 0x2a
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	88fa      	ldrh	r2, [r7, #6]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	2b00      	cmp	r3, #0
 8003528:	d022      	beq.n	8003570 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	4a3c      	ldr	r2, [pc, #240]	; (8003620 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8003538:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	2200      	movs	r2, #0
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	2200      	movs	r2, #0
 8003548:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3310      	adds	r3, #16
 8003554:	4619      	mov	r1, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	f7fe ffc4 	bl	80024ec <HAL_DMA_Start_IT>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d13d      	bne.n	80035ea <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800356e:	e013      	b.n	8003598 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2228      	movs	r2, #40	; 0x28
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e03d      	b.n	8003614 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d4:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80035e4:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e014      	b.n	8003614 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	0800502d 	.word	0x0800502d
 8003620:	08004e09 	.word	0x08004e09
 8003624:	08004fb3 	.word	0x08004fb3

08003628 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b20      	cmp	r3, #32
 800363a:	d124      	bne.n	8003686 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2228      	movs	r2, #40	; 0x28
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d007      	beq.n	8003662 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003680:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d003      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	f040 80c1 	bne.w	800384e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_I2C_EV_IRQHandler+0x6e>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036ec:	d003      	beq.n	80036f6 <HAL_I2C_EV_IRQHandler+0x62>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_EV_IRQHandler+0x66>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x68>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	f000 8132 	beq.w	8003966 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_I2C_EV_IRQHandler+0x92>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	0a5b      	lsrs	r3, r3, #9
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f001 fd61 	bl	80051e0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fd57 	bl	80041d2 <I2C_Master_SB>
 8003724:	e092      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	08db      	lsrs	r3, r3, #3
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0xb2>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	0a5b      	lsrs	r3, r3, #9
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fdcd 	bl	80042de <I2C_Master_ADD10>
 8003744:	e082      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xd2>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fde7 	bl	8004332 <I2C_Master_ADDR>
 8003764:	e072      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03b      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003780:	f000 80f3 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	09db      	lsrs	r3, r3, #7
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f9c7 	bl	8003b3c <I2C_MasterTransmit_TXE>
 80037ae:	e04d      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 80d6 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	0a5b      	lsrs	r3, r3, #9
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80cf 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	2b21      	cmp	r3, #33	; 0x21
 80037d0:	d103      	bne.n	80037da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa4e 	bl	8003c74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	e0c7      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	f040 80c4 	bne.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fabc 	bl	8003d60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e8:	e0bf      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f8:	f000 80b7 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00f      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	0a9b      	lsrs	r3, r3, #10
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fb31 	bl	8003e88 <I2C_MasterReceive_RXNE>
 8003826:	e011      	b.n	800384c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 809a 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	0a5b      	lsrs	r3, r3, #9
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8093 	beq.w	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fbda 	bl	8003ffe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800384a:	e08e      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
 800384c:	e08d      	b.n	800396a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e007      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003898:	69b9      	ldr	r1, [r7, #24]
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 ff98 	bl	80047d0 <I2C_Slave_ADDR>
 80038a0:	e066      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	0a5b      	lsrs	r3, r3, #9
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 ffd2 	bl	8004864 <I2C_Slave_STOPF>
 80038c0:	e056      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b21      	cmp	r3, #33	; 0x21
 80038c6:	d002      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x23a>
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	2b29      	cmp	r3, #41	; 0x29
 80038cc:	d125      	bne.n	800391a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	09db      	lsrs	r3, r3, #7
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00f      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0a9b      	lsrs	r3, r3, #10
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 feae 	bl	8004654 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f8:	e039      	b.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d033      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	0a5b      	lsrs	r3, r3, #9
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02d      	beq.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fedb 	bl	80046ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003918:	e029      	b.n	800396e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00f      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	0a9b      	lsrs	r3, r3, #10
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fee6 	bl	8004710 <I2C_SlaveReceive_RXNE>
 8003944:	e014      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00e      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	0a5b      	lsrs	r3, r3, #9
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ff14 	bl	800478c <I2C_SlaveReceive_BTF>
 8003964:	e004      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003966:	bf00      	nop
 8003968:	e002      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800396e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003998:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	0a5b      	lsrs	r3, r3, #9
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <HAL_I2C_ER_IRQHandler+0x78>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80039ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	0a9b      	lsrs	r3, r3, #10
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03f      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0x104>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d039      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003a06:	7efb      	ldrb	r3, [r7, #27]
 8003a08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a20:	7ebb      	ldrb	r3, [r7, #26]
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d112      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xd6>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xd6>
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b21      	cmp	r3, #33	; 0x21
 8003a30:	d008      	beq.n	8003a44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b29      	cmp	r3, #41	; 0x29
 8003a36:	d005      	beq.n	8003a44 <HAL_I2C_ER_IRQHandler+0xce>
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b28      	cmp	r3, #40	; 0x28
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b21      	cmp	r3, #33	; 0x21
 8003a42:	d103      	bne.n	8003a4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f001 f83d 	bl	8004ac4 <I2C_Slave_AF>
 8003a4a:	e016      	b.n	8003a7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a5e:	7efb      	ldrb	r3, [r7, #27]
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d002      	beq.n	8003a6a <HAL_I2C_ER_IRQHandler+0xf4>
 8003a64:	7efb      	ldrb	r3, [r7, #27]
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d107      	bne.n	8003a7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	0adb      	lsrs	r3, r3, #11
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00e      	beq.n	8003aa4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f043 0308 	orr.w	r3, r3, #8
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003aa2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f001 f874 	bl	8004ba4 <I2C_ITError>
  }
}
 8003abc:	bf00      	nop
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d150      	bne.n	8003c04 <I2C_MasterTransmit_TXE+0xc8>
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b21      	cmp	r3, #33	; 0x21
 8003b66:	d14d      	bne.n	8003c04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d01d      	beq.n	8003baa <I2C_MasterTransmit_TXE+0x6e>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d01a      	beq.n	8003baa <I2C_MasterTransmit_TXE+0x6e>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b7a:	d016      	beq.n	8003baa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2211      	movs	r2, #17
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ff8e 	bl	8003ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ba8:	e060      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d107      	bne.n	8003bf4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff87 	bl	8003b00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bf2:	e03b      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff61 	bl	8003ac4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c02:	e033      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b21      	cmp	r3, #33	; 0x21
 8003c08:	d005      	beq.n	8003c16 <I2C_MasterTransmit_TXE+0xda>
 8003c0a:	7bbb      	ldrb	r3, [r7, #14]
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d12d      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b22      	cmp	r3, #34	; 0x22
 8003c14:	d12a      	bne.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d108      	bne.n	8003c32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c30:	e01c      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d103      	bne.n	8003c46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f88e 	bl	8003d60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003c44:	e012      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c6a:	e7ff      	b.n	8003c6c <I2C_MasterTransmit_TXE+0x130>
 8003c6c:	bf00      	nop
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b21      	cmp	r3, #33	; 0x21
 8003c8c:	d164      	bne.n	8003d58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	781a      	ldrb	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003cbc:	e04c      	b.n	8003d58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d01d      	beq.n	8003d00 <I2C_MasterTransmit_BTF+0x8c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d01a      	beq.n	8003d00 <I2C_MasterTransmit_BTF+0x8c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd0:	d016      	beq.n	8003d00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ce0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2211      	movs	r2, #17
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fee3 	bl	8003ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8003cfe:	e02b      	b.n	8003d58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d107      	bne.n	8003d4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fedc 	bl	8003b00 <HAL_I2C_MemTxCpltCallback>
}
 8003d48:	e006      	b.n	8003d58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff feb6 	bl	8003ac4 <HAL_I2C_MasterTxCpltCallback>
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11d      	bne.n	8003db4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d10b      	bne.n	8003d98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003d96:	e073      	b.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	121b      	asrs	r3, r3, #8
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003db2:	e065      	b.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10b      	bne.n	8003dd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dd2:	e055      	b.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d151      	bne.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b22      	cmp	r3, #34	; 0x22
 8003de0:	d10d      	bne.n	8003dfe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dfc:	e040      	b.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b21      	cmp	r3, #33	; 0x21
 8003e0c:	d112      	bne.n	8003e34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e32:	e025      	b.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d120      	bne.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b21      	cmp	r3, #33	; 0x21
 8003e42:	d11d      	bne.n	8003e80 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe40 	bl	8003b00 <HAL_I2C_MemTxCpltCallback>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b22      	cmp	r3, #34	; 0x22
 8003e9a:	f040 80ac 	bne.w	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d921      	bls.n	8003ef0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	f040 808c 	bne.w	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003eee:	e082      	b.n	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d075      	beq.n	8003fe4 <I2C_MasterReceive_RXNE+0x15c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d002      	beq.n	8003f04 <I2C_MasterReceive_RXNE+0x7c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d16f      	bne.n	8003fe4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f001 f939 	bl	800517c <I2C_WaitOnSTOPRequestThroughIT>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d142      	bne.n	8003f96 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f2e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d10a      	bne.n	8003f80 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fdcb 	bl	8003b14 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f7e:	e03a      	b.n	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2212      	movs	r2, #18
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fda2 	bl	8003ad8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f94:	e02f      	b.n	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fa4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f00d fbeb 	bl	80117b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fe2:	e008      	b.n	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	605a      	str	r2, [r3, #4]
}
 8003ff4:	e7ff      	b.n	8003ff6 <I2C_MasterReceive_RXNE+0x16e>
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b04      	cmp	r3, #4
 8004014:	d11b      	bne.n	800404e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004024:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800404c:	e0bd      	b.n	80041ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d129      	bne.n	80040ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00a      	beq.n	8004084 <I2C_MasterReceive_BTF+0x86>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b02      	cmp	r3, #2
 8004072:	d007      	beq.n	8004084 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004082:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040aa:	e08e      	b.n	80041ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d176      	bne.n	80041a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d002      	beq.n	80040c2 <I2C_MasterReceive_BTF+0xc4>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d108      	bne.n	80040d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e019      	b.n	8004108 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d002      	beq.n	80040e0 <I2C_MasterReceive_BTF+0xe2>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d108      	bne.n	80040f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e00a      	b.n	8004108 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d007      	beq.n	8004108 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004106:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004162:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d10a      	bne.n	800418e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fcc4 	bl	8003b14 <HAL_I2C_MemRxCpltCallback>
}
 800418c:	e01d      	b.n	80041ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2212      	movs	r2, #18
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fc9b 	bl	8003ad8 <HAL_I2C_MasterRxCpltCallback>
}
 80041a2:	e012      	b.n	80041ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d117      	bne.n	8004216 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004200:	e067      	b.n	80042d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]
}
 8004214:	e05d      	b.n	80042d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421e:	d133      	bne.n	8004288 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b21      	cmp	r3, #33	; 0x21
 800422a:	d109      	bne.n	8004240 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800423c:	611a      	str	r2, [r3, #16]
 800423e:	e008      	b.n	8004252 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <I2C_Master_SB+0x92>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d032      	beq.n	80042d2 <I2C_Master_SB+0x100>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02d      	beq.n	80042d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004284:	605a      	str	r2, [r3, #4]
}
 8004286:	e024      	b.n	80042d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10e      	bne.n	80042ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	b29b      	uxth	r3, r3
 8004296:	11db      	asrs	r3, r3, #7
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0306 	and.w	r3, r3, #6
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f063 030f 	orn	r3, r3, #15
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
}
 80042ac:	e011      	b.n	80042d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10d      	bne.n	80042d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	11db      	asrs	r3, r3, #7
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 0306 	and.w	r3, r3, #6
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f063 030e 	orn	r3, r3, #14
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d004      	beq.n	8004304 <I2C_Master_ADD10+0x26>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d108      	bne.n	8004316 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <I2C_Master_ADD10+0x48>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	605a      	str	r2, [r3, #4]
  }
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004332:	b480      	push	{r7}
 8004334:	b091      	sub	sp, #68	; 0x44
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004340:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	f040 8169 	bne.w	8004630 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <I2C_Master_ADDR+0x54>
 8004366:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800436a:	2b40      	cmp	r3, #64	; 0x40
 800436c:	d10b      	bne.n	8004386 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	633b      	str	r3, [r7, #48]	; 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	633b      	str	r3, [r7, #48]	; 0x30
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	e160      	b.n	8004648 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11d      	bne.n	80043ca <I2C_Master_ADDR+0x98>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004396:	d118      	bne.n	80043ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	651a      	str	r2, [r3, #80]	; 0x50
 80043c8:	e13e      	b.n	8004648 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d113      	bne.n	80043fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e115      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 808a 	bne.w	800451c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800440e:	d137      	bne.n	8004480 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d113      	bne.n	8004458 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	e0e7      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e0d3      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004482:	2b08      	cmp	r3, #8
 8004484:	d02e      	beq.n	80044e4 <I2C_Master_ADDR+0x1b2>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	2b20      	cmp	r3, #32
 800448a:	d02b      	beq.n	80044e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800448c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448e:	2b12      	cmp	r3, #18
 8004490:	d102      	bne.n	8004498 <I2C_Master_ADDR+0x166>
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	2b01      	cmp	r3, #1
 8004496:	d125      	bne.n	80044e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00e      	beq.n	80044bc <I2C_Master_ADDR+0x18a>
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d00b      	beq.n	80044bc <I2C_Master_ADDR+0x18a>
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d008      	beq.n	80044bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e007      	b.n	80044cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	e0a1      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e085      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d14d      	bne.n	80045c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	2b04      	cmp	r3, #4
 800452a:	d016      	beq.n	800455a <I2C_Master_ADDR+0x228>
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	2b02      	cmp	r3, #2
 8004530:	d013      	beq.n	800455a <I2C_Master_ADDR+0x228>
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	2b10      	cmp	r3, #16
 8004536:	d010      	beq.n	800455a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e007      	b.n	800456a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004568:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d117      	bne.n	80045aa <I2C_Master_ADDR+0x278>
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004580:	d00b      	beq.n	800459a <I2C_Master_ADDR+0x268>
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	2b01      	cmp	r3, #1
 8004586:	d008      	beq.n	800459a <I2C_Master_ADDR+0x268>
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b08      	cmp	r3, #8
 800458c:	d005      	beq.n	800459a <I2C_Master_ADDR+0x268>
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b10      	cmp	r3, #16
 8004592:	d002      	beq.n	800459a <I2C_Master_ADDR+0x268>
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	2b20      	cmp	r3, #32
 8004598:	d107      	bne.n	80045aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	e032      	b.n	8004628 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e0:	d117      	bne.n	8004612 <I2C_Master_ADDR+0x2e0>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e8:	d00b      	beq.n	8004602 <I2C_Master_ADDR+0x2d0>
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d008      	beq.n	8004602 <I2C_Master_ADDR+0x2d0>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d005      	beq.n	8004602 <I2C_Master_ADDR+0x2d0>
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d002      	beq.n	8004602 <I2C_Master_ADDR+0x2d0>
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d107      	bne.n	8004612 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004610:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800462e:	e00b      	b.n	8004648 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
}
 8004646:	e7ff      	b.n	8004648 <I2C_Master_ADDR+0x316>
 8004648:	bf00      	nop
 800464a:	3744      	adds	r7, #68	; 0x44
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d02b      	beq.n	80046c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	781a      	ldrb	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d114      	bne.n	80046c6 <I2C_SlaveTransmit_TXE+0x72>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b29      	cmp	r3, #41	; 0x29
 80046a0:	d111      	bne.n	80046c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2221      	movs	r2, #33	; 0x21
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2228      	movs	r2, #40	; 0x28
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fa13 	bl	8003aec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d011      	beq.n	8004704 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02c      	beq.n	8004784 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d114      	bne.n	8004784 <I2C_SlaveReceive_RXNE+0x74>
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b2a      	cmp	r3, #42	; 0x2a
 800475e:	d111      	bne.n	8004784 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2222      	movs	r2, #34	; 0x22
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2228      	movs	r2, #40	; 0x28
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f00c fff4 	bl	801176c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d012      	beq.n	80047c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ea:	2b28      	cmp	r3, #40	; 0x28
 80047ec:	d127      	bne.n	800483e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	09db      	lsrs	r3, r3, #7
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	81bb      	strh	r3, [r7, #12]
 8004820:	e002      	b.n	8004828 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004830:	89ba      	ldrh	r2, [r7, #12]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f00c ff6a 	bl	8011710 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800483c:	e00e      	b.n	800485c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004882:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d172      	bne.n	80049a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b22      	cmp	r3, #34	; 0x22
 80048c6:	d002      	beq.n	80048ce <I2C_Slave_STOPF+0x6a>
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b2a      	cmp	r3, #42	; 0x2a
 80048cc:	d135      	bne.n	800493a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0204 	orr.w	r2, r3, #4
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004900:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe f864 	bl	80029d4 <HAL_DMA_GetState>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d049      	beq.n	80049a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	4a69      	ldr	r2, [pc, #420]	; (8004abc <I2C_Slave_STOPF+0x258>)
 8004918:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd feac 	bl	800267c <HAL_DMA_Abort_IT>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d03d      	beq.n	80049a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004934:	4610      	mov	r0, r2
 8004936:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004938:	e035      	b.n	80049a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0204 	orr.w	r2, r3, #4
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800496c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe f82e 	bl	80029d4 <HAL_DMA_GetState>
 8004978:	4603      	mov	r3, r0
 800497a:	2b01      	cmp	r3, #1
 800497c:	d014      	beq.n	80049a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	4a4e      	ldr	r2, [pc, #312]	; (8004abc <I2C_Slave_STOPF+0x258>)
 8004984:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd fe76 	bl	800267c <HAL_DMA_Abort_IT>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049a0:	4610      	mov	r0, r2
 80049a2:	4798      	blx	r3
 80049a4:	e000      	b.n	80049a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d03e      	beq.n	8004a30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d112      	bne.n	80049e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d112      	bne.n	8004a1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f8b3 	bl	8004ba4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a3e:	e039      	b.n	8004ab4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b2a      	cmp	r3, #42	; 0x2a
 8004a44:	d109      	bne.n	8004a5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2228      	movs	r2, #40	; 0x28
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f00c fe89 	bl	801176c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b28      	cmp	r3, #40	; 0x28
 8004a64:	d111      	bne.n	8004a8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <I2C_Slave_STOPF+0x25c>)
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f00c fe64 	bl	8011750 <HAL_I2C_ListenCpltCallback>
}
 8004a88:	e014      	b.n	8004ab4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	2b22      	cmp	r3, #34	; 0x22
 8004a90:	d002      	beq.n	8004a98 <I2C_Slave_STOPF+0x234>
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	d10d      	bne.n	8004ab4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f00c fe5c 	bl	801176c <HAL_I2C_SlaveRxCpltCallback>
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	0800502d 	.word	0x0800502d
 8004ac0:	ffff0000 	.word	0xffff0000

08004ac4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d002      	beq.n	8004ae6 <I2C_Slave_AF+0x22>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d129      	bne.n	8004b3a <I2C_Slave_AF+0x76>
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b28      	cmp	r3, #40	; 0x28
 8004aea:	d126      	bne.n	8004b3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <I2C_Slave_AF+0xdc>)
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f00c fe0c 	bl	8011750 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b38:	e02e      	b.n	8004b98 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b21      	cmp	r3, #33	; 0x21
 8004b3e:	d126      	bne.n	8004b8e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <I2C_Slave_AF+0xdc>)
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2221      	movs	r2, #33	; 0x21
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fe ffb0 	bl	8003aec <HAL_I2C_SlaveTxCpltCallback>
}
 8004b8c:	e004      	b.n	8004b98 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b96:	615a      	str	r2, [r3, #20]
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	ffff0000 	.word	0xffff0000

08004ba4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d002      	beq.n	8004bc8 <I2C_ITError+0x24>
 8004bc2:	7bbb      	ldrb	r3, [r7, #14]
 8004bc4:	2b40      	cmp	r3, #64	; 0x40
 8004bc6:	d10a      	bne.n	8004bde <I2C_ITError+0x3a>
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b22      	cmp	r3, #34	; 0x22
 8004bcc:	d107      	bne.n	8004bde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004be4:	2b28      	cmp	r3, #40	; 0x28
 8004be6:	d107      	bne.n	8004bf8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2228      	movs	r2, #40	; 0x28
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bf6:	e015      	b.n	8004c24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c06:	d00a      	beq.n	8004c1e <I2C_ITError+0x7a>
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b60      	cmp	r3, #96	; 0x60
 8004c0c:	d007      	beq.n	8004c1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d162      	bne.n	8004cfa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d020      	beq.n	8004c94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	4a6a      	ldr	r2, [pc, #424]	; (8004e00 <I2C_ITError+0x25c>)
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd fd0c 	bl	800267c <HAL_DMA_Abort_IT>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8089 	beq.w	8004d7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
 8004c92:	e074      	b.n	8004d7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	4a59      	ldr	r2, [pc, #356]	; (8004e00 <I2C_ITError+0x25c>)
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fceb 	bl	800267c <HAL_DMA_Abort_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d068      	beq.n	8004d7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d10b      	bne.n	8004cd2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
 8004cf8:	e041      	b.n	8004d7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b60      	cmp	r3, #96	; 0x60
 8004d04:	d125      	bne.n	8004d52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d10b      	bne.n	8004d3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fe feec 	bl	8003b28 <HAL_I2C_AbortCpltCallback>
 8004d50:	e015      	b.n	8004d7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d10b      	bne.n	8004d78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f00c fd1d 	bl	80117b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10e      	bne.n	8004dac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d113      	bne.n	8004df8 <I2C_ITError+0x254>
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b28      	cmp	r3, #40	; 0x28
 8004dd4:	d110      	bne.n	8004df8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <I2C_ITError+0x260>)
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f00c fcac 	bl	8011750 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	0800502d 	.word	0x0800502d
 8004e04:	ffff0000 	.word	0xffff0000

08004e08 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	2200      	movs	r2, #0
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	2200      	movs	r2, #0
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004e62:	2b21      	cmp	r3, #33	; 0x21
 8004e64:	d007      	beq.n	8004e76 <I2C_DMAXferCplt+0x6e>
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004e6c:	2b22      	cmp	r3, #34	; 0x22
 8004e6e:	d131      	bne.n	8004ed4 <I2C_DMAXferCplt+0xcc>
 8004e70:	7cbb      	ldrb	r3, [r7, #18]
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d12e      	bne.n	8004ed4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	2b29      	cmp	r3, #41	; 0x29
 8004e90:	d10a      	bne.n	8004ea8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2221      	movs	r2, #33	; 0x21
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2228      	movs	r2, #40	; 0x28
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7fe fe23 	bl	8003aec <HAL_I2C_SlaveTxCpltCallback>
 8004ea6:	e00c      	b.n	8004ec2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004eac:	d109      	bne.n	8004ec2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2222      	movs	r2, #34	; 0x22
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2228      	movs	r2, #40	; 0x28
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ebc:	6978      	ldr	r0, [r7, #20]
 8004ebe:	f00c fc55 	bl	801176c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ed0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ed2:	e06a      	b.n	8004faa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d064      	beq.n	8004faa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d107      	bne.n	8004efa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f10:	d009      	beq.n	8004f26 <I2C_DMAXferCplt+0x11e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d006      	beq.n	8004f26 <I2C_DMAXferCplt+0x11e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f1e:	d002      	beq.n	8004f26 <I2C_DMAXferCplt+0x11e>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d107      	bne.n	8004f36 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f44:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f54:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004f64:	6978      	ldr	r0, [r7, #20]
 8004f66:	f00c fc27 	bl	80117b8 <HAL_I2C_ErrorCallback>
}
 8004f6a:	e01e      	b.n	8004faa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d10a      	bne.n	8004f96 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f7fe fdc0 	bl	8003b14 <HAL_I2C_MemRxCpltCallback>
}
 8004f94:	e009      	b.n	8004faa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2212      	movs	r2, #18
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fa4:	6978      	ldr	r0, [r7, #20]
 8004fa6:	f7fe fd97 	bl	8003ad8 <HAL_I2C_MasterRxCpltCallback>
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fd05 	bl	80029f0 <HAL_DMA_GetError>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d01b      	beq.n	8005024 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f043 0210 	orr.w	r2, r3, #16
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f00c fbca 	bl	80117b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005044:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005046:	4b4b      	ldr	r3, [pc, #300]	; (8005174 <I2C_DMAAbort+0x148>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	4a4a      	ldr	r2, [pc, #296]	; (8005178 <I2C_DMAAbort+0x14c>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	0a1a      	lsrs	r2, r3, #8
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00da      	lsls	r2, r3, #3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005072:	e00a      	b.n	800508a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b01      	subs	r3, #1
 8005078:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005088:	d0ea      	beq.n	8005060 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	2200      	movs	r2, #0
 8005098:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	2200      	movs	r2, #0
 80050a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	2200      	movs	r2, #0
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	2200      	movs	r2, #0
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d10e      	bne.n	800511a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2200      	movs	r2, #0
 8005110:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005112:	6978      	ldr	r0, [r7, #20]
 8005114:	f7fe fd08 	bl	8003b28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005118:	e027      	b.n	800516a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005120:	2b28      	cmp	r3, #40	; 0x28
 8005122:	d117      	bne.n	8005154 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005142:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2228      	movs	r2, #40	; 0x28
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005152:	e007      	b.n	8005164 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005164:	6978      	ldr	r0, [r7, #20]
 8005166:	f00c fb27 	bl	80117b8 <HAL_I2C_ErrorCallback>
}
 800516a:	bf00      	nop
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	20000000 	.word	0x20000000
 8005178:	14f8b589 	.word	0x14f8b589

0800517c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005188:	4b13      	ldr	r3, [pc, #76]	; (80051d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0a1a      	lsrs	r2, r3, #8
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e008      	b.n	80051cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d0e9      	beq.n	800519e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000000 	.word	0x20000000
 80051dc:	14f8b589 	.word	0x14f8b589

080051e0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051f0:	d103      	bne.n	80051fa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051f8:	e007      	b.n	800520a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005202:	d102      	bne.n	800520a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2208      	movs	r2, #8
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005218:	b08f      	sub	sp, #60	; 0x3c
 800521a:	af0a      	add	r7, sp, #40	; 0x28
 800521c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e10f      	b.n	8005448 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f00b ff36 	bl	80110b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2203      	movs	r2, #3
 800524c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f006 facd 	bl	800b806 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	687e      	ldr	r6, [r7, #4]
 8005274:	466d      	mov	r5, sp
 8005276:	f106 0410 	add.w	r4, r6, #16
 800527a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800527c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005286:	e885 0003 	stmia.w	r5, {r0, r1}
 800528a:	1d33      	adds	r3, r6, #4
 800528c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800528e:	6838      	ldr	r0, [r7, #0]
 8005290:	f006 f9a4 	bl	800b5dc <USB_CoreInit>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0d0      	b.n	8005448 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f006 fabb 	bl	800b828 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
 80052b6:	e04a      	b.n	800534e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	333d      	adds	r3, #61	; 0x3d
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	333c      	adds	r3, #60	; 0x3c
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	b298      	uxth	r0, r3
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	3344      	adds	r3, #68	; 0x44
 80052f4:	4602      	mov	r2, r0
 80052f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	3340      	adds	r3, #64	; 0x40
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3348      	adds	r3, #72	; 0x48
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334c      	adds	r3, #76	; 0x4c
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3354      	adds	r3, #84	; 0x54
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	3301      	adds	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d3af      	bcc.n	80052b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005358:	2300      	movs	r3, #0
 800535a:	73fb      	strb	r3, [r7, #15]
 800535c:	e044      	b.n	80053e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005374:	7bfa      	ldrb	r2, [r7, #15]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800538a:	7bfa      	ldrb	r2, [r7, #15]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053a0:	7bfa      	ldrb	r2, [r7, #15]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053b6:	7bfa      	ldrb	r2, [r7, #15]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053cc:	7bfa      	ldrb	r2, [r7, #15]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	3301      	adds	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d3b5      	bcc.n	800535e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	687e      	ldr	r6, [r7, #4]
 80053fa:	466d      	mov	r5, sp
 80053fc:	f106 0410 	add.w	r4, r6, #16
 8005400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800540c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005410:	1d33      	adds	r3, r6, #4
 8005412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f006 fa53 	bl	800b8c0 <USB_DevInit>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e00d      	b.n	8005448 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f007 fba2 	bl	800cb8a <USB_DevDisconnect>

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005450 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_PCD_Start+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e020      	b.n	80054ae <HAL_PCD_Start+0x5e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2b01      	cmp	r3, #1
 800547a:	d109      	bne.n	8005490 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005480:	2b01      	cmp	r3, #1
 8005482:	d005      	beq.n	8005490 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f006 f9a5 	bl	800b7e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f007 fb52 	bl	800cb48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054b6:	b590      	push	{r4, r7, lr}
 80054b8:	b08d      	sub	sp, #52	; 0x34
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f007 fc10 	bl	800ccf2 <USB_GetMode>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 848a 	bne.w	8005dee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f007 fb74 	bl	800cbcc <USB_ReadInterrupts>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8480 	beq.w	8005dec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f007 fb61 	bl	800cbcc <USB_ReadInterrupts>
 800550a:	4603      	mov	r3, r0
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	d107      	bne.n	8005524 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f002 0202 	and.w	r2, r2, #2
 8005522:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f007 fb4f 	bl	800cbcc <USB_ReadInterrupts>
 800552e:	4603      	mov	r3, r0
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d161      	bne.n	80055fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0210 	bic.w	r2, r2, #16
 8005546:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	4613      	mov	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4413      	add	r3, r2
 8005564:	3304      	adds	r3, #4
 8005566:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	0c5b      	lsrs	r3, r3, #17
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	2b02      	cmp	r3, #2
 8005572:	d124      	bne.n	80055be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800557a:	4013      	ands	r3, r2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d035      	beq.n	80055ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800558a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	6a38      	ldr	r0, [r7, #32]
 8005594:	f007 f986 	bl	800c8a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a4:	441a      	add	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055b6:	441a      	add	r2, r3
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
 80055bc:	e016      	b.n	80055ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	0c5b      	lsrs	r3, r3, #17
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d110      	bne.n	80055ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055d0:	2208      	movs	r2, #8
 80055d2:	4619      	mov	r1, r3
 80055d4:	6a38      	ldr	r0, [r7, #32]
 80055d6:	f007 f965 	bl	800c8a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055e6:	441a      	add	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0210 	orr.w	r2, r2, #16
 80055fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f007 fae3 	bl	800cbcc <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005610:	f040 80a7 	bne.w	8005762 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f007 fae8 	bl	800cbf2 <USB_ReadDevAllOutEpInterrupt>
 8005622:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005624:	e099      	b.n	800575a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 808e 	beq.w	800574e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f007 fb0c 	bl	800cc5a <USB_ReadDevOutEPInterrupt>
 8005642:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	2301      	movs	r3, #1
 800565e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fec2 	bl	80063ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	2308      	movs	r3, #8
 8005682:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 ff98 	bl	80065bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	2310      	movs	r3, #16
 80056a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d030      	beq.n	8005714 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d109      	bne.n	80056d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	3304      	adds	r3, #4
 80056e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	78db      	ldrb	r3, [r3, #3]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d108      	bne.n	8005702 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f00b fdd5 	bl	80112ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	461a      	mov	r2, r3
 8005710:	2302      	movs	r3, #2
 8005712:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d008      	beq.n	8005730 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	461a      	mov	r2, r3
 800572c:	2320      	movs	r3, #32
 800572e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	461a      	mov	r2, r3
 8005748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800574c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	3301      	adds	r3, #1
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	f47f af62 	bne.w	8005626 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f007 fa30 	bl	800cbcc <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005776:	f040 80db 	bne.w	8005930 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f007 fa51 	bl	800cc26 <USB_ReadDevAllInEpInterrupt>
 8005784:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800578a:	e0cd      	b.n	8005928 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80c2 	beq.w	800591c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f007 fa77 	bl	800cc96 <USB_ReadDevInEPInterrupt>
 80057a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d057      	beq.n	8005864 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	2201      	movs	r2, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69f9      	ldr	r1, [r7, #28]
 80057d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d4:	4013      	ands	r3, r2
 80057d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	461a      	mov	r2, r3
 80057e6:	2301      	movs	r3, #1
 80057e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d132      	bne.n	8005858 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	4613      	mov	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	334c      	adds	r3, #76	; 0x4c
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4403      	add	r3, r0
 8005812:	3348      	adds	r3, #72	; 0x48
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4419      	add	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4403      	add	r3, r0
 8005826:	334c      	adds	r3, #76	; 0x4c
 8005828:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d113      	bne.n	8005858 <HAL_PCD_IRQHandler+0x3a2>
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3354      	adds	r3, #84	; 0x54
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005850:	461a      	mov	r2, r3
 8005852:	2101      	movs	r1, #1
 8005854:	f007 fa7e 	bl	800cd54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f00b fca9 	bl	80111b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	461a      	mov	r2, r3
 800587c:	2308      	movs	r3, #8
 800587e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	461a      	mov	r2, r3
 8005898:	2310      	movs	r3, #16
 800589a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d023      	beq.n	800590a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80058c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c4:	6a38      	ldr	r0, [r7, #32]
 80058c6:	f006 f95f 	bl	800bb88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3338      	adds	r3, #56	; 0x38
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d108      	bne.n	80058f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2200      	movs	r2, #0
 80058ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f00b fcec 	bl	80112d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	461a      	mov	r2, r3
 8005906:	2302      	movs	r3, #2
 8005908:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fcdb 	bl	80062d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	f47f af2e 	bne.w	800578c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f007 f949 	bl	800cbcc <USB_ReadInterrupts>
 800593a:	4603      	mov	r3, r0
 800593c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005944:	d122      	bne.n	800598c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005960:	2b01      	cmp	r3, #1
 8005962:	d108      	bne.n	8005976 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800596c:	2100      	movs	r1, #0
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fec2 	bl	80066f8 <HAL_PCDEx_LPM_Callback>
 8005974:	e002      	b.n	800597c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f00b fc8a 	bl	8011290 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800598a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f007 f91b 	bl	800cbcc <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a0:	d112      	bne.n	80059c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f00b fc46 	bl	8011244 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80059c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 f8fd 	bl	800cbcc <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059dc:	f040 80b7 	bne.w	8005b4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2110      	movs	r1, #16
 80059fa:	4618      	mov	r0, r3
 80059fc:	f006 f8c4 	bl	800bb88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a04:	e046      	b.n	8005a94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	461a      	mov	r2, r3
 8005a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	3301      	adds	r3, #1
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3b3      	bcc.n	8005a06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ab0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aca:	f043 030b 	orr.w	r3, r3, #11
 8005ace:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae0:	f043 030b 	orr.w	r3, r3, #11
 8005ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ae6:	e015      	b.n	8005b14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005afa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005afe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f043 030b 	orr.w	r3, r3, #11
 8005b12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f007 f90b 	bl	800cd54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f007 f83a 	bl	800cbcc <USB_ReadInterrupts>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b62:	d124      	bne.n	8005bae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f007 f8d0 	bl	800cd0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f006 f885 	bl	800bc82 <USB_GetDevSpeed>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681c      	ldr	r4, [r3, #0]
 8005b84:	f001 f9e8 	bl	8006f58 <HAL_RCC_GetHCLKFreq>
 8005b88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	4620      	mov	r0, r4
 8005b94:	f005 fd84 	bl	800b6a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f00b fb34 	bl	8011206 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f007 f80a 	bl	800cbcc <USB_ReadInterrupts>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f00b fb11 	bl	80111ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f002 0208 	and.w	r2, r2, #8
 8005bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f006 fff5 	bl	800cbcc <USB_ReadInterrupts>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d122      	bne.n	8005c32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfc:	e014      	b.n	8005c28 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d105      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fb27 	bl	8006270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	3301      	adds	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d3e5      	bcc.n	8005bfe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f006 ffc8 	bl	800cbcc <USB_ReadInterrupts>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d13b      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c48:	2301      	movs	r3, #1
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4c:	e02b      	b.n	8005ca6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	4613      	mov	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d115      	bne.n	8005ca0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	da12      	bge.n	8005ca0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	333f      	adds	r3, #63	; 0x3f
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fae8 	bl	8006270 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3ce      	bcc.n	8005c4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f006 ff81 	bl	800cbcc <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd4:	d155      	bne.n	8005d82 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e045      	b.n	8005d68 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d12e      	bne.n	8005d62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da2b      	bge.n	8005d62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005d16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d121      	bne.n	8005d62 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	440b      	add	r3, r1
 8005d2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d30:	2201      	movs	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10a      	bne.n	8005d62 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d5e:	6053      	str	r3, [r2, #4]
            break;
 8005d60:	e007      	b.n	8005d72 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	3301      	adds	r3, #1
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3b4      	bcc.n	8005cdc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f006 ff20 	bl	800cbcc <USB_ReadInterrupts>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d10a      	bne.n	8005dae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f00b faab 	bl	80112f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f006 ff0a 	bl	800cbcc <USB_ReadInterrupts>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d115      	bne.n	8005dee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f00b fa9b 	bl	8011310 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	e000      	b.n	8005dee <HAL_PCD_IRQHandler+0x938>
      return;
 8005dec:	bf00      	nop
    }
  }
}
 8005dee:	3734      	adds	r7, #52	; 0x34
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd90      	pop	{r4, r7, pc}

08005df4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_PCD_SetAddress+0x1a>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e013      	b.n	8005e36 <HAL_PCD_SetAddress+0x42>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	78fa      	ldrb	r2, [r7, #3]
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f006 fe68 	bl	800cafc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	70fb      	strb	r3, [r7, #3]
 8005e50:	460b      	mov	r3, r1
 8005e52:	803b      	strh	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	da0f      	bge.n	8005e84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	3338      	adds	r3, #56	; 0x38
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4413      	add	r3, r2
 8005e78:	3304      	adds	r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	705a      	strb	r2, [r3, #1]
 8005e82:	e00f      	b.n	8005ea4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005eb0:	883a      	ldrh	r2, [r7, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	78ba      	ldrb	r2, [r7, #2]
 8005eba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ece:	78bb      	ldrb	r3, [r7, #2]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d102      	bne.n	8005eda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_PCD_EP_Open+0xaa>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e00e      	b.n	8005f06 <HAL_PCD_EP_Open+0xc8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68f9      	ldr	r1, [r7, #12]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f005 fee8 	bl	800bccc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005f04:	7afb      	ldrb	r3, [r7, #11]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da0f      	bge.n	8005f42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	3338      	adds	r3, #56	; 0x38
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	3304      	adds	r3, #4
 8005f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	705a      	strb	r2, [r3, #1]
 8005f40:	e00f      	b.n	8005f62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
 8005f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_PCD_EP_Close+0x6e>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e00e      	b.n	8005f9a <HAL_PCD_EP_Close+0x8c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f005 ff26 	bl	800bddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fb2:	7afb      	ldrb	r3, [r7, #11]
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	4613      	mov	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3304      	adds	r3, #4
 8005fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d102      	bne.n	8005ffe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	f006 fa05 	bl	800c424 <USB_EP0StartXfer>
 800601a:	e008      	b.n	800602e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	6979      	ldr	r1, [r7, #20]
 800602a:	f005 ffb3 	bl	800bf94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	460b      	mov	r3, r1
 8006076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	3338      	adds	r3, #56	; 0x38
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2201      	movs	r2, #1
 80060a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d102      	bne.n	80060c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	f006 f9a3 	bl	800c424 <USB_EP0StartXfer>
 80060de:	e008      	b.n	80060f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	461a      	mov	r2, r3
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	f005 ff51 	bl	800bf94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	429a      	cmp	r2, r3
 8006114:	d901      	bls.n	800611a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e050      	b.n	80061bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800611a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da0f      	bge.n	8006142 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	4613      	mov	r3, r2
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	3338      	adds	r3, #56	; 0x38
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4413      	add	r3, r2
 8006136:	3304      	adds	r3, #4
 8006138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	705a      	strb	r2, [r3, #1]
 8006140:	e00d      	b.n	800615e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_PCD_EP_SetStall+0x82>
 800617a:	2302      	movs	r3, #2
 800617c:	e01e      	b.n	80061bc <HAL_PCD_EP_SetStall+0xc0>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	4618      	mov	r0, r3
 800618e:	f006 fbe1 	bl	800c954 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	b2d9      	uxtb	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061ac:	461a      	mov	r2, r3
 80061ae:	f006 fdd1 	bl	800cd54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d901      	bls.n	80061e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e042      	b.n	8006268 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da0f      	bge.n	800620a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	f003 020f 	and.w	r2, r3, #15
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3338      	adds	r3, #56	; 0x38
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	705a      	strb	r2, [r3, #1]
 8006208:	e00f      	b.n	800622a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	3304      	adds	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_PCD_EP_ClrStall+0x86>
 8006246:	2302      	movs	r3, #2
 8006248:	e00e      	b.n	8006268 <HAL_PCD_EP_ClrStall+0xa4>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68f9      	ldr	r1, [r7, #12]
 8006258:	4618      	mov	r0, r3
 800625a:	f006 fbe9 	bl	800ca30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800627c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	da0c      	bge.n	800629e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	3338      	adds	r3, #56	; 0x38
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	3304      	adds	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e00c      	b.n	80062b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	f003 020f 	and.w	r2, r3, #15
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	3304      	adds	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68f9      	ldr	r1, [r7, #12]
 80062be:	4618      	mov	r0, r3
 80062c0:	f006 fa08 	bl	800c6d4 <USB_EPStopXfer>
 80062c4:	4603      	mov	r3, r0
 80062c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80062c8:	7afb      	ldrb	r3, [r7, #11]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	3338      	adds	r3, #56	; 0x38
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1a      	ldr	r2, [r3, #32]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d901      	bls.n	800630a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e06c      	b.n	80063e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	d902      	bls.n	8006326 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3303      	adds	r3, #3
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800632e:	e02b      	b.n	8006388 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	429a      	cmp	r2, r3
 8006344:	d902      	bls.n	800634c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	3303      	adds	r3, #3
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6919      	ldr	r1, [r3, #16]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006364:	b2db      	uxtb	r3, r3
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	4603      	mov	r3, r0
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f006 fa5c 	bl	800c828 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	441a      	add	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1a      	ldr	r2, [r3, #32]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	441a      	add	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	b29b      	uxth	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	429a      	cmp	r2, r3
 800639c:	d809      	bhi.n	80063b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1a      	ldr	r2, [r3, #32]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d203      	bcs.n	80063b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1be      	bne.n	8006330 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d811      	bhi.n	80063e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2201      	movs	r2, #1
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	43db      	mvns	r3, r3
 80063d8:	6939      	ldr	r1, [r7, #16]
 80063da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063de:	4013      	ands	r3, r2
 80063e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	333c      	adds	r3, #60	; 0x3c
 8006404:	3304      	adds	r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d17b      	bne.n	800651a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d015      	beq.n	8006458 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4a61      	ldr	r2, [pc, #388]	; (80065b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	f240 80b9 	bls.w	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80b3 	beq.w	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	461a      	mov	r2, r3
 8006450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006454:	6093      	str	r3, [r2, #8]
 8006456:	e0a7      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4413      	add	r3, r2
 800646a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646e:	461a      	mov	r2, r3
 8006470:	2320      	movs	r3, #32
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	e098      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8093 	bne.w	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	4a4b      	ldr	r2, [pc, #300]	; (80065b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d90f      	bls.n	80064aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	461a      	mov	r2, r3
 80064a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a6:	6093      	str	r3, [r2, #8]
 80064a8:	e07e      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	69da      	ldr	r2, [r3, #28]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	0159      	lsls	r1, r3, #5
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	440b      	add	r3, r1
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d114      	bne.n	800650c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6818      	ldr	r0, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064f4:	461a      	mov	r2, r3
 80064f6:	2101      	movs	r1, #1
 80064f8:	f006 fc2c 	bl	800cd54 <USB_EP0_OutStart>
 80064fc:	e006      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	441a      	add	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f00a fe34 	bl	8011180 <HAL_PCD_DataOutStageCallback>
 8006518:	e046      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4a26      	ldr	r2, [pc, #152]	; (80065b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d124      	bne.n	800656c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	461a      	mov	r2, r3
 800653a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653e:	6093      	str	r3, [r2, #8]
 8006540:	e032      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	461a      	mov	r2, r3
 800655a:	2320      	movs	r3, #32
 800655c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f00a fe0b 	bl	8011180 <HAL_PCD_DataOutStageCallback>
 800656a:	e01d      	b.n	80065a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d114      	bne.n	800659c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d108      	bne.n	800659c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006594:	461a      	mov	r2, r3
 8006596:	2100      	movs	r1, #0
 8006598:	f006 fbdc 	bl	800cd54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f00a fdec 	bl	8011180 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	4f54300a 	.word	0x4f54300a
 80065b8:	4f54310a 	.word	0x4f54310a

080065bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	333c      	adds	r3, #60	; 0x3c
 80065d4:	3304      	adds	r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <PCD_EP_OutSetupPacket_int+0x88>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d90e      	bls.n	8006610 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f00a fda3 	bl	801115c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a0a      	ldr	r2, [pc, #40]	; (8006644 <PCD_EP_OutSetupPacket_int+0x88>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d90c      	bls.n	8006638 <PCD_EP_OutSetupPacket_int+0x7c>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d108      	bne.n	8006638 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006630:	461a      	mov	r2, r3
 8006632:	2101      	movs	r1, #1
 8006634:	f006 fb8e 	bl	800cd54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	4f54300a 	.word	0x4f54300a

08006648 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
 8006654:	4613      	mov	r3, r2
 8006656:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d107      	bne.n	8006676 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006666:	883b      	ldrh	r3, [r7, #0]
 8006668:	0419      	lsls	r1, r3, #16
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	430a      	orrs	r2, r1
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
 8006674:	e028      	b.n	80066c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	0c1b      	lsrs	r3, r3, #16
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	e00d      	b.n	80066a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	3340      	adds	r3, #64	; 0x40
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	0c1b      	lsrs	r3, r3, #16
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	3301      	adds	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	7bfa      	ldrb	r2, [r7, #15]
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d3ec      	bcc.n	800668a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80066b0:	883b      	ldrh	r3, [r7, #0]
 80066b2:	0418      	lsls	r0, r3, #16
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6819      	ldr	r1, [r3, #0]
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	4302      	orrs	r2, r0
 80066c0:	3340      	adds	r3, #64	; 0x40
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e267      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d075      	beq.n	800681a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800672e:	4b88      	ldr	r3, [pc, #544]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b04      	cmp	r3, #4
 8006738:	d00c      	beq.n	8006754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673a:	4b85      	ldr	r3, [pc, #532]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006742:	2b08      	cmp	r3, #8
 8006744:	d112      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006746:	4b82      	ldr	r3, [pc, #520]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006752:	d10b      	bne.n	800676c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006754:	4b7e      	ldr	r3, [pc, #504]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05b      	beq.n	8006818 <HAL_RCC_OscConfig+0x108>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d157      	bne.n	8006818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e242      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d106      	bne.n	8006784 <HAL_RCC_OscConfig+0x74>
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a75      	ldr	r2, [pc, #468]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800677c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	e01d      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800678c:	d10c      	bne.n	80067a8 <HAL_RCC_OscConfig+0x98>
 800678e:	4b70      	ldr	r3, [pc, #448]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a6f      	ldr	r2, [pc, #444]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b6d      	ldr	r3, [pc, #436]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a6c      	ldr	r2, [pc, #432]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e00b      	b.n	80067c0 <HAL_RCC_OscConfig+0xb0>
 80067a8:	4b69      	ldr	r3, [pc, #420]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a68      	ldr	r2, [pc, #416]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4b66      	ldr	r3, [pc, #408]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a65      	ldr	r2, [pc, #404]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fb fc24 	bl	8002014 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067d0:	f7fb fc20 	bl	8002014 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b64      	cmp	r3, #100	; 0x64
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e207      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e2:	4b5b      	ldr	r3, [pc, #364]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0xc0>
 80067ee:	e014      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f0:	f7fb fc10 	bl	8002014 <HAL_GetTick>
 80067f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f8:	f7fb fc0c 	bl	8002014 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b64      	cmp	r3, #100	; 0x64
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e1f3      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680a:	4b51      	ldr	r3, [pc, #324]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0xe8>
 8006816:	e000      	b.n	800681a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d063      	beq.n	80068ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006826:	4b4a      	ldr	r3, [pc, #296]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006832:	4b47      	ldr	r3, [pc, #284]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683a:	2b08      	cmp	r3, #8
 800683c:	d11c      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800683e:	4b44      	ldr	r3, [pc, #272]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d116      	bne.n	8006878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800684a:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d001      	beq.n	8006862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e1c7      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006862:	4b3b      	ldr	r3, [pc, #236]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4937      	ldr	r1, [pc, #220]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006872:	4313      	orrs	r3, r2
 8006874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006876:	e03a      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <HAL_RCC_OscConfig+0x244>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fb fbc5 	bl	8002014 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800688e:	f7fb fbc1 	bl	8002014 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e1a8      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	4b2b      	ldr	r3, [pc, #172]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ac:	4b28      	ldr	r3, [pc, #160]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	4925      	ldr	r1, [pc, #148]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]
 80068c0:	e015      	b.n	80068ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <HAL_RCC_OscConfig+0x244>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fb fba4 	bl	8002014 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068d0:	f7fb fba0 	bl	8002014 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e187      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e2:	4b1b      	ldr	r3, [pc, #108]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d036      	beq.n	8006968 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d016      	beq.n	8006930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <HAL_RCC_OscConfig+0x248>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006908:	f7fb fb84 	bl	8002014 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006910:	f7fb fb80 	bl	8002014 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e167      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCC_OscConfig+0x240>)
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d0f0      	beq.n	8006910 <HAL_RCC_OscConfig+0x200>
 800692e:	e01b      	b.n	8006968 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <HAL_RCC_OscConfig+0x248>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006936:	f7fb fb6d 	bl	8002014 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800693c:	e00e      	b.n	800695c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800693e:	f7fb fb69 	bl	8002014 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d907      	bls.n	800695c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e150      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
 8006950:	40023800 	.word	0x40023800
 8006954:	42470000 	.word	0x42470000
 8006958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800695c:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ea      	bne.n	800693e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8097 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697a:	4b81      	ldr	r3, [pc, #516]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	4b7d      	ldr	r3, [pc, #500]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	4a7c      	ldr	r2, [pc, #496]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006994:	6413      	str	r3, [r2, #64]	; 0x40
 8006996:	4b7a      	ldr	r3, [pc, #488]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069a6:	4b77      	ldr	r3, [pc, #476]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d118      	bne.n	80069e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b2:	4b74      	ldr	r3, [pc, #464]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a73      	ldr	r2, [pc, #460]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069be:	f7fb fb29 	bl	8002014 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c6:	f7fb fb25 	bl	8002014 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e10c      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d8:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <HAL_RCC_OscConfig+0x474>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d106      	bne.n	80069fa <HAL_RCC_OscConfig+0x2ea>
 80069ec:	4b64      	ldr	r3, [pc, #400]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a63      	ldr	r2, [pc, #396]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	e01c      	b.n	8006a34 <HAL_RCC_OscConfig+0x324>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b05      	cmp	r3, #5
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x30c>
 8006a02:	4b5f      	ldr	r3, [pc, #380]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a08:	f043 0304 	orr.w	r3, r3, #4
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a5b      	ldr	r2, [pc, #364]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCC_OscConfig+0x324>
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4a57      	ldr	r2, [pc, #348]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
 8006a28:	4b55      	ldr	r3, [pc, #340]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a54      	ldr	r2, [pc, #336]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	f023 0304 	bic.w	r3, r3, #4
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fb faea 	bl	8002014 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fb fae6 	bl	8002014 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e0cb      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	4b49      	ldr	r3, [pc, #292]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0ee      	beq.n	8006a44 <HAL_RCC_OscConfig+0x334>
 8006a66:	e014      	b.n	8006a92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a68:	f7fb fad4 	bl	8002014 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fb fad0 	bl	8002014 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e0b5      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a86:	4b3e      	ldr	r3, [pc, #248]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1ee      	bne.n	8006a70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a98:	4b39      	ldr	r3, [pc, #228]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	4a38      	ldr	r2, [pc, #224]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 80a1 	beq.w	8006bf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aae:	4b34      	ldr	r3, [pc, #208]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d05c      	beq.n	8006b74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d141      	bne.n	8006b46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b31      	ldr	r3, [pc, #196]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fb faa4 	bl	8002014 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad0:	f7fb faa0 	bl	8002014 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e087      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae2:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f0      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	019b      	lsls	r3, r3, #6
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	3b01      	subs	r3, #1
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	061b      	lsls	r3, r3, #24
 8006b12:	491b      	ldr	r1, [pc, #108]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b18:	4b1b      	ldr	r3, [pc, #108]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1e:	f7fb fa79 	bl	8002014 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fb fa75 	bl	8002014 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e05c      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x416>
 8006b44:	e054      	b.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <HAL_RCC_OscConfig+0x478>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4c:	f7fb fa62 	bl	8002014 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fb fa5e 	bl	8002014 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e045      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <HAL_RCC_OscConfig+0x470>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x444>
 8006b72:	e03d      	b.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e038      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40007000 	.word	0x40007000
 8006b88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	; (8006bfc <HAL_RCC_OscConfig+0x4ec>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d028      	beq.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d121      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d11a      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d111      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d107      	bne.n	8006bec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40023800 	.word	0x40023800

08006c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0cc      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c14:	4b68      	ldr	r3, [pc, #416]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d90c      	bls.n	8006c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c22:	4b65      	ldr	r3, [pc, #404]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2a:	4b63      	ldr	r3, [pc, #396]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d001      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0b8      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d005      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c54:	4b59      	ldr	r3, [pc, #356]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4a58      	ldr	r2, [pc, #352]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c6c:	4b53      	ldr	r3, [pc, #332]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a52      	ldr	r2, [pc, #328]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c78:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	494d      	ldr	r1, [pc, #308]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d044      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d107      	bne.n	8006cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	4b47      	ldr	r3, [pc, #284]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d119      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e07f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d107      	bne.n	8006cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e06f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cce:	4b3b      	ldr	r3, [pc, #236]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e067      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cde:	4b37      	ldr	r3, [pc, #220]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 0203 	bic.w	r2, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4934      	ldr	r1, [pc, #208]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cf0:	f7fb f990 	bl	8002014 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cf6:	e00a      	b.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf8:	f7fb f98c 	bl	8002014 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e04f      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	4b2b      	ldr	r3, [pc, #172]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 020c 	and.w	r2, r3, #12
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d1eb      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d20c      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2e:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d36:	4b20      	ldr	r3, [pc, #128]	; (8006db8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e032      	b.n	8006dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d54:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	4916      	ldr	r1, [pc, #88]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	490e      	ldr	r1, [pc, #56]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d86:	f000 f821 	bl	8006dcc <HAL_RCC_GetSysClockFreq>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	091b      	lsrs	r3, r3, #4
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	490a      	ldr	r1, [pc, #40]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8006d98:	5ccb      	ldrb	r3, [r1, r3]
 8006d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9e:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8006da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006da2:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fa f858 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40023c00 	.word	0x40023c00
 8006dbc:	40023800 	.word	0x40023800
 8006dc0:	08013380 	.word	0x08013380
 8006dc4:	20000000 	.word	0x20000000
 8006dc8:	20000004 	.word	0x20000004

08006dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd0:	b090      	sub	sp, #64	; 0x40
 8006dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	2300      	movs	r3, #0
 8006dde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006de4:	4b59      	ldr	r3, [pc, #356]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d00d      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x40>
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	f200 80a1 	bhi.w	8006f38 <HAL_RCC_GetSysClockFreq+0x16c>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x34>
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dfe:	e09b      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e00:	4b53      	ldr	r3, [pc, #332]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e04:	e09b      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e06:	4b53      	ldr	r3, [pc, #332]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e0a:	e098      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e0c:	4b4f      	ldr	r3, [pc, #316]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e16:	4b4d      	ldr	r3, [pc, #308]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d028      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e22:	4b4a      	ldr	r3, [pc, #296]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	2200      	movs	r2, #0
 8006e2a:	623b      	str	r3, [r7, #32]
 8006e2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e34:	2100      	movs	r1, #0
 8006e36:	4b47      	ldr	r3, [pc, #284]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e38:	fb03 f201 	mul.w	r2, r3, r1
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	fb00 f303 	mul.w	r3, r0, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	4a43      	ldr	r2, [pc, #268]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e46:	fba0 1202 	umull	r1, r2, r0, r2
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4c:	460a      	mov	r2, r1
 8006e4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e52:	4413      	add	r3, r2
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e66:	f7f9 f9bb 	bl	80001e0 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4613      	mov	r3, r2
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	e053      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e74:	4b35      	ldr	r3, [pc, #212]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	099b      	lsrs	r3, r3, #6
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	617a      	str	r2, [r7, #20]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	465b      	mov	r3, fp
 8006e8e:	f04f 0000 	mov.w	r0, #0
 8006e92:	f04f 0100 	mov.w	r1, #0
 8006e96:	0159      	lsls	r1, r3, #5
 8006e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e9c:	0150      	lsls	r0, r2, #5
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ea6:	eb63 090b 	sbc.w	r9, r3, fp
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006eb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006eba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ebe:	ebb2 0408 	subs.w	r4, r2, r8
 8006ec2:	eb63 0509 	sbc.w	r5, r3, r9
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	00eb      	lsls	r3, r5, #3
 8006ed0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ed4:	00e2      	lsls	r2, r4, #3
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	461d      	mov	r5, r3
 8006eda:	eb14 030a 	adds.w	r3, r4, sl
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	eb45 030b 	adc.w	r3, r5, fp
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	028b      	lsls	r3, r1, #10
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006efc:	4621      	mov	r1, r4
 8006efe:	028a      	lsls	r2, r1, #10
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	2200      	movs	r2, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	60fa      	str	r2, [r7, #12]
 8006f0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f10:	f7f9 f966 	bl	80001e0 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4613      	mov	r3, r2
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	3301      	adds	r3, #1
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f36:	e002      	b.n	8006f3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3740      	adds	r7, #64	; 0x40
 8006f44:	46bd      	mov	sp, r7
 8006f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40023800 	.word	0x40023800
 8006f50:	00f42400 	.word	0x00f42400
 8006f54:	017d7840 	.word	0x017d7840

08006f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f5c:	4b03      	ldr	r3, [pc, #12]	; (8006f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000000 	.word	0x20000000

08006f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f74:	f7ff fff0 	bl	8006f58 <HAL_RCC_GetHCLKFreq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	0a9b      	lsrs	r3, r3, #10
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	4903      	ldr	r1, [pc, #12]	; (8006f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f86:	5ccb      	ldrb	r3, [r1, r3]
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40023800 	.word	0x40023800
 8006f94:	08013390 	.word	0x08013390

08006f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f9c:	f7ff ffdc 	bl	8006f58 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	0b5b      	lsrs	r3, r3, #13
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4903      	ldr	r1, [pc, #12]	; (8006fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	08013390 	.word	0x08013390

08006fc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	220f      	movs	r2, #15
 8006fce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006fd0:	4b12      	ldr	r3, [pc, #72]	; (800701c <HAL_RCC_GetClockConfig+0x5c>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0203 	and.w	r2, r3, #3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_RCC_GetClockConfig+0x5c>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fe8:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_RCC_GetClockConfig+0x5c>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <HAL_RCC_GetClockConfig+0x5c>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	08db      	lsrs	r3, r3, #3
 8006ffa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <HAL_RCC_GetClockConfig+0x60>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0207 	and.w	r2, r3, #7
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40023800 	.word	0x40023800
 8007020:	40023c00 	.word	0x40023c00

08007024 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007048:	2b00      	cmp	r3, #0
 800704a:	d035      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800704c:	4b67      	ldr	r3, [pc, #412]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007052:	f7fa ffdf 	bl	8002014 <HAL_GetTick>
 8007056:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007058:	e008      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800705a:	f7fa ffdb 	bl	8002014 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e0ba      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800706c:	4b60      	ldr	r3, [pc, #384]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f0      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	019a      	lsls	r2, r3, #6
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	071b      	lsls	r3, r3, #28
 8007084:	495a      	ldr	r1, [pc, #360]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800708c:	4b57      	ldr	r3, [pc, #348]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007092:	f7fa ffbf 	bl	8002014 <HAL_GetTick>
 8007096:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007098:	e008      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800709a:	f7fa ffbb 	bl	8002014 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e09a      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ac:	4b50      	ldr	r3, [pc, #320]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8083 	beq.w	80071cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	4b49      	ldr	r3, [pc, #292]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	4a48      	ldr	r2, [pc, #288]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d4:	6413      	str	r3, [r2, #64]	; 0x40
 80070d6:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80070e2:	4b44      	ldr	r3, [pc, #272]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a43      	ldr	r2, [pc, #268]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ee:	f7fa ff91 	bl	8002014 <HAL_GetTick>
 80070f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80070f6:	f7fa ff8d 	bl	8002014 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e06c      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007108:	4b3a      	ldr	r3, [pc, #232]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007114:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d02f      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d028      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007132:	4b2f      	ldr	r3, [pc, #188]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800713c:	4b2e      	ldr	r3, [pc, #184]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800713e:	2201      	movs	r2, #1
 8007140:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007142:	4b2d      	ldr	r3, [pc, #180]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007148:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800714e:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b01      	cmp	r3, #1
 8007158:	d114      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800715a:	f7fa ff5b 	bl	8002014 <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007160:	e00a      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fa ff57 	bl	8002014 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e034      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0ee      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007190:	d10d      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a6:	4912      	ldr	r1, [pc, #72]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	608b      	str	r3, [r1, #8]
 80071ac:	e005      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071c6:	490a      	ldr	r1, [pc, #40]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7c1a      	ldrb	r2, [r3, #16]
 80071dc:	4b07      	ldr	r3, [pc, #28]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071de:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	42470068 	.word	0x42470068
 80071f0:	40023800 	.word	0x40023800
 80071f4:	40007000 	.word	0x40007000
 80071f8:	42470e40 	.word	0x42470e40
 80071fc:	424711e0 	.word	0x424711e0

08007200 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e066      	b.n	80072e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7f5b      	ldrb	r3, [r3, #29]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7f9 fd42 	bl	8000cb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	22ca      	movs	r2, #202	; 0xca
 8007238:	625a      	str	r2, [r3, #36]	; 0x24
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2253      	movs	r2, #83	; 0x53
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa45 	bl	80076d2 <RTC_EnterInitMode>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d12c      	bne.n	80072ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007264:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6899      	ldr	r1, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	431a      	orrs	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68d2      	ldr	r2, [r2, #12]
 800728c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6919      	ldr	r1, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	041a      	lsls	r2, r3, #16
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa4c 	bl	8007740 <RTC_ExitInitMode>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d113      	bne.n	80072da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7f1b      	ldrb	r3, [r3, #28]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_RTC_SetTime+0x1c>
 8007304:	2302      	movs	r3, #2
 8007306:	e087      	b.n	8007418 <HAL_RTC_SetTime+0x12c>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d126      	bne.n	8007368 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fa29 	bl	800778a <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fa22 	bl	800778a <RTC_ByteToBcd2>
 8007346:	4603      	mov	r3, r0
 8007348:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800734a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 fa1a 	bl	800778a <RTC_ByteToBcd2>
 8007356:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007358:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	78db      	ldrb	r3, [r3, #3]
 8007360:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	e018      	b.n	800739a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007388:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800738e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	78db      	ldrb	r3, [r3, #3]
 8007394:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	22ca      	movs	r2, #202	; 0xca
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2253      	movs	r2, #83	; 0x53
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f991 	bl	80076d2 <RTC_EnterInitMode>
 80073b0:	4603      	mov	r3, r0
 80073b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80073b4:	7cfb      	ldrb	r3, [r7, #19]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d120      	bne.n	80073fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80073c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80073c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6899      	ldr	r1, [r3, #8]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f9a4 	bl	8007740 <RTC_ExitInitMode>
 80073f8:	4603      	mov	r3, r0
 80073fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	22ff      	movs	r2, #255	; 0xff
 800740e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	771a      	strb	r2, [r3, #28]

  return status;
 8007416:	7cfb      	ldrb	r3, [r7, #19]
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd90      	pop	{r4, r7, pc}

08007420 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007452:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007456:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007462:	b2da      	uxtb	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007472:	b2da      	uxtb	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007480:	b2da      	uxtb	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	0d9b      	lsrs	r3, r3, #22
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d11a      	bne.n	80074d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f98f 	bl	80077c4 <RTC_Bcd2ToByte>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f986 	bl	80077c4 <RTC_Bcd2ToByte>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	789b      	ldrb	r3, [r3, #2]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f97d 	bl	80077c4 <RTC_Bcd2ToByte>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	7f1b      	ldrb	r3, [r3, #28]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_RTC_SetDate+0x1c>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e071      	b.n	80075dc <HAL_RTC_SetDate+0x100>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2202      	movs	r2, #2
 8007502:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10e      	bne.n	8007528 <HAL_RTC_SetDate+0x4c>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	785b      	ldrb	r3, [r3, #1]
 800751a:	f023 0310 	bic.w	r3, r3, #16
 800751e:	b2db      	uxtb	r3, r3
 8007520:	330a      	adds	r3, #10
 8007522:	b2da      	uxtb	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d11c      	bne.n	8007568 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	78db      	ldrb	r3, [r3, #3]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f929 	bl	800778a <RTC_ByteToBcd2>
 8007538:	4603      	mov	r3, r0
 800753a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f922 	bl	800778a <RTC_ByteToBcd2>
 8007546:	4603      	mov	r3, r0
 8007548:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800754a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	789b      	ldrb	r3, [r3, #2]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f91a 	bl	800778a <RTC_ByteToBcd2>
 8007556:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007558:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e00e      	b.n	8007586 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	78db      	ldrb	r3, [r3, #3]
 800756c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007574:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800757a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	22ca      	movs	r2, #202	; 0xca
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2253      	movs	r2, #83	; 0x53
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f89b 	bl	80076d2 <RTC_EnterInitMode>
 800759c:	4603      	mov	r3, r0
 800759e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f8c2 	bl	8007740 <RTC_ExitInitMode>
 80075bc:	4603      	mov	r3, r0
 80075be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80075c0:	7cfb      	ldrb	r3, [r7, #19]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	22ff      	movs	r2, #255	; 0xff
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	771a      	strb	r2, [r3, #28]

  return status;
 80075da:	7cfb      	ldrb	r3, [r7, #19]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}

080075e4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007602:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	b2da      	uxtb	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	0a1b      	lsrs	r3, r3, #8
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	0b5b      	lsrs	r3, r3, #13
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	b2da      	uxtb	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d11a      	bne.n	8007678 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	78db      	ldrb	r3, [r3, #3]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 f8bc 	bl	80077c4 <RTC_Bcd2ToByte>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f8b3 	bl	80077c4 <RTC_Bcd2ToByte>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	789b      	ldrb	r3, [r3, #2]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f8aa 	bl	80077c4 <RTC_Bcd2ToByte>
 8007670:	4603      	mov	r3, r0
 8007672:	461a      	mov	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b084      	sub	sp, #16
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800769c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800769e:	f7fa fcb9 	bl	8002014 <HAL_GetTick>
 80076a2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076a4:	e009      	b.n	80076ba <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076a6:	f7fa fcb5 	bl	8002014 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076b4:	d901      	bls.n	80076ba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e007      	b.n	80076ca <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0ee      	beq.n	80076a6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d122      	bne.n	8007736 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007700:	f7fa fc88 	bl	8002014 <HAL_GetTick>
 8007704:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007706:	e00c      	b.n	8007722 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007708:	f7fa fc84 	bl	8002014 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007716:	d904      	bls.n	8007722 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2204      	movs	r2, #4
 800771c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <RTC_EnterInitMode+0x64>
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d1e8      	bne.n	8007708 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800775a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff ff89 	bl	8007682 <HAL_RTC_WaitForSynchro>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2204      	movs	r2, #4
 800777a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007780:	7bfb      	ldrb	r3, [r7, #15]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007798:	e005      	b.n	80077a6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	3301      	adds	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	3b0a      	subs	r3, #10
 80077a4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	2b09      	cmp	r3, #9
 80077aa:	d8f6      	bhi.n	800779a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b2db      	uxtb	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	091b      	lsrs	r3, r3, #4
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	4413      	add	r3, r2
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	4413      	add	r3, r2
 80077ee:	b2db      	uxtb	r3, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3350      	adds	r3, #80	; 0x50
 8007812:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	4413      	add	r3, r2
 800781c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	601a      	str	r2, [r3, #0]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e07b      	b.n	800793a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b00      	cmp	r3, #0
 8007848:	d108      	bne.n	800785c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007852:	d009      	beq.n	8007868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	61da      	str	r2, [r3, #28]
 800785a:	e005      	b.n	8007868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7f9 fa76 	bl	8000d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ec:	ea42 0103 	orr.w	r1, r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	f003 0104 	and.w	r1, r3, #4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f003 0210 	and.w	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007928:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b088      	sub	sp, #32
 8007946:	af00      	add	r7, sp, #0
 8007948:	60f8      	str	r0, [r7, #12]
 800794a:	60b9      	str	r1, [r7, #8]
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_SPI_Transmit+0x22>
 8007960:	2302      	movs	r3, #2
 8007962:	e126      	b.n	8007bb2 <HAL_SPI_Transmit+0x270>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800796c:	f7fa fb52 	bl	8002014 <HAL_GetTick>
 8007970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b01      	cmp	r3, #1
 8007980:	d002      	beq.n	8007988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007982:	2302      	movs	r3, #2
 8007984:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007986:	e10b      	b.n	8007ba0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Transmit+0x52>
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007998:	e102      	b.n	8007ba0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2203      	movs	r2, #3
 800799e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e0:	d10f      	bne.n	8007a02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b40      	cmp	r3, #64	; 0x40
 8007a0e:	d007      	beq.n	8007a20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a28:	d14b      	bne.n	8007ac2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0xf6>
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d13e      	bne.n	8007ab6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	1c9a      	adds	r2, r3, #2
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a5c:	e02b      	b.n	8007ab6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d112      	bne.n	8007a92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	881a      	ldrh	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a90:	e011      	b.n	8007ab6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a92:	f7fa fabf 	bl	8002014 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d803      	bhi.n	8007aaa <HAL_SPI_Transmit+0x168>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d102      	bne.n	8007ab0 <HAL_SPI_Transmit+0x16e>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ab4:	e074      	b.n	8007ba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1ce      	bne.n	8007a5e <HAL_SPI_Transmit+0x11c>
 8007ac0:	e04c      	b.n	8007b5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_SPI_Transmit+0x18e>
 8007aca:	8afb      	ldrh	r3, [r7, #22]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d140      	bne.n	8007b52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	7812      	ldrb	r2, [r2, #0]
 8007adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007af6:	e02c      	b.n	8007b52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d113      	bne.n	8007b2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b2c:	e011      	b.n	8007b52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b2e:	f7fa fa71 	bl	8002014 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d803      	bhi.n	8007b46 <HAL_SPI_Transmit+0x204>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d102      	bne.n	8007b4c <HAL_SPI_Transmit+0x20a>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b50:	e026      	b.n	8007ba0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1cd      	bne.n	8007af8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fbcb 	bl	80082fc <SPI_EndRxTxTransaction>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	613b      	str	r3, [r7, #16]
 8007b8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	77fb      	strb	r3, [r7, #31]
 8007b9c:	e000      	b.n	8007ba0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b088      	sub	sp, #32
 8007bbe:	af02      	add	r7, sp, #8
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd6:	d112      	bne.n	8007bfe <HAL_SPI_Receive+0x44>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10e      	bne.n	8007bfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f8f1 	bl	8007ddc <HAL_SPI_TransmitReceive>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	e0ea      	b.n	8007dd4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_SPI_Receive+0x52>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e0e3      	b.n	8007dd4 <HAL_SPI_Receive+0x21a>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c14:	f7fa f9fe 	bl	8002014 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c2a:	e0ca      	b.n	8007dc2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_SPI_Receive+0x7e>
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c3c:	e0c1      	b.n	8007dc2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2204      	movs	r2, #4
 8007c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c84:	d10f      	bne.n	8007ca6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ca4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d007      	beq.n	8007cc4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d162      	bne.n	8007d92 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ccc:	e02e      	b.n	8007d2c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d115      	bne.n	8007d08 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f103 020c 	add.w	r2, r3, #12
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d06:	e011      	b.n	8007d2c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d08:	f7fa f984 	bl	8002014 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d803      	bhi.n	8007d20 <HAL_SPI_Receive+0x166>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1e:	d102      	bne.n	8007d26 <HAL_SPI_Receive+0x16c>
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d102      	bne.n	8007d2c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d2a:	e04a      	b.n	8007dc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1cb      	bne.n	8007cce <HAL_SPI_Receive+0x114>
 8007d36:	e031      	b.n	8007d9c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d113      	bne.n	8007d6e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	b292      	uxth	r2, r2
 8007d52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	1c9a      	adds	r2, r3, #2
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d6c:	e011      	b.n	8007d92 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d6e:	f7fa f951 	bl	8002014 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d803      	bhi.n	8007d86 <HAL_SPI_Receive+0x1cc>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d102      	bne.n	8007d8c <HAL_SPI_Receive+0x1d2>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d102      	bne.n	8007d92 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d90:	e017      	b.n	8007dc2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1cd      	bne.n	8007d38 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fa45 	bl	8008230 <SPI_EndRxTransaction>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2220      	movs	r2, #32
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]
 8007dbe:	e000      	b.n	8007dc2 <HAL_SPI_Receive+0x208>
  }

error :
 8007dc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08c      	sub	sp, #48	; 0x30
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dea:	2301      	movs	r3, #1
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_SPI_TransmitReceive+0x26>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e18a      	b.n	8008118 <HAL_SPI_TransmitReceive+0x33c>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e0a:	f7fa f903 	bl	8002014 <HAL_GetTick>
 8007e0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d00f      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x70>
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e32:	d107      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x68>
 8007e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d003      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e4a:	e15b      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <HAL_SPI_TransmitReceive+0x82>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_SPI_TransmitReceive+0x82>
 8007e58:	887b      	ldrh	r3, [r7, #2]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d103      	bne.n	8007e66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e64:	e14e      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d003      	beq.n	8007e7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2205      	movs	r2, #5
 8007e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	887a      	ldrh	r2, [r7, #2]
 8007e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	887a      	ldrh	r2, [r7, #2]
 8007e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	887a      	ldrh	r2, [r7, #2]
 8007e9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d007      	beq.n	8007ece <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ecc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ed6:	d178      	bne.n	8007fca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_SPI_TransmitReceive+0x10a>
 8007ee0:	8b7b      	ldrh	r3, [r7, #26]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d166      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	881a      	ldrh	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	1c9a      	adds	r2, r3, #2
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f0a:	e053      	b.n	8007fb4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d11b      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x176>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d016      	beq.n	8007f52 <HAL_SPI_TransmitReceive+0x176>
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d113      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	881a      	ldrh	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	1c9a      	adds	r2, r3, #2
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d119      	bne.n	8007f94 <HAL_SPI_TransmitReceive+0x1b8>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d014      	beq.n	8007f94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	b292      	uxth	r2, r2
 8007f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	1c9a      	adds	r2, r3, #2
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f90:	2301      	movs	r3, #1
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f94:	f7fa f83e 	bl	8002014 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d807      	bhi.n	8007fb4 <HAL_SPI_TransmitReceive+0x1d8>
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d003      	beq.n	8007fb4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fb2:	e0a7      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1a6      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x130>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1a1      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x130>
 8007fc8:	e07c      	b.n	80080c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x1fc>
 8007fd2:	8b7b      	ldrh	r3, [r7, #26]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d16b      	bne.n	80080b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ffe:	e057      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b02      	cmp	r3, #2
 800800c:	d11c      	bne.n	8008048 <HAL_SPI_TransmitReceive+0x26c>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008012:	b29b      	uxth	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <HAL_SPI_TransmitReceive+0x26c>
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d114      	bne.n	8008048 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	330c      	adds	r3, #12
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803a:	b29b      	uxth	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d119      	bne.n	800808a <HAL_SPI_TransmitReceive+0x2ae>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008086:	2301      	movs	r3, #1
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800808a:	f7f9 ffc3 	bl	8002014 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008096:	429a      	cmp	r2, r3
 8008098:	d803      	bhi.n	80080a2 <HAL_SPI_TransmitReceive+0x2c6>
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a0:	d102      	bne.n	80080a8 <HAL_SPI_TransmitReceive+0x2cc>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080ae:	e029      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1a2      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x224>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d19d      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 f917 	bl	80082fc <SPI_EndRxTxTransaction>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080e0:	e010      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	e000      	b.n	8008104 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008102:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008118:	4618      	mov	r0, r3
 800811a:	3730      	adds	r7, #48	; 0x30
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008130:	f7f9 ff70 	bl	8002014 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4413      	add	r3, r2
 800813e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008140:	f7f9 ff68 	bl	8002014 <HAL_GetTick>
 8008144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008146:	4b39      	ldr	r3, [pc, #228]	; (800822c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	015b      	lsls	r3, r3, #5
 800814c:	0d1b      	lsrs	r3, r3, #20
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008156:	e054      	b.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815e:	d050      	beq.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008160:	f7f9 ff58 	bl	8002014 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	429a      	cmp	r2, r3
 800816e:	d902      	bls.n	8008176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d13d      	bne.n	80081f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818e:	d111      	bne.n	80081b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d004      	beq.n	80081a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a2:	d107      	bne.n	80081b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d10f      	bne.n	80081de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e017      	b.n	8008222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3b01      	subs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4013      	ands	r3, r2
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	bf0c      	ite	eq
 8008212:	2301      	moveq	r3, #1
 8008214:	2300      	movne	r3, #0
 8008216:	b2db      	uxtb	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	429a      	cmp	r2, r3
 800821e:	d19b      	bne.n	8008158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3720      	adds	r7, #32
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000000 	.word	0x20000000

08008230 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008244:	d111      	bne.n	800826a <SPI_EndRxTransaction+0x3a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824e:	d004      	beq.n	800825a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008258:	d107      	bne.n	800826a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008272:	d12a      	bne.n	80082ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d012      	beq.n	80082a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2200      	movs	r2, #0
 8008286:	2180      	movs	r1, #128	; 0x80
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff ff49 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02d      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e026      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	2101      	movs	r1, #1
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff ff36 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01a      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f043 0220 	orr.w	r2, r3, #32
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e013      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2101      	movs	r1, #1
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff23 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e000      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <SPI_EndRxTxTransaction+0x7c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1b      	ldr	r2, [pc, #108]	; (800837c <SPI_EndRxTxTransaction+0x80>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	0d5b      	lsrs	r3, r3, #21
 8008314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008318:	fb02 f303 	mul.w	r3, r2, r3
 800831c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008326:	d112      	bne.n	800834e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fef4 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d016      	beq.n	800836c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e00f      	b.n	800836e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3b01      	subs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d0f2      	beq.n	800834e <SPI_EndRxTxTransaction+0x52>
 8008368:	e000      	b.n	800836c <SPI_EndRxTxTransaction+0x70>
        break;
 800836a:	bf00      	nop
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000000 	.word	0x20000000
 800837c:	165e9f81 	.word	0x165e9f81

08008380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e041      	b.n	8008416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7f9 f912 	bl	80015d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f001 fa24 	bl	800980c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e044      	b.n	80084c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d018      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x6c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d013      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x6c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x6c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d009      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x6c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <HAL_TIM_Base_Start_IT+0xbc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x6c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d111      	bne.n	80084b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d010      	beq.n	80084c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0201 	orr.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	e007      	b.n	80084c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	40010000 	.word	0x40010000
 80084d4:	40000400 	.word	0x40000400
 80084d8:	40000800 	.word	0x40000800
 80084dc:	40000c00 	.word	0x40000c00
 80084e0:	40014000 	.word	0x40014000

080084e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e041      	b.n	800857a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f839 	bl	8008582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2202      	movs	r2, #2
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f001 f972 	bl	800980c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	bf0c      	ite	eq
 80085bc:	2301      	moveq	r3, #1
 80085be:	2300      	movne	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	e022      	b.n	800860a <HAL_TIM_PWM_Start_DMA+0x72>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d109      	bne.n	80085de <HAL_TIM_PWM_Start_DMA+0x46>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	bf0c      	ite	eq
 80085d6:	2301      	moveq	r3, #1
 80085d8:	2300      	movne	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	e015      	b.n	800860a <HAL_TIM_PWM_Start_DMA+0x72>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d109      	bne.n	80085f8 <HAL_TIM_PWM_Start_DMA+0x60>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	bf0c      	ite	eq
 80085f0:	2301      	moveq	r3, #1
 80085f2:	2300      	movne	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	e008      	b.n	800860a <HAL_TIM_PWM_Start_DMA+0x72>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	bf0c      	ite	eq
 8008604:	2301      	moveq	r3, #1
 8008606:	2300      	movne	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800860e:	2302      	movs	r3, #2
 8008610:	e15d      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d109      	bne.n	800862c <HAL_TIM_PWM_Start_DMA+0x94>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b01      	cmp	r3, #1
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	e022      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0xda>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b04      	cmp	r3, #4
 8008630:	d109      	bne.n	8008646 <HAL_TIM_PWM_Start_DMA+0xae>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b01      	cmp	r3, #1
 800863c:	bf0c      	ite	eq
 800863e:	2301      	moveq	r3, #1
 8008640:	2300      	movne	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	e015      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0xda>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b08      	cmp	r3, #8
 800864a:	d109      	bne.n	8008660 <HAL_TIM_PWM_Start_DMA+0xc8>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	bf0c      	ite	eq
 8008658:	2301      	moveq	r3, #1
 800865a:	2300      	movne	r3, #0
 800865c:	b2db      	uxtb	r3, r3
 800865e:	e008      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0xda>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	bf0c      	ite	eq
 800866c:	2301      	moveq	r3, #1
 800866e:	2300      	movne	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d024      	beq.n	80086c0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d104      	bne.n	8008686 <HAL_TIM_PWM_Start_DMA+0xee>
 800867c:	887b      	ldrh	r3, [r7, #2]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e123      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <HAL_TIM_PWM_Start_DMA+0xfe>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008694:	e016      	b.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b04      	cmp	r3, #4
 800869a:	d104      	bne.n	80086a6 <HAL_TIM_PWM_Start_DMA+0x10e>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086a4:	e00e      	b.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d104      	bne.n	80086b6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b4:	e006      	b.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086be:	e001      	b.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e104      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2b0c      	cmp	r3, #12
 80086c8:	f200 80ae 	bhi.w	8008828 <HAL_TIM_PWM_Start_DMA+0x290>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	08008709 	.word	0x08008709
 80086d8:	08008829 	.word	0x08008829
 80086dc:	08008829 	.word	0x08008829
 80086e0:	08008829 	.word	0x08008829
 80086e4:	08008751 	.word	0x08008751
 80086e8:	08008829 	.word	0x08008829
 80086ec:	08008829 	.word	0x08008829
 80086f0:	08008829 	.word	0x08008829
 80086f4:	08008799 	.word	0x08008799
 80086f8:	08008829 	.word	0x08008829
 80086fc:	08008829 	.word	0x08008829
 8008700:	08008829 	.word	0x08008829
 8008704:	080087e1 	.word	0x080087e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	4a72      	ldr	r2, [pc, #456]	; (80088d8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800870e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	4a71      	ldr	r2, [pc, #452]	; (80088dc <HAL_TIM_PWM_Start_DMA+0x344>)
 8008716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	4a70      	ldr	r2, [pc, #448]	; (80088e0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800871e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3334      	adds	r3, #52	; 0x34
 800872c:	461a      	mov	r2, r3
 800872e:	887b      	ldrh	r3, [r7, #2]
 8008730:	f7f9 fedc 	bl	80024ec <HAL_DMA_Start_IT>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0c7      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68da      	ldr	r2, [r3, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800874c:	60da      	str	r2, [r3, #12]
      break;
 800874e:	e06e      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008754:	4a60      	ldr	r2, [pc, #384]	; (80088d8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008756:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	4a5f      	ldr	r2, [pc, #380]	; (80088dc <HAL_TIM_PWM_Start_DMA+0x344>)
 800875e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	4a5e      	ldr	r2, [pc, #376]	; (80088e0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008766:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3338      	adds	r3, #56	; 0x38
 8008774:	461a      	mov	r2, r3
 8008776:	887b      	ldrh	r3, [r7, #2]
 8008778:	f7f9 feb8 	bl	80024ec <HAL_DMA_Start_IT>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e0a3      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008794:	60da      	str	r2, [r3, #12]
      break;
 8008796:	e04a      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4a4e      	ldr	r2, [pc, #312]	; (80088d8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800879e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	4a4d      	ldr	r2, [pc, #308]	; (80088dc <HAL_TIM_PWM_Start_DMA+0x344>)
 80087a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a4c      	ldr	r2, [pc, #304]	; (80088e0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80087ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	333c      	adds	r3, #60	; 0x3c
 80087bc:	461a      	mov	r2, r3
 80087be:	887b      	ldrh	r3, [r7, #2]
 80087c0:	f7f9 fe94 	bl	80024ec <HAL_DMA_Start_IT>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e07f      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087dc:	60da      	str	r2, [r3, #12]
      break;
 80087de:	e026      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	4a3c      	ldr	r2, [pc, #240]	; (80088d8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80087e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	4a3b      	ldr	r2, [pc, #236]	; (80088dc <HAL_TIM_PWM_Start_DMA+0x344>)
 80087ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	4a3a      	ldr	r2, [pc, #232]	; (80088e0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80087f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3340      	adds	r3, #64	; 0x40
 8008804:	461a      	mov	r2, r3
 8008806:	887b      	ldrh	r3, [r7, #2]
 8008808:	f7f9 fe70 	bl	80024ec <HAL_DMA_Start_IT>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e05b      	b.n	80088ce <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008824:	60da      	str	r2, [r3, #12]
      break;
 8008826:	e002      	b.n	800882e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	75fb      	strb	r3, [r7, #23]
      break;
 800882c:	bf00      	nop
  }

  if (status == HAL_OK)
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d14b      	bne.n	80088cc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2201      	movs	r2, #1
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	4618      	mov	r0, r3
 800883e:	f001 fba9 	bl	8009f94 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a27      	ldr	r2, [pc, #156]	; (80088e4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d107      	bne.n	800885c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800885a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d018      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x300>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886e:	d013      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x300>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00e      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x300>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <HAL_TIM_PWM_Start_DMA+0x354>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x300>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a19      	ldr	r2, [pc, #100]	; (80088f0 <HAL_TIM_PWM_Start_DMA+0x358>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x300>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a18      	ldr	r2, [pc, #96]	; (80088f4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d111      	bne.n	80088bc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 0307 	and.w	r3, r3, #7
 80088a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b06      	cmp	r3, #6
 80088a8:	d010      	beq.n	80088cc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 0201 	orr.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	e007      	b.n	80088cc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	080095cd 	.word	0x080095cd
 80088dc:	08009675 	.word	0x08009675
 80088e0:	0800953b 	.word	0x0800953b
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40000400 	.word	0x40000400
 80088ec:	40000800 	.word	0x40000800
 80088f0:	40000c00 	.word	0x40000c00
 80088f4:	40014000 	.word	0x40014000

080088f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e041      	b.n	800898e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f839 	bl	8008996 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f000 ff68 	bl	800980c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <HAL_TIM_IC_Start_DMA+0x22>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	e013      	b.n	80089f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d104      	bne.n	80089de <HAL_TIM_IC_Start_DMA+0x32>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	e00b      	b.n	80089f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b08      	cmp	r3, #8
 80089e2:	d104      	bne.n	80089ee <HAL_TIM_IC_Start_DMA+0x42>
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	e003      	b.n	80089f6 <HAL_TIM_IC_Start_DMA+0x4a>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <HAL_TIM_IC_Start_DMA+0x5c>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e013      	b.n	8008a30 <HAL_TIM_IC_Start_DMA+0x84>
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d104      	bne.n	8008a18 <HAL_TIM_IC_Start_DMA+0x6c>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e00b      	b.n	8008a30 <HAL_TIM_IC_Start_DMA+0x84>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d104      	bne.n	8008a28 <HAL_TIM_IC_Start_DMA+0x7c>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e003      	b.n	8008a30 <HAL_TIM_IC_Start_DMA+0x84>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8008a32:	7dbb      	ldrb	r3, [r7, #22]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d002      	beq.n	8008a3e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8008a38:	7d7b      	ldrb	r3, [r7, #21]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d101      	bne.n	8008a42 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e13c      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8008a42:	7dbb      	ldrb	r3, [r7, #22]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d143      	bne.n	8008ad0 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8008a48:	7d7b      	ldrb	r3, [r7, #21]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d140      	bne.n	8008ad0 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_TIM_IC_Start_DMA+0xb2>
 8008a54:	887b      	ldrh	r3, [r7, #2]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e12e      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <HAL_TIM_IC_Start_DMA+0xc2>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a6c:	e013      	b.n	8008a96 <HAL_TIM_IC_Start_DMA+0xea>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_IC_Start_DMA+0xd2>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a7c:	e00b      	b.n	8008a96 <HAL_TIM_IC_Start_DMA+0xea>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d104      	bne.n	8008a8e <HAL_TIM_IC_Start_DMA+0xe2>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a8c:	e003      	b.n	8008a96 <HAL_TIM_IC_Start_DMA+0xea>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_IC_Start_DMA+0xfa>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8008aa4:	e016      	b.n	8008ad4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_IC_Start_DMA+0x10a>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8008ab4:	e00e      	b.n	8008ad4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d104      	bne.n	8008ac6 <HAL_TIM_IC_Start_DMA+0x11a>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8008ac4:	e006      	b.n	8008ad4 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008ace:	e001      	b.n	8008ad4 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e0f3      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 fa59 	bl	8009f94 <TIM_CCxChannelCmd>

  switch (Channel)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	f200 80ad 	bhi.w	8008c44 <HAL_TIM_IC_Start_DMA+0x298>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <HAL_TIM_IC_Start_DMA+0x144>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b25 	.word	0x08008b25
 8008af4:	08008c45 	.word	0x08008c45
 8008af8:	08008c45 	.word	0x08008c45
 8008afc:	08008c45 	.word	0x08008c45
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008c45 	.word	0x08008c45
 8008b08:	08008c45 	.word	0x08008c45
 8008b0c:	08008c45 	.word	0x08008c45
 8008b10:	08008bb5 	.word	0x08008bb5
 8008b14:	08008c45 	.word	0x08008c45
 8008b18:	08008c45 	.word	0x08008c45
 8008b1c:	08008c45 	.word	0x08008c45
 8008b20:	08008bfd 	.word	0x08008bfd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	4a66      	ldr	r2, [pc, #408]	; (8008cc4 <HAL_TIM_IC_Start_DMA+0x318>)
 8008b2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	4a65      	ldr	r2, [pc, #404]	; (8008cc8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	4a64      	ldr	r2, [pc, #400]	; (8008ccc <HAL_TIM_IC_Start_DMA+0x320>)
 8008b3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3334      	adds	r3, #52	; 0x34
 8008b46:	4619      	mov	r1, r3
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	887b      	ldrh	r3, [r7, #2]
 8008b4c:	f7f9 fcce 	bl	80024ec <HAL_DMA_Start_IT>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e0b0      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b68:	60da      	str	r2, [r3, #12]
      break;
 8008b6a:	e06e      	b.n	8008c4a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	4a54      	ldr	r2, [pc, #336]	; (8008cc4 <HAL_TIM_IC_Start_DMA+0x318>)
 8008b72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b78:	4a53      	ldr	r2, [pc, #332]	; (8008cc8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	4a52      	ldr	r2, [pc, #328]	; (8008ccc <HAL_TIM_IC_Start_DMA+0x320>)
 8008b82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3338      	adds	r3, #56	; 0x38
 8008b8e:	4619      	mov	r1, r3
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	887b      	ldrh	r3, [r7, #2]
 8008b94:	f7f9 fcaa 	bl	80024ec <HAL_DMA_Start_IT>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e08c      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bb0:	60da      	str	r2, [r3, #12]
      break;
 8008bb2:	e04a      	b.n	8008c4a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	4a42      	ldr	r2, [pc, #264]	; (8008cc4 <HAL_TIM_IC_Start_DMA+0x318>)
 8008bba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a41      	ldr	r2, [pc, #260]	; (8008cc8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <HAL_TIM_IC_Start_DMA+0x320>)
 8008bca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	333c      	adds	r3, #60	; 0x3c
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	f7f9 fc86 	bl	80024ec <HAL_DMA_Start_IT>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e068      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bf8:	60da      	str	r2, [r3, #12]
      break;
 8008bfa:	e026      	b.n	8008c4a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	4a30      	ldr	r2, [pc, #192]	; (8008cc4 <HAL_TIM_IC_Start_DMA+0x318>)
 8008c02:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	4a2f      	ldr	r2, [pc, #188]	; (8008cc8 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	4a2e      	ldr	r2, [pc, #184]	; (8008ccc <HAL_TIM_IC_Start_DMA+0x320>)
 8008c12:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3340      	adds	r3, #64	; 0x40
 8008c1e:	4619      	mov	r1, r3
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	887b      	ldrh	r3, [r7, #2]
 8008c24:	f7f9 fc62 	bl	80024ec <HAL_DMA_Start_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e044      	b.n	8008cbc <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c40:	60da      	str	r2, [r3, #12]
      break;
 8008c42:	e002      	b.n	8008c4a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
      break;
 8008c48:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a20      	ldr	r2, [pc, #128]	; (8008cd0 <HAL_TIM_IC_Start_DMA+0x324>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d018      	beq.n	8008c86 <HAL_TIM_IC_Start_DMA+0x2da>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5c:	d013      	beq.n	8008c86 <HAL_TIM_IC_Start_DMA+0x2da>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <HAL_TIM_IC_Start_DMA+0x328>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00e      	beq.n	8008c86 <HAL_TIM_IC_Start_DMA+0x2da>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <HAL_TIM_IC_Start_DMA+0x32c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d009      	beq.n	8008c86 <HAL_TIM_IC_Start_DMA+0x2da>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <HAL_TIM_IC_Start_DMA+0x330>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d004      	beq.n	8008c86 <HAL_TIM_IC_Start_DMA+0x2da>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a17      	ldr	r2, [pc, #92]	; (8008ce0 <HAL_TIM_IC_Start_DMA+0x334>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d111      	bne.n	8008caa <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b06      	cmp	r3, #6
 8008c96:	d010      	beq.n	8008cba <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca8:	e007      	b.n	8008cba <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0201 	orr.w	r2, r2, #1
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	080096dd 	.word	0x080096dd
 8008cc8:	080097a5 	.word	0x080097a5
 8008ccc:	0800953b 	.word	0x0800953b
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40000400 	.word	0x40000400
 8008cd8:	40000800 	.word	0x40000800
 8008cdc:	40000c00 	.word	0x40000c00
 8008ce0:	40014000 	.word	0x40014000

08008ce4 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f001 f94a 	bl	8009f94 <TIM_CCxChannelCmd>

  switch (Channel)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b0c      	cmp	r3, #12
 8008d04:	d854      	bhi.n	8008db0 <HAL_TIM_IC_Stop_DMA+0xcc>
 8008d06:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <HAL_TIM_IC_Stop_DMA+0x28>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d41 	.word	0x08008d41
 8008d10:	08008db1 	.word	0x08008db1
 8008d14:	08008db1 	.word	0x08008db1
 8008d18:	08008db1 	.word	0x08008db1
 8008d1c:	08008d5d 	.word	0x08008d5d
 8008d20:	08008db1 	.word	0x08008db1
 8008d24:	08008db1 	.word	0x08008db1
 8008d28:	08008db1 	.word	0x08008db1
 8008d2c:	08008d79 	.word	0x08008d79
 8008d30:	08008db1 	.word	0x08008db1
 8008d34:	08008db1 	.word	0x08008db1
 8008d38:	08008db1 	.word	0x08008db1
 8008d3c:	08008d95 	.word	0x08008d95
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f9 fc91 	bl	800267c <HAL_DMA_Abort_IT>
      break;
 8008d5a:	e02c      	b.n	8008db6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7f9 fc83 	bl	800267c <HAL_DMA_Abort_IT>
      break;
 8008d76:	e01e      	b.n	8008db6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f9 fc75 	bl	800267c <HAL_DMA_Abort_IT>
      break;
 8008d92:	e010      	b.n	8008db6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008da2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f9 fc67 	bl	800267c <HAL_DMA_Abort_IT>
      break;
 8008dae:	e002      	b.n	8008db6 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	73fb      	strb	r3, [r7, #15]
      break;
 8008db4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d14f      	bne.n	8008e5c <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a1a      	ldr	r2, [r3, #32]
 8008dc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10f      	bne.n	8008dec <HAL_TIM_IC_Stop_DMA+0x108>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a1a      	ldr	r2, [r3, #32]
 8008dd2:	f240 4344 	movw	r3, #1092	; 0x444
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <HAL_TIM_IC_Stop_DMA+0x108>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0201 	bic.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d104      	bne.n	8008dfc <HAL_TIM_IC_Stop_DMA+0x118>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dfa:	e013      	b.n	8008e24 <HAL_TIM_IC_Stop_DMA+0x140>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d104      	bne.n	8008e0c <HAL_TIM_IC_Stop_DMA+0x128>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e0a:	e00b      	b.n	8008e24 <HAL_TIM_IC_Stop_DMA+0x140>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d104      	bne.n	8008e1c <HAL_TIM_IC_Stop_DMA+0x138>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e1a:	e003      	b.n	8008e24 <HAL_TIM_IC_Stop_DMA+0x140>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_TIM_IC_Stop_DMA+0x150>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e32:	e013      	b.n	8008e5c <HAL_TIM_IC_Stop_DMA+0x178>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d104      	bne.n	8008e44 <HAL_TIM_IC_Stop_DMA+0x160>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e42:	e00b      	b.n	8008e5c <HAL_TIM_IC_Stop_DMA+0x178>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b08      	cmp	r3, #8
 8008e48:	d104      	bne.n	8008e54 <HAL_TIM_IC_Stop_DMA+0x170>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e52:	e003      	b.n	8008e5c <HAL_TIM_IC_Stop_DMA+0x178>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop

08008e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d122      	bne.n	8008ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d11b      	bne.n	8008ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0202 	mvn.w	r2, #2
 8008e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fb13 	bl	80094d6 <HAL_TIM_IC_CaptureCallback>
 8008eb0:	e005      	b.n	8008ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fb05 	bl	80094c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f008 ff4b 	bl	8011d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d122      	bne.n	8008f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d11b      	bne.n	8008f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f06f 0204 	mvn.w	r2, #4
 8008ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2202      	movs	r2, #2
 8008eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fae9 	bl	80094d6 <HAL_TIM_IC_CaptureCallback>
 8008f04:	e005      	b.n	8008f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fadb 	bl	80094c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f008 ff21 	bl	8011d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b08      	cmp	r3, #8
 8008f24:	d122      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0308 	and.w	r3, r3, #8
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d11b      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f06f 0208 	mvn.w	r2, #8
 8008f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2204      	movs	r2, #4
 8008f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fabf 	bl	80094d6 <HAL_TIM_IC_CaptureCallback>
 8008f58:	e005      	b.n	8008f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fab1 	bl	80094c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f008 fef7 	bl	8011d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d122      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d11b      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0210 	mvn.w	r2, #16
 8008f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2208      	movs	r2, #8
 8008f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa95 	bl	80094d6 <HAL_TIM_IC_CaptureCallback>
 8008fac:	e005      	b.n	8008fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa87 	bl	80094c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f008 fecd 	bl	8011d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d10e      	bne.n	8008fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d107      	bne.n	8008fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0201 	mvn.w	r2, #1
 8008fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7f7 fdb0 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff6:	2b80      	cmp	r3, #128	; 0x80
 8008ff8:	d10e      	bne.n	8009018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009004:	2b80      	cmp	r3, #128	; 0x80
 8009006:	d107      	bne.n	8009018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 f8ae 	bl	800a174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d10e      	bne.n	8009044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	d107      	bne.n	8009044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800903c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa67 	bl	8009512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b20      	cmp	r3, #32
 8009050:	d10e      	bne.n	8009070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0320 	and.w	r3, r3, #32
 800905c:	2b20      	cmp	r3, #32
 800905e:	d107      	bne.n	8009070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0220 	mvn.w	r2, #32
 8009068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 f878 	bl	800a160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009092:	2302      	movs	r3, #2
 8009094:	e088      	b.n	80091a8 <HAL_TIM_IC_ConfigChannel+0x130>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d11b      	bne.n	80090dc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6819      	ldr	r1, [r3, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f000 fdb6 	bl	8009c24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 020c 	bic.w	r2, r2, #12
 80090c6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6999      	ldr	r1, [r3, #24]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	619a      	str	r2, [r3, #24]
 80090da:	e060      	b.n	800919e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d11c      	bne.n	800911c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f000 fe2e 	bl	8009d52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009104:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6999      	ldr	r1, [r3, #24]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	021a      	lsls	r2, r3, #8
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	619a      	str	r2, [r3, #24]
 800911a:	e040      	b.n	800919e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b08      	cmp	r3, #8
 8009120:	d11b      	bne.n	800915a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	6819      	ldr	r1, [r3, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f000 fe7b 	bl	8009e2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 020c 	bic.w	r2, r2, #12
 8009144:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69d9      	ldr	r1, [r3, #28]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	61da      	str	r2, [r3, #28]
 8009158:	e021      	b.n	800919e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b0c      	cmp	r3, #12
 800915e:	d11c      	bne.n	800919a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f000 fe98 	bl	8009ea4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69da      	ldr	r2, [r3, #28]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009182:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69d9      	ldr	r1, [r3, #28]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	021a      	lsls	r2, r3, #8
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	61da      	str	r2, [r3, #28]
 8009198:	e001      	b.n	800919e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e0ae      	b.n	800932c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b0c      	cmp	r3, #12
 80091da:	f200 809f 	bhi.w	800931c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	08009219 	.word	0x08009219
 80091e8:	0800931d 	.word	0x0800931d
 80091ec:	0800931d 	.word	0x0800931d
 80091f0:	0800931d 	.word	0x0800931d
 80091f4:	08009259 	.word	0x08009259
 80091f8:	0800931d 	.word	0x0800931d
 80091fc:	0800931d 	.word	0x0800931d
 8009200:	0800931d 	.word	0x0800931d
 8009204:	0800929b 	.word	0x0800929b
 8009208:	0800931d 	.word	0x0800931d
 800920c:	0800931d 	.word	0x0800931d
 8009210:	0800931d 	.word	0x0800931d
 8009214:	080092db 	.word	0x080092db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fb74 	bl	800990c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699a      	ldr	r2, [r3, #24]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0208 	orr.w	r2, r2, #8
 8009232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0204 	bic.w	r2, r2, #4
 8009242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6999      	ldr	r1, [r3, #24]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	619a      	str	r2, [r3, #24]
      break;
 8009256:	e064      	b.n	8009322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fbba 	bl	80099d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6999      	ldr	r1, [r3, #24]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	021a      	lsls	r2, r3, #8
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	619a      	str	r2, [r3, #24]
      break;
 8009298:	e043      	b.n	8009322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 fc05 	bl	8009ab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0208 	orr.w	r2, r2, #8
 80092b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	69da      	ldr	r2, [r3, #28]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0204 	bic.w	r2, r2, #4
 80092c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69d9      	ldr	r1, [r3, #28]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	691a      	ldr	r2, [r3, #16]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	61da      	str	r2, [r3, #28]
      break;
 80092d8:	e023      	b.n	8009322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fc4f 	bl	8009b84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69da      	ldr	r2, [r3, #28]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69da      	ldr	r2, [r3, #28]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69d9      	ldr	r1, [r3, #28]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	021a      	lsls	r2, r3, #8
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	61da      	str	r2, [r3, #28]
      break;
 800931a:	e002      	b.n	8009322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
      break;
 8009320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_TIM_ConfigClockSource+0x1c>
 800934c:	2302      	movs	r3, #2
 800934e:	e0b4      	b.n	80094ba <HAL_TIM_ConfigClockSource+0x186>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800936e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009388:	d03e      	beq.n	8009408 <HAL_TIM_ConfigClockSource+0xd4>
 800938a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800938e:	f200 8087 	bhi.w	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 8009392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009396:	f000 8086 	beq.w	80094a6 <HAL_TIM_ConfigClockSource+0x172>
 800939a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939e:	d87f      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093a0:	2b70      	cmp	r3, #112	; 0x70
 80093a2:	d01a      	beq.n	80093da <HAL_TIM_ConfigClockSource+0xa6>
 80093a4:	2b70      	cmp	r3, #112	; 0x70
 80093a6:	d87b      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093a8:	2b60      	cmp	r3, #96	; 0x60
 80093aa:	d050      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x11a>
 80093ac:	2b60      	cmp	r3, #96	; 0x60
 80093ae:	d877      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093b0:	2b50      	cmp	r3, #80	; 0x50
 80093b2:	d03c      	beq.n	800942e <HAL_TIM_ConfigClockSource+0xfa>
 80093b4:	2b50      	cmp	r3, #80	; 0x50
 80093b6:	d873      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093b8:	2b40      	cmp	r3, #64	; 0x40
 80093ba:	d058      	beq.n	800946e <HAL_TIM_ConfigClockSource+0x13a>
 80093bc:	2b40      	cmp	r3, #64	; 0x40
 80093be:	d86f      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093c0:	2b30      	cmp	r3, #48	; 0x30
 80093c2:	d064      	beq.n	800948e <HAL_TIM_ConfigClockSource+0x15a>
 80093c4:	2b30      	cmp	r3, #48	; 0x30
 80093c6:	d86b      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d060      	beq.n	800948e <HAL_TIM_ConfigClockSource+0x15a>
 80093cc:	2b20      	cmp	r3, #32
 80093ce:	d867      	bhi.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d05c      	beq.n	800948e <HAL_TIM_ConfigClockSource+0x15a>
 80093d4:	2b10      	cmp	r3, #16
 80093d6:	d05a      	beq.n	800948e <HAL_TIM_ConfigClockSource+0x15a>
 80093d8:	e062      	b.n	80094a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6899      	ldr	r1, [r3, #8]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f000 fdb3 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	609a      	str	r2, [r3, #8]
      break;
 8009406:	e04f      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	6899      	ldr	r1, [r3, #8]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	f000 fd9c 	bl	8009f54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800942a:	609a      	str	r2, [r3, #8]
      break;
 800942c:	e03c      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6859      	ldr	r1, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	461a      	mov	r2, r3
 800943c:	f000 fc5a 	bl	8009cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2150      	movs	r1, #80	; 0x50
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fd69 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 800944c:	e02c      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6859      	ldr	r1, [r3, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	461a      	mov	r2, r3
 800945c:	f000 fcb6 	bl	8009dcc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2160      	movs	r1, #96	; 0x60
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fd59 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 800946c:	e01c      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6859      	ldr	r1, [r3, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	461a      	mov	r2, r3
 800947c:	f000 fc3a 	bl	8009cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2140      	movs	r1, #64	; 0x40
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fd49 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 800948c:	e00c      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4619      	mov	r1, r3
 8009498:	4610      	mov	r0, r2
 800949a:	f000 fd40 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 800949e:	e003      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
      break;
 80094a4:	e000      	b.n	80094a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80094a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ca:	bf00      	nop
 80094cc:	370c      	adds	r7, #12
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	429a      	cmp	r2, r3
 8009550:	d107      	bne.n	8009562 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009560:	e02a      	b.n	80095b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d107      	bne.n	800957c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2202      	movs	r2, #2
 8009570:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800957a:	e01d      	b.n	80095b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d107      	bne.n	8009596 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2204      	movs	r2, #4
 800958a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009594:	e010      	b.n	80095b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	429a      	cmp	r2, r3
 800959e:	d107      	bne.n	80095b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2208      	movs	r2, #8
 80095a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095ae:	e003      	b.n	80095b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff ffb4 	bl	8009526 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	771a      	strb	r2, [r3, #28]
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d10b      	bne.n	80095fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2201      	movs	r2, #1
 80095e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69db      	ldr	r3, [r3, #28]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d136      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095fa:	e031      	b.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	429a      	cmp	r2, r3
 8009604:	d10b      	bne.n	800961e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2202      	movs	r2, #2
 800960a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d125      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800961c:	e020      	b.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d10b      	bne.n	8009640 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2204      	movs	r2, #4
 800962c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d114      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800963e:	e00f      	b.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	429a      	cmp	r2, r3
 8009648:	d10a      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2208      	movs	r2, #8
 800964e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f008 fb77 	bl	8011d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	771a      	strb	r2, [r3, #28]
}
 800966c:	bf00      	nop
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d103      	bne.n	8009694 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	771a      	strb	r2, [r3, #28]
 8009692:	e019      	b.n	80096c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	429a      	cmp	r2, r3
 800969c:	d103      	bne.n	80096a6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2202      	movs	r2, #2
 80096a2:	771a      	strb	r2, [r3, #28]
 80096a4:	e010      	b.n	80096c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d103      	bne.n	80096b8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2204      	movs	r2, #4
 80096b4:	771a      	strb	r2, [r3, #28]
 80096b6:	e007      	b.n	80096c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d102      	bne.n	80096c8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2208      	movs	r2, #8
 80096c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f7ff ff18 	bl	80094fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	771a      	strb	r2, [r3, #28]
}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d10f      	bne.n	8009714 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d146      	bne.n	8009790 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009712:	e03d      	b.n	8009790 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d10f      	bne.n	800973e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2202      	movs	r2, #2
 8009722:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d131      	bne.n	8009790 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800973c:	e028      	b.n	8009790 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d10f      	bne.n	8009768 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2204      	movs	r2, #4
 800974c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d11c      	bne.n	8009790 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009766:	e013      	b.n	8009790 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	429a      	cmp	r2, r3
 8009770:	d10e      	bne.n	8009790 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2208      	movs	r2, #8
 8009776:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fea0 	bl	80094d6 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	771a      	strb	r2, [r3, #28]
}
 800979c:	bf00      	nop
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d103      	bne.n	80097c4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	771a      	strb	r2, [r3, #28]
 80097c2:	e019      	b.n	80097f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d103      	bne.n	80097d6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2202      	movs	r2, #2
 80097d2:	771a      	strb	r2, [r3, #28]
 80097d4:	e010      	b.n	80097f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d103      	bne.n	80097e8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2204      	movs	r2, #4
 80097e4:	771a      	strb	r2, [r3, #28]
 80097e6:	e007      	b.n	80097f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d102      	bne.n	80097f8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2208      	movs	r2, #8
 80097f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff fe76 	bl	80094ea <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a34      	ldr	r2, [pc, #208]	; (80098f0 <TIM_Base_SetConfig+0xe4>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d00f      	beq.n	8009844 <TIM_Base_SetConfig+0x38>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982a:	d00b      	beq.n	8009844 <TIM_Base_SetConfig+0x38>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a31      	ldr	r2, [pc, #196]	; (80098f4 <TIM_Base_SetConfig+0xe8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d007      	beq.n	8009844 <TIM_Base_SetConfig+0x38>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a30      	ldr	r2, [pc, #192]	; (80098f8 <TIM_Base_SetConfig+0xec>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d003      	beq.n	8009844 <TIM_Base_SetConfig+0x38>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a2f      	ldr	r2, [pc, #188]	; (80098fc <TIM_Base_SetConfig+0xf0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d108      	bne.n	8009856 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	4313      	orrs	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a25      	ldr	r2, [pc, #148]	; (80098f0 <TIM_Base_SetConfig+0xe4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d01b      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009864:	d017      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a22      	ldr	r2, [pc, #136]	; (80098f4 <TIM_Base_SetConfig+0xe8>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d013      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a21      	ldr	r2, [pc, #132]	; (80098f8 <TIM_Base_SetConfig+0xec>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d00f      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a20      	ldr	r2, [pc, #128]	; (80098fc <TIM_Base_SetConfig+0xf0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d00b      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a1f      	ldr	r2, [pc, #124]	; (8009900 <TIM_Base_SetConfig+0xf4>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d007      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a1e      	ldr	r2, [pc, #120]	; (8009904 <TIM_Base_SetConfig+0xf8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d003      	beq.n	8009896 <TIM_Base_SetConfig+0x8a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a1d      	ldr	r2, [pc, #116]	; (8009908 <TIM_Base_SetConfig+0xfc>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d108      	bne.n	80098a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	695b      	ldr	r3, [r3, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a08      	ldr	r2, [pc, #32]	; (80098f0 <TIM_Base_SetConfig+0xe4>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d103      	bne.n	80098dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	691a      	ldr	r2, [r3, #16]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	615a      	str	r2, [r3, #20]
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	40010000 	.word	0x40010000
 80098f4:	40000400 	.word	0x40000400
 80098f8:	40000800 	.word	0x40000800
 80098fc:	40000c00 	.word	0x40000c00
 8009900:	40014000 	.word	0x40014000
 8009904:	40014400 	.word	0x40014400
 8009908:	40014800 	.word	0x40014800

0800990c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f023 0201 	bic.w	r2, r3, #1
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800993a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f023 0303 	bic.w	r3, r3, #3
 8009942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f023 0302 	bic.w	r3, r3, #2
 8009954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4313      	orrs	r3, r2
 800995e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1c      	ldr	r2, [pc, #112]	; (80099d4 <TIM_OC1_SetConfig+0xc8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d10c      	bne.n	8009982 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f023 0308 	bic.w	r3, r3, #8
 800996e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	4313      	orrs	r3, r2
 8009978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f023 0304 	bic.w	r3, r3, #4
 8009980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a13      	ldr	r2, [pc, #76]	; (80099d4 <TIM_OC1_SetConfig+0xc8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d111      	bne.n	80099ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	621a      	str	r2, [r3, #32]
}
 80099c8:	bf00      	nop
 80099ca:	371c      	adds	r7, #28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	40010000 	.word	0x40010000

080099d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f023 0210 	bic.w	r2, r3, #16
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f023 0320 	bic.w	r3, r3, #32
 8009a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	011b      	lsls	r3, r3, #4
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a1e      	ldr	r2, [pc, #120]	; (8009aac <TIM_OC2_SetConfig+0xd4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d10d      	bne.n	8009a54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a15      	ldr	r2, [pc, #84]	; (8009aac <TIM_OC2_SetConfig+0xd4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d113      	bne.n	8009a84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	621a      	str	r2, [r3, #32]
}
 8009a9e:	bf00      	nop
 8009aa0:	371c      	adds	r7, #28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40010000 	.word	0x40010000

08009ab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f023 0303 	bic.w	r3, r3, #3
 8009ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <TIM_OC3_SetConfig+0xd0>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d10d      	bne.n	8009b2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a14      	ldr	r2, [pc, #80]	; (8009b80 <TIM_OC3_SetConfig+0xd0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d113      	bne.n	8009b5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	621a      	str	r2, [r3, #32]
}
 8009b74:	bf00      	nop
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	40010000 	.word	0x40010000

08009b84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	031b      	lsls	r3, r3, #12
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a10      	ldr	r2, [pc, #64]	; (8009c20 <TIM_OC4_SetConfig+0x9c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d109      	bne.n	8009bf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	019b      	lsls	r3, r3, #6
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	621a      	str	r2, [r3, #32]
}
 8009c12:	bf00      	nop
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	40010000 	.word	0x40010000

08009c24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0201 	bic.w	r2, r3, #1
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a24      	ldr	r2, [pc, #144]	; (8009ce0 <TIM_TI1_SetConfig+0xbc>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d013      	beq.n	8009c7a <TIM_TI1_SetConfig+0x56>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c58:	d00f      	beq.n	8009c7a <TIM_TI1_SetConfig+0x56>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4a21      	ldr	r2, [pc, #132]	; (8009ce4 <TIM_TI1_SetConfig+0xc0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00b      	beq.n	8009c7a <TIM_TI1_SetConfig+0x56>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a20      	ldr	r2, [pc, #128]	; (8009ce8 <TIM_TI1_SetConfig+0xc4>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_TI1_SetConfig+0x56>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a1f      	ldr	r2, [pc, #124]	; (8009cec <TIM_TI1_SetConfig+0xc8>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_TI1_SetConfig+0x56>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <TIM_TI1_SetConfig+0xcc>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d101      	bne.n	8009c7e <TIM_TI1_SetConfig+0x5a>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <TIM_TI1_SetConfig+0x5c>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d008      	beq.n	8009c96 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	617b      	str	r3, [r7, #20]
 8009c94:	e003      	b.n	8009c9e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f023 030a 	bic.w	r3, r3, #10
 8009cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f003 030a 	and.w	r3, r3, #10
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	40010000 	.word	0x40010000
 8009ce4:	40000400 	.word	0x40000400
 8009ce8:	40000800 	.word	0x40000800
 8009cec:	40000c00 	.word	0x40000c00
 8009cf0:	40014000 	.word	0x40014000

08009cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f023 0201 	bic.w	r2, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f023 030a 	bic.w	r3, r3, #10
 8009d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	621a      	str	r2, [r3, #32]
}
 8009d46:	bf00      	nop
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b087      	sub	sp, #28
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	f023 0210 	bic.w	r2, r3, #16
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	031b      	lsls	r3, r3, #12
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009da4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	011b      	lsls	r3, r3, #4
 8009daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	621a      	str	r2, [r3, #32]
}
 8009dc0:	bf00      	nop
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	f023 0210 	bic.w	r2, r3, #16
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	031b      	lsls	r3, r3, #12
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	621a      	str	r2, [r3, #32]
}
 8009e98:	bf00      	nop
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	031b      	lsls	r3, r3, #12
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	031b      	lsls	r3, r3, #12
 8009efc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	f043 0307 	orr.w	r3, r3, #7
 8009f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	609a      	str	r2, [r3, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	021a      	lsls	r2, r3, #8
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	609a      	str	r2, [r3, #8]
}
 8009f88:	bf00      	nop
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f003 031f 	and.w	r3, r3, #31
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	43db      	mvns	r3, r3
 8009fb6:	401a      	ands	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 031f 	and.w	r3, r3, #31
 8009fc6:	6879      	ldr	r1, [r7, #4]
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	621a      	str	r2, [r3, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e050      	b.n	800a09a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d018      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a044:	d013      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a18      	ldr	r2, [pc, #96]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d00e      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d009      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d004      	beq.n	800a06e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d10c      	bne.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40010000 	.word	0x40010000
 800a0ac:	40000400 	.word	0x40000400
 800a0b0:	40000800 	.word	0x40000800
 800a0b4:	40000c00 	.word	0x40000c00
 800a0b8:	40014000 	.word	0x40014000

0800a0bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e03d      	b.n	800a154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	4313      	orrs	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	4313      	orrs	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e03f      	b.n	800a21a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7f7 fdc4 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2224      	movs	r2, #36	; 0x24
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 ff91 	bl	800b0f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695a      	ldr	r2, [r3, #20]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b08a      	sub	sp, #40	; 0x28
 800a226:	af02      	add	r7, sp, #8
 800a228:	60f8      	str	r0, [r7, #12]
 800a22a:	60b9      	str	r1, [r7, #8]
 800a22c:	603b      	str	r3, [r7, #0]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d17c      	bne.n	800a33c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <HAL_UART_Transmit+0x2c>
 800a248:	88fb      	ldrh	r3, [r7, #6]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e075      	b.n	800a33e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_UART_Transmit+0x3e>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e06e      	b.n	800a33e <HAL_UART_Transmit+0x11c>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2221      	movs	r2, #33	; 0x21
 800a272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a276:	f7f7 fecd 	bl	8002014 <HAL_GetTick>
 800a27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	88fa      	ldrh	r2, [r7, #6]
 800a286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a290:	d108      	bne.n	800a2a4 <HAL_UART_Transmit+0x82>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d104      	bne.n	800a2a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	61bb      	str	r3, [r7, #24]
 800a2a2:	e003      	b.n	800a2ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a2b4:	e02a      	b.n	800a30c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2180      	movs	r1, #128	; 0x80
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 fc49 	bl	800ab58 <UART_WaitOnFlagUntilTimeout>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d001      	beq.n	800a2d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e036      	b.n	800a33e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10b      	bne.n	800a2ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	3302      	adds	r3, #2
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	e007      	b.n	800a2fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	781a      	ldrb	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1cf      	bne.n	800a2b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2200      	movs	r2, #0
 800a31e:	2140      	movs	r1, #64	; 0x40
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 fc19 	bl	800ab58 <UART_WaitOnFlagUntilTimeout>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e006      	b.n	800a33e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2220      	movs	r2, #32
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	e000      	b.n	800a33e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a33c:	2302      	movs	r3, #2
  }
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b08c      	sub	sp, #48	; 0x30
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	4613      	mov	r3, r2
 800a352:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	d152      	bne.n	800a406 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a366:	88fb      	ldrh	r3, [r7, #6]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d101      	bne.n	800a370 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e04b      	b.n	800a408 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a376:	2b01      	cmp	r3, #1
 800a378:	d101      	bne.n	800a37e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a37a:	2302      	movs	r3, #2
 800a37c:	e044      	b.n	800a408 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2201      	movs	r2, #1
 800a38a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	461a      	mov	r2, r3
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 fc4e 	bl	800ac34 <UART_Start_Receive_DMA>
 800a398:	4603      	mov	r3, r0
 800a39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a39e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d12c      	bne.n	800a400 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d125      	bne.n	800a3fa <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	613b      	str	r3, [r7, #16]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	613b      	str	r3, [r7, #16]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	613b      	str	r3, [r7, #16]
 800a3c2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f043 0310 	orr.w	r3, r3, #16
 800a3da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3e4:	627a      	str	r2, [r7, #36]	; 0x24
 800a3e6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6a39      	ldr	r1, [r7, #32]
 800a3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a3f8:	e002      	b.n	800a400 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a404:	e000      	b.n	800a408 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a406:	2302      	movs	r3, #2
  }
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3730      	adds	r7, #48	; 0x30
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b0ba      	sub	sp, #232	; 0xe8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a436:	2300      	movs	r3, #0
 800a438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a44e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10f      	bne.n	800a476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <HAL_UART_IRQHandler+0x66>
 800a462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fd85 	bl	800af7e <UART_Receive_IT>
      return;
 800a474:	e256      	b.n	800a924 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80de 	beq.w	800a63c <HAL_UART_IRQHandler+0x22c>
 800a480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a490:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80d1 	beq.w	800a63c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <HAL_UART_IRQHandler+0xae>
 800a4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f043 0201 	orr.w	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00b      	beq.n	800a4e2 <HAL_UART_IRQHandler+0xd2>
 800a4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d005      	beq.n	800a4e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f043 0202 	orr.w	r2, r3, #2
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <HAL_UART_IRQHandler+0xf6>
 800a4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fe:	f043 0204 	orr.w	r2, r3, #4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d011      	beq.n	800a536 <HAL_UART_IRQHandler+0x126>
 800a512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d105      	bne.n	800a52a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	f043 0208 	orr.w	r2, r3, #8
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 81ed 	beq.w	800a91a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a544:	f003 0320 	and.w	r3, r3, #32
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d008      	beq.n	800a55e <HAL_UART_IRQHandler+0x14e>
 800a54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fd10 	bl	800af7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a568:	2b40      	cmp	r3, #64	; 0x40
 800a56a:	bf0c      	ite	eq
 800a56c:	2301      	moveq	r3, #1
 800a56e:	2300      	movne	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d103      	bne.n	800a58a <HAL_UART_IRQHandler+0x17a>
 800a582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04f      	beq.n	800a62a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc18 	bl	800adc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59a:	2b40      	cmp	r3, #64	; 0x40
 800a59c:	d141      	bne.n	800a622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3314      	adds	r3, #20
 800a5a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3314      	adds	r3, #20
 800a5c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a5ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a5ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a5d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1d9      	bne.n	800a59e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d013      	beq.n	800a61a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	4a7d      	ldr	r2, [pc, #500]	; (800a7ec <HAL_UART_IRQHandler+0x3dc>)
 800a5f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7f8 f83c 	bl	800267c <HAL_DMA_Abort_IT>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d016      	beq.n	800a638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	e00e      	b.n	800a638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f008 fa0e 	bl	8012a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a620:	e00a      	b.n	800a638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f008 fa0a 	bl	8012a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a628:	e006      	b.n	800a638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f008 fa06 	bl	8012a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a636:	e170      	b.n	800a91a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a638:	bf00      	nop
    return;
 800a63a:	e16e      	b.n	800a91a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	2b01      	cmp	r3, #1
 800a642:	f040 814a 	bne.w	800a8da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a64a:	f003 0310 	and.w	r3, r3, #16
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 8143 	beq.w	800a8da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a658:	f003 0310 	and.w	r3, r3, #16
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 813c 	beq.w	800a8da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a662:	2300      	movs	r3, #0
 800a664:	60bb      	str	r3, [r7, #8]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	60bb      	str	r3, [r7, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a682:	2b40      	cmp	r3, #64	; 0x40
 800a684:	f040 80b4 	bne.w	800a7f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 8140 	beq.w	800a91e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	f080 8139 	bcs.w	800a91e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a6b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6be:	f000 8088 	beq.w	800a7d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	330c      	adds	r3, #12
 800a6c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a6d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	330c      	adds	r3, #12
 800a6ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a6ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a6f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6fe:	e841 2300 	strex	r3, r2, [r1]
 800a702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1d9      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3314      	adds	r3, #20
 800a714:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a71e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a720:	f023 0301 	bic.w	r3, r3, #1
 800a724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3314      	adds	r3, #20
 800a72e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a732:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a736:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a73a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a73e:	e841 2300 	strex	r3, r2, [r1]
 800a742:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e1      	bne.n	800a70e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3314      	adds	r3, #20
 800a750:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3314      	adds	r3, #20
 800a76a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a76e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a770:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a77c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e3      	bne.n	800a74a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	330c      	adds	r3, #12
 800a796:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7a2:	f023 0310 	bic.w	r3, r3, #16
 800a7a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	330c      	adds	r3, #12
 800a7b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a7b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7bc:	e841 2300 	strex	r3, r2, [r1]
 800a7c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e3      	bne.n	800a790 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7f7 fee5 	bl	800259c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f008 f902 	bl	80129ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a7e8:	e099      	b.n	800a91e <HAL_UART_IRQHandler+0x50e>
 800a7ea:	bf00      	nop
 800a7ec:	0800ae87 	.word	0x0800ae87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 808b 	beq.w	800a922 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a80c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 8086 	beq.w	800a922 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	330c      	adds	r3, #12
 800a81c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a82c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	330c      	adds	r3, #12
 800a836:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a83a:	647a      	str	r2, [r7, #68]	; 0x44
 800a83c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a842:	e841 2300 	strex	r3, r2, [r1]
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1e3      	bne.n	800a816 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3314      	adds	r3, #20
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	623b      	str	r3, [r7, #32]
   return(result);
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3314      	adds	r3, #20
 800a86e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a872:	633a      	str	r2, [r7, #48]	; 0x30
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e3      	bne.n	800a84e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	e853 3f00 	ldrex	r3, [r3]
 800a8a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f023 0310 	bic.w	r3, r3, #16
 800a8aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	330c      	adds	r3, #12
 800a8b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a8b8:	61fa      	str	r2, [r7, #28]
 800a8ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8bc:	69b9      	ldr	r1, [r7, #24]
 800a8be:	69fa      	ldr	r2, [r7, #28]
 800a8c0:	e841 2300 	strex	r3, r2, [r1]
 800a8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e3      	bne.n	800a894 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f008 f88a 	bl	80129ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8d8:	e023      	b.n	800a922 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <HAL_UART_IRQHandler+0x4ea>
 800a8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fadb 	bl	800aeae <UART_Transmit_IT>
    return;
 800a8f8:	e014      	b.n	800a924 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <HAL_UART_IRQHandler+0x514>
 800a906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d008      	beq.n	800a924 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fb1b 	bl	800af4e <UART_EndTransmit_IT>
    return;
 800a918:	e004      	b.n	800a924 <HAL_UART_IRQHandler+0x514>
    return;
 800a91a:	bf00      	nop
 800a91c:	e002      	b.n	800a924 <HAL_UART_IRQHandler+0x514>
      return;
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <HAL_UART_IRQHandler+0x514>
      return;
 800a922:	bf00      	nop
  }
}
 800a924:	37e8      	adds	r7, #232	; 0xe8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop

0800a92c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a934:	bf00      	nop
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b09c      	sub	sp, #112	; 0x70
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a974:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a980:	2b00      	cmp	r3, #0
 800a982:	d172      	bne.n	800aa6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a986:	2200      	movs	r2, #0
 800a988:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	330c      	adds	r3, #12
 800a990:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	330c      	adds	r3, #12
 800a9a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9aa:	65ba      	str	r2, [r7, #88]	; 0x58
 800a9ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e5      	bne.n	800a98a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3314      	adds	r3, #20
 800a9c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d0:	f023 0301 	bic.w	r3, r3, #1
 800a9d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3314      	adds	r3, #20
 800a9dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9de:	647a      	str	r2, [r7, #68]	; 0x44
 800a9e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	623b      	str	r3, [r7, #32]
   return(result);
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa08:	663b      	str	r3, [r7, #96]	; 0x60
 800aa0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3314      	adds	r3, #20
 800aa10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa12:	633a      	str	r2, [r7, #48]	; 0x30
 800aa14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e5      	bne.n	800a9f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d119      	bne.n	800aa6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	330c      	adds	r3, #12
 800aa3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f023 0310 	bic.w	r3, r3, #16
 800aa4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	330c      	adds	r3, #12
 800aa54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa56:	61fa      	str	r2, [r7, #28]
 800aa58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	69b9      	ldr	r1, [r7, #24]
 800aa5c:	69fa      	ldr	r2, [r7, #28]
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	617b      	str	r3, [r7, #20]
   return(result);
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e5      	bne.n	800aa36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d106      	bne.n	800aa80 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa76:	4619      	mov	r1, r3
 800aa78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa7a:	f007 ffb7 	bl	80129ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa7e:	e002      	b.n	800aa86 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aa80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aa82:	f7ff ff5d 	bl	800a940 <HAL_UART_RxCpltCallback>
}
 800aa86:	bf00      	nop
 800aa88:	3770      	adds	r7, #112	; 0x70
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d108      	bne.n	800aab6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aaa8:	085b      	lsrs	r3, r3, #1
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	4619      	mov	r1, r3
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f007 ff9c 	bl	80129ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aab4:	e002      	b.n	800aabc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff ff4c 	bl	800a954 <HAL_UART_RxHalfCpltCallback>
}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae0:	2b80      	cmp	r3, #128	; 0x80
 800aae2:	bf0c      	ite	eq
 800aae4:	2301      	moveq	r3, #1
 800aae6:	2300      	movne	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	2b21      	cmp	r3, #33	; 0x21
 800aaf6:	d108      	bne.n	800ab0a <UART_DMAError+0x46>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2200      	movs	r2, #0
 800ab02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ab04:	68b8      	ldr	r0, [r7, #8]
 800ab06:	f000 f933 	bl	800ad70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab14:	2b40      	cmp	r3, #64	; 0x40
 800ab16:	bf0c      	ite	eq
 800ab18:	2301      	moveq	r3, #1
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b22      	cmp	r3, #34	; 0x22
 800ab2a:	d108      	bne.n	800ab3e <UART_DMAError+0x7a>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2200      	movs	r2, #0
 800ab36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab38:	68b8      	ldr	r0, [r7, #8]
 800ab3a:	f000 f941 	bl	800adc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	f043 0210 	orr.w	r2, r3, #16
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab4a:	68b8      	ldr	r0, [r7, #8]
 800ab4c:	f007 ff76 	bl	8012a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b090      	sub	sp, #64	; 0x40
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	4613      	mov	r3, r2
 800ab66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab68:	e050      	b.n	800ac0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d04c      	beq.n	800ac0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ab72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab78:	f7f7 fa4c 	bl	8002014 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d241      	bcs.n	800ac0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	330c      	adds	r3, #12
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aba8:	637a      	str	r2, [r7, #52]	; 0x34
 800abaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e5      	bne.n	800ab88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3314      	adds	r3, #20
 800abc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	e853 3f00 	ldrex	r3, [r3]
 800abca:	613b      	str	r3, [r7, #16]
   return(result);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 0301 	bic.w	r3, r3, #1
 800abd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3314      	adds	r3, #20
 800abda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abdc:	623a      	str	r2, [r7, #32]
 800abde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe0:	69f9      	ldr	r1, [r7, #28]
 800abe2:	6a3a      	ldr	r2, [r7, #32]
 800abe4:	e841 2300 	strex	r3, r2, [r1]
 800abe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1e5      	bne.n	800abbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2220      	movs	r2, #32
 800abfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e00f      	b.n	800ac2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	4013      	ands	r3, r2
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	bf0c      	ite	eq
 800ac1c:	2301      	moveq	r3, #1
 800ac1e:	2300      	movne	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d09f      	beq.n	800ab6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3740      	adds	r7, #64	; 0x40
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b098      	sub	sp, #96	; 0x60
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	88fa      	ldrh	r2, [r7, #6]
 800ac4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2222      	movs	r2, #34	; 0x22
 800ac58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	4a40      	ldr	r2, [pc, #256]	; (800ad64 <UART_Start_Receive_DMA+0x130>)
 800ac62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	4a3f      	ldr	r2, [pc, #252]	; (800ad68 <UART_Start_Receive_DMA+0x134>)
 800ac6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	4a3e      	ldr	r2, [pc, #248]	; (800ad6c <UART_Start_Receive_DMA+0x138>)
 800ac72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	2200      	movs	r2, #0
 800ac7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac7c:	f107 0308 	add.w	r3, r7, #8
 800ac80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	f7f7 fc2a 	bl	80024ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac98:	2300      	movs	r3, #0
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	613b      	str	r3, [r7, #16]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d019      	beq.n	800acf2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	330c      	adds	r3, #12
 800acc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	330c      	adds	r3, #12
 800acdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acde:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ace0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ace4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800acec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3314      	adds	r3, #20
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	657b      	str	r3, [r7, #84]	; 0x54
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad12:	63ba      	str	r2, [r7, #56]	; 0x38
 800ad14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad1a:	e841 2300 	strex	r3, r2, [r1]
 800ad1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1e5      	bne.n	800acf2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3314      	adds	r3, #20
 800ad2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	617b      	str	r3, [r7, #20]
   return(result);
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3314      	adds	r3, #20
 800ad44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad46:	627a      	str	r2, [r7, #36]	; 0x24
 800ad48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6a39      	ldr	r1, [r7, #32]
 800ad4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3760      	adds	r7, #96	; 0x60
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	0800a969 	.word	0x0800a969
 800ad68:	0800aa8f 	.word	0x0800aa8f
 800ad6c:	0800aac5 	.word	0x0800aac5

0800ad70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b089      	sub	sp, #36	; 0x24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad8e:	61fb      	str	r3, [r7, #28]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	330c      	adds	r3, #12
 800ad96:	69fa      	ldr	r2, [r7, #28]
 800ad98:	61ba      	str	r2, [r7, #24]
 800ad9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9c:	6979      	ldr	r1, [r7, #20]
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	e841 2300 	strex	r3, r2, [r1]
 800ada4:	613b      	str	r3, [r7, #16]
   return(result);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1e5      	bne.n	800ad78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2220      	movs	r2, #32
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800adb4:	bf00      	nop
 800adb6:	3724      	adds	r7, #36	; 0x24
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b095      	sub	sp, #84	; 0x54
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	330c      	adds	r3, #12
 800adce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add2:	e853 3f00 	ldrex	r3, [r3]
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	330c      	adds	r3, #12
 800ade6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ade8:	643a      	str	r2, [r7, #64]	; 0x40
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adf0:	e841 2300 	strex	r3, r2, [r1]
 800adf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1e5      	bne.n	800adc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3314      	adds	r3, #20
 800ae02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f023 0301 	bic.w	r3, r3, #1
 800ae12:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3314      	adds	r3, #20
 800ae1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e5      	bne.n	800adfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d119      	bne.n	800ae6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	e853 3f00 	ldrex	r3, [r3]
 800ae46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f023 0310 	bic.w	r3, r3, #16
 800ae4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	330c      	adds	r3, #12
 800ae56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae58:	61ba      	str	r2, [r7, #24]
 800ae5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	613b      	str	r3, [r7, #16]
   return(result);
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e5      	bne.n	800ae38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2220      	movs	r2, #32
 800ae70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae7a:	bf00      	nop
 800ae7c:	3754      	adds	r7, #84	; 0x54
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f007 fdcb 	bl	8012a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aea6:	bf00      	nop
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b21      	cmp	r3, #33	; 0x21
 800aec0:	d13e      	bne.n	800af40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeca:	d114      	bne.n	800aef6 <UART_Transmit_IT+0x48>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d110      	bne.n	800aef6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	1c9a      	adds	r2, r3, #2
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	621a      	str	r2, [r3, #32]
 800aef4:	e008      	b.n	800af08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	1c59      	adds	r1, r3, #1
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6211      	str	r1, [r2, #32]
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	b29b      	uxth	r3, r3
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	4619      	mov	r1, r3
 800af16:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10f      	bne.n	800af3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68da      	ldr	r2, [r3, #12]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e000      	b.n	800af42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af40:	2302      	movs	r3, #2
  }
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2220      	movs	r2, #32
 800af6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff fcdc 	bl	800a92c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b08c      	sub	sp, #48	; 0x30
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b22      	cmp	r3, #34	; 0x22
 800af90:	f040 80ab 	bne.w	800b0ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9c:	d117      	bne.n	800afce <UART_Receive_IT+0x50>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d113      	bne.n	800afce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	1c9a      	adds	r2, r3, #2
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	629a      	str	r2, [r3, #40]	; 0x28
 800afcc:	e026      	b.n	800b01c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800afd4:	2300      	movs	r3, #0
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afe0:	d007      	beq.n	800aff2 <UART_Receive_IT+0x74>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10a      	bne.n	800b000 <UART_Receive_IT+0x82>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	e008      	b.n	800b012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b020:	b29b      	uxth	r3, r3
 800b022:	3b01      	subs	r3, #1
 800b024:	b29b      	uxth	r3, r3
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	4619      	mov	r1, r3
 800b02a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d15a      	bne.n	800b0e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f022 0220 	bic.w	r2, r2, #32
 800b03e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b04e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	695a      	ldr	r2, [r3, #20]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0201 	bic.w	r2, r2, #1
 800b05e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2220      	movs	r2, #32
 800b064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d135      	bne.n	800b0dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	330c      	adds	r3, #12
 800b07c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	613b      	str	r3, [r7, #16]
   return(result);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	f023 0310 	bic.w	r3, r3, #16
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	330c      	adds	r3, #12
 800b094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b096:	623a      	str	r2, [r7, #32]
 800b098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	69f9      	ldr	r1, [r7, #28]
 800b09c:	6a3a      	ldr	r2, [r7, #32]
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e5      	bne.n	800b076 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d10a      	bne.n	800b0ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	60fb      	str	r3, [r7, #12]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f007 fc89 	bl	80129ec <HAL_UARTEx_RxEventCallback>
 800b0da:	e002      	b.n	800b0e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff fc2f 	bl	800a940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e002      	b.n	800b0ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e000      	b.n	800b0ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b0ea:	2302      	movs	r3, #2
  }
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3730      	adds	r7, #48	; 0x30
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f8:	b0c0      	sub	sp, #256	; 0x100
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b110:	68d9      	ldr	r1, [r3, #12]
 800b112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	ea40 0301 	orr.w	r3, r0, r1
 800b11c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b122:	689a      	ldr	r2, [r3, #8]
 800b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	431a      	orrs	r2, r3
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b14c:	f021 010c 	bic.w	r1, r1, #12
 800b150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b15a:	430b      	orrs	r3, r1
 800b15c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b16a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16e:	6999      	ldr	r1, [r3, #24]
 800b170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	ea40 0301 	orr.w	r3, r0, r1
 800b17a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b8f      	ldr	r3, [pc, #572]	; (800b3c0 <UART_SetConfig+0x2cc>)
 800b184:	429a      	cmp	r2, r3
 800b186:	d005      	beq.n	800b194 <UART_SetConfig+0xa0>
 800b188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4b8d      	ldr	r3, [pc, #564]	; (800b3c4 <UART_SetConfig+0x2d0>)
 800b190:	429a      	cmp	r2, r3
 800b192:	d104      	bne.n	800b19e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b194:	f7fb ff00 	bl	8006f98 <HAL_RCC_GetPCLK2Freq>
 800b198:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b19c:	e003      	b.n	800b1a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b19e:	f7fb fee7 	bl	8006f70 <HAL_RCC_GetPCLK1Freq>
 800b1a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1b0:	f040 810c 	bne.w	800b3cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	1891      	adds	r1, r2, r2
 800b1cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1ce:	415b      	adcs	r3, r3
 800b1d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	eb12 0801 	adds.w	r8, r2, r1
 800b1dc:	4629      	mov	r1, r5
 800b1de:	eb43 0901 	adc.w	r9, r3, r1
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1f6:	4690      	mov	r8, r2
 800b1f8:	4699      	mov	r9, r3
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	eb18 0303 	adds.w	r3, r8, r3
 800b200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b204:	462b      	mov	r3, r5
 800b206:	eb49 0303 	adc.w	r3, r9, r3
 800b20a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b21a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b21e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b222:	460b      	mov	r3, r1
 800b224:	18db      	adds	r3, r3, r3
 800b226:	653b      	str	r3, [r7, #80]	; 0x50
 800b228:	4613      	mov	r3, r2
 800b22a:	eb42 0303 	adc.w	r3, r2, r3
 800b22e:	657b      	str	r3, [r7, #84]	; 0x54
 800b230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b238:	f7f4 ffd2 	bl	80001e0 <__aeabi_uldivmod>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4b61      	ldr	r3, [pc, #388]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b242:	fba3 2302 	umull	r2, r3, r3, r2
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	011c      	lsls	r4, r3, #4
 800b24a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b254:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b25c:	4642      	mov	r2, r8
 800b25e:	464b      	mov	r3, r9
 800b260:	1891      	adds	r1, r2, r2
 800b262:	64b9      	str	r1, [r7, #72]	; 0x48
 800b264:	415b      	adcs	r3, r3
 800b266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b26c:	4641      	mov	r1, r8
 800b26e:	eb12 0a01 	adds.w	sl, r2, r1
 800b272:	4649      	mov	r1, r9
 800b274:	eb43 0b01 	adc.w	fp, r3, r1
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b28c:	4692      	mov	sl, r2
 800b28e:	469b      	mov	fp, r3
 800b290:	4643      	mov	r3, r8
 800b292:	eb1a 0303 	adds.w	r3, sl, r3
 800b296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b29a:	464b      	mov	r3, r9
 800b29c:	eb4b 0303 	adc.w	r3, fp, r3
 800b2a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	18db      	adds	r3, r3, r3
 800b2bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2be:	4613      	mov	r3, r2
 800b2c0:	eb42 0303 	adc.w	r3, r2, r3
 800b2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b2c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b2ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b2ce:	f7f4 ff87 	bl	80001e0 <__aeabi_uldivmod>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	4b3b      	ldr	r3, [pc, #236]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b2da:	fba3 2301 	umull	r2, r3, r3, r1
 800b2de:	095b      	lsrs	r3, r3, #5
 800b2e0:	2264      	movs	r2, #100	; 0x64
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	1acb      	subs	r3, r1, r3
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b2ee:	4b36      	ldr	r3, [pc, #216]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800b2f4:	095b      	lsrs	r3, r3, #5
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2fc:	441c      	add	r4, r3
 800b2fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b302:	2200      	movs	r2, #0
 800b304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b308:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b30c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	1891      	adds	r1, r2, r2
 800b316:	63b9      	str	r1, [r7, #56]	; 0x38
 800b318:	415b      	adcs	r3, r3
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b320:	4641      	mov	r1, r8
 800b322:	1851      	adds	r1, r2, r1
 800b324:	6339      	str	r1, [r7, #48]	; 0x30
 800b326:	4649      	mov	r1, r9
 800b328:	414b      	adcs	r3, r1
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
 800b32c:	f04f 0200 	mov.w	r2, #0
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b338:	4659      	mov	r1, fp
 800b33a:	00cb      	lsls	r3, r1, #3
 800b33c:	4651      	mov	r1, sl
 800b33e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b342:	4651      	mov	r1, sl
 800b344:	00ca      	lsls	r2, r1, #3
 800b346:	4610      	mov	r0, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	4642      	mov	r2, r8
 800b34e:	189b      	adds	r3, r3, r2
 800b350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b354:	464b      	mov	r3, r9
 800b356:	460a      	mov	r2, r1
 800b358:	eb42 0303 	adc.w	r3, r2, r3
 800b35c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b36c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b374:	460b      	mov	r3, r1
 800b376:	18db      	adds	r3, r3, r3
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
 800b37a:	4613      	mov	r3, r2
 800b37c:	eb42 0303 	adc.w	r3, r2, r3
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b38a:	f7f4 ff29 	bl	80001e0 <__aeabi_uldivmod>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b394:	fba3 1302 	umull	r1, r3, r3, r2
 800b398:	095b      	lsrs	r3, r3, #5
 800b39a:	2164      	movs	r1, #100	; 0x64
 800b39c:	fb01 f303 	mul.w	r3, r1, r3
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	3332      	adds	r3, #50	; 0x32
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	f003 0207 	and.w	r2, r3, #7
 800b3b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4422      	add	r2, r4
 800b3ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3bc:	e105      	b.n	800b5ca <UART_SetConfig+0x4d6>
 800b3be:	bf00      	nop
 800b3c0:	40011000 	.word	0x40011000
 800b3c4:	40011400 	.word	0x40011400
 800b3c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	1891      	adds	r1, r2, r2
 800b3e4:	6239      	str	r1, [r7, #32]
 800b3e6:	415b      	adcs	r3, r3
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3ee:	4641      	mov	r1, r8
 800b3f0:	1854      	adds	r4, r2, r1
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	eb43 0501 	adc.w	r5, r3, r1
 800b3f8:	f04f 0200 	mov.w	r2, #0
 800b3fc:	f04f 0300 	mov.w	r3, #0
 800b400:	00eb      	lsls	r3, r5, #3
 800b402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b406:	00e2      	lsls	r2, r4, #3
 800b408:	4614      	mov	r4, r2
 800b40a:	461d      	mov	r5, r3
 800b40c:	4643      	mov	r3, r8
 800b40e:	18e3      	adds	r3, r4, r3
 800b410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b414:	464b      	mov	r3, r9
 800b416:	eb45 0303 	adc.w	r3, r5, r3
 800b41a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b41e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b42a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b43a:	4629      	mov	r1, r5
 800b43c:	008b      	lsls	r3, r1, #2
 800b43e:	4621      	mov	r1, r4
 800b440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b444:	4621      	mov	r1, r4
 800b446:	008a      	lsls	r2, r1, #2
 800b448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b44c:	f7f4 fec8 	bl	80001e0 <__aeabi_uldivmod>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4b60      	ldr	r3, [pc, #384]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b456:	fba3 2302 	umull	r2, r3, r3, r2
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	011c      	lsls	r4, r3, #4
 800b45e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b462:	2200      	movs	r2, #0
 800b464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b468:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b46c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	1891      	adds	r1, r2, r2
 800b476:	61b9      	str	r1, [r7, #24]
 800b478:	415b      	adcs	r3, r3
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b480:	4641      	mov	r1, r8
 800b482:	1851      	adds	r1, r2, r1
 800b484:	6139      	str	r1, [r7, #16]
 800b486:	4649      	mov	r1, r9
 800b488:	414b      	adcs	r3, r1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	f04f 0200 	mov.w	r2, #0
 800b490:	f04f 0300 	mov.w	r3, #0
 800b494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b498:	4659      	mov	r1, fp
 800b49a:	00cb      	lsls	r3, r1, #3
 800b49c:	4651      	mov	r1, sl
 800b49e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4a2:	4651      	mov	r1, sl
 800b4a4:	00ca      	lsls	r2, r1, #3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	189b      	adds	r3, r3, r2
 800b4b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	eb42 0303 	adc.w	r3, r2, r3
 800b4bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	f04f 0300 	mov.w	r3, #0
 800b4d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b4d8:	4649      	mov	r1, r9
 800b4da:	008b      	lsls	r3, r1, #2
 800b4dc:	4641      	mov	r1, r8
 800b4de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	008a      	lsls	r2, r1, #2
 800b4e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b4ea:	f7f4 fe79 	bl	80001e0 <__aeabi_uldivmod>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4b39      	ldr	r3, [pc, #228]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b4f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4f8:	095b      	lsrs	r3, r3, #5
 800b4fa:	2164      	movs	r1, #100	; 0x64
 800b4fc:	fb01 f303 	mul.w	r3, r1, r3
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	011b      	lsls	r3, r3, #4
 800b504:	3332      	adds	r3, #50	; 0x32
 800b506:	4a34      	ldr	r2, [pc, #208]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b508:	fba2 2303 	umull	r2, r3, r2, r3
 800b50c:	095b      	lsrs	r3, r3, #5
 800b50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b512:	441c      	add	r4, r3
 800b514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b518:	2200      	movs	r2, #0
 800b51a:	673b      	str	r3, [r7, #112]	; 0x70
 800b51c:	677a      	str	r2, [r7, #116]	; 0x74
 800b51e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b522:	4642      	mov	r2, r8
 800b524:	464b      	mov	r3, r9
 800b526:	1891      	adds	r1, r2, r2
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	415b      	adcs	r3, r3
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b532:	4641      	mov	r1, r8
 800b534:	1851      	adds	r1, r2, r1
 800b536:	6039      	str	r1, [r7, #0]
 800b538:	4649      	mov	r1, r9
 800b53a:	414b      	adcs	r3, r1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	f04f 0200 	mov.w	r2, #0
 800b542:	f04f 0300 	mov.w	r3, #0
 800b546:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b54a:	4659      	mov	r1, fp
 800b54c:	00cb      	lsls	r3, r1, #3
 800b54e:	4651      	mov	r1, sl
 800b550:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b554:	4651      	mov	r1, sl
 800b556:	00ca      	lsls	r2, r1, #3
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	4603      	mov	r3, r0
 800b55e:	4642      	mov	r2, r8
 800b560:	189b      	adds	r3, r3, r2
 800b562:	66bb      	str	r3, [r7, #104]	; 0x68
 800b564:	464b      	mov	r3, r9
 800b566:	460a      	mov	r2, r1
 800b568:	eb42 0303 	adc.w	r3, r2, r3
 800b56c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	663b      	str	r3, [r7, #96]	; 0x60
 800b578:	667a      	str	r2, [r7, #100]	; 0x64
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b586:	4649      	mov	r1, r9
 800b588:	008b      	lsls	r3, r1, #2
 800b58a:	4641      	mov	r1, r8
 800b58c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b590:	4641      	mov	r1, r8
 800b592:	008a      	lsls	r2, r1, #2
 800b594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b598:	f7f4 fe22 	bl	80001e0 <__aeabi_uldivmod>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b5a2:	fba3 1302 	umull	r1, r3, r3, r2
 800b5a6:	095b      	lsrs	r3, r3, #5
 800b5a8:	2164      	movs	r1, #100	; 0x64
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	011b      	lsls	r3, r3, #4
 800b5b2:	3332      	adds	r3, #50	; 0x32
 800b5b4:	4a08      	ldr	r2, [pc, #32]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4422      	add	r2, r4
 800b5c8:	609a      	str	r2, [r3, #8]
}
 800b5ca:	bf00      	nop
 800b5cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5d6:	bf00      	nop
 800b5d8:	51eb851f 	.word	0x51eb851f

0800b5dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5dc:	b084      	sub	sp, #16
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	f107 001c 	add.w	r0, r7, #28
 800b5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d122      	bne.n	800b63a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d105      	bne.n	800b62e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 fbee 	bl	800ce10 <USB_CoreReset>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
 800b638:	e01a      	b.n	800b670 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 fbe2 	bl	800ce10 <USB_CoreReset>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	639a      	str	r2, [r3, #56]	; 0x38
 800b662:	e005      	b.n	800b670 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10b      	bne.n	800b68e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f043 0206 	orr.w	r2, r3, #6
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f043 0220 	orr.w	r2, r3, #32
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b69a:	b004      	add	sp, #16
 800b69c:	4770      	bx	lr
	...

0800b6a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d165      	bne.n	800b780 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	4a41      	ldr	r2, [pc, #260]	; (800b7bc <USB_SetTurnaroundTime+0x11c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d906      	bls.n	800b6ca <USB_SetTurnaroundTime+0x2a>
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4a40      	ldr	r2, [pc, #256]	; (800b7c0 <USB_SetTurnaroundTime+0x120>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d202      	bcs.n	800b6ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b6c4:	230f      	movs	r3, #15
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e062      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	4a3c      	ldr	r2, [pc, #240]	; (800b7c0 <USB_SetTurnaroundTime+0x120>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d306      	bcc.n	800b6e0 <USB_SetTurnaroundTime+0x40>
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	4a3b      	ldr	r2, [pc, #236]	; (800b7c4 <USB_SetTurnaroundTime+0x124>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d202      	bcs.n	800b6e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b6da:	230e      	movs	r3, #14
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e057      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	4a38      	ldr	r2, [pc, #224]	; (800b7c4 <USB_SetTurnaroundTime+0x124>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d306      	bcc.n	800b6f6 <USB_SetTurnaroundTime+0x56>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	4a37      	ldr	r2, [pc, #220]	; (800b7c8 <USB_SetTurnaroundTime+0x128>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d202      	bcs.n	800b6f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b6f0:	230d      	movs	r3, #13
 800b6f2:	617b      	str	r3, [r7, #20]
 800b6f4:	e04c      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4a33      	ldr	r2, [pc, #204]	; (800b7c8 <USB_SetTurnaroundTime+0x128>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d306      	bcc.n	800b70c <USB_SetTurnaroundTime+0x6c>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	4a32      	ldr	r2, [pc, #200]	; (800b7cc <USB_SetTurnaroundTime+0x12c>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d802      	bhi.n	800b70c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b706:	230c      	movs	r3, #12
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e041      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	4a2f      	ldr	r2, [pc, #188]	; (800b7cc <USB_SetTurnaroundTime+0x12c>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d906      	bls.n	800b722 <USB_SetTurnaroundTime+0x82>
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	4a2e      	ldr	r2, [pc, #184]	; (800b7d0 <USB_SetTurnaroundTime+0x130>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d802      	bhi.n	800b722 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b71c:	230b      	movs	r3, #11
 800b71e:	617b      	str	r3, [r7, #20]
 800b720:	e036      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4a2a      	ldr	r2, [pc, #168]	; (800b7d0 <USB_SetTurnaroundTime+0x130>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d906      	bls.n	800b738 <USB_SetTurnaroundTime+0x98>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <USB_SetTurnaroundTime+0x134>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d802      	bhi.n	800b738 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b732:	230a      	movs	r3, #10
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	e02b      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4a26      	ldr	r2, [pc, #152]	; (800b7d4 <USB_SetTurnaroundTime+0x134>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d906      	bls.n	800b74e <USB_SetTurnaroundTime+0xae>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4a25      	ldr	r2, [pc, #148]	; (800b7d8 <USB_SetTurnaroundTime+0x138>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d202      	bcs.n	800b74e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b748:	2309      	movs	r3, #9
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e020      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	4a21      	ldr	r2, [pc, #132]	; (800b7d8 <USB_SetTurnaroundTime+0x138>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d306      	bcc.n	800b764 <USB_SetTurnaroundTime+0xc4>
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	4a20      	ldr	r2, [pc, #128]	; (800b7dc <USB_SetTurnaroundTime+0x13c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d802      	bhi.n	800b764 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b75e:	2308      	movs	r3, #8
 800b760:	617b      	str	r3, [r7, #20]
 800b762:	e015      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4a1d      	ldr	r2, [pc, #116]	; (800b7dc <USB_SetTurnaroundTime+0x13c>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d906      	bls.n	800b77a <USB_SetTurnaroundTime+0xda>
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	4a1c      	ldr	r2, [pc, #112]	; (800b7e0 <USB_SetTurnaroundTime+0x140>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d202      	bcs.n	800b77a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b774:	2307      	movs	r3, #7
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e00a      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b77a:	2306      	movs	r3, #6
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	e007      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d102      	bne.n	800b78c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b786:	2309      	movs	r3, #9
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e001      	b.n	800b790 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b78c:	2309      	movs	r3, #9
 800b78e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	029b      	lsls	r3, r3, #10
 800b7a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	371c      	adds	r7, #28
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	00d8acbf 	.word	0x00d8acbf
 800b7c0:	00e4e1c0 	.word	0x00e4e1c0
 800b7c4:	00f42400 	.word	0x00f42400
 800b7c8:	01067380 	.word	0x01067380
 800b7cc:	011a499f 	.word	0x011a499f
 800b7d0:	01312cff 	.word	0x01312cff
 800b7d4:	014ca43f 	.word	0x014ca43f
 800b7d8:	016e3600 	.word	0x016e3600
 800b7dc:	01a6ab1f 	.word	0x01a6ab1f
 800b7e0:	01e84800 	.word	0x01e84800

0800b7e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	f043 0201 	orr.w	r2, r3, #1
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f023 0201 	bic.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d115      	bne.n	800b876 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b856:	2001      	movs	r0, #1
 800b858:	f7f6 fbe8 	bl	800202c <HAL_Delay>
      ms++;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3301      	adds	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f001 fa45 	bl	800ccf2 <USB_GetMode>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d01e      	beq.n	800b8ac <USB_SetCurrentMode+0x84>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b31      	cmp	r3, #49	; 0x31
 800b872:	d9f0      	bls.n	800b856 <USB_SetCurrentMode+0x2e>
 800b874:	e01a      	b.n	800b8ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d115      	bne.n	800b8a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b888:	2001      	movs	r0, #1
 800b88a:	f7f6 fbcf 	bl	800202c <HAL_Delay>
      ms++;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f001 fa2c 	bl	800ccf2 <USB_GetMode>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <USB_SetCurrentMode+0x84>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b31      	cmp	r3, #49	; 0x31
 800b8a4:	d9f0      	bls.n	800b888 <USB_SetCurrentMode+0x60>
 800b8a6:	e001      	b.n	800b8ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e005      	b.n	800b8b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b32      	cmp	r3, #50	; 0x32
 800b8b0:	d101      	bne.n	800b8b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b086      	sub	sp, #24
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b8ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b8da:	2300      	movs	r3, #0
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	e009      	b.n	800b8f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3340      	adds	r3, #64	; 0x40
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b0e      	cmp	r3, #14
 800b8f8:	d9f2      	bls.n	800b8e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d11c      	bne.n	800b93a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b90e:	f043 0302 	orr.w	r3, r3, #2
 800b912:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b918:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b930:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	639a      	str	r2, [r3, #56]	; 0x38
 800b938:	e00b      	b.n	800b952 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b958:	461a      	mov	r2, r3
 800b95a:	2300      	movs	r3, #0
 800b95c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b964:	4619      	mov	r1, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96c:	461a      	mov	r2, r3
 800b96e:	680b      	ldr	r3, [r1, #0]
 800b970:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	2b01      	cmp	r3, #1
 800b976:	d10c      	bne.n	800b992 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d104      	bne.n	800b988 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b97e:	2100      	movs	r1, #0
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f965 	bl	800bc50 <USB_SetDevSpeed>
 800b986:	e008      	b.n	800b99a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b988:	2101      	movs	r1, #1
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f960 	bl	800bc50 <USB_SetDevSpeed>
 800b990:	e003      	b.n	800b99a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b992:	2103      	movs	r1, #3
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f95b 	bl	800bc50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b99a:	2110      	movs	r1, #16
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f8f3 	bl	800bb88 <USB_FlushTxFifo>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f91f 	bl	800bbf0 <USB_FlushRxFifo>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9da:	461a      	mov	r2, r3
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
 800b9e4:	e043      	b.n	800ba6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9fc:	d118      	bne.n	800ba30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10a      	bne.n	800ba1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	015a      	lsls	r2, r3, #5
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba10:	461a      	mov	r2, r3
 800ba12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	e013      	b.n	800ba42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	461a      	mov	r2, r3
 800ba28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	e008      	b.n	800ba42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	2300      	movs	r3, #0
 800ba40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	015a      	lsls	r2, r3, #5
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	4413      	add	r3, r2
 800ba4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4e:	461a      	mov	r2, r3
 800ba50:	2300      	movs	r3, #0
 800ba52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba60:	461a      	mov	r2, r3
 800ba62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	613b      	str	r3, [r7, #16]
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d3b7      	bcc.n	800b9e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	613b      	str	r3, [r7, #16]
 800ba7a:	e043      	b.n	800bb04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba92:	d118      	bne.n	800bac6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10a      	bne.n	800bab0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa6:	461a      	mov	r2, r3
 800baa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	e013      	b.n	800bad8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	015a      	lsls	r2, r3, #5
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	4413      	add	r3, r2
 800bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babc:	461a      	mov	r2, r3
 800babe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	e008      	b.n	800bad8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad2:	461a      	mov	r2, r3
 800bad4:	2300      	movs	r3, #0
 800bad6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae4:	461a      	mov	r2, r3
 800bae6:	2300      	movs	r3, #0
 800bae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	461a      	mov	r2, r3
 800baf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bafc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3301      	adds	r3, #1
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d3b7      	bcc.n	800ba7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d105      	bne.n	800bb40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	f043 0210 	orr.w	r2, r3, #16
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	699a      	ldr	r2, [r3, #24]
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <USB_DevInit+0x2c4>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	699b      	ldr	r3, [r3, #24]
 800bb56:	f043 0208 	orr.w	r2, r3, #8
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d107      	bne.n	800bb74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb6c:	f043 0304 	orr.w	r3, r3, #4
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb80:	b004      	add	sp, #16
 800bb82:	4770      	bx	lr
 800bb84:	803c3800 	.word	0x803c3800

0800bb88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb92:	2300      	movs	r3, #0
 800bb94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4a13      	ldr	r2, [pc, #76]	; (800bbec <USB_FlushTxFifo+0x64>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d901      	bls.n	800bba8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e01b      	b.n	800bbe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	daf2      	bge.n	800bb96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	019b      	lsls	r3, r3, #6
 800bbb8:	f043 0220 	orr.w	r2, r3, #32
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4a08      	ldr	r2, [pc, #32]	; (800bbec <USB_FlushTxFifo+0x64>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d901      	bls.n	800bbd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	e006      	b.n	800bbe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d0f0      	beq.n	800bbc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	00030d40 	.word	0x00030d40

0800bbf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4a11      	ldr	r2, [pc, #68]	; (800bc4c <USB_FlushRxFifo+0x5c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d901      	bls.n	800bc0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e018      	b.n	800bc40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	daf2      	bge.n	800bbfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2210      	movs	r2, #16
 800bc1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3301      	adds	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4a08      	ldr	r2, [pc, #32]	; (800bc4c <USB_FlushRxFifo+0x5c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d901      	bls.n	800bc32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e006      	b.n	800bc40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b10      	cmp	r3, #16
 800bc3c:	d0f0      	beq.n	800bc20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	00030d40 	.word	0x00030d40

0800bc50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	68f9      	ldr	r1, [r7, #12]
 800bc6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc70:	4313      	orrs	r3, r2
 800bc72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b087      	sub	sp, #28
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f003 0306 	and.w	r3, r3, #6
 800bc9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bca2:	2300      	movs	r3, #0
 800bca4:	75fb      	strb	r3, [r7, #23]
 800bca6:	e00a      	b.n	800bcbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d002      	beq.n	800bcb4 <USB_GetDevSpeed+0x32>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b06      	cmp	r3, #6
 800bcb2:	d102      	bne.n	800bcba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	75fb      	strb	r3, [r7, #23]
 800bcb8:	e001      	b.n	800bcbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcba:	230f      	movs	r3, #15
 800bcbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	371c      	adds	r7, #28
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	785b      	ldrb	r3, [r3, #1]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d13a      	bne.n	800bd5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	f003 030f 	and.w	r3, r3, #15
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	68f9      	ldr	r1, [r7, #12]
 800bd02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd06:	4313      	orrs	r3, r2
 800bd08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	015a      	lsls	r2, r3, #5
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4413      	add	r3, r2
 800bd12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d155      	bne.n	800bdcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	791b      	ldrb	r3, [r3, #4]
 800bd3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	059b      	lsls	r3, r3, #22
 800bd42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd44:	4313      	orrs	r3, r2
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	0151      	lsls	r1, r2, #5
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	440a      	add	r2, r1
 800bd4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	e036      	b.n	800bdcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd64:	69da      	ldr	r2, [r3, #28]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	f003 030f 	and.w	r3, r3, #15
 800bd6e:	2101      	movs	r1, #1
 800bd70:	fa01 f303 	lsl.w	r3, r1, r3
 800bd74:	041b      	lsls	r3, r3, #16
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d11a      	bne.n	800bdcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	791b      	ldrb	r3, [r3, #4]
 800bdb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdb2:	430b      	orrs	r3, r1
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	0151      	lsls	r1, r2, #5
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	440a      	add	r2, r1
 800bdbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
	...

0800bddc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	785b      	ldrb	r3, [r3, #1]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d161      	bne.n	800bebc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be0e:	d11f      	bne.n	800be50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	0151      	lsls	r1, r2, #5
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	440a      	add	r2, r1
 800be46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 030f 	and.w	r3, r3, #15
 800be60:	2101      	movs	r1, #1
 800be62:	fa01 f303 	lsl.w	r3, r1, r3
 800be66:	b29b      	uxth	r3, r3
 800be68:	43db      	mvns	r3, r3
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be70:	4013      	ands	r3, r2
 800be72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	f003 030f 	and.w	r3, r3, #15
 800be84:	2101      	movs	r1, #1
 800be86:	fa01 f303 	lsl.w	r3, r1, r3
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	43db      	mvns	r3, r3
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be94:	4013      	ands	r3, r2
 800be96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	0159      	lsls	r1, r3, #5
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	440b      	add	r3, r1
 800beae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb2:	4619      	mov	r1, r3
 800beb4:	4b35      	ldr	r3, [pc, #212]	; (800bf8c <USB_DeactivateEndpoint+0x1b0>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	e060      	b.n	800bf7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bed2:	d11f      	bne.n	800bf14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	0151      	lsls	r1, r2, #5
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	440a      	add	r2, r1
 800beea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bef2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	0151      	lsls	r1, r2, #5
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	440a      	add	r2, r1
 800bf0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 030f 	and.w	r3, r3, #15
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f303 	lsl.w	r3, r1, r3
 800bf2a:	041b      	lsls	r3, r3, #16
 800bf2c:	43db      	mvns	r3, r3
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf34:	4013      	ands	r3, r2
 800bf36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3e:	69da      	ldr	r2, [r3, #28]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 030f 	and.w	r3, r3, #15
 800bf48:	2101      	movs	r1, #1
 800bf4a:	fa01 f303 	lsl.w	r3, r1, r3
 800bf4e:	041b      	lsls	r3, r3, #16
 800bf50:	43db      	mvns	r3, r3
 800bf52:	68f9      	ldr	r1, [r7, #12]
 800bf54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf58:	4013      	ands	r3, r2
 800bf5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	0159      	lsls	r1, r3, #5
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	440b      	add	r3, r1
 800bf72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf76:	4619      	mov	r1, r3
 800bf78:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <USB_DeactivateEndpoint+0x1b4>)
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	ec337800 	.word	0xec337800
 800bf90:	eff37800 	.word	0xeff37800

0800bf94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08a      	sub	sp, #40	; 0x28
 800bf98:	af02      	add	r7, sp, #8
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	785b      	ldrb	r3, [r3, #1]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	f040 815c 	bne.w	800c26e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d132      	bne.n	800c024 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	0151      	lsls	r1, r2, #5
 800bfd0:	69fa      	ldr	r2, [r7, #28]
 800bfd2:	440a      	add	r2, r1
 800bfd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	015a      	lsls	r2, r3, #5
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	4413      	add	r3, r2
 800bfea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	69ba      	ldr	r2, [r7, #24]
 800bff2:	0151      	lsls	r1, r2, #5
 800bff4:	69fa      	ldr	r2, [r7, #28]
 800bff6:	440a      	add	r2, r1
 800bff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	015a      	lsls	r2, r3, #5
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	4413      	add	r3, r2
 800c00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	69ba      	ldr	r2, [r7, #24]
 800c012:	0151      	lsls	r1, r2, #5
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	440a      	add	r2, r1
 800c018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c01c:	0cdb      	lsrs	r3, r3, #19
 800c01e:	04db      	lsls	r3, r3, #19
 800c020:	6113      	str	r3, [r2, #16]
 800c022:	e074      	b.n	800c10e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	015a      	lsls	r2, r3, #5
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	4413      	add	r3, r2
 800c02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	69ba      	ldr	r2, [r7, #24]
 800c034:	0151      	lsls	r1, r2, #5
 800c036:	69fa      	ldr	r2, [r7, #28]
 800c038:	440a      	add	r2, r1
 800c03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c03e:	0cdb      	lsrs	r3, r3, #19
 800c040:	04db      	lsls	r3, r3, #19
 800c042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	015a      	lsls	r2, r3, #5
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	4413      	add	r3, r2
 800c04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	0151      	lsls	r1, r2, #5
 800c056:	69fa      	ldr	r2, [r7, #28]
 800c058:	440a      	add	r2, r1
 800c05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c05e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c074:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	6999      	ldr	r1, [r3, #24]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	440b      	add	r3, r1
 800c080:	1e59      	subs	r1, r3, #1
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	fbb1 f3f3 	udiv	r3, r1, r3
 800c08a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c08c:	4b9d      	ldr	r3, [pc, #628]	; (800c304 <USB_EPStartXfer+0x370>)
 800c08e:	400b      	ands	r3, r1
 800c090:	69b9      	ldr	r1, [r7, #24]
 800c092:	0148      	lsls	r0, r1, #5
 800c094:	69f9      	ldr	r1, [r7, #28]
 800c096:	4401      	add	r1, r0
 800c098:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c09c:	4313      	orrs	r3, r2
 800c09e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0b6:	69b9      	ldr	r1, [r7, #24]
 800c0b8:	0148      	lsls	r0, r1, #5
 800c0ba:	69f9      	ldr	r1, [r7, #28]
 800c0bc:	4401      	add	r1, r0
 800c0be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	791b      	ldrb	r3, [r3, #4]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d11f      	bne.n	800c10e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	015a      	lsls	r2, r3, #5
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	0151      	lsls	r1, r2, #5
 800c0e0:	69fa      	ldr	r2, [r7, #28]
 800c0e2:	440a      	add	r2, r1
 800c0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c0ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	0151      	lsls	r1, r2, #5
 800c100:	69fa      	ldr	r2, [r7, #28]
 800c102:	440a      	add	r2, r1
 800c104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c108:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c10c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c10e:	79fb      	ldrb	r3, [r7, #7]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d14b      	bne.n	800c1ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	695b      	ldr	r3, [r3, #20]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d009      	beq.n	800c130 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c128:	461a      	mov	r2, r3
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	791b      	ldrb	r3, [r3, #4]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d128      	bne.n	800c18a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c144:	2b00      	cmp	r3, #0
 800c146:	d110      	bne.n	800c16a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	69ba      	ldr	r2, [r7, #24]
 800c158:	0151      	lsls	r1, r2, #5
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	440a      	add	r2, r1
 800c15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	e00f      	b.n	800c18a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	69fa      	ldr	r2, [r7, #28]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c188:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	4413      	add	r3, r2
 800c192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	69ba      	ldr	r2, [r7, #24]
 800c19a:	0151      	lsls	r1, r2, #5
 800c19c:	69fa      	ldr	r2, [r7, #28]
 800c19e:	440a      	add	r2, r1
 800c1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	e133      	b.n	800c414 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	0151      	lsls	r1, r2, #5
 800c1be:	69fa      	ldr	r2, [r7, #28]
 800c1c0:	440a      	add	r2, r1
 800c1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	791b      	ldrb	r3, [r3, #4]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d015      	beq.n	800c200 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 811b 	beq.w	800c414 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	f003 030f 	and.w	r3, r3, #15
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f4:	69f9      	ldr	r1, [r7, #28]
 800c1f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	634b      	str	r3, [r1, #52]	; 0x34
 800c1fe:	e109      	b.n	800c414 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d110      	bne.n	800c232 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	69ba      	ldr	r2, [r7, #24]
 800c220:	0151      	lsls	r1, r2, #5
 800c222:	69fa      	ldr	r2, [r7, #28]
 800c224:	440a      	add	r2, r1
 800c226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c22a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	e00f      	b.n	800c252 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	015a      	lsls	r2, r3, #5
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	4413      	add	r3, r2
 800c23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69ba      	ldr	r2, [r7, #24]
 800c242:	0151      	lsls	r1, r2, #5
 800c244:	69fa      	ldr	r2, [r7, #28]
 800c246:	440a      	add	r2, r1
 800c248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c24c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c250:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	6919      	ldr	r1, [r3, #16]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	781a      	ldrb	r2, [r3, #0]
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	b298      	uxth	r0, r3
 800c260:	79fb      	ldrb	r3, [r7, #7]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	4603      	mov	r3, r0
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 fade 	bl	800c828 <USB_WritePacket>
 800c26c:	e0d2      	b.n	800c414 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	015a      	lsls	r2, r3, #5
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c27a:	691b      	ldr	r3, [r3, #16]
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	0151      	lsls	r1, r2, #5
 800c280:	69fa      	ldr	r2, [r7, #28]
 800c282:	440a      	add	r2, r1
 800c284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c288:	0cdb      	lsrs	r3, r3, #19
 800c28a:	04db      	lsls	r3, r3, #19
 800c28c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	015a      	lsls	r2, r3, #5
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	4413      	add	r3, r2
 800c296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	0151      	lsls	r1, r2, #5
 800c2a0:	69fa      	ldr	r2, [r7, #28]
 800c2a2:	440a      	add	r2, r1
 800c2a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d126      	bne.n	800c308 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c6:	691a      	ldr	r2, [r3, #16]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2d0:	69b9      	ldr	r1, [r7, #24]
 800c2d2:	0148      	lsls	r0, r1, #5
 800c2d4:	69f9      	ldr	r1, [r7, #28]
 800c2d6:	4401      	add	r1, r0
 800c2d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	0151      	lsls	r1, r2, #5
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	440a      	add	r2, r1
 800c2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2fe:	6113      	str	r3, [r2, #16]
 800c300:	e03a      	b.n	800c378 <USB_EPStartXfer+0x3e4>
 800c302:	bf00      	nop
 800c304:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	699a      	ldr	r2, [r3, #24]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4413      	add	r3, r2
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	8afa      	ldrh	r2, [r7, #22]
 800c324:	fb03 f202 	mul.w	r2, r3, r2
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	691a      	ldr	r2, [r3, #16]
 800c33a:	8afb      	ldrh	r3, [r7, #22]
 800c33c:	04d9      	lsls	r1, r3, #19
 800c33e:	4b38      	ldr	r3, [pc, #224]	; (800c420 <USB_EPStartXfer+0x48c>)
 800c340:	400b      	ands	r3, r1
 800c342:	69b9      	ldr	r1, [r7, #24]
 800c344:	0148      	lsls	r0, r1, #5
 800c346:	69f9      	ldr	r1, [r7, #28]
 800c348:	4401      	add	r1, r0
 800c34a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c34e:	4313      	orrs	r3, r2
 800c350:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35e:	691a      	ldr	r2, [r3, #16]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	69db      	ldr	r3, [r3, #28]
 800c364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c368:	69b9      	ldr	r1, [r7, #24]
 800c36a:	0148      	lsls	r0, r1, #5
 800c36c:	69f9      	ldr	r1, [r7, #28]
 800c36e:	4401      	add	r1, r0
 800c370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c374:	4313      	orrs	r3, r2
 800c376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d10d      	bne.n	800c39a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d009      	beq.n	800c39a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	6919      	ldr	r1, [r3, #16]
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c396:	460a      	mov	r2, r1
 800c398:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	791b      	ldrb	r3, [r3, #4]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d128      	bne.n	800c3f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d110      	bne.n	800c3d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	0151      	lsls	r1, r2, #5
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	440a      	add	r2, r1
 800c3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	e00f      	b.n	800c3f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	0151      	lsls	r1, r2, #5
 800c3e6:	69fa      	ldr	r2, [r7, #28]
 800c3e8:	440a      	add	r2, r1
 800c3ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	1ff80000 	.word	0x1ff80000

0800c424 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	4613      	mov	r3, r2
 800c430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	785b      	ldrb	r3, [r3, #1]
 800c440:	2b01      	cmp	r3, #1
 800c442:	f040 80ce 	bne.w	800c5e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d132      	bne.n	800c4b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	015a      	lsls	r2, r3, #5
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	4413      	add	r3, r2
 800c456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	0151      	lsls	r1, r2, #5
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	440a      	add	r2, r1
 800c464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c468:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c46c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	0151      	lsls	r1, r2, #5
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	440a      	add	r2, r1
 800c488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c48c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	0151      	lsls	r1, r2, #5
 800c4a4:	697a      	ldr	r2, [r7, #20]
 800c4a6:	440a      	add	r2, r1
 800c4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ac:	0cdb      	lsrs	r3, r3, #19
 800c4ae:	04db      	lsls	r3, r3, #19
 800c4b0:	6113      	str	r3, [r2, #16]
 800c4b2:	e04e      	b.n	800c552 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	0151      	lsls	r1, r2, #5
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ce:	0cdb      	lsrs	r3, r3, #19
 800c4d0:	04db      	lsls	r3, r3, #19
 800c4d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	0151      	lsls	r1, r2, #5
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	440a      	add	r2, r1
 800c4ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c4f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	699a      	ldr	r2, [r3, #24]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	429a      	cmp	r2, r3
 800c502:	d903      	bls.n	800c50c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	015a      	lsls	r2, r3, #5
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	4413      	add	r3, r2
 800c514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	693a      	ldr	r2, [r7, #16]
 800c51c:	0151      	lsls	r1, r2, #5
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	440a      	add	r2, r1
 800c522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c52a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	4413      	add	r3, r2
 800c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c538:	691a      	ldr	r2, [r3, #16]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c542:	6939      	ldr	r1, [r7, #16]
 800c544:	0148      	lsls	r0, r1, #5
 800c546:	6979      	ldr	r1, [r7, #20]
 800c548:	4401      	add	r1, r0
 800c54a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c54e:	4313      	orrs	r3, r2
 800c550:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d11e      	bne.n	800c596 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d009      	beq.n	800c574 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	015a      	lsls	r2, r3, #5
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	4413      	add	r3, r2
 800c568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56c:	461a      	mov	r2, r3
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	0151      	lsls	r1, r2, #5
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	440a      	add	r2, r1
 800c58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c58e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	e097      	b.n	800c6c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	015a      	lsls	r2, r3, #5
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	4413      	add	r3, r2
 800c59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	693a      	ldr	r2, [r7, #16]
 800c5a6:	0151      	lsls	r1, r2, #5
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	699b      	ldr	r3, [r3, #24]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 8083 	beq.w	800c6c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	f003 030f 	and.w	r3, r3, #15
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d6:	6979      	ldr	r1, [r7, #20]
 800c5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	634b      	str	r3, [r1, #52]	; 0x34
 800c5e0:	e071      	b.n	800c6c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	0151      	lsls	r1, r2, #5
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	440a      	add	r2, r1
 800c5f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5fc:	0cdb      	lsrs	r3, r3, #19
 800c5fe:	04db      	lsls	r3, r3, #19
 800c600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	0151      	lsls	r1, r2, #5
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	440a      	add	r2, r1
 800c618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c61c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c624:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	68da      	ldr	r2, [r3, #12]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68da      	ldr	r2, [r3, #12]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	4413      	add	r3, r2
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	693a      	ldr	r2, [r7, #16]
 800c64e:	0151      	lsls	r1, r2, #5
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	440a      	add	r2, r1
 800c654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c65c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	015a      	lsls	r2, r3, #5
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	4413      	add	r3, r2
 800c666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c66a:	691a      	ldr	r2, [r3, #16]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	69db      	ldr	r3, [r3, #28]
 800c670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c674:	6939      	ldr	r1, [r7, #16]
 800c676:	0148      	lsls	r0, r1, #5
 800c678:	6979      	ldr	r1, [r7, #20]
 800c67a:	4401      	add	r1, r0
 800c67c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c680:	4313      	orrs	r3, r2
 800c682:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c684:	79fb      	ldrb	r3, [r7, #7]
 800c686:	2b01      	cmp	r3, #1
 800c688:	d10d      	bne.n	800c6a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	6919      	ldr	r1, [r3, #16]
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	015a      	lsls	r2, r3, #5
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6a2:	460a      	mov	r2, r1
 800c6a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	015a      	lsls	r2, r3, #5
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	0151      	lsls	r1, r2, #5
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	440a      	add	r2, r1
 800c6bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	371c      	adds	r7, #28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	785b      	ldrb	r3, [r3, #1]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d14a      	bne.n	800c788 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c70a:	f040 8086 	bne.w	800c81a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	015a      	lsls	r2, r3, #5
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	4413      	add	r3, r2
 800c718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	7812      	ldrb	r2, [r2, #0]
 800c722:	0151      	lsls	r1, r2, #5
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	440a      	add	r2, r1
 800c728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c730:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	7812      	ldrb	r2, [r2, #0]
 800c746:	0151      	lsls	r1, r2, #5
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	440a      	add	r2, r1
 800c74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c754:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3301      	adds	r3, #1
 800c75a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c762:	4293      	cmp	r3, r2
 800c764:	d902      	bls.n	800c76c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	75fb      	strb	r3, [r7, #23]
          break;
 800c76a:	e056      	b.n	800c81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	4413      	add	r3, r2
 800c776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c784:	d0e7      	beq.n	800c756 <USB_EPStopXfer+0x82>
 800c786:	e048      	b.n	800c81a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	015a      	lsls	r2, r3, #5
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	4413      	add	r3, r2
 800c792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7a0:	d13b      	bne.n	800c81a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	7812      	ldrb	r2, [r2, #0]
 800c7b6:	0151      	lsls	r1, r2, #5
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	440a      	add	r2, r1
 800c7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	015a      	lsls	r2, r3, #5
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	7812      	ldrb	r2, [r2, #0]
 800c7da:	0151      	lsls	r1, r2, #5
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	440a      	add	r2, r1
 800c7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d902      	bls.n	800c800 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800c7fe:	e00c      	b.n	800c81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c818:	d0e7      	beq.n	800c7ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c828:	b480      	push	{r7}
 800c82a:	b089      	sub	sp, #36	; 0x24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	60b9      	str	r1, [r7, #8]
 800c832:	4611      	mov	r1, r2
 800c834:	461a      	mov	r2, r3
 800c836:	460b      	mov	r3, r1
 800c838:	71fb      	strb	r3, [r7, #7]
 800c83a:	4613      	mov	r3, r2
 800c83c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d123      	bne.n	800c896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c84e:	88bb      	ldrh	r3, [r7, #4]
 800c850:	3303      	adds	r3, #3
 800c852:	089b      	lsrs	r3, r3, #2
 800c854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c856:	2300      	movs	r3, #0
 800c858:	61bb      	str	r3, [r7, #24]
 800c85a:	e018      	b.n	800c88e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	031a      	lsls	r2, r3, #12
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	4413      	add	r3, r2
 800c864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c868:	461a      	mov	r2, r3
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	3301      	adds	r3, #1
 800c874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	3301      	adds	r3, #1
 800c87a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	3301      	adds	r3, #1
 800c880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	3301      	adds	r3, #1
 800c886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	3301      	adds	r3, #1
 800c88c:	61bb      	str	r3, [r7, #24]
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	429a      	cmp	r2, r3
 800c894:	d3e2      	bcc.n	800c85c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3724      	adds	r7, #36	; 0x24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b08b      	sub	sp, #44	; 0x2c
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c8ba:	88fb      	ldrh	r3, [r7, #6]
 800c8bc:	089b      	lsrs	r3, r3, #2
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c8c2:	88fb      	ldrh	r3, [r7, #6]
 800c8c4:	f003 0303 	and.w	r3, r3, #3
 800c8c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	623b      	str	r3, [r7, #32]
 800c8ce:	e014      	b.n	800c8fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	601a      	str	r2, [r3, #0]
    pDest++;
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	3301      	adds	r3, #1
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	623b      	str	r3, [r7, #32]
 800c8fa:	6a3a      	ldr	r2, [r7, #32]
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d3e6      	bcc.n	800c8d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c902:	8bfb      	ldrh	r3, [r7, #30]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d01e      	beq.n	800c946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c90c:	69bb      	ldr	r3, [r7, #24]
 800c90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c912:	461a      	mov	r2, r3
 800c914:	f107 0310 	add.w	r3, r7, #16
 800c918:	6812      	ldr	r2, [r2, #0]
 800c91a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	b2db      	uxtb	r3, r3
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	fa22 f303 	lsr.w	r3, r2, r3
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	701a      	strb	r2, [r3, #0]
      i++;
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	3301      	adds	r3, #1
 800c932:	623b      	str	r3, [r7, #32]
      pDest++;
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	3301      	adds	r3, #1
 800c938:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c93a:	8bfb      	ldrh	r3, [r7, #30]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c940:	8bfb      	ldrh	r3, [r7, #30]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1ea      	bne.n	800c91c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c948:	4618      	mov	r0, r3
 800c94a:	372c      	adds	r7, #44	; 0x2c
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	785b      	ldrb	r3, [r3, #1]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d12c      	bne.n	800c9ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	015a      	lsls	r2, r3, #5
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4413      	add	r3, r2
 800c978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	db12      	blt.n	800c9a8 <USB_EPSetStall+0x54>
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00f      	beq.n	800c9a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	015a      	lsls	r2, r3, #5
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4413      	add	r3, r2
 800c990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	0151      	lsls	r1, r2, #5
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	440a      	add	r2, r1
 800c99e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c9a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	0151      	lsls	r1, r2, #5
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	440a      	add	r2, r1
 800c9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e02b      	b.n	800ca22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	015a      	lsls	r2, r3, #5
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	db12      	blt.n	800ca02 <USB_EPSetStall+0xae>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00f      	beq.n	800ca02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	0151      	lsls	r1, r2, #5
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	440a      	add	r2, r1
 800c9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	015a      	lsls	r2, r3, #5
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	0151      	lsls	r1, r2, #5
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	440a      	add	r2, r1
 800ca18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	785b      	ldrb	r3, [r3, #1]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d128      	bne.n	800ca9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	0151      	lsls	r1, r2, #5
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	440a      	add	r2, r1
 800ca62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	791b      	ldrb	r3, [r3, #4]
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d003      	beq.n	800ca7c <USB_EPClearStall+0x4c>
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	791b      	ldrb	r3, [r3, #4]
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d138      	bne.n	800caee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	e027      	b.n	800caee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	015a      	lsls	r2, r3, #5
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4413      	add	r3, r2
 800caa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	0151      	lsls	r1, r2, #5
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	440a      	add	r2, r1
 800cab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cabc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	791b      	ldrb	r3, [r3, #4]
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d003      	beq.n	800cace <USB_EPClearStall+0x9e>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	791b      	ldrb	r3, [r3, #4]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d10f      	bne.n	800caee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	015a      	lsls	r2, r3, #5
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	4413      	add	r3, r2
 800cad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	0151      	lsls	r1, r2, #5
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	440a      	add	r2, r1
 800cae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	460b      	mov	r3, r1
 800cb06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cb1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	78fb      	ldrb	r3, [r7, #3]
 800cb2a:	011b      	lsls	r3, r3, #4
 800cb2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cb30:	68f9      	ldr	r1, [r7, #12]
 800cb32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb36:	4313      	orrs	r3, r2
 800cb38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3714      	adds	r7, #20
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cb62:	f023 0303 	bic.w	r3, r3, #3
 800cb66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb76:	f023 0302 	bic.w	r3, r3, #2
 800cb7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cba4:	f023 0303 	bic.w	r3, r3, #3
 800cba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbb8:	f043 0302 	orr.w	r3, r3, #2
 800cbbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b085      	sub	sp, #20
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	4013      	ands	r3, r2
 800cc14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	0c1b      	lsrs	r3, r3, #16
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr

0800cc26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc26:	b480      	push	{r7}
 800cc28:	b085      	sub	sp, #20
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc42:	69db      	ldr	r3, [r3, #28]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	4013      	ands	r3, r2
 800cc48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	b29b      	uxth	r3, r3
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b085      	sub	sp, #20
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cc6a:	78fb      	ldrb	r3, [r7, #3]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	4013      	ands	r3, r2
 800cc86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc88:	68bb      	ldr	r3, [r7, #8]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b087      	sub	sp, #28
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ccba:	78fb      	ldrb	r3, [r7, #3]
 800ccbc:	f003 030f 	and.w	r3, r3, #15
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc6:	01db      	lsls	r3, r3, #7
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	693a      	ldr	r2, [r7, #16]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ccd0:	78fb      	ldrb	r3, [r7, #3]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	4013      	ands	r3, r2
 800cce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cce4:	68bb      	ldr	r3, [r7, #8]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b083      	sub	sp, #12
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	695b      	ldr	r3, [r3, #20]
 800ccfe:	f003 0301 	and.w	r3, r3, #1
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cd0e:	b480      	push	{r7}
 800cd10:	b085      	sub	sp, #20
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cd2c:	f023 0307 	bic.w	r3, r3, #7
 800cd30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	333c      	adds	r3, #60	; 0x3c
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	4a26      	ldr	r2, [pc, #152]	; (800ce0c <USB_EP0_OutStart+0xb8>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d90a      	bls.n	800cd8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd88:	d101      	bne.n	800cd8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	e037      	b.n	800cdfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd94:	461a      	mov	r2, r3
 800cd96:	2300      	movs	r3, #0
 800cd98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cda8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdbc:	f043 0318 	orr.w	r3, r3, #24
 800cdc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cdd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d10f      	bne.n	800cdfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde2:	461a      	mov	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cdfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	371c      	adds	r7, #28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	4f54300a 	.word	0x4f54300a

0800ce10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	4a13      	ldr	r2, [pc, #76]	; (800ce74 <USB_CoreReset+0x64>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d901      	bls.n	800ce2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e01b      	b.n	800ce66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	daf2      	bge.n	800ce1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f043 0201 	orr.w	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <USB_CoreReset+0x64>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d901      	bls.n	800ce58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce54:	2303      	movs	r3, #3
 800ce56:	e006      	b.n	800ce66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d0f0      	beq.n	800ce46 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	00030d40 	.word	0x00030d40

0800ce78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	460b      	mov	r3, r1
 800ce82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ce88:	f004 fbda 	bl	8011640 <USBD_static_malloc>
 800ce8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d109      	bne.n	800cea8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	32b0      	adds	r2, #176	; 0xb0
 800ce9e:	2100      	movs	r1, #0
 800cea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cea4:	2302      	movs	r3, #2
 800cea6:	e0d4      	b.n	800d052 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cea8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ceac:	2100      	movs	r1, #0
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f006 fa0a 	bl	80132c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	32b0      	adds	r2, #176	; 0xb0
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	32b0      	adds	r2, #176	; 0xb0
 800cece:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7c1b      	ldrb	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d138      	bne.n	800cf52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cee0:	4b5e      	ldr	r3, [pc, #376]	; (800d05c <USBD_CDC_Init+0x1e4>)
 800cee2:	7819      	ldrb	r1, [r3, #0]
 800cee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cee8:	2202      	movs	r2, #2
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f004 fa85 	bl	80113fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cef0:	4b5a      	ldr	r3, [pc, #360]	; (800d05c <USBD_CDC_Init+0x1e4>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f003 020f 	and.w	r2, r3, #15
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	440b      	add	r3, r1
 800cf04:	3324      	adds	r3, #36	; 0x24
 800cf06:	2201      	movs	r2, #1
 800cf08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf0a:	4b55      	ldr	r3, [pc, #340]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800cf0c:	7819      	ldrb	r1, [r3, #0]
 800cf0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf12:	2202      	movs	r2, #2
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f004 fa70 	bl	80113fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf1a:	4b51      	ldr	r3, [pc, #324]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	f003 020f 	and.w	r2, r3, #15
 800cf22:	6879      	ldr	r1, [r7, #4]
 800cf24:	4613      	mov	r3, r2
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	440b      	add	r3, r1
 800cf2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf32:	2201      	movs	r2, #1
 800cf34:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf36:	4b4b      	ldr	r3, [pc, #300]	; (800d064 <USBD_CDC_Init+0x1ec>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	f003 020f 	and.w	r2, r3, #15
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	3326      	adds	r3, #38	; 0x26
 800cf4c:	2210      	movs	r2, #16
 800cf4e:	801a      	strh	r2, [r3, #0]
 800cf50:	e035      	b.n	800cfbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf52:	4b42      	ldr	r3, [pc, #264]	; (800d05c <USBD_CDC_Init+0x1e4>)
 800cf54:	7819      	ldrb	r1, [r3, #0]
 800cf56:	2340      	movs	r3, #64	; 0x40
 800cf58:	2202      	movs	r2, #2
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f004 fa4d 	bl	80113fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf60:	4b3e      	ldr	r3, [pc, #248]	; (800d05c <USBD_CDC_Init+0x1e4>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	f003 020f 	and.w	r2, r3, #15
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	440b      	add	r3, r1
 800cf74:	3324      	adds	r3, #36	; 0x24
 800cf76:	2201      	movs	r2, #1
 800cf78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf7a:	4b39      	ldr	r3, [pc, #228]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800cf7c:	7819      	ldrb	r1, [r3, #0]
 800cf7e:	2340      	movs	r3, #64	; 0x40
 800cf80:	2202      	movs	r2, #2
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f004 fa39 	bl	80113fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf88:	4b35      	ldr	r3, [pc, #212]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	f003 020f 	and.w	r2, r3, #15
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	440b      	add	r3, r1
 800cf9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfa4:	4b2f      	ldr	r3, [pc, #188]	; (800d064 <USBD_CDC_Init+0x1ec>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 020f 	and.w	r2, r3, #15
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3326      	adds	r3, #38	; 0x26
 800cfba:	2210      	movs	r2, #16
 800cfbc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfbe:	4b29      	ldr	r3, [pc, #164]	; (800d064 <USBD_CDC_Init+0x1ec>)
 800cfc0:	7819      	ldrb	r1, [r3, #0]
 800cfc2:	2308      	movs	r3, #8
 800cfc4:	2203      	movs	r2, #3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f004 fa17 	bl	80113fa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cfcc:	4b25      	ldr	r3, [pc, #148]	; (800d064 <USBD_CDC_Init+0x1ec>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 020f 	and.w	r2, r3, #15
 800cfd4:	6879      	ldr	r1, [r7, #4]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	440b      	add	r3, r1
 800cfe0:	3324      	adds	r3, #36	; 0x24
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	33b0      	adds	r3, #176	; 0xb0
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	4413      	add	r3, r2
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d01c:	2302      	movs	r3, #2
 800d01e:	e018      	b.n	800d052 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	7c1b      	ldrb	r3, [r3, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10a      	bne.n	800d03e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d028:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800d02a:	7819      	ldrb	r1, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f004 face 	bl	80115d8 <USBD_LL_PrepareReceive>
 800d03c:	e008      	b.n	800d050 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d03e:	4b08      	ldr	r3, [pc, #32]	; (800d060 <USBD_CDC_Init+0x1e8>)
 800d040:	7819      	ldrb	r1, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d048:	2340      	movs	r3, #64	; 0x40
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f004 fac4 	bl	80115d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20000093 	.word	0x20000093
 800d060:	20000094 	.word	0x20000094
 800d064:	20000095 	.word	0x20000095

0800d068 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d074:	4b3a      	ldr	r3, [pc, #232]	; (800d160 <USBD_CDC_DeInit+0xf8>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f004 f9e3 	bl	8011446 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d080:	4b37      	ldr	r3, [pc, #220]	; (800d160 <USBD_CDC_DeInit+0xf8>)
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	f003 020f 	and.w	r2, r3, #15
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	4613      	mov	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	4413      	add	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	440b      	add	r3, r1
 800d094:	3324      	adds	r3, #36	; 0x24
 800d096:	2200      	movs	r2, #0
 800d098:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d09a:	4b32      	ldr	r3, [pc, #200]	; (800d164 <USBD_CDC_DeInit+0xfc>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f004 f9d0 	bl	8011446 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d0a6:	4b2f      	ldr	r3, [pc, #188]	; (800d164 <USBD_CDC_DeInit+0xfc>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 020f 	and.w	r2, r3, #15
 800d0ae:	6879      	ldr	r1, [r7, #4]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	440b      	add	r3, r1
 800d0ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0be:	2200      	movs	r2, #0
 800d0c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d0c2:	4b29      	ldr	r3, [pc, #164]	; (800d168 <USBD_CDC_DeInit+0x100>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f004 f9bc 	bl	8011446 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d0ce:	4b26      	ldr	r3, [pc, #152]	; (800d168 <USBD_CDC_DeInit+0x100>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	f003 020f 	and.w	r2, r3, #15
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	440b      	add	r3, r1
 800d0e2:	3324      	adds	r3, #36	; 0x24
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d0e8:	4b1f      	ldr	r3, [pc, #124]	; (800d168 <USBD_CDC_DeInit+0x100>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f003 020f 	and.w	r2, r3, #15
 800d0f0:	6879      	ldr	r1, [r7, #4]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	440b      	add	r3, r1
 800d0fc:	3326      	adds	r3, #38	; 0x26
 800d0fe:	2200      	movs	r2, #0
 800d100:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	32b0      	adds	r2, #176	; 0xb0
 800d10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d01f      	beq.n	800d154 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	33b0      	adds	r3, #176	; 0xb0
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	32b0      	adds	r2, #176	; 0xb0
 800d132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d136:	4618      	mov	r0, r3
 800d138:	f004 fa90 	bl	801165c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	32b0      	adds	r2, #176	; 0xb0
 800d146:	2100      	movs	r1, #0
 800d148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20000093 	.word	0x20000093
 800d164:	20000094 	.word	0x20000094
 800d168:	20000095 	.word	0x20000095

0800d16c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	32b0      	adds	r2, #176	; 0xb0
 800d180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d184:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d18a:	2300      	movs	r3, #0
 800d18c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d198:	2303      	movs	r3, #3
 800d19a:	e0bf      	b.n	800d31c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d050      	beq.n	800d24a <USBD_CDC_Setup+0xde>
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	f040 80af 	bne.w	800d30c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	88db      	ldrh	r3, [r3, #6]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d03a      	beq.n	800d22c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	b25b      	sxtb	r3, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	da1b      	bge.n	800d1f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	33b0      	adds	r3, #176	; 0xb0
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d1d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	88d2      	ldrh	r2, [r2, #6]
 800d1dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	88db      	ldrh	r3, [r3, #6]
 800d1e2:	2b07      	cmp	r3, #7
 800d1e4:	bf28      	it	cs
 800d1e6:	2307      	movcs	r3, #7
 800d1e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	89fa      	ldrh	r2, [r7, #14]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f001 fd89 	bl	800ed08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d1f6:	e090      	b.n	800d31a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	785a      	ldrb	r2, [r3, #1]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	88db      	ldrh	r3, [r3, #6]
 800d206:	2b3f      	cmp	r3, #63	; 0x3f
 800d208:	d803      	bhi.n	800d212 <USBD_CDC_Setup+0xa6>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	88db      	ldrh	r3, [r3, #6]
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	e000      	b.n	800d214 <USBD_CDC_Setup+0xa8>
 800d212:	2240      	movs	r2, #64	; 0x40
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d21a:	6939      	ldr	r1, [r7, #16]
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d222:	461a      	mov	r2, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f001 fd9b 	bl	800ed60 <USBD_CtlPrepareRx>
      break;
 800d22a:	e076      	b.n	800d31a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	33b0      	adds	r3, #176	; 0xb0
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	7850      	ldrb	r0, [r2, #1]
 800d242:	2200      	movs	r2, #0
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	4798      	blx	r3
      break;
 800d248:	e067      	b.n	800d31a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	785b      	ldrb	r3, [r3, #1]
 800d24e:	2b0b      	cmp	r3, #11
 800d250:	d851      	bhi.n	800d2f6 <USBD_CDC_Setup+0x18a>
 800d252:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <USBD_CDC_Setup+0xec>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d289 	.word	0x0800d289
 800d25c:	0800d305 	.word	0x0800d305
 800d260:	0800d2f7 	.word	0x0800d2f7
 800d264:	0800d2f7 	.word	0x0800d2f7
 800d268:	0800d2f7 	.word	0x0800d2f7
 800d26c:	0800d2f7 	.word	0x0800d2f7
 800d270:	0800d2f7 	.word	0x0800d2f7
 800d274:	0800d2f7 	.word	0x0800d2f7
 800d278:	0800d2f7 	.word	0x0800d2f7
 800d27c:	0800d2f7 	.word	0x0800d2f7
 800d280:	0800d2b3 	.word	0x0800d2b3
 800d284:	0800d2dd 	.word	0x0800d2dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b03      	cmp	r3, #3
 800d292:	d107      	bne.n	800d2a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d294:	f107 030a 	add.w	r3, r7, #10
 800d298:	2202      	movs	r2, #2
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 fd33 	bl	800ed08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2a2:	e032      	b.n	800d30a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 fcbd 	bl	800ec26 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	75fb      	strb	r3, [r7, #23]
          break;
 800d2b0:	e02b      	b.n	800d30a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d107      	bne.n	800d2ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2be:	f107 030d 	add.w	r3, r7, #13
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 fd1e 	bl	800ed08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2cc:	e01d      	b.n	800d30a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 fca8 	bl	800ec26 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d2da:	e016      	b.n	800d30a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d00f      	beq.n	800d308 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 fc9b 	bl	800ec26 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2f4:	e008      	b.n	800d308 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 fc94 	bl	800ec26 <USBD_CtlError>
          ret = USBD_FAIL;
 800d2fe:	2303      	movs	r3, #3
 800d300:	75fb      	strb	r3, [r7, #23]
          break;
 800d302:	e002      	b.n	800d30a <USBD_CDC_Setup+0x19e>
          break;
 800d304:	bf00      	nop
 800d306:	e008      	b.n	800d31a <USBD_CDC_Setup+0x1ae>
          break;
 800d308:	bf00      	nop
      }
      break;
 800d30a:	e006      	b.n	800d31a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f001 fc89 	bl	800ec26 <USBD_CtlError>
      ret = USBD_FAIL;
 800d314:	2303      	movs	r3, #3
 800d316:	75fb      	strb	r3, [r7, #23]
      break;
 800d318:	bf00      	nop
  }

  return (uint8_t)ret;
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	32b0      	adds	r2, #176	; 0xb0
 800d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e065      	b.n	800d41a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	32b0      	adds	r2, #176	; 0xb0
 800d358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	f003 020f 	and.w	r2, r3, #15
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	440b      	add	r3, r1
 800d370:	3318      	adds	r3, #24
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02f      	beq.n	800d3d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	f003 020f 	and.w	r2, r3, #15
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	440b      	add	r3, r1
 800d38a:	3318      	adds	r3, #24
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	78fb      	ldrb	r3, [r7, #3]
 800d390:	f003 010f 	and.w	r1, r3, #15
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	460b      	mov	r3, r1
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	440b      	add	r3, r1
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4403      	add	r3, r0
 800d3a0:	3348      	adds	r3, #72	; 0x48
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3a8:	fb01 f303 	mul.w	r3, r1, r3
 800d3ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d112      	bne.n	800d3d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	f003 020f 	and.w	r2, r3, #15
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	4413      	add	r3, r2
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3318      	adds	r3, #24
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3ca:	78f9      	ldrb	r1, [r7, #3]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f004 f8e0 	bl	8011596 <USBD_LL_Transmit>
 800d3d6:	e01f      	b.n	800d418 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	33b0      	adds	r3, #176	; 0xb0
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d010      	beq.n	800d418 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	33b0      	adds	r3, #176	; 0xb0
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d414:	78fa      	ldrb	r2, [r7, #3]
 800d416:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	460b      	mov	r3, r1
 800d42c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	32b0      	adds	r2, #176	; 0xb0
 800d438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	32b0      	adds	r2, #176	; 0xb0
 800d448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d450:	2303      	movs	r3, #3
 800d452:	e01a      	b.n	800d48a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d454:	78fb      	ldrb	r3, [r7, #3]
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f004 f8de 	bl	801161a <USBD_LL_GetRxDataSize>
 800d45e:	4602      	mov	r2, r0
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	33b0      	adds	r3, #176	; 0xb0
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d484:	4611      	mov	r1, r2
 800d486:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	32b0      	adds	r2, #176	; 0xb0
 800d4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e025      	b.n	800d500 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	33b0      	adds	r3, #176	; 0xb0
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d01a      	beq.n	800d4fe <USBD_CDC_EP0_RxReady+0x6c>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d4ce:	2bff      	cmp	r3, #255	; 0xff
 800d4d0:	d015      	beq.n	800d4fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	33b0      	adds	r3, #176	; 0xb0
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d4ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d4f2:	b292      	uxth	r2, r2
 800d4f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	22ff      	movs	r2, #255	; 0xff
 800d4fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d510:	2182      	movs	r1, #130	; 0x82
 800d512:	4818      	ldr	r0, [pc, #96]	; (800d574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d514:	f000 fd4f 	bl	800dfb6 <USBD_GetEpDesc>
 800d518:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d51a:	2101      	movs	r1, #1
 800d51c:	4815      	ldr	r0, [pc, #84]	; (800d574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d51e:	f000 fd4a 	bl	800dfb6 <USBD_GetEpDesc>
 800d522:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d524:	2181      	movs	r1, #129	; 0x81
 800d526:	4813      	ldr	r0, [pc, #76]	; (800d574 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d528:	f000 fd45 	bl	800dfb6 <USBD_GetEpDesc>
 800d52c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2210      	movs	r2, #16
 800d538:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d006      	beq.n	800d54e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2200      	movs	r2, #0
 800d544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d548:	711a      	strb	r2, [r3, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d006      	beq.n	800d562 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d55c:	711a      	strb	r2, [r3, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2243      	movs	r2, #67	; 0x43
 800d566:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d568:	4b02      	ldr	r3, [pc, #8]	; (800d574 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3718      	adds	r7, #24
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	20000050 	.word	0x20000050

0800d578 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d580:	2182      	movs	r1, #130	; 0x82
 800d582:	4818      	ldr	r0, [pc, #96]	; (800d5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d584:	f000 fd17 	bl	800dfb6 <USBD_GetEpDesc>
 800d588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d58a:	2101      	movs	r1, #1
 800d58c:	4815      	ldr	r0, [pc, #84]	; (800d5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d58e:	f000 fd12 	bl	800dfb6 <USBD_GetEpDesc>
 800d592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d594:	2181      	movs	r1, #129	; 0x81
 800d596:	4813      	ldr	r0, [pc, #76]	; (800d5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d598:	f000 fd0d 	bl	800dfb6 <USBD_GetEpDesc>
 800d59c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2210      	movs	r2, #16
 800d5a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d006      	beq.n	800d5be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	711a      	strb	r2, [r3, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f042 0202 	orr.w	r2, r2, #2
 800d5bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d006      	beq.n	800d5d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	711a      	strb	r2, [r3, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f042 0202 	orr.w	r2, r2, #2
 800d5d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2243      	movs	r2, #67	; 0x43
 800d5d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d5d8:	4b02      	ldr	r3, [pc, #8]	; (800d5e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20000050 	.word	0x20000050

0800d5e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5f0:	2182      	movs	r1, #130	; 0x82
 800d5f2:	4818      	ldr	r0, [pc, #96]	; (800d654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5f4:	f000 fcdf 	bl	800dfb6 <USBD_GetEpDesc>
 800d5f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	4815      	ldr	r0, [pc, #84]	; (800d654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d5fe:	f000 fcda 	bl	800dfb6 <USBD_GetEpDesc>
 800d602:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d604:	2181      	movs	r1, #129	; 0x81
 800d606:	4813      	ldr	r0, [pc, #76]	; (800d654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d608:	f000 fcd5 	bl	800dfb6 <USBD_GetEpDesc>
 800d60c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2210      	movs	r2, #16
 800d618:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d006      	beq.n	800d62e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	2200      	movs	r2, #0
 800d624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d628:	711a      	strb	r2, [r3, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d006      	beq.n	800d642 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d63c:	711a      	strb	r2, [r3, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2243      	movs	r2, #67	; 0x43
 800d646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3718      	adds	r7, #24
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	20000050 	.word	0x20000050

0800d658 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	220a      	movs	r2, #10
 800d664:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d666:	4b03      	ldr	r3, [pc, #12]	; (800d674 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d668:	4618      	mov	r0, r3
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	2000000c 	.word	0x2000000c

0800d678 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d101      	bne.n	800d68c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d688:	2303      	movs	r3, #3
 800d68a:	e009      	b.n	800d6a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	33b0      	adds	r3, #176	; 0xb0
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	32b0      	adds	r2, #176	; 0xb0
 800d6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d101      	bne.n	800d6d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e008      	b.n	800d6e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	371c      	adds	r7, #28
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	32b0      	adds	r2, #176	; 0xb0
 800d704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d708:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d710:	2303      	movs	r3, #3
 800d712:	e004      	b.n	800d71e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	32b0      	adds	r2, #176	; 0xb0
 800d73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d742:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d744:	2301      	movs	r3, #1
 800d746:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	32b0      	adds	r2, #176	; 0xb0
 800d752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d101      	bne.n	800d75e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d75a:	2303      	movs	r3, #3
 800d75c:	e025      	b.n	800d7aa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d764:	2b00      	cmp	r3, #0
 800d766:	d11f      	bne.n	800d7a8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d770:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <USBD_CDC_TransmitPacket+0x88>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	f003 020f 	and.w	r2, r3, #15
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	4613      	mov	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4403      	add	r3, r0
 800d78a:	3318      	adds	r3, #24
 800d78c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <USBD_CDC_TransmitPacket+0x88>)
 800d790:	7819      	ldrb	r1, [r3, #0]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f003 fef9 	bl	8011596 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20000093 	.word	0x20000093

0800d7b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	32b0      	adds	r2, #176	; 0xb0
 800d7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	32b0      	adds	r2, #176	; 0xb0
 800d7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e018      	b.n	800d818 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7c1b      	ldrb	r3, [r3, #16]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10a      	bne.n	800d804 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d7ee:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <USBD_CDC_ReceivePacket+0x68>)
 800d7f0:	7819      	ldrb	r1, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d7f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f003 feeb 	bl	80115d8 <USBD_LL_PrepareReceive>
 800d802:	e008      	b.n	800d816 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d804:	4b06      	ldr	r3, [pc, #24]	; (800d820 <USBD_CDC_ReceivePacket+0x68>)
 800d806:	7819      	ldrb	r1, [r3, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d80e:	2340      	movs	r3, #64	; 0x40
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f003 fee1 	bl	80115d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20000094 	.word	0x20000094

0800d824 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	4613      	mov	r3, r2
 800d830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d838:	2303      	movs	r3, #3
 800d83a:	e01f      	b.n	800d87c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2200      	movs	r2, #0
 800d850:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	79fa      	ldrb	r2, [r7, #7]
 800d86e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f003 fd5b 	bl	801132c <USBD_LL_Init>
 800d876:	4603      	mov	r3, r0
 800d878:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d88e:	2300      	movs	r3, #0
 800d890:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d101      	bne.n	800d89c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d898:	2303      	movs	r3, #3
 800d89a:	e025      	b.n	800d8e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	32ae      	adds	r2, #174	; 0xae
 800d8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00f      	beq.n	800d8d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	32ae      	adds	r2, #174	; 0xae
 800d8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	f107 020e 	add.w	r2, r7, #14
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4798      	blx	r3
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f003 fd63 	bl	80113c4 <USBD_LL_Start>
 800d8fe:	4603      	mov	r3, r0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d910:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d92a:	2300      	movs	r3, #0
 800d92c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d934:	2b00      	cmp	r3, #0
 800d936:	d009      	beq.n	800d94c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	78fa      	ldrb	r2, [r7, #3]
 800d942:	4611      	mov	r1, r2
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	4798      	blx	r3
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	78fa      	ldrb	r2, [r7, #3]
 800d970:	4611      	mov	r1, r2
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	4798      	blx	r3
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d97c:	2303      	movs	r3, #3
 800d97e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d980:	7bfb      	ldrb	r3, [r7, #15]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d99a:	6839      	ldr	r1, [r7, #0]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f001 f908 	bl	800ebb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d9be:	f003 031f 	and.w	r3, r3, #31
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d01a      	beq.n	800d9fc <USBD_LL_SetupStage+0x72>
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d822      	bhi.n	800da10 <USBD_LL_SetupStage+0x86>
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <USBD_LL_SetupStage+0x4a>
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d00a      	beq.n	800d9e8 <USBD_LL_SetupStage+0x5e>
 800d9d2:	e01d      	b.n	800da10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fb5f 	bl	800e0a0 <USBD_StdDevReq>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d9e6:	e020      	b.n	800da2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 fbc7 	bl	800e184 <USBD_StdItfReq>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d9fa:	e016      	b.n	800da2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fc29 	bl	800e25c <USBD_StdEPReq>
 800da0a:	4603      	mov	r3, r0
 800da0c:	73fb      	strb	r3, [r7, #15]
      break;
 800da0e:	e00c      	b.n	800da2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f003 fd30 	bl	8011484 <USBD_LL_StallEP>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]
      break;
 800da28:	bf00      	nop
  }

  return ret;
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b086      	sub	sp, #24
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	460b      	mov	r3, r1
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800da46:	7afb      	ldrb	r3, [r7, #11]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d16e      	bne.n	800db2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800da52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	f040 8098 	bne.w	800db90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	689a      	ldr	r2, [r3, #8]
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d913      	bls.n	800da94 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	1ad2      	subs	r2, r2, r3
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	68da      	ldr	r2, [r3, #12]
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	4293      	cmp	r3, r2
 800da84:	bf28      	it	cs
 800da86:	4613      	movcs	r3, r2
 800da88:	461a      	mov	r2, r3
 800da8a:	6879      	ldr	r1, [r7, #4]
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f001 f984 	bl	800ed9a <USBD_CtlContinueRx>
 800da92:	e07d      	b.n	800db90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da9a:	f003 031f 	and.w	r3, r3, #31
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d014      	beq.n	800dacc <USBD_LL_DataOutStage+0x98>
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d81d      	bhi.n	800dae2 <USBD_LL_DataOutStage+0xae>
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <USBD_LL_DataOutStage+0x7c>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d003      	beq.n	800dab6 <USBD_LL_DataOutStage+0x82>
 800daae:	e018      	b.n	800dae2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dab0:	2300      	movs	r3, #0
 800dab2:	75bb      	strb	r3, [r7, #22]
            break;
 800dab4:	e018      	b.n	800dae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	4619      	mov	r1, r3
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 fa5e 	bl	800df82 <USBD_CoreFindIF>
 800dac6:	4603      	mov	r3, r0
 800dac8:	75bb      	strb	r3, [r7, #22]
            break;
 800daca:	e00d      	b.n	800dae8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	4619      	mov	r1, r3
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 fa60 	bl	800df9c <USBD_CoreFindEP>
 800dadc:	4603      	mov	r3, r0
 800dade:	75bb      	strb	r3, [r7, #22]
            break;
 800dae0:	e002      	b.n	800dae8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	75bb      	strb	r3, [r7, #22]
            break;
 800dae6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dae8:	7dbb      	ldrb	r3, [r7, #22]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d119      	bne.n	800db22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d113      	bne.n	800db22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dafa:	7dba      	ldrb	r2, [r7, #22]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	32ae      	adds	r2, #174	; 0xae
 800db00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db04:	691b      	ldr	r3, [r3, #16]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00b      	beq.n	800db22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db0a:	7dba      	ldrb	r2, [r7, #22]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db12:	7dba      	ldrb	r2, [r7, #22]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	32ae      	adds	r2, #174	; 0xae
 800db18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f001 f94a 	bl	800edbc <USBD_CtlSendStatus>
 800db28:	e032      	b.n	800db90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db30:	b2db      	uxtb	r3, r3
 800db32:	4619      	mov	r1, r3
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 fa31 	bl	800df9c <USBD_CoreFindEP>
 800db3a:	4603      	mov	r3, r0
 800db3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db3e:	7dbb      	ldrb	r3, [r7, #22]
 800db40:	2bff      	cmp	r3, #255	; 0xff
 800db42:	d025      	beq.n	800db90 <USBD_LL_DataOutStage+0x15c>
 800db44:	7dbb      	ldrb	r3, [r7, #22]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d122      	bne.n	800db90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b03      	cmp	r3, #3
 800db54:	d117      	bne.n	800db86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800db56:	7dba      	ldrb	r2, [r7, #22]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	32ae      	adds	r2, #174	; 0xae
 800db5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00f      	beq.n	800db86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800db66:	7dba      	ldrb	r2, [r7, #22]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800db6e:	7dba      	ldrb	r2, [r7, #22]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	32ae      	adds	r2, #174	; 0xae
 800db74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db78:	699b      	ldr	r3, [r3, #24]
 800db7a:	7afa      	ldrb	r2, [r7, #11]
 800db7c:	4611      	mov	r1, r2
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	4798      	blx	r3
 800db82:	4603      	mov	r3, r0
 800db84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	e000      	b.n	800db92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b086      	sub	sp, #24
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	460b      	mov	r3, r1
 800dba4:	607a      	str	r2, [r7, #4]
 800dba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dba8:	7afb      	ldrb	r3, [r7, #11]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d16f      	bne.n	800dc8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbba:	2b02      	cmp	r3, #2
 800dbbc:	d15a      	bne.n	800dc74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	689a      	ldr	r2, [r3, #8]
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d914      	bls.n	800dbf4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	689a      	ldr	r2, [r3, #8]
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	1ad2      	subs	r2, r2, r3
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f001 f8ac 	bl	800ed3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	2100      	movs	r1, #0
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f003 fcf3 	bl	80115d8 <USBD_LL_PrepareReceive>
 800dbf2:	e03f      	b.n	800dc74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	68da      	ldr	r2, [r3, #12]
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d11c      	bne.n	800dc3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d316      	bcc.n	800dc3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d20f      	bcs.n	800dc3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f001 f88d 	bl	800ed3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2200      	movs	r2, #0
 800dc28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	2200      	movs	r2, #0
 800dc30:	2100      	movs	r1, #0
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f003 fcd0 	bl	80115d8 <USBD_LL_PrepareReceive>
 800dc38:	e01c      	b.n	800dc74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d10f      	bne.n	800dc66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d009      	beq.n	800dc66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc66:	2180      	movs	r1, #128	; 0x80
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f003 fc0b 	bl	8011484 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f001 f8b7 	bl	800ede2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d03a      	beq.n	800dcf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f7ff fe42 	bl	800d908 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dc8c:	e032      	b.n	800dcf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dc8e:	7afb      	ldrb	r3, [r7, #11]
 800dc90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	4619      	mov	r1, r3
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f000 f97f 	bl	800df9c <USBD_CoreFindEP>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
 800dca4:	2bff      	cmp	r3, #255	; 0xff
 800dca6:	d025      	beq.n	800dcf4 <USBD_LL_DataInStage+0x15a>
 800dca8:	7dfb      	ldrb	r3, [r7, #23]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d122      	bne.n	800dcf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b03      	cmp	r3, #3
 800dcb8:	d11c      	bne.n	800dcf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dcba:	7dfa      	ldrb	r2, [r7, #23]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	32ae      	adds	r2, #174	; 0xae
 800dcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d014      	beq.n	800dcf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dcca:	7dfa      	ldrb	r2, [r7, #23]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dcd2:	7dfa      	ldrb	r2, [r7, #23]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	32ae      	adds	r2, #174	; 0xae
 800dcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	7afa      	ldrb	r2, [r7, #11]
 800dce0:	4611      	mov	r1, r2
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	4798      	blx	r3
 800dce6:	4603      	mov	r3, r0
 800dce8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dcea:	7dbb      	ldrb	r3, [r7, #22]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d001      	beq.n	800dcf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dcf0:	7dbb      	ldrb	r3, [r7, #22]
 800dcf2:	e000      	b.n	800dcf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b084      	sub	sp, #16
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d014      	beq.n	800dd64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00e      	beq.n	800dd64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6852      	ldr	r2, [r2, #4]
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	4611      	mov	r1, r2
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	4798      	blx	r3
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d001      	beq.n	800dd64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dd60:	2303      	movs	r3, #3
 800dd62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd64:	2340      	movs	r3, #64	; 0x40
 800dd66:	2200      	movs	r2, #0
 800dd68:	2100      	movs	r1, #0
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f003 fb45 	bl	80113fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2240      	movs	r2, #64	; 0x40
 800dd7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd80:	2340      	movs	r3, #64	; 0x40
 800dd82:	2200      	movs	r2, #0
 800dd84:	2180      	movs	r1, #128	; 0x80
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f003 fb37 	bl	80113fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2240      	movs	r2, #64	; 0x40
 800dd96:	621a      	str	r2, [r3, #32]

  return ret;
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b083      	sub	sp, #12
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	78fa      	ldrb	r2, [r7, #3]
 800ddb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr

0800ddc2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ddc2:	b480      	push	{r7}
 800ddc4:	b083      	sub	sp, #12
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2204      	movs	r2, #4
 800dddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	370c      	adds	r7, #12
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b04      	cmp	r3, #4
 800de00:	d106      	bne.n	800de10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b082      	sub	sp, #8
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d110      	bne.n	800de54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00b      	beq.n	800de54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de42:	69db      	ldr	r3, [r3, #28]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d005      	beq.n	800de54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	460b      	mov	r3, r1
 800de68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	32ae      	adds	r2, #174	; 0xae
 800de74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d101      	bne.n	800de80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800de7c:	2303      	movs	r3, #3
 800de7e:	e01c      	b.n	800deba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b03      	cmp	r3, #3
 800de8a:	d115      	bne.n	800deb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	32ae      	adds	r2, #174	; 0xae
 800de96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	32ae      	adds	r2, #174	; 0xae
 800deaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deae:	6a1b      	ldr	r3, [r3, #32]
 800deb0:	78fa      	ldrb	r2, [r7, #3]
 800deb2:	4611      	mov	r1, r2
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	460b      	mov	r3, r1
 800decc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	32ae      	adds	r2, #174	; 0xae
 800ded8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dee0:	2303      	movs	r3, #3
 800dee2:	e01c      	b.n	800df1e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b03      	cmp	r3, #3
 800deee:	d115      	bne.n	800df1c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	32ae      	adds	r2, #174	; 0xae
 800defa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00b      	beq.n	800df1c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	32ae      	adds	r2, #174	; 0xae
 800df0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	78fa      	ldrb	r2, [r7, #3]
 800df16:	4611      	mov	r1, r2
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df26:	b480      	push	{r7}
 800df28:	b083      	sub	sp, #12
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00e      	beq.n	800df78 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	6852      	ldr	r2, [r2, #4]
 800df66:	b2d2      	uxtb	r2, r2
 800df68:	4611      	mov	r1, r2
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	4798      	blx	r3
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800df74:	2303      	movs	r3, #3
 800df76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800df78:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df82:	b480      	push	{r7}
 800df84:	b083      	sub	sp, #12
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	460b      	mov	r3, r1
 800df8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800df8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800df90:	4618      	mov	r0, r3
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dfa8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b086      	sub	sp, #24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	885b      	ldrh	r3, [r3, #2]
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d920      	bls.n	800e020 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dfe6:	e013      	b.n	800e010 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dfe8:	f107 030a 	add.w	r3, r7, #10
 800dfec:	4619      	mov	r1, r3
 800dfee:	6978      	ldr	r0, [r7, #20]
 800dff0:	f000 f81b 	bl	800e02a <USBD_GetNextDesc>
 800dff4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	785b      	ldrb	r3, [r3, #1]
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	d108      	bne.n	800e010 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	789b      	ldrb	r3, [r3, #2]
 800e006:	78fa      	ldrb	r2, [r7, #3]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d008      	beq.n	800e01e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	885b      	ldrh	r3, [r3, #2]
 800e014:	b29a      	uxth	r2, r3
 800e016:	897b      	ldrh	r3, [r7, #10]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d8e5      	bhi.n	800dfe8 <USBD_GetEpDesc+0x32>
 800e01c:	e000      	b.n	800e020 <USBD_GetEpDesc+0x6a>
          break;
 800e01e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e020:	693b      	ldr	r3, [r7, #16]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b085      	sub	sp, #20
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	881a      	ldrh	r2, [r3, #0]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	b29b      	uxth	r3, r3
 800e042:	4413      	add	r3, r2
 800e044:	b29a      	uxth	r2, r3
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4413      	add	r3, r2
 800e054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e056:	68fb      	ldr	r3, [r7, #12]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e064:	b480      	push	{r7}
 800e066:	b087      	sub	sp, #28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	3301      	adds	r3, #1
 800e07a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e082:	8a3b      	ldrh	r3, [r7, #16]
 800e084:	021b      	lsls	r3, r3, #8
 800e086:	b21a      	sxth	r2, r3
 800e088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e08c:	4313      	orrs	r3, r2
 800e08e:	b21b      	sxth	r3, r3
 800e090:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e092:	89fb      	ldrh	r3, [r7, #14]
}
 800e094:	4618      	mov	r0, r3
 800e096:	371c      	adds	r7, #28
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0b6:	2b40      	cmp	r3, #64	; 0x40
 800e0b8:	d005      	beq.n	800e0c6 <USBD_StdDevReq+0x26>
 800e0ba:	2b40      	cmp	r3, #64	; 0x40
 800e0bc:	d857      	bhi.n	800e16e <USBD_StdDevReq+0xce>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00f      	beq.n	800e0e2 <USBD_StdDevReq+0x42>
 800e0c2:	2b20      	cmp	r3, #32
 800e0c4:	d153      	bne.n	800e16e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	32ae      	adds	r2, #174	; 0xae
 800e0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	4798      	blx	r3
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73fb      	strb	r3, [r7, #15]
      break;
 800e0e0:	e04a      	b.n	800e178 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	785b      	ldrb	r3, [r3, #1]
 800e0e6:	2b09      	cmp	r3, #9
 800e0e8:	d83b      	bhi.n	800e162 <USBD_StdDevReq+0xc2>
 800e0ea:	a201      	add	r2, pc, #4	; (adr r2, 800e0f0 <USBD_StdDevReq+0x50>)
 800e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f0:	0800e145 	.word	0x0800e145
 800e0f4:	0800e159 	.word	0x0800e159
 800e0f8:	0800e163 	.word	0x0800e163
 800e0fc:	0800e14f 	.word	0x0800e14f
 800e100:	0800e163 	.word	0x0800e163
 800e104:	0800e123 	.word	0x0800e123
 800e108:	0800e119 	.word	0x0800e119
 800e10c:	0800e163 	.word	0x0800e163
 800e110:	0800e13b 	.word	0x0800e13b
 800e114:	0800e12d 	.word	0x0800e12d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fa3c 	bl	800e598 <USBD_GetDescriptor>
          break;
 800e120:	e024      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fba1 	bl	800e86c <USBD_SetAddress>
          break;
 800e12a:	e01f      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fbe0 	bl	800e8f4 <USBD_SetConfig>
 800e134:	4603      	mov	r3, r0
 800e136:	73fb      	strb	r3, [r7, #15]
          break;
 800e138:	e018      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fc83 	bl	800ea48 <USBD_GetConfig>
          break;
 800e142:	e013      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 fcb4 	bl	800eab4 <USBD_GetStatus>
          break;
 800e14c:	e00e      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f000 fce3 	bl	800eb1c <USBD_SetFeature>
          break;
 800e156:	e009      	b.n	800e16c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 fd07 	bl	800eb6e <USBD_ClrFeature>
          break;
 800e160:	e004      	b.n	800e16c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 fd5e 	bl	800ec26 <USBD_CtlError>
          break;
 800e16a:	bf00      	nop
      }
      break;
 800e16c:	e004      	b.n	800e178 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 fd58 	bl	800ec26 <USBD_CtlError>
      break;
 800e176:	bf00      	nop
  }

  return ret;
 800e178:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop

0800e184 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e19a:	2b40      	cmp	r3, #64	; 0x40
 800e19c:	d005      	beq.n	800e1aa <USBD_StdItfReq+0x26>
 800e19e:	2b40      	cmp	r3, #64	; 0x40
 800e1a0:	d852      	bhi.n	800e248 <USBD_StdItfReq+0xc4>
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <USBD_StdItfReq+0x26>
 800e1a6:	2b20      	cmp	r3, #32
 800e1a8:	d14e      	bne.n	800e248 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	d840      	bhi.n	800e23a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	889b      	ldrh	r3, [r3, #4]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d836      	bhi.n	800e230 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	889b      	ldrh	r3, [r3, #4]
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff fed9 	bl	800df82 <USBD_CoreFindIF>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	2bff      	cmp	r3, #255	; 0xff
 800e1d8:	d01d      	beq.n	800e216 <USBD_StdItfReq+0x92>
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d11a      	bne.n	800e216 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e1e0:	7bba      	ldrb	r2, [r7, #14]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	32ae      	adds	r2, #174	; 0xae
 800e1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00f      	beq.n	800e210 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e1f0:	7bba      	ldrb	r2, [r7, #14]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e1f8:	7bba      	ldrb	r2, [r7, #14]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	32ae      	adds	r2, #174	; 0xae
 800e1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	4798      	blx	r3
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e20e:	e004      	b.n	800e21a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e210:	2303      	movs	r3, #3
 800e212:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e214:	e001      	b.n	800e21a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e216:	2303      	movs	r3, #3
 800e218:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	88db      	ldrh	r3, [r3, #6]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d110      	bne.n	800e244 <USBD_StdItfReq+0xc0>
 800e222:	7bfb      	ldrb	r3, [r7, #15]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10d      	bne.n	800e244 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 fdc7 	bl	800edbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e22e:	e009      	b.n	800e244 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fcf7 	bl	800ec26 <USBD_CtlError>
          break;
 800e238:	e004      	b.n	800e244 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 fcf2 	bl	800ec26 <USBD_CtlError>
          break;
 800e242:	e000      	b.n	800e246 <USBD_StdItfReq+0xc2>
          break;
 800e244:	bf00      	nop
      }
      break;
 800e246:	e004      	b.n	800e252 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fceb 	bl	800ec26 <USBD_CtlError>
      break;
 800e250:	bf00      	nop
  }

  return ret;
 800e252:	7bfb      	ldrb	r3, [r7, #15]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	889b      	ldrh	r3, [r3, #4]
 800e26e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e278:	2b40      	cmp	r3, #64	; 0x40
 800e27a:	d007      	beq.n	800e28c <USBD_StdEPReq+0x30>
 800e27c:	2b40      	cmp	r3, #64	; 0x40
 800e27e:	f200 817f 	bhi.w	800e580 <USBD_StdEPReq+0x324>
 800e282:	2b00      	cmp	r3, #0
 800e284:	d02a      	beq.n	800e2dc <USBD_StdEPReq+0x80>
 800e286:	2b20      	cmp	r3, #32
 800e288:	f040 817a 	bne.w	800e580 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	4619      	mov	r1, r3
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff fe83 	bl	800df9c <USBD_CoreFindEP>
 800e296:	4603      	mov	r3, r0
 800e298:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e29a:	7b7b      	ldrb	r3, [r7, #13]
 800e29c:	2bff      	cmp	r3, #255	; 0xff
 800e29e:	f000 8174 	beq.w	800e58a <USBD_StdEPReq+0x32e>
 800e2a2:	7b7b      	ldrb	r3, [r7, #13]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f040 8170 	bne.w	800e58a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e2aa:	7b7a      	ldrb	r2, [r7, #13]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e2b2:	7b7a      	ldrb	r2, [r7, #13]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	32ae      	adds	r2, #174	; 0xae
 800e2b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f000 8163 	beq.w	800e58a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e2c4:	7b7a      	ldrb	r2, [r7, #13]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	32ae      	adds	r2, #174	; 0xae
 800e2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	4798      	blx	r3
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e2da:	e156      	b.n	800e58a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	785b      	ldrb	r3, [r3, #1]
 800e2e0:	2b03      	cmp	r3, #3
 800e2e2:	d008      	beq.n	800e2f6 <USBD_StdEPReq+0x9a>
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	f300 8145 	bgt.w	800e574 <USBD_StdEPReq+0x318>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 809b 	beq.w	800e426 <USBD_StdEPReq+0x1ca>
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d03c      	beq.n	800e36e <USBD_StdEPReq+0x112>
 800e2f4:	e13e      	b.n	800e574 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d002      	beq.n	800e308 <USBD_StdEPReq+0xac>
 800e302:	2b03      	cmp	r3, #3
 800e304:	d016      	beq.n	800e334 <USBD_StdEPReq+0xd8>
 800e306:	e02c      	b.n	800e362 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e308:	7bbb      	ldrb	r3, [r7, #14]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00d      	beq.n	800e32a <USBD_StdEPReq+0xce>
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	2b80      	cmp	r3, #128	; 0x80
 800e312:	d00a      	beq.n	800e32a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	4619      	mov	r1, r3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f003 f8b3 	bl	8011484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e31e:	2180      	movs	r1, #128	; 0x80
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f003 f8af 	bl	8011484 <USBD_LL_StallEP>
 800e326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e328:	e020      	b.n	800e36c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fc7a 	bl	800ec26 <USBD_CtlError>
              break;
 800e332:	e01b      	b.n	800e36c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	885b      	ldrh	r3, [r3, #2]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10e      	bne.n	800e35a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e33c:	7bbb      	ldrb	r3, [r7, #14]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <USBD_StdEPReq+0xfe>
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	2b80      	cmp	r3, #128	; 0x80
 800e346:	d008      	beq.n	800e35a <USBD_StdEPReq+0xfe>
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	88db      	ldrh	r3, [r3, #6]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d104      	bne.n	800e35a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e350:	7bbb      	ldrb	r3, [r7, #14]
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f003 f895 	bl	8011484 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fd2e 	bl	800edbc <USBD_CtlSendStatus>

              break;
 800e360:	e004      	b.n	800e36c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e362:	6839      	ldr	r1, [r7, #0]
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fc5e 	bl	800ec26 <USBD_CtlError>
              break;
 800e36a:	bf00      	nop
          }
          break;
 800e36c:	e107      	b.n	800e57e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b02      	cmp	r3, #2
 800e378:	d002      	beq.n	800e380 <USBD_StdEPReq+0x124>
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d016      	beq.n	800e3ac <USBD_StdEPReq+0x150>
 800e37e:	e04b      	b.n	800e418 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e380:	7bbb      	ldrb	r3, [r7, #14]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00d      	beq.n	800e3a2 <USBD_StdEPReq+0x146>
 800e386:	7bbb      	ldrb	r3, [r7, #14]
 800e388:	2b80      	cmp	r3, #128	; 0x80
 800e38a:	d00a      	beq.n	800e3a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f003 f877 	bl	8011484 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e396:	2180      	movs	r1, #128	; 0x80
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f003 f873 	bl	8011484 <USBD_LL_StallEP>
 800e39e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e3a0:	e040      	b.n	800e424 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e3a2:	6839      	ldr	r1, [r7, #0]
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 fc3e 	bl	800ec26 <USBD_CtlError>
              break;
 800e3aa:	e03b      	b.n	800e424 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	885b      	ldrh	r3, [r3, #2]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d136      	bne.n	800e422 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e3b4:	7bbb      	ldrb	r3, [r7, #14]
 800e3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d004      	beq.n	800e3c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f003 f87d 	bl	80114c2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fcf7 	bl	800edbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7ff fde2 	bl	800df9c <USBD_CoreFindEP>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e3dc:	7b7b      	ldrb	r3, [r7, #13]
 800e3de:	2bff      	cmp	r3, #255	; 0xff
 800e3e0:	d01f      	beq.n	800e422 <USBD_StdEPReq+0x1c6>
 800e3e2:	7b7b      	ldrb	r3, [r7, #13]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d11c      	bne.n	800e422 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e3e8:	7b7a      	ldrb	r2, [r7, #13]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e3f0:	7b7a      	ldrb	r2, [r7, #13]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	32ae      	adds	r2, #174	; 0xae
 800e3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d010      	beq.n	800e422 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e400:	7b7a      	ldrb	r2, [r7, #13]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	32ae      	adds	r2, #174	; 0xae
 800e406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	4798      	blx	r3
 800e412:	4603      	mov	r3, r0
 800e414:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e416:	e004      	b.n	800e422 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fc03 	bl	800ec26 <USBD_CtlError>
              break;
 800e420:	e000      	b.n	800e424 <USBD_StdEPReq+0x1c8>
              break;
 800e422:	bf00      	nop
          }
          break;
 800e424:	e0ab      	b.n	800e57e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d002      	beq.n	800e438 <USBD_StdEPReq+0x1dc>
 800e432:	2b03      	cmp	r3, #3
 800e434:	d032      	beq.n	800e49c <USBD_StdEPReq+0x240>
 800e436:	e097      	b.n	800e568 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e438:	7bbb      	ldrb	r3, [r7, #14]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d007      	beq.n	800e44e <USBD_StdEPReq+0x1f2>
 800e43e:	7bbb      	ldrb	r3, [r7, #14]
 800e440:	2b80      	cmp	r3, #128	; 0x80
 800e442:	d004      	beq.n	800e44e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 fbed 	bl	800ec26 <USBD_CtlError>
                break;
 800e44c:	e091      	b.n	800e572 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e44e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e452:	2b00      	cmp	r3, #0
 800e454:	da0b      	bge.n	800e46e <USBD_StdEPReq+0x212>
 800e456:	7bbb      	ldrb	r3, [r7, #14]
 800e458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e45c:	4613      	mov	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	4413      	add	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	3310      	adds	r3, #16
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	4413      	add	r3, r2
 800e46a:	3304      	adds	r3, #4
 800e46c:	e00b      	b.n	800e486 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e474:	4613      	mov	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	4413      	add	r3, r2
 800e484:	3304      	adds	r3, #4
 800e486:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	2200      	movs	r2, #0
 800e48c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	2202      	movs	r2, #2
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 fc37 	bl	800ed08 <USBD_CtlSendData>
              break;
 800e49a:	e06a      	b.n	800e572 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da11      	bge.n	800e4c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e4a4:	7bbb      	ldrb	r3, [r7, #14]
 800e4a6:	f003 020f 	and.w	r2, r3, #15
 800e4aa:	6879      	ldr	r1, [r7, #4]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	440b      	add	r3, r1
 800e4b6:	3324      	adds	r3, #36	; 0x24
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d117      	bne.n	800e4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fbb0 	bl	800ec26 <USBD_CtlError>
                  break;
 800e4c6:	e054      	b.n	800e572 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	f003 020f 	and.w	r2, r3, #15
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	440b      	add	r3, r1
 800e4da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e4de:	881b      	ldrh	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d104      	bne.n	800e4ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fb9d 	bl	800ec26 <USBD_CtlError>
                  break;
 800e4ec:	e041      	b.n	800e572 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	da0b      	bge.n	800e50e <USBD_StdEPReq+0x2b2>
 800e4f6:	7bbb      	ldrb	r3, [r7, #14]
 800e4f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	3310      	adds	r3, #16
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	4413      	add	r3, r2
 800e50a:	3304      	adds	r3, #4
 800e50c:	e00b      	b.n	800e526 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e514:	4613      	mov	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	4413      	add	r3, r2
 800e524:	3304      	adds	r3, #4
 800e526:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d002      	beq.n	800e534 <USBD_StdEPReq+0x2d8>
 800e52e:	7bbb      	ldrb	r3, [r7, #14]
 800e530:	2b80      	cmp	r3, #128	; 0x80
 800e532:	d103      	bne.n	800e53c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2200      	movs	r2, #0
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	e00e      	b.n	800e55a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e53c:	7bbb      	ldrb	r3, [r7, #14]
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f002 ffdd 	bl	8011500 <USBD_LL_IsStallEP>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d003      	beq.n	800e554 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	2201      	movs	r2, #1
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	e002      	b.n	800e55a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2200      	movs	r2, #0
 800e558:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	2202      	movs	r2, #2
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 fbd1 	bl	800ed08 <USBD_CtlSendData>
              break;
 800e566:	e004      	b.n	800e572 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fb5b 	bl	800ec26 <USBD_CtlError>
              break;
 800e570:	bf00      	nop
          }
          break;
 800e572:	e004      	b.n	800e57e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fb55 	bl	800ec26 <USBD_CtlError>
          break;
 800e57c:	bf00      	nop
      }
      break;
 800e57e:	e005      	b.n	800e58c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fb4f 	bl	800ec26 <USBD_CtlError>
      break;
 800e588:	e000      	b.n	800e58c <USBD_StdEPReq+0x330>
      break;
 800e58a:	bf00      	nop
  }

  return ret;
 800e58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	885b      	ldrh	r3, [r3, #2]
 800e5b2:	0a1b      	lsrs	r3, r3, #8
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	2b06      	cmp	r3, #6
 800e5ba:	f200 8128 	bhi.w	800e80e <USBD_GetDescriptor+0x276>
 800e5be:	a201      	add	r2, pc, #4	; (adr r2, 800e5c4 <USBD_GetDescriptor+0x2c>)
 800e5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c4:	0800e5e1 	.word	0x0800e5e1
 800e5c8:	0800e5f9 	.word	0x0800e5f9
 800e5cc:	0800e639 	.word	0x0800e639
 800e5d0:	0800e80f 	.word	0x0800e80f
 800e5d4:	0800e80f 	.word	0x0800e80f
 800e5d8:	0800e7af 	.word	0x0800e7af
 800e5dc:	0800e7db 	.word	0x0800e7db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	7c12      	ldrb	r2, [r2, #16]
 800e5ec:	f107 0108 	add.w	r1, r7, #8
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	4798      	blx	r3
 800e5f4:	60f8      	str	r0, [r7, #12]
      break;
 800e5f6:	e112      	b.n	800e81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7c1b      	ldrb	r3, [r3, #16]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10d      	bne.n	800e61c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e608:	f107 0208 	add.w	r2, r7, #8
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3301      	adds	r3, #1
 800e616:	2202      	movs	r2, #2
 800e618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e61a:	e100      	b.n	800e81e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	f107 0208 	add.w	r2, r7, #8
 800e628:	4610      	mov	r0, r2
 800e62a:	4798      	blx	r3
 800e62c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3301      	adds	r3, #1
 800e632:	2202      	movs	r2, #2
 800e634:	701a      	strb	r2, [r3, #0]
      break;
 800e636:	e0f2      	b.n	800e81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	885b      	ldrh	r3, [r3, #2]
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	2b05      	cmp	r3, #5
 800e640:	f200 80ac 	bhi.w	800e79c <USBD_GetDescriptor+0x204>
 800e644:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <USBD_GetDescriptor+0xb4>)
 800e646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64a:	bf00      	nop
 800e64c:	0800e665 	.word	0x0800e665
 800e650:	0800e699 	.word	0x0800e699
 800e654:	0800e6cd 	.word	0x0800e6cd
 800e658:	0800e701 	.word	0x0800e701
 800e65c:	0800e735 	.word	0x0800e735
 800e660:	0800e769 	.word	0x0800e769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	7c12      	ldrb	r2, [r2, #16]
 800e67c:	f107 0108 	add.w	r1, r7, #8
 800e680:	4610      	mov	r0, r2
 800e682:	4798      	blx	r3
 800e684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e686:	e091      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 facb 	bl	800ec26 <USBD_CtlError>
            err++;
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	3301      	adds	r3, #1
 800e694:	72fb      	strb	r3, [r7, #11]
          break;
 800e696:	e089      	b.n	800e7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00b      	beq.n	800e6bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7c12      	ldrb	r2, [r2, #16]
 800e6b0:	f107 0108 	add.w	r1, r7, #8
 800e6b4:	4610      	mov	r0, r2
 800e6b6:	4798      	blx	r3
 800e6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ba:	e077      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 fab1 	bl	800ec26 <USBD_CtlError>
            err++;
 800e6c4:	7afb      	ldrb	r3, [r7, #11]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ca:	e06f      	b.n	800e7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6d2:	68db      	ldr	r3, [r3, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	7c12      	ldrb	r2, [r2, #16]
 800e6e4:	f107 0108 	add.w	r1, r7, #8
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ee:	e05d      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6f0:	6839      	ldr	r1, [r7, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa97 	bl	800ec26 <USBD_CtlError>
            err++;
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fe:	e055      	b.n	800e7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	7c12      	ldrb	r2, [r2, #16]
 800e718:	f107 0108 	add.w	r1, r7, #8
 800e71c:	4610      	mov	r0, r2
 800e71e:	4798      	blx	r3
 800e720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e722:	e043      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e724:	6839      	ldr	r1, [r7, #0]
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa7d 	bl	800ec26 <USBD_CtlError>
            err++;
 800e72c:	7afb      	ldrb	r3, [r7, #11]
 800e72e:	3301      	adds	r3, #1
 800e730:	72fb      	strb	r3, [r7, #11]
          break;
 800e732:	e03b      	b.n	800e7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00b      	beq.n	800e758 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e746:	695b      	ldr	r3, [r3, #20]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	7c12      	ldrb	r2, [r2, #16]
 800e74c:	f107 0108 	add.w	r1, r7, #8
 800e750:	4610      	mov	r0, r2
 800e752:	4798      	blx	r3
 800e754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e756:	e029      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 fa63 	bl	800ec26 <USBD_CtlError>
            err++;
 800e760:	7afb      	ldrb	r3, [r7, #11]
 800e762:	3301      	adds	r3, #1
 800e764:	72fb      	strb	r3, [r7, #11]
          break;
 800e766:	e021      	b.n	800e7ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	7c12      	ldrb	r2, [r2, #16]
 800e780:	f107 0108 	add.w	r1, r7, #8
 800e784:	4610      	mov	r0, r2
 800e786:	4798      	blx	r3
 800e788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e78a:	e00f      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fa49 	bl	800ec26 <USBD_CtlError>
            err++;
 800e794:	7afb      	ldrb	r3, [r7, #11]
 800e796:	3301      	adds	r3, #1
 800e798:	72fb      	strb	r3, [r7, #11]
          break;
 800e79a:	e007      	b.n	800e7ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 fa41 	bl	800ec26 <USBD_CtlError>
          err++;
 800e7a4:	7afb      	ldrb	r3, [r7, #11]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e7aa:	bf00      	nop
      }
      break;
 800e7ac:	e037      	b.n	800e81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7c1b      	ldrb	r3, [r3, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d109      	bne.n	800e7ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7be:	f107 0208 	add.w	r2, r7, #8
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4798      	blx	r3
 800e7c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7c8:	e029      	b.n	800e81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e7ca:	6839      	ldr	r1, [r7, #0]
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 fa2a 	bl	800ec26 <USBD_CtlError>
        err++;
 800e7d2:	7afb      	ldrb	r3, [r7, #11]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	72fb      	strb	r3, [r7, #11]
      break;
 800e7d8:	e021      	b.n	800e81e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	7c1b      	ldrb	r3, [r3, #16]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d10d      	bne.n	800e7fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ea:	f107 0208 	add.w	r2, r7, #8
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	4798      	blx	r3
 800e7f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	2207      	movs	r2, #7
 800e7fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7fc:	e00f      	b.n	800e81e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fa10 	bl	800ec26 <USBD_CtlError>
        err++;
 800e806:	7afb      	ldrb	r3, [r7, #11]
 800e808:	3301      	adds	r3, #1
 800e80a:	72fb      	strb	r3, [r7, #11]
      break;
 800e80c:	e007      	b.n	800e81e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fa08 	bl	800ec26 <USBD_CtlError>
      err++;
 800e816:	7afb      	ldrb	r3, [r7, #11]
 800e818:	3301      	adds	r3, #1
 800e81a:	72fb      	strb	r3, [r7, #11]
      break;
 800e81c:	bf00      	nop
  }

  if (err != 0U)
 800e81e:	7afb      	ldrb	r3, [r7, #11]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d11e      	bne.n	800e862 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	88db      	ldrh	r3, [r3, #6]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d016      	beq.n	800e85a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e82c:	893b      	ldrh	r3, [r7, #8]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00e      	beq.n	800e850 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	88da      	ldrh	r2, [r3, #6]
 800e836:	893b      	ldrh	r3, [r7, #8]
 800e838:	4293      	cmp	r3, r2
 800e83a:	bf28      	it	cs
 800e83c:	4613      	movcs	r3, r2
 800e83e:	b29b      	uxth	r3, r3
 800e840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e842:	893b      	ldrh	r3, [r7, #8]
 800e844:	461a      	mov	r2, r3
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fa5d 	bl	800ed08 <USBD_CtlSendData>
 800e84e:	e009      	b.n	800e864 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f9e7 	bl	800ec26 <USBD_CtlError>
 800e858:	e004      	b.n	800e864 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 faae 	bl	800edbc <USBD_CtlSendStatus>
 800e860:	e000      	b.n	800e864 <USBD_GetDescriptor+0x2cc>
    return;
 800e862:	bf00      	nop
  }
}
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop

0800e86c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	889b      	ldrh	r3, [r3, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d131      	bne.n	800e8e2 <USBD_SetAddress+0x76>
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	88db      	ldrh	r3, [r3, #6]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d12d      	bne.n	800e8e2 <USBD_SetAddress+0x76>
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	885b      	ldrh	r3, [r3, #2]
 800e88a:	2b7f      	cmp	r3, #127	; 0x7f
 800e88c:	d829      	bhi.n	800e8e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	885b      	ldrh	r3, [r3, #2]
 800e892:	b2db      	uxtb	r3, r3
 800e894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d104      	bne.n	800e8b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f9bc 	bl	800ec26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ae:	e01d      	b.n	800e8ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7bfa      	ldrb	r2, [r7, #15]
 800e8b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8b8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f002 fe4b 	bl	8011558 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fa7a 	bl	800edbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d004      	beq.n	800e8d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8d6:	e009      	b.n	800e8ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8e0:	e004      	b.n	800e8ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 f99e 	bl	800ec26 <USBD_CtlError>
  }
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8fe:	2300      	movs	r3, #0
 800e900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	885b      	ldrh	r3, [r3, #2]
 800e906:	b2da      	uxtb	r2, r3
 800e908:	4b4e      	ldr	r3, [pc, #312]	; (800ea44 <USBD_SetConfig+0x150>)
 800e90a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e90c:	4b4d      	ldr	r3, [pc, #308]	; (800ea44 <USBD_SetConfig+0x150>)
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d905      	bls.n	800e920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e914:	6839      	ldr	r1, [r7, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f985 	bl	800ec26 <USBD_CtlError>
    return USBD_FAIL;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e08c      	b.n	800ea3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d002      	beq.n	800e932 <USBD_SetConfig+0x3e>
 800e92c:	2b03      	cmp	r3, #3
 800e92e:	d029      	beq.n	800e984 <USBD_SetConfig+0x90>
 800e930:	e075      	b.n	800ea1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e932:	4b44      	ldr	r3, [pc, #272]	; (800ea44 <USBD_SetConfig+0x150>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d020      	beq.n	800e97c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e93a:	4b42      	ldr	r3, [pc, #264]	; (800ea44 <USBD_SetConfig+0x150>)
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	461a      	mov	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e944:	4b3f      	ldr	r3, [pc, #252]	; (800ea44 <USBD_SetConfig+0x150>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	4619      	mov	r1, r3
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7fe ffe7 	bl	800d91e <USBD_SetClassConfig>
 800e950:	4603      	mov	r3, r0
 800e952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e954:	7bfb      	ldrb	r3, [r7, #15]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d008      	beq.n	800e96c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f962 	bl	800ec26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2202      	movs	r2, #2
 800e966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e96a:	e065      	b.n	800ea38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 fa25 	bl	800edbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2203      	movs	r2, #3
 800e976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e97a:	e05d      	b.n	800ea38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 fa1d 	bl	800edbc <USBD_CtlSendStatus>
      break;
 800e982:	e059      	b.n	800ea38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e984:	4b2f      	ldr	r3, [pc, #188]	; (800ea44 <USBD_SetConfig+0x150>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d112      	bne.n	800e9b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e994:	4b2b      	ldr	r3, [pc, #172]	; (800ea44 <USBD_SetConfig+0x150>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	461a      	mov	r2, r3
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e99e:	4b29      	ldr	r3, [pc, #164]	; (800ea44 <USBD_SetConfig+0x150>)
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7fe ffd6 	bl	800d956 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fa06 	bl	800edbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9b0:	e042      	b.n	800ea38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e9b2:	4b24      	ldr	r3, [pc, #144]	; (800ea44 <USBD_SetConfig+0x150>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d02a      	beq.n	800ea16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7fe ffc4 	bl	800d956 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ea44 <USBD_SetConfig+0x150>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ea44 <USBD_SetConfig+0x150>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7fe ff9d 	bl	800d91e <USBD_SetClassConfig>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00f      	beq.n	800ea0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f918 	bl	800ec26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7fe ffa9 	bl	800d956 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2202      	movs	r2, #2
 800ea08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea0c:	e014      	b.n	800ea38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f9d4 	bl	800edbc <USBD_CtlSendStatus>
      break;
 800ea14:	e010      	b.n	800ea38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f9d0 	bl	800edbc <USBD_CtlSendStatus>
      break;
 800ea1c:	e00c      	b.n	800ea38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f900 	bl	800ec26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea26:	4b07      	ldr	r3, [pc, #28]	; (800ea44 <USBD_SetConfig+0x150>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f7fe ff92 	bl	800d956 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea32:	2303      	movs	r3, #3
 800ea34:	73fb      	strb	r3, [r7, #15]
      break;
 800ea36:	bf00      	nop
  }

  return ret;
 800ea38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20002b18 	.word	0x20002b18

0800ea48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	88db      	ldrh	r3, [r3, #6]
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d004      	beq.n	800ea64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f8e2 	bl	800ec26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea62:	e023      	b.n	800eaac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	dc02      	bgt.n	800ea76 <USBD_GetConfig+0x2e>
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	dc03      	bgt.n	800ea7c <USBD_GetConfig+0x34>
 800ea74:	e015      	b.n	800eaa2 <USBD_GetConfig+0x5a>
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	d00b      	beq.n	800ea92 <USBD_GetConfig+0x4a>
 800ea7a:	e012      	b.n	800eaa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3308      	adds	r3, #8
 800ea86:	2201      	movs	r2, #1
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f93c 	bl	800ed08 <USBD_CtlSendData>
        break;
 800ea90:	e00c      	b.n	800eaac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3304      	adds	r3, #4
 800ea96:	2201      	movs	r2, #1
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f934 	bl	800ed08 <USBD_CtlSendData>
        break;
 800eaa0:	e004      	b.n	800eaac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 f8be 	bl	800ec26 <USBD_CtlError>
        break;
 800eaaa:	bf00      	nop
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	2b02      	cmp	r3, #2
 800eaca:	d81e      	bhi.n	800eb0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	88db      	ldrh	r3, [r3, #6]
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d004      	beq.n	800eade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f8a5 	bl	800ec26 <USBD_CtlError>
        break;
 800eadc:	e01a      	b.n	800eb14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2201      	movs	r2, #1
 800eae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d005      	beq.n	800eafa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	f043 0202 	orr.w	r2, r3, #2
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	330c      	adds	r3, #12
 800eafe:	2202      	movs	r2, #2
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f900 	bl	800ed08 <USBD_CtlSendData>
      break;
 800eb08:	e004      	b.n	800eb14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f88a 	bl	800ec26 <USBD_CtlError>
      break;
 800eb12:	bf00      	nop
  }
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	885b      	ldrh	r3, [r3, #2]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d107      	bne.n	800eb3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f000 f940 	bl	800edbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eb3c:	e013      	b.n	800eb66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	885b      	ldrh	r3, [r3, #2]
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d10b      	bne.n	800eb5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	889b      	ldrh	r3, [r3, #4]
 800eb4a:	0a1b      	lsrs	r3, r3, #8
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	b2da      	uxtb	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f930 	bl	800edbc <USBD_CtlSendStatus>
}
 800eb5c:	e003      	b.n	800eb66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f860 	bl	800ec26 <USBD_CtlError>
}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	3b01      	subs	r3, #1
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	d80b      	bhi.n	800eb9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	885b      	ldrh	r3, [r3, #2]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d10c      	bne.n	800eba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f910 	bl	800edbc <USBD_CtlSendStatus>
      }
      break;
 800eb9c:	e004      	b.n	800eba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb9e:	6839      	ldr	r1, [r7, #0]
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 f840 	bl	800ec26 <USBD_CtlError>
      break;
 800eba6:	e000      	b.n	800ebaa <USBD_ClrFeature+0x3c>
      break;
 800eba8:	bf00      	nop
  }
}
 800ebaa:	bf00      	nop
 800ebac:	3708      	adds	r7, #8
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b084      	sub	sp, #16
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
 800ebba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	781a      	ldrb	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	781a      	ldrb	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f7ff fa41 	bl	800e064 <SWAPBYTE>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3301      	adds	r3, #1
 800ebee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebf6:	68f8      	ldr	r0, [r7, #12]
 800ebf8:	f7ff fa34 	bl	800e064 <SWAPBYTE>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	461a      	mov	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	3301      	adds	r3, #1
 800ec08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f7ff fa27 	bl	800e064 <SWAPBYTE>
 800ec16:	4603      	mov	r3, r0
 800ec18:	461a      	mov	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	80da      	strh	r2, [r3, #6]
}
 800ec1e:	bf00      	nop
 800ec20:	3710      	adds	r7, #16
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b082      	sub	sp, #8
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec30:	2180      	movs	r1, #128	; 0x80
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f002 fc26 	bl	8011484 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec38:	2100      	movs	r1, #0
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f002 fc22 	bl	8011484 <USBD_LL_StallEP>
}
 800ec40:	bf00      	nop
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec54:	2300      	movs	r3, #0
 800ec56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d036      	beq.n	800eccc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec62:	6938      	ldr	r0, [r7, #16]
 800ec64:	f000 f836 	bl	800ecd4 <USBD_GetLen>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	005b      	lsls	r3, r3, #1
 800ec70:	b29a      	uxth	r2, r3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	7812      	ldrb	r2, [r2, #0]
 800ec80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	3301      	adds	r3, #1
 800ec86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec88:	7dfb      	ldrb	r3, [r7, #23]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	2203      	movs	r2, #3
 800ec90:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec92:	7dfb      	ldrb	r3, [r7, #23]
 800ec94:	3301      	adds	r3, #1
 800ec96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec98:	e013      	b.n	800ecc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	4413      	add	r3, r2
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	7812      	ldrb	r2, [r2, #0]
 800eca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	613b      	str	r3, [r7, #16]
    idx++;
 800ecac:	7dfb      	ldrb	r3, [r7, #23]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	2200      	movs	r2, #0
 800ecba:	701a      	strb	r2, [r3, #0]
    idx++;
 800ecbc:	7dfb      	ldrb	r3, [r7, #23]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1e7      	bne.n	800ec9a <USBD_GetString+0x52>
 800ecca:	e000      	b.n	800ecce <USBD_GetString+0x86>
    return;
 800eccc:	bf00      	nop
  }
}
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ece4:	e005      	b.n	800ecf2 <USBD_GetLen+0x1e>
  {
    len++;
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	3301      	adds	r3, #1
 800ecea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1f5      	bne.n	800ece6 <USBD_GetLen+0x12>
  }

  return len;
 800ecfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2202      	movs	r2, #2
 800ed18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68ba      	ldr	r2, [r7, #8]
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f002 fc31 	bl	8011596 <USBD_LL_Transmit>

  return USBD_OK;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b084      	sub	sp, #16
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	60f8      	str	r0, [r7, #12]
 800ed46:	60b9      	str	r1, [r7, #8]
 800ed48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	2100      	movs	r1, #0
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f002 fc20 	bl	8011596 <USBD_LL_Transmit>

  return USBD_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60f8      	str	r0, [r7, #12]
 800ed68:	60b9      	str	r1, [r7, #8]
 800ed6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2203      	movs	r2, #3
 800ed70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	2100      	movs	r1, #0
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f002 fc24 	bl	80115d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	60f8      	str	r0, [r7, #12]
 800eda2:	60b9      	str	r1, [r7, #8]
 800eda4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	2100      	movs	r1, #0
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f002 fc13 	bl	80115d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2204      	movs	r2, #4
 800edc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800edcc:	2300      	movs	r3, #0
 800edce:	2200      	movs	r2, #0
 800edd0:	2100      	movs	r1, #0
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f002 fbdf 	bl	8011596 <USBD_LL_Transmit>

  return USBD_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b082      	sub	sp, #8
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2205      	movs	r2, #5
 800edee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edf2:	2300      	movs	r3, #0
 800edf4:	2200      	movs	r2, #0
 800edf6:	2100      	movs	r1, #0
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f002 fbed 	bl	80115d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edfe:	2300      	movs	r3, #0
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ee16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee1a:	2b84      	cmp	r3, #132	; 0x84
 800ee1c:	d005      	beq.n	800ee2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ee1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	4413      	add	r3, r2
 800ee26:	3303      	adds	r3, #3
 800ee28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3714      	adds	r7, #20
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ee3c:	f000 fe1e 	bl	800fa7c <vTaskStartScheduler>
  
  return osOK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ee46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee48:	b089      	sub	sp, #36	; 0x24
 800ee4a:	af04      	add	r7, sp, #16
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d020      	beq.n	800ee9a <osThreadCreate+0x54>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d01c      	beq.n	800ee9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685c      	ldr	r4, [r3, #4]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681d      	ldr	r5, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	691e      	ldr	r6, [r3, #16]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7ff ffc8 	bl	800ee08 <makeFreeRtosPriority>
 800ee78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee82:	9202      	str	r2, [sp, #8]
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	9100      	str	r1, [sp, #0]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	4632      	mov	r2, r6
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 fc2c 	bl	800f6ec <xTaskCreateStatic>
 800ee94:	4603      	mov	r3, r0
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	e01c      	b.n	800eed4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	685c      	ldr	r4, [r3, #4]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eea6:	b29e      	uxth	r6, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7ff ffaa 	bl	800ee08 <makeFreeRtosPriority>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	f107 030c 	add.w	r3, r7, #12
 800eeba:	9301      	str	r3, [sp, #4]
 800eebc:	9200      	str	r2, [sp, #0]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	4632      	mov	r2, r6
 800eec2:	4629      	mov	r1, r5
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 fc6e 	bl	800f7a6 <xTaskCreate>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d001      	beq.n	800eed4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eed0:	2300      	movs	r3, #0
 800eed2:	e000      	b.n	800eed6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eed4:	68fb      	ldr	r3, [r7, #12]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3714      	adds	r7, #20
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eede <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b084      	sub	sp, #16
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <osDelay+0x16>
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	e000      	b.n	800eef6 <osDelay+0x18>
 800eef4:	2301      	movs	r3, #1
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 fd8c 	bl	800fa14 <vTaskDelay>
  
  return osOK;
 800eefc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b086      	sub	sp, #24
 800ef0a:	af02      	add	r7, sp, #8
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00f      	beq.n	800ef38 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d10a      	bne.n	800ef34 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	2203      	movs	r2, #3
 800ef24:	9200      	str	r2, [sp, #0]
 800ef26:	2200      	movs	r2, #0
 800ef28:	2100      	movs	r1, #0
 800ef2a:	2001      	movs	r0, #1
 800ef2c:	f000 f93a 	bl	800f1a4 <xQueueGenericCreateStatic>
 800ef30:	4603      	mov	r3, r0
 800ef32:	e016      	b.n	800ef62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ef34:	2300      	movs	r3, #0
 800ef36:	e014      	b.n	800ef62 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d110      	bne.n	800ef60 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ef3e:	2203      	movs	r2, #3
 800ef40:	2100      	movs	r1, #0
 800ef42:	2001      	movs	r0, #1
 800ef44:	f000 f9a6 	bl	800f294 <xQueueGenericCreate>
 800ef48:	60f8      	str	r0, [r7, #12]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d005      	beq.n	800ef5c <osSemaphoreCreate+0x56>
 800ef50:	2300      	movs	r3, #0
 800ef52:	2200      	movs	r2, #0
 800ef54:	2100      	movs	r1, #0
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f000 f9f6 	bl	800f348 <xQueueGenericSend>
      return sema;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	e000      	b.n	800ef62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ef60:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3710      	adds	r7, #16
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b083      	sub	sp, #12
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f103 0208 	add.w	r2, r3, #8
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f103 0208 	add.w	r2, r3, #8
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f103 0208 	add.w	r2, r3, #8
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ef9e:	bf00      	nop
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	689a      	ldr	r2, [r3, #8]
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	683a      	ldr	r2, [r7, #0]
 800efee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	687a      	ldr	r2, [r7, #4]
 800eff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	601a      	str	r2, [r3, #0]
}
 800f000:	bf00      	nop
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f00c:	b480      	push	{r7}
 800f00e:	b085      	sub	sp, #20
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f022:	d103      	bne.n	800f02c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	691b      	ldr	r3, [r3, #16]
 800f028:	60fb      	str	r3, [r7, #12]
 800f02a:	e00c      	b.n	800f046 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3308      	adds	r3, #8
 800f030:	60fb      	str	r3, [r7, #12]
 800f032:	e002      	b.n	800f03a <vListInsert+0x2e>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	60fb      	str	r3, [r7, #12]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	429a      	cmp	r2, r3
 800f044:	d2f6      	bcs.n	800f034 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	685a      	ldr	r2, [r3, #4]
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	683a      	ldr	r2, [r7, #0]
 800f060:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	601a      	str	r2, [r3, #0]
}
 800f072:	bf00      	nop
 800f074:	3714      	adds	r7, #20
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f07e:	b480      	push	{r7}
 800f080:	b085      	sub	sp, #20
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	6892      	ldr	r2, [r2, #8]
 800f094:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	689b      	ldr	r3, [r3, #8]
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	6852      	ldr	r2, [r2, #4]
 800f09e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d103      	bne.n	800f0b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	689a      	ldr	r2, [r3, #8]
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	1e5a      	subs	r2, r3, #1
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3714      	adds	r7, #20
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f0fe:	f001 faf1 	bl	80106e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f10a:	68f9      	ldr	r1, [r7, #12]
 800f10c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f10e:	fb01 f303 	mul.w	r3, r1, r3
 800f112:	441a      	add	r2, r3
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2200      	movs	r2, #0
 800f11c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f12e:	3b01      	subs	r3, #1
 800f130:	68f9      	ldr	r1, [r7, #12]
 800f132:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f134:	fb01 f303 	mul.w	r3, r1, r3
 800f138:	441a      	add	r2, r3
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	22ff      	movs	r2, #255	; 0xff
 800f142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	22ff      	movs	r2, #255	; 0xff
 800f14a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d114      	bne.n	800f17e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d01a      	beq.n	800f192 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3310      	adds	r3, #16
 800f160:	4618      	mov	r0, r3
 800f162:	f000 fecd 	bl	800ff00 <xTaskRemoveFromEventList>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d012      	beq.n	800f192 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f16c:	4b0c      	ldr	r3, [pc, #48]	; (800f1a0 <xQueueGenericReset+0xcc>)
 800f16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f172:	601a      	str	r2, [r3, #0]
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	e009      	b.n	800f192 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	3310      	adds	r3, #16
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fef1 	bl	800ef6a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	3324      	adds	r3, #36	; 0x24
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7ff feec 	bl	800ef6a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f192:	f001 fad7 	bl	8010744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f196:	2301      	movs	r3, #1
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	e000ed04 	.word	0xe000ed04

0800f1a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08e      	sub	sp, #56	; 0x38
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10a      	bne.n	800f1ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f1e6:	bf00      	nop
 800f1e8:	e7fe      	b.n	800f1e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d002      	beq.n	800f1f6 <xQueueGenericCreateStatic+0x52>
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <xQueueGenericCreateStatic+0x56>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e000      	b.n	800f1fc <xQueueGenericCreateStatic+0x58>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10a      	bne.n	800f216 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	623b      	str	r3, [r7, #32]
}
 800f212:	bf00      	nop
 800f214:	e7fe      	b.n	800f214 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d102      	bne.n	800f222 <xQueueGenericCreateStatic+0x7e>
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d101      	bne.n	800f226 <xQueueGenericCreateStatic+0x82>
 800f222:	2301      	movs	r3, #1
 800f224:	e000      	b.n	800f228 <xQueueGenericCreateStatic+0x84>
 800f226:	2300      	movs	r3, #0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d10a      	bne.n	800f242 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	61fb      	str	r3, [r7, #28]
}
 800f23e:	bf00      	nop
 800f240:	e7fe      	b.n	800f240 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f242:	2348      	movs	r3, #72	; 0x48
 800f244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b48      	cmp	r3, #72	; 0x48
 800f24a:	d00a      	beq.n	800f262 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	61bb      	str	r3, [r7, #24]
}
 800f25e:	bf00      	nop
 800f260:	e7fe      	b.n	800f260 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f262:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00d      	beq.n	800f28a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	2201      	movs	r2, #1
 800f272:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f276:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	4613      	mov	r3, r2
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	68b9      	ldr	r1, [r7, #8]
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f000 f83f 	bl	800f308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3730      	adds	r7, #48	; 0x30
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08a      	sub	sp, #40	; 0x28
 800f298:	af02      	add	r7, sp, #8
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <xQueueGenericCreate+0x2a>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	613b      	str	r3, [r7, #16]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	fb02 f303 	mul.w	r3, r2, r3
 800f2c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	3348      	adds	r3, #72	; 0x48
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f001 faeb 	bl	80108a8 <pvPortMalloc>
 800f2d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f2d4:	69bb      	ldr	r3, [r7, #24]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d011      	beq.n	800f2fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	3348      	adds	r3, #72	; 0x48
 800f2e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f2ec:	79fa      	ldrb	r2, [r7, #7]
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f000 f805 	bl	800f308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f2fe:	69bb      	ldr	r3, [r7, #24]
	}
 800f300:	4618      	mov	r0, r3
 800f302:	3720      	adds	r7, #32
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
 800f314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d103      	bne.n	800f324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	69ba      	ldr	r2, [r7, #24]
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	e002      	b.n	800f32a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f336:	2101      	movs	r1, #1
 800f338:	69b8      	ldr	r0, [r7, #24]
 800f33a:	f7ff fecb 	bl	800f0d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f33e:	bf00      	nop
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
	...

0800f348 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08e      	sub	sp, #56	; 0x38
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f356:	2300      	movs	r3, #0
 800f358:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10a      	bne.n	800f37a <xQueueGenericSend+0x32>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f368:	f383 8811 	msr	BASEPRI, r3
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f376:	bf00      	nop
 800f378:	e7fe      	b.n	800f378 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d103      	bne.n	800f388 <xQueueGenericSend+0x40>
 800f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f384:	2b00      	cmp	r3, #0
 800f386:	d101      	bne.n	800f38c <xQueueGenericSend+0x44>
 800f388:	2301      	movs	r3, #1
 800f38a:	e000      	b.n	800f38e <xQueueGenericSend+0x46>
 800f38c:	2300      	movs	r3, #0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10a      	bne.n	800f3a8 <xQueueGenericSend+0x60>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3a4:	bf00      	nop
 800f3a6:	e7fe      	b.n	800f3a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d103      	bne.n	800f3b6 <xQueueGenericSend+0x6e>
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d101      	bne.n	800f3ba <xQueueGenericSend+0x72>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e000      	b.n	800f3bc <xQueueGenericSend+0x74>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10a      	bne.n	800f3d6 <xQueueGenericSend+0x8e>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	623b      	str	r3, [r7, #32]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3d6:	f000 ff4f 	bl	8010278 <xTaskGetSchedulerState>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d102      	bne.n	800f3e6 <xQueueGenericSend+0x9e>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <xQueueGenericSend+0xa2>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e000      	b.n	800f3ec <xQueueGenericSend+0xa4>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d10a      	bne.n	800f406 <xQueueGenericSend+0xbe>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	61fb      	str	r3, [r7, #28]
}
 800f402:	bf00      	nop
 800f404:	e7fe      	b.n	800f404 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f406:	f001 f96d 	bl	80106e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f412:	429a      	cmp	r2, r3
 800f414:	d302      	bcc.n	800f41c <xQueueGenericSend+0xd4>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b02      	cmp	r3, #2
 800f41a:	d129      	bne.n	800f470 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f41c:	683a      	ldr	r2, [r7, #0]
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f422:	f000 f88f 	bl	800f544 <prvCopyDataToQueue>
 800f426:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d010      	beq.n	800f452 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	3324      	adds	r3, #36	; 0x24
 800f434:	4618      	mov	r0, r3
 800f436:	f000 fd63 	bl	800ff00 <xTaskRemoveFromEventList>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d013      	beq.n	800f468 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f440:	4b3f      	ldr	r3, [pc, #252]	; (800f540 <xQueueGenericSend+0x1f8>)
 800f442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	e00a      	b.n	800f468 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	2b00      	cmp	r3, #0
 800f456:	d007      	beq.n	800f468 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f458:	4b39      	ldr	r3, [pc, #228]	; (800f540 <xQueueGenericSend+0x1f8>)
 800f45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f45e:	601a      	str	r2, [r3, #0]
 800f460:	f3bf 8f4f 	dsb	sy
 800f464:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f468:	f001 f96c 	bl	8010744 <vPortExitCritical>
				return pdPASS;
 800f46c:	2301      	movs	r3, #1
 800f46e:	e063      	b.n	800f538 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d103      	bne.n	800f47e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f476:	f001 f965 	bl	8010744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f47a:	2300      	movs	r3, #0
 800f47c:	e05c      	b.n	800f538 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f480:	2b00      	cmp	r3, #0
 800f482:	d106      	bne.n	800f492 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f484:	f107 0314 	add.w	r3, r7, #20
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fd9b 	bl	800ffc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f48e:	2301      	movs	r3, #1
 800f490:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f492:	f001 f957 	bl	8010744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f496:	f000 fb51 	bl	800fb3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f49a:	f001 f923 	bl	80106e4 <vPortEnterCritical>
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4a4:	b25b      	sxtb	r3, r3
 800f4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4aa:	d103      	bne.n	800f4b4 <xQueueGenericSend+0x16c>
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c0:	d103      	bne.n	800f4ca <xQueueGenericSend+0x182>
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4ca:	f001 f93b 	bl	8010744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4ce:	1d3a      	adds	r2, r7, #4
 800f4d0:	f107 0314 	add.w	r3, r7, #20
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 fd8a 	bl	800fff0 <xTaskCheckForTimeOut>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d124      	bne.n	800f52c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f4e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4e4:	f000 f8ea 	bl	800f6bc <prvIsQueueFull>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d018      	beq.n	800f520 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	3310      	adds	r3, #16
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f000 fcde 	bl	800feb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f4fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4fe:	f000 f88b 	bl	800f618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f502:	f000 fb29 	bl	800fb58 <xTaskResumeAll>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f47f af7c 	bne.w	800f406 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f50e:	4b0c      	ldr	r3, [pc, #48]	; (800f540 <xQueueGenericSend+0x1f8>)
 800f510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	f3bf 8f6f 	isb	sy
 800f51e:	e772      	b.n	800f406 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f522:	f000 f879 	bl	800f618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f526:	f000 fb17 	bl	800fb58 <xTaskResumeAll>
 800f52a:	e76c      	b.n	800f406 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f52c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f52e:	f000 f873 	bl	800f618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f532:	f000 fb11 	bl	800fb58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f536:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3738      	adds	r7, #56	; 0x38
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f550:	2300      	movs	r3, #0
 800f552:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f558:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10d      	bne.n	800f57e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d14d      	bne.n	800f606 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 fea0 	bl	80102b4 <xTaskPriorityDisinherit>
 800f574:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2200      	movs	r2, #0
 800f57a:	609a      	str	r2, [r3, #8]
 800f57c:	e043      	b.n	800f606 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d119      	bne.n	800f5b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6858      	ldr	r0, [r3, #4]
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58c:	461a      	mov	r2, r3
 800f58e:	68b9      	ldr	r1, [r7, #8]
 800f590:	f003 fe8c 	bl	80132ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f59c:	441a      	add	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d32b      	bcc.n	800f606 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	605a      	str	r2, [r3, #4]
 800f5b6:	e026      	b.n	800f606 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	68d8      	ldr	r0, [r3, #12]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	68b9      	ldr	r1, [r7, #8]
 800f5c4:	f003 fe72 	bl	80132ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	68da      	ldr	r2, [r3, #12]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d0:	425b      	negs	r3, r3
 800f5d2:	441a      	add	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	68da      	ldr	r2, [r3, #12]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d207      	bcs.n	800f5f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	689a      	ldr	r2, [r3, #8]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ec:	425b      	negs	r3, r3
 800f5ee:	441a      	add	r2, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d105      	bne.n	800f606 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	3b01      	subs	r3, #1
 800f604:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f60e:	697b      	ldr	r3, [r7, #20]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3718      	adds	r7, #24
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f620:	f001 f860 	bl	80106e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f62c:	e011      	b.n	800f652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f632:	2b00      	cmp	r3, #0
 800f634:	d012      	beq.n	800f65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3324      	adds	r3, #36	; 0x24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fc60 	bl	800ff00 <xTaskRemoveFromEventList>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f646:	f000 fd35 	bl	80100b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f656:	2b00      	cmp	r3, #0
 800f658:	dce9      	bgt.n	800f62e <prvUnlockQueue+0x16>
 800f65a:	e000      	b.n	800f65e <prvUnlockQueue+0x46>
					break;
 800f65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	22ff      	movs	r2, #255	; 0xff
 800f662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f666:	f001 f86d 	bl	8010744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f66a:	f001 f83b 	bl	80106e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f676:	e011      	b.n	800f69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d012      	beq.n	800f6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	3310      	adds	r3, #16
 800f684:	4618      	mov	r0, r3
 800f686:	f000 fc3b 	bl	800ff00 <xTaskRemoveFromEventList>
 800f68a:	4603      	mov	r3, r0
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d001      	beq.n	800f694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f690:	f000 fd10 	bl	80100b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f694:	7bbb      	ldrb	r3, [r7, #14]
 800f696:	3b01      	subs	r3, #1
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dce9      	bgt.n	800f678 <prvUnlockQueue+0x60>
 800f6a4:	e000      	b.n	800f6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	22ff      	movs	r2, #255	; 0xff
 800f6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f6b0:	f001 f848 	bl	8010744 <vPortExitCritical>
}
 800f6b4:	bf00      	nop
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6c4:	f001 f80e 	bl	80106e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d102      	bne.n	800f6da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
 800f6d8:	e001      	b.n	800f6de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6de:	f001 f831 	bl	8010744 <vPortExitCritical>

	return xReturn;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08e      	sub	sp, #56	; 0x38
 800f6f0:	af04      	add	r7, sp, #16
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	623b      	str	r3, [r7, #32]
}
 800f712:	bf00      	nop
 800f714:	e7fe      	b.n	800f714 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10a      	bne.n	800f732 <xTaskCreateStatic+0x46>
	__asm volatile
 800f71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f720:	f383 8811 	msr	BASEPRI, r3
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	f3bf 8f4f 	dsb	sy
 800f72c:	61fb      	str	r3, [r7, #28]
}
 800f72e:	bf00      	nop
 800f730:	e7fe      	b.n	800f730 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f732:	2354      	movs	r3, #84	; 0x54
 800f734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	2b54      	cmp	r3, #84	; 0x54
 800f73a:	d00a      	beq.n	800f752 <xTaskCreateStatic+0x66>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	f383 8811 	msr	BASEPRI, r3
 800f744:	f3bf 8f6f 	isb	sy
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	61bb      	str	r3, [r7, #24]
}
 800f74e:	bf00      	nop
 800f750:	e7fe      	b.n	800f750 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	2b00      	cmp	r3, #0
 800f758:	d01e      	beq.n	800f798 <xTaskCreateStatic+0xac>
 800f75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d01b      	beq.n	800f798 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	2202      	movs	r2, #2
 800f76e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f772:	2300      	movs	r3, #0
 800f774:	9303      	str	r3, [sp, #12]
 800f776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	f107 0314 	add.w	r3, r7, #20
 800f77e:	9301      	str	r3, [sp, #4]
 800f780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	68b9      	ldr	r1, [r7, #8]
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 f850 	bl	800f830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f792:	f000 f8d5 	bl	800f940 <prvAddNewTaskToReadyList>
 800f796:	e001      	b.n	800f79c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f798:	2300      	movs	r3, #0
 800f79a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f79c:	697b      	ldr	r3, [r7, #20]
	}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3728      	adds	r7, #40	; 0x28
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b08c      	sub	sp, #48	; 0x30
 800f7aa:	af04      	add	r7, sp, #16
 800f7ac:	60f8      	str	r0, [r7, #12]
 800f7ae:	60b9      	str	r1, [r7, #8]
 800f7b0:	603b      	str	r3, [r7, #0]
 800f7b2:	4613      	mov	r3, r2
 800f7b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7b6:	88fb      	ldrh	r3, [r7, #6]
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f001 f874 	bl	80108a8 <pvPortMalloc>
 800f7c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00e      	beq.n	800f7e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7c8:	2054      	movs	r0, #84	; 0x54
 800f7ca:	f001 f86d 	bl	80108a8 <pvPortMalloc>
 800f7ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d003      	beq.n	800f7de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	631a      	str	r2, [r3, #48]	; 0x30
 800f7dc:	e005      	b.n	800f7ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7de:	6978      	ldr	r0, [r7, #20]
 800f7e0:	f001 f92e 	bl	8010a40 <vPortFree>
 800f7e4:	e001      	b.n	800f7ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d017      	beq.n	800f820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7f8:	88fa      	ldrh	r2, [r7, #6]
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	9303      	str	r3, [sp, #12]
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	9302      	str	r3, [sp, #8]
 800f802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f804:	9301      	str	r3, [sp, #4]
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	9300      	str	r3, [sp, #0]
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f000 f80e 	bl	800f830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f814:	69f8      	ldr	r0, [r7, #28]
 800f816:	f000 f893 	bl	800f940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f81a:	2301      	movs	r3, #1
 800f81c:	61bb      	str	r3, [r7, #24]
 800f81e:	e002      	b.n	800f826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f820:	f04f 33ff 	mov.w	r3, #4294967295
 800f824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f826:	69bb      	ldr	r3, [r7, #24]
	}
 800f828:	4618      	mov	r0, r3
 800f82a:	3720      	adds	r7, #32
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b088      	sub	sp, #32
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f848:	3b01      	subs	r3, #1
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	4413      	add	r3, r2
 800f84e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	f023 0307 	bic.w	r3, r3, #7
 800f856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	f003 0307 	and.w	r3, r3, #7
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00a      	beq.n	800f878 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	617b      	str	r3, [r7, #20]
}
 800f874:	bf00      	nop
 800f876:	e7fe      	b.n	800f876 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d01f      	beq.n	800f8be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
 800f882:	e012      	b.n	800f8aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	4413      	add	r3, r2
 800f88a:	7819      	ldrb	r1, [r3, #0]
 800f88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	4413      	add	r3, r2
 800f892:	3334      	adds	r3, #52	; 0x34
 800f894:	460a      	mov	r2, r1
 800f896:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	4413      	add	r3, r2
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d006      	beq.n	800f8b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	61fb      	str	r3, [r7, #28]
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	2b0f      	cmp	r3, #15
 800f8ae:	d9e9      	bls.n	800f884 <prvInitialiseNewTask+0x54>
 800f8b0:	e000      	b.n	800f8b4 <prvInitialiseNewTask+0x84>
			{
				break;
 800f8b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8bc:	e003      	b.n	800f8c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	2b06      	cmp	r3, #6
 800f8ca:	d901      	bls.n	800f8d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8cc:	2306      	movs	r3, #6
 800f8ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	2200      	movs	r2, #0
 800f8e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7ff fb5f 	bl	800efaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ee:	3318      	adds	r3, #24
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff fb5a 	bl	800efaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fe:	f1c3 0207 	rsb	r2, r3, #7
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90e:	2200      	movs	r2, #0
 800f910:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	68f9      	ldr	r1, [r7, #12]
 800f91e:	69b8      	ldr	r0, [r7, #24]
 800f920:	f000 fdb4 	bl	801048c <pxPortInitialiseStack>
 800f924:	4602      	mov	r2, r0
 800f926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f928:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d002      	beq.n	800f936 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f936:	bf00      	nop
 800f938:	3720      	adds	r7, #32
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
	...

0800f940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f948:	f000 fecc 	bl	80106e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f94c:	4b2a      	ldr	r3, [pc, #168]	; (800f9f8 <prvAddNewTaskToReadyList+0xb8>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	3301      	adds	r3, #1
 800f952:	4a29      	ldr	r2, [pc, #164]	; (800f9f8 <prvAddNewTaskToReadyList+0xb8>)
 800f954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f956:	4b29      	ldr	r3, [pc, #164]	; (800f9fc <prvAddNewTaskToReadyList+0xbc>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d109      	bne.n	800f972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f95e:	4a27      	ldr	r2, [pc, #156]	; (800f9fc <prvAddNewTaskToReadyList+0xbc>)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f964:	4b24      	ldr	r3, [pc, #144]	; (800f9f8 <prvAddNewTaskToReadyList+0xb8>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d110      	bne.n	800f98e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f96c:	f000 fbc6 	bl	80100fc <prvInitialiseTaskLists>
 800f970:	e00d      	b.n	800f98e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f972:	4b23      	ldr	r3, [pc, #140]	; (800fa00 <prvAddNewTaskToReadyList+0xc0>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d109      	bne.n	800f98e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f97a:	4b20      	ldr	r3, [pc, #128]	; (800f9fc <prvAddNewTaskToReadyList+0xbc>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f984:	429a      	cmp	r2, r3
 800f986:	d802      	bhi.n	800f98e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f988:	4a1c      	ldr	r2, [pc, #112]	; (800f9fc <prvAddNewTaskToReadyList+0xbc>)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f98e:	4b1d      	ldr	r3, [pc, #116]	; (800fa04 <prvAddNewTaskToReadyList+0xc4>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3301      	adds	r3, #1
 800f994:	4a1b      	ldr	r2, [pc, #108]	; (800fa04 <prvAddNewTaskToReadyList+0xc4>)
 800f996:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99c:	2201      	movs	r2, #1
 800f99e:	409a      	lsls	r2, r3
 800f9a0:	4b19      	ldr	r3, [pc, #100]	; (800fa08 <prvAddNewTaskToReadyList+0xc8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	4a18      	ldr	r2, [pc, #96]	; (800fa08 <prvAddNewTaskToReadyList+0xc8>)
 800f9a8:	6013      	str	r3, [r2, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4a15      	ldr	r2, [pc, #84]	; (800fa0c <prvAddNewTaskToReadyList+0xcc>)
 800f9b8:	441a      	add	r2, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	3304      	adds	r3, #4
 800f9be:	4619      	mov	r1, r3
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	f7ff faff 	bl	800efc4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9c6:	f000 febd 	bl	8010744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9ca:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <prvAddNewTaskToReadyList+0xc0>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00e      	beq.n	800f9f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9d2:	4b0a      	ldr	r3, [pc, #40]	; (800f9fc <prvAddNewTaskToReadyList+0xbc>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d207      	bcs.n	800f9f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9e0:	4b0b      	ldr	r3, [pc, #44]	; (800fa10 <prvAddNewTaskToReadyList+0xd0>)
 800f9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9e6:	601a      	str	r2, [r3, #0]
 800f9e8:	f3bf 8f4f 	dsb	sy
 800f9ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	20002c1c 	.word	0x20002c1c
 800f9fc:	20002b1c 	.word	0x20002b1c
 800fa00:	20002c28 	.word	0x20002c28
 800fa04:	20002c38 	.word	0x20002c38
 800fa08:	20002c24 	.word	0x20002c24
 800fa0c:	20002b20 	.word	0x20002b20
 800fa10:	e000ed04 	.word	0xe000ed04

0800fa14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d017      	beq.n	800fa56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa26:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <vTaskDelay+0x60>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00a      	beq.n	800fa44 <vTaskDelay+0x30>
	__asm volatile
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	60bb      	str	r3, [r7, #8]
}
 800fa40:	bf00      	nop
 800fa42:	e7fe      	b.n	800fa42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa44:	f000 f87a 	bl	800fb3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa48:	2100      	movs	r1, #0
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 fcb8 	bl	80103c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa50:	f000 f882 	bl	800fb58 <xTaskResumeAll>
 800fa54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d107      	bne.n	800fa6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa5c:	4b06      	ldr	r3, [pc, #24]	; (800fa78 <vTaskDelay+0x64>)
 800fa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa6c:	bf00      	nop
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	20002c44 	.word	0x20002c44
 800fa78:	e000ed04 	.word	0xe000ed04

0800fa7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08a      	sub	sp, #40	; 0x28
 800fa80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa82:	2300      	movs	r3, #0
 800fa84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa86:	2300      	movs	r3, #0
 800fa88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa8a:	463a      	mov	r2, r7
 800fa8c:	1d39      	adds	r1, r7, #4
 800fa8e:	f107 0308 	add.w	r3, r7, #8
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f0 fdac 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	9202      	str	r2, [sp, #8]
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	2300      	movs	r3, #0
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	2300      	movs	r3, #0
 800faa8:	460a      	mov	r2, r1
 800faaa:	491e      	ldr	r1, [pc, #120]	; (800fb24 <vTaskStartScheduler+0xa8>)
 800faac:	481e      	ldr	r0, [pc, #120]	; (800fb28 <vTaskStartScheduler+0xac>)
 800faae:	f7ff fe1d 	bl	800f6ec <xTaskCreateStatic>
 800fab2:	4603      	mov	r3, r0
 800fab4:	4a1d      	ldr	r2, [pc, #116]	; (800fb2c <vTaskStartScheduler+0xb0>)
 800fab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fab8:	4b1c      	ldr	r3, [pc, #112]	; (800fb2c <vTaskStartScheduler+0xb0>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d002      	beq.n	800fac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fac0:	2301      	movs	r3, #1
 800fac2:	617b      	str	r3, [r7, #20]
 800fac4:	e001      	b.n	800faca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	d116      	bne.n	800fafe <vTaskStartScheduler+0x82>
	__asm volatile
 800fad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad4:	f383 8811 	msr	BASEPRI, r3
 800fad8:	f3bf 8f6f 	isb	sy
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	613b      	str	r3, [r7, #16]
}
 800fae2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fae4:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <vTaskStartScheduler+0xb4>)
 800fae6:	f04f 32ff 	mov.w	r2, #4294967295
 800faea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800faec:	4b11      	ldr	r3, [pc, #68]	; (800fb34 <vTaskStartScheduler+0xb8>)
 800faee:	2201      	movs	r2, #1
 800faf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800faf2:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <vTaskStartScheduler+0xbc>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800faf8:	f000 fd52 	bl	80105a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fafc:	e00e      	b.n	800fb1c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb04:	d10a      	bne.n	800fb1c <vTaskStartScheduler+0xa0>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	60fb      	str	r3, [r7, #12]
}
 800fb18:	bf00      	nop
 800fb1a:	e7fe      	b.n	800fb1a <vTaskStartScheduler+0x9e>
}
 800fb1c:	bf00      	nop
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	08013344 	.word	0x08013344
 800fb28:	080100cd 	.word	0x080100cd
 800fb2c:	20002c40 	.word	0x20002c40
 800fb30:	20002c3c 	.word	0x20002c3c
 800fb34:	20002c28 	.word	0x20002c28
 800fb38:	20002c20 	.word	0x20002c20

0800fb3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb40:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <vTaskSuspendAll+0x18>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	3301      	adds	r3, #1
 800fb46:	4a03      	ldr	r2, [pc, #12]	; (800fb54 <vTaskSuspendAll+0x18>)
 800fb48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb4a:	bf00      	nop
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	20002c44 	.word	0x20002c44

0800fb58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb62:	2300      	movs	r3, #0
 800fb64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb66:	4b41      	ldr	r3, [pc, #260]	; (800fc6c <xTaskResumeAll+0x114>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d10a      	bne.n	800fb84 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	603b      	str	r3, [r7, #0]
}
 800fb80:	bf00      	nop
 800fb82:	e7fe      	b.n	800fb82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb84:	f000 fdae 	bl	80106e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb88:	4b38      	ldr	r3, [pc, #224]	; (800fc6c <xTaskResumeAll+0x114>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	4a37      	ldr	r2, [pc, #220]	; (800fc6c <xTaskResumeAll+0x114>)
 800fb90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb92:	4b36      	ldr	r3, [pc, #216]	; (800fc6c <xTaskResumeAll+0x114>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d161      	bne.n	800fc5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb9a:	4b35      	ldr	r3, [pc, #212]	; (800fc70 <xTaskResumeAll+0x118>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d05d      	beq.n	800fc5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fba2:	e02e      	b.n	800fc02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fba4:	4b33      	ldr	r3, [pc, #204]	; (800fc74 <xTaskResumeAll+0x11c>)
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	3318      	adds	r3, #24
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff fa64 	bl	800f07e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff fa5f 	bl	800f07e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	409a      	lsls	r2, r3
 800fbc8:	4b2b      	ldr	r3, [pc, #172]	; (800fc78 <xTaskResumeAll+0x120>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	4a2a      	ldr	r2, [pc, #168]	; (800fc78 <xTaskResumeAll+0x120>)
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4413      	add	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4a27      	ldr	r2, [pc, #156]	; (800fc7c <xTaskResumeAll+0x124>)
 800fbe0:	441a      	add	r2, r3
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7ff f9eb 	bl	800efc4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf2:	4b23      	ldr	r3, [pc, #140]	; (800fc80 <xTaskResumeAll+0x128>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d302      	bcc.n	800fc02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fbfc:	4b21      	ldr	r3, [pc, #132]	; (800fc84 <xTaskResumeAll+0x12c>)
 800fbfe:	2201      	movs	r2, #1
 800fc00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <xTaskResumeAll+0x11c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1cc      	bne.n	800fba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc10:	f000 fb12 	bl	8010238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc14:	4b1c      	ldr	r3, [pc, #112]	; (800fc88 <xTaskResumeAll+0x130>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d010      	beq.n	800fc42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc20:	f000 f836 	bl	800fc90 <xTaskIncrementTick>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d002      	beq.n	800fc30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fc2a:	4b16      	ldr	r3, [pc, #88]	; (800fc84 <xTaskResumeAll+0x12c>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1f1      	bne.n	800fc20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fc3c:	4b12      	ldr	r3, [pc, #72]	; (800fc88 <xTaskResumeAll+0x130>)
 800fc3e:	2200      	movs	r2, #0
 800fc40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc42:	4b10      	ldr	r3, [pc, #64]	; (800fc84 <xTaskResumeAll+0x12c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d009      	beq.n	800fc5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc4e:	4b0f      	ldr	r3, [pc, #60]	; (800fc8c <xTaskResumeAll+0x134>)
 800fc50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	f3bf 8f4f 	dsb	sy
 800fc5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc5e:	f000 fd71 	bl	8010744 <vPortExitCritical>

	return xAlreadyYielded;
 800fc62:	68bb      	ldr	r3, [r7, #8]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20002c44 	.word	0x20002c44
 800fc70:	20002c1c 	.word	0x20002c1c
 800fc74:	20002bdc 	.word	0x20002bdc
 800fc78:	20002c24 	.word	0x20002c24
 800fc7c:	20002b20 	.word	0x20002b20
 800fc80:	20002b1c 	.word	0x20002b1c
 800fc84:	20002c30 	.word	0x20002c30
 800fc88:	20002c2c 	.word	0x20002c2c
 800fc8c:	e000ed04 	.word	0xe000ed04

0800fc90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b086      	sub	sp, #24
 800fc94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc96:	2300      	movs	r3, #0
 800fc98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc9a:	4b4e      	ldr	r3, [pc, #312]	; (800fdd4 <xTaskIncrementTick+0x144>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	f040 808e 	bne.w	800fdc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fca4:	4b4c      	ldr	r3, [pc, #304]	; (800fdd8 <xTaskIncrementTick+0x148>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcac:	4a4a      	ldr	r2, [pc, #296]	; (800fdd8 <xTaskIncrementTick+0x148>)
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d120      	bne.n	800fcfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcb8:	4b48      	ldr	r3, [pc, #288]	; (800fddc <xTaskIncrementTick+0x14c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <xTaskIncrementTick+0x48>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	603b      	str	r3, [r7, #0]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <xTaskIncrementTick+0x46>
 800fcd8:	4b40      	ldr	r3, [pc, #256]	; (800fddc <xTaskIncrementTick+0x14c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	4b40      	ldr	r3, [pc, #256]	; (800fde0 <xTaskIncrementTick+0x150>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a3e      	ldr	r2, [pc, #248]	; (800fddc <xTaskIncrementTick+0x14c>)
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	4a3e      	ldr	r2, [pc, #248]	; (800fde0 <xTaskIncrementTick+0x150>)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6013      	str	r3, [r2, #0]
 800fcec:	4b3d      	ldr	r3, [pc, #244]	; (800fde4 <xTaskIncrementTick+0x154>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	4a3c      	ldr	r2, [pc, #240]	; (800fde4 <xTaskIncrementTick+0x154>)
 800fcf4:	6013      	str	r3, [r2, #0]
 800fcf6:	f000 fa9f 	bl	8010238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	; (800fde8 <xTaskIncrementTick+0x158>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d348      	bcc.n	800fd96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd04:	4b35      	ldr	r3, [pc, #212]	; (800fddc <xTaskIncrementTick+0x14c>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d104      	bne.n	800fd18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd0e:	4b36      	ldr	r3, [pc, #216]	; (800fde8 <xTaskIncrementTick+0x158>)
 800fd10:	f04f 32ff 	mov.w	r2, #4294967295
 800fd14:	601a      	str	r2, [r3, #0]
					break;
 800fd16:	e03e      	b.n	800fd96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd18:	4b30      	ldr	r3, [pc, #192]	; (800fddc <xTaskIncrementTick+0x14c>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd28:	693a      	ldr	r2, [r7, #16]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d203      	bcs.n	800fd38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd30:	4a2d      	ldr	r2, [pc, #180]	; (800fde8 <xTaskIncrementTick+0x158>)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd36:	e02e      	b.n	800fd96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7ff f99e 	bl	800f07e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d004      	beq.n	800fd54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	3318      	adds	r3, #24
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7ff f995 	bl	800f07e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd58:	2201      	movs	r2, #1
 800fd5a:	409a      	lsls	r2, r3
 800fd5c:	4b23      	ldr	r3, [pc, #140]	; (800fdec <xTaskIncrementTick+0x15c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4313      	orrs	r3, r2
 800fd62:	4a22      	ldr	r2, [pc, #136]	; (800fdec <xTaskIncrementTick+0x15c>)
 800fd64:	6013      	str	r3, [r2, #0]
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	4413      	add	r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	4a1f      	ldr	r2, [pc, #124]	; (800fdf0 <xTaskIncrementTick+0x160>)
 800fd74:	441a      	add	r2, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	f7ff f921 	bl	800efc4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd86:	4b1b      	ldr	r3, [pc, #108]	; (800fdf4 <xTaskIncrementTick+0x164>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d3b9      	bcc.n	800fd04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd90:	2301      	movs	r3, #1
 800fd92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd94:	e7b6      	b.n	800fd04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd96:	4b17      	ldr	r3, [pc, #92]	; (800fdf4 <xTaskIncrementTick+0x164>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd9c:	4914      	ldr	r1, [pc, #80]	; (800fdf0 <xTaskIncrementTick+0x160>)
 800fd9e:	4613      	mov	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	440b      	add	r3, r1
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d901      	bls.n	800fdb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdb2:	4b11      	ldr	r3, [pc, #68]	; (800fdf8 <xTaskIncrementTick+0x168>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d007      	beq.n	800fdca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	617b      	str	r3, [r7, #20]
 800fdbe:	e004      	b.n	800fdca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdc0:	4b0e      	ldr	r3, [pc, #56]	; (800fdfc <xTaskIncrementTick+0x16c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	4a0d      	ldr	r2, [pc, #52]	; (800fdfc <xTaskIncrementTick+0x16c>)
 800fdc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdca:	697b      	ldr	r3, [r7, #20]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3718      	adds	r7, #24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20002c44 	.word	0x20002c44
 800fdd8:	20002c20 	.word	0x20002c20
 800fddc:	20002bd4 	.word	0x20002bd4
 800fde0:	20002bd8 	.word	0x20002bd8
 800fde4:	20002c34 	.word	0x20002c34
 800fde8:	20002c3c 	.word	0x20002c3c
 800fdec:	20002c24 	.word	0x20002c24
 800fdf0:	20002b20 	.word	0x20002b20
 800fdf4:	20002b1c 	.word	0x20002b1c
 800fdf8:	20002c30 	.word	0x20002c30
 800fdfc:	20002c2c 	.word	0x20002c2c

0800fe00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe00:	b480      	push	{r7}
 800fe02:	b087      	sub	sp, #28
 800fe04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe06:	4b27      	ldr	r3, [pc, #156]	; (800fea4 <vTaskSwitchContext+0xa4>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe0e:	4b26      	ldr	r3, [pc, #152]	; (800fea8 <vTaskSwitchContext+0xa8>)
 800fe10:	2201      	movs	r2, #1
 800fe12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe14:	e03f      	b.n	800fe96 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fe16:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <vTaskSwitchContext+0xa8>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe1c:	4b23      	ldr	r3, [pc, #140]	; (800feac <vTaskSwitchContext+0xac>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	fab3 f383 	clz	r3, r3
 800fe28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fe2a:	7afb      	ldrb	r3, [r7, #11]
 800fe2c:	f1c3 031f 	rsb	r3, r3, #31
 800fe30:	617b      	str	r3, [r7, #20]
 800fe32:	491f      	ldr	r1, [pc, #124]	; (800feb0 <vTaskSwitchContext+0xb0>)
 800fe34:	697a      	ldr	r2, [r7, #20]
 800fe36:	4613      	mov	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	440b      	add	r3, r1
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d10a      	bne.n	800fe5c <vTaskSwitchContext+0x5c>
	__asm volatile
 800fe46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4a:	f383 8811 	msr	BASEPRI, r3
 800fe4e:	f3bf 8f6f 	isb	sy
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	607b      	str	r3, [r7, #4]
}
 800fe58:	bf00      	nop
 800fe5a:	e7fe      	b.n	800fe5a <vTaskSwitchContext+0x5a>
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	009b      	lsls	r3, r3, #2
 800fe62:	4413      	add	r3, r2
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4a12      	ldr	r2, [pc, #72]	; (800feb0 <vTaskSwitchContext+0xb0>)
 800fe68:	4413      	add	r3, r2
 800fe6a:	613b      	str	r3, [r7, #16]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	605a      	str	r2, [r3, #4]
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	685a      	ldr	r2, [r3, #4]
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	3308      	adds	r3, #8
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d104      	bne.n	800fe8c <vTaskSwitchContext+0x8c>
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	685a      	ldr	r2, [r3, #4]
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	605a      	str	r2, [r3, #4]
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	4a08      	ldr	r2, [pc, #32]	; (800feb4 <vTaskSwitchContext+0xb4>)
 800fe94:	6013      	str	r3, [r2, #0]
}
 800fe96:	bf00      	nop
 800fe98:	371c      	adds	r7, #28
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	20002c44 	.word	0x20002c44
 800fea8:	20002c30 	.word	0x20002c30
 800feac:	20002c24 	.word	0x20002c24
 800feb0:	20002b20 	.word	0x20002b20
 800feb4:	20002b1c 	.word	0x20002b1c

0800feb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10a      	bne.n	800fede <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	60fb      	str	r3, [r7, #12]
}
 800feda:	bf00      	nop
 800fedc:	e7fe      	b.n	800fedc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fede:	4b07      	ldr	r3, [pc, #28]	; (800fefc <vTaskPlaceOnEventList+0x44>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3318      	adds	r3, #24
 800fee4:	4619      	mov	r1, r3
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f7ff f890 	bl	800f00c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800feec:	2101      	movs	r1, #1
 800feee:	6838      	ldr	r0, [r7, #0]
 800fef0:	f000 fa66 	bl	80103c0 <prvAddCurrentTaskToDelayedList>
}
 800fef4:	bf00      	nop
 800fef6:	3710      	adds	r7, #16
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	20002b1c 	.word	0x20002b1c

0800ff00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d10a      	bne.n	800ff2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60fb      	str	r3, [r7, #12]
}
 800ff28:	bf00      	nop
 800ff2a:	e7fe      	b.n	800ff2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	3318      	adds	r3, #24
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff f8a4 	bl	800f07e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff36:	4b1d      	ldr	r3, [pc, #116]	; (800ffac <xTaskRemoveFromEventList+0xac>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d11c      	bne.n	800ff78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	3304      	adds	r3, #4
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7ff f89b 	bl	800f07e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	409a      	lsls	r2, r3
 800ff50:	4b17      	ldr	r3, [pc, #92]	; (800ffb0 <xTaskRemoveFromEventList+0xb0>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4313      	orrs	r3, r2
 800ff56:	4a16      	ldr	r2, [pc, #88]	; (800ffb0 <xTaskRemoveFromEventList+0xb0>)
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5e:	4613      	mov	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	4413      	add	r3, r2
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4a13      	ldr	r2, [pc, #76]	; (800ffb4 <xTaskRemoveFromEventList+0xb4>)
 800ff68:	441a      	add	r2, r3
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	4619      	mov	r1, r3
 800ff70:	4610      	mov	r0, r2
 800ff72:	f7ff f827 	bl	800efc4 <vListInsertEnd>
 800ff76:	e005      	b.n	800ff84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	3318      	adds	r3, #24
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	480e      	ldr	r0, [pc, #56]	; (800ffb8 <xTaskRemoveFromEventList+0xb8>)
 800ff80:	f7ff f820 	bl	800efc4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff88:	4b0c      	ldr	r3, [pc, #48]	; (800ffbc <xTaskRemoveFromEventList+0xbc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d905      	bls.n	800ff9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff92:	2301      	movs	r3, #1
 800ff94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff96:	4b0a      	ldr	r3, [pc, #40]	; (800ffc0 <xTaskRemoveFromEventList+0xc0>)
 800ff98:	2201      	movs	r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	e001      	b.n	800ffa2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffa2:	697b      	ldr	r3, [r7, #20]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	20002c44 	.word	0x20002c44
 800ffb0:	20002c24 	.word	0x20002c24
 800ffb4:	20002b20 	.word	0x20002b20
 800ffb8:	20002bdc 	.word	0x20002bdc
 800ffbc:	20002b1c 	.word	0x20002b1c
 800ffc0:	20002c30 	.word	0x20002c30

0800ffc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <vTaskInternalSetTimeOutState+0x24>)
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <vTaskInternalSetTimeOutState+0x28>)
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	605a      	str	r2, [r3, #4]
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	20002c34 	.word	0x20002c34
 800ffec:	20002c20 	.word	0x20002c20

0800fff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b088      	sub	sp, #32
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10a      	bne.n	8010016 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	613b      	str	r3, [r7, #16]
}
 8010012:	bf00      	nop
 8010014:	e7fe      	b.n	8010014 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801001c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	60fb      	str	r3, [r7, #12]
}
 801002e:	bf00      	nop
 8010030:	e7fe      	b.n	8010030 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010032:	f000 fb57 	bl	80106e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010036:	4b1d      	ldr	r3, [pc, #116]	; (80100ac <xTaskCheckForTimeOut+0xbc>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	69ba      	ldr	r2, [r7, #24]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004e:	d102      	bne.n	8010056 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010050:	2300      	movs	r3, #0
 8010052:	61fb      	str	r3, [r7, #28]
 8010054:	e023      	b.n	801009e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	4b15      	ldr	r3, [pc, #84]	; (80100b0 <xTaskCheckForTimeOut+0xc0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	429a      	cmp	r2, r3
 8010060:	d007      	beq.n	8010072 <xTaskCheckForTimeOut+0x82>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	69ba      	ldr	r2, [r7, #24]
 8010068:	429a      	cmp	r2, r3
 801006a:	d302      	bcc.n	8010072 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801006c:	2301      	movs	r3, #1
 801006e:	61fb      	str	r3, [r7, #28]
 8010070:	e015      	b.n	801009e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	697a      	ldr	r2, [r7, #20]
 8010078:	429a      	cmp	r2, r3
 801007a:	d20b      	bcs.n	8010094 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	1ad2      	subs	r2, r2, r3
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f7ff ff9b 	bl	800ffc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801008e:	2300      	movs	r3, #0
 8010090:	61fb      	str	r3, [r7, #28]
 8010092:	e004      	b.n	801009e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801009a:	2301      	movs	r3, #1
 801009c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801009e:	f000 fb51 	bl	8010744 <vPortExitCritical>

	return xReturn;
 80100a2:	69fb      	ldr	r3, [r7, #28]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20002c20 	.word	0x20002c20
 80100b0:	20002c34 	.word	0x20002c34

080100b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100b4:	b480      	push	{r7}
 80100b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100b8:	4b03      	ldr	r3, [pc, #12]	; (80100c8 <vTaskMissedYield+0x14>)
 80100ba:	2201      	movs	r2, #1
 80100bc:	601a      	str	r2, [r3, #0]
}
 80100be:	bf00      	nop
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	20002c30 	.word	0x20002c30

080100cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100d4:	f000 f852 	bl	801017c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <prvIdleTask+0x28>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d9f9      	bls.n	80100d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80100e0:	4b05      	ldr	r3, [pc, #20]	; (80100f8 <prvIdleTask+0x2c>)
 80100e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e6:	601a      	str	r2, [r3, #0]
 80100e8:	f3bf 8f4f 	dsb	sy
 80100ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100f0:	e7f0      	b.n	80100d4 <prvIdleTask+0x8>
 80100f2:	bf00      	nop
 80100f4:	20002b20 	.word	0x20002b20
 80100f8:	e000ed04 	.word	0xe000ed04

080100fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010102:	2300      	movs	r3, #0
 8010104:	607b      	str	r3, [r7, #4]
 8010106:	e00c      	b.n	8010122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	4613      	mov	r3, r2
 801010c:	009b      	lsls	r3, r3, #2
 801010e:	4413      	add	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	4a12      	ldr	r2, [pc, #72]	; (801015c <prvInitialiseTaskLists+0x60>)
 8010114:	4413      	add	r3, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7fe ff27 	bl	800ef6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3301      	adds	r3, #1
 8010120:	607b      	str	r3, [r7, #4]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b06      	cmp	r3, #6
 8010126:	d9ef      	bls.n	8010108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010128:	480d      	ldr	r0, [pc, #52]	; (8010160 <prvInitialiseTaskLists+0x64>)
 801012a:	f7fe ff1e 	bl	800ef6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801012e:	480d      	ldr	r0, [pc, #52]	; (8010164 <prvInitialiseTaskLists+0x68>)
 8010130:	f7fe ff1b 	bl	800ef6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010134:	480c      	ldr	r0, [pc, #48]	; (8010168 <prvInitialiseTaskLists+0x6c>)
 8010136:	f7fe ff18 	bl	800ef6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801013a:	480c      	ldr	r0, [pc, #48]	; (801016c <prvInitialiseTaskLists+0x70>)
 801013c:	f7fe ff15 	bl	800ef6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010140:	480b      	ldr	r0, [pc, #44]	; (8010170 <prvInitialiseTaskLists+0x74>)
 8010142:	f7fe ff12 	bl	800ef6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <prvInitialiseTaskLists+0x78>)
 8010148:	4a05      	ldr	r2, [pc, #20]	; (8010160 <prvInitialiseTaskLists+0x64>)
 801014a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801014c:	4b0a      	ldr	r3, [pc, #40]	; (8010178 <prvInitialiseTaskLists+0x7c>)
 801014e:	4a05      	ldr	r2, [pc, #20]	; (8010164 <prvInitialiseTaskLists+0x68>)
 8010150:	601a      	str	r2, [r3, #0]
}
 8010152:	bf00      	nop
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20002b20 	.word	0x20002b20
 8010160:	20002bac 	.word	0x20002bac
 8010164:	20002bc0 	.word	0x20002bc0
 8010168:	20002bdc 	.word	0x20002bdc
 801016c:	20002bf0 	.word	0x20002bf0
 8010170:	20002c08 	.word	0x20002c08
 8010174:	20002bd4 	.word	0x20002bd4
 8010178:	20002bd8 	.word	0x20002bd8

0801017c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010182:	e019      	b.n	80101b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010184:	f000 faae 	bl	80106e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010188:	4b10      	ldr	r3, [pc, #64]	; (80101cc <prvCheckTasksWaitingTermination+0x50>)
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	3304      	adds	r3, #4
 8010194:	4618      	mov	r0, r3
 8010196:	f7fe ff72 	bl	800f07e <uxListRemove>
				--uxCurrentNumberOfTasks;
 801019a:	4b0d      	ldr	r3, [pc, #52]	; (80101d0 <prvCheckTasksWaitingTermination+0x54>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	3b01      	subs	r3, #1
 80101a0:	4a0b      	ldr	r2, [pc, #44]	; (80101d0 <prvCheckTasksWaitingTermination+0x54>)
 80101a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101a4:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	4a0a      	ldr	r2, [pc, #40]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101ae:	f000 fac9 	bl	8010744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f000 f810 	bl	80101d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101b8:	4b06      	ldr	r3, [pc, #24]	; (80101d4 <prvCheckTasksWaitingTermination+0x58>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1e1      	bne.n	8010184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101c0:	bf00      	nop
 80101c2:	bf00      	nop
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20002bf0 	.word	0x20002bf0
 80101d0:	20002c1c 	.word	0x20002c1c
 80101d4:	20002c04 	.word	0x20002c04

080101d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d108      	bne.n	80101fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ee:	4618      	mov	r0, r3
 80101f0:	f000 fc26 	bl	8010a40 <vPortFree>
				vPortFree( pxTCB );
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 fc23 	bl	8010a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101fa:	e018      	b.n	801022e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010202:	2b01      	cmp	r3, #1
 8010204:	d103      	bne.n	801020e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fc1a 	bl	8010a40 <vPortFree>
	}
 801020c:	e00f      	b.n	801022e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010214:	2b02      	cmp	r3, #2
 8010216:	d00a      	beq.n	801022e <prvDeleteTCB+0x56>
	__asm volatile
 8010218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021c:	f383 8811 	msr	BASEPRI, r3
 8010220:	f3bf 8f6f 	isb	sy
 8010224:	f3bf 8f4f 	dsb	sy
 8010228:	60fb      	str	r3, [r7, #12]
}
 801022a:	bf00      	nop
 801022c:	e7fe      	b.n	801022c <prvDeleteTCB+0x54>
	}
 801022e:	bf00      	nop
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801023e:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <prvResetNextTaskUnblockTime+0x38>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d104      	bne.n	8010252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010248:	4b0a      	ldr	r3, [pc, #40]	; (8010274 <prvResetNextTaskUnblockTime+0x3c>)
 801024a:	f04f 32ff 	mov.w	r2, #4294967295
 801024e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010250:	e008      	b.n	8010264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010252:	4b07      	ldr	r3, [pc, #28]	; (8010270 <prvResetNextTaskUnblockTime+0x38>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	4a04      	ldr	r2, [pc, #16]	; (8010274 <prvResetNextTaskUnblockTime+0x3c>)
 8010262:	6013      	str	r3, [r2, #0]
}
 8010264:	bf00      	nop
 8010266:	370c      	adds	r7, #12
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr
 8010270:	20002bd4 	.word	0x20002bd4
 8010274:	20002c3c 	.word	0x20002c3c

08010278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801027e:	4b0b      	ldr	r3, [pc, #44]	; (80102ac <xTaskGetSchedulerState+0x34>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d102      	bne.n	801028c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010286:	2301      	movs	r3, #1
 8010288:	607b      	str	r3, [r7, #4]
 801028a:	e008      	b.n	801029e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801028c:	4b08      	ldr	r3, [pc, #32]	; (80102b0 <xTaskGetSchedulerState+0x38>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d102      	bne.n	801029a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010294:	2302      	movs	r3, #2
 8010296:	607b      	str	r3, [r7, #4]
 8010298:	e001      	b.n	801029e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801029a:	2300      	movs	r3, #0
 801029c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801029e:	687b      	ldr	r3, [r7, #4]
	}
 80102a0:	4618      	mov	r0, r3
 80102a2:	370c      	adds	r7, #12
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr
 80102ac:	20002c28 	.word	0x20002c28
 80102b0:	20002c44 	.word	0x20002c44

080102b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b086      	sub	sp, #24
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102c0:	2300      	movs	r3, #0
 80102c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d06e      	beq.n	80103a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102ca:	4b3a      	ldr	r3, [pc, #232]	; (80103b4 <xTaskPriorityDisinherit+0x100>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	693a      	ldr	r2, [r7, #16]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d00a      	beq.n	80102ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80102d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	60fb      	str	r3, [r7, #12]
}
 80102e6:	bf00      	nop
 80102e8:	e7fe      	b.n	80102e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10a      	bne.n	8010308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	60bb      	str	r3, [r7, #8]
}
 8010304:	bf00      	nop
 8010306:	e7fe      	b.n	8010306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801030c:	1e5a      	subs	r2, r3, #1
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801031a:	429a      	cmp	r2, r3
 801031c:	d044      	beq.n	80103a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010322:	2b00      	cmp	r3, #0
 8010324:	d140      	bne.n	80103a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	3304      	adds	r3, #4
 801032a:	4618      	mov	r0, r3
 801032c:	f7fe fea7 	bl	800f07e <uxListRemove>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d115      	bne.n	8010362 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033a:	491f      	ldr	r1, [pc, #124]	; (80103b8 <xTaskPriorityDisinherit+0x104>)
 801033c:	4613      	mov	r3, r2
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4413      	add	r3, r2
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	440b      	add	r3, r1
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <xTaskPriorityDisinherit+0xae>
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010350:	2201      	movs	r2, #1
 8010352:	fa02 f303 	lsl.w	r3, r2, r3
 8010356:	43da      	mvns	r2, r3
 8010358:	4b18      	ldr	r3, [pc, #96]	; (80103bc <xTaskPriorityDisinherit+0x108>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4013      	ands	r3, r2
 801035e:	4a17      	ldr	r2, [pc, #92]	; (80103bc <xTaskPriorityDisinherit+0x108>)
 8010360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801036e:	f1c3 0207 	rsb	r2, r3, #7
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037a:	2201      	movs	r2, #1
 801037c:	409a      	lsls	r2, r3
 801037e:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <xTaskPriorityDisinherit+0x108>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4313      	orrs	r3, r2
 8010384:	4a0d      	ldr	r2, [pc, #52]	; (80103bc <xTaskPriorityDisinherit+0x108>)
 8010386:	6013      	str	r3, [r2, #0]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038c:	4613      	mov	r3, r2
 801038e:	009b      	lsls	r3, r3, #2
 8010390:	4413      	add	r3, r2
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	4a08      	ldr	r2, [pc, #32]	; (80103b8 <xTaskPriorityDisinherit+0x104>)
 8010396:	441a      	add	r2, r3
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	3304      	adds	r3, #4
 801039c:	4619      	mov	r1, r3
 801039e:	4610      	mov	r0, r2
 80103a0:	f7fe fe10 	bl	800efc4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103a4:	2301      	movs	r3, #1
 80103a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103a8:	697b      	ldr	r3, [r7, #20]
	}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3718      	adds	r7, #24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20002b1c 	.word	0x20002b1c
 80103b8:	20002b20 	.word	0x20002b20
 80103bc:	20002c24 	.word	0x20002c24

080103c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80103ca:	4b29      	ldr	r3, [pc, #164]	; (8010470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103d0:	4b28      	ldr	r3, [pc, #160]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	3304      	adds	r3, #4
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fe fe51 	bl	800f07e <uxListRemove>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10b      	bne.n	80103fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80103e2:	4b24      	ldr	r3, [pc, #144]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e8:	2201      	movs	r2, #1
 80103ea:	fa02 f303 	lsl.w	r3, r2, r3
 80103ee:	43da      	mvns	r2, r3
 80103f0:	4b21      	ldr	r3, [pc, #132]	; (8010478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4013      	ands	r3, r2
 80103f6:	4a20      	ldr	r2, [pc, #128]	; (8010478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80103f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010400:	d10a      	bne.n	8010418 <prvAddCurrentTaskToDelayedList+0x58>
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d007      	beq.n	8010418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010408:	4b1a      	ldr	r3, [pc, #104]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3304      	adds	r3, #4
 801040e:	4619      	mov	r1, r3
 8010410:	481a      	ldr	r0, [pc, #104]	; (801047c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010412:	f7fe fdd7 	bl	800efc4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010416:	e026      	b.n	8010466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010418:	68fa      	ldr	r2, [r7, #12]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4413      	add	r3, r2
 801041e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010420:	4b14      	ldr	r3, [pc, #80]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68ba      	ldr	r2, [r7, #8]
 8010426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	429a      	cmp	r2, r3
 801042e:	d209      	bcs.n	8010444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010430:	4b13      	ldr	r3, [pc, #76]	; (8010480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	4b0f      	ldr	r3, [pc, #60]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	3304      	adds	r3, #4
 801043a:	4619      	mov	r1, r3
 801043c:	4610      	mov	r0, r2
 801043e:	f7fe fde5 	bl	800f00c <vListInsert>
}
 8010442:	e010      	b.n	8010466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010444:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	4b0a      	ldr	r3, [pc, #40]	; (8010474 <prvAddCurrentTaskToDelayedList+0xb4>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3304      	adds	r3, #4
 801044e:	4619      	mov	r1, r3
 8010450:	4610      	mov	r0, r2
 8010452:	f7fe fddb 	bl	800f00c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010456:	4b0c      	ldr	r3, [pc, #48]	; (8010488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	429a      	cmp	r2, r3
 801045e:	d202      	bcs.n	8010466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010460:	4a09      	ldr	r2, [pc, #36]	; (8010488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	6013      	str	r3, [r2, #0]
}
 8010466:	bf00      	nop
 8010468:	3710      	adds	r7, #16
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20002c20 	.word	0x20002c20
 8010474:	20002b1c 	.word	0x20002b1c
 8010478:	20002c24 	.word	0x20002c24
 801047c:	20002c08 	.word	0x20002c08
 8010480:	20002bd8 	.word	0x20002bd8
 8010484:	20002bd4 	.word	0x20002bd4
 8010488:	20002c3c 	.word	0x20002c3c

0801048c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801048c:	b480      	push	{r7}
 801048e:	b085      	sub	sp, #20
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3b04      	subs	r3, #4
 801049c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80104a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	3b04      	subs	r3, #4
 80104aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	f023 0201 	bic.w	r2, r3, #1
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	3b04      	subs	r3, #4
 80104ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104bc:	4a0c      	ldr	r2, [pc, #48]	; (80104f0 <pxPortInitialiseStack+0x64>)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3b14      	subs	r3, #20
 80104c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3b04      	subs	r3, #4
 80104d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f06f 0202 	mvn.w	r2, #2
 80104da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	3b20      	subs	r3, #32
 80104e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80104e2:	68fb      	ldr	r3, [r7, #12]
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3714      	adds	r7, #20
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr
 80104f0:	080104f5 	.word	0x080104f5

080104f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80104f4:	b480      	push	{r7}
 80104f6:	b085      	sub	sp, #20
 80104f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80104fe:	4b12      	ldr	r3, [pc, #72]	; (8010548 <prvTaskExitError+0x54>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010506:	d00a      	beq.n	801051e <prvTaskExitError+0x2a>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60fb      	str	r3, [r7, #12]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <prvTaskExitError+0x28>
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	60bb      	str	r3, [r7, #8]
}
 8010530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010532:	bf00      	nop
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0fc      	beq.n	8010534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801053a:	bf00      	nop
 801053c:	bf00      	nop
 801053e:	3714      	adds	r7, #20
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	20000098 	.word	0x20000098
 801054c:	00000000 	.word	0x00000000

08010550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010550:	4b07      	ldr	r3, [pc, #28]	; (8010570 <pxCurrentTCBConst2>)
 8010552:	6819      	ldr	r1, [r3, #0]
 8010554:	6808      	ldr	r0, [r1, #0]
 8010556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055a:	f380 8809 	msr	PSP, r0
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f04f 0000 	mov.w	r0, #0
 8010566:	f380 8811 	msr	BASEPRI, r0
 801056a:	4770      	bx	lr
 801056c:	f3af 8000 	nop.w

08010570 <pxCurrentTCBConst2>:
 8010570:	20002b1c 	.word	0x20002b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010574:	bf00      	nop
 8010576:	bf00      	nop

08010578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010578:	4808      	ldr	r0, [pc, #32]	; (801059c <prvPortStartFirstTask+0x24>)
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	6800      	ldr	r0, [r0, #0]
 801057e:	f380 8808 	msr	MSP, r0
 8010582:	f04f 0000 	mov.w	r0, #0
 8010586:	f380 8814 	msr	CONTROL, r0
 801058a:	b662      	cpsie	i
 801058c:	b661      	cpsie	f
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	df00      	svc	0
 8010598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801059a:	bf00      	nop
 801059c:	e000ed08 	.word	0xe000ed08

080105a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b086      	sub	sp, #24
 80105a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80105a6:	4b46      	ldr	r3, [pc, #280]	; (80106c0 <xPortStartScheduler+0x120>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a46      	ldr	r2, [pc, #280]	; (80106c4 <xPortStartScheduler+0x124>)
 80105ac:	4293      	cmp	r3, r2
 80105ae:	d10a      	bne.n	80105c6 <xPortStartScheduler+0x26>
	__asm volatile
 80105b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b4:	f383 8811 	msr	BASEPRI, r3
 80105b8:	f3bf 8f6f 	isb	sy
 80105bc:	f3bf 8f4f 	dsb	sy
 80105c0:	613b      	str	r3, [r7, #16]
}
 80105c2:	bf00      	nop
 80105c4:	e7fe      	b.n	80105c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80105c6:	4b3e      	ldr	r3, [pc, #248]	; (80106c0 <xPortStartScheduler+0x120>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	4a3f      	ldr	r2, [pc, #252]	; (80106c8 <xPortStartScheduler+0x128>)
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d10a      	bne.n	80105e6 <xPortStartScheduler+0x46>
	__asm volatile
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	60fb      	str	r3, [r7, #12]
}
 80105e2:	bf00      	nop
 80105e4:	e7fe      	b.n	80105e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105e6:	4b39      	ldr	r3, [pc, #228]	; (80106cc <xPortStartScheduler+0x12c>)
 80105e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	b2db      	uxtb	r3, r3
 80105f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	22ff      	movs	r2, #255	; 0xff
 80105f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010600:	78fb      	ldrb	r3, [r7, #3]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010608:	b2da      	uxtb	r2, r3
 801060a:	4b31      	ldr	r3, [pc, #196]	; (80106d0 <xPortStartScheduler+0x130>)
 801060c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801060e:	4b31      	ldr	r3, [pc, #196]	; (80106d4 <xPortStartScheduler+0x134>)
 8010610:	2207      	movs	r2, #7
 8010612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010614:	e009      	b.n	801062a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010616:	4b2f      	ldr	r3, [pc, #188]	; (80106d4 <xPortStartScheduler+0x134>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3b01      	subs	r3, #1
 801061c:	4a2d      	ldr	r2, [pc, #180]	; (80106d4 <xPortStartScheduler+0x134>)
 801061e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010620:	78fb      	ldrb	r3, [r7, #3]
 8010622:	b2db      	uxtb	r3, r3
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	b2db      	uxtb	r3, r3
 8010628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801062a:	78fb      	ldrb	r3, [r7, #3]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010632:	2b80      	cmp	r3, #128	; 0x80
 8010634:	d0ef      	beq.n	8010616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010636:	4b27      	ldr	r3, [pc, #156]	; (80106d4 <xPortStartScheduler+0x134>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f1c3 0307 	rsb	r3, r3, #7
 801063e:	2b04      	cmp	r3, #4
 8010640:	d00a      	beq.n	8010658 <xPortStartScheduler+0xb8>
	__asm volatile
 8010642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010646:	f383 8811 	msr	BASEPRI, r3
 801064a:	f3bf 8f6f 	isb	sy
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	60bb      	str	r3, [r7, #8]
}
 8010654:	bf00      	nop
 8010656:	e7fe      	b.n	8010656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010658:	4b1e      	ldr	r3, [pc, #120]	; (80106d4 <xPortStartScheduler+0x134>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	021b      	lsls	r3, r3, #8
 801065e:	4a1d      	ldr	r2, [pc, #116]	; (80106d4 <xPortStartScheduler+0x134>)
 8010660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010662:	4b1c      	ldr	r3, [pc, #112]	; (80106d4 <xPortStartScheduler+0x134>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801066a:	4a1a      	ldr	r2, [pc, #104]	; (80106d4 <xPortStartScheduler+0x134>)
 801066c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	b2da      	uxtb	r2, r3
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010676:	4b18      	ldr	r3, [pc, #96]	; (80106d8 <xPortStartScheduler+0x138>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a17      	ldr	r2, [pc, #92]	; (80106d8 <xPortStartScheduler+0x138>)
 801067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010682:	4b15      	ldr	r3, [pc, #84]	; (80106d8 <xPortStartScheduler+0x138>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4a14      	ldr	r2, [pc, #80]	; (80106d8 <xPortStartScheduler+0x138>)
 8010688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801068c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801068e:	f000 f8dd 	bl	801084c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010692:	4b12      	ldr	r3, [pc, #72]	; (80106dc <xPortStartScheduler+0x13c>)
 8010694:	2200      	movs	r2, #0
 8010696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010698:	f000 f8fc 	bl	8010894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801069c:	4b10      	ldr	r3, [pc, #64]	; (80106e0 <xPortStartScheduler+0x140>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a0f      	ldr	r2, [pc, #60]	; (80106e0 <xPortStartScheduler+0x140>)
 80106a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80106a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80106a8:	f7ff ff66 	bl	8010578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106ac:	f7ff fba8 	bl	800fe00 <vTaskSwitchContext>
	prvTaskExitError();
 80106b0:	f7ff ff20 	bl	80104f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3718      	adds	r7, #24
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	e000ed00 	.word	0xe000ed00
 80106c4:	410fc271 	.word	0x410fc271
 80106c8:	410fc270 	.word	0x410fc270
 80106cc:	e000e400 	.word	0xe000e400
 80106d0:	20002c48 	.word	0x20002c48
 80106d4:	20002c4c 	.word	0x20002c4c
 80106d8:	e000ed20 	.word	0xe000ed20
 80106dc:	20000098 	.word	0x20000098
 80106e0:	e000ef34 	.word	0xe000ef34

080106e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
	__asm volatile
 80106ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ee:	f383 8811 	msr	BASEPRI, r3
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	f3bf 8f4f 	dsb	sy
 80106fa:	607b      	str	r3, [r7, #4]
}
 80106fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106fe:	4b0f      	ldr	r3, [pc, #60]	; (801073c <vPortEnterCritical+0x58>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3301      	adds	r3, #1
 8010704:	4a0d      	ldr	r2, [pc, #52]	; (801073c <vPortEnterCritical+0x58>)
 8010706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010708:	4b0c      	ldr	r3, [pc, #48]	; (801073c <vPortEnterCritical+0x58>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d10f      	bne.n	8010730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010710:	4b0b      	ldr	r3, [pc, #44]	; (8010740 <vPortEnterCritical+0x5c>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	b2db      	uxtb	r3, r3
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00a      	beq.n	8010730 <vPortEnterCritical+0x4c>
	__asm volatile
 801071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	603b      	str	r3, [r7, #0]
}
 801072c:	bf00      	nop
 801072e:	e7fe      	b.n	801072e <vPortEnterCritical+0x4a>
	}
}
 8010730:	bf00      	nop
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr
 801073c:	20000098 	.word	0x20000098
 8010740:	e000ed04 	.word	0xe000ed04

08010744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801074a:	4b12      	ldr	r3, [pc, #72]	; (8010794 <vPortExitCritical+0x50>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d10a      	bne.n	8010768 <vPortExitCritical+0x24>
	__asm volatile
 8010752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010756:	f383 8811 	msr	BASEPRI, r3
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	607b      	str	r3, [r7, #4]
}
 8010764:	bf00      	nop
 8010766:	e7fe      	b.n	8010766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010768:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <vPortExitCritical+0x50>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	3b01      	subs	r3, #1
 801076e:	4a09      	ldr	r2, [pc, #36]	; (8010794 <vPortExitCritical+0x50>)
 8010770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010772:	4b08      	ldr	r3, [pc, #32]	; (8010794 <vPortExitCritical+0x50>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d105      	bne.n	8010786 <vPortExitCritical+0x42>
 801077a:	2300      	movs	r3, #0
 801077c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010786:	bf00      	nop
 8010788:	370c      	adds	r7, #12
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	20000098 	.word	0x20000098
	...

080107a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80107a0:	f3ef 8009 	mrs	r0, PSP
 80107a4:	f3bf 8f6f 	isb	sy
 80107a8:	4b15      	ldr	r3, [pc, #84]	; (8010800 <pxCurrentTCBConst>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	f01e 0f10 	tst.w	lr, #16
 80107b0:	bf08      	it	eq
 80107b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ba:	6010      	str	r0, [r2, #0]
 80107bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80107c4:	f380 8811 	msr	BASEPRI, r0
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	f7ff fb16 	bl	800fe00 <vTaskSwitchContext>
 80107d4:	f04f 0000 	mov.w	r0, #0
 80107d8:	f380 8811 	msr	BASEPRI, r0
 80107dc:	bc09      	pop	{r0, r3}
 80107de:	6819      	ldr	r1, [r3, #0]
 80107e0:	6808      	ldr	r0, [r1, #0]
 80107e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e6:	f01e 0f10 	tst.w	lr, #16
 80107ea:	bf08      	it	eq
 80107ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107f0:	f380 8809 	msr	PSP, r0
 80107f4:	f3bf 8f6f 	isb	sy
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop
 80107fc:	f3af 8000 	nop.w

08010800 <pxCurrentTCBConst>:
 8010800:	20002b1c 	.word	0x20002b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010804:	bf00      	nop
 8010806:	bf00      	nop

08010808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
	__asm volatile
 801080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010812:	f383 8811 	msr	BASEPRI, r3
 8010816:	f3bf 8f6f 	isb	sy
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	607b      	str	r3, [r7, #4]
}
 8010820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010822:	f7ff fa35 	bl	800fc90 <xTaskIncrementTick>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d003      	beq.n	8010834 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801082c:	4b06      	ldr	r3, [pc, #24]	; (8010848 <SysTick_Handler+0x40>)
 801082e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	2300      	movs	r3, #0
 8010836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	f383 8811 	msr	BASEPRI, r3
}
 801083e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	e000ed04 	.word	0xe000ed04

0801084c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801084c:	b480      	push	{r7}
 801084e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010850:	4b0b      	ldr	r3, [pc, #44]	; (8010880 <vPortSetupTimerInterrupt+0x34>)
 8010852:	2200      	movs	r2, #0
 8010854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010856:	4b0b      	ldr	r3, [pc, #44]	; (8010884 <vPortSetupTimerInterrupt+0x38>)
 8010858:	2200      	movs	r2, #0
 801085a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801085c:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <vPortSetupTimerInterrupt+0x3c>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4a0a      	ldr	r2, [pc, #40]	; (801088c <vPortSetupTimerInterrupt+0x40>)
 8010862:	fba2 2303 	umull	r2, r3, r2, r3
 8010866:	099b      	lsrs	r3, r3, #6
 8010868:	4a09      	ldr	r2, [pc, #36]	; (8010890 <vPortSetupTimerInterrupt+0x44>)
 801086a:	3b01      	subs	r3, #1
 801086c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801086e:	4b04      	ldr	r3, [pc, #16]	; (8010880 <vPortSetupTimerInterrupt+0x34>)
 8010870:	2207      	movs	r2, #7
 8010872:	601a      	str	r2, [r3, #0]
}
 8010874:	bf00      	nop
 8010876:	46bd      	mov	sp, r7
 8010878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087c:	4770      	bx	lr
 801087e:	bf00      	nop
 8010880:	e000e010 	.word	0xe000e010
 8010884:	e000e018 	.word	0xe000e018
 8010888:	20000000 	.word	0x20000000
 801088c:	10624dd3 	.word	0x10624dd3
 8010890:	e000e014 	.word	0xe000e014

08010894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80108a4 <vPortEnableVFP+0x10>
 8010898:	6801      	ldr	r1, [r0, #0]
 801089a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801089e:	6001      	str	r1, [r0, #0]
 80108a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80108a2:	bf00      	nop
 80108a4:	e000ed88 	.word	0xe000ed88

080108a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b08a      	sub	sp, #40	; 0x28
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80108b0:	2300      	movs	r3, #0
 80108b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80108b4:	f7ff f942 	bl	800fb3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80108b8:	4b5b      	ldr	r3, [pc, #364]	; (8010a28 <pvPortMalloc+0x180>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d101      	bne.n	80108c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108c0:	f000 f920 	bl	8010b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108c4:	4b59      	ldr	r3, [pc, #356]	; (8010a2c <pvPortMalloc+0x184>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4013      	ands	r3, r2
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f040 8093 	bne.w	80109f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d01d      	beq.n	8010914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80108d8:	2208      	movs	r2, #8
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4413      	add	r3, r2
 80108de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f003 0307 	and.w	r3, r3, #7
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d014      	beq.n	8010914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f023 0307 	bic.w	r3, r3, #7
 80108f0:	3308      	adds	r3, #8
 80108f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f003 0307 	and.w	r3, r3, #7
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00a      	beq.n	8010914 <pvPortMalloc+0x6c>
	__asm volatile
 80108fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	617b      	str	r3, [r7, #20]
}
 8010910:	bf00      	nop
 8010912:	e7fe      	b.n	8010912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d06e      	beq.n	80109f8 <pvPortMalloc+0x150>
 801091a:	4b45      	ldr	r3, [pc, #276]	; (8010a30 <pvPortMalloc+0x188>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	429a      	cmp	r2, r3
 8010922:	d869      	bhi.n	80109f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010924:	4b43      	ldr	r3, [pc, #268]	; (8010a34 <pvPortMalloc+0x18c>)
 8010926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010928:	4b42      	ldr	r3, [pc, #264]	; (8010a34 <pvPortMalloc+0x18c>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801092e:	e004      	b.n	801093a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	429a      	cmp	r2, r3
 8010942:	d903      	bls.n	801094c <pvPortMalloc+0xa4>
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1f1      	bne.n	8010930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801094c:	4b36      	ldr	r3, [pc, #216]	; (8010a28 <pvPortMalloc+0x180>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010952:	429a      	cmp	r2, r3
 8010954:	d050      	beq.n	80109f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2208      	movs	r2, #8
 801095c:	4413      	add	r3, r2
 801095e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096a:	685a      	ldr	r2, [r3, #4]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	1ad2      	subs	r2, r2, r3
 8010970:	2308      	movs	r3, #8
 8010972:	005b      	lsls	r3, r3, #1
 8010974:	429a      	cmp	r2, r3
 8010976:	d91f      	bls.n	80109b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4413      	add	r3, r2
 801097e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	f003 0307 	and.w	r3, r3, #7
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <pvPortMalloc+0xf8>
	__asm volatile
 801098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	613b      	str	r3, [r7, #16]
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80109a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a2:	685a      	ldr	r2, [r3, #4]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	1ad2      	subs	r2, r2, r3
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80109b2:	69b8      	ldr	r0, [r7, #24]
 80109b4:	f000 f908 	bl	8010bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109b8:	4b1d      	ldr	r3, [pc, #116]	; (8010a30 <pvPortMalloc+0x188>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	4a1b      	ldr	r2, [pc, #108]	; (8010a30 <pvPortMalloc+0x188>)
 80109c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109c6:	4b1a      	ldr	r3, [pc, #104]	; (8010a30 <pvPortMalloc+0x188>)
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	4b1b      	ldr	r3, [pc, #108]	; (8010a38 <pvPortMalloc+0x190>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d203      	bcs.n	80109da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109d2:	4b17      	ldr	r3, [pc, #92]	; (8010a30 <pvPortMalloc+0x188>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4a18      	ldr	r2, [pc, #96]	; (8010a38 <pvPortMalloc+0x190>)
 80109d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109dc:	685a      	ldr	r2, [r3, #4]
 80109de:	4b13      	ldr	r3, [pc, #76]	; (8010a2c <pvPortMalloc+0x184>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	431a      	orrs	r2, r3
 80109e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	2200      	movs	r2, #0
 80109ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80109ee:	4b13      	ldr	r3, [pc, #76]	; (8010a3c <pvPortMalloc+0x194>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3301      	adds	r3, #1
 80109f4:	4a11      	ldr	r2, [pc, #68]	; (8010a3c <pvPortMalloc+0x194>)
 80109f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109f8:	f7ff f8ae 	bl	800fb58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	f003 0307 	and.w	r3, r3, #7
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <pvPortMalloc+0x174>
	__asm volatile
 8010a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a0a:	f383 8811 	msr	BASEPRI, r3
 8010a0e:	f3bf 8f6f 	isb	sy
 8010a12:	f3bf 8f4f 	dsb	sy
 8010a16:	60fb      	str	r3, [r7, #12]
}
 8010a18:	bf00      	nop
 8010a1a:	e7fe      	b.n	8010a1a <pvPortMalloc+0x172>
	return pvReturn;
 8010a1c:	69fb      	ldr	r3, [r7, #28]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3728      	adds	r7, #40	; 0x28
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
 8010a26:	bf00      	nop
 8010a28:	20006858 	.word	0x20006858
 8010a2c:	2000686c 	.word	0x2000686c
 8010a30:	2000685c 	.word	0x2000685c
 8010a34:	20006850 	.word	0x20006850
 8010a38:	20006860 	.word	0x20006860
 8010a3c:	20006864 	.word	0x20006864

08010a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d04d      	beq.n	8010aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a52:	2308      	movs	r3, #8
 8010a54:	425b      	negs	r3, r3
 8010a56:	697a      	ldr	r2, [r7, #20]
 8010a58:	4413      	add	r3, r2
 8010a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a5c:	697b      	ldr	r3, [r7, #20]
 8010a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	685a      	ldr	r2, [r3, #4]
 8010a64:	4b24      	ldr	r3, [pc, #144]	; (8010af8 <vPortFree+0xb8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4013      	ands	r3, r2
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10a      	bne.n	8010a84 <vPortFree+0x44>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	60fb      	str	r3, [r7, #12]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00a      	beq.n	8010aa2 <vPortFree+0x62>
	__asm volatile
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	60bb      	str	r3, [r7, #8]
}
 8010a9e:	bf00      	nop
 8010aa0:	e7fe      	b.n	8010aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	4b14      	ldr	r3, [pc, #80]	; (8010af8 <vPortFree+0xb8>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4013      	ands	r3, r2
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01e      	beq.n	8010aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d11a      	bne.n	8010aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	4b0e      	ldr	r3, [pc, #56]	; (8010af8 <vPortFree+0xb8>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	43db      	mvns	r3, r3
 8010ac2:	401a      	ands	r2, r3
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ac8:	f7ff f838 	bl	800fb3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	685a      	ldr	r2, [r3, #4]
 8010ad0:	4b0a      	ldr	r3, [pc, #40]	; (8010afc <vPortFree+0xbc>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	4a09      	ldr	r2, [pc, #36]	; (8010afc <vPortFree+0xbc>)
 8010ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ada:	6938      	ldr	r0, [r7, #16]
 8010adc:	f000 f874 	bl	8010bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010ae0:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <vPortFree+0xc0>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	4a06      	ldr	r2, [pc, #24]	; (8010b00 <vPortFree+0xc0>)
 8010ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010aea:	f7ff f835 	bl	800fb58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010aee:	bf00      	nop
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
 8010af6:	bf00      	nop
 8010af8:	2000686c 	.word	0x2000686c
 8010afc:	2000685c 	.word	0x2000685c
 8010b00:	20006868 	.word	0x20006868

08010b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b10:	4b27      	ldr	r3, [pc, #156]	; (8010bb0 <prvHeapInit+0xac>)
 8010b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	f003 0307 	and.w	r3, r3, #7
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00c      	beq.n	8010b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	3307      	adds	r3, #7
 8010b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f023 0307 	bic.w	r3, r3, #7
 8010b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	4a1f      	ldr	r2, [pc, #124]	; (8010bb0 <prvHeapInit+0xac>)
 8010b34:	4413      	add	r3, r2
 8010b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b3c:	4a1d      	ldr	r2, [pc, #116]	; (8010bb4 <prvHeapInit+0xb0>)
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b42:	4b1c      	ldr	r3, [pc, #112]	; (8010bb4 <prvHeapInit+0xb0>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b50:	2208      	movs	r2, #8
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	1a9b      	subs	r3, r3, r2
 8010b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f023 0307 	bic.w	r3, r3, #7
 8010b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	4a15      	ldr	r2, [pc, #84]	; (8010bb8 <prvHeapInit+0xb4>)
 8010b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b66:	4b14      	ldr	r3, [pc, #80]	; (8010bb8 <prvHeapInit+0xb4>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b6e:	4b12      	ldr	r3, [pc, #72]	; (8010bb8 <prvHeapInit+0xb4>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2200      	movs	r2, #0
 8010b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	1ad2      	subs	r2, r2, r3
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b84:	4b0c      	ldr	r3, [pc, #48]	; (8010bb8 <prvHeapInit+0xb4>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	4a0a      	ldr	r2, [pc, #40]	; (8010bbc <prvHeapInit+0xb8>)
 8010b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	4a09      	ldr	r2, [pc, #36]	; (8010bc0 <prvHeapInit+0xbc>)
 8010b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b9c:	4b09      	ldr	r3, [pc, #36]	; (8010bc4 <prvHeapInit+0xc0>)
 8010b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ba2:	601a      	str	r2, [r3, #0]
}
 8010ba4:	bf00      	nop
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	20002c50 	.word	0x20002c50
 8010bb4:	20006850 	.word	0x20006850
 8010bb8:	20006858 	.word	0x20006858
 8010bbc:	20006860 	.word	0x20006860
 8010bc0:	2000685c 	.word	0x2000685c
 8010bc4:	2000686c 	.word	0x2000686c

08010bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bd0:	4b28      	ldr	r3, [pc, #160]	; (8010c74 <prvInsertBlockIntoFreeList+0xac>)
 8010bd2:	60fb      	str	r3, [r7, #12]
 8010bd4:	e002      	b.n	8010bdc <prvInsertBlockIntoFreeList+0x14>
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	60fb      	str	r3, [r7, #12]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d8f7      	bhi.n	8010bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d108      	bne.n	8010c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	685a      	ldr	r2, [r3, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	441a      	add	r2, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	441a      	add	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d118      	bne.n	8010c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	4b15      	ldr	r3, [pc, #84]	; (8010c78 <prvInsertBlockIntoFreeList+0xb0>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d00d      	beq.n	8010c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	441a      	add	r2, r3
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	601a      	str	r2, [r3, #0]
 8010c44:	e008      	b.n	8010c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c46:	4b0c      	ldr	r3, [pc, #48]	; (8010c78 <prvInsertBlockIntoFreeList+0xb0>)
 8010c48:	681a      	ldr	r2, [r3, #0]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	601a      	str	r2, [r3, #0]
 8010c4e:	e003      	b.n	8010c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d002      	beq.n	8010c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c66:	bf00      	nop
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	20006850 	.word	0x20006850
 8010c78:	20006858 	.word	0x20006858

08010c7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010c80:	2200      	movs	r2, #0
 8010c82:	4912      	ldr	r1, [pc, #72]	; (8010ccc <MX_USB_DEVICE_Init+0x50>)
 8010c84:	4812      	ldr	r0, [pc, #72]	; (8010cd0 <MX_USB_DEVICE_Init+0x54>)
 8010c86:	f7fc fdcd 	bl	800d824 <USBD_Init>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d001      	beq.n	8010c94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c90:	f7ef ff84 	bl	8000b9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010c94:	490f      	ldr	r1, [pc, #60]	; (8010cd4 <MX_USB_DEVICE_Init+0x58>)
 8010c96:	480e      	ldr	r0, [pc, #56]	; (8010cd0 <MX_USB_DEVICE_Init+0x54>)
 8010c98:	f7fc fdf4 	bl	800d884 <USBD_RegisterClass>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d001      	beq.n	8010ca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010ca2:	f7ef ff7b 	bl	8000b9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010ca6:	490c      	ldr	r1, [pc, #48]	; (8010cd8 <MX_USB_DEVICE_Init+0x5c>)
 8010ca8:	4809      	ldr	r0, [pc, #36]	; (8010cd0 <MX_USB_DEVICE_Init+0x54>)
 8010caa:	f7fc fce5 	bl	800d678 <USBD_CDC_RegisterInterface>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010cb4:	f7ef ff72 	bl	8000b9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010cb8:	4805      	ldr	r0, [pc, #20]	; (8010cd0 <MX_USB_DEVICE_Init+0x54>)
 8010cba:	f7fc fe19 	bl	800d8f0 <USBD_Start>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d001      	beq.n	8010cc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010cc4:	f7ef ff6a 	bl	8000b9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010cc8:	bf00      	nop
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	200000b0 	.word	0x200000b0
 8010cd0:	20006870 	.word	0x20006870
 8010cd4:	20000018 	.word	0x20000018
 8010cd8:	2000009c 	.word	0x2000009c

08010cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	4905      	ldr	r1, [pc, #20]	; (8010cf8 <CDC_Init_FS+0x1c>)
 8010ce4:	4805      	ldr	r0, [pc, #20]	; (8010cfc <CDC_Init_FS+0x20>)
 8010ce6:	f7fc fce1 	bl	800d6ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010cea:	4905      	ldr	r1, [pc, #20]	; (8010d00 <CDC_Init_FS+0x24>)
 8010cec:	4803      	ldr	r0, [pc, #12]	; (8010cfc <CDC_Init_FS+0x20>)
 8010cee:	f7fc fcff 	bl	800d6f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010cf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	20006f78 	.word	0x20006f78
 8010cfc:	20006870 	.word	0x20006870
 8010d00:	20006b90 	.word	0x20006b90

08010d04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010d04:	b480      	push	{r7}
 8010d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010d08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	6039      	str	r1, [r7, #0]
 8010d1e:	71fb      	strb	r3, [r7, #7]
 8010d20:	4613      	mov	r3, r2
 8010d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	2b23      	cmp	r3, #35	; 0x23
 8010d28:	d84a      	bhi.n	8010dc0 <CDC_Control_FS+0xac>
 8010d2a:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <CDC_Control_FS+0x1c>)
 8010d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d30:	08010dc1 	.word	0x08010dc1
 8010d34:	08010dc1 	.word	0x08010dc1
 8010d38:	08010dc1 	.word	0x08010dc1
 8010d3c:	08010dc1 	.word	0x08010dc1
 8010d40:	08010dc1 	.word	0x08010dc1
 8010d44:	08010dc1 	.word	0x08010dc1
 8010d48:	08010dc1 	.word	0x08010dc1
 8010d4c:	08010dc1 	.word	0x08010dc1
 8010d50:	08010dc1 	.word	0x08010dc1
 8010d54:	08010dc1 	.word	0x08010dc1
 8010d58:	08010dc1 	.word	0x08010dc1
 8010d5c:	08010dc1 	.word	0x08010dc1
 8010d60:	08010dc1 	.word	0x08010dc1
 8010d64:	08010dc1 	.word	0x08010dc1
 8010d68:	08010dc1 	.word	0x08010dc1
 8010d6c:	08010dc1 	.word	0x08010dc1
 8010d70:	08010dc1 	.word	0x08010dc1
 8010d74:	08010dc1 	.word	0x08010dc1
 8010d78:	08010dc1 	.word	0x08010dc1
 8010d7c:	08010dc1 	.word	0x08010dc1
 8010d80:	08010dc1 	.word	0x08010dc1
 8010d84:	08010dc1 	.word	0x08010dc1
 8010d88:	08010dc1 	.word	0x08010dc1
 8010d8c:	08010dc1 	.word	0x08010dc1
 8010d90:	08010dc1 	.word	0x08010dc1
 8010d94:	08010dc1 	.word	0x08010dc1
 8010d98:	08010dc1 	.word	0x08010dc1
 8010d9c:	08010dc1 	.word	0x08010dc1
 8010da0:	08010dc1 	.word	0x08010dc1
 8010da4:	08010dc1 	.word	0x08010dc1
 8010da8:	08010dc1 	.word	0x08010dc1
 8010dac:	08010dc1 	.word	0x08010dc1
 8010db0:	08010dc1 	.word	0x08010dc1
 8010db4:	08010dc1 	.word	0x08010dc1
 8010db8:	08010dc1 	.word	0x08010dc1
 8010dbc:	08010dc1 	.word	0x08010dc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010dc0:	bf00      	nop
  }

  return (USBD_OK);
 8010dc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010dda:	6879      	ldr	r1, [r7, #4]
 8010ddc:	480e      	ldr	r0, [pc, #56]	; (8010e18 <CDC_Receive_FS+0x48>)
 8010dde:	f7fc fc87 	bl	800d6f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010de2:	480d      	ldr	r0, [pc, #52]	; (8010e18 <CDC_Receive_FS+0x48>)
 8010de4:	f7fc fce8 	bl	800d7b8 <USBD_CDC_ReceivePacket>

  dataUsb_rxlength =  (uint8_t)* Len;
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	b2da      	uxtb	r2, r3
 8010dee:	4b0b      	ldr	r3, [pc, #44]	; (8010e1c <CDC_Receive_FS+0x4c>)
 8010df0:	701a      	strb	r2, [r3, #0]
  memcpy(dataUsb_rx,Buf,dataUsb_rxlength);
 8010df2:	4b0a      	ldr	r3, [pc, #40]	; (8010e1c <CDC_Receive_FS+0x4c>)
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	4809      	ldr	r0, [pc, #36]	; (8010e20 <CDC_Receive_FS+0x50>)
 8010dfc:	f002 fa56 	bl	80132ac <memcpy>
  AnalyserCMD(dataUsb_rx,dataUsb_rxlength, USB);
 8010e00:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <CDC_Receive_FS+0x4c>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2201      	movs	r2, #1
 8010e06:	4619      	mov	r1, r3
 8010e08:	4805      	ldr	r0, [pc, #20]	; (8010e20 <CDC_Receive_FS+0x50>)
 8010e0a:	f001 feb3 	bl	8012b74 <AnalyserCMD>

  return (USBD_OK);
 8010e0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	20006870 	.word	0x20006870
 8010e1c:	20006b4c 	.word	0x20006b4c
 8010e20:	20006b50 	.word	0x20006b50

08010e24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010e34:	4b0d      	ldr	r3, [pc, #52]	; (8010e6c <CDC_Transmit_FS+0x48>)
 8010e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010e46:	2301      	movs	r3, #1
 8010e48:	e00b      	b.n	8010e62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010e4a:	887b      	ldrh	r3, [r7, #2]
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	6879      	ldr	r1, [r7, #4]
 8010e50:	4806      	ldr	r0, [pc, #24]	; (8010e6c <CDC_Transmit_FS+0x48>)
 8010e52:	f7fc fc2b 	bl	800d6ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010e56:	4805      	ldr	r0, [pc, #20]	; (8010e6c <CDC_Transmit_FS+0x48>)
 8010e58:	f7fc fc68 	bl	800d72c <USBD_CDC_TransmitPacket>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	20006870 	.word	0x20006870

08010e70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b087      	sub	sp, #28
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	371c      	adds	r7, #28
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr
	...

08010e94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	6039      	str	r1, [r7, #0]
 8010e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	2212      	movs	r2, #18
 8010ea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010ea6:	4b03      	ldr	r3, [pc, #12]	; (8010eb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	200000cc 	.word	0x200000cc

08010eb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	6039      	str	r1, [r7, #0]
 8010ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010eca:	4b03      	ldr	r3, [pc, #12]	; (8010ed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	200000e0 	.word	0x200000e0

08010edc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	6039      	str	r1, [r7, #0]
 8010ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ee8:	79fb      	ldrb	r3, [r7, #7]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d105      	bne.n	8010efa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	4907      	ldr	r1, [pc, #28]	; (8010f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ef2:	4808      	ldr	r0, [pc, #32]	; (8010f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ef4:	f7fd fea8 	bl	800ec48 <USBD_GetString>
 8010ef8:	e004      	b.n	8010f04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	4904      	ldr	r1, [pc, #16]	; (8010f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8010efe:	4805      	ldr	r0, [pc, #20]	; (8010f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8010f00:	f7fd fea2 	bl	800ec48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f04:	4b02      	ldr	r3, [pc, #8]	; (8010f10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3708      	adds	r7, #8
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20007360 	.word	0x20007360
 8010f14:	0801334c 	.word	0x0801334c

08010f18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	6039      	str	r1, [r7, #0]
 8010f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010f24:	683a      	ldr	r2, [r7, #0]
 8010f26:	4904      	ldr	r1, [pc, #16]	; (8010f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010f28:	4804      	ldr	r0, [pc, #16]	; (8010f3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010f2a:	f7fd fe8d 	bl	800ec48 <USBD_GetString>
  return USBD_StrDesc;
 8010f2e:	4b02      	ldr	r3, [pc, #8]	; (8010f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	20007360 	.word	0x20007360
 8010f3c:	0801335c 	.word	0x0801335c

08010f40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	4603      	mov	r3, r0
 8010f48:	6039      	str	r1, [r7, #0]
 8010f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	221a      	movs	r2, #26
 8010f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010f52:	f000 f843 	bl	8010fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010f56:	4b02      	ldr	r3, [pc, #8]	; (8010f60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	200000e4 	.word	0x200000e4

08010f64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	6039      	str	r1, [r7, #0]
 8010f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010f70:	79fb      	ldrb	r3, [r7, #7]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d105      	bne.n	8010f82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010f76:	683a      	ldr	r2, [r7, #0]
 8010f78:	4907      	ldr	r1, [pc, #28]	; (8010f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010f7a:	4808      	ldr	r0, [pc, #32]	; (8010f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010f7c:	f7fd fe64 	bl	800ec48 <USBD_GetString>
 8010f80:	e004      	b.n	8010f8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	4904      	ldr	r1, [pc, #16]	; (8010f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010f86:	4805      	ldr	r0, [pc, #20]	; (8010f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8010f88:	f7fd fe5e 	bl	800ec48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f8c:	4b02      	ldr	r3, [pc, #8]	; (8010f98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3708      	adds	r7, #8
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	20007360 	.word	0x20007360
 8010f9c:	08013364 	.word	0x08013364

08010fa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d105      	bne.n	8010fbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	4907      	ldr	r1, [pc, #28]	; (8010fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010fb6:	4808      	ldr	r0, [pc, #32]	; (8010fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010fb8:	f7fd fe46 	bl	800ec48 <USBD_GetString>
 8010fbc:	e004      	b.n	8010fc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	4904      	ldr	r1, [pc, #16]	; (8010fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010fc2:	4805      	ldr	r0, [pc, #20]	; (8010fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010fc4:	f7fd fe40 	bl	800ec48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010fc8:	4b02      	ldr	r3, [pc, #8]	; (8010fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20007360 	.word	0x20007360
 8010fd8:	08013370 	.word	0x08013370

08010fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010fe2:	4b0f      	ldr	r3, [pc, #60]	; (8011020 <Get_SerialNum+0x44>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010fe8:	4b0e      	ldr	r3, [pc, #56]	; (8011024 <Get_SerialNum+0x48>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010fee:	4b0e      	ldr	r3, [pc, #56]	; (8011028 <Get_SerialNum+0x4c>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ff4:	68fa      	ldr	r2, [r7, #12]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d009      	beq.n	8011016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011002:	2208      	movs	r2, #8
 8011004:	4909      	ldr	r1, [pc, #36]	; (801102c <Get_SerialNum+0x50>)
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f000 f814 	bl	8011034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801100c:	2204      	movs	r2, #4
 801100e:	4908      	ldr	r1, [pc, #32]	; (8011030 <Get_SerialNum+0x54>)
 8011010:	68b8      	ldr	r0, [r7, #8]
 8011012:	f000 f80f 	bl	8011034 <IntToUnicode>
  }
}
 8011016:	bf00      	nop
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	1fff7a10 	.word	0x1fff7a10
 8011024:	1fff7a14 	.word	0x1fff7a14
 8011028:	1fff7a18 	.word	0x1fff7a18
 801102c:	200000e6 	.word	0x200000e6
 8011030:	200000f6 	.word	0x200000f6

08011034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	4613      	mov	r3, r2
 8011040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011046:	2300      	movs	r3, #0
 8011048:	75fb      	strb	r3, [r7, #23]
 801104a:	e027      	b.n	801109c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	0f1b      	lsrs	r3, r3, #28
 8011050:	2b09      	cmp	r3, #9
 8011052:	d80b      	bhi.n	801106c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	0f1b      	lsrs	r3, r3, #28
 8011058:	b2da      	uxtb	r2, r3
 801105a:	7dfb      	ldrb	r3, [r7, #23]
 801105c:	005b      	lsls	r3, r3, #1
 801105e:	4619      	mov	r1, r3
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	440b      	add	r3, r1
 8011064:	3230      	adds	r2, #48	; 0x30
 8011066:	b2d2      	uxtb	r2, r2
 8011068:	701a      	strb	r2, [r3, #0]
 801106a:	e00a      	b.n	8011082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	0f1b      	lsrs	r3, r3, #28
 8011070:	b2da      	uxtb	r2, r3
 8011072:	7dfb      	ldrb	r3, [r7, #23]
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	4619      	mov	r1, r3
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	440b      	add	r3, r1
 801107c:	3237      	adds	r2, #55	; 0x37
 801107e:	b2d2      	uxtb	r2, r2
 8011080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	011b      	lsls	r3, r3, #4
 8011086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011088:	7dfb      	ldrb	r3, [r7, #23]
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	3301      	adds	r3, #1
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	4413      	add	r3, r2
 8011092:	2200      	movs	r2, #0
 8011094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011096:	7dfb      	ldrb	r3, [r7, #23]
 8011098:	3301      	adds	r3, #1
 801109a:	75fb      	strb	r3, [r7, #23]
 801109c:	7dfa      	ldrb	r2, [r7, #23]
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d3d3      	bcc.n	801104c <IntToUnicode+0x18>
  }
}
 80110a4:	bf00      	nop
 80110a6:	bf00      	nop
 80110a8:	371c      	adds	r7, #28
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr
	...

080110b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b08a      	sub	sp, #40	; 0x28
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80110bc:	f107 0314 	add.w	r3, r7, #20
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	605a      	str	r2, [r3, #4]
 80110c6:	609a      	str	r2, [r3, #8]
 80110c8:	60da      	str	r2, [r3, #12]
 80110ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80110d4:	d13a      	bne.n	801114c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80110d6:	2300      	movs	r3, #0
 80110d8:	613b      	str	r3, [r7, #16]
 80110da:	4b1e      	ldr	r3, [pc, #120]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 80110dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110de:	4a1d      	ldr	r2, [pc, #116]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 80110e0:	f043 0301 	orr.w	r3, r3, #1
 80110e4:	6313      	str	r3, [r2, #48]	; 0x30
 80110e6:	4b1b      	ldr	r3, [pc, #108]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 80110e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	613b      	str	r3, [r7, #16]
 80110f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80110f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80110f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110f8:	2302      	movs	r3, #2
 80110fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011100:	2303      	movs	r3, #3
 8011102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011104:	230a      	movs	r3, #10
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011108:	f107 0314 	add.w	r3, r7, #20
 801110c:	4619      	mov	r1, r3
 801110e:	4812      	ldr	r0, [pc, #72]	; (8011158 <HAL_PCD_MspInit+0xa4>)
 8011110:	f7f1 fd5a 	bl	8002bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011114:	4b0f      	ldr	r3, [pc, #60]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 8011116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011118:	4a0e      	ldr	r2, [pc, #56]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 801111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801111e:	6353      	str	r3, [r2, #52]	; 0x34
 8011120:	2300      	movs	r3, #0
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	4b0b      	ldr	r3, [pc, #44]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 8011126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011128:	4a0a      	ldr	r2, [pc, #40]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 801112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801112e:	6453      	str	r3, [r2, #68]	; 0x44
 8011130:	4b08      	ldr	r3, [pc, #32]	; (8011154 <HAL_PCD_MspInit+0xa0>)
 8011132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011138:	60fb      	str	r3, [r7, #12]
 801113a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801113c:	2200      	movs	r2, #0
 801113e:	2105      	movs	r1, #5
 8011140:	2043      	movs	r0, #67	; 0x43
 8011142:	f7f1 f88a 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011146:	2043      	movs	r0, #67	; 0x43
 8011148:	f7f1 f8a3 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801114c:	bf00      	nop
 801114e:	3728      	adds	r7, #40	; 0x28
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	40023800 	.word	0x40023800
 8011158:	40020000 	.word	0x40020000

0801115c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011170:	4619      	mov	r1, r3
 8011172:	4610      	mov	r0, r2
 8011174:	f7fc fc09 	bl	800d98a <USBD_LL_SetupStage>
}
 8011178:	bf00      	nop
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	460b      	mov	r3, r1
 801118a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011192:	78fa      	ldrb	r2, [r7, #3]
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	4613      	mov	r3, r2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	4413      	add	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	440b      	add	r3, r1
 80111a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	78fb      	ldrb	r3, [r7, #3]
 80111a8:	4619      	mov	r1, r3
 80111aa:	f7fc fc43 	bl	800da34 <USBD_LL_DataOutStage>
}
 80111ae:	bf00      	nop
 80111b0:	3708      	adds	r7, #8
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b082      	sub	sp, #8
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	460b      	mov	r3, r1
 80111c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80111c8:	78fa      	ldrb	r2, [r7, #3]
 80111ca:	6879      	ldr	r1, [r7, #4]
 80111cc:	4613      	mov	r3, r2
 80111ce:	00db      	lsls	r3, r3, #3
 80111d0:	4413      	add	r3, r2
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	440b      	add	r3, r1
 80111d6:	334c      	adds	r3, #76	; 0x4c
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	78fb      	ldrb	r3, [r7, #3]
 80111dc:	4619      	mov	r1, r3
 80111de:	f7fc fcdc 	bl	800db9a <USBD_LL_DataInStage>
}
 80111e2:	bf00      	nop
 80111e4:	3708      	adds	r7, #8
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b082      	sub	sp, #8
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fc fe10 	bl	800de1e <USBD_LL_SOF>
}
 80111fe:	bf00      	nop
 8011200:	3708      	adds	r7, #8
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b084      	sub	sp, #16
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801120e:	2301      	movs	r3, #1
 8011210:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	2b02      	cmp	r3, #2
 8011218:	d001      	beq.n	801121e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801121a:	f7ef fcbf 	bl	8000b9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011224:	7bfa      	ldrb	r2, [r7, #15]
 8011226:	4611      	mov	r1, r2
 8011228:	4618      	mov	r0, r3
 801122a:	f7fc fdba 	bl	800dda2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011234:	4618      	mov	r0, r3
 8011236:	f7fc fd62 	bl	800dcfe <USBD_LL_Reset>
}
 801123a:	bf00      	nop
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
	...

08011244 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011252:	4618      	mov	r0, r3
 8011254:	f7fc fdb5 	bl	800ddc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	6812      	ldr	r2, [r2, #0]
 8011266:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801126a:	f043 0301 	orr.w	r3, r3, #1
 801126e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6a1b      	ldr	r3, [r3, #32]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d005      	beq.n	8011284 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011278:	4b04      	ldr	r3, [pc, #16]	; (801128c <HAL_PCD_SuspendCallback+0x48>)
 801127a:	691b      	ldr	r3, [r3, #16]
 801127c:	4a03      	ldr	r2, [pc, #12]	; (801128c <HAL_PCD_SuspendCallback+0x48>)
 801127e:	f043 0306 	orr.w	r3, r3, #6
 8011282:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	e000ed00 	.word	0xe000ed00

08011290 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fc fda5 	bl	800ddee <USBD_LL_Resume>
}
 80112a4:	bf00      	nop
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	460b      	mov	r3, r1
 80112b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80112be:	78fa      	ldrb	r2, [r7, #3]
 80112c0:	4611      	mov	r1, r2
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fc fdfd 	bl	800dec2 <USBD_LL_IsoOUTIncomplete>
}
 80112c8:	bf00      	nop
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	460b      	mov	r3, r1
 80112da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80112e2:	78fa      	ldrb	r2, [r7, #3]
 80112e4:	4611      	mov	r1, r2
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fc fdb9 	bl	800de5e <USBD_LL_IsoINIncomplete>
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011302:	4618      	mov	r0, r3
 8011304:	f7fc fe0f 	bl	800df26 <USBD_LL_DevConnected>
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801131e:	4618      	mov	r0, r3
 8011320:	f7fc fe0c 	bl	800df3c <USBD_LL_DevDisconnected>
}
 8011324:	bf00      	nop
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}

0801132c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d13c      	bne.n	80113b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801133c:	4a20      	ldr	r2, [pc, #128]	; (80113c0 <USBD_LL_Init+0x94>)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a1e      	ldr	r2, [pc, #120]	; (80113c0 <USBD_LL_Init+0x94>)
 8011348:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801134c:	4b1c      	ldr	r3, [pc, #112]	; (80113c0 <USBD_LL_Init+0x94>)
 801134e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011352:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011354:	4b1a      	ldr	r3, [pc, #104]	; (80113c0 <USBD_LL_Init+0x94>)
 8011356:	2204      	movs	r2, #4
 8011358:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801135a:	4b19      	ldr	r3, [pc, #100]	; (80113c0 <USBD_LL_Init+0x94>)
 801135c:	2202      	movs	r2, #2
 801135e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011360:	4b17      	ldr	r3, [pc, #92]	; (80113c0 <USBD_LL_Init+0x94>)
 8011362:	2200      	movs	r2, #0
 8011364:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011366:	4b16      	ldr	r3, [pc, #88]	; (80113c0 <USBD_LL_Init+0x94>)
 8011368:	2202      	movs	r2, #2
 801136a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801136c:	4b14      	ldr	r3, [pc, #80]	; (80113c0 <USBD_LL_Init+0x94>)
 801136e:	2200      	movs	r2, #0
 8011370:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011372:	4b13      	ldr	r3, [pc, #76]	; (80113c0 <USBD_LL_Init+0x94>)
 8011374:	2200      	movs	r2, #0
 8011376:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011378:	4b11      	ldr	r3, [pc, #68]	; (80113c0 <USBD_LL_Init+0x94>)
 801137a:	2200      	movs	r2, #0
 801137c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801137e:	4b10      	ldr	r3, [pc, #64]	; (80113c0 <USBD_LL_Init+0x94>)
 8011380:	2200      	movs	r2, #0
 8011382:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011384:	4b0e      	ldr	r3, [pc, #56]	; (80113c0 <USBD_LL_Init+0x94>)
 8011386:	2200      	movs	r2, #0
 8011388:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801138a:	480d      	ldr	r0, [pc, #52]	; (80113c0 <USBD_LL_Init+0x94>)
 801138c:	f7f3 ff43 	bl	8005216 <HAL_PCD_Init>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d001      	beq.n	801139a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011396:	f7ef fc01 	bl	8000b9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801139a:	2180      	movs	r1, #128	; 0x80
 801139c:	4808      	ldr	r0, [pc, #32]	; (80113c0 <USBD_LL_Init+0x94>)
 801139e:	f7f5 f99a 	bl	80066d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80113a2:	2240      	movs	r2, #64	; 0x40
 80113a4:	2100      	movs	r1, #0
 80113a6:	4806      	ldr	r0, [pc, #24]	; (80113c0 <USBD_LL_Init+0x94>)
 80113a8:	f7f5 f94e 	bl	8006648 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80113ac:	2280      	movs	r2, #128	; 0x80
 80113ae:	2101      	movs	r1, #1
 80113b0:	4803      	ldr	r0, [pc, #12]	; (80113c0 <USBD_LL_Init+0x94>)
 80113b2:	f7f5 f949 	bl	8006648 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80113b6:	2300      	movs	r3, #0
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3708      	adds	r7, #8
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	20007560 	.word	0x20007560

080113c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113cc:	2300      	movs	r3, #0
 80113ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113da:	4618      	mov	r0, r3
 80113dc:	f7f4 f838 	bl	8005450 <HAL_PCD_Start>
 80113e0:	4603      	mov	r3, r0
 80113e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113e4:	7bfb      	ldrb	r3, [r7, #15]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f000 f942 	bl	8011670 <USBD_Get_USB_Status>
 80113ec:	4603      	mov	r3, r0
 80113ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3710      	adds	r7, #16
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b084      	sub	sp, #16
 80113fe:	af00      	add	r7, sp, #0
 8011400:	6078      	str	r0, [r7, #4]
 8011402:	4608      	mov	r0, r1
 8011404:	4611      	mov	r1, r2
 8011406:	461a      	mov	r2, r3
 8011408:	4603      	mov	r3, r0
 801140a:	70fb      	strb	r3, [r7, #3]
 801140c:	460b      	mov	r3, r1
 801140e:	70bb      	strb	r3, [r7, #2]
 8011410:	4613      	mov	r3, r2
 8011412:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011418:	2300      	movs	r3, #0
 801141a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011422:	78bb      	ldrb	r3, [r7, #2]
 8011424:	883a      	ldrh	r2, [r7, #0]
 8011426:	78f9      	ldrb	r1, [r7, #3]
 8011428:	f7f4 fd09 	bl	8005e3e <HAL_PCD_EP_Open>
 801142c:	4603      	mov	r3, r0
 801142e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011430:	7bfb      	ldrb	r3, [r7, #15]
 8011432:	4618      	mov	r0, r3
 8011434:	f000 f91c 	bl	8011670 <USBD_Get_USB_Status>
 8011438:	4603      	mov	r3, r0
 801143a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801143c:	7bbb      	ldrb	r3, [r7, #14]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011460:	78fa      	ldrb	r2, [r7, #3]
 8011462:	4611      	mov	r1, r2
 8011464:	4618      	mov	r0, r3
 8011466:	f7f4 fd52 	bl	8005f0e <HAL_PCD_EP_Close>
 801146a:	4603      	mov	r3, r0
 801146c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801146e:	7bfb      	ldrb	r3, [r7, #15]
 8011470:	4618      	mov	r0, r3
 8011472:	f000 f8fd 	bl	8011670 <USBD_Get_USB_Status>
 8011476:	4603      	mov	r3, r0
 8011478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801147a:	7bbb      	ldrb	r3, [r7, #14]
}
 801147c:	4618      	mov	r0, r3
 801147e:	3710      	adds	r7, #16
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	460b      	mov	r3, r1
 801148e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011494:	2300      	movs	r3, #0
 8011496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801149e:	78fa      	ldrb	r2, [r7, #3]
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7f4 fe2a 	bl	80060fc <HAL_PCD_EP_SetStall>
 80114a8:	4603      	mov	r3, r0
 80114aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f000 f8de 	bl	8011670 <USBD_Get_USB_Status>
 80114b4:	4603      	mov	r3, r0
 80114b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b084      	sub	sp, #16
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
 80114ca:	460b      	mov	r3, r1
 80114cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ce:	2300      	movs	r3, #0
 80114d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114dc:	78fa      	ldrb	r2, [r7, #3]
 80114de:	4611      	mov	r1, r2
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7f4 fe6f 	bl	80061c4 <HAL_PCD_EP_ClrStall>
 80114e6:	4603      	mov	r3, r0
 80114e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f000 f8bf 	bl	8011670 <USBD_Get_USB_Status>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011500:	b480      	push	{r7}
 8011502:	b085      	sub	sp, #20
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	460b      	mov	r3, r1
 801150a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011512:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011518:	2b00      	cmp	r3, #0
 801151a:	da0b      	bge.n	8011534 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801151c:	78fb      	ldrb	r3, [r7, #3]
 801151e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011522:	68f9      	ldr	r1, [r7, #12]
 8011524:	4613      	mov	r3, r2
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	4413      	add	r3, r2
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	440b      	add	r3, r1
 801152e:	333e      	adds	r3, #62	; 0x3e
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	e00b      	b.n	801154c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011534:	78fb      	ldrb	r3, [r7, #3]
 8011536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801153a:	68f9      	ldr	r1, [r7, #12]
 801153c:	4613      	mov	r3, r2
 801153e:	00db      	lsls	r3, r3, #3
 8011540:	4413      	add	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	440b      	add	r3, r1
 8011546:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801154a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801154c:	4618      	mov	r0, r3
 801154e:	3714      	adds	r7, #20
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011564:	2300      	movs	r3, #0
 8011566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011572:	78fa      	ldrb	r2, [r7, #3]
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7f4 fc3c 	bl	8005df4 <HAL_PCD_SetAddress>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	4618      	mov	r0, r3
 8011584:	f000 f874 	bl	8011670 <USBD_Get_USB_Status>
 8011588:	4603      	mov	r3, r0
 801158a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801158c:	7bbb      	ldrb	r3, [r7, #14]
}
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011596:	b580      	push	{r7, lr}
 8011598:	b086      	sub	sp, #24
 801159a:	af00      	add	r7, sp, #0
 801159c:	60f8      	str	r0, [r7, #12]
 801159e:	607a      	str	r2, [r7, #4]
 80115a0:	603b      	str	r3, [r7, #0]
 80115a2:	460b      	mov	r3, r1
 80115a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80115b4:	7af9      	ldrb	r1, [r7, #11]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	f7f4 fd55 	bl	8006068 <HAL_PCD_EP_Transmit>
 80115be:	4603      	mov	r3, r0
 80115c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f000 f853 	bl	8011670 <USBD_Get_USB_Status>
 80115ca:	4603      	mov	r3, r0
 80115cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80115ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3718      	adds	r7, #24
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b086      	sub	sp, #24
 80115dc:	af00      	add	r7, sp, #0
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	607a      	str	r2, [r7, #4]
 80115e2:	603b      	str	r3, [r7, #0]
 80115e4:	460b      	mov	r3, r1
 80115e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115e8:	2300      	movs	r3, #0
 80115ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80115f6:	7af9      	ldrb	r1, [r7, #11]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	f7f4 fcd1 	bl	8005fa2 <HAL_PCD_EP_Receive>
 8011600:	4603      	mov	r3, r0
 8011602:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011604:	7dfb      	ldrb	r3, [r7, #23]
 8011606:	4618      	mov	r0, r3
 8011608:	f000 f832 	bl	8011670 <USBD_Get_USB_Status>
 801160c:	4603      	mov	r3, r0
 801160e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011610:	7dbb      	ldrb	r3, [r7, #22]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3718      	adds	r7, #24
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801161a:	b580      	push	{r7, lr}
 801161c:	b082      	sub	sp, #8
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	460b      	mov	r3, r1
 8011624:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801162c:	78fa      	ldrb	r2, [r7, #3]
 801162e:	4611      	mov	r1, r2
 8011630:	4618      	mov	r0, r3
 8011632:	f7f4 fd01 	bl	8006038 <HAL_PCD_EP_GetRxCount>
 8011636:	4603      	mov	r3, r0
}
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011648:	4b03      	ldr	r3, [pc, #12]	; (8011658 <USBD_static_malloc+0x18>)
}
 801164a:	4618      	mov	r0, r3
 801164c:	370c      	adds	r7, #12
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	20007a6c 	.word	0x20007a6c

0801165c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]

}
 8011664:	bf00      	nop
 8011666:	370c      	adds	r7, #12
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	2b03      	cmp	r3, #3
 8011682:	d817      	bhi.n	80116b4 <USBD_Get_USB_Status+0x44>
 8011684:	a201      	add	r2, pc, #4	; (adr r2, 801168c <USBD_Get_USB_Status+0x1c>)
 8011686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168a:	bf00      	nop
 801168c:	0801169d 	.word	0x0801169d
 8011690:	080116a3 	.word	0x080116a3
 8011694:	080116a9 	.word	0x080116a9
 8011698:	080116af 	.word	0x080116af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	73fb      	strb	r3, [r7, #15]
    break;
 80116a0:	e00b      	b.n	80116ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80116a2:	2303      	movs	r3, #3
 80116a4:	73fb      	strb	r3, [r7, #15]
    break;
 80116a6:	e008      	b.n	80116ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80116a8:	2301      	movs	r3, #1
 80116aa:	73fb      	strb	r3, [r7, #15]
    break;
 80116ac:	e005      	b.n	80116ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80116ae:	2303      	movs	r3, #3
 80116b0:	73fb      	strb	r3, [r7, #15]
    break;
 80116b2:	e002      	b.n	80116ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80116b4:	2303      	movs	r3, #3
 80116b6:	73fb      	strb	r3, [r7, #15]
    break;
 80116b8:	bf00      	nop
  }
  return usb_status;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <Checksum>:
uint32_t i2c_code_error;
uint8_t numerr=0;
uint8_t crcval=0;

uint8_t Checksum(uint8_t *data, uint8_t length)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
	uint8_t count;
	uint8_t Sum = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 80116d8:	2300      	movs	r3, #0
 80116da:	73fb      	strb	r3, [r7, #15]
 80116dc:	e009      	b.n	80116f2 <Checksum+0x2a>
		Sum = Sum + data[count];
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	4413      	add	r3, r2
 80116e4:	781a      	ldrb	r2, [r3, #0]
 80116e6:	7bbb      	ldrb	r3, [r7, #14]
 80116e8:	4413      	add	r3, r2
 80116ea:	73bb      	strb	r3, [r7, #14]
	for(count = 0; count < length; count++)
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	3301      	adds	r3, #1
 80116f0:	73fb      	strb	r3, [r7, #15]
 80116f2:	7bfa      	ldrb	r2, [r7, #15]
 80116f4:	78fb      	ldrb	r3, [r7, #3]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d3f1      	bcc.n	80116de <Checksum+0x16>
	Sum = -Sum;
 80116fa:	7bbb      	ldrb	r3, [r7, #14]
 80116fc:	425b      	negs	r3, r3
 80116fe:	73bb      	strb	r3, [r7, #14]
	return (Sum & 0xFF);
 8011700:	7bbb      	ldrb	r3, [r7, #14]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr
	...

08011710 <HAL_I2C_AddrCallback>:

// I2C-Interface , callback khi co  read/write i2c
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	460b      	mov	r3, r1
 801171a:	70fb      	strb	r3, [r7, #3]
 801171c:	4613      	mov	r3, r2
 801171e:	803b      	strh	r3, [r7, #0]
	if(hi2c->Instance==I2C1)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4a07      	ldr	r2, [pc, #28]	; (8011744 <HAL_I2C_AddrCallback+0x34>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d108      	bne.n	801173c <HAL_I2C_AddrCallback+0x2c>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // neu i2c master write to slave
 801172a:	78fb      	ldrb	r3, [r7, #3]
 801172c:	2b01      	cmp	r3, #1
 801172e:	d105      	bne.n	801173c <HAL_I2C_AddrCallback+0x2c>
		{
			HAL_I2C_Slave_Seq_Receive_DMA(&hi2c1,data_chessclock,15,I2C_FIRST_AND_LAST_FRAME); // thi luu data bang dma
 8011730:	2308      	movs	r3, #8
 8011732:	220f      	movs	r2, #15
 8011734:	4904      	ldr	r1, [pc, #16]	; (8011748 <HAL_I2C_AddrCallback+0x38>)
 8011736:	4805      	ldr	r0, [pc, #20]	; (801174c <HAL_I2C_AddrCallback+0x3c>)
 8011738:	f7f1 fe3c 	bl	80033b4 <HAL_I2C_Slave_Seq_Receive_DMA>
		}
	}
}
 801173c:	bf00      	nop
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	40005400 	.word	0x40005400
 8011748:	20007c90 	.word	0x20007c90
 801174c:	200023d8 	.word	0x200023d8

08011750 <HAL_I2C_ListenCpltCallback>:
// 	I2C2 for interface
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);  // bat laij ngat
 8011758:	4803      	ldr	r0, [pc, #12]	; (8011768 <HAL_I2C_ListenCpltCallback+0x18>)
 801175a:	f7f1 ff65 	bl	8003628 <HAL_I2C_EnableListen_IT>
}
 801175e:	bf00      	nop
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	200023d8 	.word	0x200023d8

0801176c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	4a0b      	ldr	r2, [pc, #44]	; (80117a8 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 801177a:	4293      	cmp	r3, r2
 801177c:	d110      	bne.n	80117a0 <HAL_I2C_SlaveRxCpltCallback+0x34>
	{
		crcval = Checksum(data_chessclock, 14);
 801177e:	210e      	movs	r1, #14
 8011780:	480a      	ldr	r0, [pc, #40]	; (80117ac <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8011782:	f7ff ffa1 	bl	80116c8 <Checksum>
 8011786:	4603      	mov	r3, r0
 8011788:	461a      	mov	r2, r3
 801178a:	4b09      	ldr	r3, [pc, #36]	; (80117b0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 801178c:	701a      	strb	r2, [r3, #0]
		if(crcval == data_chessclock[14]){
 801178e:	4b07      	ldr	r3, [pc, #28]	; (80117ac <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8011790:	7b9a      	ldrb	r2, [r3, #14]
 8011792:	4b07      	ldr	r3, [pc, #28]	; (80117b0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	429a      	cmp	r2, r3
 8011798:	d102      	bne.n	80117a0 <HAL_I2C_SlaveRxCpltCallback+0x34>
			chessclock_interrup = true; // bat flag khi co data clock
 801179a:	4b06      	ldr	r3, [pc, #24]	; (80117b4 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 801179c:	2201      	movs	r2, #1
 801179e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80117a0:	bf00      	nop
 80117a2:	3708      	adds	r7, #8
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	40005400 	.word	0x40005400
 80117ac:	20007c90 	.word	0x20007c90
 80117b0:	20007ca5 	.word	0x20007ca5
 80117b4:	20007c8c 	.word	0x20007c8c

080117b8 <HAL_I2C_ErrorCallback>:
// Handler I2C Error
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==I2C1){
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	4a0d      	ldr	r2, [pc, #52]	; (80117fc <HAL_I2C_ErrorCallback+0x44>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d114      	bne.n	80117f4 <HAL_I2C_ErrorCallback+0x3c>
		i2c_code_error = hi2c->ErrorCode;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ce:	4a0c      	ldr	r2, [pc, #48]	; (8011800 <HAL_I2C_ErrorCallback+0x48>)
 80117d0:	6013      	str	r3, [r2, #0]
		Status_Set(STT_I2C_ERROR);
 80117d2:	2001      	movs	r0, #1
 80117d4:	f000 ff24 	bl	8012620 <Status_Set>
		numerr++;
 80117d8:	4b0a      	ldr	r3, [pc, #40]	; (8011804 <HAL_I2C_ErrorCallback+0x4c>)
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	3301      	adds	r3, #1
 80117de:	b2da      	uxtb	r2, r3
 80117e0:	4b08      	ldr	r3, [pc, #32]	; (8011804 <HAL_I2C_ErrorCallback+0x4c>)
 80117e2:	701a      	strb	r2, [r3, #0]
		//HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
		HAL_I2C_DeInit(&hi2c1);
 80117e4:	4808      	ldr	r0, [pc, #32]	; (8011808 <HAL_I2C_ErrorCallback+0x50>)
 80117e6:	f7f1 fdb5 	bl	8003354 <HAL_I2C_DeInit>
		MMX_I2C1_Init();
 80117ea:	f000 f819 	bl	8011820 <MMX_I2C1_Init>
		HAL_I2C_EnableListen_IT(&hi2c1);
 80117ee:	4806      	ldr	r0, [pc, #24]	; (8011808 <HAL_I2C_ErrorCallback+0x50>)
 80117f0:	f7f1 ff1a 	bl	8003628 <HAL_I2C_EnableListen_IT>
	}
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	40005400 	.word	0x40005400
 8011800:	20007ca0 	.word	0x20007ca0
 8011804:	20007ca4 	.word	0x20007ca4
 8011808:	200023d8 	.word	0x200023d8

0801180c <ChessClock_Init>:

void ChessClock_Init()
{
 801180c:	b580      	push	{r7, lr}
 801180e:	af00      	add	r7, sp, #0
	HAL_I2C_EnableListen_IT(&hi2c1);   // bat ngat I2C, khi co thao tac read/write
 8011810:	4802      	ldr	r0, [pc, #8]	; (801181c <ChessClock_Init+0x10>)
 8011812:	f7f1 ff09 	bl	8003628 <HAL_I2C_EnableListen_IT>
}
 8011816:	bf00      	nop
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	200023d8 	.word	0x200023d8

08011820 <MMX_I2C1_Init>:

static void MMX_I2C1_Init(void)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011824:	4b12      	ldr	r3, [pc, #72]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011826:	4a13      	ldr	r2, [pc, #76]	; (8011874 <MMX_I2C1_Init+0x54>)
 8011828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801182a:	4b11      	ldr	r3, [pc, #68]	; (8011870 <MMX_I2C1_Init+0x50>)
 801182c:	4a12      	ldr	r2, [pc, #72]	; (8011878 <MMX_I2C1_Init+0x58>)
 801182e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011830:	4b0f      	ldr	r3, [pc, #60]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011832:	2200      	movs	r2, #0
 8011834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x50;
 8011836:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011838:	2250      	movs	r2, #80	; 0x50
 801183a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801183c:	4b0c      	ldr	r3, [pc, #48]	; (8011870 <MMX_I2C1_Init+0x50>)
 801183e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011844:	4b0a      	ldr	r3, [pc, #40]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011846:	2200      	movs	r2, #0
 8011848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0x50;
 801184a:	4b09      	ldr	r3, [pc, #36]	; (8011870 <MMX_I2C1_Init+0x50>)
 801184c:	2250      	movs	r2, #80	; 0x50
 801184e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011850:	4b07      	ldr	r3, [pc, #28]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011852:	2200      	movs	r2, #0
 8011854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011856:	4b06      	ldr	r3, [pc, #24]	; (8011870 <MMX_I2C1_Init+0x50>)
 8011858:	2200      	movs	r2, #0
 801185a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801185c:	4804      	ldr	r0, [pc, #16]	; (8011870 <MMX_I2C1_Init+0x50>)
 801185e:	f7f1 fc35 	bl	80030cc <HAL_I2C_Init>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <MMX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8011868:	f7ef f998 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 801186c:	bf00      	nop
 801186e:	bd80      	pop	{r7, pc}
 8011870:	200023d8 	.word	0x200023d8
 8011874:	40005400 	.word	0x40005400
 8011878:	000186a0 	.word	0x000186a0

0801187c <WriteProtect>:
uint8_t cmd=0;
extern SPI_HandleTypeDef hspi1;
HAL_StatusTypeDef status;

// Thiết lập lại trạng thái Write ( bảo vệ , không cho phép Write)
void WriteProtect(){
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]= WRDI; // Reset Write Enable Latch
 8011882:	2304      	movs	r3, #4
 8011884:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 8011886:	2200      	movs	r2, #0
 8011888:	2110      	movs	r1, #16
 801188a:	480b      	ldr	r0, [pc, #44]	; (80118b8 <WriteProtect+0x3c>)
 801188c:	f7f1 fc04 	bl	8003098 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 8011890:	1d39      	adds	r1, r7, #4
 8011892:	2301      	movs	r3, #1
 8011894:	2201      	movs	r2, #1
 8011896:	4809      	ldr	r0, [pc, #36]	; (80118bc <WriteProtect+0x40>)
 8011898:	f7f6 f853 	bl	8007942 <HAL_SPI_Transmit>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <WriteProtect+0x44>)
 80118a2:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80118a4:	2201      	movs	r2, #1
 80118a6:	2110      	movs	r1, #16
 80118a8:	4803      	ldr	r0, [pc, #12]	; (80118b8 <WriteProtect+0x3c>)
 80118aa:	f7f1 fbf5 	bl	8003098 <HAL_GPIO_WritePin>
}
 80118ae:	bf00      	nop
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	40020000 	.word	0x40020000
 80118bc:	200024ac 	.word	0x200024ac
 80118c0:	20007cda 	.word	0x20007cda

080118c4 <WriteEnable>:
	MB85RS_CS_LOW;
	HAL_SPI_TransmitReceive(&hspi1,cmd, reg, 2, 1);
	MB85RS_CS_HIGH;
	return reg[1];
}
void WriteEnable(){
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
	uint8_t cmd[1];
	cmd[0]=WREN;
 80118ca:	2306      	movs	r3, #6
 80118cc:	713b      	strb	r3, [r7, #4]
	MB85RS_CS_LOW;
 80118ce:	2200      	movs	r2, #0
 80118d0:	2110      	movs	r1, #16
 80118d2:	480b      	ldr	r0, [pc, #44]	; (8011900 <WriteEnable+0x3c>)
 80118d4:	f7f1 fbe0 	bl	8003098 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, cmd, 1, 1);
 80118d8:	1d39      	adds	r1, r7, #4
 80118da:	2301      	movs	r3, #1
 80118dc:	2201      	movs	r2, #1
 80118de:	4809      	ldr	r0, [pc, #36]	; (8011904 <WriteEnable+0x40>)
 80118e0:	f7f6 f82f 	bl	8007942 <HAL_SPI_Transmit>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	4b07      	ldr	r3, [pc, #28]	; (8011908 <WriteEnable+0x44>)
 80118ea:	701a      	strb	r2, [r3, #0]
	MB85RS_CS_HIGH;
 80118ec:	2201      	movs	r2, #1
 80118ee:	2110      	movs	r1, #16
 80118f0:	4803      	ldr	r0, [pc, #12]	; (8011900 <WriteEnable+0x3c>)
 80118f2:	f7f1 fbd1 	bl	8003098 <HAL_GPIO_WritePin>
}
 80118f6:	bf00      	nop
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	40020000 	.word	0x40020000
 8011904:	200024ac 	.word	0x200024ac
 8011908:	20007cda 	.word	0x20007cda

0801190c <MB85RS_write>:

void MB85RS_write(unsigned int address, unsigned char *buffer, unsigned int size)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b086      	sub	sp, #24
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	607a      	str	r2, [r7, #4]
	Mb85rs_dataTx[0] = WRITE;
 8011918:	4b1c      	ldr	r3, [pc, #112]	; (801198c <MB85RS_write+0x80>)
 801191a:	2202      	movs	r2, #2
 801191c:	701a      	strb	r2, [r3, #0]
	Mb85rs_dataTx[1] = (char)(address >> 8);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	0a1b      	lsrs	r3, r3, #8
 8011922:	b2da      	uxtb	r2, r3
 8011924:	4b19      	ldr	r3, [pc, #100]	; (801198c <MB85RS_write+0x80>)
 8011926:	705a      	strb	r2, [r3, #1]
	Mb85rs_dataTx[2] = (char)(address);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	b2da      	uxtb	r2, r3
 801192c:	4b17      	ldr	r3, [pc, #92]	; (801198c <MB85RS_write+0x80>)
 801192e:	709a      	strb	r2, [r3, #2]
	for(int i=0;i<size;i++){
 8011930:	2300      	movs	r3, #0
 8011932:	617b      	str	r3, [r7, #20]
 8011934:	e00a      	b.n	801194c <MB85RS_write+0x40>
		Mb85rs_dataTx[3+i] = buffer[i];
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	68ba      	ldr	r2, [r7, #8]
 801193a:	441a      	add	r2, r3
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	3303      	adds	r3, #3
 8011940:	7811      	ldrb	r1, [r2, #0]
 8011942:	4a12      	ldr	r2, [pc, #72]	; (801198c <MB85RS_write+0x80>)
 8011944:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<size;i++){
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	3301      	adds	r3, #1
 801194a:	617b      	str	r3, [r7, #20]
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	429a      	cmp	r2, r3
 8011952:	d8f0      	bhi.n	8011936 <MB85RS_write+0x2a>
	}
	WriteEnable();
 8011954:	f7ff ffb6 	bl	80118c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011958:	2200      	movs	r2, #0
 801195a:	2110      	movs	r1, #16
 801195c:	480c      	ldr	r0, [pc, #48]	; (8011990 <MB85RS_write+0x84>)
 801195e:	f7f1 fb9b 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Mb85rs_dataTx, size+3, 10);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	b29b      	uxth	r3, r3
 8011966:	3303      	adds	r3, #3
 8011968:	b29a      	uxth	r2, r3
 801196a:	230a      	movs	r3, #10
 801196c:	4907      	ldr	r1, [pc, #28]	; (801198c <MB85RS_write+0x80>)
 801196e:	4809      	ldr	r0, [pc, #36]	; (8011994 <MB85RS_write+0x88>)
 8011970:	f7f5 ffe7 	bl	8007942 <HAL_SPI_Transmit>
	MB85RS_CS_HIGH;
 8011974:	2201      	movs	r2, #1
 8011976:	2110      	movs	r1, #16
 8011978:	4805      	ldr	r0, [pc, #20]	; (8011990 <MB85RS_write+0x84>)
 801197a:	f7f1 fb8d 	bl	8003098 <HAL_GPIO_WritePin>
	WriteProtect();
 801197e:	f7ff ff7d 	bl	801187c <WriteProtect>
}
 8011982:	bf00      	nop
 8011984:	3718      	adds	r7, #24
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	20007ca8 	.word	0x20007ca8
 8011990:	40020000 	.word	0x40020000
 8011994:	200024ac 	.word	0x200024ac

08011998 <MB85RS_read>:
void MB85RS_read(unsigned int address, unsigned char *buffer, unsigned int size)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b086      	sub	sp, #24
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[3];
	cmd[0]=READ;
 80119a4:	2303      	movs	r3, #3
 80119a6:	753b      	strb	r3, [r7, #20]
	cmd[1]=(char)(address >> 8);
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	0a1b      	lsrs	r3, r3, #8
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	757b      	strb	r3, [r7, #21]
	cmd[2] = (char)(address);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	75bb      	strb	r3, [r7, #22]
	MB85RS_CS_LOW;
 80119b6:	2200      	movs	r2, #0
 80119b8:	2110      	movs	r1, #16
 80119ba:	480d      	ldr	r0, [pc, #52]	; (80119f0 <MB85RS_read+0x58>)
 80119bc:	f7f1 fb6c 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, cmd, 3, 10);
 80119c0:	f107 0114 	add.w	r1, r7, #20
 80119c4:	230a      	movs	r3, #10
 80119c6:	2203      	movs	r2, #3
 80119c8:	480a      	ldr	r0, [pc, #40]	; (80119f4 <MB85RS_read+0x5c>)
 80119ca:	f7f5 ffba 	bl	8007942 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, size, 10);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	b29a      	uxth	r2, r3
 80119d2:	230a      	movs	r3, #10
 80119d4:	68b9      	ldr	r1, [r7, #8]
 80119d6:	4807      	ldr	r0, [pc, #28]	; (80119f4 <MB85RS_read+0x5c>)
 80119d8:	f7f6 f8ef 	bl	8007bba <HAL_SPI_Receive>
	MB85RS_CS_HIGH;
 80119dc:	2201      	movs	r2, #1
 80119de:	2110      	movs	r1, #16
 80119e0:	4803      	ldr	r0, [pc, #12]	; (80119f0 <MB85RS_read+0x58>)
 80119e2:	f7f1 fb59 	bl	8003098 <HAL_GPIO_WritePin>
}
 80119e6:	bf00      	nop
 80119e8:	3718      	adds	r7, #24
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	40020000 	.word	0x40020000
 80119f4:	200024ac 	.word	0x200024ac

080119f8 <MB85RS_erase>:

void MB85RS_erase()
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b0a4      	sub	sp, #144	; 0x90
 80119fc:	af00      	add	r7, sp, #0
	uint8_t cmd[3];
	uint8_t datanull[128];
	//setStatus(0x00);
	cmd[0]=WRITE;
 80119fe:	2302      	movs	r3, #2
 8011a00:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	cmd[1] = 0;
 8011a04:	2300      	movs	r3, #0
 8011a06:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	cmd[2] = 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	WriteEnable();
 8011a10:	f7ff ff58 	bl	80118c4 <WriteEnable>
	MB85RS_CS_LOW;
 8011a14:	2200      	movs	r2, #0
 8011a16:	2110      	movs	r1, #16
 8011a18:	481d      	ldr	r0, [pc, #116]	; (8011a90 <MB85RS_erase+0x98>)
 8011a1a:	f7f1 fb3d 	bl	8003098 <HAL_GPIO_WritePin>
	for(int i=0;i<128;i++){
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a24:	e00a      	b.n	8011a3c <MB85RS_erase+0x44>
		datanull[i]=0;
 8011a26:	1d3a      	adds	r2, r7, #4
 8011a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a2c:	4413      	add	r3, r2
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<128;i++){
 8011a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a36:	3301      	adds	r3, #1
 8011a38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a40:	2b7f      	cmp	r3, #127	; 0x7f
 8011a42:	ddf0      	ble.n	8011a26 <MB85RS_erase+0x2e>
	}
	HAL_SPI_Transmit(&hspi1, cmd, 3, 100);
 8011a44:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8011a48:	2364      	movs	r3, #100	; 0x64
 8011a4a:	2203      	movs	r2, #3
 8011a4c:	4811      	ldr	r0, [pc, #68]	; (8011a94 <MB85RS_erase+0x9c>)
 8011a4e:	f7f5 ff78 	bl	8007942 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011a52:	2300      	movs	r3, #0
 8011a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011a58:	e00a      	b.n	8011a70 <MB85RS_erase+0x78>
	{
		HAL_SPI_Transmit(&hspi1, datanull, 128, 100);
 8011a5a:	1d39      	adds	r1, r7, #4
 8011a5c:	2364      	movs	r3, #100	; 0x64
 8011a5e:	2280      	movs	r2, #128	; 0x80
 8011a60:	480c      	ldr	r0, [pc, #48]	; (8011a94 <MB85RS_erase+0x9c>)
 8011a62:	f7f5 ff6e 	bl	8007942 <HAL_SPI_Transmit>
	for(int i = 0; i <= 256; i++)
 8011a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a78:	ddef      	ble.n	8011a5a <MB85RS_erase+0x62>
	}
	MB85RS_CS_HIGH;
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	2110      	movs	r1, #16
 8011a7e:	4804      	ldr	r0, [pc, #16]	; (8011a90 <MB85RS_erase+0x98>)
 8011a80:	f7f1 fb0a 	bl	8003098 <HAL_GPIO_WritePin>
	WriteProtect();
 8011a84:	f7ff fefa 	bl	801187c <WriteProtect>
}
 8011a88:	bf00      	nop
 8011a8a:	3790      	adds	r7, #144	; 0x90
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	40020000 	.word	0x40020000
 8011a94:	200024ac 	.word	0x200024ac

08011a98 <MB85RS_getPointSave>:


// get Điểm lưu FEN gần nhất ( thông tin được lưu ở Address cuối cùng)
void MB85RS_getPointSave(){
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
	uint8_t point[2];
	MB85RS_read(32766, point, 2);
 8011a9e:	1d3b      	adds	r3, r7, #4
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8011aa8:	f7ff ff76 	bl	8011998 <MB85RS_read>
	pointsave = point[0]*255 +point[1];
 8011aac:	793b      	ldrb	r3, [r7, #4]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	0212      	lsls	r2, r2, #8
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	797b      	ldrb	r3, [r7, #5]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	4413      	add	r3, r2
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	4b02      	ldr	r3, [pc, #8]	; (8011acc <MB85RS_getPointSave+0x34>)
 8011ac2:	801a      	strh	r2, [r3, #0]
}
 8011ac4:	bf00      	nop
 8011ac6:	3708      	adds	r7, #8
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}
 8011acc:	20007ca6 	.word	0x20007ca6

08011ad0 <MB85RS_WritePointSave>:
void MB85RS_WritePointSave(){
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
	if(pointsave >712) pointsave=0;
 8011ad6:	4b14      	ldr	r3, [pc, #80]	; (8011b28 <MB85RS_WritePointSave+0x58>)
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	f5b3 7f32 	cmp.w	r3, #712	; 0x2c8
 8011ade:	d902      	bls.n	8011ae6 <MB85RS_WritePointSave+0x16>
 8011ae0:	4b11      	ldr	r3, [pc, #68]	; (8011b28 <MB85RS_WritePointSave+0x58>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	801a      	strh	r2, [r3, #0]
	uint8_t point[2];
	point[0] = pointsave/255;
 8011ae6:	4b10      	ldr	r3, [pc, #64]	; (8011b28 <MB85RS_WritePointSave+0x58>)
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	4a10      	ldr	r2, [pc, #64]	; (8011b2c <MB85RS_WritePointSave+0x5c>)
 8011aec:	fba2 2303 	umull	r2, r3, r2, r3
 8011af0:	09db      	lsrs	r3, r3, #7
 8011af2:	b29b      	uxth	r3, r3
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	713b      	strb	r3, [r7, #4]
	point[1] = pointsave%255;
 8011af8:	4b0b      	ldr	r3, [pc, #44]	; (8011b28 <MB85RS_WritePointSave+0x58>)
 8011afa:	881a      	ldrh	r2, [r3, #0]
 8011afc:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <MB85RS_WritePointSave+0x5c>)
 8011afe:	fba3 1302 	umull	r1, r3, r3, r2
 8011b02:	09d9      	lsrs	r1, r3, #7
 8011b04:	460b      	mov	r3, r1
 8011b06:	021b      	lsls	r3, r3, #8
 8011b08:	1a5b      	subs	r3, r3, r1
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	717b      	strb	r3, [r7, #5]
	MB85RS_write(32766,point, 2);
 8011b12:	1d3b      	adds	r3, r7, #4
 8011b14:	2202      	movs	r2, #2
 8011b16:	4619      	mov	r1, r3
 8011b18:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8011b1c:	f7ff fef6 	bl	801190c <MB85RS_write>
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	20007ca6 	.word	0x20007ca6
 8011b2c:	80808081 	.word	0x80808081

08011b30 <MB85RS_WriteNewGame>:

void MB85RS_WriteNewGame(){
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b094      	sub	sp, #80	; 0x50
 8011b34:	af00      	add	r7, sp, #0
	uint8_t dat[46];
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime,RTC_FORMAT_BIN);
 8011b36:	f107 0308 	add.w	r3, r7, #8
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	4821      	ldr	r0, [pc, #132]	; (8011bc4 <MB85RS_WriteNewGame+0x94>)
 8011b40:	f7f5 fc6e 	bl	8007420 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011b44:	1d3b      	adds	r3, r7, #4
 8011b46:	2200      	movs	r2, #0
 8011b48:	4619      	mov	r1, r3
 8011b4a:	481e      	ldr	r0, [pc, #120]	; (8011bc4 <MB85RS_WriteNewGame+0x94>)
 8011b4c:	f7f5 fd4a 	bl	80075e4 <HAL_RTC_GetDate>
	dat[0]=254; // code for HeaderGame
 8011b50:	23fe      	movs	r3, #254	; 0xfe
 8011b52:	773b      	strb	r3, [r7, #28]
	dat[1] = sTime.Seconds;
 8011b54:	7abb      	ldrb	r3, [r7, #10]
 8011b56:	777b      	strb	r3, [r7, #29]
	dat[2] = sTime.Minutes;
 8011b58:	7a7b      	ldrb	r3, [r7, #9]
 8011b5a:	77bb      	strb	r3, [r7, #30]
	dat[3] = sTime.Hours;
 8011b5c:	7a3b      	ldrb	r3, [r7, #8]
 8011b5e:	77fb      	strb	r3, [r7, #31]
	dat[4] = sDate.Date;
 8011b60:	79bb      	ldrb	r3, [r7, #6]
 8011b62:	f887 3020 	strb.w	r3, [r7, #32]
	dat[5] = sDate.Month;
 8011b66:	797b      	ldrb	r3, [r7, #5]
 8011b68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	dat[6] = sDate.Year;
 8011b6c:	79fb      	ldrb	r3, [r7, #7]
 8011b6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(int i=7;i<46;i++){
 8011b72:	2307      	movs	r3, #7
 8011b74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b76:	e008      	b.n	8011b8a <MB85RS_WriteNewGame+0x5a>
		dat[i]=0;
 8011b78:	f107 021c 	add.w	r2, r7, #28
 8011b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b7e:	4413      	add	r3, r2
 8011b80:	2200      	movs	r2, #0
 8011b82:	701a      	strb	r2, [r3, #0]
	for(int i=7;i<46;i++){
 8011b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b86:	3301      	adds	r3, #1
 8011b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b8c:	2b2d      	cmp	r3, #45	; 0x2d
 8011b8e:	ddf3      	ble.n	8011b78 <MB85RS_WriteNewGame+0x48>
	}
	MB85RS_write(pointsave*46, dat, 46);
 8011b90:	4b0d      	ldr	r3, [pc, #52]	; (8011bc8 <MB85RS_WriteNewGame+0x98>)
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	461a      	mov	r2, r3
 8011b96:	232e      	movs	r3, #46	; 0x2e
 8011b98:	fb02 f303 	mul.w	r3, r2, r3
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f107 031c 	add.w	r3, r7, #28
 8011ba2:	222e      	movs	r2, #46	; 0x2e
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	f7ff feb1 	bl	801190c <MB85RS_write>
	pointsave++;
 8011baa:	4b07      	ldr	r3, [pc, #28]	; (8011bc8 <MB85RS_WriteNewGame+0x98>)
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	4b05      	ldr	r3, [pc, #20]	; (8011bc8 <MB85RS_WriteNewGame+0x98>)
 8011bb4:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 8011bb6:	f7ff ff8b 	bl	8011ad0 <MB85RS_WritePointSave>
}
 8011bba:	bf00      	nop
 8011bbc:	3750      	adds	r7, #80	; 0x50
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	2000248c 	.word	0x2000248c
 8011bc8:	20007ca6 	.word	0x20007ca6

08011bcc <MB85RS_saveFen>:

// 32bytePiece + 14byteClock
void MB85RS_saveFen(){
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b090      	sub	sp, #64	; 0x40
 8011bd0:	af00      	add	r7, sp, #0
	uint8_t data[46];
	uint8_t pieceA,pieceB,pie=0;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	/* gắn datamain vào 32 byte tiếp theo */
	for (int i = 0; i < 32; i++) {
 8011bd8:	2300      	movs	r3, #0
 8011bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bdc:	e02d      	b.n	8011c3a <MB85RS_saveFen+0x6e>
		pieceA = byteToPiece(datamain_old[pie]);
 8011bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011be2:	4a2d      	ldr	r2, [pc, #180]	; (8011c98 <MB85RS_saveFen+0xcc>)
 8011be4:	5cd3      	ldrb	r3, [r2, r3]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f000 ff52 	bl	8012a90 <byteToPiece>
 8011bec:	4603      	mov	r3, r0
 8011bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		pie++;
 8011bf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		pieceB = byteToPiece(datamain_old[pie]);
 8011bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011c00:	4a25      	ldr	r2, [pc, #148]	; (8011c98 <MB85RS_saveFen+0xcc>)
 8011c02:	5cd3      	ldrb	r3, [r2, r3]
 8011c04:	4618      	mov	r0, r3
 8011c06:	f000 ff43 	bl	8012a90 <byteToPiece>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		pie++;
 8011c10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011c14:	3301      	adds	r3, #1
 8011c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		data[i] = (pieceA << 4) + pieceB;
 8011c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011c1e:	011b      	lsls	r3, r3, #4
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011c26:	4413      	add	r3, r2
 8011c28:	b2d9      	uxtb	r1, r3
 8011c2a:	1d3a      	adds	r2, r7, #4
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2e:	4413      	add	r3, r2
 8011c30:	460a      	mov	r2, r1
 8011c32:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	3301      	adds	r3, #1
 8011c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3c:	2b1f      	cmp	r3, #31
 8011c3e:	ddce      	ble.n	8011bde <MB85RS_saveFen+0x12>
	}
	for (int i = 0; i < 14; i++) {
 8011c40:	2300      	movs	r3, #0
 8011c42:	637b      	str	r3, [r7, #52]	; 0x34
 8011c44:	e00c      	b.n	8011c60 <MB85RS_saveFen+0x94>
		data[32 + i] = data_chessclock[i];
 8011c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c48:	3320      	adds	r3, #32
 8011c4a:	4914      	ldr	r1, [pc, #80]	; (8011c9c <MB85RS_saveFen+0xd0>)
 8011c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c4e:	440a      	add	r2, r1
 8011c50:	7812      	ldrb	r2, [r2, #0]
 8011c52:	3340      	adds	r3, #64	; 0x40
 8011c54:	443b      	add	r3, r7
 8011c56:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for (int i = 0; i < 14; i++) {
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8011c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c62:	2b0d      	cmp	r3, #13
 8011c64:	ddef      	ble.n	8011c46 <MB85RS_saveFen+0x7a>
	}
	MB85RS_write(pointsave*46,data, 46);
 8011c66:	4b0e      	ldr	r3, [pc, #56]	; (8011ca0 <MB85RS_saveFen+0xd4>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	232e      	movs	r3, #46	; 0x2e
 8011c6e:	fb02 f303 	mul.w	r3, r2, r3
 8011c72:	4618      	mov	r0, r3
 8011c74:	1d3b      	adds	r3, r7, #4
 8011c76:	222e      	movs	r2, #46	; 0x2e
 8011c78:	4619      	mov	r1, r3
 8011c7a:	f7ff fe47 	bl	801190c <MB85RS_write>
	pointsave++;
 8011c7e:	4b08      	ldr	r3, [pc, #32]	; (8011ca0 <MB85RS_saveFen+0xd4>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	b29a      	uxth	r2, r3
 8011c86:	4b06      	ldr	r3, [pc, #24]	; (8011ca0 <MB85RS_saveFen+0xd4>)
 8011c88:	801a      	strh	r2, [r3, #0]
	MB85RS_WritePointSave();
 8011c8a:	f7ff ff21 	bl	8011ad0 <MB85RS_WritePointSave>
}
 8011c8e:	bf00      	nop
 8011c90:	3740      	adds	r7, #64	; 0x40
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	20008f20 	.word	0x20008f20
 8011c9c:	20007c90 	.word	0x20007c90
 8011ca0:	20007ca6 	.word	0x20007ca6

08011ca4 <handlerMb85rs>:

void handlerMb85rs() {
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
	if (data_chessclock[9] == 1) { //CLOCKSTATUS { READY=0,BEGIN_PLAY=1,PLAYING=2,PLAY_TO_PAUSE=3,PAUSE_TO_PLAY=4,ONE_SIDE_OVER_TIME=5,ALL_SIDE_OVER_TIME=6 };
 8011ca8:	4b07      	ldr	r3, [pc, #28]	; (8011cc8 <handlerMb85rs+0x24>)
 8011caa:	7a5b      	ldrb	r3, [r3, #9]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d102      	bne.n	8011cb6 <handlerMb85rs+0x12>
		MB85RS_WriteNewGame();
 8011cb0:	f7ff ff3e 	bl	8011b30 <MB85RS_WriteNewGame>
	} else if (data_chessclock[9] == 2) {
		MB85RS_saveFen();
	}
}
 8011cb4:	e005      	b.n	8011cc2 <handlerMb85rs+0x1e>
	} else if (data_chessclock[9] == 2) {
 8011cb6:	4b04      	ldr	r3, [pc, #16]	; (8011cc8 <handlerMb85rs+0x24>)
 8011cb8:	7a5b      	ldrb	r3, [r3, #9]
 8011cba:	2b02      	cmp	r3, #2
 8011cbc:	d101      	bne.n	8011cc2 <handlerMb85rs+0x1e>
		MB85RS_saveFen();
 8011cbe:	f7ff ff85 	bl	8011bcc <MB85RS_saveFen>
}
 8011cc2:	bf00      	nop
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20007c90 	.word	0x20007c90

08011ccc <RTC_SetTime>:
extern RTC_HandleTypeDef hrtc;


/* data=6byte /second/minute/hour/day/month/year */
void RTC_SetTime(uint8_t* datatime)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b088      	sub	sp, #32
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime = {0};
 8011cd4:	f107 030c 	add.w	r3, r7, #12
 8011cd8:	2200      	movs	r2, #0
 8011cda:	601a      	str	r2, [r3, #0]
 8011cdc:	605a      	str	r2, [r3, #4]
 8011cde:	609a      	str	r2, [r3, #8]
 8011ce0:	60da      	str	r2, [r3, #12]
 8011ce2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	60bb      	str	r3, [r7, #8]
  sTime.Hours = datatime[2];
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	789b      	ldrb	r3, [r3, #2]
 8011cec:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = datatime[1];
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	785b      	ldrb	r3, [r3, #1]
 8011cf2:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = datatime[0];
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8011d02:	f107 030c 	add.w	r3, r7, #12
 8011d06:	2200      	movs	r2, #0
 8011d08:	4619      	mov	r1, r3
 8011d0a:	4811      	ldr	r0, [pc, #68]	; (8011d50 <RTC_SetTime+0x84>)
 8011d0c:	f7f5 faee 	bl	80072ec <HAL_RTC_SetTime>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d001      	beq.n	8011d1a <RTC_SetTime+0x4e>
  {
    Error_Handler();
 8011d16:	f7ee ff41 	bl	8000b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	723b      	strb	r3, [r7, #8]
  sDate.Month = datatime[4];
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	791b      	ldrb	r3, [r3, #4]
 8011d22:	727b      	strb	r3, [r7, #9]
  sDate.Date = datatime[3];
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	78db      	ldrb	r3, [r3, #3]
 8011d28:	72bb      	strb	r3, [r7, #10]
  sDate.Year = datatime[5];
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	795b      	ldrb	r3, [r3, #5]
 8011d2e:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8011d30:	f107 0308 	add.w	r3, r7, #8
 8011d34:	2200      	movs	r2, #0
 8011d36:	4619      	mov	r1, r3
 8011d38:	4805      	ldr	r0, [pc, #20]	; (8011d50 <RTC_SetTime+0x84>)
 8011d3a:	f7f5 fbcf 	bl	80074dc <HAL_RTC_SetDate>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d001      	beq.n	8011d48 <RTC_SetTime+0x7c>
  {
    Error_Handler();
 8011d44:	f7ee ff2a 	bl	8000b9c <Error_Handler>
  }
}
 8011d48:	bf00      	nop
 8011d4a:	3720      	adds	r7, #32
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	2000248c 	.word	0x2000248c

08011d54 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t responce_length;
uint16_t responce_period;


/* hàm callback khi phát pulse hoàn thành */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
	if(is_start_measure ==true){
 8011d5c:	4b07      	ldr	r3, [pc, #28]	; (8011d7c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d004      	beq.n	8011d6e <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		point_start_measure = TIM4->CNT;  // điểm bắt đầu đo đạc là giá trị TIM4->CNT hiện tại
 8011d64:	4b06      	ldr	r3, [pc, #24]	; (8011d80 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8011d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	4b06      	ldr	r3, [pc, #24]	; (8011d84 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8011d6c:	801a      	strh	r2, [r3, #0]
	}
}
 8011d6e:	bf00      	nop
 8011d70:	370c      	adds	r7, #12
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	20007cde 	.word	0x20007cde
 8011d80:	40000800 	.word	0x40000800
 8011d84:	20007cdc 	.word	0x20007cdc

08011d88 <ScanPiecesInit>:

void ScanPiecesInit()
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	af00      	add	r7, sp, #0
	/*	mặc định kênh TIM_CCxN bị tắt, cần phải bật nó lên để có thể xuất xung PWM trên nó	*/
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
 8011d8c:	4b09      	ldr	r3, [pc, #36]	; (8011db4 <ScanPiecesInit+0x2c>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2204      	movs	r2, #4
 8011d92:	2108      	movs	r1, #8
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7f8 f8fd 	bl	8009f94 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
 8011d9a:	4b06      	ldr	r3, [pc, #24]	; (8011db4 <ScanPiecesInit+0x2c>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2204      	movs	r2, #4
 8011da0:	2104      	movs	r1, #4
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f8 f8f6 	bl	8009f94 <TIM_CCxChannelCmd>
	HAL_TIM_Base_Start_IT(&htim4);
 8011da8:	4803      	ldr	r0, [pc, #12]	; (8011db8 <ScanPiecesInit+0x30>)
 8011daa:	f7f6 fb39 	bl	8008420 <HAL_TIM_Base_Start_IT>
}
 8011dae:	bf00      	nop
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2000254c 	.word	0x2000254c
 8011db8:	20002624 	.word	0x20002624

08011dbc <PulseOut>:
// độ dài tối đa của length=20
void PulseOut(uint8_t type,uint8_t length,uint8_t outCoil)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	71fb      	strb	r3, [r7, #7]
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	71bb      	strb	r3, [r7, #6]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	717b      	strb	r3, [r7, #5]
	uint16_t _length = length;
 8011dce:	79bb      	ldrb	r3, [r7, #6]
 8011dd0:	827b      	strh	r3, [r7, #18]
	uint16_t period = 84000/ListFrequency[type]; // tính toán chu kỳ
 8011dd2:	79fb      	ldrb	r3, [r7, #7]
 8011dd4:	4a52      	ldr	r2, [pc, #328]	; (8011f20 <PulseOut+0x164>)
 8011dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	4b51      	ldr	r3, [pc, #324]	; (8011f24 <PulseOut+0x168>)
 8011dde:	fb93 f3f2 	sdiv	r3, r3, r2
 8011de2:	823b      	strh	r3, [r7, #16]
	uint16_t duty	 = period/2;
 8011de4:	8a3b      	ldrh	r3, [r7, #16]
 8011de6:	085b      	lsrs	r3, r3, #1
 8011de8:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<_length;i++){
 8011dea:	2300      	movs	r3, #0
 8011dec:	617b      	str	r3, [r7, #20]
 8011dee:	e00c      	b.n	8011e0a <PulseOut+0x4e>
			 pwmdata[i] = duty;
 8011df0:	494d      	ldr	r1, [pc, #308]	; (8011f28 <PulseOut+0x16c>)
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	89fa      	ldrh	r2, [r7, #14]
 8011df6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			 pwmdata32[i] = (uint32_t)duty;
 8011dfa:	89fa      	ldrh	r2, [r7, #14]
 8011dfc:	494b      	ldr	r1, [pc, #300]	; (8011f2c <PulseOut+0x170>)
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<_length;i++){
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	3301      	adds	r3, #1
 8011e08:	617b      	str	r3, [r7, #20]
 8011e0a:	8a7b      	ldrh	r3, [r7, #18]
 8011e0c:	697a      	ldr	r2, [r7, #20]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	dbee      	blt.n	8011df0 <PulseOut+0x34>
	}
	pwmdata[_length] =0;
 8011e12:	8a7b      	ldrh	r3, [r7, #18]
 8011e14:	4a44      	ldr	r2, [pc, #272]	; (8011f28 <PulseOut+0x16c>)
 8011e16:	2100      	movs	r1, #0
 8011e18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pwmdata32[_length]=0;
 8011e1c:	8a7b      	ldrh	r3, [r7, #18]
 8011e1e:	4a43      	ldr	r2, [pc, #268]	; (8011f2c <PulseOut+0x170>)
 8011e20:	2100      	movs	r1, #0
 8011e22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	switch(outCoil){
 8011e26:	797b      	ldrb	r3, [r7, #5]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	2b07      	cmp	r3, #7
 8011e2c:	d874      	bhi.n	8011f18 <PulseOut+0x15c>
 8011e2e:	a201      	add	r2, pc, #4	; (adr r2, 8011e34 <PulseOut+0x78>)
 8011e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e34:	08011e55 	.word	0x08011e55
 8011e38:	08011e6d 	.word	0x08011e6d
 8011e3c:	08011e87 	.word	0x08011e87
 8011e40:	08011e9f 	.word	0x08011e9f
 8011e44:	08011eb7 	.word	0x08011eb7
 8011e48:	08011ecf 	.word	0x08011ecf
 8011e4c:	08011ee9 	.word	0x08011ee9
 8011e50:	08011f01 	.word	0x08011f01
	case 1:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011e54:	4a36      	ldr	r2, [pc, #216]	; (8011f30 <PulseOut+0x174>)
 8011e56:	8a3b      	ldrh	r3, [r7, #16]
 8011e58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e5a:	8a7b      	ldrh	r3, [r7, #18]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	4a31      	ldr	r2, [pc, #196]	; (8011f28 <PulseOut+0x16c>)
 8011e62:	2100      	movs	r1, #0
 8011e64:	4833      	ldr	r0, [pc, #204]	; (8011f34 <PulseOut+0x178>)
 8011e66:	f7f6 fb97 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011e6a:	e055      	b.n	8011f18 <PulseOut+0x15c>
	case 2:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2,(uint32_t *)pwmdata32, _length+1); 	break;
 8011e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011e70:	8a3b      	ldrh	r3, [r7, #16]
 8011e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e74:	8a7b      	ldrh	r3, [r7, #18]
 8011e76:	3301      	adds	r3, #1
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	4a2c      	ldr	r2, [pc, #176]	; (8011f2c <PulseOut+0x170>)
 8011e7c:	2104      	movs	r1, #4
 8011e7e:	482e      	ldr	r0, [pc, #184]	; (8011f38 <PulseOut+0x17c>)
 8011e80:	f7f6 fb8a 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011e84:	e048      	b.n	8011f18 <PulseOut+0x15c>
	case 3:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1,(uint32_t *)pwmdata, _length+1); 	break;
 8011e86:	4a2d      	ldr	r2, [pc, #180]	; (8011f3c <PulseOut+0x180>)
 8011e88:	8a3b      	ldrh	r3, [r7, #16]
 8011e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e8c:	8a7b      	ldrh	r3, [r7, #18]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	4a25      	ldr	r2, [pc, #148]	; (8011f28 <PulseOut+0x16c>)
 8011e94:	2100      	movs	r1, #0
 8011e96:	482a      	ldr	r0, [pc, #168]	; (8011f40 <PulseOut+0x184>)
 8011e98:	f7f6 fb7e 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011e9c:	e03c      	b.n	8011f18 <PulseOut+0x15c>
	case 4: TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011e9e:	4a27      	ldr	r2, [pc, #156]	; (8011f3c <PulseOut+0x180>)
 8011ea0:	8a3b      	ldrh	r3, [r7, #16]
 8011ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ea4:	8a7b      	ldrh	r3, [r7, #18]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	4a1f      	ldr	r2, [pc, #124]	; (8011f28 <PulseOut+0x16c>)
 8011eac:	2108      	movs	r1, #8
 8011eae:	4824      	ldr	r0, [pc, #144]	; (8011f40 <PulseOut+0x184>)
 8011eb0:	f7f6 fb72 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011eb4:	e030      	b.n	8011f18 <PulseOut+0x15c>
	case 5:	TIM1->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2,(uint32_t *)pwmdata, _length+1); 	break;
 8011eb6:	4a21      	ldr	r2, [pc, #132]	; (8011f3c <PulseOut+0x180>)
 8011eb8:	8a3b      	ldrh	r3, [r7, #16]
 8011eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ebc:	8a7b      	ldrh	r3, [r7, #18]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	4a19      	ldr	r2, [pc, #100]	; (8011f28 <PulseOut+0x16c>)
 8011ec4:	2104      	movs	r1, #4
 8011ec6:	481e      	ldr	r0, [pc, #120]	; (8011f40 <PulseOut+0x184>)
 8011ec8:	f7f6 fb66 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011ecc:	e024      	b.n	8011f18 <PulseOut+0x15c>
	case 6:	TIM2->ARR = (uint32_t)period; 	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3,(uint32_t *)pwmdata32, _length+1); 	break;
 8011ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011ed2:	8a3b      	ldrh	r3, [r7, #16]
 8011ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ed6:	8a7b      	ldrh	r3, [r7, #18]
 8011ed8:	3301      	adds	r3, #1
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	4a13      	ldr	r2, [pc, #76]	; (8011f2c <PulseOut+0x170>)
 8011ede:	2108      	movs	r1, #8
 8011ee0:	4815      	ldr	r0, [pc, #84]	; (8011f38 <PulseOut+0x17c>)
 8011ee2:	f7f6 fb59 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011ee6:	e017      	b.n	8011f18 <PulseOut+0x15c>
	case 7:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,(uint32_t *)pwmdata, _length+1); 	break;
 8011ee8:	4a11      	ldr	r2, [pc, #68]	; (8011f30 <PulseOut+0x174>)
 8011eea:	8a3b      	ldrh	r3, [r7, #16]
 8011eec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011eee:	8a7b      	ldrh	r3, [r7, #18]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	4a0c      	ldr	r2, [pc, #48]	; (8011f28 <PulseOut+0x16c>)
 8011ef6:	210c      	movs	r1, #12
 8011ef8:	480e      	ldr	r0, [pc, #56]	; (8011f34 <PulseOut+0x178>)
 8011efa:	f7f6 fb4d 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011efe:	e00b      	b.n	8011f18 <PulseOut+0x15c>
	case 8:	TIM3->ARR = period; 			HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3,(uint32_t *)pwmdata, _length+1); 	break;
 8011f00:	4a0b      	ldr	r2, [pc, #44]	; (8011f30 <PulseOut+0x174>)
 8011f02:	8a3b      	ldrh	r3, [r7, #16]
 8011f04:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011f06:	8a7b      	ldrh	r3, [r7, #18]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	4a06      	ldr	r2, [pc, #24]	; (8011f28 <PulseOut+0x16c>)
 8011f0e:	2108      	movs	r1, #8
 8011f10:	4808      	ldr	r0, [pc, #32]	; (8011f34 <PulseOut+0x178>)
 8011f12:	f7f6 fb41 	bl	8008598 <HAL_TIM_PWM_Start_DMA>
 8011f16:	bf00      	nop
	}
}
 8011f18:	bf00      	nop
 8011f1a:	3718      	adds	r7, #24
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	080133a0 	.word	0x080133a0
 8011f24:	00014820 	.word	0x00014820
 8011f28:	20008f60 	.word	0x20008f60
 8011f2c:	20008fb0 	.word	0x20008fb0
 8011f30:	40000400 	.word	0x40000400
 8011f34:	200025dc 	.word	0x200025dc
 8011f38:	20002594 	.word	0x20002594
 8011f3c:	40010000 	.word	0x40010000
 8011f40:	2000254c 	.word	0x2000254c

08011f44 <SelectReadCoil>:
void SelectReadCoil(uint8_t readCoil)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	71fb      	strb	r3, [r7, #7]
	switch(readCoil){
 8011f4e:	79fb      	ldrb	r3, [r7, #7]
 8011f50:	3b01      	subs	r3, #1
 8011f52:	2b07      	cmp	r3, #7
 8011f54:	f200 809c 	bhi.w	8012090 <SelectReadCoil+0x14c>
 8011f58:	a201      	add	r2, pc, #4	; (adr r2, 8011f60 <SelectReadCoil+0x1c>)
 8011f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f5e:	bf00      	nop
 8011f60:	08011f81 	.word	0x08011f81
 8011f64:	08011fa3 	.word	0x08011fa3
 8011f68:	08011fc5 	.word	0x08011fc5
 8011f6c:	08011fe7 	.word	0x08011fe7
 8011f70:	08012009 	.word	0x08012009
 8011f74:	0801202b 	.word	0x0801202b
 8011f78:	0801204d 	.word	0x0801204d
 8011f7c:	0801206f 	.word	0x0801206f
		case 1: CD4051_A_1; CD4051_B_0; CD4051_C_1;break; //coil_1 <-> X5
 8011f80:	2201      	movs	r2, #1
 8011f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011f86:	4844      	ldr	r0, [pc, #272]	; (8012098 <SelectReadCoil+0x154>)
 8011f88:	f7f1 f886 	bl	8003098 <HAL_GPIO_WritePin>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	2120      	movs	r1, #32
 8011f90:	4842      	ldr	r0, [pc, #264]	; (801209c <SelectReadCoil+0x158>)
 8011f92:	f7f1 f881 	bl	8003098 <HAL_GPIO_WritePin>
 8011f96:	2201      	movs	r2, #1
 8011f98:	2140      	movs	r1, #64	; 0x40
 8011f9a:	4840      	ldr	r0, [pc, #256]	; (801209c <SelectReadCoil+0x158>)
 8011f9c:	f7f1 f87c 	bl	8003098 <HAL_GPIO_WritePin>
 8011fa0:	e076      	b.n	8012090 <SelectReadCoil+0x14c>
		case 2: CD4051_A_1; CD4051_B_1; CD4051_C_1;break; //coil_2 <-> X7
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011fa8:	483b      	ldr	r0, [pc, #236]	; (8012098 <SelectReadCoil+0x154>)
 8011faa:	f7f1 f875 	bl	8003098 <HAL_GPIO_WritePin>
 8011fae:	2201      	movs	r2, #1
 8011fb0:	2120      	movs	r1, #32
 8011fb2:	483a      	ldr	r0, [pc, #232]	; (801209c <SelectReadCoil+0x158>)
 8011fb4:	f7f1 f870 	bl	8003098 <HAL_GPIO_WritePin>
 8011fb8:	2201      	movs	r2, #1
 8011fba:	2140      	movs	r1, #64	; 0x40
 8011fbc:	4837      	ldr	r0, [pc, #220]	; (801209c <SelectReadCoil+0x158>)
 8011fbe:	f7f1 f86b 	bl	8003098 <HAL_GPIO_WritePin>
 8011fc2:	e065      	b.n	8012090 <SelectReadCoil+0x14c>
		case 3: CD4051_A_0; CD4051_B_1; CD4051_C_1;break; //coil_3 <-> X6
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011fca:	4833      	ldr	r0, [pc, #204]	; (8012098 <SelectReadCoil+0x154>)
 8011fcc:	f7f1 f864 	bl	8003098 <HAL_GPIO_WritePin>
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	2120      	movs	r1, #32
 8011fd4:	4831      	ldr	r0, [pc, #196]	; (801209c <SelectReadCoil+0x158>)
 8011fd6:	f7f1 f85f 	bl	8003098 <HAL_GPIO_WritePin>
 8011fda:	2201      	movs	r2, #1
 8011fdc:	2140      	movs	r1, #64	; 0x40
 8011fde:	482f      	ldr	r0, [pc, #188]	; (801209c <SelectReadCoil+0x158>)
 8011fe0:	f7f1 f85a 	bl	8003098 <HAL_GPIO_WritePin>
 8011fe4:	e054      	b.n	8012090 <SelectReadCoil+0x14c>
		case 4: CD4051_A_0; CD4051_B_0; CD4051_C_1;break; //coil_4 <-> X4
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011fec:	482a      	ldr	r0, [pc, #168]	; (8012098 <SelectReadCoil+0x154>)
 8011fee:	f7f1 f853 	bl	8003098 <HAL_GPIO_WritePin>
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	2120      	movs	r1, #32
 8011ff6:	4829      	ldr	r0, [pc, #164]	; (801209c <SelectReadCoil+0x158>)
 8011ff8:	f7f1 f84e 	bl	8003098 <HAL_GPIO_WritePin>
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	2140      	movs	r1, #64	; 0x40
 8012000:	4826      	ldr	r0, [pc, #152]	; (801209c <SelectReadCoil+0x158>)
 8012002:	f7f1 f849 	bl	8003098 <HAL_GPIO_WritePin>
 8012006:	e043      	b.n	8012090 <SelectReadCoil+0x14c>
		case 5: CD4051_A_0; CD4051_B_1; CD4051_C_0;break; //coil_5 <-> X2
 8012008:	2200      	movs	r2, #0
 801200a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801200e:	4822      	ldr	r0, [pc, #136]	; (8012098 <SelectReadCoil+0x154>)
 8012010:	f7f1 f842 	bl	8003098 <HAL_GPIO_WritePin>
 8012014:	2201      	movs	r2, #1
 8012016:	2120      	movs	r1, #32
 8012018:	4820      	ldr	r0, [pc, #128]	; (801209c <SelectReadCoil+0x158>)
 801201a:	f7f1 f83d 	bl	8003098 <HAL_GPIO_WritePin>
 801201e:	2200      	movs	r2, #0
 8012020:	2140      	movs	r1, #64	; 0x40
 8012022:	481e      	ldr	r0, [pc, #120]	; (801209c <SelectReadCoil+0x158>)
 8012024:	f7f1 f838 	bl	8003098 <HAL_GPIO_WritePin>
 8012028:	e032      	b.n	8012090 <SelectReadCoil+0x14c>
		case 6: CD4051_A_1; CD4051_B_0; CD4051_C_0;break; //coil_6 <-> X1
 801202a:	2201      	movs	r2, #1
 801202c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012030:	4819      	ldr	r0, [pc, #100]	; (8012098 <SelectReadCoil+0x154>)
 8012032:	f7f1 f831 	bl	8003098 <HAL_GPIO_WritePin>
 8012036:	2200      	movs	r2, #0
 8012038:	2120      	movs	r1, #32
 801203a:	4818      	ldr	r0, [pc, #96]	; (801209c <SelectReadCoil+0x158>)
 801203c:	f7f1 f82c 	bl	8003098 <HAL_GPIO_WritePin>
 8012040:	2200      	movs	r2, #0
 8012042:	2140      	movs	r1, #64	; 0x40
 8012044:	4815      	ldr	r0, [pc, #84]	; (801209c <SelectReadCoil+0x158>)
 8012046:	f7f1 f827 	bl	8003098 <HAL_GPIO_WritePin>
 801204a:	e021      	b.n	8012090 <SelectReadCoil+0x14c>
		case 7: CD4051_A_0; CD4051_B_0; CD4051_C_0;break; //coil_7 <-> X0
 801204c:	2200      	movs	r2, #0
 801204e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012052:	4811      	ldr	r0, [pc, #68]	; (8012098 <SelectReadCoil+0x154>)
 8012054:	f7f1 f820 	bl	8003098 <HAL_GPIO_WritePin>
 8012058:	2200      	movs	r2, #0
 801205a:	2120      	movs	r1, #32
 801205c:	480f      	ldr	r0, [pc, #60]	; (801209c <SelectReadCoil+0x158>)
 801205e:	f7f1 f81b 	bl	8003098 <HAL_GPIO_WritePin>
 8012062:	2200      	movs	r2, #0
 8012064:	2140      	movs	r1, #64	; 0x40
 8012066:	480d      	ldr	r0, [pc, #52]	; (801209c <SelectReadCoil+0x158>)
 8012068:	f7f1 f816 	bl	8003098 <HAL_GPIO_WritePin>
 801206c:	e010      	b.n	8012090 <SelectReadCoil+0x14c>
		case 8: CD4051_A_1; CD4051_B_1; CD4051_C_0;break; //coil_8 <-> X3
 801206e:	2201      	movs	r2, #1
 8012070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012074:	4808      	ldr	r0, [pc, #32]	; (8012098 <SelectReadCoil+0x154>)
 8012076:	f7f1 f80f 	bl	8003098 <HAL_GPIO_WritePin>
 801207a:	2201      	movs	r2, #1
 801207c:	2120      	movs	r1, #32
 801207e:	4807      	ldr	r0, [pc, #28]	; (801209c <SelectReadCoil+0x158>)
 8012080:	f7f1 f80a 	bl	8003098 <HAL_GPIO_WritePin>
 8012084:	2200      	movs	r2, #0
 8012086:	2140      	movs	r1, #64	; 0x40
 8012088:	4804      	ldr	r0, [pc, #16]	; (801209c <SelectReadCoil+0x158>)
 801208a:	f7f1 f805 	bl	8003098 <HAL_GPIO_WritePin>
 801208e:	bf00      	nop
	}
}
 8012090:	bf00      	nop
 8012092:	3708      	adds	r7, #8
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	40020000 	.word	0x40020000
 801209c:	40020400 	.word	0x40020400

080120a0 <Measure>:
//	memset(inputCapture_data,0,sizeof(inputCapture_data)); 								// clear ic_data
//	TIM4->ARR = ListIC_measure[type];  													// xác định khoảng đo tối đa
//	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
//}
void Measure(uint8_t type,uint8_t outCoil,uint8_t readCoil)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b086      	sub	sp, #24
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	4603      	mov	r3, r0
 80120a8:	71fb      	strb	r3, [r7, #7]
 80120aa:	460b      	mov	r3, r1
 80120ac:	71bb      	strb	r3, [r7, #6]
 80120ae:	4613      	mov	r3, r2
 80120b0:	717b      	strb	r3, [r7, #5]
//	if(type >=100){
//		PulseOut(type,8, outCoil);
//	}else{
//		PulseOut(type,6, outCoil);
//	}
	PulseOut(type,ListLengthOut[type], outCoil);
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	4a7f      	ldr	r2, [pc, #508]	; (80122b4 <Measure+0x214>)
 80120b6:	5cd1      	ldrb	r1, [r2, r3]
 80120b8:	79ba      	ldrb	r2, [r7, #6]
 80120ba:	79fb      	ldrb	r3, [r7, #7]
 80120bc:	4618      	mov	r0, r3
 80120be:	f7ff fe7d 	bl	8011dbc <PulseOut>
	SelectReadCoil(readCoil);
 80120c2:	797b      	ldrb	r3, [r7, #5]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7ff ff3d 	bl	8011f44 <SelectReadCoil>
	//StartInputPWM(type);
	is_start_measure = true;  															// bật flag measure
 80120ca:	4b7b      	ldr	r3, [pc, #492]	; (80122b8 <Measure+0x218>)
 80120cc:	2201      	movs	r2, #1
 80120ce:	701a      	strb	r2, [r3, #0]
	//memset(inputCapture_data,0,sizeof(inputCapture_data)); 								// clear ic_data
	for(int i=0;i<IC_MAX;i++){
 80120d0:	2300      	movs	r3, #0
 80120d2:	617b      	str	r3, [r7, #20]
 80120d4:	e007      	b.n	80120e6 <Measure+0x46>
		inputCapture_data[i]=0;
 80120d6:	4a79      	ldr	r2, [pc, #484]	; (80122bc <Measure+0x21c>)
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	2100      	movs	r1, #0
 80120dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<IC_MAX;i++){
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	3301      	adds	r3, #1
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2b31      	cmp	r3, #49	; 0x31
 80120ea:	ddf4      	ble.n	80120d6 <Measure+0x36>
	}
	if(outCoil==8 && readCoil==8){
 80120ec:	79bb      	ldrb	r3, [r7, #6]
 80120ee:	2b08      	cmp	r3, #8
 80120f0:	d107      	bne.n	8012102 <Measure+0x62>
 80120f2:	797b      	ldrb	r3, [r7, #5]
 80120f4:	2b08      	cmp	r3, #8
 80120f6:	d104      	bne.n	8012102 <Measure+0x62>
		TIM4->ARR = 60000;
 80120f8:	4b71      	ldr	r3, [pc, #452]	; (80122c0 <Measure+0x220>)
 80120fa:	f64e 2260 	movw	r2, #60000	; 0xea60
 80120fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8012100:	e005      	b.n	801210e <Measure+0x6e>
	}else{
		TIM4->ARR = ListIC_measure[type];
 8012102:	79fb      	ldrb	r3, [r7, #7]
 8012104:	4a6f      	ldr	r2, [pc, #444]	; (80122c4 <Measure+0x224>)
 8012106:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801210a:	4b6d      	ldr	r3, [pc, #436]	; (80122c0 <Measure+0x220>)
 801210c:	62da      	str	r2, [r3, #44]	; 0x2c
	}												// xác định khoảng đo tối đa
	HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2,(uint32_t*)inputCapture_data, IC_MAX);  	// giá trị đo đạc lưu vào ic_data
 801210e:	2332      	movs	r3, #50	; 0x32
 8012110:	4a6a      	ldr	r2, [pc, #424]	; (80122bc <Measure+0x21c>)
 8012112:	2104      	movs	r1, #4
 8012114:	486c      	ldr	r0, [pc, #432]	; (80122c8 <Measure+0x228>)
 8012116:	f7f6 fc49 	bl	80089ac <HAL_TIM_IC_Start_DMA>


	startmeasure=0;
 801211a:	4b6c      	ldr	r3, [pc, #432]	; (80122cc <Measure+0x22c>)
 801211c:	2200      	movs	r2, #0
 801211e:	801a      	strh	r2, [r3, #0]
	stopmeasure=0;
 8012120:	4b6b      	ldr	r3, [pc, #428]	; (80122d0 <Measure+0x230>)
 8012122:	2200      	movs	r2, #0
 8012124:	801a      	strh	r2, [r3, #0]
	responce_length=0;
 8012126:	4b6b      	ldr	r3, [pc, #428]	; (80122d4 <Measure+0x234>)
 8012128:	2200      	movs	r2, #0
 801212a:	701a      	strb	r2, [r3, #0]
	responce_period=0;
 801212c:	4b6a      	ldr	r3, [pc, #424]	; (80122d8 <Measure+0x238>)
 801212e:	2200      	movs	r2, #0
 8012130:	801a      	strh	r2, [r3, #0]
	uint8_t sq = FileRankToSquare(outCoil, readCoil);
 8012132:	797a      	ldrb	r2, [r7, #5]
 8012134:	79bb      	ldrb	r3, [r7, #6]
 8012136:	4611      	mov	r1, r2
 8012138:	4618      	mov	r0, r3
 801213a:	f000 f991 	bl	8012460 <FileRankToSquare>
 801213e:	4603      	mov	r3, r0
 8012140:	72fb      	strb	r3, [r7, #11]

	while(is_start_measure){};  // chờ cho quá trình đo PWM hoàn thành
 8012142:	bf00      	nop
 8012144:	4b5c      	ldr	r3, [pc, #368]	; (80122b8 <Measure+0x218>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1fb      	bne.n	8012144 <Measure+0xa4>

	/* Pulse input được đo từ lúc phát PulseOut đến timesIC_measure[tupe]
	 * để xác định số Pulses ta chỉ tính Pulse phản hồi (từ lúc phát Pulse kết thúc) đến giới hạn thời gian đo */

	// xác định điểm đầu Measure
	for(int i=0;i<IC_MAX;i++){
 801214c:	2300      	movs	r3, #0
 801214e:	613b      	str	r3, [r7, #16]
 8012150:	e02d      	b.n	80121ae <Measure+0x10e>
		if(inputCapture_data[i] >point_start_measure){
 8012152:	4a5a      	ldr	r2, [pc, #360]	; (80122bc <Measure+0x21c>)
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801215a:	4b60      	ldr	r3, [pc, #384]	; (80122dc <Measure+0x23c>)
 801215c:	881b      	ldrh	r3, [r3, #0]
 801215e:	429a      	cmp	r2, r3
 8012160:	d904      	bls.n	801216c <Measure+0xcc>
			startmeasure=i;
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	b29a      	uxth	r2, r3
 8012166:	4b59      	ldr	r3, [pc, #356]	; (80122cc <Measure+0x22c>)
 8012168:	801a      	strh	r2, [r3, #0]
			break;
 801216a:	e023      	b.n	80121b4 <Measure+0x114>
		}else if(inputCapture_data[i]==0){ // nếu ko có xung nào nhận được
 801216c:	4a53      	ldr	r2, [pc, #332]	; (80122bc <Measure+0x21c>)
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d117      	bne.n	80121a8 <Measure+0x108>
			responce_length=0;
 8012178:	4b56      	ldr	r3, [pc, #344]	; (80122d4 <Measure+0x234>)
 801217a:	2200      	movs	r2, #0
 801217c:	701a      	strb	r2, [r3, #0]
			responce_period=0;
 801217e:	4b56      	ldr	r3, [pc, #344]	; (80122d8 <Measure+0x238>)
 8012180:	2200      	movs	r2, #0
 8012182:	801a      	strh	r2, [r3, #0]
			datapieces[type][sq][PULSES]=0;
 8012184:	79fa      	ldrb	r2, [r7, #7]
 8012186:	7afb      	ldrb	r3, [r7, #11]
 8012188:	4955      	ldr	r1, [pc, #340]	; (80122e0 <Measure+0x240>)
 801218a:	0192      	lsls	r2, r2, #6
 801218c:	4413      	add	r3, r2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	440b      	add	r3, r1
 8012192:	2200      	movs	r2, #0
 8012194:	805a      	strh	r2, [r3, #2]
			datapieces[type][sq][PERIOD]=0;
 8012196:	79fa      	ldrb	r2, [r7, #7]
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	4951      	ldr	r1, [pc, #324]	; (80122e0 <Measure+0x240>)
 801219c:	0192      	lsls	r2, r2, #6
 801219e:	4413      	add	r3, r2
 80121a0:	2200      	movs	r2, #0
 80121a2:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
			return;
 80121a6:	e082      	b.n	80122ae <Measure+0x20e>
	for(int i=0;i<IC_MAX;i++){
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	3301      	adds	r3, #1
 80121ac:	613b      	str	r3, [r7, #16]
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	2b31      	cmp	r3, #49	; 0x31
 80121b2:	ddce      	ble.n	8012152 <Measure+0xb2>
		}
	}

	// xác định điểm cuối Measure
	for(int i=startmeasure;i<IC_MAX-1;i++){
 80121b4:	4b45      	ldr	r3, [pc, #276]	; (80122cc <Measure+0x22c>)
 80121b6:	881b      	ldrh	r3, [r3, #0]
 80121b8:	60fb      	str	r3, [r7, #12]
 80121ba:	e011      	b.n	80121e0 <Measure+0x140>
		stopmeasure=i;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	b29a      	uxth	r2, r3
 80121c0:	4b43      	ldr	r3, [pc, #268]	; (80122d0 <Measure+0x230>)
 80121c2:	801a      	strh	r2, [r3, #0]
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	3301      	adds	r3, #1
 80121c8:	4a3c      	ldr	r2, [pc, #240]	; (80122bc <Measure+0x21c>)
 80121ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80121ce:	493b      	ldr	r1, [pc, #236]	; (80122bc <Measure+0x21c>)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d306      	bcc.n	80121e8 <Measure+0x148>
	for(int i=startmeasure;i<IC_MAX-1;i++){
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	3301      	adds	r3, #1
 80121de:	60fb      	str	r3, [r7, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2b30      	cmp	r3, #48	; 0x30
 80121e4:	ddea      	ble.n	80121bc <Measure+0x11c>
 80121e6:	e000      	b.n	80121ea <Measure+0x14a>
		if(inputCapture_data[i+1] < inputCapture_data[i])break;
 80121e8:	bf00      	nop
	}
	if(inputCapture_data[IC_MAX-1]!=0) stopmeasure=IC_MAX;
 80121ea:	4b34      	ldr	r3, [pc, #208]	; (80122bc <Measure+0x21c>)
 80121ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d002      	beq.n	80121fa <Measure+0x15a>
 80121f4:	4b36      	ldr	r3, [pc, #216]	; (80122d0 <Measure+0x230>)
 80121f6:	2232      	movs	r2, #50	; 0x32
 80121f8:	801a      	strh	r2, [r3, #0]

	// tính toán số lượng Pulses phản hồi
	responce_length = stopmeasure-startmeasure;
 80121fa:	4b35      	ldr	r3, [pc, #212]	; (80122d0 <Measure+0x230>)
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	b2da      	uxtb	r2, r3
 8012200:	4b32      	ldr	r3, [pc, #200]	; (80122cc <Measure+0x22c>)
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	b2db      	uxtb	r3, r3
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	b2da      	uxtb	r2, r3
 801220a:	4b32      	ldr	r3, [pc, #200]	; (80122d4 <Measure+0x234>)
 801220c:	701a      	strb	r2, [r3, #0]

	// tính period phản hồi
	if(responce_length>=5){
 801220e:	4b31      	ldr	r3, [pc, #196]	; (80122d4 <Measure+0x234>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	2b04      	cmp	r3, #4
 8012214:	d917      	bls.n	8012246 <Measure+0x1a6>
		responce_period = (inputCapture_data[startmeasure+5] - inputCapture_data[startmeasure]) / 5;
 8012216:	4b2d      	ldr	r3, [pc, #180]	; (80122cc <Measure+0x22c>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	3305      	adds	r3, #5
 801221c:	4a27      	ldr	r2, [pc, #156]	; (80122bc <Measure+0x21c>)
 801221e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012222:	461a      	mov	r2, r3
 8012224:	4b29      	ldr	r3, [pc, #164]	; (80122cc <Measure+0x22c>)
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	4619      	mov	r1, r3
 801222a:	4b24      	ldr	r3, [pc, #144]	; (80122bc <Measure+0x21c>)
 801222c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8012230:	1ad3      	subs	r3, r2, r3
 8012232:	4a2c      	ldr	r2, [pc, #176]	; (80122e4 <Measure+0x244>)
 8012234:	fb82 1203 	smull	r1, r2, r2, r3
 8012238:	1052      	asrs	r2, r2, #1
 801223a:	17db      	asrs	r3, r3, #31
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	b29a      	uxth	r2, r3
 8012240:	4b25      	ldr	r3, [pc, #148]	; (80122d8 <Measure+0x238>)
 8012242:	801a      	strh	r2, [r3, #0]
 8012244:	e01d      	b.n	8012282 <Measure+0x1e2>
	}else if(responce_length>3){
 8012246:	4b23      	ldr	r3, [pc, #140]	; (80122d4 <Measure+0x234>)
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	2b03      	cmp	r3, #3
 801224c:	d919      	bls.n	8012282 <Measure+0x1e2>
		responce_period = (inputCapture_data[startmeasure+responce_length-1]-inputCapture_data[startmeasure])/(responce_length-1);
 801224e:	4b1f      	ldr	r3, [pc, #124]	; (80122cc <Measure+0x22c>)
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	461a      	mov	r2, r3
 8012254:	4b1f      	ldr	r3, [pc, #124]	; (80122d4 <Measure+0x234>)
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	4413      	add	r3, r2
 801225a:	3b01      	subs	r3, #1
 801225c:	4a17      	ldr	r2, [pc, #92]	; (80122bc <Measure+0x21c>)
 801225e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012262:	461a      	mov	r2, r3
 8012264:	4b19      	ldr	r3, [pc, #100]	; (80122cc <Measure+0x22c>)
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	4619      	mov	r1, r3
 801226a:	4b14      	ldr	r3, [pc, #80]	; (80122bc <Measure+0x21c>)
 801226c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8012270:	1ad2      	subs	r2, r2, r3
 8012272:	4b18      	ldr	r3, [pc, #96]	; (80122d4 <Measure+0x234>)
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	3b01      	subs	r3, #1
 8012278:	fb92 f3f3 	sdiv	r3, r2, r3
 801227c:	b29a      	uxth	r2, r3
 801227e:	4b16      	ldr	r3, [pc, #88]	; (80122d8 <Measure+0x238>)
 8012280:	801a      	strh	r2, [r3, #0]
	}
	// đặt số xung phản hồi vào từng ô
	datapieces[type][sq][PULSES]=responce_length;
 8012282:	4b14      	ldr	r3, [pc, #80]	; (80122d4 <Measure+0x234>)
 8012284:	7819      	ldrb	r1, [r3, #0]
 8012286:	79fa      	ldrb	r2, [r7, #7]
 8012288:	7afb      	ldrb	r3, [r7, #11]
 801228a:	b288      	uxth	r0, r1
 801228c:	4914      	ldr	r1, [pc, #80]	; (80122e0 <Measure+0x240>)
 801228e:	0192      	lsls	r2, r2, #6
 8012290:	4413      	add	r3, r2
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	440b      	add	r3, r1
 8012296:	4602      	mov	r2, r0
 8012298:	805a      	strh	r2, [r3, #2]
	datapieces[type][sq][PERIOD]=responce_period;
 801229a:	79fa      	ldrb	r2, [r7, #7]
 801229c:	7afb      	ldrb	r3, [r7, #11]
 801229e:	490e      	ldr	r1, [pc, #56]	; (80122d8 <Measure+0x238>)
 80122a0:	8808      	ldrh	r0, [r1, #0]
 80122a2:	490f      	ldr	r1, [pc, #60]	; (80122e0 <Measure+0x240>)
 80122a4:	0192      	lsls	r2, r2, #6
 80122a6:	4413      	add	r3, r2
 80122a8:	4602      	mov	r2, r0
 80122aa:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
}
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	080133c4 	.word	0x080133c4
 80122b8:	20007cde 	.word	0x20007cde
 80122bc:	20009050 	.word	0x20009050
 80122c0:	40000800 	.word	0x40000800
 80122c4:	08013400 	.word	0x08013400
 80122c8:	20002624 	.word	0x20002624
 80122cc:	200090b4 	.word	0x200090b4
 80122d0:	200090b6 	.word	0x200090b6
 80122d4:	200090b8 	.word	0x200090b8
 80122d8:	200090ba 	.word	0x200090ba
 80122dc:	20007cdc 	.word	0x20007cdc
 80122e0:	20007ce0 	.word	0x20007ce0
 80122e4:	66666667 	.word	0x66666667

080122e8 <Scan>:
 * Return 0: quá trình quét hoàn tất và không phát hiện sự thay đổi của FEN
 * Return 1: quá trình quét hoàn tất và phát hiện có sự thay đổi FEN
 * Return 2: quá trình quét có xảy ra ChessClock Side Thay đổi
 *  enableClockSideInterrupt: có cho phép return lại khi chessclock thay đổi hay không */
SCANRESULT Scan(bool enableClockSideInterrup)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b08a      	sub	sp, #40	; 0x28
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	4603      	mov	r3, r0
 80122f0:	71fb      	strb	r3, [r7, #7]
	// clear data
	for(int i=0;i<64;i++){
 80122f2:	2300      	movs	r3, #0
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
 80122f6:	e007      	b.n	8012308 <Scan+0x20>
		datamain[i]=0;
 80122f8:	4a56      	ldr	r2, [pc, #344]	; (8012454 <Scan+0x16c>)
 80122fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fc:	4413      	add	r3, r2
 80122fe:	2200      	movs	r2, #0
 8012300:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012304:	3301      	adds	r3, #1
 8012306:	627b      	str	r3, [r7, #36]	; 0x24
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	2b3f      	cmp	r3, #63	; 0x3f
 801230c:	ddf4      	ble.n	80122f8 <Scan+0x10>
	}
	for(int t=0;t<18;t++){
 801230e:	2300      	movs	r3, #0
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	e01c      	b.n	801234e <Scan+0x66>
		for(int s =0;s<64;s++){
 8012314:	2300      	movs	r3, #0
 8012316:	61fb      	str	r3, [r7, #28]
 8012318:	e013      	b.n	8012342 <Scan+0x5a>
			datapieces[t][s][PULSES]=0;
 801231a:	494f      	ldr	r1, [pc, #316]	; (8012458 <Scan+0x170>)
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	019a      	lsls	r2, r3, #6
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	4413      	add	r3, r2
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	440b      	add	r3, r1
 8012328:	2200      	movs	r2, #0
 801232a:	805a      	strh	r2, [r3, #2]
			datapieces[t][s][PERIOD]=0;
 801232c:	494a      	ldr	r1, [pc, #296]	; (8012458 <Scan+0x170>)
 801232e:	6a3b      	ldr	r3, [r7, #32]
 8012330:	019a      	lsls	r2, r3, #6
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	4413      	add	r3, r2
 8012336:	2200      	movs	r2, #0
 8012338:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
		for(int s =0;s<64;s++){
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	3301      	adds	r3, #1
 8012340:	61fb      	str	r3, [r7, #28]
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	2b3f      	cmp	r3, #63	; 0x3f
 8012346:	dde8      	ble.n	801231a <Scan+0x32>
	for(int t=0;t<18;t++){
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	3301      	adds	r3, #1
 801234c:	623b      	str	r3, [r7, #32]
 801234e:	6a3b      	ldr	r3, [r7, #32]
 8012350:	2b11      	cmp	r3, #17
 8012352:	dddf      	ble.n	8012314 <Scan+0x2c>
		}
	}
	for(int type=17;type>=0;type--){
 8012354:	2311      	movs	r3, #17
 8012356:	61bb      	str	r3, [r7, #24]
 8012358:	e06c      	b.n	8012434 <Scan+0x14c>
		for(int outCoil=1;outCoil<=8;outCoil++){
 801235a:	2301      	movs	r3, #1
 801235c:	617b      	str	r3, [r7, #20]
 801235e:	e02f      	b.n	80123c0 <Scan+0xd8>
			for(int readCoil=1;readCoil<=8;readCoil++){
 8012360:	2301      	movs	r3, #1
 8012362:	613b      	str	r3, [r7, #16]
 8012364:	e026      	b.n	80123b4 <Scan+0xcc>
				if(chessclock_interrup==true && enableClockSideInterrup==true){
 8012366:	4b3d      	ldr	r3, [pc, #244]	; (801245c <Scan+0x174>)
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d007      	beq.n	801237e <Scan+0x96>
 801236e:	79fb      	ldrb	r3, [r7, #7]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <Scan+0x96>
					chessclock_interrup=false;
 8012374:	4b39      	ldr	r3, [pc, #228]	; (801245c <Scan+0x174>)
 8012376:	2200      	movs	r2, #0
 8012378:	701a      	strb	r2, [r3, #0]
					return SCAN_SIDE_CHANGED;
 801237a:	2302      	movs	r3, #2
 801237c:	e065      	b.n	801244a <Scan+0x162>
				}
				uint8_t sq = FileRankToSquare(outCoil, readCoil);
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	b2db      	uxtb	r3, r3
 8012382:	693a      	ldr	r2, [r7, #16]
 8012384:	b2d2      	uxtb	r2, r2
 8012386:	4611      	mov	r1, r2
 8012388:	4618      	mov	r0, r3
 801238a:	f000 f869 	bl	8012460 <FileRankToSquare>
 801238e:	4603      	mov	r3, r0
 8012390:	73fb      	strb	r3, [r7, #15]
				if(datamain[sq]==0){  // nếu ô quét chưa thấy piece nào thì tiến hành đo đạc
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	4a2f      	ldr	r2, [pc, #188]	; (8012454 <Scan+0x16c>)
 8012396:	5cd3      	ldrb	r3, [r2, r3]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d108      	bne.n	80123ae <Scan+0xc6>
					Measure(type,outCoil,readCoil);
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	697a      	ldr	r2, [r7, #20]
 80123a2:	b2d1      	uxtb	r1, r2
 80123a4:	693a      	ldr	r2, [r7, #16]
 80123a6:	b2d2      	uxtb	r2, r2
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7ff fe79 	bl	80120a0 <Measure>
			for(int readCoil=1;readCoil<=8;readCoil++){
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	3301      	adds	r3, #1
 80123b2:	613b      	str	r3, [r7, #16]
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	2b08      	cmp	r3, #8
 80123b8:	ddd5      	ble.n	8012366 <Scan+0x7e>
		for(int outCoil=1;outCoil<=8;outCoil++){
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	3301      	adds	r3, #1
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	2b08      	cmp	r3, #8
 80123c4:	ddcc      	ble.n	8012360 <Scan+0x78>
				}
			}
		}
		// chọn piece mạnh nhất
		SQData firstMax,secondMax;
		FindMax(type, &firstMax, &secondMax);
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	f107 0208 	add.w	r2, r7, #8
 80123ce:	f107 010c 	add.w	r1, r7, #12
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 f88c 	bl	80124f0 <FindMax>

		// WKING & BKING chỉ chọn 1 giá trị lớn nhất
		if(type == 0 || type==5){
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d002      	beq.n	80123e4 <Scan+0xfc>
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	2b05      	cmp	r3, #5
 80123e2:	d10c      	bne.n	80123fe <Scan+0x116>
			if(firstMax.square >=0){
 80123e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	db20      	blt.n	801242e <Scan+0x146>
				datamain[firstMax.square] = type+1;
 80123ec:	69bb      	ldr	r3, [r7, #24]
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80123f4:	3301      	adds	r3, #1
 80123f6:	b2d9      	uxtb	r1, r3
 80123f8:	4b16      	ldr	r3, [pc, #88]	; (8012454 <Scan+0x16c>)
 80123fa:	5499      	strb	r1, [r3, r2]
			if(firstMax.square >=0){
 80123fc:	e017      	b.n	801242e <Scan+0x146>
			}
		}else{
			if(firstMax.square >=0){
 80123fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012402:	2b00      	cmp	r3, #0
 8012404:	db07      	blt.n	8012416 <Scan+0x12e>
				datamain[firstMax.square] = type+1;
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	b2db      	uxtb	r3, r3
 801240a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 801240e:	3301      	adds	r3, #1
 8012410:	b2d9      	uxtb	r1, r3
 8012412:	4b10      	ldr	r3, [pc, #64]	; (8012454 <Scan+0x16c>)
 8012414:	5499      	strb	r1, [r3, r2]
			}
			if(secondMax.square >=0){
 8012416:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801241a:	2b00      	cmp	r3, #0
 801241c:	db07      	blt.n	801242e <Scan+0x146>
				datamain[secondMax.square] = type+1;
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	b2db      	uxtb	r3, r3
 8012422:	f997 2009 	ldrsb.w	r2, [r7, #9]
 8012426:	3301      	adds	r3, #1
 8012428:	b2d9      	uxtb	r1, r3
 801242a:	4b0a      	ldr	r3, [pc, #40]	; (8012454 <Scan+0x16c>)
 801242c:	5499      	strb	r1, [r3, r2]
	for(int type=17;type>=0;type--){
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	3b01      	subs	r3, #1
 8012432:	61bb      	str	r3, [r7, #24]
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	2b00      	cmp	r3, #0
 8012438:	da8f      	bge.n	801235a <Scan+0x72>
			}
		}
	}
	if(DetectFenChange()) return SCAN_FEN_CHANGE;
 801243a:	f000 f82b 	bl	8012494 <DetectFenChange>
 801243e:	4603      	mov	r3, r0
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <Scan+0x160>
 8012444:	2301      	movs	r3, #1
 8012446:	e000      	b.n	801244a <Scan+0x162>
	return SCAN_NO_FEN_CHANGE;
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	3728      	adds	r7, #40	; 0x28
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	20008ee0 	.word	0x20008ee0
 8012458:	20007ce0 	.word	0x20007ce0
 801245c:	20007c8c 	.word	0x20007c8c

08012460 <FileRankToSquare>:


// file:1->8 rank:1->8 (file=outCoil , rank=readCoil)
uint8_t FileRankToSquare(uint8_t file,uint8_t rank)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	4603      	mov	r3, r0
 8012468:	460a      	mov	r2, r1
 801246a:	71fb      	strb	r3, [r7, #7]
 801246c:	4613      	mov	r3, r2
 801246e:	71bb      	strb	r3, [r7, #6]
	return (8-file)*8 + rank-1;
 8012470:	79fb      	ldrb	r3, [r7, #7]
 8012472:	f1c3 0308 	rsb	r3, r3, #8
 8012476:	b2db      	uxtb	r3, r3
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	b2da      	uxtb	r2, r3
 801247c:	79bb      	ldrb	r3, [r7, #6]
 801247e:	4413      	add	r3, r2
 8012480:	b2db      	uxtb	r3, r3
 8012482:	3b01      	subs	r3, #1
 8012484:	b2db      	uxtb	r3, r3
}
 8012486:	4618      	mov	r0, r3
 8012488:	370c      	adds	r7, #12
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr
	...

08012494 <DetectFenChange>:

/* Tìm sự thay đổi của FEN */
bool DetectFenChange()
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
	bool resuft=false;
 801249a:	2300      	movs	r3, #0
 801249c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<64;i++){
 801249e:	2300      	movs	r3, #0
 80124a0:	603b      	str	r3, [r7, #0]
 80124a2:	e017      	b.n	80124d4 <DetectFenChange+0x40>
		if(datamain[i] != datamain_old[i]){
 80124a4:	4a10      	ldr	r2, [pc, #64]	; (80124e8 <DetectFenChange+0x54>)
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	4413      	add	r3, r2
 80124aa:	781a      	ldrb	r2, [r3, #0]
 80124ac:	490f      	ldr	r1, [pc, #60]	; (80124ec <DetectFenChange+0x58>)
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	440b      	add	r3, r1
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d00a      	beq.n	80124ce <DetectFenChange+0x3a>
			resuft = true;
 80124b8:	2301      	movs	r3, #1
 80124ba:	71fb      	strb	r3, [r7, #7]
			datamain_old[i] = datamain[i];
 80124bc:	4a0a      	ldr	r2, [pc, #40]	; (80124e8 <DetectFenChange+0x54>)
 80124be:	683b      	ldr	r3, [r7, #0]
 80124c0:	4413      	add	r3, r2
 80124c2:	7819      	ldrb	r1, [r3, #0]
 80124c4:	4a09      	ldr	r2, [pc, #36]	; (80124ec <DetectFenChange+0x58>)
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	4413      	add	r3, r2
 80124ca:	460a      	mov	r2, r1
 80124cc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<64;i++){
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	3301      	adds	r3, #1
 80124d2:	603b      	str	r3, [r7, #0]
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b3f      	cmp	r3, #63	; 0x3f
 80124d8:	dde4      	ble.n	80124a4 <DetectFenChange+0x10>
		}
	}
	return resuft;
 80124da:	79fb      	ldrb	r3, [r7, #7]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	20008ee0 	.word	0x20008ee0
 80124ec:	20008f20 	.word	0x20008f20

080124f0 <FindMax>:


void FindMax(uint8_t type, SQData *sqFirstMax,SQData *sqSecondMax)
{
 80124f0:	b590      	push	{r4, r7, lr}
 80124f2:	b087      	sub	sp, #28
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	4603      	mov	r3, r0
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
 80124fc:	73fb      	strb	r3, [r7, #15]
	// hàm tìm ra 2 ô có tín hiệu trong khoảng tần số và và số xung phản hồi đạt ngưỡng
	sqFirstMax->pulses	= -1;	sqFirstMax->square 	= -1;
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	22ff      	movs	r2, #255	; 0xff
 8012502:	701a      	strb	r2, [r3, #0]
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	22ff      	movs	r2, #255	; 0xff
 8012508:	705a      	strb	r2, [r3, #1]
	sqSecondMax->pulses = -2;	sqSecondMax->square = -2;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	22fe      	movs	r2, #254	; 0xfe
 801250e:	701a      	strb	r2, [r3, #0]
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	22fe      	movs	r2, #254	; 0xfe
 8012514:	705a      	strb	r2, [r3, #1]
	for(int sq=0;sq<64;sq++){
 8012516:	2300      	movs	r3, #0
 8012518:	617b      	str	r3, [r7, #20]
 801251a:	e075      	b.n	8012608 <FindMax+0x118>
		// số xung phải lớn hơn ngưỡng calibase
		if(datapieces[type][sq][PULSES] >= getMarkSq(type, sq))
 801251c:	7bfb      	ldrb	r3, [r7, #15]
 801251e:	493e      	ldr	r1, [pc, #248]	; (8012618 <FindMax+0x128>)
 8012520:	019a      	lsls	r2, r3, #6
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	4413      	add	r3, r2
 8012526:	009b      	lsls	r3, r3, #2
 8012528:	440b      	add	r3, r1
 801252a:	885c      	ldrh	r4, [r3, #2]
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	b2da      	uxtb	r2, r3
 8012530:	7bfb      	ldrb	r3, [r7, #15]
 8012532:	4611      	mov	r1, r2
 8012534:	4618      	mov	r0, r3
 8012536:	f000 f99d 	bl	8012874 <getMarkSq>
 801253a:	4603      	mov	r3, r0
 801253c:	b29b      	uxth	r3, r3
 801253e:	429c      	cmp	r4, r3
 8012540:	d35f      	bcc.n	8012602 <FindMax+0x112>
		{	// period phải nằm trong khoảng của type piece
			if(datapieces[type][sq][PERIOD] <= mark_period[type] && datapieces[type][sq][PERIOD] >mark_period[type+1])
 8012542:	7bfb      	ldrb	r3, [r7, #15]
 8012544:	4934      	ldr	r1, [pc, #208]	; (8012618 <FindMax+0x128>)
 8012546:	019a      	lsls	r2, r3, #6
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	4413      	add	r3, r2
 801254c:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8012550:	7bfb      	ldrb	r3, [r7, #15]
 8012552:	4932      	ldr	r1, [pc, #200]	; (801261c <FindMax+0x12c>)
 8012554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012558:	429a      	cmp	r2, r3
 801255a:	d852      	bhi.n	8012602 <FindMax+0x112>
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	492e      	ldr	r1, [pc, #184]	; (8012618 <FindMax+0x128>)
 8012560:	019a      	lsls	r2, r3, #6
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	4413      	add	r3, r2
 8012566:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	3301      	adds	r3, #1
 801256e:	492b      	ldr	r1, [pc, #172]	; (801261c <FindMax+0x12c>)
 8012570:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012574:	429a      	cmp	r2, r3
 8012576:	d944      	bls.n	8012602 <FindMax+0x112>
			{	// nếu NewValue >= FirstMax thì FirstMax = NewValue và SecondMax = FirstMax
				if(datapieces[type][sq][PULSES] >= sqFirstMax->pulses){
 8012578:	7bfb      	ldrb	r3, [r7, #15]
 801257a:	4927      	ldr	r1, [pc, #156]	; (8012618 <FindMax+0x128>)
 801257c:	019a      	lsls	r2, r3, #6
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	4413      	add	r3, r2
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	440b      	add	r3, r1
 8012586:	885b      	ldrh	r3, [r3, #2]
 8012588:	461a      	mov	r2, r3
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	f993 3000 	ldrsb.w	r3, [r3]
 8012590:	429a      	cmp	r2, r3
 8012592:	db19      	blt.n	80125c8 <FindMax+0xd8>
					sqSecondMax->pulses = sqFirstMax->pulses;
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	f993 2000 	ldrsb.w	r2, [r3]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	701a      	strb	r2, [r3, #0]
					sqSecondMax->square = sqFirstMax->square;
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	705a      	strb	r2, [r3, #1]
					sqFirstMax->pulses = datapieces[type][sq][PULSES];
 80125a8:	7bfb      	ldrb	r3, [r7, #15]
 80125aa:	491b      	ldr	r1, [pc, #108]	; (8012618 <FindMax+0x128>)
 80125ac:	019a      	lsls	r2, r3, #6
 80125ae:	697b      	ldr	r3, [r7, #20]
 80125b0:	4413      	add	r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	440b      	add	r3, r1
 80125b6:	885b      	ldrh	r3, [r3, #2]
 80125b8:	b25a      	sxtb	r2, r3
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	701a      	strb	r2, [r3, #0]
					sqFirstMax->square = sq;
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	b25a      	sxtb	r2, r3
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	705a      	strb	r2, [r3, #1]
 80125c6:	e01c      	b.n	8012602 <FindMax+0x112>
				}else if(datapieces[type][sq][PULSES] > sqSecondMax->pulses){ // nếu NewValue Chỉ > SecondMax thì SecondMax=NewValue
 80125c8:	7bfb      	ldrb	r3, [r7, #15]
 80125ca:	4913      	ldr	r1, [pc, #76]	; (8012618 <FindMax+0x128>)
 80125cc:	019a      	lsls	r2, r3, #6
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	4413      	add	r3, r2
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	440b      	add	r3, r1
 80125d6:	885b      	ldrh	r3, [r3, #2]
 80125d8:	461a      	mov	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f993 3000 	ldrsb.w	r3, [r3]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	dd0e      	ble.n	8012602 <FindMax+0x112>
					sqSecondMax->pulses = datapieces[type][sq][PULSES];
 80125e4:	7bfb      	ldrb	r3, [r7, #15]
 80125e6:	490c      	ldr	r1, [pc, #48]	; (8012618 <FindMax+0x128>)
 80125e8:	019a      	lsls	r2, r3, #6
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	4413      	add	r3, r2
 80125ee:	009b      	lsls	r3, r3, #2
 80125f0:	440b      	add	r3, r1
 80125f2:	885b      	ldrh	r3, [r3, #2]
 80125f4:	b25a      	sxtb	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	701a      	strb	r2, [r3, #0]
					sqSecondMax->square = sq;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	b25a      	sxtb	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	705a      	strb	r2, [r3, #1]
	for(int sq=0;sq<64;sq++){
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	3301      	adds	r3, #1
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	2b3f      	cmp	r3, #63	; 0x3f
 801260c:	dd86      	ble.n	801251c <FindMax+0x2c>
				}
			}
		}
	}
}
 801260e:	bf00      	nop
 8012610:	bf00      	nop
 8012612:	371c      	adds	r7, #28
 8012614:	46bd      	mov	sp, r7
 8012616:	bd90      	pop	{r4, r7, pc}
 8012618:	20007ce0 	.word	0x20007ce0
 801261c:	080133d8 	.word	0x080133d8

08012620 <Status_Set>:
uint16_t led_duty=100;
uint16_t led_period =200;
uint16_t led_frequency = 10;

void Status_Set(uint8_t stt)
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	4603      	mov	r3, r0
 8012628:	71fb      	strb	r3, [r7, #7]
	Status = stt;
 801262a:	4a04      	ldr	r2, [pc, #16]	; (801263c <Status_Set+0x1c>)
 801262c:	79fb      	ldrb	r3, [r7, #7]
 801262e:	7013      	strb	r3, [r2, #0]
}
 8012630:	bf00      	nop
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	200090bc 	.word	0x200090bc

08012640 <Led_Blink>:


void Led_Blink(uint8_t blink,uint16_t duty)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	4603      	mov	r3, r0
 8012648:	460a      	mov	r2, r1
 801264a:	71fb      	strb	r3, [r7, #7]
 801264c:	4613      	mov	r3, r2
 801264e:	80bb      	strh	r3, [r7, #4]
	for(int i=0;i<blink;i++){
 8012650:	2300      	movs	r3, #0
 8012652:	60fb      	str	r3, [r7, #12]
 8012654:	e014      	b.n	8012680 <Led_Blink+0x40>
		LED_OFF;
 8012656:	2200      	movs	r2, #0
 8012658:	2104      	movs	r1, #4
 801265a:	480e      	ldr	r0, [pc, #56]	; (8012694 <Led_Blink+0x54>)
 801265c:	f7f0 fd1c 	bl	8003098 <HAL_GPIO_WritePin>
		osDelay(duty);
 8012660:	88bb      	ldrh	r3, [r7, #4]
 8012662:	4618      	mov	r0, r3
 8012664:	f7fc fc3b 	bl	800eede <osDelay>
		LED_ON;
 8012668:	2201      	movs	r2, #1
 801266a:	2104      	movs	r1, #4
 801266c:	4809      	ldr	r0, [pc, #36]	; (8012694 <Led_Blink+0x54>)
 801266e:	f7f0 fd13 	bl	8003098 <HAL_GPIO_WritePin>
		osDelay(duty);
 8012672:	88bb      	ldrh	r3, [r7, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	f7fc fc32 	bl	800eede <osDelay>
	for(int i=0;i<blink;i++){
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	3301      	adds	r3, #1
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	79fb      	ldrb	r3, [r7, #7]
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	429a      	cmp	r2, r3
 8012686:	dbe6      	blt.n	8012656 <Led_Blink+0x16>
	}
}
 8012688:	bf00      	nop
 801268a:	bf00      	nop
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	40020400 	.word	0x40020400

08012698 <Status_Task>:

void Status_Task()
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
	LED_ON;
 801269c:	2201      	movs	r2, #1
 801269e:	2104      	movs	r1, #4
 80126a0:	4814      	ldr	r0, [pc, #80]	; (80126f4 <Status_Task+0x5c>)
 80126a2:	f7f0 fcf9 	bl	8003098 <HAL_GPIO_WritePin>
	osDelay(1000);
 80126a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126aa:	f7fc fc18 	bl	800eede <osDelay>
	if(Status != STT_ALL_OK){
 80126ae:	4b12      	ldr	r3, [pc, #72]	; (80126f8 <Status_Task+0x60>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d01c      	beq.n	80126f0 <Status_Task+0x58>
		if(Status==STT_I2C_ERROR){
 80126b6:	4b10      	ldr	r3, [pc, #64]	; (80126f8 <Status_Task+0x60>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d104      	bne.n	80126c8 <Status_Task+0x30>
			Led_Blink(1, 200);
 80126be:	21c8      	movs	r1, #200	; 0xc8
 80126c0:	2001      	movs	r0, #1
 80126c2:	f7ff ffbd 	bl	8012640 <Led_Blink>
 80126c6:	e010      	b.n	80126ea <Status_Task+0x52>
		}else if(Status==STT_RS485_ERROR){
 80126c8:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <Status_Task+0x60>)
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d104      	bne.n	80126da <Status_Task+0x42>
			Led_Blink(2, 200);
 80126d0:	21c8      	movs	r1, #200	; 0xc8
 80126d2:	2002      	movs	r0, #2
 80126d4:	f7ff ffb4 	bl	8012640 <Led_Blink>
 80126d8:	e007      	b.n	80126ea <Status_Task+0x52>
		}else if(Status==STT_BLE_ERROR){
 80126da:	4b07      	ldr	r3, [pc, #28]	; (80126f8 <Status_Task+0x60>)
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	2b03      	cmp	r3, #3
 80126e0:	d103      	bne.n	80126ea <Status_Task+0x52>
			Led_Blink(3, 200);
 80126e2:	21c8      	movs	r1, #200	; 0xc8
 80126e4:	2003      	movs	r0, #3
 80126e6:	f7ff ffab 	bl	8012640 <Led_Blink>
		}
		Status = STT_ALL_OK;
 80126ea:	4b03      	ldr	r3, [pc, #12]	; (80126f8 <Status_Task+0x60>)
 80126ec:	2200      	movs	r2, #0
 80126ee:	701a      	strb	r2, [r3, #0]
	}
}
 80126f0:	bf00      	nop
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	40020400 	.word	0x40020400
 80126f8:	200090bc 	.word	0x200090bc

080126fc <StartTaskScanPiece>:
extern bool autoscan;

uint8_t numScanRepair=0;


void StartTaskScanPiece(void const * argument){
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
	osDelay(1000);
 8012704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012708:	f7fc fbe9 	bl	800eede <osDelay>
	ScanPiecesInit();
 801270c:	f7ff fb3c 	bl	8011d88 <ScanPiecesInit>
	MB85RS_getPointSave();
 8012710:	f7ff f9c2 	bl	8011a98 <MB85RS_getPointSave>
		//RoamingData();

		osDelay(1);
#else
#ifdef CALIBASE
		if(isCalibaseMode==true){
 8012714:	4b30      	ldr	r3, [pc, #192]	; (80127d8 <StartTaskScanPiece+0xdc>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d005      	beq.n	8012728 <StartTaskScanPiece+0x2c>
			Scan(false);
 801271c:	2000      	movs	r0, #0
 801271e:	f7ff fde3 	bl	80122e8 <Scan>
			UsbSendDataCalibase();
 8012722:	f000 fccd 	bl	80130c0 <UsbSendDataCalibase>
 8012726:	e052      	b.n	80127ce <StartTaskScanPiece+0xd2>
		}else
#endif
		if(autoscan==true || numScanRepair>0){
 8012728:	4b2c      	ldr	r3, [pc, #176]	; (80127dc <StartTaskScanPiece+0xe0>)
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <StartTaskScanPiece+0x3c>
 8012730:	4b2b      	ldr	r3, [pc, #172]	; (80127e0 <StartTaskScanPiece+0xe4>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d02e      	beq.n	8012796 <StartTaskScanPiece+0x9a>
			LED_OFF;
 8012738:	2200      	movs	r2, #0
 801273a:	2104      	movs	r1, #4
 801273c:	4829      	ldr	r0, [pc, #164]	; (80127e4 <StartTaskScanPiece+0xe8>)
 801273e:	f7f0 fcab 	bl	8003098 <HAL_GPIO_WritePin>
			if(numScanRepair>0) numScanRepair--;
 8012742:	4b27      	ldr	r3, [pc, #156]	; (80127e0 <StartTaskScanPiece+0xe4>)
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d005      	beq.n	8012756 <StartTaskScanPiece+0x5a>
 801274a:	4b25      	ldr	r3, [pc, #148]	; (80127e0 <StartTaskScanPiece+0xe4>)
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	3b01      	subs	r3, #1
 8012750:	b2da      	uxtb	r2, r3
 8012752:	4b23      	ldr	r3, [pc, #140]	; (80127e0 <StartTaskScanPiece+0xe4>)
 8012754:	701a      	strb	r2, [r3, #0]
			SCANRESULT result = Scan(true);
 8012756:	2001      	movs	r0, #1
 8012758:	f7ff fdc6 	bl	80122e8 <Scan>
 801275c:	4603      	mov	r3, r0
 801275e:	73fb      	strb	r3, [r7, #15]
			if(result==SCAN_FEN_CHANGE){
 8012760:	7bfb      	ldrb	r3, [r7, #15]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d103      	bne.n	801276e <StartTaskScanPiece+0x72>
				mainChange = true;
 8012766:	4b20      	ldr	r3, [pc, #128]	; (80127e8 <StartTaskScanPiece+0xec>)
 8012768:	2201      	movs	r2, #1
 801276a:	701a      	strb	r2, [r3, #0]
 801276c:	e00a      	b.n	8012784 <StartTaskScanPiece+0x88>
			}else if(result==SCAN_SIDE_CHANGED){
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	2b02      	cmp	r3, #2
 8012772:	d107      	bne.n	8012784 <StartTaskScanPiece+0x88>
				Scan(false); // scanpiece không ngắt bởi clockside
 8012774:	2000      	movs	r0, #0
 8012776:	f7ff fdb7 	bl	80122e8 <Scan>
				mainChange = true;
 801277a:	4b1b      	ldr	r3, [pc, #108]	; (80127e8 <StartTaskScanPiece+0xec>)
 801277c:	2201      	movs	r2, #1
 801277e:	701a      	strb	r2, [r3, #0]
				handlerMb85rs();
 8012780:	f7ff fa90 	bl	8011ca4 <handlerMb85rs>
			}
			osDelay(10);
 8012784:	200a      	movs	r0, #10
 8012786:	f7fc fbaa 	bl	800eede <osDelay>
			LED_ON;
 801278a:	2201      	movs	r2, #1
 801278c:	2104      	movs	r1, #4
 801278e:	4815      	ldr	r0, [pc, #84]	; (80127e4 <StartTaskScanPiece+0xe8>)
 8012790:	f7f0 fc82 	bl	8003098 <HAL_GPIO_WritePin>
		if(autoscan==true || numScanRepair>0){
 8012794:	e01b      	b.n	80127ce <StartTaskScanPiece+0xd2>
		}else if(chessclock_interrup==true){
 8012796:	4b15      	ldr	r3, [pc, #84]	; (80127ec <StartTaskScanPiece+0xf0>)
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d017      	beq.n	80127ce <StartTaskScanPiece+0xd2>
			LED_OFF;
 801279e:	2200      	movs	r2, #0
 80127a0:	2104      	movs	r1, #4
 80127a2:	4810      	ldr	r0, [pc, #64]	; (80127e4 <StartTaskScanPiece+0xe8>)
 80127a4:	f7f0 fc78 	bl	8003098 <HAL_GPIO_WritePin>
			Scan(false);
 80127a8:	2000      	movs	r0, #0
 80127aa:	f7ff fd9d 	bl	80122e8 <Scan>
			chessclock_interrup=false;
 80127ae:	4b0f      	ldr	r3, [pc, #60]	; (80127ec <StartTaskScanPiece+0xf0>)
 80127b0:	2200      	movs	r2, #0
 80127b2:	701a      	strb	r2, [r3, #0]
			mainChange=true;
 80127b4:	4b0c      	ldr	r3, [pc, #48]	; (80127e8 <StartTaskScanPiece+0xec>)
 80127b6:	2201      	movs	r2, #1
 80127b8:	701a      	strb	r2, [r3, #0]
			handlerMb85rs();
 80127ba:	f7ff fa73 	bl	8011ca4 <handlerMb85rs>
			numScanRepair=5; // sau khi sidechange thì sẽ tự động scan thêm 5 lần sau đó
 80127be:	4b08      	ldr	r3, [pc, #32]	; (80127e0 <StartTaskScanPiece+0xe4>)
 80127c0:	2205      	movs	r2, #5
 80127c2:	701a      	strb	r2, [r3, #0]
			LED_ON;
 80127c4:	2201      	movs	r2, #1
 80127c6:	2104      	movs	r1, #4
 80127c8:	4806      	ldr	r0, [pc, #24]	; (80127e4 <StartTaskScanPiece+0xe8>)
 80127ca:	f7f0 fc65 	bl	8003098 <HAL_GPIO_WritePin>
		}
	osDelay(1);
 80127ce:	2001      	movs	r0, #1
 80127d0:	f7fc fb85 	bl	800eede <osDelay>
		if(isCalibaseMode==true){
 80127d4:	e79e      	b.n	8012714 <StartTaskScanPiece+0x18>
 80127d6:	bf00      	nop
 80127d8:	200090e2 	.word	0x200090e2
 80127dc:	200090be 	.word	0x200090be
 80127e0:	200090bd 	.word	0x200090bd
 80127e4:	40020400 	.word	0x40020400
 80127e8:	200000fe 	.word	0x200000fe
 80127ec:	20007c8c 	.word	0x20007c8c

080127f0 <CalculateCRC>:
{
	return ((uint32_t)byteA)*64516 +  ((uint32_t)byteB)*254 +  (uint32_t)byteC;
}

uint16_t CalculateCRC(uint8_t* buffer,uint16_t offset,uint16_t count)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	807b      	strh	r3, [r7, #2]
 80127fc:	4613      	mov	r3, r2
 80127fe:	803b      	strh	r3, [r7, #0]
	uint16_t crc = 0xFFFF;
 8012800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012804:	81fb      	strh	r3, [r7, #14]

	for(uint16_t j=offset;j<(count+offset);j++)
 8012806:	887b      	ldrh	r3, [r7, #2]
 8012808:	81bb      	strh	r3, [r7, #12]
 801280a:	e026      	b.n	801285a <CalculateCRC+0x6a>
	{
		crc ^= (uint16_t)buffer[j];
 801280c:	89bb      	ldrh	r3, [r7, #12]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	4413      	add	r3, r2
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	b29a      	uxth	r2, r3
 8012816:	89fb      	ldrh	r3, [r7, #14]
 8012818:	4053      	eors	r3, r2
 801281a:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 801281c:	2300      	movs	r3, #0
 801281e:	60bb      	str	r3, [r7, #8]
 8012820:	e015      	b.n	801284e <CalculateCRC+0x5e>
		{
			if ((crc & 0x0001) != 0)
 8012822:	89fb      	ldrh	r3, [r7, #14]
 8012824:	f003 0301 	and.w	r3, r3, #1
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00a      	beq.n	8012842 <CalculateCRC+0x52>
			{
				crc >>= 1;
 801282c:	89fb      	ldrh	r3, [r7, #14]
 801282e:	085b      	lsrs	r3, r3, #1
 8012830:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8012832:	89fb      	ldrh	r3, [r7, #14]
 8012834:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8012838:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 801283c:	43db      	mvns	r3, r3
 801283e:	81fb      	strh	r3, [r7, #14]
 8012840:	e002      	b.n	8012848 <CalculateCRC+0x58>
			}
			else
			{
				crc >>= 1;
 8012842:	89fb      	ldrh	r3, [r7, #14]
 8012844:	085b      	lsrs	r3, r3, #1
 8012846:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < 8; i++)
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	3301      	adds	r3, #1
 801284c:	60bb      	str	r3, [r7, #8]
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	2b07      	cmp	r3, #7
 8012852:	dde6      	ble.n	8012822 <CalculateCRC+0x32>
	for(uint16_t j=offset;j<(count+offset);j++)
 8012854:	89bb      	ldrh	r3, [r7, #12]
 8012856:	3301      	adds	r3, #1
 8012858:	81bb      	strh	r3, [r7, #12]
 801285a:	89ba      	ldrh	r2, [r7, #12]
 801285c:	8839      	ldrh	r1, [r7, #0]
 801285e:	887b      	ldrh	r3, [r7, #2]
 8012860:	440b      	add	r3, r1
 8012862:	429a      	cmp	r2, r3
 8012864:	dbd2      	blt.n	801280c <CalculateCRC+0x1c>
			}
		}
	}
	return crc;
 8012866:	89fb      	ldrh	r3, [r7, #14]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3714      	adds	r7, #20
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <getMarkSq>:
		7,7,7,7,7,7,7,7,	//3
		7,7,7,7,7,7,7,7,	//2
		7,7,7,7,7,7,7,7};	//1
//       a  b  c  d  e  f  g  h

uint8_t getMarkSq(uint8_t type,uint8_t squamark){
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	4603      	mov	r3, r0
 801287c:	460a      	mov	r2, r1
 801287e:	71fb      	strb	r3, [r7, #7]
 8012880:	4613      	mov	r3, r2
 8012882:	71bb      	strb	r3, [r7, #6]
	uint8_t pulses_mark=0;
 8012884:	2300      	movs	r3, #0
 8012886:	73fb      	strb	r3, [r7, #15]
	switch(type){
 8012888:	79fb      	ldrb	r3, [r7, #7]
 801288a:	2b11      	cmp	r3, #17
 801288c:	f200 8082 	bhi.w	8012994 <getMarkSq+0x120>
 8012890:	a201      	add	r2, pc, #4	; (adr r2, 8012898 <getMarkSq+0x24>)
 8012892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012896:	bf00      	nop
 8012898:	080128e1 	.word	0x080128e1
 801289c:	080128eb 	.word	0x080128eb
 80128a0:	080128f5 	.word	0x080128f5
 80128a4:	080128ff 	.word	0x080128ff
 80128a8:	08012909 	.word	0x08012909
 80128ac:	08012913 	.word	0x08012913
 80128b0:	0801291d 	.word	0x0801291d
 80128b4:	08012927 	.word	0x08012927
 80128b8:	08012931 	.word	0x08012931
 80128bc:	0801293b 	.word	0x0801293b
 80128c0:	08012945 	.word	0x08012945
 80128c4:	0801294f 	.word	0x0801294f
 80128c8:	08012959 	.word	0x08012959
 80128cc:	08012963 	.word	0x08012963
 80128d0:	0801296d 	.word	0x0801296d
 80128d4:	08012977 	.word	0x08012977
 80128d8:	08012981 	.word	0x08012981
 80128dc:	0801298b 	.word	0x0801298b
	case 0:pulses_mark = mark_pulse0[squamark]; break;
 80128e0:	79bb      	ldrb	r3, [r7, #6]
 80128e2:	4a30      	ldr	r2, [pc, #192]	; (80129a4 <getMarkSq+0x130>)
 80128e4:	5cd3      	ldrb	r3, [r2, r3]
 80128e6:	73fb      	strb	r3, [r7, #15]
 80128e8:	e054      	b.n	8012994 <getMarkSq+0x120>
	case 1:pulses_mark = mark_pulse1[squamark]; break;
 80128ea:	79bb      	ldrb	r3, [r7, #6]
 80128ec:	4a2e      	ldr	r2, [pc, #184]	; (80129a8 <getMarkSq+0x134>)
 80128ee:	5cd3      	ldrb	r3, [r2, r3]
 80128f0:	73fb      	strb	r3, [r7, #15]
 80128f2:	e04f      	b.n	8012994 <getMarkSq+0x120>
	case 2:pulses_mark = mark_pulse2[squamark]; break;
 80128f4:	79bb      	ldrb	r3, [r7, #6]
 80128f6:	4a2d      	ldr	r2, [pc, #180]	; (80129ac <getMarkSq+0x138>)
 80128f8:	5cd3      	ldrb	r3, [r2, r3]
 80128fa:	73fb      	strb	r3, [r7, #15]
 80128fc:	e04a      	b.n	8012994 <getMarkSq+0x120>
	case 3:pulses_mark = mark_pulse3[squamark]; break;
 80128fe:	79bb      	ldrb	r3, [r7, #6]
 8012900:	4a2b      	ldr	r2, [pc, #172]	; (80129b0 <getMarkSq+0x13c>)
 8012902:	5cd3      	ldrb	r3, [r2, r3]
 8012904:	73fb      	strb	r3, [r7, #15]
 8012906:	e045      	b.n	8012994 <getMarkSq+0x120>
	case 4:pulses_mark = mark_pulse4[squamark]; break;
 8012908:	79bb      	ldrb	r3, [r7, #6]
 801290a:	4a2a      	ldr	r2, [pc, #168]	; (80129b4 <getMarkSq+0x140>)
 801290c:	5cd3      	ldrb	r3, [r2, r3]
 801290e:	73fb      	strb	r3, [r7, #15]
 8012910:	e040      	b.n	8012994 <getMarkSq+0x120>
	case 5:pulses_mark = mark_pulse5[squamark]; break;
 8012912:	79bb      	ldrb	r3, [r7, #6]
 8012914:	4a28      	ldr	r2, [pc, #160]	; (80129b8 <getMarkSq+0x144>)
 8012916:	5cd3      	ldrb	r3, [r2, r3]
 8012918:	73fb      	strb	r3, [r7, #15]
 801291a:	e03b      	b.n	8012994 <getMarkSq+0x120>
	case 6:pulses_mark = mark_pulse6[squamark]; break;
 801291c:	79bb      	ldrb	r3, [r7, #6]
 801291e:	4a27      	ldr	r2, [pc, #156]	; (80129bc <getMarkSq+0x148>)
 8012920:	5cd3      	ldrb	r3, [r2, r3]
 8012922:	73fb      	strb	r3, [r7, #15]
 8012924:	e036      	b.n	8012994 <getMarkSq+0x120>
	case 7:pulses_mark = mark_pulse7[squamark]; break;
 8012926:	79bb      	ldrb	r3, [r7, #6]
 8012928:	4a25      	ldr	r2, [pc, #148]	; (80129c0 <getMarkSq+0x14c>)
 801292a:	5cd3      	ldrb	r3, [r2, r3]
 801292c:	73fb      	strb	r3, [r7, #15]
 801292e:	e031      	b.n	8012994 <getMarkSq+0x120>
	case 8:pulses_mark = mark_pulse8[squamark]; break;
 8012930:	79bb      	ldrb	r3, [r7, #6]
 8012932:	4a24      	ldr	r2, [pc, #144]	; (80129c4 <getMarkSq+0x150>)
 8012934:	5cd3      	ldrb	r3, [r2, r3]
 8012936:	73fb      	strb	r3, [r7, #15]
 8012938:	e02c      	b.n	8012994 <getMarkSq+0x120>
	case 9:pulses_mark = mark_pulse9[squamark]; break;
 801293a:	79bb      	ldrb	r3, [r7, #6]
 801293c:	4a22      	ldr	r2, [pc, #136]	; (80129c8 <getMarkSq+0x154>)
 801293e:	5cd3      	ldrb	r3, [r2, r3]
 8012940:	73fb      	strb	r3, [r7, #15]
 8012942:	e027      	b.n	8012994 <getMarkSq+0x120>
	case 10:pulses_mark = mark_pulse10[squamark]; break;
 8012944:	79bb      	ldrb	r3, [r7, #6]
 8012946:	4a21      	ldr	r2, [pc, #132]	; (80129cc <getMarkSq+0x158>)
 8012948:	5cd3      	ldrb	r3, [r2, r3]
 801294a:	73fb      	strb	r3, [r7, #15]
 801294c:	e022      	b.n	8012994 <getMarkSq+0x120>
	case 11:pulses_mark = mark_pulse11[squamark]; break;
 801294e:	79bb      	ldrb	r3, [r7, #6]
 8012950:	4a1f      	ldr	r2, [pc, #124]	; (80129d0 <getMarkSq+0x15c>)
 8012952:	5cd3      	ldrb	r3, [r2, r3]
 8012954:	73fb      	strb	r3, [r7, #15]
 8012956:	e01d      	b.n	8012994 <getMarkSq+0x120>
	case 12:pulses_mark = mark_pulse12[squamark]; break;
 8012958:	79bb      	ldrb	r3, [r7, #6]
 801295a:	4a1e      	ldr	r2, [pc, #120]	; (80129d4 <getMarkSq+0x160>)
 801295c:	5cd3      	ldrb	r3, [r2, r3]
 801295e:	73fb      	strb	r3, [r7, #15]
 8012960:	e018      	b.n	8012994 <getMarkSq+0x120>
	case 13:pulses_mark = mark_pulse13[squamark]; break;
 8012962:	79bb      	ldrb	r3, [r7, #6]
 8012964:	4a1c      	ldr	r2, [pc, #112]	; (80129d8 <getMarkSq+0x164>)
 8012966:	5cd3      	ldrb	r3, [r2, r3]
 8012968:	73fb      	strb	r3, [r7, #15]
 801296a:	e013      	b.n	8012994 <getMarkSq+0x120>
	case 14:pulses_mark = mark_pulse14[squamark]; break;
 801296c:	79bb      	ldrb	r3, [r7, #6]
 801296e:	4a1b      	ldr	r2, [pc, #108]	; (80129dc <getMarkSq+0x168>)
 8012970:	5cd3      	ldrb	r3, [r2, r3]
 8012972:	73fb      	strb	r3, [r7, #15]
 8012974:	e00e      	b.n	8012994 <getMarkSq+0x120>
	case 15:pulses_mark = mark_pulse15[squamark]; break;
 8012976:	79bb      	ldrb	r3, [r7, #6]
 8012978:	4a19      	ldr	r2, [pc, #100]	; (80129e0 <getMarkSq+0x16c>)
 801297a:	5cd3      	ldrb	r3, [r2, r3]
 801297c:	73fb      	strb	r3, [r7, #15]
 801297e:	e009      	b.n	8012994 <getMarkSq+0x120>
	case 16:pulses_mark = mark_pulse16[squamark]; break;
 8012980:	79bb      	ldrb	r3, [r7, #6]
 8012982:	4a18      	ldr	r2, [pc, #96]	; (80129e4 <getMarkSq+0x170>)
 8012984:	5cd3      	ldrb	r3, [r2, r3]
 8012986:	73fb      	strb	r3, [r7, #15]
 8012988:	e004      	b.n	8012994 <getMarkSq+0x120>
	case 17:pulses_mark = mark_pulse17[squamark]; break;
 801298a:	79bb      	ldrb	r3, [r7, #6]
 801298c:	4a16      	ldr	r2, [pc, #88]	; (80129e8 <getMarkSq+0x174>)
 801298e:	5cd3      	ldrb	r3, [r2, r3]
 8012990:	73fb      	strb	r3, [r7, #15]
 8012992:	bf00      	nop
	}
	return pulses_mark;
 8012994:	7bfb      	ldrb	r3, [r7, #15]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3714      	adds	r7, #20
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	08013864 	.word	0x08013864
 80129a8:	08013824 	.word	0x08013824
 80129ac:	080137e4 	.word	0x080137e4
 80129b0:	080137a4 	.word	0x080137a4
 80129b4:	08013764 	.word	0x08013764
 80129b8:	08013724 	.word	0x08013724
 80129bc:	080136e4 	.word	0x080136e4
 80129c0:	080136a4 	.word	0x080136a4
 80129c4:	08013664 	.word	0x08013664
 80129c8:	08013624 	.word	0x08013624
 80129cc:	080135e4 	.word	0x080135e4
 80129d0:	080135a4 	.word	0x080135a4
 80129d4:	08013564 	.word	0x08013564
 80129d8:	08013524 	.word	0x08013524
 80129dc:	080134e4 	.word	0x080134e4
 80129e0:	080134a4 	.word	0x080134a4
 80129e4:	08013464 	.word	0x08013464
 80129e8:	08013424 	.word	0x08013424

080129ec <HAL_UARTEx_RxEventCallback>:
	extern uint8_t datamain[64];				// chứa dữ liệu chính của pieces
	extern RTC_HandleTypeDef hrtc;
	extern USBD_HandleTypeDef hUsbDeviceFS;
#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	460b      	mov	r3, r1
 80129f6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance==USART1){
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4a0b      	ldr	r2, [pc, #44]	; (8012a2c <HAL_UARTEx_RxEventCallback+0x40>)
 80129fe:	4293      	cmp	r3, r2
 8012a00:	d10f      	bne.n	8012a22 <HAL_UARTEx_RxEventCallback+0x36>
		//memcpy(uart1_main_buf,uart1_rx_buf,UART1_BUFFER_LENGTH);
		uart1_data_length=Size;
 8012a02:	887b      	ldrh	r3, [r7, #2]
 8012a04:	b2da      	uxtb	r2, r3
 8012a06:	4b0a      	ldr	r3, [pc, #40]	; (8012a30 <HAL_UARTEx_RxEventCallback+0x44>)
 8012a08:	701a      	strb	r2, [r3, #0]
		//AnalyserCMD(uart1_main_buf,uart1_data_length, RS485);
		AnalyserCMD(uart1_rx_buf,uart1_data_length, RS485);
 8012a0a:	4b09      	ldr	r3, [pc, #36]	; (8012a30 <HAL_UARTEx_RxEventCallback+0x44>)
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	4619      	mov	r1, r3
 8012a12:	4808      	ldr	r0, [pc, #32]	; (8012a34 <HAL_UARTEx_RxEventCallback+0x48>)
 8012a14:	f000 f8ae 	bl	8012b74 <AnalyserCMD>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012a18:	2220      	movs	r2, #32
 8012a1a:	4906      	ldr	r1, [pc, #24]	; (8012a34 <HAL_UARTEx_RxEventCallback+0x48>)
 8012a1c:	4806      	ldr	r0, [pc, #24]	; (8012a38 <HAL_UARTEx_RxEventCallback+0x4c>)
 8012a1e:	f7f7 fc92 	bl	800a346 <HAL_UARTEx_ReceiveToIdle_DMA>
			uart2_onData=true;
			uart2_data_length=Size;
			HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_BUFFER_LENGTH);
	}
#endif
}
 8012a22:	bf00      	nop
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	40011000 	.word	0x40011000
 8012a30:	200090e0 	.word	0x200090e0
 8012a34:	200090c0 	.word	0x200090c0
 8012a38:	200029cc 	.word	0x200029cc

08012a3c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a04      	ldr	r2, [pc, #16]	; (8012a5c <HAL_UART_ErrorCallback+0x20>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d101      	bne.n	8012a52 <HAL_UART_ErrorCallback+0x16>
		//uart1_error = HAL_UART_GetError(&huart1);
		HAL_NVIC_SystemReset();
 8012a4e:	f7ef fc3c 	bl	80022ca <HAL_NVIC_SystemReset>
	else if(huart->Instance==USART2){
		uart2_error = HAL_UART_GetError(&huart2);
	}
#endif

}
 8012a52:	bf00      	nop
 8012a54:	3708      	adds	r7, #8
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	40011000 	.word	0x40011000

08012a60 <initReceiverUart>:

void initReceiverUart(){
 8012a60:	b580      	push	{r7, lr}
 8012a62:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_BUFFER_LENGTH);
 8012a64:	2220      	movs	r2, #32
 8012a66:	4907      	ldr	r1, [pc, #28]	; (8012a84 <initReceiverUart+0x24>)
 8012a68:	4807      	ldr	r0, [pc, #28]	; (8012a88 <initReceiverUart+0x28>)
 8012a6a:	f7f7 fc6c 	bl	800a346 <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8012a6e:	4b07      	ldr	r3, [pc, #28]	; (8012a8c <initReceiverUart+0x2c>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	4b05      	ldr	r3, [pc, #20]	; (8012a8c <initReceiverUart+0x2c>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f022 0208 	bic.w	r2, r2, #8
 8012a7c:	601a      	str	r2, [r3, #0]
}
 8012a7e:	bf00      	nop
 8012a80:	bd80      	pop	{r7, pc}
 8012a82:	bf00      	nop
 8012a84:	200090c0 	.word	0x200090c0
 8012a88:	200029cc 	.word	0x200029cc
 8012a8c:	20002a54 	.word	0x20002a54

08012a90 <byteToPiece>:
 *  xxxx: 0->12 piece A
 *  yyyy: 0->12 piece B
 *  0:EMTY, 1:WKING, 2:WQUEEN, 3:WBISHOP, 4:WKNIGHT, 5:WROOK, 6:WPAWN,
 *  		7:BKING, 8:BQUEEN, 9:BBISHOP,10:BKNIGHT,11:BROOK,12:BPAWN.
 * 		*/
uint8_t byteToPiece(uint8_t piece){
 8012a90:	b480      	push	{r7}
 8012a92:	b085      	sub	sp, #20
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	4603      	mov	r3, r0
 8012a98:	71fb      	strb	r3, [r7, #7]
	uint8_t pi;
	switch(piece){
 8012a9a:	79fb      	ldrb	r3, [r7, #7]
 8012a9c:	2b12      	cmp	r3, #18
 8012a9e:	d862      	bhi.n	8012b66 <byteToPiece+0xd6>
 8012aa0:	a201      	add	r2, pc, #4	; (adr r2, 8012aa8 <byteToPiece+0x18>)
 8012aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa6:	bf00      	nop
 8012aa8:	08012af5 	.word	0x08012af5
 8012aac:	08012afb 	.word	0x08012afb
 8012ab0:	08012b01 	.word	0x08012b01
 8012ab4:	08012b07 	.word	0x08012b07
 8012ab8:	08012b0d 	.word	0x08012b0d
 8012abc:	08012b13 	.word	0x08012b13
 8012ac0:	08012b19 	.word	0x08012b19
 8012ac4:	08012b1f 	.word	0x08012b1f
 8012ac8:	08012b25 	.word	0x08012b25
 8012acc:	08012b2b 	.word	0x08012b2b
 8012ad0:	08012b31 	.word	0x08012b31
 8012ad4:	08012b37 	.word	0x08012b37
 8012ad8:	08012b3d 	.word	0x08012b3d
 8012adc:	08012b43 	.word	0x08012b43
 8012ae0:	08012b49 	.word	0x08012b49
 8012ae4:	08012b4f 	.word	0x08012b4f
 8012ae8:	08012b55 	.word	0x08012b55
 8012aec:	08012b5b 	.word	0x08012b5b
 8012af0:	08012b61 	.word	0x08012b61
	case 0: pi=EMTY;	break;
 8012af4:	2300      	movs	r3, #0
 8012af6:	73fb      	strb	r3, [r7, #15]
 8012af8:	e035      	b.n	8012b66 <byteToPiece+0xd6>
	case 1: pi=WKING; 	break;
 8012afa:	2301      	movs	r3, #1
 8012afc:	73fb      	strb	r3, [r7, #15]
 8012afe:	e032      	b.n	8012b66 <byteToPiece+0xd6>
	case 2: pi=WQUEEN; 	break;
 8012b00:	2302      	movs	r3, #2
 8012b02:	73fb      	strb	r3, [r7, #15]
 8012b04:	e02f      	b.n	8012b66 <byteToPiece+0xd6>
	case 3: pi=WBISHOP; break;
 8012b06:	2303      	movs	r3, #3
 8012b08:	73fb      	strb	r3, [r7, #15]
 8012b0a:	e02c      	b.n	8012b66 <byteToPiece+0xd6>
	case 4: pi=WKNIGHT; break;
 8012b0c:	2304      	movs	r3, #4
 8012b0e:	73fb      	strb	r3, [r7, #15]
 8012b10:	e029      	b.n	8012b66 <byteToPiece+0xd6>
	case 5: pi=WROOK; 	break;
 8012b12:	2305      	movs	r3, #5
 8012b14:	73fb      	strb	r3, [r7, #15]
 8012b16:	e026      	b.n	8012b66 <byteToPiece+0xd6>
	case 6: pi=BKING; 	break;
 8012b18:	2307      	movs	r3, #7
 8012b1a:	73fb      	strb	r3, [r7, #15]
 8012b1c:	e023      	b.n	8012b66 <byteToPiece+0xd6>
	case 7: pi=BQUEEN; 	break;
 8012b1e:	2308      	movs	r3, #8
 8012b20:	73fb      	strb	r3, [r7, #15]
 8012b22:	e020      	b.n	8012b66 <byteToPiece+0xd6>
	case 8: pi=BBISHOP; break;
 8012b24:	2309      	movs	r3, #9
 8012b26:	73fb      	strb	r3, [r7, #15]
 8012b28:	e01d      	b.n	8012b66 <byteToPiece+0xd6>
	case 9: pi=BKNIGHT; break;
 8012b2a:	230a      	movs	r3, #10
 8012b2c:	73fb      	strb	r3, [r7, #15]
 8012b2e:	e01a      	b.n	8012b66 <byteToPiece+0xd6>
	case 10:pi=BROOK; 	break;
 8012b30:	230b      	movs	r3, #11
 8012b32:	73fb      	strb	r3, [r7, #15]
 8012b34:	e017      	b.n	8012b66 <byteToPiece+0xd6>
	case 11:pi=BPAWN; 	break;
 8012b36:	230c      	movs	r3, #12
 8012b38:	73fb      	strb	r3, [r7, #15]
 8012b3a:	e014      	b.n	8012b66 <byteToPiece+0xd6>
	case 12:pi=BPAWN; 	break;
 8012b3c:	230c      	movs	r3, #12
 8012b3e:	73fb      	strb	r3, [r7, #15]
 8012b40:	e011      	b.n	8012b66 <byteToPiece+0xd6>
	case 13:pi=BPAWN; 	break;
 8012b42:	230c      	movs	r3, #12
 8012b44:	73fb      	strb	r3, [r7, #15]
 8012b46:	e00e      	b.n	8012b66 <byteToPiece+0xd6>
	case 14:pi=BPAWN; 	break;
 8012b48:	230c      	movs	r3, #12
 8012b4a:	73fb      	strb	r3, [r7, #15]
 8012b4c:	e00b      	b.n	8012b66 <byteToPiece+0xd6>
	case 15:pi=WPAWN; 	break;
 8012b4e:	2306      	movs	r3, #6
 8012b50:	73fb      	strb	r3, [r7, #15]
 8012b52:	e008      	b.n	8012b66 <byteToPiece+0xd6>
	case 16:pi=WPAWN; 	break;
 8012b54:	2306      	movs	r3, #6
 8012b56:	73fb      	strb	r3, [r7, #15]
 8012b58:	e005      	b.n	8012b66 <byteToPiece+0xd6>
	case 17:pi=WPAWN; 	break;
 8012b5a:	2306      	movs	r3, #6
 8012b5c:	73fb      	strb	r3, [r7, #15]
 8012b5e:	e002      	b.n	8012b66 <byteToPiece+0xd6>
	case 18:pi=WPAWN; 	break;
 8012b60:	2306      	movs	r3, #6
 8012b62:	73fb      	strb	r3, [r7, #15]
 8012b64:	bf00      	nop
	}
	return pi;
 8012b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3714      	adds	r7, #20
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b72:	4770      	bx	lr

08012b74 <AnalyserCMD>:

/*phân tích dữ liệu nhận được */


void AnalyserCMD(uint8_t *data,uint8_t length,TypeConnection typeconnect )
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b086      	sub	sp, #24
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	70fb      	strb	r3, [r7, #3]
 8012b80:	4613      	mov	r3, r2
 8012b82:	70bb      	strb	r3, [r7, #2]
	uint16_t crc;
	uint8_t crcval[2];
#ifdef CALIBASE
	if(data[0]==CMD_ENABLE_CALIBASE_MODE){ // Enable Calibase Mode
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	2b63      	cmp	r3, #99	; 0x63
 8012b8a:	d106      	bne.n	8012b9a <AnalyserCMD+0x26>
		isCalibaseMode = true;
 8012b8c:	4b75      	ldr	r3, [pc, #468]	; (8012d64 <AnalyserCMD+0x1f0>)
 8012b8e:	2201      	movs	r2, #1
 8012b90:	701a      	strb	r2, [r3, #0]
		typeCalibaseConnect = typeconnect;
 8012b92:	4a75      	ldr	r2, [pc, #468]	; (8012d68 <AnalyserCMD+0x1f4>)
 8012b94:	78bb      	ldrb	r3, [r7, #2]
 8012b96:	7013      	strb	r3, [r2, #0]
 8012b98:	e033      	b.n	8012c02 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_CALIBASE_SET_TYPE){  // Calibase Code: 'C' + 'Type'
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b43      	cmp	r3, #67	; 0x43
 8012ba0:	d104      	bne.n	8012bac <AnalyserCMD+0x38>
		calibase_type = data[1];
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	785a      	ldrb	r2, [r3, #1]
 8012ba6:	4b71      	ldr	r3, [pc, #452]	; (8012d6c <AnalyserCMD+0x1f8>)
 8012ba8:	701a      	strb	r2, [r3, #0]
 8012baa:	e02a      	b.n	8012c02 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_SET_REAL_TIME){
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b54      	cmp	r3, #84	; 0x54
 8012bb2:	d119      	bne.n	8012be8 <AnalyserCMD+0x74>
		uint8_t datatime[6];
		for(int i=0;i<6;i++){
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	617b      	str	r3, [r7, #20]
 8012bb8:	e00d      	b.n	8012bd6 <AnalyserCMD+0x62>
			datatime[i] = data[i+1];
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	7819      	ldrb	r1, [r3, #0]
 8012bc4:	f107 0208 	add.w	r2, r7, #8
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	4413      	add	r3, r2
 8012bcc:	460a      	mov	r2, r1
 8012bce:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<6;i++){
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	617b      	str	r3, [r7, #20]
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	2b05      	cmp	r3, #5
 8012bda:	ddee      	ble.n	8012bba <AnalyserCMD+0x46>
		}
		RTC_SetTime(datatime);
 8012bdc:	f107 0308 	add.w	r3, r7, #8
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7ff f873 	bl	8011ccc <RTC_SetTime>
 8012be6:	e00c      	b.n	8012c02 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_READ_REAL_TIME){
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b74      	cmp	r3, #116	; 0x74
 8012bee:	d102      	bne.n	8012bf6 <AnalyserCMD+0x82>
		UsbSendDateTime();
 8012bf0:	f000 fa3c 	bl	801306c <UsbSendDateTime>
 8012bf4:	e005      	b.n	8012c02 <AnalyserCMD+0x8e>
	}else if(data[0]==CMD_FRAM_ERASE){
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	2b45      	cmp	r3, #69	; 0x45
 8012bfc:	d101      	bne.n	8012c02 <AnalyserCMD+0x8e>
		MB85RS_erase();
 8012bfe:	f7fe fefb 	bl	80119f8 <MB85RS_erase>
	}
	if(isCalibaseMode) return;
 8012c02:	4b58      	ldr	r3, [pc, #352]	; (8012d64 <AnalyserCMD+0x1f0>)
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f040 80a2 	bne.w	8012d50 <AnalyserCMD+0x1dc>
#endif

	/* kiểm tra khớp địa chỉ */
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f040 809e 	bne.w	8012d54 <AnalyserCMD+0x1e0>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3302      	adds	r3, #2
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	f040 8098 	bne.w	8012d54 <AnalyserCMD+0x1e0>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	3303      	adds	r3, #3
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	f040 8092 	bne.w	8012d54 <AnalyserCMD+0x1e0>
	/* Kiểm tra CRC */
	if(length==7)	// các lệnh Get có độ dài 7byte
 8012c30:	78fb      	ldrb	r3, [r7, #3]
 8012c32:	2b07      	cmp	r3, #7
 8012c34:	d11b      	bne.n	8012c6e <AnalyserCMD+0xfa>
	{
		crc = CalculateCRC(data, 1, 4);
 8012c36:	2204      	movs	r2, #4
 8012c38:	2101      	movs	r1, #1
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f7ff fdd8 	bl	80127f0 <CalculateCRC>
 8012c40:	4603      	mov	r3, r0
 8012c42:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012c44:	8a7b      	ldrh	r3, [r7, #18]
 8012c46:	0a1b      	lsrs	r3, r3, #8
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012c4e:	8a7b      	ldrh	r3, [r7, #18]
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012c54:	7c3a      	ldrb	r2, [r7, #16]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3305      	adds	r3, #5
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d17b      	bne.n	8012d58 <AnalyserCMD+0x1e4>
 8012c60:	7c7a      	ldrb	r2, [r7, #17]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	3306      	adds	r3, #6
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d01e      	beq.n	8012caa <AnalyserCMD+0x136>
 8012c6c:	e074      	b.n	8012d58 <AnalyserCMD+0x1e4>
	}else if(length==13) // lệnh Set Time RTC có độ dài 13 byte
 8012c6e:	78fb      	ldrb	r3, [r7, #3]
 8012c70:	2b0d      	cmp	r3, #13
 8012c72:	d11a      	bne.n	8012caa <AnalyserCMD+0x136>
	{
		crc = CalculateCRC(data, 1, 10);
 8012c74:	220a      	movs	r2, #10
 8012c76:	2101      	movs	r1, #1
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7ff fdb9 	bl	80127f0 <CalculateCRC>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	827b      	strh	r3, [r7, #18]
		crcval[0] = (uint8_t)((crc & 0xFF00)>>8);
 8012c82:	8a7b      	ldrh	r3, [r7, #18]
 8012c84:	0a1b      	lsrs	r3, r3, #8
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	743b      	strb	r3, [r7, #16]
		crcval[1] = (uint8_t)(crc & 0x00FF);
 8012c8c:	8a7b      	ldrh	r3, [r7, #18]
 8012c8e:	b2db      	uxtb	r3, r3
 8012c90:	747b      	strb	r3, [r7, #17]
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012c92:	7c3a      	ldrb	r2, [r7, #16]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	330b      	adds	r3, #11
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d15e      	bne.n	8012d5c <AnalyserCMD+0x1e8>
 8012c9e:	7c7a      	ldrb	r2, [r7, #17]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	330c      	adds	r3, #12
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d158      	bne.n	8012d5c <AnalyserCMD+0x1e8>
	}


	if(data[4]==CMD_CHECKBOARD)
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	3304      	adds	r3, #4
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b31      	cmp	r3, #49	; 0x31
 8012cb2:	d104      	bne.n	8012cbe <AnalyserCMD+0x14a>
	{
		Response_CheckAddress(typeconnect);
 8012cb4:	78bb      	ldrb	r3, [r7, #2]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f85c 	bl	8012d74 <Response_CheckAddress>
 8012cbc:	e04f      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4]==CMD_GETBOARDDATA)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	3304      	adds	r3, #4
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	2b32      	cmp	r3, #50	; 0x32
 8012cc6:	d105      	bne.n	8012cd4 <AnalyserCMD+0x160>
	{
		Responce_GetBoardData(true,typeconnect);
 8012cc8:	78bb      	ldrb	r3, [r7, #2]
 8012cca:	4619      	mov	r1, r3
 8012ccc:	2001      	movs	r0, #1
 8012cce:	f000 f88d 	bl	8012dec <Responce_GetBoardData>
 8012cd2:	e044      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] == CMD_GETBOARDDATAFULL)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	3304      	adds	r3, #4
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	2b33      	cmp	r3, #51	; 0x33
 8012cdc:	d105      	bne.n	8012cea <AnalyserCMD+0x176>
	{
		Responce_GetBoardData(false, typeconnect);
 8012cde:	78bb      	ldrb	r3, [r7, #2]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	f000 f882 	bl	8012dec <Responce_GetBoardData>
 8012ce8:	e039      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] == CMD_SETTIMERTC)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	3304      	adds	r3, #4
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b34      	cmp	r3, #52	; 0x34
 8012cf2:	d103      	bne.n	8012cfc <AnalyserCMD+0x188>
	{
		Responce_SetTimeRTC(data);
 8012cf4:	6878      	ldr	r0, [r7, #4]
 8012cf6:	f000 f945 	bl	8012f84 <Responce_SetTimeRTC>
 8012cfa:	e030      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] == CMD_SETAUTOSCANON){
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	3304      	adds	r3, #4
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	2b35      	cmp	r3, #53	; 0x35
 8012d04:	d103      	bne.n	8012d0e <AnalyserCMD+0x19a>
		autoscan = true;
 8012d06:	4b1a      	ldr	r3, [pc, #104]	; (8012d70 <AnalyserCMD+0x1fc>)
 8012d08:	2201      	movs	r2, #1
 8012d0a:	701a      	strb	r2, [r3, #0]
 8012d0c:	e027      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] == CMD_SETAUTOSCANOFF){
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	3304      	adds	r3, #4
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	2b36      	cmp	r3, #54	; 0x36
 8012d16:	d103      	bne.n	8012d20 <AnalyserCMD+0x1ac>
		autoscan = false;
 8012d18:	4b15      	ldr	r3, [pc, #84]	; (8012d70 <AnalyserCMD+0x1fc>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	701a      	strb	r2, [r3, #0]
 8012d1e:	e01e      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] >= CMD_GETGAMESAVEBASE){
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	3304      	adds	r3, #4
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	2b40      	cmp	r3, #64	; 0x40
 8012d28:	d90a      	bls.n	8012d40 <AnalyserCMD+0x1cc>
		Responce_GetDataGameSave(typeconnect,data[4]-CMD_GETGAMESAVEBASE);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	3b41      	subs	r3, #65	; 0x41
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	78bb      	ldrb	r3, [r7, #2]
 8012d36:	4611      	mov	r1, r2
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f000 f945 	bl	8012fc8 <Responce_GetDataGameSave>
 8012d3e:	e00e      	b.n	8012d5e <AnalyserCMD+0x1ea>
	}else if(data[4] == CMD_ERASEALLGAME){
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	3304      	adds	r3, #4
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	2b37      	cmp	r3, #55	; 0x37
 8012d48:	d109      	bne.n	8012d5e <AnalyserCMD+0x1ea>
		Responce_EraseGameSave();
 8012d4a:	f000 f989 	bl	8013060 <Responce_EraseGameSave>
 8012d4e:	e006      	b.n	8012d5e <AnalyserCMD+0x1ea>
	if(isCalibaseMode) return;
 8012d50:	bf00      	nop
 8012d52:	e004      	b.n	8012d5e <AnalyserCMD+0x1ea>
	if(data[1] != ADDRESSBOARD_PART0 || data[2] != ADDRESSBOARD_PART1 || data[3] != ADDRESSBOARD_PART2) return;
 8012d54:	bf00      	nop
 8012d56:	e002      	b.n	8012d5e <AnalyserCMD+0x1ea>
		if(crcval[0] != data[5] || crcval[1] != data[6]) return;
 8012d58:	bf00      	nop
 8012d5a:	e000      	b.n	8012d5e <AnalyserCMD+0x1ea>
		if(crcval[0] != data[11] || crcval[1] != data[12]) return;
 8012d5c:	bf00      	nop
	}
}
 8012d5e:	3718      	adds	r7, #24
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	200090e2 	.word	0x200090e2
 8012d68:	200000ff 	.word	0x200000ff
 8012d6c:	200090e1 	.word	0x200090e1
 8012d70:	200090be 	.word	0x200090be

08012d74 <Response_CheckAddress>:


void Response_CheckAddress(TypeConnection typeconnect)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[7];
	uint16_t crc;
	data[0] = CMD_BEGIN;
 8012d7e:	233a      	movs	r3, #58	; 0x3a
 8012d80:	733b      	strb	r3, [r7, #12]
	data[1] = ADDRESSBOARD_PART0;
 8012d82:	2300      	movs	r3, #0
 8012d84:	737b      	strb	r3, [r7, #13]
	data[2] = ADDRESSBOARD_PART1;
 8012d86:	2300      	movs	r3, #0
 8012d88:	73bb      	strb	r3, [r7, #14]
	data[3] = ADDRESSBOARD_PART2;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	73fb      	strb	r3, [r7, #15]
	data[4] = CMD_CHECKBOARD;
 8012d8e:	2331      	movs	r3, #49	; 0x31
 8012d90:	743b      	strb	r3, [r7, #16]
	crc = CalculateCRC(data, 1, 4);
 8012d92:	f107 030c 	add.w	r3, r7, #12
 8012d96:	2204      	movs	r2, #4
 8012d98:	2101      	movs	r1, #1
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7ff fd28 	bl	80127f0 <CalculateCRC>
 8012da0:	4603      	mov	r3, r0
 8012da2:	82fb      	strh	r3, [r7, #22]
	data[5] = (uint8_t)((crc & 0xFF00)>>8);
 8012da4:	8afb      	ldrh	r3, [r7, #22]
 8012da6:	0a1b      	lsrs	r3, r3, #8
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t)(crc & 0x00FF);
 8012dae:	8afb      	ldrh	r3, [r7, #22]
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	74bb      	strb	r3, [r7, #18]

	if(typeconnect ==RS485){
 8012db4:	79fb      	ldrb	r3, [r7, #7]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d108      	bne.n	8012dcc <Response_CheckAddress+0x58>
		HAL_UART_Transmit(&huart1, data, 7,1000);
 8012dba:	f107 010c 	add.w	r1, r7, #12
 8012dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012dc2:	2207      	movs	r2, #7
 8012dc4:	4808      	ldr	r0, [pc, #32]	; (8012de8 <Response_CheckAddress+0x74>)
 8012dc6:	f7f7 fa2c 	bl	800a222 <HAL_UART_Transmit>
	}else if(typeconnect == USB){
		CDC_Transmit_FS(data, 7);
	}else if(typeconnect == BLE){

	}
}
 8012dca:	e008      	b.n	8012dde <Response_CheckAddress+0x6a>
	}else if(typeconnect == USB){
 8012dcc:	79fb      	ldrb	r3, [r7, #7]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d105      	bne.n	8012dde <Response_CheckAddress+0x6a>
		CDC_Transmit_FS(data, 7);
 8012dd2:	f107 030c 	add.w	r3, r7, #12
 8012dd6:	2107      	movs	r1, #7
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fe f823 	bl	8010e24 <CDC_Transmit_FS>
}
 8012dde:	bf00      	nop
 8012de0:	3718      	adds	r7, #24
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	200029cc 	.word	0x200029cc

08012dec <Responce_GetBoardData>:
/* autoSend==true : chỉ gửi dữ liệu khi có sự thay đổi (mainChange==true)
 * 					nếu mainChange==false thì gửi lại Response thôi
 * autoSend==false : gửi toàn bộ dữ liệu bất chấp mainChange */
void Responce_GetBoardData(bool autoSend, TypeConnection typeconnect)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b094      	sub	sp, #80	; 0x50
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	4603      	mov	r3, r0
 8012df4:	460a      	mov	r2, r1
 8012df6:	71fb      	strb	r3, [r7, #7]
 8012df8:	4613      	mov	r3, r2
 8012dfa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[53];
	uint8_t pieceA,pieceB,pie=0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t crc;

	data[0] = CMD_BEGIN;
 8012e02:	233a      	movs	r3, #58	; 0x3a
 8012e04:	723b      	strb	r3, [r7, #8]
	data[1] = ADDRESSBOARD_PART0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	727b      	strb	r3, [r7, #9]
	data[2] = ADDRESSBOARD_PART1;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	72bb      	strb	r3, [r7, #10]
	data[3] = ADDRESSBOARD_PART2;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	72fb      	strb	r3, [r7, #11]
	data[4] = CMD_GETBOARDDATA;
 8012e12:	2332      	movs	r3, #50	; 0x32
 8012e14:	733b      	strb	r3, [r7, #12]
	if(mainChange==true || autoSend==false)
 8012e16:	4b57      	ldr	r3, [pc, #348]	; (8012f74 <Responce_GetBoardData+0x188>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d105      	bne.n	8012e2a <Responce_GetBoardData+0x3e>
 8012e1e:	79fb      	ldrb	r3, [r7, #7]
 8012e20:	f083 0301 	eor.w	r3, r3, #1
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d076      	beq.n	8012f18 <Responce_GetBoardData+0x12c>
	{
	/* gắn datamain vào 32 byte tiếp theo */
		for(int i=0;i<32;i++){
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e2e:	e02e      	b.n	8012e8e <Responce_GetBoardData+0xa2>
			pieceA = byteToPiece(datamain_old[pie]);
 8012e30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e34:	4a50      	ldr	r2, [pc, #320]	; (8012f78 <Responce_GetBoardData+0x18c>)
 8012e36:	5cd3      	ldrb	r3, [r2, r3]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7ff fe29 	bl	8012a90 <byteToPiece>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			pie++;
 8012e44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e48:	3301      	adds	r3, #1
 8012e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pieceB = byteToPiece(datamain_old[pie]);
 8012e4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e52:	4a49      	ldr	r2, [pc, #292]	; (8012f78 <Responce_GetBoardData+0x18c>)
 8012e54:	5cd3      	ldrb	r3, [r2, r3]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff fe1a 	bl	8012a90 <byteToPiece>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			pie++;
 8012e62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012e66:	3301      	adds	r3, #1
 8012e68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			data[i+5]=(pieceA<<4)+pieceB;
 8012e6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8012e70:	011b      	lsls	r3, r3, #4
 8012e72:	b2d9      	uxtb	r1, r3
 8012e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e76:	3305      	adds	r3, #5
 8012e78:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8012e7c:	440a      	add	r2, r1
 8012e7e:	b2d2      	uxtb	r2, r2
 8012e80:	3350      	adds	r3, #80	; 0x50
 8012e82:	443b      	add	r3, r7
 8012e84:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<32;i++){
 8012e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e90:	2b1f      	cmp	r3, #31
 8012e92:	ddcd      	ble.n	8012e30 <Responce_GetBoardData+0x44>
		}
		for(int i=0;i<14;i++){
 8012e94:	2300      	movs	r3, #0
 8012e96:	647b      	str	r3, [r7, #68]	; 0x44
 8012e98:	e00c      	b.n	8012eb4 <Responce_GetBoardData+0xc8>
			data[37+i] = data_chessclock[i];
 8012e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e9c:	3325      	adds	r3, #37	; 0x25
 8012e9e:	4937      	ldr	r1, [pc, #220]	; (8012f7c <Responce_GetBoardData+0x190>)
 8012ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ea2:	440a      	add	r2, r1
 8012ea4:	7812      	ldrb	r2, [r2, #0]
 8012ea6:	3350      	adds	r3, #80	; 0x50
 8012ea8:	443b      	add	r3, r7
 8012eaa:	f803 2c48 	strb.w	r2, [r3, #-72]
		for(int i=0;i<14;i++){
 8012eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8012eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb6:	2b0d      	cmp	r3, #13
 8012eb8:	ddef      	ble.n	8012e9a <Responce_GetBoardData+0xae>
		}
		crc = CalculateCRC(data, 1, 50);
 8012eba:	f107 0308 	add.w	r3, r7, #8
 8012ebe:	2232      	movs	r2, #50	; 0x32
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7ff fc94 	bl	80127f0 <CalculateCRC>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[51] = (uint8_t)((crc &0xFF00)>>8);
 8012ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ed2:	0a1b      	lsrs	r3, r3, #8
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		data[52] = (uint8_t)(crc &0x00FF);
 8012edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		/* Send Data*/
		if(typeconnect ==RS485){
 8012ee6:	79bb      	ldrb	r3, [r7, #6]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d108      	bne.n	8012efe <Responce_GetBoardData+0x112>
			HAL_UART_Transmit(&huart1, data, 53,2000);
 8012eec:	f107 0108 	add.w	r1, r7, #8
 8012ef0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8012ef4:	2235      	movs	r2, #53	; 0x35
 8012ef6:	4822      	ldr	r0, [pc, #136]	; (8012f80 <Responce_GetBoardData+0x194>)
 8012ef8:	f7f7 f993 	bl	800a222 <HAL_UART_Transmit>
 8012efc:	e008      	b.n	8012f10 <Responce_GetBoardData+0x124>
		}else if(typeconnect == USB){
 8012efe:	79bb      	ldrb	r3, [r7, #6]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d105      	bne.n	8012f10 <Responce_GetBoardData+0x124>
			CDC_Transmit_FS(data, 53);
 8012f04:	f107 0308 	add.w	r3, r7, #8
 8012f08:	2135      	movs	r1, #53	; 0x35
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fd ff8a 	bl	8010e24 <CDC_Transmit_FS>
		}else if(typeconnect == BLE){

		}
		mainChange=false;
 8012f10:	4b18      	ldr	r3, [pc, #96]	; (8012f74 <Responce_GetBoardData+0x188>)
 8012f12:	2200      	movs	r2, #0
 8012f14:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(data, 7);
		}else if(typeconnect == BLE){

		}
	}
}
 8012f16:	e028      	b.n	8012f6a <Responce_GetBoardData+0x17e>
		crc = CalculateCRC(data, 1, 4);
 8012f18:	f107 0308 	add.w	r3, r7, #8
 8012f1c:	2204      	movs	r2, #4
 8012f1e:	2101      	movs	r1, #1
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7ff fc65 	bl	80127f0 <CalculateCRC>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data[5] = (uint8_t)((crc &0xFF00)>>8);
 8012f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f30:	0a1b      	lsrs	r3, r3, #8
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	737b      	strb	r3, [r7, #13]
		data[6] = (uint8_t)(crc &0x00FF);
 8012f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f3c:	b2db      	uxtb	r3, r3
 8012f3e:	73bb      	strb	r3, [r7, #14]
		if(typeconnect ==RS485){
 8012f40:	79bb      	ldrb	r3, [r7, #6]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d108      	bne.n	8012f58 <Responce_GetBoardData+0x16c>
			HAL_UART_Transmit(&huart1, data, 7,1000);
 8012f46:	f107 0108 	add.w	r1, r7, #8
 8012f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f4e:	2207      	movs	r2, #7
 8012f50:	480b      	ldr	r0, [pc, #44]	; (8012f80 <Responce_GetBoardData+0x194>)
 8012f52:	f7f7 f966 	bl	800a222 <HAL_UART_Transmit>
}
 8012f56:	e008      	b.n	8012f6a <Responce_GetBoardData+0x17e>
		}else if(typeconnect == USB){
 8012f58:	79bb      	ldrb	r3, [r7, #6]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d105      	bne.n	8012f6a <Responce_GetBoardData+0x17e>
			CDC_Transmit_FS(data, 7);
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	2107      	movs	r1, #7
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fd ff5d 	bl	8010e24 <CDC_Transmit_FS>
}
 8012f6a:	bf00      	nop
 8012f6c:	3750      	adds	r7, #80	; 0x50
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	200000fe 	.word	0x200000fe
 8012f78:	20008f20 	.word	0x20008f20
 8012f7c:	20007c90 	.word	0x20007c90
 8012f80:	200029cc 	.word	0x200029cc

08012f84 <Responce_SetTimeRTC>:
void Responce_SetTimeRTC(uint8_t *dat)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
	uint8_t datatime[6];
	for(int i=0;i<6;i++){
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e00d      	b.n	8012fae <Responce_SetTimeRTC+0x2a>
		datatime[i] = dat[i+5];
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	3305      	adds	r3, #5
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	4413      	add	r3, r2
 8012f9a:	7819      	ldrb	r1, [r3, #0]
 8012f9c:	f107 020c 	add.w	r2, r7, #12
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	460a      	mov	r2, r1
 8012fa6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	3301      	adds	r3, #1
 8012fac:	617b      	str	r3, [r7, #20]
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	2b05      	cmp	r3, #5
 8012fb2:	ddee      	ble.n	8012f92 <Responce_SetTimeRTC+0xe>
	}
	RTC_SetTime(datatime);
 8012fb4:	f107 030c 	add.w	r3, r7, #12
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7fe fe87 	bl	8011ccc <RTC_SetTime>
}
 8012fbe:	bf00      	nop
 8012fc0:	3718      	adds	r7, #24
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
	...

08012fc8 <Responce_GetDataGameSave>:

void Responce_GetDataGameSave(TypeConnection typeconnect,uint8_t part)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	4602      	mov	r2, r0
 8012fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012fd6:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012fda:	701a      	strb	r2, [r3, #0]
 8012fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012fe0:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012fe4:	460a      	mov	r2, r1
 8012fe6:	701a      	strb	r2, [r3, #0]
	uint8_t data[GAMESAVELENGTH];
	if(part > GAMESAVEPARTS) return;
 8012fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012fec:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8012ff4:	d82d      	bhi.n	8013052 <Responce_GetDataGameSave+0x8a>
	MB85RS_read(part*GAMESAVELENGTH, data, GAMESAVELENGTH);
 8012ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012ffa:	f2a3 2302 	subw	r3, r3, #514	; 0x202
 8012ffe:	781b      	ldrb	r3, [r3, #0]
 8013000:	025b      	lsls	r3, r3, #9
 8013002:	4618      	mov	r0, r3
 8013004:	f107 0308 	add.w	r3, r7, #8
 8013008:	f44f 7200 	mov.w	r2, #512	; 0x200
 801300c:	4619      	mov	r1, r3
 801300e:	f7fe fcc3 	bl	8011998 <MB85RS_read>

	if(typeconnect ==RS485){
 8013012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013016:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d109      	bne.n	8013034 <Responce_GetDataGameSave+0x6c>
			HAL_UART_Transmit(&huart1, data, GAMESAVELENGTH, 1000);
 8013020:	f107 0108 	add.w	r1, r7, #8
 8013024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013028:	f44f 7200 	mov.w	r2, #512	; 0x200
 801302c:	480b      	ldr	r0, [pc, #44]	; (801305c <Responce_GetDataGameSave+0x94>)
 801302e:	f7f7 f8f8 	bl	800a222 <HAL_UART_Transmit>
 8013032:	e00f      	b.n	8013054 <Responce_GetDataGameSave+0x8c>
	}else if(typeconnect == USB){
 8013034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013038:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b01      	cmp	r3, #1
 8013040:	d108      	bne.n	8013054 <Responce_GetDataGameSave+0x8c>
		CDC_Transmit_FS(data, GAMESAVELENGTH);
 8013042:	f107 0308 	add.w	r3, r7, #8
 8013046:	f44f 7100 	mov.w	r1, #512	; 0x200
 801304a:	4618      	mov	r0, r3
 801304c:	f7fd feea 	bl	8010e24 <CDC_Transmit_FS>
 8013050:	e000      	b.n	8013054 <Responce_GetDataGameSave+0x8c>
	if(part > GAMESAVEPARTS) return;
 8013052:	bf00      	nop
	}else if(typeconnect == BLE){

	}
}
 8013054:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	200029cc 	.word	0x200029cc

08013060 <Responce_EraseGameSave>:
void Responce_EraseGameSave()
{
 8013060:	b580      	push	{r7, lr}
 8013062:	af00      	add	r7, sp, #0
	MB85RS_erase();
 8013064:	f7fe fcc8 	bl	80119f8 <MB85RS_erase>
}
 8013068:	bf00      	nop
 801306a:	bd80      	pop	{r7, pc}

0801306c <UsbSendDateTime>:


void UsbSendDateTime()
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b088      	sub	sp, #32
 8013070:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	uint8_t dat[7];
	RTC_TimeTypeDef 	sTime;
	RTC_DateTypeDef 	sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8013072:	1d3b      	adds	r3, r7, #4
 8013074:	2200      	movs	r2, #0
 8013076:	4619      	mov	r1, r3
 8013078:	4810      	ldr	r0, [pc, #64]	; (80130bc <UsbSendDateTime+0x50>)
 801307a:	f7f4 f9d1 	bl	8007420 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 801307e:	463b      	mov	r3, r7
 8013080:	2200      	movs	r2, #0
 8013082:	4619      	mov	r1, r3
 8013084:	480d      	ldr	r0, [pc, #52]	; (80130bc <UsbSendDateTime+0x50>)
 8013086:	f7f4 faad 	bl	80075e4 <HAL_RTC_GetDate>
	dat[0] = sTime.Seconds;
 801308a:	79bb      	ldrb	r3, [r7, #6]
 801308c:	763b      	strb	r3, [r7, #24]
	dat[1] = sTime.Minutes;
 801308e:	797b      	ldrb	r3, [r7, #5]
 8013090:	767b      	strb	r3, [r7, #25]
	dat[2] = sTime.Hours;
 8013092:	793b      	ldrb	r3, [r7, #4]
 8013094:	76bb      	strb	r3, [r7, #26]
	dat[3] = sDate.Date;
 8013096:	78bb      	ldrb	r3, [r7, #2]
 8013098:	76fb      	strb	r3, [r7, #27]
	dat[4] = sDate.Month;
 801309a:	787b      	ldrb	r3, [r7, #1]
 801309c:	773b      	strb	r3, [r7, #28]
	dat[5] = sDate.Year;
 801309e:	78fb      	ldrb	r3, [r7, #3]
 80130a0:	777b      	strb	r3, [r7, #29]
	dat[6] = NEWLINE;
 80130a2:	23ff      	movs	r3, #255	; 0xff
 80130a4:	77bb      	strb	r3, [r7, #30]
	CDC_Transmit_FS(dat, 7);
 80130a6:	f107 0318 	add.w	r3, r7, #24
 80130aa:	2107      	movs	r1, #7
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7fd feb9 	bl	8010e24 <CDC_Transmit_FS>
#endif
}
 80130b2:	bf00      	nop
 80130b4:	3720      	adds	r7, #32
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	2000248c 	.word	0x2000248c

080130c0 <UsbSendDataCalibase>:

void UsbSendDataCalibase()
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b08a      	sub	sp, #40	; 0x28
 80130c4:	af00      	add	r7, sp, #0
#ifdef CALIBASE
	if(isCalibaseMode==true){
 80130c6:	4b5e      	ldr	r3, [pc, #376]	; (8013240 <UsbSendDataCalibase+0x180>)
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 80b3 	beq.w	8013236 <UsbSendDataCalibase+0x176>
		if(calibase_type>17) calibase_type=0;
 80130d0:	4b5c      	ldr	r3, [pc, #368]	; (8013244 <UsbSendDataCalibase+0x184>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b11      	cmp	r3, #17
 80130d6:	d902      	bls.n	80130de <UsbSendDataCalibase+0x1e>
 80130d8:	4b5a      	ldr	r3, [pc, #360]	; (8013244 <UsbSendDataCalibase+0x184>)
 80130da:	2200      	movs	r2, #0
 80130dc:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 80130de:	2300      	movs	r3, #0
 80130e0:	627b      	str	r3, [r7, #36]	; 0x24
 80130e2:	e011      	b.n	8013108 <UsbSendDataCalibase+0x48>
			dataUsbCalibase[i]= (uint8_t)datapieces[calibase_type][i][PULSES];
 80130e4:	4b57      	ldr	r3, [pc, #348]	; (8013244 <UsbSendDataCalibase+0x184>)
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	4957      	ldr	r1, [pc, #348]	; (8013248 <UsbSendDataCalibase+0x188>)
 80130ea:	019a      	lsls	r2, r3, #6
 80130ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ee:	4413      	add	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	440b      	add	r3, r1
 80130f4:	885b      	ldrh	r3, [r3, #2]
 80130f6:	b2d9      	uxtb	r1, r3
 80130f8:	4a54      	ldr	r2, [pc, #336]	; (801324c <UsbSendDataCalibase+0x18c>)
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	4413      	add	r3, r2
 80130fe:	460a      	mov	r2, r1
 8013100:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<64;i++){
 8013102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013104:	3301      	adds	r3, #1
 8013106:	627b      	str	r3, [r7, #36]	; 0x24
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	2b3f      	cmp	r3, #63	; 0x3f
 801310c:	ddea      	ble.n	80130e4 <UsbSendDataCalibase+0x24>
		}
		int inx =0;
 801310e:	2300      	movs	r3, #0
 8013110:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 8013112:	2300      	movs	r3, #0
 8013114:	61fb      	str	r3, [r7, #28]
 8013116:	e033      	b.n	8013180 <UsbSendDataCalibase+0xc0>
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]/254;
 8013118:	4b4a      	ldr	r3, [pc, #296]	; (8013244 <UsbSendDataCalibase+0x184>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	494a      	ldr	r1, [pc, #296]	; (8013248 <UsbSendDataCalibase+0x188>)
 801311e:	019a      	lsls	r2, r3, #6
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	4413      	add	r3, r2
 8013124:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8013128:	085b      	lsrs	r3, r3, #1
 801312a:	4a49      	ldr	r2, [pc, #292]	; (8013250 <UsbSendDataCalibase+0x190>)
 801312c:	fba2 2303 	umull	r2, r3, r2, r3
 8013130:	099b      	lsrs	r3, r3, #6
 8013132:	b29a      	uxth	r2, r3
 8013134:	6a3b      	ldr	r3, [r7, #32]
 8013136:	3340      	adds	r3, #64	; 0x40
 8013138:	b2d1      	uxtb	r1, r2
 801313a:	4a44      	ldr	r2, [pc, #272]	; (801324c <UsbSendDataCalibase+0x18c>)
 801313c:	54d1      	strb	r1, [r2, r3]
			inx++;
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	3301      	adds	r3, #1
 8013142:	623b      	str	r3, [r7, #32]
			dataUsbCalibase[64+inx] = datapieces[calibase_type][i][PERIOD]%254;
 8013144:	4b3f      	ldr	r3, [pc, #252]	; (8013244 <UsbSendDataCalibase+0x184>)
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	493f      	ldr	r1, [pc, #252]	; (8013248 <UsbSendDataCalibase+0x188>)
 801314a:	019a      	lsls	r2, r3, #6
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	4413      	add	r3, r2
 8013150:	f831 2023 	ldrh.w	r2, [r1, r3, lsl #2]
 8013154:	0853      	lsrs	r3, r2, #1
 8013156:	493e      	ldr	r1, [pc, #248]	; (8013250 <UsbSendDataCalibase+0x190>)
 8013158:	fba1 1303 	umull	r1, r3, r1, r3
 801315c:	0999      	lsrs	r1, r3, #6
 801315e:	460b      	mov	r3, r1
 8013160:	01db      	lsls	r3, r3, #7
 8013162:	1a5b      	subs	r3, r3, r1
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	1ad3      	subs	r3, r2, r3
 8013168:	b29a      	uxth	r2, r3
 801316a:	6a3b      	ldr	r3, [r7, #32]
 801316c:	3340      	adds	r3, #64	; 0x40
 801316e:	b2d1      	uxtb	r1, r2
 8013170:	4a36      	ldr	r2, [pc, #216]	; (801324c <UsbSendDataCalibase+0x18c>)
 8013172:	54d1      	strb	r1, [r2, r3]
			inx++;
 8013174:	6a3b      	ldr	r3, [r7, #32]
 8013176:	3301      	adds	r3, #1
 8013178:	623b      	str	r3, [r7, #32]
		for(int i=0;i<64;i++){
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	3301      	adds	r3, #1
 801317e:	61fb      	str	r3, [r7, #28]
 8013180:	69fb      	ldr	r3, [r7, #28]
 8013182:	2b3f      	cmp	r3, #63	; 0x3f
 8013184:	ddc8      	ble.n	8013118 <UsbSendDataCalibase+0x58>
		}
		for(int i=0;i<64;i++){
 8013186:	2300      	movs	r3, #0
 8013188:	61bb      	str	r3, [r7, #24]
 801318a:	e00a      	b.n	80131a2 <UsbSendDataCalibase+0xe2>
			dataUsbCalibase[192+i] = datamain[i];
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	33c0      	adds	r3, #192	; 0xc0
 8013190:	4930      	ldr	r1, [pc, #192]	; (8013254 <UsbSendDataCalibase+0x194>)
 8013192:	69ba      	ldr	r2, [r7, #24]
 8013194:	440a      	add	r2, r1
 8013196:	7811      	ldrb	r1, [r2, #0]
 8013198:	4a2c      	ldr	r2, [pc, #176]	; (801324c <UsbSendDataCalibase+0x18c>)
 801319a:	54d1      	strb	r1, [r2, r3]
		for(int i=0;i<64;i++){
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	3301      	adds	r3, #1
 80131a0:	61bb      	str	r3, [r7, #24]
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	2b3f      	cmp	r3, #63	; 0x3f
 80131a6:	ddf1      	ble.n	801318c <UsbSendDataCalibase+0xcc>
		}

		RTC_TimeTypeDef sTime = {0};
 80131a8:	1d3b      	adds	r3, r7, #4
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	605a      	str	r2, [r3, #4]
 80131b0:	609a      	str	r2, [r3, #8]
 80131b2:	60da      	str	r2, [r3, #12]
 80131b4:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80131b6:	2300      	movs	r3, #0
 80131b8:	603b      	str	r3, [r7, #0]
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80131ba:	1d3b      	adds	r3, r7, #4
 80131bc:	2200      	movs	r2, #0
 80131be:	4619      	mov	r1, r3
 80131c0:	4825      	ldr	r0, [pc, #148]	; (8013258 <UsbSendDataCalibase+0x198>)
 80131c2:	f7f4 f92d 	bl	8007420 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80131c6:	463b      	mov	r3, r7
 80131c8:	2200      	movs	r2, #0
 80131ca:	4619      	mov	r1, r3
 80131cc:	4822      	ldr	r0, [pc, #136]	; (8013258 <UsbSendDataCalibase+0x198>)
 80131ce:	f7f4 fa09 	bl	80075e4 <HAL_RTC_GetDate>

		dataUsbCalibase[256] = sTime.Seconds;
 80131d2:	79ba      	ldrb	r2, [r7, #6]
 80131d4:	4b1d      	ldr	r3, [pc, #116]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131d6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
		dataUsbCalibase[257] = sTime.Minutes;
 80131da:	797a      	ldrb	r2, [r7, #5]
 80131dc:	4b1b      	ldr	r3, [pc, #108]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131de:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		dataUsbCalibase[258] = sTime.Hours;
 80131e2:	793a      	ldrb	r2, [r7, #4]
 80131e4:	4b19      	ldr	r3, [pc, #100]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131e6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		dataUsbCalibase[259] = sDate.Date;
 80131ea:	78ba      	ldrb	r2, [r7, #2]
 80131ec:	4b17      	ldr	r3, [pc, #92]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131ee:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		dataUsbCalibase[260] = sDate.Month;
 80131f2:	787a      	ldrb	r2, [r7, #1]
 80131f4:	4b15      	ldr	r3, [pc, #84]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		dataUsbCalibase[261] = sDate.Year;
 80131fa:	78fa      	ldrb	r2, [r7, #3]
 80131fc:	4b13      	ldr	r3, [pc, #76]	; (801324c <UsbSendDataCalibase+0x18c>)
 80131fe:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105



		dataUsbCalibase[262]=255;
 8013202:	4b12      	ldr	r3, [pc, #72]	; (801324c <UsbSendDataCalibase+0x18c>)
 8013204:	22ff      	movs	r2, #255	; 0xff
 8013206:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		if(typeCalibaseConnect==USB){
 801320a:	4b14      	ldr	r3, [pc, #80]	; (801325c <UsbSendDataCalibase+0x19c>)
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	2b01      	cmp	r3, #1
 8013210:	d105      	bne.n	801321e <UsbSendDataCalibase+0x15e>
			CDC_Transmit_FS(dataUsbCalibase,263);
 8013212:	f240 1107 	movw	r1, #263	; 0x107
 8013216:	480d      	ldr	r0, [pc, #52]	; (801324c <UsbSendDataCalibase+0x18c>)
 8013218:	f7fd fe04 	bl	8010e24 <CDC_Transmit_FS>
		}

	}
#endif

}
 801321c:	e00b      	b.n	8013236 <UsbSendDataCalibase+0x176>
		}else if(typeCalibaseConnect==RS485){
 801321e:	4b0f      	ldr	r3, [pc, #60]	; (801325c <UsbSendDataCalibase+0x19c>)
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d107      	bne.n	8013236 <UsbSendDataCalibase+0x176>
			HAL_UART_Transmit(&huart1, dataUsbCalibase, 263, 1000);
 8013226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801322a:	f240 1207 	movw	r2, #263	; 0x107
 801322e:	4907      	ldr	r1, [pc, #28]	; (801324c <UsbSendDataCalibase+0x18c>)
 8013230:	480b      	ldr	r0, [pc, #44]	; (8013260 <UsbSendDataCalibase+0x1a0>)
 8013232:	f7f6 fff6 	bl	800a222 <HAL_UART_Transmit>
}
 8013236:	bf00      	nop
 8013238:	3728      	adds	r7, #40	; 0x28
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	200090e2 	.word	0x200090e2
 8013244:	200090e1 	.word	0x200090e1
 8013248:	20007ce0 	.word	0x20007ce0
 801324c:	200090e4 	.word	0x200090e4
 8013250:	81020409 	.word	0x81020409
 8013254:	20008ee0 	.word	0x20008ee0
 8013258:	2000248c 	.word	0x2000248c
 801325c:	200000ff 	.word	0x200000ff
 8013260:	200029cc 	.word	0x200029cc

08013264 <__libc_init_array>:
 8013264:	b570      	push	{r4, r5, r6, lr}
 8013266:	4d0d      	ldr	r5, [pc, #52]	; (801329c <__libc_init_array+0x38>)
 8013268:	4c0d      	ldr	r4, [pc, #52]	; (80132a0 <__libc_init_array+0x3c>)
 801326a:	1b64      	subs	r4, r4, r5
 801326c:	10a4      	asrs	r4, r4, #2
 801326e:	2600      	movs	r6, #0
 8013270:	42a6      	cmp	r6, r4
 8013272:	d109      	bne.n	8013288 <__libc_init_array+0x24>
 8013274:	4d0b      	ldr	r5, [pc, #44]	; (80132a4 <__libc_init_array+0x40>)
 8013276:	4c0c      	ldr	r4, [pc, #48]	; (80132a8 <__libc_init_array+0x44>)
 8013278:	f000 f82e 	bl	80132d8 <_init>
 801327c:	1b64      	subs	r4, r4, r5
 801327e:	10a4      	asrs	r4, r4, #2
 8013280:	2600      	movs	r6, #0
 8013282:	42a6      	cmp	r6, r4
 8013284:	d105      	bne.n	8013292 <__libc_init_array+0x2e>
 8013286:	bd70      	pop	{r4, r5, r6, pc}
 8013288:	f855 3b04 	ldr.w	r3, [r5], #4
 801328c:	4798      	blx	r3
 801328e:	3601      	adds	r6, #1
 8013290:	e7ee      	b.n	8013270 <__libc_init_array+0xc>
 8013292:	f855 3b04 	ldr.w	r3, [r5], #4
 8013296:	4798      	blx	r3
 8013298:	3601      	adds	r6, #1
 801329a:	e7f2      	b.n	8013282 <__libc_init_array+0x1e>
 801329c:	080138ac 	.word	0x080138ac
 80132a0:	080138ac 	.word	0x080138ac
 80132a4:	080138ac 	.word	0x080138ac
 80132a8:	080138b0 	.word	0x080138b0

080132ac <memcpy>:
 80132ac:	440a      	add	r2, r1
 80132ae:	4291      	cmp	r1, r2
 80132b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80132b4:	d100      	bne.n	80132b8 <memcpy+0xc>
 80132b6:	4770      	bx	lr
 80132b8:	b510      	push	{r4, lr}
 80132ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132c2:	4291      	cmp	r1, r2
 80132c4:	d1f9      	bne.n	80132ba <memcpy+0xe>
 80132c6:	bd10      	pop	{r4, pc}

080132c8 <memset>:
 80132c8:	4402      	add	r2, r0
 80132ca:	4603      	mov	r3, r0
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d100      	bne.n	80132d2 <memset+0xa>
 80132d0:	4770      	bx	lr
 80132d2:	f803 1b01 	strb.w	r1, [r3], #1
 80132d6:	e7f9      	b.n	80132cc <memset+0x4>

080132d8 <_init>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	bf00      	nop
 80132dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132de:	bc08      	pop	{r3}
 80132e0:	469e      	mov	lr, r3
 80132e2:	4770      	bx	lr

080132e4 <_fini>:
 80132e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e6:	bf00      	nop
 80132e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ea:	bc08      	pop	{r3}
 80132ec:	469e      	mov	lr, r3
 80132ee:	4770      	bx	lr
